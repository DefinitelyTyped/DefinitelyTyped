/**
 * An integer number
 */
declare type int = number;

/**
 * A number, potentially with decimals
 */
declare type float = number;

/**
 * An alternative name for the global type Element.
 *
 * UI5 defines its own type sap.ui.core.Element, which, in the scope of the sap.ui.core
 * namespace, hides the global type. As there are other entities in the same namespace
 * that refer to the global Element in their signatures, this naming conflict can cause
 * type mismatches between sap.ui.core code and other code subclassing from it.
 *
 * To avoid these issues, the alternative name can be used in sap.ui.core signatures.
 *
 * @todo check if HTMLElement could be used instead in UI5 method signatures
 */
declare type global_Element = Element;

declare type jQuery<T = HTMLElement> = JQuery<T>;
declare namespace jQuery {
  export type Event = JQuery.Event;
  export type Deferred<T = any> = JQuery.Deferred<T>;
  export type Promise<T = any> = JQuery.Promise<T>;
}

declare namespace QUnit {
  export type Assert = globalThis.Assert;
}

interface JQuery<TElement = HTMLElement> extends Iterable<TElement> {
  /**
   * Adds the given ID reference to the aria-describedby attribute.
   */
  addAriaDescribedBy(
    /**
     * The ID reference of an element
     */
    sId: string,
    /**
     * whether prepend or not
     */
    bPrepend?: boolean
  ): jQuery;

  /**
   * Adds the given ID reference to the aria-labelledby attribute.
   */
  addAriaLabelledBy(
    /**
     * The ID reference of an element
     */
    sId: string,
    /**
     * Whether prepend or not
     */
    bPrepend?: boolean
  ): jQuery;

  /**
   * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
   * @deprecated since 1.106, use sap.ui.core.Element.closestTo instead.
   */
  control(
    /**
     * Whether or not to respect the associated DOM elements to a control via <code>data-sap-ui-related</code> attribute.
     */
    includeRelated?: boolean
  ): Array<import("sap/ui/core/Control").default>;

  /**
   * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
   * @deprecated since 1.106, use sap.ui.core.Element.closestTo instead.
   */
  control(
    /**
     * Parameter to return the control instance at the given index in the array.
     */
    index: int,
    /**
     * Whether or not to respect the associated DOM elements to a control via <code>data-sap-ui-related</code> attribute.
     */
    includeRelated?: boolean
  ): import("sap/ui/core/Control").default | null;

  /**
   * Gets the position of the cursor in an element that supports cursor positioning.
   */
  cursorPos(): int;

  /**
   * Sets the position of the cursor in an element that supports cursor positioning.
   */
  cursorPos(
    /**
     * The cursor position to set
     */
    iPos: int
  ): jQuery;

  /**
   * Disable HTML elements selection.
   */
  disableSelection(): jQuery;

  /**
   * Enable HTML elements to get selected.
   */
  enableSelection(): jQuery;

  /**
   * Returns the first focusable domRef in a given container (the first element of the collection)
   */
  firstFocusableDomRef(): Element;

  /**
   * Retrieve the selected text in the first element of the collection.
   *
   * <b>Note</b>: This feature is only supported for input element’s type of text, search, url, tel and password.
   */
  getSelectedText(): string;

  /**
   * Returns <code>true</code> if the first element has a set tabindex.
   */
  hasTabIndex(): boolean;

  /**
   * Returns the last focusable domRef in a given container
   */
  lastFocusableDomRef(): Element;

  /**
   * Gets the next parent DOM element with a given attribute and attribute value starting above the first given element
   */
  parentByAttribute(
    /**
     * Name of the attribute
     */
    sAttribute: string,
    /**
     * Value of the attribute (optional)
     */
    sValue: string
  ): Element;

  /**
   * Returns a rectangle describing the current visual positioning of the first DOM object in the collection
   * (or <code>null</code> if no element was given).
   */
  rect(): object;

  /**
   * Returns whether a point described by X and Y is inside this Rectangle's boundaries.
   */
  rectContains(
    /**
     * The X coordinate
     */
    posX: int,
    /**
     * The Y coordinate
     */
    posY: int
  ): boolean;

  /**
   * Removes the given ID reference from the aria-describedby attribute.
   */
  removeAriaDescribedBy(
    /**
     * The ID reference of an element
     */
    sId: string
  ): jQuery;

  /**
   * Removes the given ID reference from the aria-labelledby attribute.
   */
  removeAriaLabelledBy(
    /**
     * The ID reference of an element
     */
    sId: string
  ): jQuery;

  /**
   * Returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
   *
   * Precondition: The element is rendered in RTL mode.
   *
   * Reason for this method is that the major browsers use three different values for the same scroll position
   * when in RTL mode. This method hides those differences and returns/applies the same value that would be
   * returned in LTR mode: The distance in px how far the given container is scrolled away from the leftmost
   * scroll position.
   *
   * Returns "undefined" if no element is given.
   */
  scrollLeftRTL(): int | undefined;

  /**
   * Sets the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
   *
   * Precondition: The element is rendered in RTL mode.
   *
   * Reason for this method is that the major browsers use three different values for the same scroll position
   * when in RTL mode. This method hides those differences and returns/applies the same value that would be
   * returned in LTR mode: The distance in px how far the given container is scrolled away from the leftmost
   * scroll position.
   */
  scrollLeftRTL(
    /**
     * The desired scroll position
     */
    iPos: int
  ): jQuery;

  /**
   * Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
   *
   * Precondition: The element is rendered in RTL mode.
   *
   * Reason for this method is that the major browsers return three different values for the same scroll position
   * when in RTL mode. This method hides those differences and returns the value that would be returned in LTR mode
   * if the UI would be mirrored horizontally: The distance in px how far the given container is scrolled away
   * from the rightmost scroll position.
   *
   * Returns "undefined" if no element is in the given jQuery collection.
   */
  scrollRightRTL(): int | undefined;

  /**
   * Sets the text selection in the first element of the collection.
   *
   * <b>Note</b>: This feature is only supported for input element's type of text, search, url, tel and password.
   */
  selectText(
    /**
     * Start position of the selection (inclusive)
     */
    iStart: int,
    /**
     * End position of the selection (exclusive)
     */
    iEnd: int
  ): jQuery;

  /**
   * Get the z-index for an element.
   */
  zIndex(): number;

  /**
   * Set the z-index for an element.
   */
  zIndex(
    /**
     * The z-index to set
     */
    zIndex: int
  ): jQuery;
}

declare module "sap/ui/thirdparty/jquery" {
  export default jQuery;
}
declare module "sap/ui/thirdparty/qunit-2" {
  export default QUnit;
}

declare namespace sap {
  interface IUI5DefineDependencyNames {
    "sap/ui/thirdparty/jquery": undefined;
    "sap/ui/thirdparty/qunit-2": undefined;
  }
}

// For Library Version: 1.113.0

declare module "sap/base/assert" {
  /**
   * @SINCE 1.58
   *
   * A simple assertion mechanism that logs a message when a given condition is not met.
   *
   * **Note:** Calls to this method might be removed when the JavaScript code is optimized during build. Therefore,
   * callers should not rely on any side effects of this method.
   */
  export default function assert(
    /**
     * Result of the checked assertion
     */
    bResult: boolean,
    /**
     * Message that will be logged when the result is `false`. In case this is a function, the return value
     * of the function will be displayed. This can be used to execute complex code only if the assertion fails.
     */
    vMessage: string | Function
  ): void;
}

declare module "sap/base/i18n/ResourceBundle" {
  /**
   * @SINCE 1.58
   *
   * Contains locale-specific texts.
   *
   * If you need a locale-specific text within your application, you can use the resource bundle to load the
   * locale-specific file from the server and access the texts of it.
   *
   * Use {@link module:sap/base/i18n/ResourceBundle.create} to create an instance of sap/base/i18n/ResourceBundle
   * (.properties without any locale information, e.g. "mybundle.properties"), and optionally a locale. The
   * locale is defined as a string of the language and an optional country code separated by underscore (e.g.
   * "en_GB" or "fr"). If no locale is passed, the default locale is "en" if the SAPUI5 framework is not available.
   * Otherwise the default locale is taken from the SAPUI5 configuration.
   *
   * With the getText() method of the resource bundle, a locale-specific string value for a given key will
   * be returned.
   *
   * With the given locale, the resource bundle requests the locale-specific properties file (e.g. "mybundle_fr_FR.properties").
   * If no file is found for the requested locale or if the file does not contain a text for the given key,
   * a sequence of fallback locales is tried one by one. First, if the locale contains a region information
   * (fr_FR), then the locale without the region is tried (fr). If that also can't be found or doesn't contain
   * the requested text, a fallback language will be used, if given (defaults to en (English), assuming that
   * most development projects contain at least English texts). If that also fails, the file without locale
   * (base URL of the bundle, often called the 'raw' bundle) is tried.
   *
   * If none of the requested files can be found or none of them contains a text for the given key, then the
   * key itself is returned as text.
   *
   * Exception: Fallback for "zh_HK" is "zh_TW" before "zh".
   */
  export default class ResourceBundle {
    constructor();

    /**
     * Creates and returns a new instance of {@link module:sap/base/i18n/ResourceBundle} using the given URL
     * and locale to determine what to load.
     *
     * Before loading the ResourceBundle, the locale is evaluated with a fallback chain. Sample fallback chain
     * for locale="de-DE" and fallbackLocale="fr_FR" `"de-DE" -> "de" -> "fr_FR" -> "fr" -> raw`
     *
     * Only those locales are considered for loading, which are in the supportedLocales array (if the array
     * is supplied and not empty).
     *
     * Note: The fallbackLocale should be included in the supportedLocales array.
     *
     * @returns A new resource bundle or a Promise on that bundle (in asynchronous case)
     */
    static create(
      /**
       * Parameters used to initialize the resource bundle
       */
      mParams?: {
        /**
         * URL pointing to the base .properties file of a bundle (.properties file without any locale information,
         * e.g. "mybundle.properties") if not provided, `bundleUrl` or `bundleName` can be used; if both are set,
         * `bundleName` wins
         */
        url?: string;
        /**
         * URL pointing to the base .properties file of a bundle (.properties file without any locale information,
         * e.g. "i18n/mybundle.properties")
         */
        bundleUrl?: string;
        /**
         * UI5 module name in dot notation pointing to the base .properties file of a bundle (.properties file without
         * any locale information, e.g. "i18n.mybundle")
         */
        bundleName?: string;
        /**
         * Optional locale (aka 'language tag') to load the texts for. Can either be a BCP47 language tag or a JDK
         * compatible locale string (e.g. "en-GB", "en_GB" or "en"). Defaults to the current session locale if `sap.ui.getCore`
         * is available, otherwise to the provided `fallbackLocale`
         */
        locale?: string;
        /**
         * Whether to include origin information into the returned property values
         */
        includeInfo?: boolean;
        /**
         * List of supported locales (aka 'language tags') to restrict the fallback chain. Each entry in the array
         * can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB", "en_GB" or "en").
         * An empty string (`""`) represents the 'raw' bundle. **Note:** The given language tags can use modern
         * or legacy ISO639 language codes. Whatever language code is used in the list of supported locales will
         * also be used when requesting a file from the server. If the `locale` contains a legacy language code
         * like "sh" and the `supportedLocales` contains [...,"sr",...], "sr" will be used in the URL. This mapping
         * works in both directions.
         */
        supportedLocales?: string[];
        /**
         * A fallback locale to be used after all locales derived from `locale` have been tried, but before the
         * 'raw' bundle is used. Can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB",
         * "en_GB" or "en"). To prevent a generic fallback, use the empty string (`""`). E.g. by providing `fallbackLocale:
         * ""` and `supportedLocales: ["en"]`, only the bundle "en" is requested without any fallback.
         */
        fallbackLocale?: string;
        /**
         * map of terminologies. The key is the terminology identifier and the value is a ResourceBundle terminology
         * configuration. A terminology is a resource bundle configuration for a specific use case (e.g. "oil").
         * It does neither have a `fallbackLocale` nor can it be enhanced with `enhanceWith`.
         */
        terminologies?: Record<string, TerminologyConfiguration>;
        /**
         * The list of active terminologies, e.g. `["oil", "retail"]`. The order in this array represents the lookup
         * order.
         */
        activeTerminologies?: string[];
        /**
         * List of ResourceBundle configurations which enhance the current one. The order of the enhancements is
         * significant, because the lookup checks the last enhancement first. Each enhancement represents a ResourceBundle
         * with limited options ('bundleUrl', 'bundleName', 'terminologies', 'fallbackLocale', 'supportedLocales').
         * Note: supportedLocales and fallbackLocale are inherited from the parent ResourceBundle if not present.
         */
        enhanceWith?: Configuration[];
        /**
         * Whether the first bundle should be loaded asynchronously Note: Fallback bundles loaded by {@link #getText}
         * are always loaded synchronously.
         */
        async?: boolean;
      }
    ): ResourceBundle | Promise<ResourceBundle>;
    /**
     * Returns a locale-specific string value for the given key sKey.
     *
     * The text is searched in this resource bundle according to the fallback chain described in {@link module:sap/base/i18n/ResourceBundle}.
     * If no text could be found, the key itself is used as text.
     *
     * Placeholders:
     *
     * A text can contain placeholders that will be replaced with concrete values when `getText` is called.
     * The replacement is triggered by the `aArgs` parameter.
     *
     * Whenever this parameter is given, then the text and the arguments are additionally run through the {@link
     * module:sap/base/strings/formatMessage} API to replace placeholders in the text with the corresponding
     * values from the arguments array. The resulting string is returned by `getText`.
     *
     * As the `formatMessage` API imposes some requirements on the input text (regarding curly braces and single
     * apostrophes), text authors need to be aware of the specifics of the `formatMessage` API. Callers of `getText`,
     * on the other side, should only supply `aArgs` when the text has been created with the `formatMessage`
     * API in mind. Otherwise, single apostrophes in the text might be removed unintentionally.
     *
     * When `getText` is called without `aArgs`, the `formatMessage` API is not applied and the transformation
     * reg. placeholders and apostrophes does not happen.
     *
     * For more details on the replacement mechanism refer to {@link module:sap/base/strings/formatMessage}.
     *
     * @returns The value belonging to the key, if found; otherwise the key itself or `undefined` depending
     * on `bIgnoreKeyFallback`.
     */
    getText(
      /**
       * Key to retrieve the text for
       */
      sKey: string,
      /**
       * List of parameter values which should replace the placeholders "{n}" (n is the index) in
       * the found locale-specific string value. Note that the replacement is done whenever `aArgs` is given,
       * no matter whether the text contains placeholders or not and no matter whether `aArgs` contains a value
       * for n or not.
       */
      aArgs?: any[],
      /**
       * If set, `undefined` is returned instead of the key string, when the key is not found in any bundle or
       * fallback bundle.
       */
      bIgnoreKeyFallback?: boolean
    ): string | undefined;
    /**
     * Checks whether a text for the given key can be found in the first loaded resource bundle or not. Neither
     * the custom resource bundles nor the fallback chain will be processed.
     *
     * This method allows to check for the existence of a text without triggering requests for the fallback
     * locales.
     *
     * When requesting the resource bundle asynchronously this check must only be used after the resource bundle
     * has been loaded.
     *
     * @returns Whether the text has been found in the concrete bundle
     */
    hasText(
      /**
       * Key to check
       */
      sKey: string
    ): boolean;
  }
  /**
   * ResourceBundle Configuration
   *
   * A ResourceBundle Configuration holds information on where to load the ResourceBundle from using the fallback
   * chain and terminologies. The location is retrieved from the `bundleUrl` and `bundleName` parameters The
   * locale used is influenced by the `supportedLocales` and `fallbackLocale` parameters Terminologies of
   * this ResourceBundle are loaded via the `terminologies` parameter
   *
   * Note: If omitted, the supportedLocales and the fallbackLocale are inherited from the parent ResourceBundle
   * Configuration
   */
  export type Configuration = {
    /**
     * URL pointing to the base .properties file of a bundle (.properties file without any locale information,
     * e.g. "i18n/mybundle.properties")
     */
    bundleUrl?: string;
    /**
     * UI5 module name in dot notation pointing to the base .properties file of a bundle (.properties file without
     * any locale information, e.g. "i18n.mybundle")
     */
    bundleName?: string;
    /**
     * List of supported locales (aka 'language tags') to restrict the fallback chain. Each entry in the array
     * can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB", "en_GB" or "en").
     * An empty string (`""`) represents the 'raw' bundle. **Note:** The given language tags can use modern
     * or legacy ISO639 language codes. Whatever language code is used in the list of supported locales will
     * also be used when requesting a file from the server. If the `locale` contains a legacy language code
     * like "sh" and the `supportedLocales` contains [...,"sr",...], "sr" will be used in the URL. This mapping
     * works in both directions.
     */
    supportedLocales?: string[];
    /**
     * A fallback locale to be used after all locales derived from `locale` have been tried, but before the
     * 'raw' bundle is used. Can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB",
     * "en_GB" or "en"), defaults to "en" (English). To prevent a generic fallback, use the empty string (`""`).
     * E.g. by providing `fallbackLocale: ""` and `supportedLocales: ["en"]`, only the bundle "en" is requested
     * without any fallback.
     */
    fallbackLocale?: string;
    /**
     * An object, mapping a terminology identifier (e.g. "oil") to a `ResourceBundle.TerminologyConfiguration`.
     * A terminology is a resource bundle configuration for a specific use case (e.g. "oil"). It does neither
     * have a `fallbackLocale` nor can it be enhanced with `enhanceWith`.
     */
    terminologies?: Record<string, TerminologyConfiguration>;
  };

  /**
   * ResourceBundle Terminology Configuration
   *
   * Terminologies represent a variant of a ResourceBundle. They can be used to provide domain specific texts,
   * e.g. for industries, e.g. "oil", "retail" or "health". While "oil" could refer to a user as "driller",
   * in "retail" a user could be a "customer" and in "health" a "patient". While "oil" could refer to a duration
   * as "hitch", in "retail" a duration could be a "season" and in "health" an "incubation period".
   *
   * Note: Terminologies do neither support a fallbackLocale nor nested terminologies in their configuration.
   */
  export type TerminologyConfiguration = {
    /**
     * URL pointing to the base .properties file of a bundle (.properties file without any locale information,
     * e.g. "i18n/mybundle.properties")
     */
    bundleUrl?: string;
    /**
     * UI5 module name in dot notation pointing to the base .properties file of a bundle (.properties file without
     * any locale information, e.g. "i18n.mybundle")
     */
    bundleName?: string;
    /**
     * List of supported locales (aka 'language tags') to restrict the fallback chain. Each entry in the array
     * can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB", "en_GB" or "en").
     * An empty string (`""`) represents the 'raw' bundle. **Note:** The given language tags can use modern
     * or legacy ISO639 language codes. Whatever language code is used in the list of supported locales will
     * also be used when requesting a file from the server. If the `locale` contains a legacy language code
     * like "sh" and the `supportedLocales` contains [...,"sr",...], "sr" will be used in the URL. This mapping
     * works in both directions.
     */
    supportedLocales?: string[];
  };
}

declare module "sap/base/Log" {
  /**
   * @SINCE 1.58
   *
   * A Logging API for JavaScript.
   *
   * Provides methods to manage a client-side log and to create entries in it. Each of the logging methods
   * {@link module:sap/base/Log.debug}, {@link module:sap/base/Log.info}, {@link module:sap/base/Log.warning},
   * {@link module:sap/base/Log.error} and {@link module:sap/base/Log.fatal} creates and records a log entry,
   * containing a timestamp, a log level, a message with details and a component info. The log level will
   * be one of {@link module:sap/base/Log.Level} and equals the name of the concrete logging method.
   *
   * By using the {@link module:sap/base/Log.setLevel} method, consumers can determine the least important
   * log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric
   * values represent less important levels). The initially set level depends on the mode that UI5 is running
   * in. When the optimized sources are executed, the default level will be {@link module:sap/base/Log.Level.ERROR}.
   * For normal (debug sources), the default level is {@link module:sap/base/Log.Level.DEBUG}.
   *
   * All logging methods allow to specify a **component**. These components are simple strings and don't have
   * a special meaning to the UI5 framework. However they can be used to semantically group log entries that
   * belong to the same software component (or feature). There are two APIs that help to manage logging for
   * such a component. With {@link module:sap/base/Log.getLogger}, one can retrieve a logger that automatically
   * adds the given `sComponent` as component parameter to each log entry, if no other component is specified.
   * Typically, JavaScript code will retrieve such a logger once during startup and reuse it for the rest
   * of its lifecycle. Second, the {@link module:sap/base/Log.setLevel}(iLevel, sComponent) method allows
   * to set the log level for a specific component only. This allows a more fine grained control about the
   * created logging entries. {@link module:sap/base/Log.getLevel} allows to retrieve the currently effective
   * log level for a given component.
   *
   * {@link module:sap/base/Log.getLogEntries} returns an array of the currently collected log entries.
   *
   * Furthermore, a listener can be registered to the log. It will be notified whenever a new entry is added
   * to the log. The listener can be used for displaying log entries in a separate page area, or for sending
   * it to some external target (server).
   */
  interface Log {
    /**
     * Allows to add a new LogListener that will be notified for new log entries.
     *
     * The given object must provide method `onLogEntry` and can also be informed about `onDetachFromLog`, `onAttachToLog`
     * and `onDiscardLogEntries`.
     */
    addLogListener(
      /**
       * The new listener object that should be informed
       */
      oListener: object
    ): void;
    /**
     * Creates a new debug-level entry in the log with the given message, details and calling component.
     */
    debug(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged with
       * the stack.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
    /**
     * Creates a new error-level entry in the log with the given message, details and calling component.
     */
    error(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged together
       * with its stacktrace.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
    /**
     * Creates a new fatal-level entry in the log with the given message, details and calling component.
     */
    fatal(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged together
       * with its stacktrace.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
    /**
     * Returns the log level currently effective for the given component. If no component is given or when no
     * level has been configured for a given component, the log level for the default component of this logger
     * is returned.
     *
     * @returns The log level for the given component or the default log level
     */
    getLevel(
      /**
       * Name of the component to retrieve the log level for
       */
      sComponent?: string
    ): Level;
    /**
     * Returns the logged entries recorded so far as an array.
     *
     * Log entries are plain JavaScript objects with the following properties
     * 	timestamp {number} point in time when the entry was created level {module:sap/base/Log.Level} LogLevel
     * level of the entry message {string} message text of the entry  The default amount of stored
     * log entries is limited to 3000 entries.
     *
     * @returns an array containing the recorded log entries
     */
    getLogEntries(): object[];
    /**
     * Returns a dedicated logger for a component
     *
     * The logger comes with the same API as the `sap/base/Log` module:
     * 	`#fatal` - see: {@link module:sap/base/Log.fatal} `#error` - see: {@link module:sap/base/Log.error}
     * `#warning` - see: {@link module:sap/base/Log.warning} `#info` - see: {@link module:sap/base/Log.info}
     * `#debug` - see: {@link module:sap/base/Log.debug} `#trace` - see: {@link module:sap/base/Log.trace}
     * `#setLevel` - see: {@link module:sap/base/Log.setLevel} `#getLevel` - see: {@link module:sap/base/Log.getLevel}
     * `#isLoggable` - see: {@link module:sap/base/Log.isLoggable}
     *
     * @returns A logger with a specified component
     */
    getLogger(
      /**
       * Name of the component which should be logged
       */
      sComponent: string,
      /**
       * The default log level
       */
      iDefaultLogLevel?: Level
    ): object;
    /**
     * Creates a new info-level entry in the log with the given message, details and calling component.
     */
    info(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged with
       * the stack.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
    /**
     * Checks whether logging is enabled for the given log level, depending on the currently effective log level
     * for the given component.
     *
     * If no component is given, the default component of this logger will be taken into account.
     *
     * @returns Whether logging is enabled or not
     */
    isLoggable(
      /**
       * The log level in question
       */
      iLevel?: Level,
      /**
       * Name of the component to check the log level for
       */
      sComponent?: string
    ): boolean;
    /**
     * Allows to remove a registered LogListener.
     */
    removeLogListener(
      /**
       * The new listener object that should be removed
       */
      oListener: object
    ): void;
    /**
     * Defines the maximum `sap/base/Log.Level` of log entries that will be recorded. Log entries with a higher
     * (less important) log level will be omitted from the log. When a component name is given, the log level
     * will be configured for that component only, otherwise the log level for the default component of this
     * logger is set. For the global logger, the global default level is set.
     *
     * **Note**: Setting a global default log level has no impact on already defined component log levels. They
     * always override the global default log level.
     */
    setLevel(
      /**
       * The new log level
       */
      iLogLevel: Level,
      /**
       * The log component to set the log level for
       */
      sComponent?: string
    ): void;
    /**
     * Creates a new trace-level entry in the log with the given message, details and calling component.
     */
    trace(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged with
       * the stack.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
    /**
     * Creates a new warning-level entry in the log with the given message, details and calling component.
     */
    warning(
      /**
       * Message text to display
       */
      sMessage: string,
      /**
       * Optional details about the message, might be omitted. Can be an Error object which will be logged together
       * with its stacktrace.
       */
      vDetails?: string | Error,
      /**
       * Name of the component that produced the log entry
       */
      sComponent?: string,
      /**
       * Callback that returns an additional support object to be logged in support mode. This function is only
       * called if support info mode is turned on with `logSupportInfo(true)`. To avoid negative effects regarding
       * execution times and memory consumption, the returned object should be a simple immutable JSON object
       * with mostly static and stable content.
       */
      fnSupportInfo?: Function
    ): void;
  }
  const Log: Log;
  export default Log;

  /**
   * Enumeration of the configurable log levels that a Logger should persist to the log.
   *
   * Only if the current LogLevel is higher than the level {@link module:sap/base/Log.Level} of the currently
   * added log entry, then this very entry is permanently added to the log. Otherwise it is ignored.
   */
  export enum Level {
    /**
     * Trace level to log everything.
     */
    ALL = "undefined",
    /**
     * Debug level. Use this for logging information necessary for debugging
     */
    DEBUG = "undefined",
    /**
     * Error level. Use this for logging of erroneous but still recoverable situations
     */
    ERROR = "undefined",
    /**
     * Fatal level. Use this for logging unrecoverable situations
     */
    FATAL = "undefined",
    /**
     * Info level. Use this for logging information of purely informative nature
     */
    INFO = "undefined",
    /**
     * Do not log anything
     */
    NONE = "undefined",
    /**
     * Trace level. Use this for tracing the program flow.
     */
    TRACE = "undefined",
    /**
     * Warning level. Use this for logging unwanted but foreseen situations
     */
    WARNING = "undefined",
  }
}

declare module "sap/base/security/encodeCSS" {
  /**
   * @SINCE 1.58
   *
   * Encode the string for inclusion into CSS string literals or identifiers.
   *
   * @returns The encoded string
   */
  export default function encodeCSS(
    /**
     * The string to be escaped
     */
    sString: string
  ): string;
}

declare module "sap/base/security/encodeJS" {
  /**
   * @SINCE 1.58
   *
   * Encode the string for inclusion into a JS string literal.
   *
   * @returns The encoded string
   */
  export default function encodeJS(
    /**
     * The string to be escaped
     */
    sString: string
  ): string;
}

declare module "sap/base/security/encodeURL" {
  /**
   * @SINCE 1.58
   *
   * Encode the string for inclusion into a URL parameter.
   *
   * Unescaped characters: alphabetic, decimal digits, -_. (dash, underscore, point)
   *
   * @returns The encoded string
   */
  export default function encodeURL(
    /**
     * The string to be escaped
     */
    sString: string
  ): string;
}

declare module "sap/base/security/encodeURLParameters" {
  /**
   * @SINCE 1.58
   *
   * Encode a map of parameters into a combined URL parameter string.
   *
   * @returns The URL encoded parameter string
   */
  export default function encodeURLParameters(
    /**
     * The map of parameters to encode
     */
    mParams: Object
  ): string;
}

declare module "sap/base/security/encodeXML" {
  /**
   * @SINCE 1.58
   *
   * Encode the string for inclusion into XML content/attribute.
   *
   * @returns The encoded string
   */
  export default function encodeXML(
    /**
     * The string to be escaped
     */
    sString: string
  ): string;
}

declare module "sap/base/security/URLListValidator" {
  /**
   * @SINCE 1.85
   *
   * Registry to manage allowed URLs and validate against them.
   */
  interface URLListValidator {
    /**
     * Adds an allowed entry.
     *
     * Note: Adding the first entry to the list of allowed entries will disallow all URLs but the ones matching
     * the newly added entry.
     *
     * **Note**: It is strongly recommended to set a path only in combination with an origin (never set a path
     * alone). There's almost no case where checking only the path of a URL would allow to ensure its validity.
     */
    add(
      /**
       * The protocol of the URL, can be falsy to allow all protocols for an entry e.g. "", "http", "mailto"
       */
      protocol?: string,
      /**
       * The host of the URL, can be falsy to allow all hosts. A wildcard asterisk can be set at the beginning,
       * e.g. "examples.com", "*.example.com"
       */
      host?: string,
      /**
       * The port of the URL, can be falsy to allow all ports, e.g. "", "8080"
       */
      port?: string,
      /**
       * the path of the URL, path of the url, can be falsy to allow all paths. A wildcard asterisk can be set
       * at the end, e.g. "/my-example*", "/my-news"
       */
      path?: string
    ): void;
    /**
     * Clears the allowed entries for URL validation. This makes all URLs allowed.
     */
    clear(): void;
    /**
     * Gets the list of allowed entries.
     *
     * @returns The allowed entries
     */
    entries(): Entry[];
    /**
     * Validates a URL. Check if it's not a script or other security issue.
     *
     * **Note**: It is strongly recommended to validate only absolute URLs. There's almost no case where checking
     * only the path of a URL would allow to ensure its validity. For compatibility reasons, this API cannot
     * automatically resolve URLs relative to `document.baseURI`, but callers should do so. In that case, and
     * when the allow list is not empty, an entry for the origin of `document.baseURI` must be added to the
     * allow list.
     *
     * Details: Splits the given URL into components and checks for allowed characters according to RFC 3986:
     *
     *
     * ```javascript
     *
     * authority     = [ userinfo "@" ] host [ ":" port ]
     * userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
     * host          = IP-literal / IPv4address / reg-name
     *
     * IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"
     * IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
     * IPv6address   =                            6( h16 ":" ) ls32
     *               /                       "::" 5( h16 ":" ) ls32
     *               / [               h16 ] "::" 4( h16 ":" ) ls32
     *               / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
     *               / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
     *               / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
     *               / [ *4( h16 ":" ) h16 ] "::"              ls32
     *               / [ *5( h16 ":" ) h16 ] "::"              h16
     *               / [ *6( h16 ":" ) h16 ] "::"
     * ls32          = ( h16 ":" h16 ) / IPv4address
     *               ; least-significant 32 bits of address
     * h16           = 1*4HEXDIG
     *               ; 16 bits of address represented in hexadecimal
     *
     * IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
     * dec-octet     = DIGIT                 ; 0-9
     *               / %x31-39 DIGIT         ; 10-99
     *               / "1" 2DIGIT            ; 100-199
     *               / "2" %x30-34 DIGIT     ; 200-249
     *               / "25" %x30-35          ; 250-255
     *
     * reg-name      = *( unreserved / pct-encoded / sub-delims )
     *
     * pct-encoded   = "%" HEXDIG HEXDIG
     * reserved      = gen-delims / sub-delims
     * gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
     * sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *               / "*" / "+" / "," / ";" / "="
     * unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     * pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *
     * path          = path-abempty    ; begins with "/" or is empty
     *               / path-absolute   ; begins with "/" but not "//"
     *               / path-noscheme   ; begins with a non-colon segment
     *               / path-rootless   ; begins with a segment
     *               / path-empty      ; zero characters
     *
     * path-abempty  = *( "/" segment )
     * path-absolute = "/" [ segment-nz *( "/" segment ) ]
     * path-noscheme = segment-nz-nc *( "/" segment )
     * path-rootless = segment-nz *( "/" segment )
     * path-empty    = 0
     * segment       = *pchar
     * segment-nz    = 1*pchar
     * segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" )
     *               ; non-zero-length segment without any colon ":"
     *
     * query         = *( pchar / "/" / "?" )
     *
     * fragment      = *( pchar / "/" / "?" )
     * ```
     *
     *
     * For the hostname component, we are checking for valid DNS hostnames according to RFC 952 / RFC 1123:
     *
     *
     * ```javascript
     *
     * hname         = name *("." name)
     * name          = let-or-digit ( *( let-or-digit-or-hyphen ) let-or-digit )
     * ```
     *
     *
     * When the URI uses the protocol 'mailto:', the address part is additionally checked against the most commonly
     * used parts of RFC 6068:
     *
     *
     * ```javascript
     *
     * mailtoURI     = "mailto:" [ to ] [ hfields ]
     * to            = addr-spec *("," addr-spec )
     * hfields       = "?" hfield *( "&" hfield )
     * hfield        = hfname "=" hfvalue
     * hfname        = *qchar
     * hfvalue       = *qchar
     * addr-spec     = local-part "@" domain
     * local-part    = dot-atom-text              // not accepted: quoted-string
     * domain        = dot-atom-text              // not accepted: "[" *dtext-no-obs "]"
     * dtext-no-obs  = %d33-90 / ; Printable US-ASCII
     *                 %d94-126  ; characters not including
     *                           ; "[", "]", or "\"
     * qchar         = unreserved / pct-encoded / some-delims
     * some-delims   = "!" / "$" / "'" / "(" / ")" / "*"
     *               / "+" / "," / ";" / ":" / "@"
     *
     * Note:
     * A number of characters that can appear in <addr-spec> MUST be
     * percent-encoded.  These are the characters that cannot appear in
     * a URI according to [STD66] as well as "%" (because it is used for
     * percent-encoding) and all the characters in gen-delims except "@"
     * and ":" (i.e., "/", "?", "#", "[", and "]").  Of the characters
     * in sub-delims, at least the following also have to be percent-
     * encoded: "&", ";", and "=".  Care has to be taken both when
     * encoding as well as when decoding to make sure these operations
     * are applied only once.
     *
     * ```
     *
     *
     * When a list of allowed entries has been configured using {@link #add}, any URL that passes the syntactic
     * checks above, additionally will be tested against the content of this list.
     *
     * @returns true if valid, false if not valid
     */
    validate(
      /**
       * URL to be validated
       */
      sUrl: string
    ): boolean;
  }
  const URLListValidator: URLListValidator;
  export default URLListValidator;

  /**
   * Entry object of the URLListValidator.
   */
  export type Entry = {
    /**
     * The protocol of the URL, can be falsy to allow all protocols for an entry e.g. "", "http", "mailto"
     */
    protocol?: string;
    /**
     * The host of the URL, can be falsy to allow all hosts. A wildcard asterisk can be set at the beginning,
     * e.g. "examples.com", "*.example.com"
     */
    host?: string;
    /**
     * The port of the URL, can be falsy to allow all ports, e.g. "", "8080"
     */
    port?: string;
    /**
     * the path of the URL, path of the url, can be falsy to allow all paths. A wildcard asterisk can be set
     * at the end, e.g. "/my-example*", "/my-news"
     */
    path?: string;
  };
}

declare module "sap/base/security/URLWhitelist" {
  /**
   * @deprecated (since 1.85) - use {@link module:sap/base/security/URLListValidator.Entry} instead.
   *
   * Entry object of the URLWhitelist.
   */
  export type Entry = {
    /**
     * The protocol of the URL
     */
    protocol: string;
    /**
     * The host of the URL
     */
    host: string;
    /**
     * The port of the URL
     */
    port: string;
    /**
     * the path of the URL
     */
    path: string;
  };
}

declare module "sap/base/strings/camelize" {
  /**
   * @SINCE 1.58
   *
   * Transforms a hyphen separated string to a camel case string.
   *
   * @returns The transformed string
   */
  export default function camelize(
    /**
     * Hyphen separated string
     */
    sString: string
  ): string;
}

declare module "sap/base/strings/capitalize" {
  /**
   * @SINCE 1.58
   *
   * Converts first character of the string to upper case.
   *
   * @returns String input with first character uppercase
   */
  export default function capitalize(
    /**
     * String for which first character should be converted
     */
    sString: string
  ): string;
}

declare module "sap/base/strings/escapeRegExp" {
  /**
   * @SINCE 1.58
   *
   * Escapes all characters that would have a special meaning in a regular expression.
   *
   * This method can be used when a string with arbitrary content has to be integrated into a regular expression
   * and when the whole string should match literally.
   *
   * @returns The escaped string
   */
  export default function escapeRegExp(
    /**
     * String to escape
     */
    sString: string
  ): string;
}

declare module "sap/base/strings/formatMessage" {
  /**
   * @SINCE 1.58
   *
   * Creates a string from a pattern by replacing placeholders with concrete values.
   *
   * The syntax of the pattern is inspired by (but not fully equivalent to) the java.util.MessageFormat.
   *
   * Placeholders have the form `{ integer }`, where any occurrence of `{0}` is replaced by the value with
   * index 0 in `aValues`, `{1}` by the value with index 1 in `aValues` etc.
   *
   * To avoid interpretation of curly braces as placeholders, any non-placeholder fragment of the pattern
   * can be enclosed in single quotes. The surrounding single quotes will be omitted from the result. Single
   * quotes that are not meant to escape a fragment and that should appear in the result, need to be doubled.
   * In the result, only a single single quote will occur.
   *
   * Example: Pattern Strings
   * ```javascript
   *
   *  formatMessage("Say {0}",     ["Hello"]) -> "Say Hello"    // normal use case
   *  formatMessage("Say '{0}'",   ["Hello"]) -> "Say {0}"      // escaped placeholder
   *  formatMessage("Say ''{0}''", ["Hello"]) -> "Say 'Hello'"  // doubled single quote
   *  formatMessage("Say '{0}'''", ["Hello"]) -> "Say {0}'"     // doubled single quote in quoted fragment
   * ```
   *  In contrast to java.util.MessageFormat, format types or format styles are not supported. Everything
   * after the argument index and up to the first closing curly brace is ignored. Nested placeholders (as
   * supported by java.lang.MessageFormat for the format type choice) are not ignored but reported as a parse
   * error.
   *
   * This method throws an Error when the pattern syntax is not fulfilled (e.g. unbalanced curly braces, nested
   * placeholders or a non-numerical argument index).
   *
   * This method can also be used as a formatter within a binding. The first part of a composite binding will
   * be used as pattern, the following parts as aValues. If there is only one value and this value is an array
   * it will be handled like the default described above.
   *
   * @returns The formatted result string
   */
  export default function formatMessage(
    /**
     * A pattern string in the described syntax
     */
    sPattern: string,
    /**
     * The values to be used instead of the placeholders.
     */
    aValues?: any[]
  ): string;
}

declare module "sap/base/strings/hyphenate" {
  /**
   * @SINCE 1.58
   *
   * Transforms a camel case string (camelCase) into a hyphen separated string (kebab-case).
   *
   * @returns The transformed string
   */
  export default function hyphenate(
    /**
     * camel case string
     */
    sString: string
  ): string;
}

declare module "sap/base/util/array/diff" {
  /**
   * @SINCE 1.58
   *
   * Calculates delta of old list and new list.
   *
   * This function implements the algorithm described in "A Technique for Isolating Differences Between Files"
   * (Commun. ACM, April 1978, Volume 21, Number 4, Pages 264-268).
   *
   * Items in the arrays are not compared directly. Instead, a substitute symbol is determined for each item
   * by applying the provided function `fnSymbol` to it. Items with strictly equal symbols are assumed to
   * represent the same logical item:
   * ```javascript
   *
   *   fnSymbol(a) === fnSymbol(b)   <=>   a 'is logically the same as' b
   * ```
   *  As an additional constraint, casting the symbols to string should not modify the comparison result.
   * If this second constraint is not met, this method might report more diffs than necessary.
   *
   * If no symbol function is provided, a default implementation is used which applies `JSON.stringify` to
   * non-string items and reduces the strings to a hash code. It is not guaranteed that this default implementation
   * fulfills the above constraint in all cases, but it is a compromise between implementation effort, generality
   * and performance. If items are known to be non-stringifiable (e.g. because they may contain cyclic references)
   * or when hash collisions are likely, an own `symbol` function must be provided via the configuration object.
   *
   * The result of the diff is a sequence of update operations, each consisting of a `type` (either `"insert"`,
   * `"delete"` or `"replace"` when enabled via configuration object) and an `index`. By applying the operations
   * one after the other to the old array, it can be transformed to an array whose items are equal to the
   * new array.
   *
   * @returns List of update operations
   */
  export default function diff(
    /**
     * Old Array
     */
    aOld: any[],
    /**
     * New Array
     */
    aNew: any[],
    /**
     * Configuration object or a function to calculate substitute symbols for array items
     */
    vConfigOrSymbol?:
      | {
          /**
           * Function to calculate substitute symbols for array items
           */
          symbol?: Function;
          /**
           * Switch for the `replace` type which specifies that an item within the array has been changed
           */
          replace?: boolean;
        }
      | Function
  ): Array<{
    type: string;

    index: int;
  }>;
}

declare module "sap/base/util/array/uniqueSort" {
  /**
   * @SINCE 1.58
   *
   * Sorts the given array in-place and removes any duplicates (identified by "===").
   *
   * Uses Array#sort()
   * See:
   * 	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
   *
   * Use `jQuery.uniqueSort()` for arrays of DOMElements.
   *
   * @returns Same array as given (for chaining)
   */
  export default function uniqueSort(
    /**
     * An Array of any type
     */
    aArray: any[]
  ): any[];
}

declare module "sap/base/util/deepClone" {
  /**
   * @SINCE 1.63
   *
   * Creates a deep clone of the source value.
   *
   * Only arrays, JavaScript Date objects and objects that pass the {@link module:sap/base/util/isPlainObject
   * isPlainObject} check will be cloned. For other object types, a `TypeError` will be thrown as there's
   * no standard way to clone them. Primitive values (boolean, number, string) as well as `null` and `undefined`
   * will be copied, they have value semantics anyhow.
   *
   * `deepClone` is designed to match the semantics of {@link module:sap/base/util/deepEqual deepEqual}. Any
   * deeply cloned object should be deep-equal to the source. However, not every object that can be handled
   * by `deepEqual` can also be deeply cloned (e.g. `deepClone` fails on non-plain objects).
   *
   * To limit the time needed for a deep clone and to avoid endless recursion in case of cyclic structures,
   * the recursion depth is limited by the parameter `maxDepth`, which defaults to 10. When the recursion
   * depth exceeds the given limit, a `TypeError` is thrown.
   *
   * Note that object identities are not honored by the clone operation. If the original source contained
   * multiple references to the same plain object instance, the clone will contain a different clone for each
   * reference.
   *
   * @returns A clone of the source value
   */
  export default function deepClone(
    /**
     * Source value that shall be cloned
     */
    src: any,
    /**
     * Maximum recursion depth for the clone operation, deeper structures will throw an error
     */
    maxDepth?: int
  ): any;
}

declare module "sap/base/util/deepEqual" {
  /**
   * @SINCE 1.58
   *
   * Compares the two given values for equality, especially by comparing the content.
   *
   * **Note:** Function does not work with comparing XML objects.
   *
   * @returns Whether a and b are equal
   */
  export default function deepEqual(
    /**
     * A value of any type
     */
    a: any,
    /**
     * A value of any type
     */
    b: any,
    /**
     * Maximum recursion depth
     */
    maxDepth?: int,
    /**
     * Whether all existing properties in a are equal as in b
     */
    contains?: boolean
  ): boolean;
}

declare module "sap/base/util/deepExtend" {
  /**
   * @SINCE 1.71
   *
   * Performs object extension by merging source objects into a target object. Copies are always deep.
   *
   * If during merging a key in the target object exists it is overwritten with the source object's value.
   * Usage is the same as `jQuery.extend(true, ...)`. Values that are `undefined` are ignored.
   *
   * For shallow copies, you may use {@link module:sap/base/util/extend sap/base/util/extend} or `Object.assign`,
   * but note that `Object.assign` only copies enumerable and own properties and doesn't copy properties on
   * the prototype and non-enumerable properties. Also, values that are `undefined` are NOT ignored.
   *
   * @returns the target object which is the result of the merge
   */
  export default function deepExtend(
    /**
     * The object that will receive new properties
     */
    target: object,
    /**
     * One or more objects which get merged into the target object
     */
    ...source: object[]
  ): object;
}

declare module "sap/base/util/Deferred" {
  /**
   * @SINCE 1.90
   *
   * Creates a `Deferred` instance which represents a future value.
   *
   * While a `Promise` can only be resolved or rejected by calling the respective methods in its constructor,
   * a `Deferred` can be resolved or rejected via `resolve` or `reject` methods at any point. A `Deferred`
   * object creates a `Promise` instance which functions as a proxy for the future result. This `Promise`
   * object can be accessed via the `promise` property of the `Deferred` object.
   */
  export default class Deferred {
    constructor();
    /**
     * Promise instance of the Deferred
     */
    promise: Promise<any>;

    /**
     * Proxy call to the `reject` method of the wrapped Promise
     */
    reject(
      /**
       * Failure reason
       */
      reason?: any
    ): void;
    /**
     * Proxy call to the `resolve` method of the wrapped Promise
     */
    resolve(
      /**
       * Fulfillment value
       */
      value?: any
    ): void;
  }
}

declare module "sap/base/util/each" {
  /**
   * @SINCE 1.58
   *
   * Iterates over elements of the given object or array.
   *
   * Numeric indexes are only used for instances of `Array`. For all other objects, including those with a
   * numeric `length` property, the properties are iterated by name.
   *
   * When `fnCallback` returns `false`, then the iteration stops (break).
   *
   * @returns the given `oObject`
   */
  export default function each(
    /**
     * object or array to enumerate the properties of
     */
    oObject: object | any[],
    /**
     * function to call for each property name
     */
    fnCallback: Function
  ): object | any[];
}

declare module "sap/base/util/extend" {
  /**
   * @SINCE 1.71
   *
   * Performs object extension by merging source objects into a target object. Generates a shallow copy.
   *
   * If during merging a key in the target object exists it is overwritten with the source object's value.
   * Usage is the same as `jQuery.extend(...)`. Values that are `undefined` are ignored.
   *
   * As alternative you may also use `Object.assign`, but note that `Object.assign` only copies enumerable
   * and own properties and doesn't copy properties on the prototype and non-enumerable properties. Also,
   * values that are `undefined` are NOT ignored.
   *
   * For deep copies, you may use {@link module:sap/base/util/deepExtend sap/base/util/deepExtend}.
   *
   * @returns the target object which is the result of the merge
   */
  export default function extend(
    /**
     * The object that will receive new properties
     */
    target: object,
    /**
     * One or more objects which get merged into the target object
     */
    ...source: object[]
  ): object;
}

declare module "sap/base/util/includes" {
  /**
   * @SINCE 1.58
   * @deprecated (since 1.90) - Use the `Array.prototype.includes` or `String.prototype.includes` instead,
   * but note that `Array.prototype.includes` or `String.prototype.includes` fail when called on null values.
   *
   * Checks if value is included in collection.
   *
   * @returns - true if value is in the collection, false otherwise
   */
  export default function includes(
    /**
     * Collection to be checked
     */
    vCollection: any[] | object | string,
    /**
     * The value to be checked
     */
    vValue: any,
    /**
     * optional start index, negative start index will start from the end
     */
    iFromIndex?: int
  ): boolean;
}

declare module "sap/base/util/isEmptyObject" {
  /**
   * @SINCE 1.65
   *
   * Validates if the given object is empty, that is that it has no enumerable properties.
   *
   * Note that `null` and `undefined` comply with this definition of 'empty'. The behavior for non-object
   * values is undefined and might change in future.
   *
   * @returns whether or not the given object is empty
   */
  export default function isEmptyObject(
    /**
     * the object which is checked
     */
    obj: Object
  ): boolean;
}

declare module "sap/base/util/isPlainObject" {
  /**
   * @SINCE 1.58
   *
   * Checks whether the object is a plain object (created using "{}" or "new Object").
   *
   * @returns whether or not the object is a plain object (created using "{}" or "new Object").
   */
  export default function isPlainObject(
    /**
     * the object which is checked
     */
    obj: Object
  ): boolean;
}

declare module "sap/base/util/merge" {
  /**
   * @SINCE 1.58
   *
   * Performs object extension by merging source objects into a target object. Copies are always deep.
   *
   * If during merging a key in the target object exists it is overwritten with the source object's value.
   * Usage is the same as `jQuery.extend(true, ...)`, but values that are `undefined` are NOT ignored.
   *
   * For shallow copies, you may use `Object.assign`, but note that `Object.assign` only copies enumerable
   * and own properties and doesn't copy properties on the prototype and non-enumerable properties.
   *
   * @returns the target object which is the result of the merge
   */
  export default function merge(
    /**
     * The object that will receive new properties
     */
    target: object,
    /**
     * One or more objects which get merged into the target object
     */
    ...source: object[]
  ): object;
}

declare module "sap/base/util/now" {
  /**
   * @SINCE 1.58
   *
   * Returns a high resolution timestamp in microseconds if supported by the environment, otherwise in milliseconds.
   * The timestamp is based on 01/01/1970 00:00:00 (UNIX epoch) as float with microsecond precision or with
   * millisecond precision, if high resolution timestamps are not available. The fractional part of the timestamp
   * represents fractions of a millisecond. Converting to a `Date` is possible by using `require(["sap/base/util/now"],
   * function(now){new Date(now());}`
   *
   * @returns timestamp in microseconds if supported by the environment otherwise in milliseconds
   */
  export default function now(): float;
}

declare module "sap/base/util/ObjectPath" {
  /**
   * @SINCE 1.58
   *
   * Manages an object path.
   *
   * The object path can be just created with {@link #.create}, then an empty nested object path will be created
   * from the provided string. If a value is set for an object path {@link #.set} it is also created if it
   * not already exists. Values can be retrieved from the objectpath with {@link #get}.
   */
  interface ObjectPath {
    /**
     * Creates a object path from the provided path in the provided root context.
     *
     * The provided path is used to navigate through the nested objects, starting with the root context.
     *
     * @returns The newly created context object, e.g. base.my.test.module
     */
    create(
      /**
       * Path as string where each name is separated by '.'. Can also be an array of names.
       */
      vObjectPath: string | string[],
      /**
       * Root context where the path starts
       */
      oRootContext?: Object
    ): Object;
    /**
     * Returns a value located in the provided path. If the provided path cannot be resolved completely, `undefined`
     * is returned.
     *
     * The provided object path is used to navigate through the nested objects, starting with the root context.
     * If no root context is provided, the object path begins with `window`.
     *
     * @returns Returns the value located in the provided path, or `undefined` if the path does not exist completely.
     */
    get(
      /**
       * Path as string where each name is separated by '.'. Can also be an array of names.
       */
      vObjectPath: string | string[],
      /**
       * Root context where the path starts
       */
      oRootContext?: Object
    ): any | undefined;
    /**
     * Sets a value located in the provided path.
     *
     * The provided path is used to navigate through the nested objects, starting with the root context.
     *
     * **Note:** Ensures that the object path exists.
     */
    set(
      /**
       * vObjectPath Path as string where each name is separated by '.'. Can also be an array of names.
       */
      vObjectPath: string | string[],
      /**
       * The value to be set in the root context's object path
       */
      vValue: any,
      /**
       * Root context where the path starts
       */
      oRootContext?: Object
    ): void;
  }
  const ObjectPath: ObjectPath;
  export default ObjectPath;
}

declare module "sap/base/util/Properties" {
  /**
   * @SINCE 1.58
   *
   * Represents a collection of string properties (key/value pairs).
   *
   * Each key and its corresponding value in the collection is a string, keys are case-sensitive.
   *
   * Use {@link module:sap/base/util/Properties.create} to create an instance of {@link module:sap/base/util/Properties}.
   *
   * The {@link #getProperty} method can be used to retrieve a value from the collection, {@link #setProperty}
   * to store or change a value for a key and {@link #getKeys} can be used to retrieve an array of all keys
   * that are currently stored in the collection.
   */
  export default class Properties {
    constructor();

    /**
     * Creates and returns a new instance of {@link module:sap/base/util/Properties}.
     *
     * If option 'url' is passed, immediately a load request for the given target is triggered. A property file
     * that is loaded can contain comments with a leading ! or #. The loaded property list does not contain
     * any comments.
     *
     * @returns A new property collection (synchronous case) or `null` if the file could not be loaded and `returnNullIfMissing`
     * was set; in case of asynchronous loading, always a Promise is returned, which resolves with the property
     * collection or with `null` if the file could not be loaded and `returnNullIfMissing` was set to true
     */
    static create(
      /**
       * Parameters used to initialize the property list
       */
      mParams?: {
        /**
         * The URL to the .properties file which should be loaded
         */
        url?: string;
        /**
         * Whether the .properties file should be loaded asynchronously or not
         */
        async?: boolean;
        /**
         * A map of additional header key/value pairs to send along with the request (see `headers` option of `jQuery.ajax`)
         */
        headers?: object;
        /**
         * Whether `null` should be returned for a missing properties file; by default an empty collection is returned
         */
        returnNullIfMissing?: object;
      }
    ): Properties | null | Promise<any>;
    /**
     * Creates and returns a clone of the property collection.
     *
     * @returns A clone of the property collection
     */
    clone(): Properties;
    /**
     * Returns an array of all keys in the property collection.
     *
     * @returns All keys in the property collection
     */
    getKeys(): string[];
    /**
     * Returns the value for the given key or `null` if the collection has no value for the key.
     *
     * Optionally, a default value can be given which will be returned if the collection does not contain a
     * value for the key; only non-empty default values are supported.
     *
     * @returns Value for the given key or the default value or `null` if no default value or a falsy default
     * value was given
     */
    getProperty(
      /**
       * Key to return the value for
       */
      sKey: string,
      /**
       * Optional, a default value that will be returned if the requested key is not in the collection
       */
      sDefaultValue?: string
    ): string | null;
    /**
     * Stores or changes the value for the given key in the collection.
     *
     * If the given value is not a string, the collection won't be modified. The key is always cast to a string.
     */
    setProperty(
      /**
       * Key of the property
       */
      sKey: string,
      /**
       * String value for the key
       */
      sValue: string
    ): void;
  }
}

declare module "sap/base/util/uid" {
  /**
   * @SINCE 1.58
   *
   * Creates and returns a pseudo-unique ID.
   *
   * No means for detection of overlap with already present or future UIDs.
   *
   * @returns A pseudo-unique id.
   */
  export default function uid(): string;
}

declare module "sap/base/util/UriParameters" {
  /**
   * @SINCE 1.68
   *
   * Provides access to the individual parameters of a URL query string.
   *
   * This class parses the query string from a URL and provides access to the values of individual parameters.
   * There are methods to check whether the query string {@link #has contains a parameter (`has()`)}, to {@link
   * #get get a single value (`get()`)} for a parameter and to {@link #getAll get a list of all values (`getAll()`)}
   * for a parameter. Another method allows to {@link #keys iterate over all parameter names (`keys()`)}.
   *
   * The signature and behavior of those methods is aligned with the corresponding methods of the upcoming
   * Web API `URLSearchParams`.
   *
   * Decoding:
   *
   * The constructor and the factory methods expect percentage encoded input whereas all other APIs expect
   * and return decoded strings. After parsing the query string, any plus sign (0x2b) in names or values is
   * replaced by a blank (0x20) and the resulting strings are percentage decoded (`decodeURIComponent`).
   *
   * Future Migration:
   *
   * **Note:** To simplify a future migration from this class to the standard `URLSearchParams` API, consuming
   * code should follow some recommendations:
   * 	 - do not use the constructor, either use {@link #.fromURL UriParameters.fromURL} when the input is
   * 			a full URL, or use {@link #.fromQuery UriParameters.fromQuery} when the input only contains the query
   * 			part of an URL (e.g. `location.search`).
   * 	 - do not use the `get` method with the second parameter `bAll`; use the `getAll` method instead
   * 	 - do not access the internal property `mParams` (you never should access internal properties of UI5
   * 			classes or objects). With the predecessor of this API, access to `mParams` was often used to check whether
   * 			a parameter is defined at all. Using the new `has` method or checking the result of `get` against `null`
   * 			serves the same purpose.  Callers using `UriParameters.fromQuery(input)` can be migrated to `new
   * 			URLSearchParams(input)` once the new API is available in all supported browsers. Callers using `UriParameters.fromURL(input)`
   * 			can be migrated to `new URL(input).searchParams` then.
   */
  export default class UriParameters {
    /**
     * See:
     * 	https://url.spec.whatwg.org/#interface-urlsearchparams
     */
    constructor(
      /**
       * URL with parameters
       */
      sURL?: string
    );

    /**
     * Parses the given query string and returns an interface to access the individual parameters.
     *
     * Callers using `UriParameters.fromQuery(input)` can be migrated to `new URLSearchParams(input)` once that
     * API is available (or polyfilled) in all supported browsers.
     *
     * @returns Object providing read access to the query parameters
     */
    static fromQuery(
      /**
       * Query string to parse, a leading question mark (?) will be ignored
       */
      sQuery?: string
    ): UriParameters;
    /**
     * Parses the query portion of the given URL and returns an object to access the individual parameters.
     *
     * Callers using `UriParameters.fromURL(input)` can be migrated to `new URL(input).searchParams` once that
     * API is available (or polyfilled) in all supported browsers.
     *
     * @returns Object providing read access to the query parameters
     */
    static fromURL(
      /**
       * to parse the query portion of.
       */
      sURL: string
    ): UriParameters;
    /**
     * Returns the first value of the named query parameter.
     *
     * The value of the first occurrence of the parameter with name `sName` in the query string is returned.
     * If that first occurrence does not contain a value (it does not contain an equal sign), then an empty
     * string is returned.
     *
     * If (and only if) the parameter does not occur in the query string, `null` is returned.
     *
     * @returns First value of the query parameter with the given name or `null`
     */
    get(
      /**
       * Name of the query parameter to get the value for
       */
      sName: string,
      /**
       * Whether all values for the parameter should be returned; the use of this parameter is deprecated and
       * highly discouraged; use the {@link #getAll} method instead
       */
      bAll?: boolean
    ): string | null;
    /**
     * Returns all values of the query parameter with the given name.
     *
     * An array of string values of all occurrences of the parameter with the given name is returned. This array
     * is empty if (and only if) the parameter does not occur in the query string.
     *
     * @returns Array with all values of the query parameter with the given name
     */
    getAll(
      /**
       * Name of the query parameter
       */
      sName: string
    ): string[];
    /**
     * Checks whether a parameter occurs at least once in the query string.
     *
     * @returns Whether the parameter has been defined
     */
    has(
      /**
       * Name of the query parameter to check
       */
      sName: string
    ): boolean;
    /**
     * Returns an iterator for all contained parameter names.
     *
     * @returns Iterator for all parameter names.
     */
    keys(): Iterator<string>;
  }
}

declare module "sap/base/util/values" {
  /**
   * @SINCE 1.58
   *
   * Returns values from an object.
   *
   * **Note:**Whenever possible, please try to use the native function `Object.values` instead. Especially,
   * if you don't need to rely on handling null values as argument.
   *
   * @returns - array of object values, if object does not contain values, an empty array will be returned
   */
  export default function values(
    /**
     * Object to be extracted
     */
    mObject: object
  ): any[];
}

declare module "sap/base/util/Version" {
  /**
   * @SINCE 1.58
   *
   * Represents a version consisting of major, minor, patch version, and suffix, for example '1.2.7-SNAPSHOT'.
   */
  export default class Version {
    /**
     * Returns a Version instance created from the given parameters.
     *
     * This function can either be called as a constructor (using `new`) or as a normal function. It always
     * returns an immutable Version instance.
     *
     * The parts of the version number (major, minor, patch, suffix) can be provided in several ways:
     * 	 - Version("1.2.3-SNAPSHOT") - as a dot-separated string. Any non-numerical char or a dot followed by
     * 			a non-numerical char starts the suffix portion. Any missing major, minor or patch versions will be set
     * 			to 0.
     * 	 - Version(1,2,3,"-SNAPSHOT") - as individual parameters. Major, minor and patch must be integer numbers
     * 			or empty, suffix must be a string not starting with digits.
     * 	 - Version([1,2,3,"-SNAPSHOT"]) - as an array with the individual parts. The same type restrictions
     * 			apply as before.
     * 	 - Version(otherVersion) - as a Version instance (cast operation). Returns the given instance instead
     * 			of creating a new one.
     *
     * To keep the code size small, this implementation mainly validates the single string variant. All other
     * variants are only validated to some degree. It is the responsibility of the caller to provide proper
     * parts.
     */
    constructor(
      /**
       * the major part of the version (int) or any of the single parameter variants explained above.
       */
      vMajor: int | string | any[] | Version,
      /**
       * the minor part of the version number
       */
      iMinor: int,
      /**
       * the patch part of the version number
       */
      iPatch: int,
      /**
       * the suffix part of the version number
       */
      sSuffix: string
    );

    /**
     * Compares this version with a given one.
     *
     * The version with which this version should be compared can be given as a `sap/base/util/Version` instance,
     * as a string (e.g. `v.compareto("1.4.5")`). Or major, minor, patch and suffix values can be given as separate
     * parameters (e.g. `v.compareTo(1, 4, 5)`) or in an array (e.g. `v.compareTo([1, 4, 5])`).
     *
     * @returns 0, if the given version is equal to this version, a negative value if the given other version
     * is greater and a positive value otherwise
     */
    compareTo(): int;
    /**
     * Returns the major version part of this version.
     *
     * @returns the major version part of this version
     */
    getMajor(): int;
    /**
     * Returns the minor version part of this version.
     *
     * @returns the minor version part of this version
     */
    getMinor(): int;
    /**
     * Returns the patch (or micro) version part of this version.
     *
     * @returns the patch version part of this version
     */
    getPatch(): int;
    /**
     * Returns the version suffix of this version.
     *
     * @returns the version suffix of this version
     */
    getSuffix(): string;
    /**
     * Checks whether this version is in the range of the given interval (start inclusive, end exclusive).
     *
     * The boundaries against which this version should be checked can be given as `sap/base/util/Version` instances
     * (e.g. `v.inRange(v1, v2)`), as strings (e.g. `v.inRange("1.4", "2.7")`) or as arrays (e.g. `v.inRange([1,4],
     * [2,7])`).
     *
     * @returns `true` if this version is greater or equal to `vMin` and smaller than `vMax`, `false` otherwise.
     */
    inRange(
      /**
       * the start of the range (inclusive)
       */
      vMin: string | any[] | Version,
      /**
       * the end of the range (exclusive)
       */
      vMax: string | any[] | Version
    ): boolean;
    /**
     * Returns a string representation of this version.
     *
     * @returns a string representation of this version.
     */
    toString(): string;
  }
}

declare module "sap/ui/util/XMLHelper" {
  import { URI } from "sap/ui/core/library";

  /**
   * Error information as provided by the `DOMParser`.
   *
   * Note that the set of properties with meaningful content differs between browsers.
   */
  export type XMLParseErrorInfo = {
    errorCode?: int;

    url?: URI;

    reason?: string;

    srcText?: string;

    line?: int;

    linepos?: int;

    filepos?: int;

    type?: "error" | "warning";
  };

  /**
   * @SINCE 1.58
   *
   * Provides functionality for parsing XML formatted strings and serializing XML documents.
   */
  interface XMLHelper {
    /**
     * Extracts parse error information from the specified document (if any).
     *
     * If an error was found, the returned object contains a browser-specific subset of the properties described
     * in {@link module:sap/base/util/XMLHelper.XMLParseErrorInfo XMLParseErrorInfo}. Otherwise, it just contains
     * an `errorCode` property with value 0.
     *
     * @returns A browser-specific error info object if errors were found, or an object with an errorCode
     * of 0 only
     */
    getParseError(
      /**
       * The parsed XML document
       */
      oDocument: XMLDocument
    ): XMLParseErrorInfo;
    /**
     * Parses the specified XML string into an XML document, using the native parsing functionality of the browser.
     * If an error occurs during parsing, a {@link module:sap/base/util/XMLHelper.XMLParseErrorInfo parse error
     * info object} is attached as the `parseError` property of the returned document.
     *
     * @returns the parsed XML document with a `parseError` property as described in {@link #getParseError}.
     * An error occurred if the `errorCode` property of the `parseError` is not 0.
     */
    parse(
      /**
       * An XML string
       */
      sXMLText: string
    ): XMLDocument;
    /**
     * Serializes the specified DOM tree into a string representation.
     * See:
     * 	{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer/serializeToString}
     *
     * @returns the serialized XML string
     */
    serialize(
      /**
       * the XML document object to be serialized as string
       */
      oXMLDocument: Node | Attr
    ): string;
  }
  const XMLHelper: XMLHelper;
  export default XMLHelper;
}

declare module "sap/ui/core/ComponentSupport" {
  /**
   * @SINCE 1.58.0
   *
   * The module `sap/ui/core/ComponentSupport` provides functionality which is used to find declared Components
   * in the HTML page and to create the Component instances which will be put into a {@link sap.ui.core.ComponentContainer}.
   *
   * The {@link module:sap/ui/core/ComponentSupport.run} function is called automatically once the module
   * has been required. This allows declarative support for components.
   *
   * Usage: To enable the `sap/ui/core/ComponentSupport` include it as the `oninit` module in the bootstrap:
   *
   * ```javascript
   *
   * <script id="sap-ui-bootstrap"
   *     src="/resources/sap-ui-core.js"
   *     ...
   *     data-sap-ui-oninit="module:sap/ui/core/ComponentSupport"
   *     ...>
   * </script>
   * ```
   *
   *
   * To load and render components inside the HTML page, a special data attribute has to be specified on the
   * respective DOM elements: `data-sap-ui-component`. All DOM elements marked with this data attribute will
   * be regarded as container elements for the created `ComponentContainer` instances.
   *
   *
   * ```javascript
   *
   * <body id="content" class="sapUiBody sapUiSizeCompact">
   *     ...
   *     <div data-sap-ui-component
   *         data-id="container"
   *         data-name="sap.ui.core.samples.formatting"
   *         ...
   *         data-handle-validation="true"
   *         ...>
   *     </div>
   *     ...
   * </body>
   * ```
   *
   *
   * Configuration: All configuration settings for the `ComponentContainer` have to be defined as `data` attributes
   * on the respective HTML tags. Each data attribute will be interpreted as a setting and parsed considering
   * the data type of the matching property in the `ComponentContainer`.
   *
   * As HTML is case-insensitive, in order to define a property with upper-case characters, you have to "escape"
   * them with a dash character, similar to CSS attributes. The following code gives an example:
   *
   *
   * ```javascript
   *
   * <div data-sap-ui-component ... data-handle-validation="true" ...></div>
   * ```
   *
   *
   * **Beware:**
   *
   * The `ComponentSupport` module enforces asynchronous loading of the respective component and its library
   * dependencies. This is done by applying default settings for the following properties of the `ComponentContainer`:
   *
   *
   * 	 - `async` {boolean} (**forced to `true`**)
   * 	 - `manifest` {boolean|string} (**forced to `true` if no string is provided to ensure manifest first**)
   *
   * 	 - `lifecycle` {sap.ui.core.ComponentLifecycle} (defaults to `Container`)
   * 	 - `autoPrefixId` {boolean} (defaults to `true`)
   *
   * See {@link topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.
   */
  interface ComponentSupport {
    /**
     * Find all DOM elements with the attribute `data-sap-ui-component` and parse the attributes from these
     * DOM elements for the settings of the `ComponentContainer` which will be placed into these DOM elements.
     *
     * This function is called automatically once the module has been required.
     */
    run(): void;
  }
  const ComponentSupport: ComponentSupport;
  export default ComponentSupport;
}

declare module "sap/ui/core/date/CalendarUtils" {
  import CalendarWeekNumbering from "sap/ui/core/date/CalendarWeekNumbering";

  import Locale from "sap/ui/core/Locale";

  /**
   * @SINCE 1.108.0
   *
   * Provides calendar-related utilities.
   */
  interface CalendarUtils {
    /**
     * @SINCE 1.108.0
     *
     * Resolves calendar week configuration.
     *
     * Returns an object with the following fields:
     * 	 - `firstDayOfWeek`: specifies the first day of the week starting with `0` (which is Sunday)
     * 	 - `minimalDaysInFirstWeek`: minimal days at the beginning of the year which define the first calendar
     * 			week
     *
     * @returns The calendar week configuration, or `undefined for an invalid value of sap.ui.core.date.CalendarWeekNumbering`.
     */
    getWeekConfigurationValues(
      /**
       * The calendar week numbering; if omitted, the calendar week numbering of the Configuration is used; see
       * {@link sap.ui.core.Configuration#getCalendarWeekNumbering}. If this value is `Default` the returned calendar
       * week configuration is derived from the given `oLocale`.
       */
      sCalendarWeekNumbering?:
        | CalendarWeekNumbering
        | keyof typeof CalendarWeekNumbering,
      /**
       * The locale to use; if not provided, this falls back to the format locale from the Configuration; see
       * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale}. Is only used when `sCalendarWeekNumbering`
       * is set to `Default`.
       */
      oLocale?: Locale
    ):
      | {
          firstDayOfWeek: int;

          minimalDaysInFirstWeek: int;
        }
      | undefined;
  }
  const CalendarUtils: CalendarUtils;
  export default CalendarUtils;
}

declare module "sap/ui/core/date/UI5Date" {
  /**
   * @SINCE 1.111.0
   *
   * A date implementation considering the configured time zone
   *
   * A subclass of JavaScript `Date` that considers the configured time zone, see {@link sap.ui.core.Configuration.getTimezone}.
   * All JavaScript `Date` functions that use the local browser time zone, like `getDate`, `setDate`, and
   * `toString`, are overwritten and use the configured time zone to compute the values.
   *
   * Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances.
   */
  export default class UI5Date extends Date {
    constructor();

    /**
     * Creates a date instance (either JavaScript Date or `UI5Date`) which considers the configured time zone
     * wherever JavaScript Date uses the local browser time zone, for example in `getDate`, `toString`, or `setHours`.
     * The supported parameters are the same as the ones supported by the JavaScript Date constructor.
     * See:
     * 	sap.ui.core.Configuration.getTimezone
     *
     * @returns The date instance that considers the configured time zone in all local getters and setters.
     */
    static getInstance(
      /**
       * Same meaning as in the JavaScript Date constructor
       */
      vYearOrValue?: int | string | Date | UI5Date | null,
      /**
       * Same meaning as in the JavaScript Date constructor
       */
      vMonthIndex?: int | string,
      /**
       * Same meaning as in the Date constructor
       */
      vDay?: int | string,
      /**
       * Same meaning as in the Date constructor
       */
      vHours?: int | string,
      /**
       * Same meaning as in the Date constructor
       */
      vMinutes?: int | string,
      /**
       * Same meaning as in the Date constructor
       */
      vSeconds?: int | string,
      /**
       * Same meaning as in the Date constructor
       */
      vMilliseconds?: int | string
    ): Date | UI5Date;
    /**
     * Returns the day of the month of this date instance according to the configured time zone, see `Date.prototype.getDate`.
     *
     * @returns A number between 1 and 31 representing the day of the month of this date instance according
     * to the configured time zone
     */
    getDate(): int;
    /**
     * Returns the day of the week of this date instance according to the configured time zone, see `Date.prototype.getDay`.
     *
     * @returns A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date instance
     * according to the configured time zone
     */
    getDay(): int;
    /**
     * Returns the year of this date instance according to the configured time zone, see `Date.prototype.getFullYear`.
     *
     * @returns The year of this date instance according to the configured time zone
     */
    getFullYear(): int;
    /**
     * Returns the hours of this date instance according to the configured time zone, see `Date.prototype.getHours`.
     *
     * @returns A number between 0 and 23 representing the hours of this date instance according to the configured
     * time zone
     */
    getHours(): int;
    /**
     * Returns the milliseconds of this date instance according to the configured time zone, see `Date.prototype.getMilliseconds`.
     *
     * @returns A number between 0 and 999 representing the milliseconds of this date instance according to
     * the configured time zone
     */
    getMilliseconds(): int;
    /**
     * Returns the minutes of this date instance according to the configured time zone, see `Date.prototype.getMinutes`.
     *
     * @returns A number between 0 and 59 representing the minutes of this date instance according to the configured
     * time zone
     */
    getMinutes(): int;
    /**
     * Returns the month index of this date instance according to the configured time zone, see `Date.prototype.getMonth`.
     *
     * @returns The month index between 0 (January) and 11 (December) of this date instance according to the
     * configured time zone
     */
    getMonth(): int;
    /**
     * Returns the seconds of this date instance according to the configured time zone, see `Date.prototype.getSeconds`.
     *
     * @returns A number between 0 and 59 representing the seconds of this date instance according to the configured
     * time zone
     */
    getSeconds(): int;
    /**
     * Returns this date object to the given time represented by a number of milliseconds based on the UNIX
     * epoch, see `Date.prototype.getTime`.
     *
     * @returns The timestamp in milliseconds of this date based on the UNIX epoch, or `NaN` if the date is
     * an invalid date
     */
    getTime(): int;
    /**
     * Returns the difference in minutes between the UTC and the configured time zone for this date, see `Date.prototype.getTimezoneOffset`.
     *
     * @returns The difference in minutes between the UTC and the configured time zone for this date
     */
    getTimezoneOffset(): int;
    /**
     * Returns the day of the month of this date instance according to universal time, see `Date.prototype.getUTCDate`.
     *
     * @returns A number between 1 and 31 representing the day of the month of this date instance according
     * to universal time
     */
    getUTCDate(): int;
    /**
     * Returns the day of the week of this date instance according to universal time, see `Date.prototype.getUTCDay`.
     *
     * @returns A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date instance
     * according to universal time
     */
    getUTCDay(): int;
    /**
     * Returns the year of this date instance according to universal time, see `Date.prototype.getUTCFullYear`.
     *
     * @returns The year of this date instance according to universal time
     */
    getUTCFullYear(): int;
    /**
     * Returns the hours of this date instance according to universal time, see `Date.prototype.getUTCHours`.
     *
     * @returns A number between 0 and 23 representing the hours of this date instance according to universal
     * time
     */
    getUTCHours(): int;
    /**
     * Returns the milliseconds of this date instance according to universal time, see `Date.prototype.getUTCMilliseconds`.
     *
     * @returns A number between 0 and 999 representing the milliseconds of this date instance according to
     * universal time
     */
    getUTCMilliseconds(): int;
    /**
     * Returns the minutes of this date instance according to universal time, see `Date.prototype.getUTCMinutes`.
     *
     * @returns A number between 0 and 59 representing the minutes of this date instance according to universal
     * time
     */
    getUTCMinutes(): int;
    /**
     * Returns the month index of this date instance according to universal time, see `Date.prototype.getUTCMonth`.
     *
     * @returns The month index between 0 (January) and 11 (December) of this date instance according to universal
     * time
     */
    getUTCMonth(): int;
    /**
     * Returns the seconds of this date instance according to universal time, see `Date.prototype.getUTCSeconds`.
     *
     * @returns A number between 0 and 59 representing the seconds of this date instance according to universal
     * time
     */
    getUTCSeconds(): int;
    /**
     * @deprecated (since 1.111) - as it is deprecated in the base class JavaScript Date; use {@link #getFullYear}
     * instead
     *
     * Returns the year of this date instance minus 1900 according to the configured time zone, see `Date.prototype.getYear`.
     *
     * @returns The year of this date instance minus 1900 according to the configured time zone
     */
    getYear(): int;
    /**
     * Sets the day of the month for this date instance considering the configured time zone, see `Date.prototype.setDate`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setDate(
      /**
       * An integer representing the new day value, see `Date.prototype.setDate`
       */
      iDay: int
    ): int;
    /**
     * Sets the year, month and day for this date instance considering the configured time zone, see `Date.prototype.setFullYear`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setFullYear(
      /**
       * An integer representing the new year value
       */
      iYear: int,
      /**
       * An integer representing the new month index
       */
      iMonth?: int,
      /**
       * An integer representing the new day value
       */
      iDay?: int
    ): int;
    /**
     * Sets the hours, minutes, seconds and milliseconds for this date instance considering the configured time
     * zone, see `Date.prototype.setHours`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setHours(
      /**
       * An integer representing the new hour value
       */
      iHours: int,
      /**
       * An integer representing the new minutes value
       */
      iMinutes?: int,
      /**
       * An integer representing the new seconds value
       */
      iSeconds?: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * Sets the milliseconds for this date instance considering the configured time zone, see `Date.prototype.setMilliseconds`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setMilliseconds(
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds: int
    ): int;
    /**
     * Sets the minutes, seconds and milliseconds for this date instance considering the configured time zone,
     * see `Date.prototype.setMinutes`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setMinutes(
      /**
       * An integer representing the new minutes value
       */
      iMinutes: int,
      /**
       * An integer representing the new seconds value
       */
      iSeconds?: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * Sets the month and day for this date instance considering the configured time zone, see `Date.prototype.setMonth`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setMonth(
      /**
       * An integer representing the new month index
       */
      iMonth: int,
      /**
       * An integer representing the new day value
       */
      iDay?: int
    ): int;
    /**
     * Sets the seconds and milliseconds for this date instance considering the configured time zone, see `Date.prototype.setSeconds`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setSeconds(
      /**
       * An integer representing the new seconds value
       */
      iSeconds: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * Sets this date object to the given time represented by a number of milliseconds based on the UNIX epoch
     * and resets the previously set date parts, see `Date.prototype.setTime`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setTime(
      /**
       * The date time in milliseconds based in the UNIX epoch
       */
      iTime: int
    ): int;
    /**
     * Sets the day of the month for this date instance according to universal time, see `Date.prototype.setUTCDate`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCDate(
      /**
       * An integer representing the new day value, see `Date.prototype.setUTCDate`
       */
      iDay: int
    ): int;
    /**
     * Sets the year, month and day for this date instance according to universal time, see `Date.prototype.setUTCFullYear`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCFullYear(
      /**
       * An integer representing the new year value
       */
      iYear: int,
      /**
       * An integer representing the new month index
       */
      iMonth?: int,
      /**
       * An integer representing the new day value
       */
      iDay?: int
    ): int;
    /**
     * Sets the hours, minutes, seconds and milliseconds for this date instance according to universal time,
     * see `Date.prototype.setUTCHours`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCHours(
      /**
       * An integer representing the new hour value
       */
      iHours: int,
      /**
       * An integer representing the new minutes value
       */
      iMinutes?: int,
      /**
       * An integer representing the new seconds value
       */
      iSeconds?: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * Sets the milliseconds for this date instance according to universal time, see `Date.prototype.setUTCMilliseconds`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCMilliseconds(
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds: int
    ): int;
    /**
     * Sets the minutes, seconds and milliseconds for this date instance according to universal time, see `Date.prototype.setUTCMinutes`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCMinutes(
      /**
       * An integer representing the new minutes value
       */
      iMinutes: int,
      /**
       * An integer representing the new seconds value
       */
      iSeconds?: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * Sets the month and day for this date instance according to universal time, see `Date.prototype.setUTCMonth`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCMonth(
      /**
       * An integer representing the new month index
       */
      iMonth: int,
      /**
       * An integer representing the new day value
       */
      iDay?: int
    ): int;
    /**
     * Sets the seconds and milliseconds for this date instance according to universal time, see `Date.prototype.setUTCSeconds`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setUTCSeconds(
      /**
       * An integer representing the new seconds value
       */
      iSeconds: int,
      /**
       * An integer representing the new milliseconds value
       */
      iMilliseconds?: int
    ): int;
    /**
     * @deprecated (since 1.111) - as it is deprecated in the base class JavaScript Date; use {@link #setFullYear}
     * instead
     *
     * Sets the year for this date instance plus 1900 considering the configured time zone, see `Date.prototype.setYear`.
     *
     * @returns The milliseconds of the new timestamp based on the UNIX epoch, or `NaN` if the timestamp could
     * not be updated
     */
    setYear(
      /**
       * The year which is to be set for this date plus 1900
       */
      iYear: int
    ): int;
    /**
     * Returns the date portion of this date object interpreted in the configured time zone in English, see
     * `Date.prototype.toDateString`.
     *
     * @returns The date portion of this date object interpreted in the configured time zone in English
     */
    toDateString(): string;
    /**
     * Converts this date to a string, interpreting it in the UTC time zone, see `Date.prototype.toGMTString`.
     *
     * @returns The converted date as string in the UTC time zone
     */
    toGMTString(): string;
    /**
     * Converts this date to a string in ISO format in the UTC offset zero time zone, as denoted by the suffix
     * `Z`, see `Date.prototype.toISOString`.
     *
     * @returns The converted date as a string in ISO format, in the UTC offset zero time zone
     */
    toISOString(): string;
    /**
     * Returns a string representation of this date object, see `Date.prototype.toJSON`.
     *
     * @returns The date object representation as a string
     */
    toJSON(): string;
    /**
     * Returns a string with a language-dependent representation of the date part of this date object interpreted
     * by default in the configured time zone, see `Date.prototype.toLocaleDateString`.
     *
     * @returns The language-dependent representation of the date part of this date object
     */
    toLocaleDateString(
      /**
       * The locale used for formatting; the configured locale by default
       */
      sLocale?: string,
      /**
       * The options object used for formatting, corresponding to the options parameter of the `Intl.DateTimeFormat`
       * constructor
       */
      oOptions?: {
        /**
         * The IANA time zone ID; the configured time zone by default
         */
        timeZone?: string;
      }
    ): string;
    /**
     * Returns a string with a language-dependent representation of this date object interpreted by default
     * in the configured time zone, see `Date.prototype.toLocaleString`.
     *
     * @returns The language-dependent representation of this date object
     */
    toLocaleString(
      /**
       * The locale used for formatting; the configured locale by default
       */
      sLocale?: string,
      /**
       * The options object used for formatting, corresponding to the options parameter of the `Intl.DateTimeFormat`
       * constructor
       */
      oOptions?: {
        /**
         * The IANA time zone ID; the configured time zone by default
         */
        timeZone?: string;
      }
    ): string;
    /**
     * Returns a string with a language-dependent representation of the time part of this date object interpreted
     * by default in the configured time zone, see `Date.prototype.toLocaleTimeString`.
     *
     * @returns The language-dependent representation of the time part of this date object
     */
    toLocaleTimeString(
      /**
       * The locale used for formatting; the configured locale by default
       */
      sLocale?: string,
      /**
       * The options object used for formatting, corresponding to the options parameter of the `Intl.DateTimeFormat`
       * constructor
       */
      oOptions?: {
        /**
         * The IANA time zone ID; the configured time zone by default
         */
        timeZone?: string;
      }
    ): string;
    /**
     * Returns a string representing this date object interpreted in the configured time zone.
     *
     * @returns A string representing this date object interpreted in the configured time zone
     */
    toString(): string;
    /**
     * Returns the time portion of this date object interpreted in the configured time zone in English.
     *
     * @returns The time portion of this date object interpreted in the configured time zone in English
     */
    toTimeString(): string;
    /**
     * Converts this date to a string, interpreting it in the UTC time zone, see `Date.prototype.toUTCString`.
     *
     * @returns The converted date as a string in the UTC time zone
     */
    toUTCString(): string;
    /**
     * Returns the value of this date object in milliseconds based on the UNIX epoch, see `Date.prototype.valueOf`.
     *
     * @returns The primitive value of this date object in milliseconds based on the UNIX epoch
     */
    valueOf(): int;
  }
}

declare module "sap/ui/core/InvisibleRenderer" {
  import Control from "sap/ui/core/Control";

  import RenderManager from "sap/ui/core/RenderManager";

  import UI5Element from "sap/ui/core/Element";

  /**
   * @SINCE 1.66.0
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Provides the default renderer for the controls that have set their `visible` property to `false`.
   */
  interface InvisibleRenderer {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates the ID to be used for the invisible placeholder DOM element.
     *
     * @returns The ID used for the invisible placeholder of this element
     */
    createInvisiblePlaceholderId(
      /**
       * The `control` instance for which to create the placeholder ID
       */
      oControl: Control
    ): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the placeholder DOM element of the provided control.
     *
     * @returns The placeholder DOM element
     */
    getDomRef(
      /**
       * The `control` instance for which to get the placeholder DOM element
       */
      oControl: Control
    ): HTMLElement | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Renders an invisible placeholder to identify the location of the invisible control within the DOM tree.
     *
     * The standard implementation renders an invisible <span> element for controls with `visible:false`
     * to improve re-rendering performance. Due to the fault tolerance of the HTML5 standard, such <span>
     * elements are accepted in many scenarios and won't appear in the render tree of the browser. However,
     * in some cases, controls might need to write a different element if <span> is not an allowed element
     * (for example, within the <tr> or <li> group). In this case, the caller can require this module
     * and use the third parameter to define the HTML tag.
     */
    render(
      /**
       * The `RenderManager` instance
       */
      oRm?: RenderManager,
      /**
       * The instance of the invisible element
       */
      oElement?: UI5Element,
      /**
       * HTML tag of the invisible placeholder; void tags are not allowed.
       */
      sTagName?: string
    ): void;
  }
  const InvisibleRenderer: InvisibleRenderer;
  export default InvisibleRenderer;
}

declare module "sap/ui/core/syncStyleClass" {
  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.58
   *
   * Search ancestors of the given source DOM element for the specified CSS class name.
   *
   * If the class name is found, set it to the root DOM element of the target control. If the class name is
   * not found, it is also removed from the target DOM element.
   *
   * @returns Target element
   */
  export default function syncStyleClass(
    /**
     * CSS class name
     */
    sStyleClass: string,
    /**
     * jQuery object, control or an id of the source element.
     */
    vSource: jQuery | Control | string,
    /**
     * target jQuery object or a control.
     */
    vDestination: jQuery | Control
  ): jQuery | Element;
}

declare module "sap/ui/dom/containsOrEquals" {
  /**
   * @SINCE 1.58
   *
   * Returns whether `oDomRefChild` is contained in or equal to `oDomRefContainer`.
   *
   * For compatibility reasons it returns `true` if `oDomRefContainer` and `oDomRefChild` are equal.
   *
   * This method intentionally does not operate on the jQuery object, as the original `jQuery.contains()`
   * method also does not do so.
   *
   * @returns Whether `oDomRefChild` is contained in or equal to `oDomRefContainer`
   */
  export default function containsOrEquals(
    /**
     * The container element
     */
    oDomRefContainer: Element,
    /**
     * The child element (must not be a text node, must be an element)
     */
    oDomRefChild: Element
  ): boolean;
}

declare module "sap/ui/dom/denormalizeScrollBeginRTL" {
  /**
   * @SINCE 1.58
   *
   * For the given scroll position measured from the "beginning" of a container (the right edge in RTL mode)
   * this method returns the scrollLeft value as understood by the current browser in RTL mode. This value
   * is specific to the given DOM element, as the computation may involve its dimensions.
   *
   * So when oDomRef should be scrolled 2px from the beginning, the number "2" must be given as `iNormalizedScrollBegin`
   * and the result of this method (which may be a large or even negative number, depending on the browser)
   * can then be set as `oDomRef.scrollLeft` to achieve the desired (cross-browser-consistent) scrolling position.
   * Low values make the right part of the content visible, high values the left part.
   *
   * This method does no scrolling on its own, it only calculates the value to set (so it can also be used
   * for animations).
   *
   * Only use this method in RTL mode, as the behavior in LTR mode is undefined and may change!
   *
   * @returns The scroll position that must be set for the DOM element
   */
  export default function denormalizeScrollBeginRTL(
    /**
     * The distance from the rightmost position to which the element should be scrolled
     */
    iNormalizedScrollBegin: int,
    /**
     * The DOM Element to which scrollLeft will be applied
     */
    oDomRef: Element
  ): int;
}

declare module "sap/ui/dom/denormalizeScrollLeftRTL" {
  /**
   * @SINCE 1.58
   *
   * For the given scrollLeft value this method returns the scrollLeft value as understood by the current
   * browser in RTL mode. This value is specific to the given DOM element, as the computation may involve
   * its dimensions.
   *
   * So when oDomRef should be scrolled 2px from the leftmost position, the number "2" must be given as `iNormalizedScrollLeft`
   * and the result of this method (which may be a large or even negative number, depending on the browser)
   * can then be set as `oDomRef.scrollLeft` to achieve the desired (cross-browser-consistent) scrolling position.
   *
   * This method does no scrolling on its own, it only calculates the value to set (so it can also be used
   * for animations).
   *
   * @returns The scroll position that must be set for the DOM element
   */
  export default function denormalizeScrollLeftRTL(
    /**
     * The distance from the leftmost position to which the element should be scrolled
     */
    iNormalizedScrollLeft: int,
    /**
     * The DOM Element to which scrollLeft will be applied
     */
    oDomRef: Element
  ): int;
}

declare module "sap/ui/dom/getOwnerWindow" {
  /**
   * @SINCE 1.58
   *
   * Returns the window reference for a DomRef.
   *
   * @returns Window reference
   */
  export default function getOwnerWindow(
    /**
     * The DOM reference
     */
    oDomRef: Element
  ): Window;
}

declare module "sap/ui/dom/getScrollbarSize" {
  /**
   * @SINCE 1.58
   *
   * Returns the size (width of the vertical / height of the horizontal) native browser scrollbars.
   *
   * This function must only be used when the DOM is ready.
   *
   * @returns Object with properties `width` and `height` (the values are of type number and are pixels).
   */
  export default function getScrollbarSize(
    /**
     * The CSS class that should be added to the test element.
     */
    sClasses?: string,
    /**
     * Force recalculation of size (e.g. when CSS was changed). When no classes are passed all calculated sizes
     * are reset.
     */
    bForce?: boolean
  ): {
    width: number;

    height: number;
  };
}

declare module "sap/ui/dom/includeScript" {
  /**
   * @SINCE 1.58
   *
   * Includes the script (via <script>-tag) into the head for the specified `sUrl` and optional `sId`.
   *
   * @returns When using the configuration object a `Promise` will be returned. The documentation for the
   * `fnLoadCallback` applies to the `resolve` handler of the `Promise` and the one for the `fnErrorCallback`
   * applies to the `reject` handler of the `Promise`.
   */
  export default function includeScript(
    /**
     * the URL of the script to load or a configuration object
     */
    vUrl:
      | string
      | {
          /**
           * the URL of the script to load
           */
          url: string;
          /**
           * id that should be used for the script tag
           */
          id?: string;
          /**
           * map of attributes that should be used for the script tag
           */
          attributes?: object;
        },
    /**
     * id that should be used for the script tag or map of attributes
     */
    vId?: string | object,
    /**
     * callback function to get notified once the script has been loaded
     */
    fnLoadCallback?: Function,
    /**
     * callback function to get notified once the script loading failed
     */
    fnErrorCallback?: Function
  ): void | Promise<any>;
}

declare module "sap/ui/dom/includeStylesheet" {
  /**
   * @SINCE 1.58
   *
   * Includes the specified stylesheet via a <link>-tag in the head of the current document.
   *
   * If `includeStylesheet` is called with an `sId` of an already included stylesheet and:
   * 	 - either `fnLoadCallback` or `fnErrorCallback` is given: the old stylesheet is deleted and a new one
   * 			is inserted
   * 	 - `vUrl` is different from the existing one's: the old stylesheet is deleted and a new one is inserted
   *
   * 	 - otherwise: no action
   *
   * @returns When using the configuration object a `Promise` will be returned. The documentation for the
   * `fnLoadCallback` applies to the `resolve` handler of the `Promise` and the one for the `fnErrorCallback`
   * applies to the `reject` handler of the `Promise`.
   */
  export default function includeStylesheet(
    /**
     * the URL of the stylesheet to load or a configuration object
     */
    vUrl:
      | string
      | {
          /**
           * the URL of the stylesheet to load
           */
          url: string;
          /**
           * id that should be used for the link tag
           */
          id?: string;
          /**
           * map of attributes that should be used for the script tag
           */
          attributes?: object;
        },
    /**
     * id that should be used for the link tag or map of attributes
     */
    vId?: string | object,
    /**
     * callback function to get notified once the stylesheet has been loaded
     */
    fnLoadCallback?: Function,
    /**
     * callback function to get notified once the stylesheet loading failed.
     */
    fnErrorCallback?: Function
  ): void | Promise<any>;
}

declare module "sap/ui/events/checkMouseEnterOrLeave" {
  /**
   * @SINCE 1.58
   *
   * Checks a given mouseover or mouseout event whether it is equivalent to a mouseenter or mouseleave event
   * regarding the given DOM reference.
   *
   * @returns True if the provided event is equivalent
   */
  export default function checkMouseEnterOrLeave(
    /**
     * The Mouse Event
     */
    oEvent: jQuery.Event,
    /**
     * The domref of the element to check
     */
    oDomRef: Element
  ): boolean;
}

declare module "sap/ui/events/ControlEvents" {
  /**
   * @SINCE 1.58
   */
  interface ControlEvents {
    /**
     * List of DOM events that a UIArea automatically takes care of.
     *
     * A control/element doesn't have to bind listeners for these events. It instead can implement an `onevent(oEvent)`
     * method for any of the following events that it wants to be notified about:
     *
     * click, dblclick, contextmenu, focusin, focusout, keydown, keypress, keyup, mousedown, mouseout, mouseover,
     * mouseup, select, selectstart, dragstart, dragenter, dragover, dragleave, dragend, drop, paste, cut, input,
     * touchstart, touchend, touchmove, touchcancel, tap, swipe, swipeleft, swiperight, scrollstart, scrollstop
     *
     * The mouse events and touch events are supported simultaneously on both desktop and mobile browsers. Do
     * NOT create both onmouse* and ontouch* functions to avoid one event being handled twice on the same control.
     */
    events: undefined;

    /**
     * Binds all events for listening with the given callback function.
     */
    bindAnyEvent(
      /**
       * Callback function
       */
      fnCallback: Function
    ): void;
    /**
     * Unbinds all events for listening with the given callback function.
     */
    unbindAnyEvent(
      /**
       * Callback function
       */
      fnCallback: Function
    ): void;
  }
  const ControlEvents: ControlEvents;
  export default ControlEvents;
}

declare module "sap/ui/events/KeyCodes" {
  /**
   * @SINCE 1.58
   */
  enum KeyCodes {
    A = "65",

    ALT = "18",

    ARROW_DOWN = "40",

    ARROW_LEFT = "37",

    ARROW_RIGHT = "39",

    ARROW_UP = "38",

    B = "66",

    BACKSLASH = "226",

    BACKSPACE = "8",

    BREAK = "19",

    C = "67",

    CAPS_LOCK = "20",

    COMMA = "188",

    CONTEXT_MENU = "93",

    CONTROL = "17",

    D = "68",

    DELETE = "46",

    DIGIT_0 = "48",

    DIGIT_1 = "49",

    DIGIT_2 = "50",

    DIGIT_3 = "51",

    DIGIT_4 = "52",

    DIGIT_5 = "53",

    DIGIT_6 = "54",

    DIGIT_7 = "55",

    DIGIT_8 = "56",

    DIGIT_9 = "57",

    DOT = "190",

    E = "69",

    END = "35",

    ENTER = "13",

    EQUALS = "221",

    ESCAPE = "27",

    F = "70",

    F1 = "112",

    F10 = "121",

    F11 = "122",

    F12 = "123",

    F2 = "113",

    F3 = "114",

    F4 = "115",

    F5 = "116",

    F6 = "117",

    F7 = "118",

    F8 = "119",

    F9 = "120",

    G = "71",

    GREAT_ACCENT = "220",

    H = "72",

    HOME = "36",

    I = "73",

    INSERT = "45",

    J = "74",

    K = "75",

    L = "76",

    M = "77",

    MINUS = "219",

    N = "78",

    NUM_LOCK = "144",

    NUMPAD_0 = "96",

    NUMPAD_1 = "97",

    NUMPAD_2 = "98",

    NUMPAD_3 = "99",

    NUMPAD_4 = "100",

    NUMPAD_5 = "101",

    NUMPAD_6 = "102",

    NUMPAD_7 = "103",

    NUMPAD_8 = "104",

    NUMPAD_9 = "105",

    NUMPAD_ASTERISK = "106",

    NUMPAD_COMMA = "110",

    NUMPAD_MINUS = "109",

    NUMPAD_PLUS = "107",

    NUMPAD_SLASH = "111",

    O = "79",

    OPEN_BRACKET = "186",

    P = "80",

    PAGE_DOWN = "34",

    PAGE_UP = "33",

    PIPE = "191",

    PLUS = "187",

    PRINT = "44",

    Q = "81",

    R = "82",

    S = "83",

    SCROLL_LOCK = "145",

    SEMICOLON = "192",

    SHIFT = "16",

    SINGLE_QUOTE = "222",

    SLASH = "189",

    SLEEP = "95",

    SPACE = "32",

    T = "84",

    TAB = "9",

    TURN_OFF = "94",

    U = "85",

    V = "86",

    W = "87",

    WINDOWS = "91",

    X = "88",

    Y = "89",

    Z = "90",
  }
  export default KeyCodes;
}

declare module "sap/ui/events/PseudoEvents" {
  /**
   * @SINCE 1.58
   */
  interface PseudoEvents {
    /**
     * Ordered array of the {@link module:sap/ui/events/PseudoEvents.events}.
     *
     * Order is significant as some check methods rely on the fact that they are tested before other methods.
     * The array is processed during event analysis (when classifying browser events as pseudo events).
     */
    order: undefined;
  }
  const PseudoEvents: PseudoEvents;
  export default PseudoEvents;

  /**
   * Enumeration of all so called "pseudo events", a useful classification of standard browser events as implied
   * by SAP product standards.
   *
   * Whenever a browser event is recognized as one or more pseudo events, then this classification is attached
   * to the original {@link jQuery.Event} object and thereby delivered to any jQuery-style listeners registered
   * for that browser event.
   *
   * Pure JavaScript listeners can evaluate the classification information using the {@link jQuery.Event.prototype.isPseudoType}
   * method.
   *
   * Instead of using the procedure as described above, the SAPUI5 controls and elements should simply implement
   * an `onpseudo-event(oEvent)` method. It will be invoked only when that specific pseudo event has
   * been recognized. This simplifies event dispatching even further.
   */
  export enum events {
    /**
     * Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)
     */
    sapbackspace = "undefined",
    /**
     * Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)
     */
    sapbackspacemodifiers = "undefined",
    /**
     * Pseudo event for pseudo bottom event
     */
    sapbottom = "undefined",
    /**
     * Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)
     */
    sapcollapse = "undefined",
    /**
     * Pseudo event for pseudo collapse event (keyboard numpad *)
     */
    sapcollapseall = "undefined",
    /**
     * Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)
     */
    sapcollapsemodifiers = "undefined",
    /**
     * Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)
     */
    sapdecrease = "undefined",
    /**
     * Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)
     */
    sapdecreasemodifiers = "undefined",
    /**
     * Pseudo event indicating delayed double click (e.g. for inline edit)
     */
    sapdelayeddoubleclick = "undefined",
    /**
     * Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)
     */
    sapdelete = "undefined",
    /**
     * Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)
     */
    sapdeletemodifiers = "undefined",
    /**
     * Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)
     */
    sapdown = "undefined",
    /**
     * Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)
     */
    sapdownmodifiers = "undefined",
    /**
     * Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)
     */
    sapend = "undefined",
    /**
     * Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)
     */
    sapendmodifiers = "undefined",
    /**
     * Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)
     */
    sapenter = "undefined",
    /**
     * Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)
     */
    sapentermodifiers = "undefined",
    /**
     * Pseudo event for keyboard escape
     */
    sapescape = "undefined",
    /**
     * Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)
     */
    sapexpand = "undefined",
    /**
     * Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)
     */
    sapexpandmodifiers = "undefined",
    /**
     * Pseudo event for pseudo 'hide' event (Alt + up-Arrow)
     */
    saphide = "undefined",
    /**
     * Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)
     */
    saphome = "undefined",
    /**
     * Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)
     */
    saphomemodifiers = "undefined",
    /**
     * Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)
     */
    sapincrease = "undefined",
    /**
     * Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)
     */
    sapincreasemodifiers = "undefined",
    /**
     * Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)
     */
    sapleft = "undefined",
    /**
     * Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)
     */
    sapleftmodifiers = "undefined",
    /**
     * Pseudo event for pressing the '-' (minus) sign.
     */
    sapminus = "undefined",
    /**
     * Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)
     */
    sapnext = "undefined",
    /**
     * Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)
     */
    sapnextmodifiers = "undefined",
    /**
     * Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)
     */
    sappagedown = "undefined",
    /**
     * Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)
     */
    sappagedownmodifiers = "undefined",
    /**
     * Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)
     */
    sappageup = "undefined",
    /**
     * Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)
     */
    sappageupmodifiers = "undefined",
    /**
     * Pseudo event for pressing the '+' (plus) sign.
     */
    sapplus = "undefined",
    /**
     * Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)
     */
    sapprevious = "undefined",
    /**
     * Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)
     */
    sappreviousmodifiers = "undefined",
    /**
     * Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)
     */
    sapright = "undefined",
    /**
     * Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)
     */
    saprightmodifiers = "undefined",
    /**
     * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
     */
    sapselect = "undefined",
    /**
     * Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)
     */
    sapselectmodifiers = "undefined",
    /**
     * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)
     */
    sapshow = "undefined",
    /**
     * Pseudo event for pseudo skip back (F6 + shift modifier or ctrl + alt + ArrowUp)
     */
    sapskipback = "undefined",
    /**
     * Pseudo event for pseudo skip forward (F6 + no modifier or ctrl + alt + ArrowDown)
     */
    sapskipforward = "undefined",
    /**
     * Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)
     */
    sapspace = "undefined",
    /**
     * Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)
     */
    sapspacemodifiers = "undefined",
    /**
     * Pseudo event for keyboard tab (TAB + no modifier)
     */
    saptabnext = "undefined",
    /**
     * Pseudo event for keyboard tab (TAB + shift modifier)
     */
    saptabprevious = "undefined",
    /**
     * Pseudo event for pseudo top event
     */
    saptop = "undefined",
    /**
     * Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)
     */
    sapup = "undefined",
    /**
     * Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)
     */
    sapupmodifiers = "undefined",
  }
}

declare module "sap/ui/model/FilterProcessor" {
  import Filter from "sap/ui/model/Filter";

  /**
   * @SINCE 1.71
   *
   * Helper class for processing of filter objects
   */
  interface FilterProcessor {
    /**
     * @SINCE 1.71
     *
     * Groups filters according to their path and combines filters on the same path using "OR" and filters on
     * different paths using "AND", all multi-filters contained are ANDed.
     *
     * @returns Single Filter containing all filters of the array combined or undefined
     */
    groupFilters(
      /**
       * the filters to be grouped
       */
      aFilters: Filter[]
    ): Filter;
  }
  const FilterProcessor: FilterProcessor;
  export default FilterProcessor;
}

declare module "sap/ui/performance/Measurement" {
  /**
   * @SINCE 1.58
   *
   * Performance Measurement API.
   */
  interface Measurement {
    /**
     * Adds a performance measurement with all data.
     *
     * This is useful to add external measurements (e.g. from a backend) to the common measurement UI
     *
     * @returns [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration,
     * categories (false if error)
     */
    add(
      /**
       * ID of the measurement
       */
      sId: string,
      /**
       * Info for the measurement
       */
      sInfo: string,
      /**
       * start timestamp
       */
      iStart: int,
      /**
       * end timestamp
       */
      iEnd: int,
      /**
       * time in milliseconds
       */
      iTime: int,
      /**
       * effective time in milliseconds
       */
      iDuration: int,
      /**
       * An optional list of categories for the measure
       */
      aCategories?: string | string[]
    ): object;
    /**
     * Starts an average performance measure.
     *
     * The duration of this measure is an avarage of durations measured for each call. Optionally a category
     * or list of categories can be passed to allow filtering of measurements.
     *
     * @returns current measurement containing id, info and start-timestamp (false if error)
     */
    average(
      /**
       * ID of the measurement
       */
      sId: string,
      /**
       * Info for the measurement
       */
      sInfo: string,
      /**
       * An optional list of categories for the measure
       */
      aCategories?: string | string[]
    ): object;
    /**
     * Clears all performance measurements.
     */
    clear(): void;
    /**
     * Ends a performance measure.
     *
     * @returns current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false
     * if error)
     */
    end(
      /**
       * ID of the measurement
       */
      sId: string
    ): object;
    /**
     * Gets all performance measurements where a provided filter function returns a truthy value.
     *
     * If neither a filter function nor a category is provided an empty array is returned. To filter for certain
     * properties of measurements a fnFilter can be implemented like this ` function(oMeasurement) { return
     * oMeasurement.duration > 50; }`
     *
     * @returns filtered array with measurements containing id, info and start-timestamp, end-timestamp, time,
     * duration, categories (false if error)
     */
    filterMeasurements(
      /**
       * a filter function that returns true if the passed measurement should be added to the result
       */
      fnFilter?: Function,
      /**
       * Optional parameter to determine if either completed or incomplete measurements should be returned (both
       * if not set or undefined)
       */
      bCompleted?: boolean,
      /**
       * The function returns only measurements which match these specified categories
       */
      aCategories?: string[]
    ): Entry[];
    /**
     * Gets the current state of the performance measurement functionality.
     *
     * @returns current state of the performance measurement functionality
     */
    getActive(): boolean;
    /**
     * Gets all performance measurements.
     *
     * @returns current array with measurements containing id, info and start-timestamp, end-timestamp, time,
     * duration, categories
     */
    getAllMeasurements(
      /**
       * Whether only completed measurements should be returned, if explicitly set to false only incomplete measurements
       * are returned
       */
      bCompleted?: boolean
    ): Entry;
    /**
     * Gets a performance measure.
     *
     * @returns current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false
     * if error)
     */
    getMeasurement(
      /**
       * ID of the measurement
       */
      sId: string
    ): Entry;
    /**
     * Pauses a performance measure.
     *
     * @returns current measurement containing id, info and start-timestamp, pause-timestamp (false if error)
     */
    pause(
      /**
       * ID of the measurement
       */
      sId: string
    ): object;
    /**
     * Registers an average measurement for a given objects method.
     *
     * @returns true if the registration was successful
     */
    registerMethod(
      /**
       * the id of the measurement
       */
      sId: string,
      /**
       * the object of the method
       */
      oObject: object,
      /**
       * the name of the method
       */
      sMethod: string,
      /**
       * An optional categories list for the measurement
       */
      aCategories?: string[]
    ): boolean;
    /**
     * Removes a performance measure.
     */
    remove(
      /**
       * ID of the measurement
       */
      sId: string
    ): void;
    /**
     * Resumes a performance measure.
     *
     * @returns current measurement containing id, info and start-timestamp, resume-timestamp (false if error)
     */
    resume(
      /**
       * ID of the measurement
       */
      sId: string
    ): object;
    /**
     * Activates or deactivates the performance measure functionality.
     *
     * Optionally a category or list of categories can be passed to restrict measurements to certain categories
     * like "javascript", "require", "xmlhttprequest", "render"
     *
     * @returns current state of the performance measurement functionality
     */
    setActive(
      /**
       * state of the performance measurement functionality to set
       */
      bOn: boolean,
      /**
       * An optional list of categories that should be measured
       */
      aCategories: string | string[]
    ): boolean;
    /**
     * Starts a performance measure.
     *
     * Optionally a category or list of categories can be passed to allow filtering of measurements.
     *
     * @returns current measurement containing id, info and start-timestamp (false if error)
     */
    start(
      /**
       * ID of the measurement
       */
      sId: string,
      /**
       * Info for the measurement
       */
      sInfo: string,
      /**
       * An optional list of categories for the measure
       */
      aCategories?: string | string[]
    ): object;
    /**
     * Unregisters all average measurements.
     */
    unregisterAllMethods(): void;
    /**
     * Unregisters an average measurement for a given objects method.
     *
     * @returns true if the unregistration was successful
     */
    unregisterMethod(
      /**
       * the id of the measurement
       */
      sId: string,
      /**
       * the object of the method
       */
      oObject: object,
      /**
       * the name of the method
       */
      sMethod: string
    ): boolean;
  }
  const Measurement: Measurement;
  export default Measurement;

  /**
   * Single Measurement Entry.
   */
  export type Entry = {
    /**
     * ID of the measurement
     */
    sId: string;
    /**
     * Info for the measurement
     */
    sInfo: string;
    /**
     * Start time
     */
    iStart: int;
    /**
     * End time
     */
    iEnd: int;
    /**
     * An optional list of categories for the measure
     */
    aCategories?: string | string[];
  };
}

declare module "sap/ui/performance/trace/FESRHelper" {
  import UI5Element from "sap/ui/core/Element";

  /**
   * @SINCE 1.100
   *
   * FESRHelper API Provides helper functionality for FESR and consumers of FESR
   */
  interface FESRHelper {
    /**
     * @SINCE 1.100
     *
     * Get semantic stepname for an event of a given element used for FESR.
     *
     * @returns The semantic stepname for the given event ID
     */
    getSemanticStepname(
      /**
       * The element conatining the semantic stepname
       */
      oElement: UI5Element,
      /**
       * The event ID of the semantic stepname
       */
      sEventId: string
    ): string;
    /**
     * @SINCE 1.100
     *
     * Add semantic stepname for an event of a given element used for FESR.
     */
    setSemanticStepname(
      /**
       * The element the semantic stepname should be applied to
       */
      oElement: UI5Element,
      /**
       * The event ID the semantic stepname is valid for
       */
      sEventId: string,
      /**
       * The semantic stepname
       */
      sStepname: string
    ): void;
  }
  const FESRHelper: FESRHelper;
  export default FESRHelper;
}

declare module "sap/ui/performance/trace/Interaction" {
  /**
   * @SINCE 1.76
   *
   * Provides base functionality for interaction detection heuristics & API. Interaction detection works through
   * the detection of relevant events and tracking of rendering activities.
   *  An example:
   *  The user clicks on a button
   *
   * 	 - "click" event gets detected via notification (`var notifyEventStart`)
   * 	 - a click handler is registered on the button, so this is an interaction start (`var notifyStepStart`)
   *
   * 	 - some requests are made and rendering has finished (`var notifyStepEnd`)  All measurement takes
   * 			place in {@link module:sap/ui/performance/Measurement}.
   */
  interface Interaction {
    /**
     * @SINCE 1.76
     *
     * Gets all interaction measurements for which a provided filter function returns a truthy value.
     *
     * To filter for certain categories of measurements a fnFilter can be implemented like this ` function(InteractionMeasurement)
     * { return InteractionMeasurement.duration > 0 }`
     *
     * @returns all interaction measurements passing the filter function successfully
     */
    filter(
      /**
       * a filter function that returns true if the passed measurement should be added to the result
       */
      fnFilter: Function
    ): object[];
    /**
     * @SINCE 1.76
     *
     * Returns true if the interaction detection was enabled explicitly, or implicitly along with fesr.
     *
     * @returns bActive State of the interaction detection
     */
    getActive(): boolean;
    /**
     * @SINCE 1.76
     *
     * Gets all interaction measurements.
     *
     * @returns all interaction measurements
     */
    getAll(
      /**
       * finalize the current pending interaction so that it is contained in the returned array
       */
      bFinalize: boolean
    ): object[];
    /**
     * @SINCE 1.76
     *
     * Enables the interaction tracking.
     */
    setActive(
      /**
       * State of the interaction detection
       */
      bActive: boolean
    ): void;
  }
  const Interaction: Interaction;
  export default Interaction;
}

declare module "sap/ui/test/opaQunit" {
  /**
   * QUnit test adapter for OPA: add a test to be executed by QUnit Has the same signature as QUnit.test (QUnit
   * version is also considered) Suggested usage:
   * ```javascript
   *
   * sap.ui.require(["sap/ui/test/Opa5", "sap/ui/test/opaQunit"], function (Opa5, opaTest) {
   *
   *    Opa5.extendConfig({
   *        assertions: new Opa5({
   *            checkIfSomethingIsOk : function () {
   *                this.waitFor({
   *                    success: function () {
   *                        Opa5.assert.ok(true, "Everything is fine");
   *                    }
   *                });
   *            }
   *        })
   *    });
   *
   *    opaTest("Should test something", function (Given, When, Then) {
   *       // Implementation of the test
   *       Then.checkIfSomethingIsOk();
   *    });
   *
   * });
   * ```
   */
  export default function opaQunit(
    /**
     * name of the QUnit test.
     */
    testName: string,
    /**
     * only supported in QUnit v1.x: denotes how many assertions are expected to be made in the test.
     */
    expected: int,
    /**
     * the test function. Expects 3 arguments, in order: {@link sap.ui.test.Opa.config}.arrangements, {@link
     * sap.ui.test.Opa.config}.actions, {@link sap.ui.test.Opa.config}.assertions. These arguments will be prefilled
     * by OPA
     */
    callback: Function,
    /**
     * available only in QUnit v1.x. Indicates whether the test is asynchronous. False by default.
     */
    async?: boolean
  ): void;
  /**
   * QUnit test adapter for OPA: add a test to be executed by QUnit Has the same signature as QUnit.test (QUnit
   * version is also considered) Suggested usage:
   * ```javascript
   *
   * sap.ui.require(["sap/ui/test/Opa5", "sap/ui/test/opaQunit"], function (Opa5, opaTest) {
   *
   *    Opa5.extendConfig({
   *        assertions: new Opa5({
   *            checkIfSomethingIsOk : function () {
   *                this.waitFor({
   *                    success: function () {
   *                        Opa5.assert.ok(true, "Everything is fine");
   *                    }
   *                });
   *            }
   *        })
   *    });
   *
   *    opaTest("Should test something", function (Given, When, Then) {
   *       // Implementation of the test
   *       Then.checkIfSomethingIsOk();
   *    });
   *
   * });
   * ```
   */
  export default function opaQunit(
    /**
     * name of the QUnit test.
     */
    testName: string,
    /**
     * the test function. Expects 3 arguments, in order: {@link sap.ui.test.Opa.config}.arrangements, {@link
     * sap.ui.test.Opa.config}.actions, {@link sap.ui.test.Opa.config}.assertions. These arguments will be prefilled
     * by OPA
     */
    callback: Function,
    /**
     * available only in QUnit v1.x. Indicates whether the test is asynchronous. False by default.
     */
    async?: boolean
  ): void;
}

declare module "sap/ui/util/Mobile" {
  /**
   * @SINCE 1.58
   */
  interface Mobile {
    /**
     * Does some basic modifications to the HTML page that make it more suitable for mobile apps. Only the first
     * call to this method is executed, subsequent calls are ignored. Note that this method is also called by
     * the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell. Exception: if `homeIcon`
     * or `mobileWebAppCapable` were not set, subsequent calls have the chance to set them.
     *
     * The "options" parameter configures what exactly should be done.
     *
     * It can have the following properties:
     * 	 - viewport: whether to set the viewport in a way that disables zooming (default: true)
     * 	 - statusBar: the iOS status bar color, "default", "black" or "black-translucent" (default: "default")
     *
     * 	 - hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more
     * 			native (default: true)
     * 	 - preventScroll: whether native scrolling should be disabled in order to prevent the "rubber-band"
     * 			effect where the whole window is moved (default: true)
     * 	 - preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers
     * 			that look like phone numbers into clickable links; this should be left as "true", otherwise it might
     * 			break controls because Safari actually changes the DOM. This only affects all page content which is created
     * 			after init() is called.
     * 	 - rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is
     * 			set (default: the document.body)
     * 	 - useFullScreenHeight: a boolean that defines whether the height of the html root element should be
     * 			set to 100%, which is required for other elements to cover the full height (default: true) homeIcon:
     * 			deprecated since 1.12, use sap/ui/util/Mobile.setIcons instead.
     */
    init(
      /**
       * configures what exactly should be done
       */
      options?: {
        /**
         * whether to set the viewport in a way that disables zooming
         */
        viewport?: boolean;
        /**
         * the iOS status bar color, "default", "black" or "black-translucent"
         */
        statusBar?: string;
        /**
         * whether the browser UI should be hidden as far as possible to make the app feel more native
         */
        hideBrowser?: boolean;
        /**
         * whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole
         * window is moved
         */
        preventScroll?: boolean;
        /**
         * whether Safari mobile should be prevented from transforming any numbers that look like phone numbers
         * into clickable links
         */
        preventPhoneNumberDetection?: boolean;
        /**
         * the ID of the root element that should be made fullscreen; only used when hideBrowser is set. If not
         * set, the body is used
         */
        rootId?: string;
        /**
         * whether the height of the html root element should be set to 100%, which is required for other elements
         * to cover the full height
         */
        useFullScreenHeight?: boolean;
        /**
         * deprecated since 1.12, use sap/ui/util/Mobile.setIcons instead.
         */
        homeIcon?: string;
        /**
         * deprecated since 1.12, use sap/ui/util/Mobile.setIcons instead.
         */
        homeIconPrecomposed?: boolean;
        /**
         * whether the Application will be loaded in full screen mode after added to home screen on mobile devices.
         * The default value for this property only enables the full screen mode when runs on iOS device.
         */
        mobileWebAppCapable?: boolean;
      }
    ): void;
    /**
     * Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices
     * after the user does "add to home screen".
     *
     * Only call this method once and call it early when the page is loading: browsers behave differently when
     * the favicon is modified while the page is alive. Some update the displayed icon inside the browser but
     * use an old icon for bookmarks. When a favicon is given, any other existing favicon in the document will
     * be removed. When at least one home icon is given, all existing home icons will be removed and new home
     * icon tags for all four resolutions will be created.
     *
     * The home icons must be in PNG format and given in different sizes for iPad/iPhone with low and high pixel
     * density display. The favicon is used in the browser and for desktop shortcuts and should optimally be
     * in ICO format: ICO files can contain different image sizes for different usage locations. E.g. a 16x16px
     * version is used inside browsers.
     *
     * All icons are given in an an object holding icon URLs and other settings. The properties of this object
     * are:
     * 	 - phone: a 120x120 pixel version for iPhones with low pixel density
     * 	 - tablet: a 152x152 pixel version for iPads with low pixel density
     * 	 - phone@2: a 180x180 pixel version for iPhones with high pixel density
     * 	 - tablet@2: a 167x167 pixel version for iPads with high pixel density
     * 	 - precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default:
     * 			false)
     * 	 - favicon: the ICO file to be used inside the browser and for desktop shortcuts
     *
     * One example is:
     * ```javascript
     *
     * {
     *    'phone':'phone-icon_120x120.png',
     *    'phone@2':'phone-retina_180x180.png',
     *    'tablet':'tablet-icon_152x152.png',
     *    'tablet@2':'tablet-retina_167x167.png',
     *    'precomposed':true,
     *    'favicon':'desktop.ico'
     * }
     * ```
     *  If one of the sizes is not given, the largest available alternative image will be used instead for this
     * size. On Android these icons may or may not be used by the device. Apparently chances can be improved
     * by using icons with glare effect, so the "precomposed" property can be set to "true". Some Android devices
     * may also use the favicon for bookmarks instead of the home icons.
     */
    setIcons(oIcons: object): void;
    /**
     * Sets the "apple-mobile-web-app-capable" and "mobile-web-app-capable" meta information which defines whether
     * the application is loaded in full screen mode (browser address bar and toolbar are hidden) after the
     * user does "add to home screen" on mobile devices. Currently this meta tag is only supported by iOS Safari
     * and mobile Chrome from version 31.
     *
     * If the application opens new tabs because of attachments, url and so on, setting this to false will let
     * the user be able to go from the new tab back to the application tab after the application is added to
     * home screen.
     *
     * Note: this function only has effect when the application runs on iOS Safari and mobile Chrome from version
     * 31.
     */
    setWebAppCapable(
      /**
       * whether the Application will be loaded in full screen mode after added to home screen from iOS Safari
       * or mobile Chrome from version 31.
       */
      bValue: boolean
    ): void;
  }
  const Mobile: Mobile;
  export default Mobile;
}

declare module "sap/ui/util/Storage" {
  /**
   * @SINCE 1.58
   *
   * A Storage API for JavaScript.
   *
   * **Note:** The Web Storage API stores the data on the client. Therefore, you must not use this API for
   * confidential information.
   *
   * Provides a unified interface and methods to store data on the client using the Web Storage API or a custom
   * implementation. By default, data can be persisted inside localStorage or sessionStorage.
   *
   * A typical intended usage of this API is the storage of a string representing the state of a control.
   * In this case, the data is stored in the browser session, and the methods to be used are {@link #put}
   * and {@link #get}. The method {@link #remove} can be used to delete the previously saved state.
   *
   * The `Storage` class allows a simple scoping by prefixing the keys of all `put/get/remove` operations
   * with a fixed prefix given when constructing a storage instance. By choosing unique prefixes, different
   * instances can write/read/delete data to the same underlying storage implementation without interfering
   * with each other.
   *
   * For the sake of completeness, the method {@link #clear} is available. However, it does not honor the
   * scoping and therefore should only be called when a global erasing of data is required. If only keys with
   * certain prefix should be deleted, the method {@link #removeAll} should be used.
   *
   * Besides creating an own storage instance, callers can use the static methods of the `Storage` class to
   * access a default session storage instance. All calls will use the same scope (same prefix).
   */
  export default class Storage {
    constructor(
      /**
       * The type of native storage implementation that this `Storage` instance should use internally. Alternatively,
       * this can be a custom implementation of the {@link https://developer.mozilla.org/en-US/docs/Web/API/Storage
       * Storage Web API).
       */
      vStorage?: (Type | keyof typeof Type) | Storage,
      /**
       * The scope prefix to be used by this storage instance
       */
      sStorageKeyPrefix?: string
    );

    /**
     * Clears the whole storage (Independent of the current Storage instance!).
     *
     * **CAUTION** This method should be called only in very particular situations, when a global erasing of
     * data is required. Given that the method deletes the data saved under any key, it should not be called
     * when managing data for specific controls.
     *
     * @returns Whether clearing the storage was successful
     */
    static clear(): boolean;
    /**
     * Retrieves the value for the given key or `null` if the key does not exist in this storage.
     *
     * The returned value will be of a type that `JSON.parse` could return, too.
     *
     * @returns The key's value or `null` if the key does not exist in the storage.
     */
    static get(
      /**
       * Key to retrieve the value for; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string
    ): any;
    /**
     * Returns the type of this storage.
     *
     * @returns Type of this storage or "unknown" when the Storage was created with an unknown type or implementation
     */
    static getType(): (Type | keyof typeof Type) | string;
    /**
     * Returns whether the given storage is supported.
     *
     * @returns true if storage is supported, false otherwise (e.g. due to browser security settings)
     */
    static isSupported(): boolean;
    /**
     * Stores the given value under the given key in the storage or updates the value if the key already exists.
     *
     * This method supports the same types of values as `JSON.stringify`.
     *
     * @returns Whether the data was successfully stored
     */
    static put(
      /**
       * Key to store the given value under; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string,
      /**
       * Value to store/update under the given key
       */
      vValue: any
    ): boolean;
    /**
     * Removes the key and its value from storage, if the key exists.
     *
     * @returns Whether the deletion succeeded; if the key didn't exists, the method also reports a success
     */
    static remove(
      /**
       * Key to remove; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string
    ): boolean;
    /**
     * Removes all key/value pairs form the storage where the key starts with the given `sKeyPrefix`.
     *
     * @returns Whether the deletion was successful; if no key matches the prefix, this is also a success
     */
    static removeAll(
      /**
       * Key prefix for the keys/values to delete; will be additionally prefixed with the prefix given when constructing
       * this `Storage`
       */
      sKeyPrefix?: string
    ): boolean;
    /**
     * Clears the whole storage (Independent of the current Storage instance!).
     *
     * **CAUTION** This method should be called only in very particular situations, when a global erasing of
     * data is required. Given that the method deletes the data saved under any key, it should not be called
     * when managing data for specific controls.
     *
     * @returns Whether clearing the storage was successful
     */
    clear(): boolean;
    /**
     * Retrieves the value for the given key or `null` if the key does not exist in this storage.
     *
     * The returned value will be of a type that `JSON.parse` could return, too.
     *
     * @returns The key's value or `null` if the key does not exist in the storage.
     */
    get(
      /**
       * Key to retrieve the value for; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string
    ): any;
    /**
     * Returns the type of this storage.
     *
     * @returns Type of this storage or "unknown" when the Storage was created with an unknown type or implementation
     */
    getType(): (Type | keyof typeof Type) | string;
    /**
     * Returns whether the given storage is supported.
     *
     * @returns true if storage is supported, false otherwise (e.g. due to browser security settings)
     */
    isSupported(): boolean;
    /**
     * Stores the given value under the given key in the storage or updates the value if the key already exists.
     *
     * This method supports the same types of values as `JSON.stringify`.
     *
     * @returns Whether the data was successfully stored
     */
    put(
      /**
       * Key to store the given value under; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string,
      /**
       * Value to store/update under the given key
       */
      vValue: any
    ): boolean;
    /**
     * Removes the key and its value from storage, if the key exists.
     *
     * @returns Whether the deletion succeeded; if the key didn't exists, the method also reports a success
     */
    remove(
      /**
       * Key to remove; will be prefixed with the prefix given when constructing this `Storage`
       */
      sKey: string
    ): boolean;
    /**
     * Removes all key/value pairs form the storage where the key starts with the given `sKeyPrefix`.
     *
     * @returns Whether the deletion was successful; if no key matches the prefix, this is also a success
     */
    removeAll(
      /**
       * Key prefix for the keys/values to delete; will be additionally prefixed with the prefix given when constructing
       * this `Storage`
       */
      sKeyPrefix?: string
    ): boolean;
  }
  /**
   * Enumeration of the storage types supported by {@link module:sap/ui/util/Storage}.
   */
  export enum Type {
    /**
     * Indicates usage of the browser's localStorage feature
     */
    local = "local",
    /**
     * Indicates usage of the browser's sessionStorage feature
     */
    session = "session",
  }
}

declare module "sap/ui/VersionInfo" {
  /**
   * @SINCE 1.56.0
   */
  interface VersionInfo {
    /**
     * @SINCE 1.56.0
     *
     * Loads the version info asynchronously from resource "sap-ui-version.json".
     *
     * By default, the returned promise will resolve with the whole version info file's content. If a library
     * name is specified in the options, then the promise will resolve with the version info for that library
     * only or with `undefined`, if the named library is not listed in the version info file.
     *
     * If loading the version info file fails, the promise will be rejected with the corresponding error.
     *
     * @returns A promise which resolves with the full version info or with the library specific version info
     * or `undefined` if the library is not listed; if an error occurred during loading, then the promise is
     * rejected.
     */
    load(
      /**
       * Map of options
       */
      mOptions?: {
        /**
         * Name of a library (e.g. "sap.ui.core")
         */
        library?: string;
      }
    ): Promise<object | undefined>;
  }
  const VersionInfo: VersionInfo;
  export default VersionInfo;
}

declare module "sap/ui/app/Application" {
  import {
    default as Component,
    $ComponentSettings,
  } from "sap/ui/core/Component";

  import UIComponent from "sap/ui/core/UIComponent";

  import ComponentMetadata from "sap/ui/core/ComponentMetadata";

  import Model from "sap/ui/model/Model";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.15.1) - The Component class is enhanced to take care about the Application code.
   * @EXPERIMENTAL (since 1.11.1) - The Application class is still under construction, so some implementation
   * details can be changed in future.
   *
   * Abstract application class. Extend this class to create a central application class.
   */
  export default class Application extends Component {
    /**
     * Creates an application instance, only one instance is allowed (singleton).
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new application instance
       */
      mSettings?: $ApplicationSettings
    );
    /**
     * Creates an application instance, only one instance is allowed (singleton).
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the application; generated automatically if no non-empty ID is given. **Note:** this
       * can be omitted, no matter whether `mSettings` will be given or not
       */
      sId?: string,
      /**
       * Initial settings for the new application instance
       */
      mSettings?: $ApplicationSettings
    );

    /**
     * Creates a new subclass of class sap.ui.app.Application with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Application>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.app.Application.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ComponentMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates and returns the root component. Override this method in your application implementation, if you
     * want to override the default creation by metadata.
     *
     * @returns the root component
     */
    createRootComponent(): UIComponent;
    /**
     * See:
     * 	sap.ui.core.Component#destroy
     */
    destroy(): void;
    /**
     * Destroys the rootComponent in the aggregation {@link #getRootComponent rootComponent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyRootComponent(): this;
    /**
     * Gets current value of property {@link #getConfig config}.
     *
     * @returns Value of property `config`
     */
    getConfig(): any;
    /**
     * Gets current value of property {@link #getRoot root}.
     *
     * @returns Value of property `root`
     */
    getRoot(): string;
    /**
     * Gets content of aggregation {@link #getRootComponent rootComponent}.
     */
    getRootComponent(): UIComponent;
    /**
     * @SINCE 1.13.1
     * @deprecated (since 1.14)
     *
     * Returns the application root component.
     *
     * @returns The root component
     */
    getView(): UIComponent;
    /**
     * The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application
     * class implementation to execute code which relies on a loaded DOM / UI5.
     */
    main(): void;
    /**
     * On before exit application hook. Override this method in your Application class implementation, to handle
     * cleanup before the real exit or to prompt a question to the user, if the application should be exited.
     *
     * @returns return a string if a prompt should be displayed to the user confirming closing the application
     * (e.g. when the application is not yet saved).
     */
    onBeforeExit(): string;
    /**
     * On error hook. Override this method in your Application class implementation to listen to unhandled errors.
     */
    onError(
      /**
       * The error message.
       */
      sMessage: string,
      /**
       * The file where the error occurred
       */
      sFile: string,
      /**
       * The line number of the error
       */
      iLine: number
    ): void;
    /**
     * On exit application hook. Override this method in your Application class implementation, to handle cleanup
     * of the application.
     */
    onExit(): void;
    /**
     * @SINCE 1.13.1
     *
     * Sets the configuration model.
     */
    setConfig(
      /**
       * the configuration model, the configuration object or a URI string to load a JSON configuration file.
       */
      vConfig: string | object | Model
    ): void;
    /**
     * Sets a new value for property {@link #getRoot root}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRoot(
      /**
       * New value for property `root`
       */
      sRoot: string
    ): this;
    /**
     * Sets the aggregated {@link #getRootComponent rootComponent}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setRootComponent(
      /**
       * The rootComponent to set
       */
      oRootComponent: UIComponent
    ): this;
  }

  export interface $ApplicationSettings extends $ComponentSettings {
    root?: string | PropertyBindingInfo;

    config?: any | PropertyBindingInfo | `{${string}}`;

    rootComponent?: UIComponent;
  }
}

declare module "sap/ui/app/MockServer" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.15.1) - The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}
   * @EXPERIMENTAL (since 1.13.0) - The mock server is still under construction, so some implementation details
   * can be changed in future.
   *
   * Class to mock a server.
   */
  export default class MockServer extends ManagedObject {
    /**
     * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or
     * simple XHR calls, without changing the application code. This class can also be used for qunit tests.
     */
    constructor(
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $MockServerSettings,
      /**
       * scope object for resolving string based type and formatter references in bindings
       */
      oScope?: object
    );
    /**
     * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or
     * simple XHR calls, without changing the application code. This class can also be used for qunit tests.
     */
    constructor(
      /**
       * id for the new server object; generated automatically if no non-empty id is given Note: this can be omitted,
       * no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $MockServerSettings,
      /**
       * scope object for resolving string based type and formatter references in bindings
       */
      oScope?: object
    );
  }

  export interface $MockServerSettings extends $ManagedObjectSettings {}
}

declare module "sap/ui/base/DataType" {
  /**
   * @SINCE 0.9.0
   *
   * Represents the type of properties in a `ManagedObject` class.
   *
   * Each type provides some metadata like its {@link #getName qualified name} or its {@link #getBaseType
   * base type} in case of a derived type. Array types provide information about the allowed {@link #getComponentType
   * type of components} in an array, enumeration types inform about the set of their allowed {@link #getEnumValues
   * keys and values}.
   *
   * Each type has a method to {@link #isValid check whether a value is valid} for a property of that type.
   *
   * Already defined types can be looked up by calling {@link #.getType DataType.getType}, new types can only
   * be created by calling the factory method {@link #.createType DataType.createType}, calling the constructor
   * will throw an error.
   */
  export default class DataType {
    constructor();

    /**
     * Derives a new type from a given base type.
     *
     * Example:
     *
     * ```javascript
     *
     *
     *   var fooType = DataType.createType('foo', {
     *       isValid : function(vValue) {
     *           return /^(foo(bar)?)$/.test(vValue);
     *       }
     *   }, DataType.getType('string'));
     *
     *   fooType.isValid('foo'); // true
     *   fooType.isValid('foobar'); // true
     *   fooType.isValid('==foobar=='); // false
     *
     * ```
     *
     *
     * If `mSettings` contains an implementation for `isValid`, then the validity check of the newly created
     * type will first execute the check of the base type and then call the given `isValid` function.
     *
     * Array types and enumeration types cannot be created with this method. They're created on-the-fly by {@link
     * #.getType DataType.getType} when such a type is looked up.
     *
     * **Note:** The creation of new primitive types is not supported. When a type is created without a base
     * type, it is automatically derived from the primitive type `any`.
     *
     * **Note:** If a type has to be used in classes, then the implementation of `isValid` must exactly have
     * the structure shown in the example above (single return statement, regular expression literal of the
     * form `/^(...)$/`, calling `/regex/.test()` on the given value). Only the inner part of the regular expression
     * literal can be different.
     *
     * @returns The newly created type object
     */
    static createType(
      /**
       * Unique qualified name of the new type
       */
      sName: string,
      /**
       * Settings for the new type
       */
      mSettings?: {
        /**
         * Default value for the type (inherited if not given)
         */
        defaultValue?: any;
        /**
         * Additional validity check function for values of the type (inherited if not given)
         */
        isValid?: Function;
        /**
         * Parse function that converts a locale independent string into a value of the type (inherited if not given)
         */
        parseValue?: Function;
      },
      /**
       * Base type for the new type
       */
      vBase?: DataType | string
    ): DataType;
    /**
     * Looks up the type with the given name and returns it.
     *
     * See {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Defining Control Properties} for a list of the built-in
     * primitive types and their semantics.
     *
     * The lookup consists of the following steps:
     * 	 - When a type with the given name is already known, it will be returned
     * 	 - When the name ends with a pair of brackets (`[]`), a type with the name in front of the brackets
     * 			(`name.slice(0,-2)`) will be looked up and an array type will be created with the looked-up type as its
     * 			component type. If the component type is `undefined`, `undefined` will be returned
     * 	 - When a global property exists with the same name as the type and when the value of that property
     * 			is an instance of `DataType`, that instance will be returned
     * 	 - When a global property exists with the same name as the type and when the value of that property
     * 			is a plain object (its prototype is `Object`), then an enum type will be created, based on the keys and
     * 			values in that object. The `parseValue` method of the type will accept any of the keys in the plain object
     * 			and convert them to the corresponding value; `isValid` will accept any of the values from the plain object's
     * 			keys. The `defaultValue` will be the value of the first key found in the plain object
     * 	 - When a global property exist with any other, non-falsy value, a warning is logged and the primitive
     * 			type 'any' is returned
     * 	 - If no such global property exist, an error is logged and `undefined` is returned
     *
     *  UI Libraries and even components can introduce additional types. This method only checks
     * for types that either have been defined already, or that describe arrays of values of an already defined
     * type or types whose name matches the global name of a plain object (containing enum keys and values).
     * This method doesn't try to load modules that might contain type definitions. So before being able to
     * lookup and use a specific type, the module containing its definition has to be loaded. For that reason
     * it is suggested that controls (or `ManagedObject` classes in general) declare a dependency to all modules
     * (typically `some/lib/library.js` modules) that contain the type definitions needed by the specific control
     * or class definition.
     *
     * @returns Type object or `undefined` when no such type has been defined yet
     */
    static getType(
      /**
       * Qualified name of the type to retrieve
       */
      sTypeName: string
    ): DataType | undefined;
    /**
     * The base type of this type or undefined if this is a primitive type.
     *
     * @returns Base type or `undefined`
     */
    getBaseType(): DataType | undefined;
    /**
     * Returns the component type of this type or `undefined` if this is not an array type.
     *
     * @returns Component type or `undefined`
     */
    getComponentType(): DataType | undefined;
    /**
     * The default value for this type. Each type must define a default value.
     *
     * @returns Default value of the data type. The type of the returned value must match the JavaScript type
     * of the data type (a string for string types etc.)
     */
    getDefaultValue(): any;
    /**
     * Returns the object with keys and values from which this enum type was created or `undefined` if this
     * is not an enum type.
     *
     * @returns Object with enum keys and values or `undefined`
     */
    getEnumValues(): object | undefined;
    /**
     * The qualified name of the data type.
     *
     * @returns Name of the data type
     */
    getName(): string;
    /**
     * Returns the most basic (primitive) type that this type has been derived from.
     *
     * If the type is a primitive type by itself, `this` is returned.
     *
     * @returns Primitive type of this type
     */
    getPrimitiveType(): DataType;
    /**
     * Whether this type is an array type.
     *
     * @returns Whether this type is an array type
     */
    isArrayType(): boolean;
    /**
     * Whether this type is an enumeration type.
     *
     * @returns Whether this type is an enum type
     */
    isEnumType(): boolean;
    /**
     * Checks whether the given value is valid for this type.
     *
     * To be implemented by concrete types.
     *
     * @returns Whether the given value is valid for this data type (without conversion)
     */
    isValid(
      /**
       * Value to be checked
       */
      vValue: any
    ): boolean;
    /**
     * Normalizes the given value using the specified normalizer for this data type.
     *
     * If no normalizer has been set, the original value is returned.
     *
     * @returns Normalized value
     */
    normalize(
      /**
       * Value to be normalized
       */
      oValue: any
    ): any;
    /**
     * Parses the given string value and converts it into the specific data type.
     *
     * @returns Value in the correct internal format
     */
    parseValue(
      /**
       * String representation for a value of this type
       */
      sValue: string
    ): any;
    /**
     * Set or unset a normalizer function to be used for values of this data type.
     *
     * When a normalizer function has been set, it will be applied to values of this type whenever {@link #normalize}
     * is called. `ManagedObject.prototype.setProperty` calls the `normalize` method before setting a new value
     * to a property (normalization is applied on-write, not on-read).
     *
     * The `fnNormalize` function has the signature
     * ```javascript
     *
     *   fnNormalize(value:any) : any
     * ```
     *  It will be called with a value for this type and should return a normalized value (which also must be
     * valid for the this type). There's no mean to reject a value. The `this` context of the function will
     * be this type.
     *
     * This method allows applications or application frameworks to plug-in a generic value normalization for
     * a type, e.g. to convert all URLs in some app-specific way before they are applied to controls. It is
     * not intended to break-out of the value range defined by a type.
     */
    setNormalizer(
      /**
       * Function to apply for normalizing
       */
      fnNormalizer: Function
    ): void;
  }
}

declare module "sap/ui/base/Event" {
  import BaseObject from "sap/ui/base/Object";

  import { Poolable } from "sap/ui/base/ObjectPool";

  import EventProvider from "sap/ui/base/EventProvider";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * An Event object consisting of an ID, a source and a map of parameters. Implements {@link sap.ui.base.Poolable}
   * and therefore an event object in the event handler will be reset by {@link sap.ui.base.ObjectPool} after
   * the event handler is done.
   */
  export default class Event extends BaseObject implements Poolable {
    __implements__sap_ui_base_Poolable: boolean;
    /**
     * Creates an event with the given `sId`, linked to the provided `oSource` and enriched with the `mParameters`.
     */
    constructor(
      /**
       * The ID of the event
       */
      sId: string,
      /**
       * Source of the event
       */
      oSource: EventProvider,
      /**
       * Parameters for this event
       */
      oParameters: object
    );

    /**
     * Creates a new subclass of class sap.ui.base.Event with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Event>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.base.Event.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Cancel bubbling of the event.
     *
     * **Note:** This function only has an effect if the bubbling of the event is supported by the event source.
     */
    cancelBubble(): void;
    /**
     * Returns the id of the event.
     *
     * @returns The ID of the event
     */
    getId(): string;
    /**
     * Returns the value of the parameter with the given name.
     *
     * @returns Value of the named parameter
     */
    getParameter(
      /**
       * Name of the parameter to return
       */
      sName: string
    ): any;
    /**
     * Returns an object with all parameter values of the event.
     *
     * @returns All parameters of the event
     */
    getParameters(): Record<string, any>;
    /**
     * Returns the event provider on which the event was fired.
     *
     * @returns The source of the event
     */
    getSource(): EventProvider;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Init this event with its data.
     *
     * The `init` method is called by an object pool when the object is (re-)activated for a new caller.
     *
     * When no `oParameters` are given, an empty object is used instead.
     * See:
     * 	sap.ui.base.Poolable.prototype#init
     */
    init(
      /**
       * ID of the event
       */
      sId: string,
      /**
       * Source of the event
       */
      oSource: EventProvider,
      /**
       * The event parameters
       */
      oParameters?: object
    ): void;
    /**
     * Prevent the default action of this event.
     *
     * **Note:** This function only has an effect if preventing the default action of the event is supported
     * by the event source.
     */
    preventDefault(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Reset event data, needed for pooling.
     * See:
     * 	sap.ui.base.Poolable.prototype#reset
     */
    reset(): void;
  }
}

declare module "sap/ui/base/EventProvider" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Provides eventing capabilities for objects like attaching or detaching event handlers for events which
   * are notified when events are fired.
   */
  export default class EventProvider extends BaseObject {
    /**
     * Creates an instance of EventProvider.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.base.EventProvider with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EventProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.base.EventProvider.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Attaches an event handler to the event with the given identifier.
     *
     * @returns Returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * An object that will be passed to the handler along with the event object when the event is fired
       */
      oData: object,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event})
       * is provided as first argument of the handler. Handlers must not change the content of the event. The
       * second argument is the specified `oData` instance (if present).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event provider.
       */
      oListener?: object
    ): this;
    /**
     * Attaches an event handler to the event with the given identifier.
     *
     * @returns Returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event})
       * is provided as first argument of the handler. Handlers must not change the content of the event. The
       * second argument is the specified `oData` instance (if present).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event provider.
       */
      oListener?: object
    ): this;
    /**
     * Attaches an event handler, called one time only, to the event with the given identifier.
     *
     * When the event occurs, the handler function is called and the handler registration is automatically removed
     * afterwards.
     *
     * @returns Returns `this` to allow method chaining
     */
    attachEventOnce(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * An object that will be passed to the handler along with the event object when the event is fired
       */
      oData: object,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event})
       * is provided as first argument of the handler. Handlers must not change the content of the event. The
       * second argument is the specified `oData` instance (if present).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event provider.
       */
      oListener?: object
    ): this;
    /**
     * Attaches an event handler, called one time only, to the event with the given identifier.
     *
     * When the event occurs, the handler function is called and the handler registration is automatically removed
     * afterwards.
     *
     * @returns Returns `this` to allow method chaining
     */
    attachEventOnce(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event})
       * is provided as first argument of the handler. Handlers must not change the content of the event. The
       * second argument is the specified `oData` instance (if present).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event provider.
       */
      oListener?: object
    ): this;
    /**
     * Cleans up the internal structures and removes all event handlers.
     *
     * The object must not be used anymore after destroy was called.
     * See:
     * 	sap.ui.base.Object#destroy
     */
    destroy(): void;
    /**
     * Removes a previously attached event handler from the event with the given identifier.
     *
     * The passed parameters must match those used for registration with {@link #attachEvent} beforehand.
     *
     * @returns Returns `this` to allow method chaining
     */
    detachEvent(
      /**
       * The identifier of the event to detach from
       */
      sEventId: string,
      /**
       * The handler function to detach from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.
     *
     * @returns Returns `this` to allow method chaining. When `preventDefault` is supported on the fired event
     * the function returns `true` if the default action should be executed, `false` otherwise.
     */
    fireEvent(
      /**
       * The identifier of the event to fire
       */
      sEventId: string,
      /**
       * Parameters which should be carried by the event
       */
      oParameters?: object,
      /**
       * Defines whether function `preventDefault` is supported on the fired event
       */
      bAllowPreventDefault?: boolean,
      /**
       * Defines whether event bubbling is enabled on the fired event. Set to `true` the event is also forwarded
       * to the parent(s) of the event provider ({@link #getEventingParent}) until the bubbling of the event is
       * stopped or no parent is available anymore.
       */
      bEnableEventBubbling?: boolean
    ): this | boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the parent in the eventing hierarchy of this object.
     *
     * Per default this returns null, but if eventing is used in objects, which are hierarchically structured,
     * this can be overwritten to make the object hierarchy visible to the eventing and enables the use of event
     * bubbling within this object hierarchy.
     *
     * @returns The parent event provider
     */
    getEventingParent(): EventProvider | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether there are any registered event handlers for the event with the given identifier.
     *
     * @returns Whether there are any registered event handlers
     */
    hasListeners(
      /**
       * The identifier of the event
       */
      sEventId: string
    ): boolean;
    /**
     * Returns a string representation of this object.
     *
     * In case there is no class or id information, a simple static string is returned. Subclasses should override
     * this method.
     *
     * @returns A string description of this event provider
     */
    toString(): string;
  }
}

declare module "sap/ui/base/Interface" {
  import BaseObject from "sap/ui/base/Object";

  /**
   * A class whose instances act as a facade for other objects.
   *
   * **Note:** If a class returns a facade in its constructor, only the defined functions will be visible,
   * no internals of the class can be accessed.
   */
  export default class Interface {
    /**
     * Constructs a facade for the given object, containing only the named methods.
     *
     * For each method named in `aMethods`, a wrapper function will be added to the facade. When called, the
     * wrapper function calls the method with the same name in the original `oObject`, passing all its call
     * parameters to it without modification. A return value of the original method will be returned to the
     * caller. Before returning it, values of type `sap.ui.base.Object` will be replaced by their facades, calling
     * {@link sap.ui.base.Object#getInterface getInterface} on them.
     *
     * It is possible to create different facades exposing different sets of methods for the same object, but
     * as `getInterface` can only return one of those interfaces, the special handling of the return values
     * doesn't support multiple facades per object.
     */
    constructor(
      /**
       * Object for which a facade should be created
       */
      oObject: BaseObject,
      /**
       * Names of the methods, that should be available in the new facade
       */
      aMethods: string[]
    );
  }
}

declare module "sap/ui/base/ManagedObject" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Event from "sap/ui/base/Event";

  import Type from "sap/ui/model/Type";

  import Binding from "sap/ui/model/Binding";

  import Context from "sap/ui/model/Context";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Model from "sap/ui/model/Model";

  import ContextBinding from "sap/ui/model/ContextBinding";

  import ChangeReason from "sap/ui/model/ChangeReason";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import { MetadataOptions as MetadataOptions1 } from "sap/ui/base/Object";

  import BindingMode from "sap/ui/model/BindingMode";

  /**
   * Base Class that introduces some basic concepts, such as, state management and data binding.
   *
   * New subclasses of ManagedObject are created with a call to {@link #.extend ManagedObject.extend} and
   * can make use of the following managed features:
   *
   * Properties: Managed properties represent the state of a ManagedObject. They can store a single value
   * of a simple data type (like 'string' or 'int'). They have a name (e.g. 'size') and methods to
   * get the current value (`getSize`), or to set a new value (`setSize`). When a property is modified by
   * calling the setter, the ManagedObject is marked as invalidated. A managed property can be bound against
   * a property in a {@link sap.ui.model.Model} by using the {@link #bindProperty} method. Updates to the
   * model property will be automatically reflected in the managed property and - if TwoWay databinding is
   * active, changes to the managed property will be reflected in the model. An existing binding can be removed
   * by calling {@link #unbindProperty}.
   *
   * If a ManagedObject is cloned, the clone will have the same values for its managed properties as the source
   * of the clone - if the property wasn't bound. If it is bound, the property in the clone will be bound
   * to the same model property as in the source.
   *
   * Details about the declaration of a managed property, the metadata that describes it and the set of methods
   * that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend
   * extend } method.
   *
   * Aggregations: Managed aggregations can store one or more references to other ManagedObjects. They are
   * a mean to control the lifecycle of the aggregated objects: one ManagedObject can be aggregated by at
   * most one parent ManagedObject at any time. When a ManagedObject is destroyed, all aggregated objects
   * are destroyed as well and the object itself is removed from its parent. That is, aggregations won't contain
   * destroyed objects or null/undefined.
   *
   * Aggregations have a name ('e.g 'header' or 'items'), a cardinality ('0..1' or '0..n') and
   * are of a specific type (which must be a subclass of ManagedObject as well or a UI5 interface).
   * A ManagedObject will provide methods to set or get the aggregated object for a specific aggregation of
   * cardinality 0..1 (e.g. `setHeader`, `getHeader` for an aggregation named 'header'). For an aggregation
   * of cardinality 0..n, there are methods to get all aggregated objects (`getItems`), to locate an object
   * in the aggregation (e.g. `indexOfItem`), to add, insert or remove a single aggregated object (`addItem`,
   * `insertItem`, `removeItem`) or to remove or destroy all objects from an aggregation (`removeAllItems`,
   * `destroyItems`).
   *
   * Details about the declaration of a managed aggregation, the metadata that describes the aggregation,
   * and the set of methods that are automatically generated to access it, can be found in the documentation
   * of the {@link sap.ui.base.ManagedObject.extend extend} method.
   *
   * Aggregations of cardinality 0..n can be bound to a collection in a model by using {@link #bindAggregation}
   * (and unbound again using {@link #unbindAggregation}). For each context in the model collection, a corresponding
   * object will be created in the managed aggregation, either by cloning a template object or by calling
   * a factory function.
   *
   * Aggregations also control the databinding context of bound objects: by default, aggregated objects inherit
   * all models and binding contexts from their parent object.
   *
   * When a ManagedObject is cloned, all aggregated objects will be cloned as well - but only if they haven't
   * been added by databinding. In that case, the aggregation in the clone will be bound to the same model
   * collection.
   *
   * Associations: Managed associations also form a relationship between objects, but they don't define a
   * lifecycle for the associated objects. They even can 'break' in the sense that an associated object might
   * have been destroyed already although it is still referenced in an association. For the same reason, the
   * internal storage for associations are not direct object references but only the IDs of the associated
   * target objects.
   *
   * Associations have a name ('e.g 'initialFocus'), a cardinality ('0..1' or '0..n') and are
   * of a specific type (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject
   * will provide methods to set or get the associated object for a specific association of cardinality 0..1
   * (e.g. `setInitialFocus`, `getInitialFocus`). For an association of cardinality 0..n, there are methods
   * to get all associated objects (`getRefItems`), to add, insert or remove a single associated object (`addRefItem`,
   * `insertRefItem`, `removeRefItem`) or to remove all objects from an association (`removeAllRefItems`).
   *
   * Details about the declaration of a managed association, the metadata that describes it and the set of
   * methods that are automatically generated to access it, can be found in the documentation of the {@link
   * sap.ui.base.ManagedObject.extend extend} method.
   *
   * Associations can't be bound to the model.
   *
   * When a ManagedObject is cloned, the result for an association depends on the relationship between the
   * associated target object and the root of the clone operation. If the associated object is part of the
   * to-be-cloned object tree (reachable via aggregations from the root of the clone operation), then the
   * cloned association will reference the clone of the associated object. Otherwise the association will
   * reference the same object as in the original tree. When a ManagedObject is destroyed, other objects that
   * are only associated, are not affected by the destroy operation.
   *
   * Events: Managed events provide a mean for communicating important state changes to an arbitrary number
   * of 'interested' listeners. Events have a name and (optionally) a set of parameters. For
   * each event there will be methods to add or remove an event listener as well as a method to fire the event.
   * (e.g. `attachChange`, `detachChange`, `fireChange` for an event named 'change').
   *
   * Details about the declaration of managed events, the metadata that describes the event, and the set of
   * methods that are automatically generated to access it, can be found in the documentation of the {@link
   * sap.ui.base.ManagedObject.extend extend} method.
   *
   * When a ManagedObject is cloned, all listeners registered for any event in the clone source are also registered
   * to the clone. Later changes are not reflected in any direction (neither from source to clone, nor vice
   * versa).
   *
   * Low Level APIs:: The prototype of ManagedObject provides several generic, low
   * level APIs to manage properties, aggregations, associations, and events. These generic methods are solely
   * intended for implementing higher level, non-generic methods that manage a single managed property etc.
   * (e.g. a function `setSize(value)` that sets a new value for property 'size'). {@link sap.ui.base.ManagedObject.extend}
   * creates default implementations of those higher level APIs for all managed aspects. The implementation
   * of a subclass then can override those default implementations with a more specific implementation, e.g.
   * to implement a side effect when a specific property is set or retrieved. It is therefore important to
   * understand that the generic low-level methods ARE NOT SUITABLE FOR GENERIC ACCESS to the state of a managed
   * object, as that would bypass the overriding higher level methods and their side effects.
   */
  export default class ManagedObject extends EventProvider {
    /**
     * Constructs and initializes a managed object with the given `sId` and settings.
     *
     * If the optional `mSettings` are given, they must be a simple object that defines values for properties,
     * aggregations, associations or events keyed by their name.
     *
     * **Valid Names and Value Ranges:**
     *
     * The property (key) names supported in the object literal are exactly the (case sensitive) names documented
     * in the JSDoc for the properties, aggregations, associations and events of the current class and its base
     * classes. Note that for 0..n aggregations and associations this name usually is the plural name, whereas
     * it is the singular name in case of 0..1 relations.
     *
     * The possible values for a setting depend on its kind:
     * 	 - for simple properties, the value has to match the documented type of the property (no type conversion
     * 			occurs)
     * 	 - for 0..1 aggregations, the value has to be an instance of the aggregated type
     * 	 - for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single
     * 			instance
     * 	 - for 0..1 associations, an instance of the associated type or an id (string) is accepted
     * 	 - for 0..n associations, an array of instances of the associated type or of IDs is accepted
     * 	 - for events, either a function (event handler) is accepted or an array of length 2 where the first
     * 			element is a function and the 2nd element is an object to invoke the method on; or an array of length
     * 			3, where the first element is an arbitrary payload object, the second one is a function and the 3rd one
     * 			is an object to invoke the method on; or an array of arrays where each nested array has the 2 or 3 element
     * 			structure described before (multiple listeners).
     *
     * Each subclass should document the name and type of its supported settings in its constructor documentation.
     *
     * Example usage:
     * ```javascript
     *
     * new Dialog({
     *    title: "Some title text",            // property of type "string"
     *    showHeader: true,                    // property of type "boolean"
     *    endButton: new Button(...),          // 0..1 aggregation
     *    content: [                           // 0..n aggregation
     *       new Input(...),
     *       new Input(...)
     *    ],
     *    afterClose: function(oEvent) { ... } // event handler function
     * });
     * ```
     *
     *
     * Instead of static values and object instances, data binding expressions can be used, either embedded
     * in a string or as a binding info object as described in {@link #bindProperty} or {@link #bindAggregation}.
     *
     * Example usage:
     * ```javascript
     *
     * new Dialog({
     *    title: "{/title}",       // embedded binding expression, points to a string property in the data model
     *    ...
     *    content: {               // binding info object
     *       path : "/inputItems", // points to a collection in the data model
     *       template : new Input(...)
     *    }
     * });
     * ```
     *
     *
     * Note that when setting string values, any curly braces in those values need to be escaped, so they are
     * not interpreted as binding expressions. Use {@link #escapeSettingsValue} to do so.
     *
     * Besides the settings documented below, ManagedObject itself supports the following special settings:
     *
     * 	 - `id : sap.ui.core.ID` an ID for the new instance. Some subclasses (Element, Component) require
     * 			the id to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component
     * 			id must be unique across all Components). `models : object` a map of {@link sap.ui.model.Model}
     * 			instances keyed by their model name (alias). Each entry with key k in this object has the same
     * 			effect as a call `this.setModel(models[k], k);`.
     * 	 - `bindingContexts : object` a map of {@link sap.ui.model.Context} instances keyed by their
     * 			model name. Each entry with key k in this object has the same effect as a call `this.setBindingContext(bindingContexts[k],
     * 			k);`
     * 	 - `objectBindings : object` a map of binding paths keyed by the corresponding model name. Each
     * 			entry with key k in this object has the same effect as a call `this.bindObject(objectBindings[k],
     * 			k);` `metadataContexts : object` an array of single binding contexts keyed by the corresponding
     * 			model or context name. The purpose of the `metadataContexts` special setting is to deduce as much information
     * 			as possible from the binding context of the control in order to be able to predefine certain standard
     * 			properties like e.g. visible, enabled, tooltip,...
     *
     * The structure is an array of single contexts, where a single context is a map containing the following
     * keys:
     * 	 - `path: string (mandatory)` The path to the corresponding model property or object, e.g. '/Customers/Name'.
     * 			A path can also be relative, e.g. 'Name'
     * 	 - `model: string (optional)` The name of the model, in case there is no name then the undefined
     * 			model is taken
     * 	 - `name: string (optional)` A name for the context to used in templating phase
     * 	 - `kind: string (optional)` The kind of the adapter, either `field` for single properties or
     * 			`object` for structured contexts. `adapter: string (optional)` The path to an interpretion
     * 			class that dilivers control relevant data depending on the context, e.g. enabled, visible. If not supplied
     * 			the OData meta data is interpreted.  The syntax for providing the `metadataContexts` is as follows:
     * 			`{SINGLE_CONTEXT1},...,{SINGLE_CONTEXTn}` or for simplicity in case there is only one context `{SINGLE_CONTEXT}`.
     *
     * Examples for such metadataContexts are:
     * 	 - `{/Customers/Name}` a single part with an absolute path to the property Name of the Customers
     * 			entity set in the default model
     * 	 - `{path: 'Customers/Name', model:'json'}` a single part with an absolute path to the property Name
     * 			of the Customers entity set in a named model
     * 	 - `{parts: [{path: 'Customers/Name'},{path: 'editable', model: 'viewModel'}]}` a combination of single
     * 			binding contexts, one context from the default model and one from the viewModel
     */
    constructor(
      /**
       * Optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $ManagedObjectSettings,
      /**
       * Scope object for resolving string based type and formatter references in bindings. When a scope object
       * is given, `mSettings` cannot be omitted, at least `null` or an empty object literal must be given.
       */
      oScope?: object
    );
    /**
     * Constructs and initializes a managed object with the given `sId` and settings.
     *
     * If the optional `mSettings` are given, they must be a simple object that defines values for properties,
     * aggregations, associations or events keyed by their name.
     *
     * **Valid Names and Value Ranges:**
     *
     * The property (key) names supported in the object literal are exactly the (case sensitive) names documented
     * in the JSDoc for the properties, aggregations, associations and events of the current class and its base
     * classes. Note that for 0..n aggregations and associations this name usually is the plural name, whereas
     * it is the singular name in case of 0..1 relations.
     *
     * The possible values for a setting depend on its kind:
     * 	 - for simple properties, the value has to match the documented type of the property (no type conversion
     * 			occurs)
     * 	 - for 0..1 aggregations, the value has to be an instance of the aggregated type
     * 	 - for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single
     * 			instance
     * 	 - for 0..1 associations, an instance of the associated type or an id (string) is accepted
     * 	 - for 0..n associations, an array of instances of the associated type or of IDs is accepted
     * 	 - for events, either a function (event handler) is accepted or an array of length 2 where the first
     * 			element is a function and the 2nd element is an object to invoke the method on; or an array of length
     * 			3, where the first element is an arbitrary payload object, the second one is a function and the 3rd one
     * 			is an object to invoke the method on; or an array of arrays where each nested array has the 2 or 3 element
     * 			structure described before (multiple listeners).
     *
     * Each subclass should document the name and type of its supported settings in its constructor documentation.
     *
     * Example usage:
     * ```javascript
     *
     * new Dialog({
     *    title: "Some title text",            // property of type "string"
     *    showHeader: true,                    // property of type "boolean"
     *    endButton: new Button(...),          // 0..1 aggregation
     *    content: [                           // 0..n aggregation
     *       new Input(...),
     *       new Input(...)
     *    ],
     *    afterClose: function(oEvent) { ... } // event handler function
     * });
     * ```
     *
     *
     * Instead of static values and object instances, data binding expressions can be used, either embedded
     * in a string or as a binding info object as described in {@link #bindProperty} or {@link #bindAggregation}.
     *
     * Example usage:
     * ```javascript
     *
     * new Dialog({
     *    title: "{/title}",       // embedded binding expression, points to a string property in the data model
     *    ...
     *    content: {               // binding info object
     *       path : "/inputItems", // points to a collection in the data model
     *       template : new Input(...)
     *    }
     * });
     * ```
     *
     *
     * Note that when setting string values, any curly braces in those values need to be escaped, so they are
     * not interpreted as binding expressions. Use {@link #escapeSettingsValue} to do so.
     *
     * Besides the settings documented below, ManagedObject itself supports the following special settings:
     *
     * 	 - `id : sap.ui.core.ID` an ID for the new instance. Some subclasses (Element, Component) require
     * 			the id to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component
     * 			id must be unique across all Components). `models : object` a map of {@link sap.ui.model.Model}
     * 			instances keyed by their model name (alias). Each entry with key k in this object has the same
     * 			effect as a call `this.setModel(models[k], k);`.
     * 	 - `bindingContexts : object` a map of {@link sap.ui.model.Context} instances keyed by their
     * 			model name. Each entry with key k in this object has the same effect as a call `this.setBindingContext(bindingContexts[k],
     * 			k);`
     * 	 - `objectBindings : object` a map of binding paths keyed by the corresponding model name. Each
     * 			entry with key k in this object has the same effect as a call `this.bindObject(objectBindings[k],
     * 			k);` `metadataContexts : object` an array of single binding contexts keyed by the corresponding
     * 			model or context name. The purpose of the `metadataContexts` special setting is to deduce as much information
     * 			as possible from the binding context of the control in order to be able to predefine certain standard
     * 			properties like e.g. visible, enabled, tooltip,...
     *
     * The structure is an array of single contexts, where a single context is a map containing the following
     * keys:
     * 	 - `path: string (mandatory)` The path to the corresponding model property or object, e.g. '/Customers/Name'.
     * 			A path can also be relative, e.g. 'Name'
     * 	 - `model: string (optional)` The name of the model, in case there is no name then the undefined
     * 			model is taken
     * 	 - `name: string (optional)` A name for the context to used in templating phase
     * 	 - `kind: string (optional)` The kind of the adapter, either `field` for single properties or
     * 			`object` for structured contexts. `adapter: string (optional)` The path to an interpretion
     * 			class that dilivers control relevant data depending on the context, e.g. enabled, visible. If not supplied
     * 			the OData meta data is interpreted.  The syntax for providing the `metadataContexts` is as follows:
     * 			`{SINGLE_CONTEXT1},...,{SINGLE_CONTEXTn}` or for simplicity in case there is only one context `{SINGLE_CONTEXT}`.
     *
     * Examples for such metadataContexts are:
     * 	 - `{/Customers/Name}` a single part with an absolute path to the property Name of the Customers
     * 			entity set in the default model
     * 	 - `{path: 'Customers/Name', model:'json'}` a single part with an absolute path to the property Name
     * 			of the Customers entity set in a named model
     * 	 - `{parts: [{path: 'Customers/Name'},{path: 'editable', model: 'viewModel'}]}` a combination of single
     * 			binding contexts, one context from the default model and one from the viewModel
     */
    constructor(
      /**
       * ID for the new managed object; generated automatically if no non-empty ID is given **Note:** this can
       * be omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * Optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $ManagedObjectSettings,
      /**
       * Scope object for resolving string based type and formatter references in bindings. When a scope object
       * is given, `mSettings` cannot be omitted, at least `null` or an empty object literal must be given.
       */
      oScope?: object
    );

    /**
     * @SINCE 1.52
     *
     * Escapes the given value so it can be used in the constructor's settings object. Should be used when property
     * values are initialized with static string values which could contain binding characters (curly braces).
     *
     * @returns The given value, escaped for usage as static property value in the constructor's settings object
     * (or unchanged, if not of type string)
     */
    static escapeSettingsValue(
      /**
       * Value to escape; only needs to be done for string values, but the call will work for all types
       */
      vValue: any
    ): any;
    /**
     * Defines a new subclass of ManagedObject with name `sClassName` and enriches it with the information contained
     * in `oClassInfo`.
     *
     * `oClassInfo` can contain the same information that {@link sap.ui.base.Object.extend} already accepts,
     * plus the following new properties in the 'metadata' object literal (see {@link sap.ui.base.ManagedObject.MetadataOptions
     * MetadataOptions} for details on each of them):
     * 	 - `library : string`
     * 	 - `properties : object`
     * 	 - `defaultProperty : string`
     * 	 - `aggregations : object`
     * 	 - `defaultAggregation : string`
     * 	 - `associations : object`
     * 	 - `events : object`
     * 	 - `specialSettings : object` // this one is still experimental and not for public usage!
     *
     * Example:
     * ```javascript
     *
     * ManagedObject.extend('sap.mylib.MyClass', {
     *   metadata : {
     *     library: 'sap.mylib',
     *     properties : {
     *       value: 'string',
     *       width: 'sap.ui.core.CSSSize',
     *       height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%'}
     *       description: { type: 'string', defaultValue: '', selector: '#{id}-desc'}
     *     },
     *     defaultProperty : 'value',
     *     aggregations : {
     *       header : { type: 'sap.mylib.FancyHeader', multiple : false }
     *       items : 'sap.ui.core.Control',
     *       buttons: { type: 'sap.mylib.Button', multiple : true, selector: '#{id} > .sapMLButtonsSection'}
     *     },
     *     defaultAggregation : 'items',
     *     associations : {
     *       initiallyFocused : { type: 'sap.ui.core.Control' }
     *     },
     *     events: {
     *       beforeOpen : {
     *         parameters : {
     *           opener : { type: 'sap.ui.core.Control' }
     *         }
     *       }
     *     },
     *   },
     *
     *   init: function() {
     *   }
     *
     * }); // end of 'extend' call
     * ```
     *
     *
     * @returns The created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class to be created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ManagedObject>,
      /**
       * Constructor function for the metadata object. If not given, it defaults to `sap.ui.base.ManagedObjectMetadata`.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the metadata for the ManagedObject class.
     *
     * @returns Metadata for the ManagedObject class.
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds some entity `oObject` to the aggregation identified by `sAggregationName`.
     *
     * If the given object is not valid with regard to the aggregation (if it is not an instance of the type
     * specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1,
     * then an Error is thrown (see {@link #validateAggregation}.
     *
     * If the aggregation already has content, the new object will be added after the current content. If the
     * new object was already contained in the aggregation, it will be moved to the end.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically add an object to an aggregation. Use
     * the concrete method addXYZ for aggregation 'XYZ' or the generic {@link #applySettings} instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    addAggregation(
      /**
       * the string identifying the aggregation that `oObject` should be added to.
       */
      sAggregationName: string,
      /**
       * the object to add; if empty, nothing is added
       */
      oObject: ManagedObject,
      /**
       * if true, this ManagedObject as well as the added child are not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds some object with the ID `sId` to the association identified by `sAssociationName` and marks this
     * ManagedObject as changed.
     *
     * This method does not avoid duplicates.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically add an object to an association. Use
     * the concrete method addXYZ for association 'XYZ' or the generic {@link #applySettings} instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    addAssociation(
      /**
       * the string identifying the association the object should be added to.
       */
      sAssociationName: string,
      /**
       * the ID of the ManagedObject object to add; if empty, nothing is added; if a `sap.ui.base.ManagedObject`
       * is given, its ID is added
       */
      sId: string | ManagedObject,
      /**
       * if true, this managed object as well as the newly associated object are not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * Sets all the properties, aggregations, associations and event handlers as given in the object literal
     * `mSettings`. If a property, aggregation, etc. is not listed in `mSettings`, then its value is not changed
     * by this method.
     *
     * For properties and 0..1 aggregations/associations, any given setting overwrites the current value. For
     * 0..n aggregations, the given values are appended; event listeners are registered in addition to existing
     * ones.
     *
     * For the possible keys and values in `mSettings` see the general documentation in {@link sap.ui.base.ManagedObject}
     * or the specific documentation of the constructor of the concrete managed object class.
     *
     * @returns Returns `this` to allow method chaining
     */
    applySettings(
      /**
       * the settings to apply to this managed object
       */
      mSettings: object,
      /**
       * Scope object to resolve types and formatters
       */
      oScope?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:formatError formatError} event of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated from the model, but formatting
     * the value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFormatError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:formatError formatError} event of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated from the model, but formatting
     * the value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFormatError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:modelContextChange modelContextChange} event
     * of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext
     * or due to propagation)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachModelContextChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:modelContextChange modelContextChange} event
     * of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext
     * or due to propagation)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachModelContextChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated to the model, but parsing the
     * value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated to the model, but parsing the
     * value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationError validationError} event of this
     * `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated to the model, but validating
     * the value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationError validationError} event of this
     * `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired when a new value for a bound property should have been propagated to the model, but validating
     * the value failed with an exception.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationSuccess validationSuccess} event of
     * this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired after a new value for a bound property has been propagated to the model. Only fired, when the binding
     * uses a data type.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationSuccess(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationSuccess validationSuccess} event of
     * this `sap.ui.base.ManagedObject`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.base.ManagedObject` itself.
     *
     * Fired after a new value for a bound property has been propagated to the model. Only fired, when the binding
     * uses a data type.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationSuccess(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.base.ManagedObject` itself
       */
      oListener?: object
    ): this;
    /**
     * Bind an aggregation to the model.
     *
     * Whenever the corresponding model becomes available or changes (either via a call to {@link #setModel
     * setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindList bindList}
     * method will be called to create a new {@link sap.ui.model.ListBinding ListBinding} with the configured
     * binding options.
     *
     * The bound aggregation will use the given template, clone it for each item which exists in the bound list
     * and set the appropriate binding context.
     *
     * This is a generic method which can be used to bind any aggregation to the model. A class may flag aggregations
     * in its metadata with `bindable: "bindable"` to get typed `bindSomething` and `unbindSomething`
     * methods for those aggregations.
     *
     * Also see {@link topic:91f057786f4d1014b6dd926db0e91070 List Binding (Aggregation Binding)} in the documentation.
     *
     * For more information on the `oBindingInfo.key` property and its usage, see {@link topic:7cdff73f308b4b10bdf7d83b7aba72e7
     * Extended Change Detection}.
     *
     * @returns Returns `this` to allow method chaining
     */
    bindAggregation(
      /**
       * Name of a public aggregation to bind
       */
      sName: string,
      /**
       * Binding info
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @deprecated (since 1.11.1) - please use {@link #bindObject} instead.
     *
     * Bind the object to the referenced entity in the model, which is used as the binding context to resolve
     * bound properties or aggregations of the object itself and all of its children relatively to the given
     * path.
     *
     * @returns reference to the instance itself
     */
    bindContext(
      /**
       * the binding path
       */
      sPath: string
    ): this;
    /**
     * Bind the object to the referenced entity in the model.
     *
     * The entity is used as the binding context to resolve bound properties or aggregations of the object itself
     * and all of its children relatively to the given path. If a relative binding path is used, it will be
     * evaluated anew whenever the parent context changes.
     *
     * Whenever the corresponding model becomes available or changes (either via a call to {@link #setModel
     * setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindContext
     * bindContext} method will be called to create a new {@link sap.ui.model.ContextBinding ContextBinding}
     * with the configured binding options.
     *
     * There's no difference between `bindObject` and {@link sap.ui.core.Element#bindElement bindElement}. Method
     * `bindObject` was introduced together with `ManagedObject` to make context bindings also available on
     * `ManagedObject`s. The new name was chosen to reflect that the binding is not necessarily applied to an
     * `Element`, it also could be applied to a component or some other `ManagedObject`.
     *
     * Also see {@link topic:91f05e8b6f4d1014b6dd926db0e91070 Context Binding} in the documentation.
     *
     * @returns Returns `this` to allow method chaining
     */
    bindObject(
      /**
       * Binding info
       */
      oBindingInfo: ObjectBindingInfo
    ): this;
    /**
     * Binds a property to the model.
     *
     * Whenever the corresponding model becomes available or changes (either via a call to {@link #setModel
     * setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindProperty
     * bindProperty} method will be called to create a new {@link sap.ui.model.PropertyBinding PropertyBinding}
     * with the configured binding options.
     *
     * The Setter for the given property will be called by the binding with the value retrieved from the data
     * model. When the binding mode is `OneTime`, the property will be set only once. When it is `OneWay`, the
     * property will be updated whenever the corresponding data in the model changes. In mode `TwoWay`, changes
     * to the property (not originating in the model) will be reported back to the model (typical use case:
     * user interaction changes the value of a control).
     *
     * This is a generic method which can be used to bind any property to the model. A managed object may flag
     * any property in its metadata with `bindable: "bindable"` to additionally provide named methods to bind
     * and unbind the corresponding property.
     *
     * **Composite Binding**
     *  A composite property binding which combines data from multiple model paths can be declared using the
     * `parts` parameter instead of `path`. The `formatter` function or a {@link sap.ui.model.CompositeType
     * composite type} then can be used to combine the parts, Properties with a composite binding are also known
     * as "calculated fields".
     *
     * Example:
     * ```javascript
     *
     *   oTxt.bindValue({
     *     parts: [
     *       {path: "/firstName", type: "sap.ui.model.type.String"},
     *       {path: "myModel2>/lastName"}
     *     ]
     *   });
     * ```
     *
     *
     * Note that a composite binding will be forced into mode `OneWay` when one of the binding parts is not
     * in mode `TwoWay`.
     *
     * **Static Binding**
     *  A StaticBinding allows to define static values within a `sap.ui.model.CompositeBinding`. It behaves
     * like a property binding but always returns the value that is stored in the binding itself. The binding
     * does not have a `sap.ui.model.Context`, a `sap.ui.model.Model` or a `oBindingInfo.path`. A StaticBinding
     * is created when a `oBindingInfo.value` is passed instead of a `oBindingInfo.path` or `oBindingInfo.parts[i].path`.
     *
     * Also see {@link sap.ui.model.StaticBinding StaticBinding} in the documentation.
     *
     * **Formatter Functions**
     *  When a formatter function is specified for the binding or for a binding part, it will be called with
     * the value of the bound model property. After setting the initial property value, the formatter function
     * will only be called again when the bound model property changes (simple property binding) or when at
     * least one of the bound model properties changes (formatter function of a composite binding). Note that
     * a binding only monitors the bound model data for changes. Dependencies of the formatter implementation
     * to other model data is not known to the binding and changes won't be detected.
     *
     * When the formatter for a property binding (simple or composite) is called, the managed object will be
     * given as `this` context. For formatters of binding parts in a composite binding, this is not the case.
     *
     * Also see {@link topic:91f0652b6f4d1014b6dd926db0e91070 Property Binding} in the documentation.
     *
     * @returns Returns `this` to allow method chaining
     */
    bindProperty(
      /**
       * Name of a public property to bind; public aggregations of cardinality 0..1 that have an alternative,
       * simple type (e.g. "string" or "int") can also be bound with this method
       */
      sName: string,
      /**
       * Binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * Clones a tree of objects starting with the object on which clone is called first (root object).
     *
     * The IDs within the newly created clone tree are derived from the original IDs by appending the given
     * `sIdSuffix` (if no suffix is given, one will be created; it will be unique across multiple clone calls).
     *
     * The `oOptions` configuration object can have the following properties:
     * 	 - The boolean value `cloneChildren` specifies whether associations/aggregations will be cloned
     * 	 - The boolean value `cloneBindings` specifies if bindings will be cloned  Note: In case the configuration
     * 			`oOptions` is specified, the default values `true` no longer apply, which means in case `cloneChildren`
     * 			or `cloneBindings` is not specified, then this ia assumed to be `false` and associations/aggregations
     * 			or bindings are not cloned.
     *
     * For each cloned object, the following settings are cloned based on the metadata of the object and the
     * defined options:
     * 	 - All properties that are not bound. If `cloneBindings` is `false`, also the bound properties will
     * 			be cloned; in general, values are referenced 1:1, not cloned. For some property types, however, the getters
     * 			or setters might clone the value (e.g. array types and properties using metadata option `byValue`)
     * 	 - All aggregated objects that are not bound. If `cloneBindings` is `false`, also the ones that are
     * 			bound will be cloned; they are all cloned recursively using the same `sIdSuffix`
     * 	 - All associated controls; when an association points to an object inside the cloned object tree, then
     * 			the cloned association will be modified so that it points to the clone of the target object. When the
     * 			association points to a managed object outside of the cloned object tree, then its target won't be changed.
     *
     * 	 - All models set via `setModel()`; used by reference.
     * 	 - All property and aggregation bindings (if `cloneBindings` is `true`); the pure binding information
     * 			(path, model name) is cloned, but all other information like template control or factory function, data
     * 			type or formatter function are copied by reference. The bindings themselves are created anew as they
     * 			are specific for the combination (object, property, model). As a result, any later changes to a binding
     * 			of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.
     *
     *
     * Each clone is created by first collecting the above mentioned settings and then creating a new instance
     * with the normal constructor function. As a result, any side effects of mutator methods (`setProperty`
     * etc.) or init hooks are repeated during clone creation. There is no need to override `clone()` just to
     * reproduce these internal settings!
     *
     * Custom controls however can override `clone()` to implement additional clone steps. They usually will
     * first call `clone()` on the super class and then modify the returned clone accordingly.
     *
     * Applications **must never provide** the second parameter `aLocaleIds`. It is determined automatically
     * for the root object (and its non-existence also serves as an indicator for the root object). Specifying
     * it will break the implementation of `clone()`.
     *
     * @returns Reference to the newly created clone
     */
    clone(
      /**
       * a suffix to be appended to the cloned object ID
       */
      sIdSuffix?: string,
      /**
       * an array of local IDs within the cloned hierarchy (internally used)
       */
      aLocalIds?: string[],
      /**
       * Configuration object; when omitted, both properties default to `true`; when specified, undefined properties
       * default to `false`
       */
      oOptions?: {
        /**
         * Whether associations and aggregations will be cloned
         */
        cloneChildren?: boolean;
        /**
         * Whether bindings will be cloned
         */
        cloneBindings?: boolean;
      }
    ): this;
    /**
     * Cleans up the resources associated with this object and all its aggregated children.
     *
     * After an object has been destroyed, it can no longer be used!
     *
     * Applications should call this method if they don't need the object any longer.
     */
    destroy(
      /**
       * If `true`, this ManagedObject and all its ancestors won't be invalidated.
       * This flag should be used only during control development to optimize invalidation procedures. It should
       * not be used by any application code.
       */
      bSuppressInvalidate?: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Destroys (all) the managed object(s) in the aggregation named `sAggregationName` and empties the aggregation.
     * If the aggregation did contain any object, this ManagedObject is marked as changed.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically destroy all objects in an aggregation.
     * Use the concrete method destroyXYZ for aggregation 'XYZ' instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    destroyAggregation(
      /**
       * the name of the aggregation
       */
      sAggregationName: string,
      /**
       * if true, this ManagedObject is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:formatError formatError} event of this `sap.ui.base.ManagedObject`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFormatError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:modelContextChange modelContextChange} event
     * of this `sap.ui.base.ManagedObject`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachModelContextChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:parseError parseError} event of this `sap.ui.base.ManagedObject`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachParseError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validationError validationError} event of
     * this `sap.ui.base.ManagedObject`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidationError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validationSuccess validationSuccess} event
     * of this `sap.ui.base.ManagedObject`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidationSuccess(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Searches and returns all aggregated objects that pass the given check function.
     *
     * When the search is done recursively (`bRecursive === true`), it will be executed depth-first and ancestors
     * will be added to the result array before their descendants.
     *
     * If no check function is given, all aggregated objects will pass the check and be added to the result
     * array.
     *
     * When setting `bIncludeBindingTemplates` to `true`, binding templates will be included in the search.
     *
     * **Take care:** this operation might be expensive.
     *
     * @returns Array of aggregated objects that passed the check
     */
    findAggregatedObjects(
      /**
       * Whether the whole aggregation tree should be searched
       */
      bRecursive?: boolean,
      /**
       * Objects for which this function returns a falsy value will not be added to the result array
       */
      fnCondition?: (p1: ManagedObject) => boolean,
      /**
       * Whether binding templates should be included
       */
      bIncludeBindingTemplates?: boolean
    ): ManagedObject[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:formatError formatError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFormatError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * ManagedObject instance whose property should have received the model update.
         */
        element?: ManagedObject;
        /**
         * Name of the property for which the binding should have been updated.
         */
        property?: string;
        /**
         * Data type used in the binding (if any).
         */
        type?: Type;
        /**
         * New value (model representation) as propagated from the model.
         */
        newValue?: any;
        /**
         * Old value (external representation) as previously stored in the ManagedObject.
         */
        oldValue?: any;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:modelContextChange modelContextChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireModelContextChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:parseError parseError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireParseError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * ManagedObject instance whose property initiated the model update.
         */
        element?: ManagedObject;
        /**
         * Name of the property for which the bound model property should have been been updated.
         */
        property?: string;
        /**
         * Data type used in the binding.
         */
        type?: Type;
        /**
         * New value (external representation) as parsed by the binding.
         */
        newValue?: any;
        /**
         * Old value (external representation) as previously stored in the ManagedObject.
         */
        oldValue?: any;
        /**
         * Localized message describing the parse error
         */
        message?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validationError validationError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidationError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * ManagedObject instance whose property initiated the model update.
         */
        element?: ManagedObject;
        /**
         * Name of the property for which the bound model property should have been been updated.
         */
        property?: string;
        /**
         * Data type used in the binding.
         */
        type?: Type;
        /**
         * New value (external representation) as parsed and validated by the binding.
         */
        newValue?: any;
        /**
         * Old value (external representation) as previously stored in the ManagedObject.
         */
        oldValue?: any;
        /**
         * Localized message describing the validation issues
         */
        message?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validationSuccess validationSuccess} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidationSuccess(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * ManagedObject instance whose property initiated the model update.
         */
        element?: ManagedObject;
        /**
         * Name of the property for which the bound model property has been updated.
         */
        property?: string;
        /**
         * Data type used in the binding.
         */
        type?: Type;
        /**
         * New value (external representation) as propagated to the model.
         *
         * **Note: **the model might modify (normalize) the value again and this modification will be stored in
         * the ManagedObject. The 'newValue' parameter of this event contains the value **before** such a normalization.
         */
        newValue?: any;
        /**
         * Old value (external representation) as previously stored in the ManagedObject.
         */
        oldValue?: any;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the aggregated object(s) for the named aggregation of this ManagedObject.
     *
     * If the aggregation does not contain any objects(s), the given `oDefaultForCreation` (or `null`) is set
     * as new value of the aggregation and returned to the caller.
     *
     * **Note:** the need to specify a default value and the fact that it is stored as new value of a so far
     * empty aggregation is recognized as a shortcoming of this API but can no longer be changed for compatibility
     * reasons.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically read the content of an aggregation.
     * Use the concrete method getXYZ for aggregation 'XYZ' instead.
     *
     * @returns Aggregation array in case of 0..n-aggregations or the managed object or `null` in case of 0..1-aggregations
     */
    getAggregation(
      /**
       * Name of the aggregation
       */
      sAggregationName: string,
      /**
       * Object that is used in case the current aggregation is empty. If provided, it must be null for 0..1 aggregations
       * or an empty array for 0..n aggregations. If not provided, `null` is used.
       *
       * **Note:** When an empty array is given and used because the aggregation was not set before, then this
       * array will be used for the aggregation from thereon. Sharing the same empty array between different calls
       * to this method therefore is not possible and will result in inconsistencies.
       */
      oDefaultForCreation?: ManagedObject | any[]
    ): ManagedObject | ManagedObject[] | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the content of the association with the given name.
     *
     * For associations of cardinality 0..1, a single string with the ID of an associated object is returned
     * (if any). For cardinality 0..n, an array with the IDs of the associated objects is returned.
     *
     * If the association does not contain any objects(s), the given `oDefaultForCreation` is set as new value
     * of the association and returned to the caller. The only supported values for `oDefaultForCreation` are
     * `null` and `undefined` in the case of cardinality 0..1 and `null`, `undefined` or an empty array (`[]`)
     * in case of cardinality 0..n. If the argument is omitted, `null` is used independently from the cardinality.
     *
     * **Note:** the need to specify a default value and the fact that it is stored as new value of a so far
     * empty association is recognized as a shortcoming of this API but can no longer be changed for compatibility
     * reasons.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically retrieve the content of an association.
     * Use the concrete method getXYZ for association 'XYZ' instead.
     *
     * @returns the ID of the associated managed object or an array of such IDs; may be null if the association
     * has not been populated
     */
    getAssociation(
      /**
       * the name of the association
       */
      sAssociationName: string,
      /**
       * the object that is used in case the current aggregation is empty (only null or empty array allowed)
       */
      oDefaultForCreation: object
    ): string | string[] | null;
    /**
     * Get the binding object for a specific aggregation/property.
     *
     * @returns the binding for the given name
     */
    getBinding(
      /**
       * the name of the property or aggregation
       */
      sName: string
    ): Binding | undefined;
    /**
     * Get the binding context of this object for the given model name.
     *
     * If the object does not have a binding context set on itself and has no own model set, it will use the
     * first binding context defined in its parent hierarchy.
     *
     * **Note:** to be compatible with future versions of this API, you must not use the following model names:
     *
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`  Omitting the model name (or using the value `undefined`)
     * 			is explicitly allowed and refers to the default model.
     *
     * **Note:** A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.
     *
     * @returns The binding context of this object
     */
    getBindingContext(
      /**
       * the name of the model or `undefined`
       */
      sModelName?: string
    ): Context | null | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the binding info for the given property or aggregation.
     *
     * The binding info contains information about path, binding object, format options, sorter, filter etc.
     * for the property or aggregation. As the binding object is only created when the model becomes available,
     * the `binding` property may be undefined.
     *
     * @returns A binding info object, containing at least a `path` or `parts` property and, depending on the
     * binding type, additional properties
     */
    getBindingInfo(
      /**
       * Name of the property or aggregation
       */
      sName: string
    ): object;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Get the binding path for a specific aggregation/property.
     *
     * @returns the binding path for the given name
     */
    getBindingPath(
      /**
       * the name of the property or aggregation
       */
      sName: string
    ): string | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the parent managed object as new eventing parent to enable control event bubbling or `null` if
     * this object hasn't been added to a parent yet.
     *
     * @returns the parent event provider
     */
    getEventingParent(): EventProvider | null;
    /**
     * Returns the object's ID.
     *
     * There is no guarantee or check or requirement for the ID of a `ManagedObject` to be unique. Only some
     * subclasses of `ManagedObject` introduce this as a requirement, e.g. `Component` or `Element`. All elements
     * existing in the same window at the same time must have different IDs. A new element will fail during
     * construction when the given ID is already used by another element. But there might be a component with
     * the same ID as an element or another `ManagedObject`.
     *
     * For the same reason, there is no general lookup for `ManagedObject`s via their ID. Only for subclasses
     * that enforce unique IDs, there might be lookup mechanisms (e.g. {@link sap.ui.core.Core#byId sap.ui.getCore().byId()}
     * for elements).
     *
     * @returns The objects's ID.
     */
    getId(): string;
    /**
     * Returns the metadata for the class that this object belongs to.
     *
     * @returns Metadata for the class of the object
     */
    getMetadata(): ManagedObjectMetadata;
    /**
     * Get the model to be used for data bindings with the given model name. If the object does not have a model
     * set on itself, it will use the first model defined in its parent hierarchy.
     *
     * The name can be omitted to reference the default model or it must be a non-empty string.
     *
     * **Note:** to be compatible with future versions of this API, you must not use the following model names:
     *
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`  Omitting the model name (or using the value `undefined`)
     * 			is explicitly allowed and refers to the default model.
     *
     * @returns oModel or undefined when there is no such model
     */
    getModel(
      /**
       * name of the model to be retrieved
       */
      sModelName?: string
    ): Model | undefined;
    /**
     * Get the object binding object for a specific model.
     *
     * **Note:** to be compatible with future versions of this API, you must not use the following model names:
     *
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`  Omitting the model name (or using the value `undefined`)
     * 			is explicitly allowed and refers to the default model.
     *
     * @returns Context binding for the given model name or `undefined`
     */
    getObjectBinding(
      /**
       * Non-empty name of the model or `undefined`
       */
      sModelName?: string
    ): ContextBinding | undefined;
    /**
     * Returns the origin info for the value of the given property.
     *
     * The origin info might contain additional information for translatable texts. The bookkeeping of this
     * information is not active by default and must be activated by configuration. Even then, it might not
     * be present for all properties and their values depending on where the value came form.
     *
     * If no origin info is available, `null` will be returned.
     *
     * @returns An object describing the origin of this property's value or `null`
     */
    getOriginInfo(
      /**
       * Name of the property
       */
      sPropertyName: string
    ): object | null;
    /**
     * @SINCE 1.88.0
     *
     * Returns a map of all models assigned to this ManagedObject.
     *
     * The default model is available on key `undefined`.
     *
     * **Note:** Models propagated from the parent are not included.
     *
     * @returns The models
     */
    getOwnModels(): Record<string, Model>;
    /**
     * Returns the parent managed object or `null` if this object hasn't been added to a parent yet.
     *
     * The parent returned by this method is the technical parent used for data binding, invalidation, rendering
     * etc. It might differ from the object on which the application originally added this object (the so called
     * 'API parent'): some composite controls internally use hidden controls or containers to store their children.
     * This method will return the innermost container that technically contains this object as a child.
     *
     * **Example:**
     *
     * Assume that a `Dialog` internally uses a (hidden) `VerticalLayout` to store its content:
     *
     *
     * ```javascript
     *
     *   Dialog (API parent)
     *    \__ VerticalLayout (hidden composite part)
     *       \__ Text (API child)
     * ```
     *
     *
     * If you add some content by calling the `Dialog.prototype.addContent` API, this will lead to the following
     * observations:
     *
     *
     * ```javascript
     *
     *   oDialog.addContent(oText);
     *   console.log(oText.getParent() === oDialog);  // false
     *   console.log(oText.getParent() instanceof VerticalLayout); // true
     *   console.log(oText.getParent().getParent() === oDialog); // true now, but might fail with later versions
     * ```
     *
     *
     * Technically, from API perspective, `oText` is added as a child to `Dialog`. But internally, the `Dialog`
     * adds the child to the hidden `VerticalLayout` container. If you now call the `getParent` method of the
     * child, you will get the internal `VerticalLayout` object and not the `Dialog` API parent.
     *
     * **Note: ** The internal (hidden) structure of a composite control is not fixed and may be changed (see
     * also our "Compatibility Rules"). Therefore, you should **never** rely on a specific structure or object
     * being returned by `getParent`.
     *
     * **Note: ** There is no API to determine the original API parent.
     *
     * @returns The technical parent managed object or `null`
     */
    getParent(): ManagedObject | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the value for the property with the given `sPropertyName`.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically retrieve the value of a property.
     * Use the concrete method getXYZ for property 'XYZ' instead.
     *
     * @returns the value of the property
     */
    getProperty(
      /**
       * the name of the property
       */
      sPropertyName: string
    ): any;
    /**
     * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
     *
     * **Note:** A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.
     *
     * @returns whether a model reference exists or not
     */
    hasModel(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Searches for the provided ManagedObject in the named aggregation and returns its 0-based index if found,
     * or -1 otherwise. Returns -2 if the given named aggregation is of cardinality 0..1 and doesn't reference
     * the given object.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically determine the position of an object
     * in an aggregation. Use the concrete method indexOfXYZ for aggregation 'XYZ' instead.
     *
     * @returns the index of the provided managed object in the aggregation.
     */
    indexOfAggregation(
      /**
       * the name of the aggregation
       */
      sAggregationName: string,
      /**
       * the ManagedObject whose index is looked for.
       */
      oObject: ManagedObject
    ): int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Inserts managed object `oObject` to the aggregation named `sAggregationName` at position `iIndex`.
     *
     * If the given object is not valid with regard to the aggregation (if it is not an instance of the type
     * specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1,
     * then an Error is thrown (see {@link #validateAggregation}.
     *
     * If the given index is out of range with respect to the current content of the aggregation, it is clipped
     * to that range (0 for iIndex < 0, n for iIndex > n).
     *
     * Please note that this method does not work as expected when an object is added that is already part of
     * the aggregation. In order to change the index of an object inside an aggregation, first remove it, then
     * insert it again.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically insert an object into an aggregation.
     * Use the concrete method insertXYZ for aggregation 'XYZ' instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    insertAggregation(
      /**
       * the string identifying the aggregation the managed object `oObject` should be inserted into.
       */
      sAggregationName: string,
      /**
       * the ManagedObject to add; if empty, nothing is inserted.
       */
      oObject: ManagedObject,
      /**
       * the `0`-based index the managed object should be inserted at; for a negative value `iIndex`, `oObject`
       * is inserted at position 0; for a value greater than the current size of the aggregation, `oObject` is
       * inserted at the last position
       */
      iIndex: int,
      /**
       * if true, this ManagedObject as well as the added child are not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Marks this object and its aggregated children as 'invalid'.
     *
     * The term 'invalid' originally was introduced by controls where a change to the object's state made the
     * rendered DOM invalid. Later, the concept of invalidation was moved up in the inheritance hierarchy
     * to `ManagedObject`, but the term was kept for compatibility reasons.
     *
     * Managed settings (properties, aggregations, associations) invalidate the corresponding object automatically.
     * Changing the state via the standard mutators, therefore, does not require an explicit call to `invalidate`.
     * The same applies to changes made via data binding, as it internally uses the standard mutators.
     *
     * By default, a `ManagedObject` propagates any invalidation to its parent. Controls or UIAreas handle invalidation
     * on their own by triggering a re-rendering.
     */
    invalidate(): void;
    /**
     * Find out whether a property or aggregation is bound
     *
     * @returns whether a binding exists for the given name
     */
    isBound(
      /**
       * the name of the property or aggregation
       */
      sName: string
    ): boolean;
    /**
     * @SINCE 1.93
     *
     * Returns whether this object is destroyed or not. A destroyed object cannot be used anymore.
     *
     * @returns Whether the object is destroyed
     */
    isDestroyed(): boolean;
    /**
     * @SINCE 1.93
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks if an object's destruction has been started. During the descruction of an object its ID is still
     * registered, and child objects could be still aggregated. Creating another object with the same ID would
     * lead to duplicate ID issues. To check if the destruction is finished, call `isDestroyed`.
     *
     * @returns Whether an object's destruction has been started
     */
    isDestroyStarted(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether re-rendering is currently suppressed on this ManagedObject.
     *
     * @returns Whether re-rendering is suppressed
     */
    isInvalidateSuppressed(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether the given property value is initial and has not been explicitly set or bound. Even after
     * setting the default value or setting null/undefined (which also causes the default value to be set),
     * the property is no longer initial. A property can be reset to initial state by calling `resetProperty(sPropertyName)`.
     *
     * @returns true if the property is initial
     */
    isPropertyInitial(
      /**
       * the name of the property
       */
      sPropertyName: string
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is used internally and should only be overridden by a tree managed object which utilizes
     * the tree binding. In this case and if the aggregation is a tree node the overridden method should then
     * return true. If true is returned the tree binding will be used instead of the list binding.
     *
     * @returns whether tree binding should be used or list binding. Default is false. Override method to change
     * this behavior.
     */
    isTreeBinding(
      /**
       * the aggregation to bind (e.g. nodes for a tree managed object)
       */
      sName: string
    ): boolean;
    /**
     * @SINCE 1.28
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Generic method which is called, whenever messages for this object exist.
     */
    propagateMessages(
      /**
       * The property name
       */
      sName: string,
      /**
       * The messages
       */
      aMessages: any[]
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Generic method which can be called, when an aggregation needs to be refreshed. This method does not make
     * any change on the aggregation, but just calls the `getContexts` method of the binding to trigger fetching
     * of new data.
     *
     * Subclasses should call this method only in the implementation of a named refresh method and for no other
     * purposes. The framework might change the conditions under which the method is called and the method implementation
     * might rely on those conditions.
     */
    refreshAggregation(
      /**
       * name of the aggregation to refresh
       */
      sName: string
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Removes an object from the aggregation named `sAggregationName` with cardinality 0..n.
     *
     * The removed object is not destroyed nor is it marked as changed.
     *
     * If the given object is found in the aggregation, it is removed, it's parent relationship is unset and
     * this ManagedObject is marked as changed. The removed object is returned as result of this method. If
     * the object could not be found, `null` is returned.
     *
     * This method must only be called for aggregations of cardinality 0..n. The only way to remove objects
     * from a 0..1 aggregation is to set a `null` value for them.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically remove an object from an aggregation.
     * Use the concrete method removeXYZ for aggregation 'XYZ' instead.
     *
     * @returns the removed object or `null`
     */
    removeAggregation(
      /**
       * the string identifying the aggregation that the given object should be removed from
       */
      sAggregationName: string,
      /**
       * the position or ID of the ManagedObject that should be removed or that ManagedObject itself; if `vObject`
       * is invalid, a negative value or a value greater or equal than the current size of the aggregation, nothing
       * is removed.
       */
      vObject: int | string | ManagedObject,
      /**
       * if true, this ManagedObject is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): ManagedObject | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Removes all objects from the 0..n-aggregation named `sAggregationName`.
     *
     * The removed objects are not destroyed nor are they marked as changed.
     *
     * Additionally, it clears the parent relationship of all removed objects, marks this ManagedObject as changed
     * and returns an array with the removed objects.
     *
     * If the aggregation did not contain any objects, an empty array is returned and this ManagedObject is
     * not marked as changed.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically remove all objects from an aggregation.
     * Use the concrete method removeAllXYZ for aggregation 'XYZ' instead.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAggregation(
      /**
       * Name of the aggregation to remove all objects from
       */
      sAggregationName: string,
      /**
       * If true, this `ManagedObject` is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): ManagedObject[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Removes all the objects in the 0..n-association named `sAssociationName` and returns an array with their
     * IDs. This ManagedObject is marked as changed, if the association contained any objects.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically remove all object from an association.
     * Use the concrete method removeAllXYZ for association 'XYZ' instead.
     *
     * @returns an array with the IDs of the removed objects (might be empty)
     */
    removeAllAssociation(
      /**
       * the name of the association
       */
      sAssociationName: string,
      /**
       * if true, this ManagedObject is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): any[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Removes a `ManagedObject` from the association named `sAssociationName`.
     *
     * If an object is removed, the ID of that object is returned and this `ManagedObject` is marked as changed.
     * Otherwise `null` is returned.
     *
     * If the same object was added multiple times to the same association, only a single occurrence of it will
     * be removed by this method. If the object is not found or if the parameter can't be interpreted neither
     * as a `ManagedObject` (or ID) nor as an index in the association, nothing will be removed. The same is
     * true if an index is given and if that index is out of range for the association.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically remove an object from an association.
     * Use the concrete method removeXYZ for association 'XYZ' instead.
     *
     * @returns ID of the removed `ManagedObject` or `null`
     */
    removeAssociation(
      /**
       * the string identifying the association the `ManagedObject` should be removed from.
       */
      sAssociationName: string,
      /**
       * the position or ID of the `ManagedObject` to remove or the `ManagedObject` itself; if `vObject` is invalid
       * input, a negative value or a value greater or equal than the current size of the association, nothing
       * is removed
       */
      vObject: int | string | ManagedObject,
      /**
       * if `true`, the managed object is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): string | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Resets the given property to the default value and also restores the "initial" state (like it has never
     * been set).
     *
     * As subclasses might have implemented side effects in the named setter `setXYZ` for property 'xyz', that
     * setter is called with a value of `null`, which by convention restores the default value of the property.
     * This is only done to notify subclasses, the internal state is anyhow reset.
     *
     * When the property has not been modified so far, nothing will be done.
     *
     * @returns Returns `this` to allow method chaining
     */
    resetProperty(
      /**
       * Name of the property
       */
      sPropertyName: string
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets a new object in the named 0..1 aggregation of this ManagedObject and marks this ManagedObject as
     * changed.
     *
     * If the given object is not valid with regard to the aggregation (if it is not an instance of the type
     * specified for that aggregation) or when the method is called for an aggregation of cardinality 0..n,
     * then an Error is thrown (see {@link #validateAggregation}.
     *
     * If the new object is the same as the currently aggregated object, then the internal state is not modified
     * and this ManagedObject is not marked as changed.
     *
     * If the given object is different, the parent of a previously aggregated object is cleared (it must have
     * been this ManagedObject before), the parent of the given object is set to this ManagedObject and {@link
     * #invalidate} is called for this object.
     *
     * Note that this method does neither return nor destroy the previously aggregated object. This behavior
     * is inherited by named set methods (see below) in subclasses. To avoid memory leaks, applications therefore
     * should first get the aggregated object, keep a reference to it or destroy it, depending on their needs,
     * and only then set a new object.
     *
     * Note that ManagedObject only implements a single level of change tracking: if a first call to setAggregation
     * recognizes a change, 'invalidate' is called. If another call to setAggregation reverts that change, invalidate()
     * will be called again, the new status is not recognized as being 'clean' again.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically set an object in an aggregation. Use
     * the concrete method setXYZ for aggregation 'XYZ' or the generic {@link #applySettings} instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    setAggregation(
      /**
       * name of an 0..1 aggregation
       */
      sAggregationName: string,
      /**
       * the managed object that is set as aggregated object
       */
      oObject: object,
      /**
       * if true, this ManagedObject is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the associated object for the given managed association of cardinality '0..1' and marks this ManagedObject
     * as changed.
     *
     * The associated object can either be given by itself or by its id. If `null` or `undefined` is given,
     * the association is cleared.
     *
     * **Note:** This method is a low-level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically set an object in an association. Use
     * the concrete method setXYZ for association 'XYZ' or the generic {@link #applySettings} instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    setAssociation(
      /**
       * name of the association
       */
      sAssociationName: string,
      /**
       * the ID of the managed object that is set as an association, or the managed object itself or null
       */
      sId: string | ManagedObject,
      /**
       * if true, the managed objects invalidate method is not called
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * Set the binding context for this ManagedObject for the model with the given name.
     *
     * **Note:** to be compatible with future versions of this API, you must not use the following model names:
     *
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`  Omitting the model name (or using the value `undefined`)
     * 			is explicitly allowed and refers to the default model.
     *
     * A value of `null` for `oContext` hides the parent context. The parent context will no longer be propagated
     * to aggregated child controls. A value of `undefined` removes a currently active context or a `null` context
     * and the parent context gets visible and propagated again.
     *
     * **Note:** A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.
     *
     * @returns reference to the instance itself
     */
    setBindingContext(
      /**
       * the new binding context for this object
       */
      oContext: Context,
      /**
       * the name of the model to set the context for or `undefined`
       */
      sModelName?: string
    ): this;
    /**
     * Sets or unsets a model for the given model name for this ManagedObject.
     *
     * The `sName` must either be `undefined` (or omitted) or a non-empty string. When the name is omitted,
     * the default model is set/unset. To be compatible with future versions of this API, you must not use the
     * following model names:
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`
     *
     * When `oModel` is `null` or `undefined`, a previously set model with that name is removed from this ManagedObject.
     * If an ancestor (parent, UIArea or Core) has a model with that name, this ManagedObject will immediately
     * inherit that model from its ancestor.
     *
     * All local bindings that depend on the given model name are updated (created if the model references became
     * complete now; updated, if any model reference has changed; removed if the model references became incomplete
     * now).
     *
     * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants
     * as long as a descendant doesn't have its own model set for the given name.
     *
     * **Note:** By design, it is not possible to hide an inherited model by setting a `null` or `undefined`
     * model. Applications can set an empty model to achieve the same.
     *
     * **Note:** A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.
     *
     * @returns `this` to allow method chaining
     */
    setModel(
      /**
       * Model to be set or `null` or `undefined`
       */
      oModel: Model | null | undefined,
      /**
       * the name of the model or `undefined`
       */
      sName?: string
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the given value for the given property after validating and normalizing it, marks this object as
     * changed.
     *
     * If the value is not valid with regard to the declared data type of the property, an Error is thrown.
     * In case `null` or `undefined` is passed, the default value for this property is used (see {@link #validateProperty}).
     * To fully reset the property to initial state, use {@link #resetProperty} instead. If the validated and
     * normalized `oValue` equals the current value of the property, the internal state of this object is not
     * changed (apart from the result of {@link #isPropertyInitial}). If the value changes, it is stored internally
     * and the {@link #invalidate} method is called on this object. In the case of TwoWay databinding, the bound
     * model is informed about the property change.
     *
     * Note that ManagedObject only implements a single level of change tracking: if a first call to setProperty
     * recognizes a change, 'invalidate' is called. If another call to setProperty reverts that change, invalidate()
     * will be called again, the new status is not recognized as being 'clean' again.
     *
     * **Note:** This method is a low level API as described in the class documentation.
     * Applications or frameworks must not use this method to generically set a property. Use the concrete method
     * setXYZ for property 'XYZ' or the generic {@link #applySettings} instead.
     *
     * @returns Returns `this` to allow method chaining
     */
    setProperty(
      /**
       * name of the property to set
       */
      sPropertyName: string,
      /**
       * value to set the property to
       */
      oValue: any,
      /**
       * if true, the managed object is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): this;
    /**
     * Returns a simple string representation of this managed object.
     *
     * Mainly useful for tracing purposes.
     *
     * @returns a string description of this managed object
     */
    toString(): string;
    /**
     * Unbind the aggregation from the model.
     *
     * After unbinding, the current content of the aggregation is destroyed by default. When the `bSuppressReset`
     * parameter is set, it is however retained.
     *
     * @returns Reference to this instance itself
     */
    unbindAggregation(
      /**
       * Name of the aggregation
       */
      sName: string,
      /**
       * Indicates whether destroying the content of the aggregation is skipped
       */
      bSuppressReset: boolean
    ): this;
    /**
     * @deprecated (since 1.11.1) - please use {@link #unbindObject} instead.
     *
     * Removes the defined binding context of this object, all bindings will now resolve relative to the parent
     * context again.
     *
     * @returns reference to the instance itself
     */
    unbindContext(
      /**
       * name of the model to remove the context for.
       */
      sModelName?: string
    ): this;
    /**
     * Removes the defined binding context of this object, all bindings will now resolve relative to the parent
     * context again.
     *
     * @returns Reference to the instance itself
     */
    unbindObject(
      /**
       * Name of the model to remove the context for.
       */
      sModelName?: string
    ): this;
    /**
     * Unbind the property from the model
     *
     * @returns reference to the instance itself
     */
    unbindProperty(
      /**
       * the name of the property
       */
      sName: string,
      /**
       * whether the reset to the default value when unbinding should be suppressed
       */
      bSuppressReset: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Generic method which is called whenever an aggregation binding has changed.
     *
     * Depending on the type of the list binding and on additional configuration, this method either destroys
     * all elements in the aggregation `sName` and recreates them anew or tries to reuse as many existing objects
     * as possible. It is up to the method which strategy it uses.
     *
     * In case a managed object needs special handling for an aggregation binding, it can create a named update
     * method (e.g. `updateRows` for an aggregation `rows`) which then will be called by the framework
     * instead of this generic method. THe method will be called with two arguments `sChangeReason` and `oEventInfo`.
     *
     * Subclasses should call this method only in the implementation of such a named update method and for no
     * other purposes. The framework might change the conditions under which the method is called and the method
     * implementation might rely on those conditions.
     */
    updateAggregation(
      /**
       * Name of the aggregation to update
       */
      sName: string,
      /**
       * One of the predefined reasons for the change event
       */
      sChangeReason: ChangeReason,
      /**
       * Additional information about the change event
       */
      oEventInfo: {
        /**
         * A non-standardized string that further classifies the change event. Model implementations should document
         * any value that they might provide as detailed reason, and describe under what circumstances each value
         * will be used.
         */
        detailedReason?: string;
      }
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks whether the given value is of the proper type for the given aggregation name.
     *
     * This method is already called by {@link #setAggregation}, {@link #addAggregation} and {@link #insertAggregation}.
     * In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.
     *
     * @returns the passed object
     */
    validateAggregation(
      /**
       * the name of the aggregation
       */
      sAggregationName: string,
      /**
       * the aggregated object or a primitive value
       */
      oObject: ManagedObject | any,
      /**
       * whether the caller assumes the aggregation to have cardinality 0..n
       */
      bMultiple: boolean
    ): ManagedObject | any;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks whether the given value is of the proper type for the given property name.
     *
     * In case `null` or `undefined` is passed, the default value for this property is used as value. If no
     * default value is defined for the property, the default value of the type of the property is used.
     *
     * If the property has a data type that is an instance of sap.ui.base.DataType and if a `normalize` function
     * is defined for that type, that function will be called with the resulting value as only argument. The
     * result of the function call is then used instead of the raw value.
     *
     * This method is called by {@link #setProperty}. In many cases, subclasses of ManagedObject don't need
     * to call it themselves.
     *
     * @returns The normalized value for the passed value or for the default value if `null` or `undefined`
     * was passed
     */
    validateProperty(
      /**
       * Name of the property
       */
      sPropertyName: string,
      /**
       * Value to be set
       */
      oValue: any
    ): any;
  }
  /**
   * Configuration for the binding of a managed aggregation of cardinality 0..n.
   *
   * `path` is the only mandatory property, all others are optional.
   */
  export type AggregationBindingInfo = {
    /**
     * Path in the model to bind to, either an absolute path or relative to the binding context for the corresponding
     * model; when the path contains a '>' sign, the string preceding it will override the `model` property
     * and the remainder after the '>' will be used as binding path
     */
    path: string;
    /**
     * Name of the model to bind against; when `undefined` or omitted, the default model is used
     */
    model?: string;
    /**
     * The template to clone for each item in the aggregation; either a template or a factory must be given
     */
    template?: ManagedObject;
    /**
     * Whether the framework should assume that the application takes care of the lifecycle of the given template;
     * when set to `true`, the template can be used in multiple bindings, either in parallel or over time, and
     * the framework won't clone it when this `ManagedObject` is cloned; when set to `false`, the lifecycle
     * of the template is bound to the lifecycle of the binding, when the aggregation is unbound or when this
     * `ManagedObject` is destroyed, the template also will be destroyed, and when this `ManagedObject` is cloned,
     * the template will be cloned as well; the third option (`undefined`) only exists for compatibility reasons,
     * its behavior is not fully reliable and it may leak the template
     */
    templateShareable?: boolean;
    /**
     * A factory function that will be called to create an object for each item in the aggregation; this is
     * an alternative to providing a template object and can be used when the objects should differ depending
     * on the binding context; the factory function will be called with two parameters: an ID that should be
     * used for the created object and the binding context for which the object has to be created; the function
     * must return an object appropriate for the bound aggregation
     */
    factory?: Function;
    /**
     * Whether the binding should be suspended initially
     */
    suspended?: boolean;
    /**
     * the first entry of the list to be created
     */
    startIndex?: int;
    /**
     * The amount of entries to be created (may exceed the size limit of the model)
     */
    length?: int;
    /**
     * The initial sort order (optional)
     */
    sorter?: Sorter | Sorter[];
    /**
     * The predefined filters for this aggregation (optional)
     */
    filters?: Filter | Filter[];
    /**
     * Name of the key property or a function getting the context as only parameter to calculate a key for entries.
     * This can be used to improve update behaviour in models, where a key is not already available.
     */
    key?: string | Function;
    /**
     * Map of additional parameters for this binding; the names and value ranges of the supported parameters
     * depend on the model implementation, they should be documented with the `bindList` method of the corresponding
     * model class or with the model specific subclass of `sap.ui.model.ListBinding`
     */
    parameters?: object;
    /**
     * A factory function to generate custom group visualization (optional). It should return a control suitable
     * to visualize a group header (e.g. a `sap.m.GroupHeaderListItem` for a `sap.m.List`).
     */
    groupHeaderFactory?: Function;
    /**
     * Map of event handler functions keyed by the name of the binding events that they should be attached to
     */
    events?: Record<string, Function>;
  };

  /**
   * The structure of the "metadata" object which is passed when inheriting from sap.ui.base.ManagedObject
   * using its static "extend" method. See {@link sap.ui.base.ManagedObject.extend} for details on its usage.
   */
  export type MetadataOptions = MetadataOptions1 & {
    /**
     * Name of the library that the new subclass should belong to. If the subclass is a control or element,
     * it will automatically register with that library so that authoring tools can discover it. By convention,
     * the name of the subclass should have the library name as a prefix, but subfolders are allowed, e.g. `sap.ui.layout.form.Form`
     * belongs to library `sap.ui.layout`.
     */
    library?: string;
    /**
     * An object literal whose properties each define a new managed property in the ManagedObject subclass.
     * The value can either be a simple string which then will be assumed to be the type of the new property
     * or it can be an object literal with the following properties (see {@link sap.ui.base.ManagedObject.MetadataOptions.Property
     * Property} for details): type, visibility, byValue, group, defaultValue, bindable, selector Property names
     * should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
     * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template
     * are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.
     *
     * For each public property 'foo', the following methods will be created by the "extend" method and will
     * be added to the prototype of the subclass:
     * 	 - getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}
     * 	 - setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}
     * 	 - bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link
     * 			#bindProperty}
     * 	 - unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link
     * 			#unbindProperty}  For hidden properties, no methods are generated.
     */
    properties?: Record<string, string | MetadataOptions.Property>;
    /**
     * When specified, the default property must match the name of one of the properties defined for the new
     * subclass (either own or inherited). The named property can be used to identify the main property to be
     * used for bound data. E.g. the value property of a field control.
     */
    defaultProperty?: string;
    /**
     * An object literal whose properties each define a new aggregation in the ManagedObject subclass. The value
     * can either be a simple string which then will be assumed to be the type of the new aggregation or it
     * can be an object literal with the following properties (see {@link sap.ui.base.ManagedObject.MetadataOptions.Aggregation
     * Aggregation} for details): type, multiple, singularName, visibility, bindable, forwarding, selector.
     * Aggregation names should use camelCase notation, start with a lowercase letter and only use characters
     * from the set [a-zA-Z0-9_$]. The name for a hidden aggregations might start with an underscore. If an
     * aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template
     * are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.
     *
     * For each public aggregation 'item' of cardinality 0..1, the following methods will be created by the
     * "extend" method and will be added to the prototype of the subclass:
     * 	 - getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation}
     * 			with a default value of `undefined`
     * 	 - setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link
     * 			#setAggregation}
     * 	 - destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation.
     * 			Internally calls {@link #destroyAggregation}
     * 	 - bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps
     * 			{@link #bindAggregation}
     * 	 - unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps
     * 			{@link #unbindAggregation}  For a public aggregation 'items' of cardinality 0..n, the following
     * 			methods will be created:
     * 	 - getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls
     * 			{@link #getAggregation} with a default value of `[]`
     * 	 - addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}
     *
     * 	 - insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}
     *
     * 	 - indexOfItem(o) - returns the position of the given object within the aggregation 'items'. Internally
     * 			calls {@link #indexOfAggregation}
     * 	 - removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}
     *
     * 	 - removeItems() - removes all objects from the aggregation 'items'. Internally calls {@link #removeAllAggregation}
     *
     * 	 - destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation.
     * 			Internally calls {@link #destroyAggregation}
     * 	 - bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps
     * 			{@link #bindAggregation}
     * 	 - unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps
     * 			{@link #unbindAggregation}  For hidden aggregations, no methods are generated.
     */
    aggregations?: Record<string, string | MetadataOptions.Aggregation>;
    /**
     * When specified, the default aggregation must match the name of one of the aggregations defined for the
     * new subclass (either own or inherited). The named aggregation will be used in contexts where no aggregation
     * is specified. E,g. when an object in an XMLView embeds other objects without naming an aggregation, as
     * in the following example:
     * ```javascript
     *
     *      <!-- assuming the defaultAggregation for Dialog is 'content' -->
     *      <Dialog>
     *        <Text/>
     *        <Button/>
     *      </Dialog>
     *     ```
     */
    defaultAggregation?: string;
    /**
     * An object literal whose properties each define a new association of the ManagedObject subclass. The value
     * can either be a simple string which then will be assumed to be the type of the new association or it
     * can be an object literal with the following properties (see {@link sap.ui.base.ManagedObject.MetadataOptions.Association
     * Association} for details): type, multiple, singularName, visibility Association names should use camelCase
     * notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. If an association
     * in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for
     * JSDoc3 generation, the doclet will be used as generic documentation of the association.
     *
     * For each association 'ref' of cardinality 0..1, the following methods will be created by the "extend"
     * method and will be added to the prototype of the subclass:
     * 	 - getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation}
     * 			with a default value of `undefined`
     * 	 - setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link
     * 			#setAssociation}  For a public association 'refs' of cardinality 0..n, the following methods will
     * 			be created:
     * 	 - getRefs() - returns an array with the objects contained in association 'items'. Internally calls
     * 			{@link #getAssociation} with a default value of `[]`
     * 	 - addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}
     *
     * 	 - removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}
     *
     * 	 - removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}
     * 			 For hidden associations, no methods are generated.
     */
    associations?: Record<string, string | MetadataOptions.Association>;
    /**
     * An object literal whose properties each define a new event of the ManagedObject subclass. In this literal,
     * the property names are used as event names and the values are object literals describing the respective
     * event which can have the following properties (see {@link sap.ui.base.ManagedObject.MetadataOptions.Event
     * Event} for details): allowPreventDefault, parameters Event names should use camelCase notation, start
     * with a lower-case letter and only use characters from the set [a-zA-Z0-9_$]. If an event in the literal
     * is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation,
     * the doclet will be used as generic documentation of the event.
     *
     * For each event 'Some' the following methods will be created by the "extend" method and will be added
     * to the prototype of the subclass:
     * 	 - attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}
     * 	 - detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}
     * 	 - fireSome() - fire the event. Internally calls {@link #fireEvent}
     */
    events?: Record<string, string | MetadataOptions.Event>;
    /**
     * Name of a module that implements the designtime part. Alternatively `true` to indicate that the module's
     * file is named *.designtime.js with the same base name as the class itself.
     */
    designtime?: string | boolean;
    /**
     * Special settings are an experimental feature and MUST NOT BE DEFINED in controls or applications outside
     * of the `sap.ui.core` library. There's no generic or general way how to set or get the values for special
     * settings. For the same reason, they cannot be bound against a model. If there's a way for consumers to
     * define a value for a special setting, it must be documented in the class that introduces the setting.
     */
    specialSettings?: Record<string, any>;
  };

  /**
   * Configuration for the binding of a managed object
   *
   * `path` is the only mandatory property, all others are optional.
   */
  export type ObjectBindingInfo = {
    /**
     * Path in the model to bind to, either an absolute path or relative to the binding context for the corresponding
     * model. If the path contains a '>' sign, the string preceding it will override the `model` property,
     * and the remainder after the '>' sign will be used as binding path
     */
    path: string;
    /**
     * Name of the model to bind against; when `undefined` or omitted, the default model is used
     */
    model?: string;
    /**
     * Whether the binding is initially suspended
     */
    suspended?: boolean;
    /**
     * Map of additional parameters for this binding; the names and value ranges of the supported parameters
     * depend on the model implementation and should be documented with the `bindContext` method of the corresponding
     * model class or with the model-specific subclass of `sap.ui.model.ContextBinding`
     */
    parameters?: object;
    /**
     * Map of event handler functions keyed by the name of the binding events that they are attached to
     */
    events?: Record<string, Function>;
  };

  /**
   * Configuration for the binding of a managed property.
   *
   * Exactly one of `path`, `value` or `parts` must be specified. The same configuration can be provided for
   * the parts of a composite binding, but nesting composite bindings in composite bindings is not yet supported.
   *
   * Aggregations with cardinality 0..1 that have a simple, alternative type (aka `altType`), can be bound
   * with the same kind of configuration, e.g. the `tooltip` aggregation of elements.
   */
  export type PropertyBindingInfo = {
    /**
     * Path in the model to bind to, either an absolute path or relative to the binding context for the corresponding
     * model; when the path contains a '>' sign, the string preceding it will override the `model` property
     * and the remainder after the '>' will be used as binding path
     */
    path?: string;
    /**
     * Since 1.61, defines a static binding with the given value.
     */
    value?: string;
    /**
     * Name of the model to bind against; when `undefined` or omitted, the default model is used
     */
    model?: string;
    /**
     * Whether the binding should be suspended initially
     */
    suspended?: boolean;
    /**
     * Function to convert model data into a property value
     */
    formatter?: Function;
    /**
     * Whether the parameters to the formatter function should be passed as raw values. In this case the specified
     * types for the binding parts are not used and the values are not formatted.
     *
     * **Note**: use this flag only when using multiple bindings. If you use only one binding and want raw values
     * then simply don't specify a type for that binding.
     */
    useRawValues?: boolean;
    /**
     * Whether the parameters to the formatter function should be passed as the related JavaScript primitive
     * values. In this case the values of the model are parsed by the {@link sap.ui.model.SimpleType#getModelFormat
     * model format} of the specified types from the binding parts.
     *
     * **Note**: use this flag only when using multiple bindings.
     */
    useInternalValues?: boolean;
    /**
     * A type object or the name of a type class to create such a type object; the type will be used for converting
     * model data to a property value (aka "formatting") and vice versa (in binding mode `TwoWay`, aka "parsing")
     */
    type?: Type | string;
    /**
     * Target type to be used by the type when formatting model data, for example "boolean" or "string" or "any";
     * defaults to the property's type
     */
    targetType?: string;
    /**
     * Format options to be used for the type; only taken into account when the type is specified by its name
     * - a given type object won't be modified
     */
    formatOptions?: object;
    /**
     * Additional constraints to be used when constructing a type object from a type name, ignored when a type
     * object is given
     */
    constraints?: object;
    /**
     * Binding mode to be used for this property binding (e.g. one way)
     */
    mode?: BindingMode | keyof typeof BindingMode;
    /**
     * Map of additional parameters for this binding; the names and value ranges of the supported parameters
     * depend on the model implementation, they should be documented with the `bindProperty` method of the corresponding
     * model class or with the model specific subclass of `sap.ui.model.PropertyBinding`
     */
    parameters?: object;
    /**
     * Map of event handler functions keyed by the name of the binding events that they should be attached to
     */
    events?: object;
    /**
     * Array of binding info objects for the parts of a composite binding; the structure of each binding info
     * is the same as described for the `oBindingInfo` as a whole.
     *
     * If a part is not specified as a binding info object but as a simple string, a binding info object will
     * be created with that string as `path`. The string may start with a model name prefix (see property `path`).
     *
     * **Note**: recursive composite bindings are currently not supported. Therefore, a part must not contain
     * a `parts` property.
     */
    parts?: Array<string | PropertyBindingInfo>;
  };

  export interface $ManagedObjectSettings {
    /**
     * Fired after a new value for a bound property has been propagated to the model. Only fired, when the binding
     * uses a data type.
     */
    validationSuccess?: (oEvent: Event) => void;

    /**
     * Fired when a new value for a bound property should have been propagated to the model, but validating
     * the value failed with an exception.
     */
    validationError?: (oEvent: Event) => void;

    /**
     * Fired when a new value for a bound property should have been propagated to the model, but parsing the
     * value failed with an exception.
     */
    parseError?: (oEvent: Event) => void;

    /**
     * Fired when a new value for a bound property should have been propagated from the model, but formatting
     * the value failed with an exception.
     */
    formatError?: (oEvent: Event) => void;

    /**
     * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext
     * or due to propagation)
     */
    modelContextChange?: (oEvent: Event) => void;
  }

  export namespace MetadataOptions {
    /**
     * An object literal describing an aggregation of a class derived from `sap.ui.base.ManagedObject`. See
     * {@link sap.ui.base.ManagedObject.MetadataOptions MetadataOptions} for details on its usage.
     */
    type Aggregation = {
      /**
       * Type of the new aggregation. Must be the full global name of a ManagedObject subclass or a UI5 interface
       * (in dot notation, e.g. 'sap.m.Button').
       */
      type?: string;
      /**
       * Whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true
       */
      multiple?: boolean;
      /**
       * Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural
       * name. Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(),
       * whereas methods that deal with a single object will use the singular name (e.g. addItem). The framework
       * knows a set of common rules for building the plural form of English nouns and uses these rules to determine
       * a singular name on its own. If that name is wrong, a singluarName can be specified with this property.
       */
      singularName?: string;
      /**
       * Either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must
       * be 'public' whereas 'hidden' aggregations typically are used for the implementation of composite classes
       * (e.g. composite controls). Only public aggregations are accepted by the constructor or by `applySettings`
       * or in declarative representations like an `XMLView`. Equally, only public aggregations are cloned.
       */
      visibility?: "hidden" | "public";
      /**
       * (Either can be omitted or set to the boolean value `true` or the magic string 'bindable'.) If set to
       * `true` or 'bindable', additional named methods `bindName` and `unbindName` are generated
       * as convenience. Despite its name, setting this flag is not mandatory to make the managed aggregation
       * bindable. The generic methods {@link #bindAggregation} and {@link #unbindAggregation} can always be used.
       */
      bindable?: boolean | "bindable";
      /**
       * If set, this defines a forwarding of objects added to this aggregation into an aggregation of another
       * ManagedObject - typically to an inner control within a composite control. This means that all adding,
       * removal, or other operations happening on the source aggregation are actually called on the target instance.
       * All elements added to the source aggregation will be located at the target aggregation (this means the
       * target instance is their parent). Both, source and target element will return the added elements when
       * asked for the content of the respective aggregation. If present, the named (non-generic) aggregation
       * methods will be called for the target aggregation. Aggregations can only be forwarded to non-hidden aggregations
       * of the same or higher multiplicity (i.e. an aggregation with multiplicity "0..n" cannot be forwarded
       * to an aggregation with multiplicity "0..1"). The target aggregation must also be "compatible" to the
       * source aggregation in the sense that any items given to the source aggregation must also be valid in
       * the target aggregation (otherwise the target element will throw a validation error). If the forwarded
       * elements use data binding, the target element must be properly aggregated by the source element to make
       * sure all models are available there as well. The aggregation target must remain the same instance across
       * the entire lifetime of the source control. Aggregation forwarding will behave unexpectedly when the content
       * in the target aggregation is modified by other actors (e.g. by the target element or by another forwarding
       * from a different source aggregation). Hence, this is not allowed.
       */
      forwarding?: {
        /**
         * The name of the aggregation on the target into which the objects shall be forwarded. The multiplicity
         * of the target aggregation must be the same as the one of the source aggregation for which forwarding
         * is defined.
         */
        aggregation: string;
        /**
         * A string which is appended to the ID of this ManagedObject to construct the ID of the target ManagedObject.
         * This is one of the two options to specify the target. This option requires the target instance to be
         * created in the init() method of this ManagedObject and to be always available.
         */
        idSuffix?: string;
        /**
         * The name of the function on instances of this ManagedObject which returns the target instance. This second
         * option to specify the target can be used for lazy instantiation of the target. Note that either idSuffix
         * or getter must be given. Also note that the target instance returned by the getter must remain the same
         * over the entire lifetime of this ManagedObject and the implementation assumes that all instances return
         * the same type of object (at least the target aggregation must always be defined in the same class).
         */
        getter?: string;
        /**
         * Whether any binding should happen on the forwarding target or not. Default if omitted is `false`, which
         * means any bindings happen on the outer ManagedObject. When the binding is forwarded, all binding methods
         * like updateAggregation, getBindingInfo, refreshAggregation etc. are called on the target element of the
         * forwarding instead of being called on this element. The basic aggregation mutator methods (add/remove
         * etc.) are only called on the forwarding target element. Without forwardBinding, they are called on this
         * element, but forwarded to the forwarding target, where they actually modify the aggregation.
         */
        forwardBinding?: boolean;
      };
      /**
       * Can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector
       * Element.prototype.querySelector} method). When set, it locates the DOM element that surrounds the aggregation's
       * content. It should only be set for aggregations that have a visual representation in the DOM. A DOM element
       * surrounding the aggregation's rendered content should be available in the DOM, even if the aggregation
       * is empty or not rendered for some reason. In cases where this is not possible or not intended, `getDomRefForSetting`
       * can be overridden, see below.
       *
       * The purpose of the selector is to allow other framework parts like drag and drop or design time tooling
       * to identify those DOM parts of a control or element that represent a specific aggregation without knowing
       * the control or element implementation in detail.
       *
       * As an extension to the standard CSS selector syntax, the selector string can contain the placeholder
       * `{id}` (multiple times). Before evaluating the selector in the context of an element or control, all
       * occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or
       * control. In fact, any selector should start with `#{id}` to ensure that the query result is limited to
       * the desired element or control.
       *
       * **Note**: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates
       * the selector in the context of a concrete element or control instance. It also handles the placeholder
       * `{id}`. Only selected framework features may use that private method, it is not yet a public API and
       * might be changed or removed in future versions of UI5. However, instead of maintaining the `selector`
       * in the metadata, element and control classes can overwrite `getDomRefForSetting` to calculate or add
       * the appropriate DOM Element dynamically.
       */
      selector?: string;
      /**
       * Flag that marks the aggregation as deprecated (defaults to false). May lead to an additional warning
       * log message at runtime when the aggregation is still used. For the documentation, also add a `@deprecated`
       * tag in the JSDoc, describing since when it is deprecated and what any alternatives are.
       */
      deprecated?: boolean;
      /**
       * An optional list of alternative types that may be given instead of the main type. Alternative types may
       * only be simple types, no descendants of ManagedObject. An example of altTypes being used is the 'tooltip'
       * aggregation of `sap.ui.core.Element`, which accepts tooltip controls extending `sap.ui.core.TooltipBase`
       * with their own renderer and design, as well as plain strings, which will simply be displayed using the
       * browser's built-in tooltip functionality.
       */
      altTypes?: string[];
      /**
       * Only available for aggregations of a class extending `sap.ui.core.Element`, which is a subclass of `sap.ui.base.ManagedObject`!
       * Defines draggable and droppable configuration of the aggregation. If the `dnd` property is of type Boolean,
       * then the `draggable` and `droppable` configuration are both set to this Boolean value and the layout
       * (in case of enabled dnd) is set to default ("Vertical").
       */
      dnd?:
        | boolean
        | {
            /**
             * Defines whether elements from this aggregation are draggable or not. The default value is `false`.
             */
            draggable?: boolean;
            /**
             * Defines whether the element is droppable (it allows being dropped on by a draggable element) or not.
             * The default value is `false`.
             */
            droppable?: boolean;
            /**
             * The arrangement of the items in this aggregation. This setting is recommended for the aggregation with
             * multiplicity 0..n (`multiple: true`). Possible values are `Vertical` (e.g. rows in a table) and `Horizontal`
             * (e.g. columns in a table). It is recommended to use `Horizontal` layout if the visual arrangement of
             * the aggregation is two-dimensional.
             */
            layout?: "Vertical" | "Horizontal";
          };
    };

    /**
     * An object literal describing an association of a class derived from `sap.ui.base.ManagedObject`. See
     * {@link sap.ui.base.ManagedObject.MetadataOptions MetadataOptions} for details on its usage.
     */
    type Association = {
      /**
       * Type of the new association
       */
      type?: string;
      /**
       * Whether the association is a 0..1 (false) or a 0..n association (true), defaults to false (0..1) for
       * associations
       */
      multiple?: boolean;
      /**
       * Custom singular name. This is only relevant for 0..n associations where the association name should be
       * defined in plural form and the framework tries to generate the singular form of it for certain places
       * where it is needed. To do so, the framework knows a set of common rules for building the plural form
       * of English nouns and uses these rules to determine a singular name on its own. If that name is wrong,
       * a singularName can be specified with this property. E.g. for an association named `items`, methods affecting
       * multiple objects in an association will use the plural name (`getItems()`), whereas methods that deal
       * with a single object will automatically use the generated singular name (e.g. `addItem(...)`). However,
       * the generated singular form for an association `news` would be `new`, which is wrong, so the singular
       * name "news" would need to be set.
       */
      singularName?: string;
      /**
       * Either 'hidden' or 'public', defaults to 'public'. Associations that belong to the API of a class must
       * be 'public' whereas 'hidden' associations can only be used internally. Only public associations are accepted
       * by the constructor or by `applySettings` or in declarative representations like an `XMLView`. Equally,
       * only public associations are cloned.
       */
      visibility?: "hidden" | "public";
      /**
       * Flag that marks the association as deprecated (defaults to false). May lead to an additional warning
       * log message at runtime when the association is still used. For the documentation, also add a `@deprecated`
       * tag in the JSDoc, describing since when it is deprecated and what any alternatives are.
       */
      deprecated?: boolean;
    };

    /**
     * An object literal describing an event of a class derived from `sap.ui.base.ManagedObject`. See {@link
     * sap.ui.base.ManagedObject.MetadataOptions MetadataOptions} for details on its usage.
     */
    type Event = {
      /**
       * Whether the event allows to prevented the default behavior of the event source
       */
      allowPreventDefault?: boolean;
      /**
       * An object literal that describes the parameters of this event; the keys are the parameter names and the
       * values are objects with a 'type' property that specifies the type of the respective parameter.
       */
      parameters?: Record<
        string,
        | {
            type: string;
          }
        | string
      >;
      /**
       * whether event bubbling is enabled on this event. When `true` the event is also forwarded to the parent(s)
       * of the object (see {@link sap.ui.base.EventProvider#getEventingParent}) until the bubbling of the event
       * is stopped or no parent is available anymore.
       */
      enableEventBubbling?: boolean;
      /**
       * Flag that marks the event as deprecated (defaults to false). May lead to an additional warning log message
       * at runtime when the event is still used. For the documentation, also add a `@deprecated` tag in the JSDoc,
       * describing since when it is deprecated and what any alternatives are.
       */
      deprecated?: boolean;
    };

    /**
     * An object literal describing a property of a class derived from `sap.ui.base.ManagedObject`. See {@link
     * sap.ui.base.ManagedObject.MetadataOptions MetadataOptions} for details on its usage.
     */
    type Property = {
      /**
       * Type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float',
       * 'object', 'function' or 'any', or a type created and registered with {@link sap.ui.base.DataType.createType}
       * or an array type based on one of the previous types (e.g. 'int[]' or 'string[]', but not just 'array').
       */
      type: string;
      /**
       * Either 'hidden' or 'public', defaults to 'public'. Properties that belong to the API of a class must
       * be 'public' whereas 'hidden' properties can only be used internally. Only public properties are accepted
       * by the constructor or by `applySettings` or in declarative representations like an `XMLView`. Equally,
       * only public properties are cloned.
       */
      visibility?: "hidden" | "public";
      /**
       * If set to `true`, the property value will be {@link module:sap/base/util/deepClone deep cloned} on write
       * and read operations to ensure that the internal value can't be modified by the outside. The property
       * `byValue` is currently restricted to a `boolean` value. Other types are reserved for future use. Class
       * definitions must only use boolean values for the flag (or omit it), but readers of ManagedObject metadata
       * should handle any truthy value as `true` to be future safe. Note that using `byValue:true` has a performance
       * impact on property access and therefore should be used carefully. It also doesn't make sense to set this
       * option for properties with a primitive type (they have value semantic anyhow) or for properties with
       * arrays of primitive types (they are already cloned with a less expensive implementation). Defaults to
       * 'false'.
       */
      byValue?: boolean;
      /**
       * A semantic grouping of the properties, intended to be used in design time tools. Allowed values are (case
       * sensitive): Accessibility, Appearance, Behavior, Data, Designtime, Dimension, Identification, Misc
       */
      group?:
        | "Accessibility"
        | "Appearance"
        | "Behavior"
        | "Data"
        | "Designtime"
        | "Dimension"
        | "Identification"
        | "Misc";
      /**
       * The default value for the property or null if there is no specific default value defined (the data type's
       * default becomes the default value in this case, e.g. `false` for boolean and the empty string for type
       * string). Omitting this property means the default value is `undefined`.
       */
      defaultValue?: any;
      /**
       * (Either can be omitted or set to the boolean value `true` or the magic string 'bindable'.) If set to
       * `true` or 'bindable', additional named methods `bindName` and `unbindName` are generated
       * as convenience. Despite its name, setting this flag is not mandatory to make the managed property bindable.
       * The generic methods {@link #bindProperty} and {@link #unbindProperty} can always be used.
       */
      bindable?: boolean | "bindable";
      /**
       * Can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector
       * Element.prototype.querySelector} method). When set, it locates the DOM element that represents this property's
       * value. It should only be set for properties that have a visual text representation in the DOM.
       *
       * The purpose of the selector is to allow other framework parts or design time tooling to identify the
       * DOM parts of a control or element that represent a specific property without knowing the control or element
       * implementation in detail.
       *
       * As an extension to the standard CSS selector syntax, the selector string can contain the placeholder
       * `{id}` (multiple times). Before evaluating the selector in the context of an element or control, all
       * occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or
       * control. In fact, any selector should start with `#{id}` to ensure that the query result is limited to
       * the desired element or control.
       *
       * **Note**: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates
       * the selector in the context of a concrete element or control instance. It also handles the placeholder
       * `{id}`. Only selected framework features may use that private method, it is not yet a public API and
       * might be changed or removed in future versions of UI5. However, instead of maintaining the `selector`
       * in the metadata, element and control classes can overwrite `getDomRefForSetting` and determine the DOM
       * element dynamically.
       */
      selector?: string;
      /**
       * Flag that marks the property as deprecated (defaults to false). May lead to an additional warning log
       * message at runtime when the property is still used. For the documentation, also add a `@deprecated` tag
       * in the JSDoc, describing since when it is deprecated and what any alternatives are.
       */
      deprecated?: boolean;
    };
  }
}

declare module "sap/ui/base/ManagedObjectMetadata" {
  import Metadata from "sap/ui/base/Metadata";

  import ManagedObject from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 0.8.6
   *
   * **Note about Info Objects**
   *
   * Several methods in this class return info objects that describe a property, aggregation, association
   * or event of the class described by this metadata object. The type, structure and behavior of these info
   * objects is not yet documented and not part of the stable, public API.
   *
   * Code using such methods and the returned info objects therefore needs to be aware of the following restrictions:
   *
   *
   * 	the set of properties exposed by each info object, their type and value might change as well as the
   * class of the info object itself.
   *
   * Properties that represent settings provided during class definition (in the oClassInfo parameter of the
   * 'extend' call, e.g. 'type', 'multiple' of an aggregation) are more likely to stay the same than additional,
   * derived properties like '_iKind'.
   *
   *
   * 	 - info objects must not be modified / enriched although they technically could.
   *
   *
   * 	 - the period of validity of info objects is not defined. They should be referenced only for a short
   * 			time and not be kept as members of long living objects or closures.
   */
  export default class ManagedObjectMetadata extends Metadata {
    /**
     * Creates a new metadata object that describes a subclass of ManagedObject.
     *
     * **Note:** Code outside the `sap.ui.base` namespace must not call this constructor directly. Instances
     * will be created automatically when a new class is defined with one of the {@link sap.ui.base.ManagedObject.extend
     * SomeClass.extend} methods.
     *
     * **Note**: throughout this class documentation, the described subclass of ManagedObject is referenced
     * as the described class.
     */
    constructor(
      /**
       * fully qualified name of the described class
       */
      sClassName: string,
      /**
       * static info to construct the metadata from
       */
      oClassInfo: object
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds information to the given oAggregatedObject about its original API parent (or a subsequent API parent
     * in case of multiple forwarding). MUST be called before an element is forwarded to another internal aggregation
     * (in case forwarding is done explicitly/manually without using the declarative mechanism introduced in
     * UI5 1.56).
     *
     * CAUTION: ManagedObjectMetadata.addAPIParentInfoEnd(...) MUST be called AFTER the element has been forwarded
     * (set to an aggregation of an internal control). These two calls must wrap the forwarding.
     */
    static addAPIParentInfoBegin(
      /**
       * Object to which the new API parent info should be added
       */
      oAggregatedObject: ManagedObject,
      /**
       * Object that is a new API parent
       */
      oParent: ManagedObject,
      /**
       * the name of the aggregation under which oAggregatedObject is aggregated by the API parent
       */
      sAggregationName: string
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Completes the information about the original API parent of the given element. MUST be called after an
     * element is forwarded to another internal aggregation. For every call to ManagedObjectMetadata.addAPIParentInfoBegin(...)
     * this method here must be called as well.
     */
    static addAPIParentInfoEnd(
      /**
       * Object to which the new API parent info should be added
       */
      oAggregatedObject: ManagedObject
    ): void;
    /**
     * Test whether a given ID looks like it was automatically generated.
     *
     * Examples:
     * ```javascript
     *
     * True for:
     *   "foo--__bar04--baz"
     *   "foo--__bar04"
     *   "__bar04--baz"
     *   "__bar04"
     *   "__bar04--"
     *   "__bar04--foo"
     * False for:
     *   "foo__bar04"
     *   "foo__bar04--baz"
     * ```
     *
     *
     * See {@link sap.ui.base.ManagedObjectMetadata.prototype.uid} for details on ID generation.
     *
     * @returns whether the ID is likely to be generated
     */
    static isGeneratedId(
      /**
       * the ID that should be tested
       */
      sId: string
    ): boolean;
    /**
     * Calculates a new ID based on a prefix.
     *
     * To guarantee uniqueness of the generated IDs across all ID prefixes, prefixes must not end with digits.
     *
     * @returns A (hopefully unique) control id
     */
    static uid(
      /**
       * prefix for the new ID
       */
      sIdPrefix: string
    ): string;
    /**
     * @SINCE 1.27.0
     *
     * Returns an info object for the named public aggregation of the described class no matter whether the
     * aggregation was defined by the class itself or by one of its ancestor classes.
     *
     * If neither the class nor its ancestor classes define a public aggregation with the given name, `undefined`
     * is returned.
     *
     * If the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation
     * of the 'described class' (if any).
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns An info object describing the aggregation or `undefined`
     */
    getAggregation(
      /**
       * name of the aggregation or empty
       */
      sName?: string
    ): Object | undefined;
    /**
     * Returns a map of info objects for the public aggregations of the described class. Aggregations declared
     * by ancestor classes are not included.
     *
     * The returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is
     * the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of aggregation info objects keyed by aggregation names
     */
    getAggregations(): Record<string, Object>;
    /**
     * Returns a map of info objects for all public aggregations of the described class, including public aggregations
     * form the ancestor classes.
     *
     * The returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is
     * the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of aggregation info objects keyed by aggregation names
     */
    getAllAggregations(): Record<string, Object>;
    /**
     * Returns a map of info objects for all public associations of the described class, including public associations
     * form the ancestor classes.
     *
     * The returned map keys the association info objects by their name. In case of 0..1 associations this is
     * the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of association info objects keyed by association names
     */
    getAllAssociations(): Record<string, Object>;
    /**
     * Returns a map of info objects for all public events of the described class, including public events form
     * the ancestor classes.
     *
     * The returned map keys the event info objects by their name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of event info objects keyed by event names
     */
    getAllEvents(): Record<string, Object>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a map of info objects for all private (hidden) aggregations of the described class, including
     * private aggregations from the ancestor classes.
     *
     * The returned map contains aggregation info objects keyed by the aggregation name. In case of 0..1 aggregations
     * this is the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of aggregation info objects keyed by aggregation names
     */
    getAllPrivateAggregations(): Record<string, Object>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a map of info objects for all private (hidden) associations of the described class, including
     * private associations from the ancestor classes.
     *
     * The returned map contains association info objects keyed by the association name. In case of 0..1 associations
     * this is the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of association info objects keyed by association names
     */
    getAllPrivateAssociations(): Record<string, Object>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a map of info objects for all private (hidden) properties of the described class, including private
     * properties from the ancestor classes.
     *
     * The returned map contains property info objects keyed by the property name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of property info objects keyed by property names
     */
    getAllPrivateProperties(): Record<string, Object>;
    /**
     * Returns a map of info objects for all public properties of the described class, including public properties
     * from the ancestor classes.
     *
     * The returned map keys the property info objects by their name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of property info objects keyed by the property names
     */
    getAllProperties(): Record<string, Object>;
    /**
     * @SINCE 1.27.0
     *
     * Returns an info object for the named public association of the described class, no matter whether the
     * association was defined by the class itself or by one of its ancestor classes.
     *
     * If neither the described class nor its ancestor classes define an association with the given name, `undefined`
     * is returned.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns An info object describing the association or `undefined`
     */
    getAssociation(
      /**
       * name of the association
       */
      sName: string
    ): Object | undefined;
    /**
     * Returns a map of info objects for all public associations of the described class. Associations declared
     * by ancestor classes are not included.
     *
     * The returned map keys the association info objects by their name. In case of 0..1 associations this is
     * the singular name, otherwise it is the plural name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of association info objects keyed by association names
     */
    getAssociations(): Record<string, Object>;
    /**
     * @SINCE 1.73
     *
     * Returns an info object for the default aggregation of the described class.
     *
     * If the class itself does not define a default aggregation, then the info object for the default aggregation
     * of the parent class is returned.
     *
     * @returns An info object for the default aggregation
     */
    getDefaultAggregation(): Object;
    /**
     * @SINCE 1.73
     *
     * Returns the name of the default aggregation of the described class.
     *
     * If the class itself does not define a default aggregation, then the default aggregation of the parent
     * is returned. If no class in the hierarchy defines a default aggregation, `undefined` is returned.
     *
     * @returns Name of the default aggregation
     */
    getDefaultAggregationName(): string;
    /**
     * @SINCE 1.27.0
     *
     * Returns an info object for the named public event of the described class, no matter whether the event
     * was defined by the class itself or by one of its ancestor classes.
     *
     * If neither the described class nor its ancestor classes define an event with the given name, `undefined`
     * is returned.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns An info object describing the event or `undefined`
     */
    getEvent(
      /**
       * name of the event
       */
      sName: string
    ): Object | undefined;
    /**
     * Returns a map of info objects for the public events of the described class. Events declared by ancestor
     * classes are not included.
     *
     * The returned map keys the event info objects by their name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of event info objects keyed by event names
     */
    getEvents(): Record<string, Object>;
    /**
     * Returns the name of the library that contains the described UIElement.
     *
     * @returns the name of the library
     */
    getLibraryName(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the info object for the named public or private aggregation declared by the described class or
     * by any of its ancestors.
     *
     * If the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation
     * of the described class (if it is defined).
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns aggregation info object or `undefined`
     */
    getManagedAggregation(
      /**
       * name of the aggregation to be retrieved or empty
       */
      sAggregationName: string
    ): object | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the info object for the named public or private association declared by the described class or
     * by any of its ancestors.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns association info object or `undefined`
     */
    getManagedAssociation(
      /**
       * name of the association to be retrieved
       */
      sName: string
    ): object | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the info object for the named public or private property declared by the described class or by
     * any of its ancestors.
     *
     * If the name is not given (or has a falsy value), then it is substituted by the name of the default property
     * of the described class (if it is defined).
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns property info object or `undefined`
     */
    getManagedProperty(
      /**
       * name of the property to be retrieved or empty
       */
      sName: string
    ): object | undefined;
    /**
     * Returns a map of info objects for the public properties of the described class. Properties declared by
     * ancestor classes are not included.
     *
     * The returned map keys the property info objects by their name.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns Map of property info objects keyed by the property names
     */
    getProperties(): Record<string, Object>;
    /**
     * @SINCE 1.27.0
     *
     * Returns an info object for the named public property of the described class, no matter whether the property
     * was defined by the class itself or by one of its ancestor classes.
     *
     * If neither the described class nor its ancestor classes define a property with the given name, `undefined`
     * is returned.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns An info object describing the property or `undefined`
     */
    getProperty(
      /**
       * name of the property
       */
      sName: string
    ): Object | undefined;
    /**
     * Returns a map of default values for all properties declared by the described class and its ancestors,
     * keyed by the property name.
     *
     * @returns Map of default values keyed by property names
     */
    getPropertyDefaults(): Record<string, any>;
    /**
     * @SINCE 1.27.0
     *
     * Returns an info object for a public setting with the given name that either is a public property or a
     * public aggregation of cardinality 0..1 and with at least one simple alternative type. The setting can
     * be defined by the class itself or by one of its ancestor classes.
     *
     * If neither the described class nor its ancestor classes define a suitable setting with the given name,
     * `undefined` is returned.
     *
     * **Warning:** Type, structure and behavior of the returned info objects is not documented and therefore
     * not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation
     * of this class.
     *
     * @returns An info object describing the property or aggregation or `undefined`
     */
    getPropertyLikeSetting(
      /**
       * name of the property like setting
       */
      sName: string
    ): Object | undefined;
    /**
     * Checks the existence of the given public aggregation by its name.
     *
     * @returns true, if the aggregation exists
     */
    hasAggregation(
      /**
       * name of the aggregation
       */
      sName: string
    ): boolean;
    /**
     * Checks the existence of the given public association by its name
     *
     * @returns true, if the association exists
     */
    hasAssociation(
      /**
       * name of the association
       */
      sName: string
    ): boolean;
    /**
     * Checks the existence of the given event by its name
     *
     * @returns true, if the event exists
     */
    hasEvent(
      /**
       * name of the event
       */
      sName: string
    ): boolean;
    /**
     * Checks the existence of the given public property by its name
     *
     * @returns true, if the property exists
     */
    hasProperty(
      /**
       * name of the property
       */
      sName: string
    ): boolean;
    /**
     * Calculates a new ID for an instance of this class.
     *
     * Note that the calculated short name part is usually not unique across all classes, but doesn't have to
     * be. It might even be empty when the class name consists of invalid characters only.
     *
     * @returns A (hopefully unique) control ID
     */
    uid(): string;
  }
}

declare module "sap/ui/base/Metadata" {
  /**
   * @SINCE 0.8.6
   *
   * Metadata for a class.
   */
  export default class Metadata {
    /**
     * Creates a new metadata object from the given static infos.
     *
     * **Note:** Throughout this class documentation, the described subclass of Object is referenced as the
     * described class.
     */
    constructor(
      /**
       * Fully qualified name of the described class
       */
      sClassName: string,
      /**
       * Info to construct the class and its metadata from
       */
      oClassInfo: object
    );

    /**
     * @deprecated (since 1.58) - this method should not be used for productive code. The accuracy of the returned
     * information highly depends on the concrete class and is not actively monitored. There might be more public
     * methods or some of the returned methods might not really be intended for public use. In general, pure
     * visibility information should not be exposed in runtime metadata but be part of the documentation. Subclasses
     * of `sap.ui.base.Object` might decide to provide runtime metadata describing their public API, but this
     * then should not be backed by this method. See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods}
     * for an example.
     *
     * Returns an array with the names of all public methods declared by the described class and all its ancestors
     * classes.
     *
     * @returns array with names of all public methods provided by the described class and its ancestors
     */
    getAllPublicMethods(): string[];
    /**
     * Returns the (constructor of the) described class
     *
     * @returns class described by this metadata
     */
    getClass(): Function;
    /**
     * Returns the fully qualified name of the described class
     *
     * @returns name of the described class
     */
    getName(): string;
    /**
     * Returns the metadata object of the base class of the described class or null if the class has no (documented)
     * base class.
     *
     * @returns metadata of the base class
     */
    getParent(): Metadata;
    /**
     * @deprecated (since 1.58) - this method should not be used for productive code. The accuracy of the returned
     * information highly depends on the concrete class and is not actively monitored. There might be more public
     * methods or some of the returned methods might not really be intended for public use. In general, pure
     * visibility information should not be exposed in runtime metadata but be part of the documentation. Subclasses
     * of `sap.ui.base.Object` might decide to provide runtime metadata describing their public API, but this
     * then should not be backed by this method. See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods}
     * for an example.
     *
     * Returns an array with the names of the public methods declared by the described class, methods of ancestors
     * are not listed.
     *
     * @returns array with names of public methods declared by the described class
     */
    getPublicMethods(): string[];
    /**
     * @SINCE 1.56
     *
     * Checks whether the class described by this metadata object is of the named type.
     *
     * This check is solely based on the type names as declared in the class metadata. It compares the given
     * `vTypeName` with the name of this class, with the names of any base class of this class and with the
     * names of all interfaces implemented by any of the aforementioned classes.
     *
     * Instead of a single type name, an array of type names can be given and the method will check if this
     * class is of any of the listed types (logical or).
     *
     * Should the UI5 class system in future implement additional means of associating classes with type names
     * (e.g. by introducing mixins), then this method might detect matches for those names as well.
     *
     * @returns Whether this class is of the given type or of any of the given types
     */
    isA(
      /**
       * Type or types to check for
       */
      vTypeName: string | string[]
    ): boolean;
    /**
     * Returns whether the described class is abstract
     *
     * @returns whether the class is abstract
     */
    isAbstract(): boolean;
    /**
     * @SINCE 1.26.4
     *
     * Whether the described class is deprecated and should not be used any more
     *
     * @returns whether the class is considered deprecated
     */
    isDeprecated(): boolean;
    /**
     * Returns whether the described class is final
     *
     * @returns whether the class is final
     */
    isFinal(): boolean;
    /**
     * Checks whether the described class or one of its ancestor classes implements the given interface.
     *
     * @returns whether this class implements the interface
     */
    isInstanceOf(
      /**
       * name of the interface to test for (in dot notation)
       */
      sInterface: string
    ): boolean;
  }
}

declare module "sap/ui/base/Object" {
  import Metadata from "sap/ui/base/Metadata";

  /**
   * Base class for all SAPUI5 Objects.
   */
  export default class BaseObject {
    /**
     * Constructor for an `sap.ui.base.Object`.
     *
     * Subclasses of this class should always call the constructor of their base class.
     */
    constructor();

    /**
     * @deprecated (since 1.3.1) - Use the static `extend` method of the desired base class (e.g. {@link sap.ui.base.Object.extend})
     *
     * Creates metadata for a given class and attaches it to the constructor and prototype of that class.
     *
     * After creation, metadata can be retrieved with getMetadata().
     *
     * The static info can at least contain the following entries:
     * 	 - baseType: {string} fully qualified name of a base class or empty
     * 	 - publicMethods: {string} an array of method names that will be visible in the interface proxy returned
     * 			by {@link #getInterface}
     *
     * @returns the created metadata object
     */
    static defineClass(
      /**
       * name of an (already declared) constructor function
       */
      sClassName: string,
      /**
       * static info used to create the metadata object
       */
      oStaticInfo: {
        /**
         * qualified name of a base class
         */
        baseType: string;
        /**
         * array of names of public methods
         */
        publicMethods: string[];
      },
      /**
       * constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
       */
      FNMetaImpl?: Function
    ): Metadata;
    /**
     * @SINCE 1.3.1
     *
     * Creates a subclass of class sap.ui.base.Object with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain three kinds of information:
     * 	 - `metadata:` an (optional) object literal with metadata about the class like implemented interfaces,
     * 			see {@link sap.ui.base.Object.MetadataOptions MetadataOptions} for details. The information in the object
     * 			literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}. Subclasses of sap.ui.base.Object
     * 			can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
     *
     *
     * 	 - `constructor:` a function that serves as a constructor function for the new class. If no constructor
     * 			function is given, the framework creates a default implementation that delegates all its arguments to
     * 			the constructor function of the base class.
     *
     * any-other-name: any other property in the `oClassInfo` is copied into the prototype object
     * of the newly created class. Callers can thereby add methods or properties to all instances of the class.
     * But be aware that the given values are shared between all instances of the class. Usually, it doesn't
     * make sense to use primitive values here other than to declare public constants.
     *
     * If such a property has a function as its value, and if the property name does not start with an underscore
     * or with the prefix "on", the property name will be automatically added to the list of public methods
     * of the class (see property `publicMethods` in the `metadata` section). If a method's name matches that
     * pattern, but is not meant to be public, it shouldn't be included in the class info object, but be assigned
     * to the prototype instead.
     *
     *
     *
     * The prototype object of the newly created class uses the same prototype as instances of the base class
     * (prototype chaining).
     *
     * A metadata object is always created, even if there is no `metadata` entry in the `oClassInfo` object.
     * A getter for the metadata is always attached to the prototype and to the class (constructor function)
     * itself.
     *
     * Last but not least, with the third argument `FNMetaImpl` the constructor of a metadata class can be specified.
     * Instances of that class will be used to represent metadata for the newly created class and for any subclass
     * created from it. Typically, only frameworks will use this parameter to enrich the metadata for a new
     * class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
     *
     * @returns the created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * name of the class to be created
       */
      sClassName: string,
      /**
       * structured object with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BaseObject>,
      /**
       * constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.56
     *
     * Checks whether the given object is an instance of the named type. This function is a short-hand convenience
     * for {@link sap.ui.base.Object#isA}.
     *
     * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.
     *
     * @returns Whether the given object is an instance of the given type or of any of the given types
     */
    static isA<T extends BaseObject = BaseObject>(
      /**
       * Object which will be checked whether it is an instance of the given type
       */
      oObject: object,
      /**
       * Type or types to check for
       */
      vTypeName: string | string[]
    ): oObject is T;
    /**
     * Destructor method for objects.
     */
    destroy(): void;
    /**
     * Returns the public facade of this object.
     *
     * By default, the public facade is implemented as an instance of {@link sap.ui.base.Interface}, exposing
     * the `publicMethods` as defined in the metadata of the class of this object.
     *
     * See the documentation of the {@link #.extend extend} method for an explanation of `publicMethods`.
     *
     * The facade is created on the first call of `getInterface` and reused for all later calls.
     *
     * @returns A facade for this object, with at least the public methods of the class of this.
     */
    getInterface(): BaseObject;
    /**
     * Returns the metadata for the class that this object belongs to.
     *
     * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}
     * or {@link sap.ui.base.Object.extend}.
     *
     * @returns metadata for the class of the object
     */
    getMetadata(): Metadata;
    /**
     * @SINCE 1.56
     *
     * Checks whether this object is an instance of the named type.
     *
     * This check is solely based on the type names as declared in the class metadata. It compares the given
     * `vTypeName` with the name of the class of this object, with the names of any base class of that class
     * and with the names of all interfaces implemented by any of the aforementioned classes.
     *
     * Instead of a single type name, an array of type names can be given and the method will check if this
     * object is an instance of any of the listed types (logical or).
     *
     * Should the UI5 class system in future implement additional means of associating classes with type names
     * (e.g. by introducing mixins), then this method might detect matches for those names as well.
     *
     * @returns Whether this object is an instance of the given type or of any of the given types
     */
    isA<T extends BaseObject = BaseObject>(
      /**
       * Type or types to check for
       */
      vTypeName: string | string[]
    ): this is T;
  }
  /**
   * The structure of the "metadata" object which is passed when inheriting from sap.ui.base.Object using
   * its static "extend" method. See {@link sap.ui.base.Object.extend} for details on its usage.
   */
  export type MetadataOptions = {
    /**
     * set of names of implemented interfaces (defaults to no interfaces)
     */
    interfaces?: string[];
    /**
     * flag that marks the class as abstract (purely informational, defaults to false)
     */
    abstract?: boolean;
    /**
     * flag that marks the class as final (defaults to false)
     */
    final?: boolean;
    /**
     * flag that marks the class as deprecated (defaults to false). May lead to an additional warning log message
     * at runtime when the object is still used. For the documentation, also add a `@deprecated` tag in the
     * JSDoc, describing since when it is deprecated and what any alternatives are.
     */
    deprecated?: boolean;
  };
}

declare module "sap/ui/base/ObjectPool" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Manages a pool of objects for reuse, all of the same type; the type has to be specified at construction
   * time.
   *
   * Each pool maintains a list of free objects of the given type. If {@link sap.ui.base.ObjectPool.prototype.borrowObject}
   * is called, an existing free object is taken from the pool. When no free object is available, a new instance
   * is created by calling the constructor without any arguments. In either case, the {@link sap.ui.base.Poolable#init}
   * method is called on the object to initialize it with the data for the current caller.
   *
   * When the object is no longer needed, it has to be returned to the pool by calling {@link #returnObject}.
   * At that point in time, {@link sap.ui.base.Poolable#reset} is called on the object to remove all data
   * from it. Then it is is added back to the list of free objects for future reuse.
   *
   * See {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.
   *
   * Example:
   * ```javascript
   *
   *   sap.ui.define([
   *     "sap/ui/base/Event",
   *     "sap/ui/base/ObjectPool"
   *   ], function(Event, ObjectPool) {
   *
   *     // create a pool for events
   *     var oEventPool = new ObjectPool(Event);
   *
   *     ...
   *
   *     // borrow an instance and initialize it at the same time
   *     var oEvent = oEventPool.borrowObject('myEvent', this, {foo: 'bar'});
   *     // this internally calls oEvent.init('myEvent', this, {foo: 'bar'})
   *
   *     // return the borrowed object
   *     oEventPool.returnObject(oEvent);
   *     // this internally calls oEvent.reset()
   *
   *     ...
   *
   *   }});
   * ```
   */
  export default class ObjectPool extends BaseObject {
    /**
     * Creates an `ObjectPool` for maintaining instances of the given class `oObjectClass`.
     *
     * `oObjectClass` must implement the {@link sap.ui.base.Poolable} interface.
     */
    constructor(
      /**
       * Constructor for the class of objects that this pool should manage
       */
      oObjectClass: Function
    );

    /**
     * Creates a new subclass of class sap.ui.base.ObjectPool with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectPool>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.base.ObjectPool.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Borrows a free object from the pool. Any arguments to this method are forwarded to the init method of
     * the borrowed object.
     *
     * @returns The borrowed object of the same type that has been specified for this pool
     */
    borrowObject(
      /**
       * optional initialization parameters for the borrowed object
       */
      ...args: any[]
    ): object;
    /**
     * Returns an object to the pool. The object must have been borrowed from this pool beforehand. The reset
     * method is called on the object before it is added to the set of free objects.
     */
    returnObject(
      /**
       * The object to return to the pool
       */
      oObject: object
    ): void;
  }
  /**
   * Contract for objects that can be pooled by an `ObjectPool`.
   *
   * Poolable objects must provide a no-arg constructor which is used by the pool to construct new, unused
   * objects.
   *
   * To be more convenient to use, poolable objects should implement their constructor in a way that it either
   * can be called with no arguments (used by the pool) or with the same signature as their {@link #init}
   * method (to be used by applications).
   */
  export interface Poolable {
    __implements__sap_ui_base_Poolable: boolean;

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Called by the `ObjectPool` when this instance will be activated for a caller.
     *
     * The same method will be called after a new instance has been created by an otherwise exhausted pool.
     *
     * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}, all arguments will
     * be propagated to this method.
     */
    init(
      /**
       * the arguments which were given to {@link sap.ui.base.ObjectPool#borrowObject}
       */
      ...args: any[]
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Called by the object pool when an instance is returned to the pool.
     *
     * While no specific implementation is required, poolable objects in general should clean all caller specific
     * state (set to null) in this method to avoid memory leaks and to enforce garbage collection of the caller
     * state.
     */
    reset(): void;
  }
}

declare module "sap/ui/core/library" {
  import UI5Element from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  /**
   * A string type that represents non-relative CSS size values.
   *
   * This is a subtype of the `'<length> type'` defined in the CSS specifications. Allowed values are
   * only absolute CSS sizes like "1px" or "2em". Percentage sizes like "50%"
   * and the special values "auto" and "inherit" are NOT allowed. Mathematical expressions
   * using the CSS3 `calc(expression)` operator are allowed as long as they do not use percentage sizes.
   *
   * Note that CSS might not allow all these values for every CSS property representing a size. So even if
   * a value is accepted by `sap.ui.core.AbsoluteCSSSize`, it still might have no effect in a specific context.
   * In other words: UI5 controls usually don't extend the range of allowed values in CSS.
   *
   * **Units**
   *
   * Valid font-relative units are `em, ex` and `rem`. Supported absolute units are `cm, mm, in, pc, pt` and
   * `px`. Other units are not supported.
   *
   * **Mathematical Expressions**
   *
   * Expressions inside the `calc()` operator are only roughly checked for validity. Not every value that
   * this type accepts is a valid expression in the sense of the CSS spec. But vice versa, any expression
   * that is valid according to the spec should be accepted by this type. The current implementation is based
   * on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April
   * 2015}.
   *
   * Noteworthy details:
   * 	 - whitespace is mandatory around a '-' or '+' operator and optional otherwise
   * 	 - parentheses are accepted but not checked for being balanced (a restriction of regexp based checks)
   *
   * 	 - semantic constraints like type restrictions are not checked
   *
   * Future versions of UI5 might check `calc()` expressions in more detail, so applications should not assume
   * that a value, that is invalid according to the CSS spec but currently accepted by this type still will
   * be accepted by future versions of this type.
   */
  export type AbsoluteCSSSize = string;

  /**
   * @SINCE 1.110
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * The object contains accessibility information for a control.
   */
  export type AccessibilityInfo = {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The WAI-ARIA role which is implemented by the control.
     */
    role?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * A translated text that represents the control type. Might correlate with the role.
     */
    type?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Describes the most relevant control state (e.g. the input's value) - it should be a translated text.
     * **Note:** The type and the enabled/editable state shouldn`t be handled here.
     */
    description?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the control can get the focus.
     */
    focusable?: boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the control is enabled. If not relevant, it shouldn`t be set or `null` can be provided.
     */
    enabled?: boolean | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the control is editable. If not relevant, it shouldn`t be set or `null` can be provided.
     */
    editable?: boolean | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the control is readonly. If not relevant, it shouldn`t be set or `null` can be provided.
     */
    readonly?: boolean | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * A list of elements or controls that are aggregated by the given control (e.g. when the control is a layout).
     * Primitive values in the list will be ignored. **Note:** Children should only be provided when it is helpful
     * to understand the accessibility context (e.g. a form control shouldn`t provide details of its internals
     * (fields, labels, ...) but a layout should).
     */
    children?: UI5Element[];
  };

  /**
   * Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole
   * control property. For more information, go to "Roles for Accessible Rich Internet Applications (WAI-ARIA
   * Roles)" at the www.w3.org homepage.
   */
  export enum AccessibleLandmarkRole {
    /**
     * Represents the ARIA role `banner`.
     *
     * A banner usually appears at the top of the page and typically spans the full width.
     */
    Banner = "Banner",
    /**
     * Represents the ARIA role `complementary`.
     *
     * A section of the page, designed to be complementary to the main content at a similar level in the DOM
     * hierarchy.
     */
    Complementary = "Complementary",
    /**
     * Represents the ARIA role `contentinfo`.
     *
     * A region that contains information about the content on the page.
     */
    ContentInfo = "ContentInfo",
    /**
     * Represents the ARIA role `form`.
     *
     * A region that contains a collection of items and objects that, as a whole, combine to create a form.
     */
    Form = "Form",
    /**
     * Represents the ARIA role `main`.
     *
     * The main content of a page.
     */
    Main = "Main",
    /**
     * Represents the ARIA role `navigation`.
     *
     * A region that contains a collection of items and objects that, as a whole, combine to create a navigation
     * facility.
     */
    Navigation = "Navigation",
    /**
     * No explicit role is applicable.
     *
     * The interpretation of this value depends on the control / element which defines a property with this
     * type. Normally this value means that no accessible landmark should be written.
     */
    None = "None",
    /**
     * Represents the ARIA role `region`.
     *
     * A section of a page, that is important enough to be included in a page summary or table of contents.
     */
    Region = "Region",
    /**
     * Represents the ARIA role `search`.
     *
     * A region that contains a collection of items and objects that, as a whole, combine to create a search
     * facility.
     */
    Search = "Search",
  }
  /**
   * Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control
   * property. For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)"
   * at the www.w3.org homepage.
   */
  export enum AccessibleRole {
    /**
     * A message with an alert or error information.
     */
    Alert = "Alert",
    /**
     * A separate window with an alert or error information.
     */
    AlertDialog = "AlertDialog",
    /**
     * A software unit executing a set of tasks for the user.
     */
    Application = "Application",
    /**
     * Usually defined as the advertisement at the top of a web page. The banner content typically contains
     * the site or company logo, or other key advertisements.
     */
    Banner = "Banner",
    /**
     * Allows user-triggered actions.
     */
    Button = "Button",
    /**
     * A control that has three possible values: true, false, mixed.
     */
    Checkbox = "Checkbox",
    /**
     * A table cell containing header information for a column.
     */
    ColumnHeader = "ColumnHeader",
    /**
     * Allows selecting an item from a list, or to enter data directly in the input field.
     */
    Combobox = "Combobox",
    /**
     * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
     */
    ContentInfo = "ContentInfo",
    /**
     * The content of the associated element represents a definition. If there is a definition element within
     * the content, this one represents the term being defined.
     */
    Definition = "Definition",
    /**
     * Descriptive content for a page element.
     */
    Description = "Description",
    /**
     * A small window that is designed to interrupt the current application processing in order to inform the
     * user and to get some response.
     */
    Dialog = "Dialog",
    /**
     * A list of references to members of a single group.
     */
    Directory = "Directory",
    /**
     * Content that contains related information, such as a book.
     */
    Document = "Document",
    /**
     * Contains cells of tabular data arranged in rows and columns, for example in a table.
     */
    Grid = "Grid",
    /**
     * A table cell in a grid where the cells can be active, editable, and selectable. Cells may have functional
     * relationships to controls, for example.
     */
    GridCell = "GridCell",
    /**
     * A section of user interface objects.
     */
    Group = "Group",
    /**
     * A heading for a section of the page.
     */
    Heading = "Heading",
    /**
     * A container for a collection of elements that form an image.
     */
    Img = "Img",
    /**
     * An interactive reference to a resource.
     */
    Link = "Link",
    /**
     * A container for non-interactive list items which are the children of the list.
     */
    List = "List",
    /**
     * A widget that allows the user to select one or more items from a list. The items within the list are
     * static and can contain images.
     */
    Listbox = "Listbox",
    /**
     * A single item in a list.
     */
    ListItem = "ListItem",
    /**
     * An area where new information is added, or old information disappears. Information types are chat logs,
     * messaging, or error logs, for example. The log contains a sequence: New information is always added to
     * the end of the log.
     */
    Log = "Log",
    /**
     * Defines the main content of a document.
     */
    Main = "Main",
    /**
     * Is used to scroll text across the page.
     */
    Marquee = "Marquee",
    /**
     * Offers a list of choices to the user.
     */
    Menu = "Menu",
    /**
     * A container for menu items where each item may activate a submenu.
     */
    Menubar = "Menubar",
    /**
     * A child in a menu.
     */
    MenuItem = "MenuItem",
    /**
     * A checkable menu item (tri-state).
     */
    MenuItemCheckbox = "MenuItemCheckbox",
    /**
     * A menu item which is part of a group of menuitemradio roles.
     */
    MenuItemRadio = "MenuItemRadio",
    /**
     * A collection of links suitable for use when navigating the document or related documents.
     */
    Navigation = "Navigation",
    /**
     * The content is parenthetic or ancillary to the main content of the resource.
     */
    Note = "Note",
    /**
     * A selectable item in a list represented by a select.
     */
    Option = "Option",
    /**
     * An element whose role is presentational does not need to be mapped to the accessibility API.
     */
    Presentation = "Presentation",
    /**
     * Shows the execution progress in applications providing functions that take a long time.
     */
    ProgressBar = "ProgressBar",
    /**
     * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
     */
    Radio = "Radio",
    /**
     * A group of radio controls.
     */
    RadioGroup = "RadioGroup",
    /**
     * A large section on the web page.
     */
    Region = "Region",
    /**
     * A row of table cells.
     */
    Row = "Row",
    /**
     * A table cell containing header information for a row.
     */
    RowHeader = "RowHeader",
    /**
     * A search section of a web document. In many cases, this is a form used to submit search requests about
     * the site, or a more general Internet wide search service.
     */
    Search = "Search",
    /**
     * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
     * or stock price.
     */
    Secondary = "Secondary",
    /**
     * Indicates that the element contains content that is related to the main content of the page.
     */
    SeeAlso = "SeeAlso",
    /**
     * A line or bar that separates sections of content.
     */
    Separator = "Separator",
    /**
     * A user input where the user selects an input in a given range. This form of range expects an analogous
     * keyboard interface.
     */
    Slider = "Slider",
    /**
     * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime,
     * and the other ones can be displayed by scrolling using the arrow up and arrow down key.
     */
    SpinButton = "SpinButton",
    /**
     * A container for processing advisory information.
     */
    Status = "Status",
    /**
     * A header for a tab panel.
     */
    Tab = "Tab",
    /**
     * A list of tabs which are references to tab panels.
     */
    Tablist = "Tablist",
    /**
     * A container for the resources associated with a tab.
     */
    Tabpanel = "Tabpanel",
    /**
     * Inputs that allow free-form text as their value.
     */
    Textbox = "Textbox",
    /**
     * A numerical counter which indicates an amount of elapsed time from a start point, or of the time remaining
     * until a certain end point.
     */
    Timer = "Timer",
    /**
     * A collection of commonly used functions represented in compact visual form.
     */
    Toolbar = "Toolbar",
    /**
     * A popup that displays a description for an element when the user passes over or rests on that element.
     * Supplement to the normal tooltip processing of the user agent.
     */
    Tooltip = "Tooltip",
    /**
     * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be
     * collapsed and expanded.
     */
    Tree = "Tree",
    /**
     * A grid whose rows are expandable and collapsable in the same manner as the ones of trees.
     */
    TreeGrid = "TreeGrid",
    /**
     * A tree node
     */
    TreeItem = "TreeItem",
  }
  /**
   * Configuration options for the colors of a progress bar.
   */
  export enum BarColor {
    /**
     * Color: yellow (#faf2b0)
     */
    CRITICAL = "CRITICAL",
    /**
     * Color: red (#ff9a90)
     */
    NEGATIVE = "NEGATIVE",
    /**
     * Color: blue (#b8d0e8)
     */
    NEUTRAL = "NEUTRAL",
    /**
     * Color: green (#b5e7a8)
     */
    POSITIVE = "POSITIVE",
  }
  /**
   * Configuration options for the `BusyIndicator` size.
   */
  export enum BusyIndicatorSize {
    /**
     * Type: automatic size detection
     */
    Auto = "Auto",
    /**
     * Type: Large size
     */
    Large = "Large",
    /**
     * Type: Medium size
     */
    Medium = "Medium",
    /**
     * Type: Medium size, specifically if the BusyIndicator is displayed over a page section
     */
    Section = "Section",
    /**
     * Type: small size
     */
    Small = "Small",
  }
  /**
   * Collision behavior: horizontal/vertical.
   *
   * Defines how the position of an element should be adjusted in case it overflows the window in some direction.
   * For both directions this can be "flip", "fit", "flipfit" or "none". If only one behavior is provided
   * it is applied to both directions.
   *
   * Examples: "flip", "fit none", "flipfit fit"
   */
  export type Collision = string;

  /**
   * Enumeration for different lifecycle behaviors of components created by the `ComponentContainer`.
   */
  export enum ComponentLifecycle {
    /**
     * Application managed lifecycle means that the application takes care to destroy the components associated
     * with the `ComponentContainer`.
     */
    Application = "Application",
    /**
     * Container managed lifecycle means that the `ComponentContainer` takes care to destroy the components
     * associated with the `ComponentContainer` once the `ComponentContainer` is destroyed or a new component
     * is associated.
     */
    Container = "Container",
    /**
     * Legacy lifecycle means that the `ComponentContainer` takes care to destroy the component which is associated
     * with the `ComponentContainer` once the `ComponentContainer` is destroyed, but not when a new component
     * is associated.
     */
    Legacy = "Legacy",
  }
  /**
   * A string type that represents CSS color values (CSS Color Level 3).
   *
   * **Allowed values are:**
   * 	 - Hex colors like `#666666` or `#fff`,
   * 	 - HSL/RGB values with or without transparency, like `hsla(90,10%,30%,0.5)` or `rgb(0,0,0)`,
   * 	 - CSS color names like `darkblue`, or special values like `inherit` and `transparent`,
   * 	 - an empty string, which has the same effect as setting no color.  For more information about
   * 			the CSS Level 3 color specification, see {@link https://www.w3.org/TR/css-color-3/#css-system}.
   */
  export type CSSColor = string;

  /**
   * A string type that represents CSS size values.
   *
   * The CSS specifications calls this the `'<length> type'`. Allowed values are CSS sizes like "1px"
   * or "2em" or "50%". The special values `auto` and `inherit` are also accepted as well as mathematical
   * expressions using the CSS3 `calc(expression)` operator. Furthermore, length units representing
   * a percentage of the current viewport dimensions: width (vw), height (vh), the smaller of the two (vmin),
   * or the larger of the two (vmax) can also be defined as a CSS size.
   *
   * Note that CSS does not allow all these values for every CSS property representing a size. E.g. `padding-left`
   * doesn't allow the value `auto`. So even if a value is accepted by `sap.ui.core.CSSSize`, it still might
   * have no effect in a specific context. In other words: UI5 controls usually don't extend the range of
   * allowed values in CSS.
   *
   * **Units**
   *
   * Valid font-relative units are `em, ex` and `rem`. Viewport relative units `vw, vh, vmin, vmax` are also
   * valid. Supported absolute units are `cm, mm, in, pc, pt` and `px`.Other units are not supported yet.
   *
   * **Mathematical Expressions**
   *
   * Expressions inside the `calc()` operator are only roughly checked for validity. Not every value that
   * this type accepts might be a valid expression in the sense of the CSS spec. But vice versa, any expression
   * that is valid according to the spec should be accepted by this type. The current implementation is based
   * on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April
   * 2015}.
   *
   * Noteworthy details:
   * 	 - whitespace is mandatory around a '-' or '+' operator and optional otherwise
   * 	 - parentheses are accepted but not checked for being balanced (a restriction of regexp based checks)
   *
   * 	 - semantic constraints like type restrictions are not checked
   *
   * Future versions of UI5 might check `calc()` expressions in more detail, so applications should not assume
   * that a value, that is invalid according to the CSS spec but currently accepted by this type still will
   * be accepted by future versions of this type.
   */
  export type CSSSize = string;

  /**
   * @SINCE 1.11.0
   *
   * This type checks the short hand form of a margin or padding definition.
   *
   * E.g. "1px 1px" or up to four CSSSize values are allowed or tHe special keyword `inherit`.
   */
  export type CSSSizeShortHand = string;

  /**
   * Font design for texts.
   */
  export enum Design {
    /**
     * Mono space font
     */
    Monospace = "Monospace",
    /**
     * Standard font
     */
    Standard = "Standard",
  }
  /**
   * Docking position: horizontal/vertical.
   *
   * Defines a position on the element which is used for aligned positioning of another element (e.g. the
   * left top corner of a popup is positioned at the left bottom corner of the input field). For the horizontal
   * position possible values are "begin", "left", "center", "right" and "end", where left/right always are
   * left and right, or begin/end which are dependent on the text direction. For the vertical position possible
   * values are "top", "center" and "bottom". Examples: "left top", "end bottom", "center center".
   */
  export type Dock = string;

  /**
   * @SINCE 1.111
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * The object contains focus information for input controls.
   */
  export type FocusInfo = {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The ID of the focused control.
     */
    id?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The position of the cursor.
     */
    cursorPos?: int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The start position of selection.
     */
    selectionStart?: int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The end position of selection.
     */
    selectionEnd?: int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Prevents scrolling.
     */
    preventScroll?: boolean | undefined;
  };

  /**
   * Configuration options for horizontal alignments of controls.
   */
  export enum HorizontalAlign {
    /**
     * Locale-specific positioning at the beginning of the line
     */
    Begin = "Begin",
    /**
     * Centered alignment of text
     */
    Center = "Center",
    /**
     * Locale-specific positioning at the end of the line
     */
    End = "End",
    /**
     * Hard option for left alignment
     */
    Left = "Left",
    /**
     * Hard option for right alignment
     */
    Right = "Right",
  }
  /**
   * @SINCE 1.104
   * @EXPERIMENTAL (since 1.104)
   *
   * Implementing this interface allows a control to be accessible via access keys.
   */
  export interface IAccessKeySupport {
    __implements__sap_ui_core_IAccessKeySupport: boolean;

    /**
     * @SINCE 1.104
     * @EXPERIMENTAL (since 1.104)
     *
     * Returns a refence to DOM element to be focused during Access key navigation. If not implemented getFocusDomRef()
     * method is used.
     */
    getAccessKeysFocusTarget?(): void;
    /**
     * @SINCE 1.104
     * @EXPERIMENTAL (since 1.104)
     *
     * If implemented called when access keys feature is enabled and highlighting is over
     */
    onAccKeysHighlightEnd?(): void;
    /**
     * @SINCE 1.104
     * @EXPERIMENTAL (since 1.104)
     *
     * If implemented called when access keys feature is enabled and highlighting is ongoing
     */
    onAccKeysHighlightStart?(): void;
  }

  /**
   * @SINCE 1.89.0
   *
   * Marker interface for subclasses of `sap.ui.core.UIComponent`.
   *
   * Implementing this interface allows a {@link sap.ui.core.UIComponent} to be created fully asynchronously.
   * This interface will implicitly set the component's rootView and router configuration to async. Nested
   * views will also be handled asynchronously. Additionally the error handling during the processing of views
   * is stricter and will fail if a view definition contains errors, e.g. broken binding strings.
   *
   * **Note:** Nested components (via {@link sap.ui.core.ComponentContainer}) are not handled asynchronously
   * by default.
   *
   * When implementing this interface the {@link sap.ui.core.Component.create Component.create} factory's
   * result Promise will resolve once the defined `rootView` is fully processed.
   *
   * An asynchronous component can also return a Promise in its {@link sap.ui.core.UIComponent#createContent
   * createContent} function. This Promise will also be chained into the {@link sap.ui.core.Component.create
   * Component.create} factory's result Promise.
   *
   * See {@link sap.ui.core.UIComponent#createContent} for more details and usage samples.
   */
  export interface IAsyncContentCreation {
    __implements__sap_ui_core_IAsyncContentCreation: boolean;
  }

  /**
   * @SINCE 1.98
   * @EXPERIMENTAL (since 1.98)
   *
   * Marker interface for controls that can serve as a menu for a table column header.
   *
   * Implementation of this interface implements the `openBy` and `getAriaHasPopupType` methods.
   */
  export interface IColumnHeaderMenu {
    __implements__sap_ui_core_IColumnHeaderMenu: boolean;

    /**
     * @SINCE 1.98.0
     * @EXPERIMENTAL (since 1.98)
     *
     * Returns the sap.ui.core.aria.HasPopup<\code> type of the menu.
     *
     * @returns sap.ui.core.aria.HasPopup<\code> type of the menu
     */
    getAriaHasPopupType(): aria.HasPopup | keyof typeof aria.HasPopup;
    /**
     * @SINCE 1.98
     * @EXPERIMENTAL (since 1.98)
     *
     * Opens the menu using the column header.
     */
    openBy(
      /**
       * Specifies the element where the menu is placed.
       */
      oAnchor: Control | HTMLElement
    ): void;
  }

  /**
   * Semantic Colors of an icon.
   */
  export enum IconColor {
    /**
     * Contrast color.
     */
    Contrast = "Contrast",
    /**
     * Critical color
     */
    Critical = "Critical",
    /**
     * Default color (brand color)
     */
    Default = "Default",
    /**
     * @SINCE 1.76
     *
     * Color for icon used as a marker
     */
    Marker = "Marker",
    /**
     * Negative color
     */
    Negative = "Negative",
    /**
     * Neutral color.
     */
    Neutral = "Neutral",
    /**
     * @SINCE 1.76
     *
     * Color that indicates an icon which isn't interactive
     */
    NonInteractive = "NonInteractive",
    /**
     * Positive color
     */
    Positive = "Positive",
    /**
     * @SINCE 1.76
     *
     * Color for icon used in a Tile
     */
    Tile = "Tile",
  }
  /**
   * Marker interface for controls that can serve as a context menu.
   *
   * Implementation of this interface should implement the `openAsContextMenu` method.
   */
  export interface IContextMenu {
    __implements__sap_ui_core_IContextMenu: boolean;

    /**
     * Opens the control by given opener ref.
     */
    openAsContextMenu(
      /**
       * An `oncontextmenu` event object or an object with properties left, top, offsetX, offsetY
       */
      oEvent: jQuery.Event | object,
      /**
       * The element which will get the focus back again after the menu was closed
       */
      oOpenerRef: UI5Element | HTMLElement
    ): void;
  }

  /**
   * A string type representing an ID or a name.
   *
   * Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons.
   * It may start with a character or underscore only.
   */
  export type ID = string;

  /**
   * @SINCE 1.48.0
   *
   * Marker interface for controls that can be used as content of `sap.ui.layout.form.Form` or `sap.ui.layout.form.SimpleForm`.
   *
   * If the control's width must not be adjusted by the `Form` control to meet the cell's width, the control
   * must implement the `getFormDoNotAdjustWidth` function and return `true`.
   */
  export interface IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;

    /**
     * @SINCE 1.48.0
     *
     * Whether a control wants to keep its original width even when used in a `Form`.
     *
     * In the `Form` control, all content controls are positioned on a grid cell base. By default, the controls
     * use the full width of the used grid cell. But for some controls (like image controls), this is not the
     * desired behavior. In this case the control must keep its original width.
     *
     * This is an optional method. When not defined, the width of the control might be adjusted.
     *
     * @returns true if the `Form` is not allowed to adjust the width of the control to use the cell's width
     */
    getFormDoNotAdjustWidth?(): boolean;
  }

  /**
   * State of the Input Method Editor (IME) for the control.
   *
   * Depending on its value, it allows users to enter and edit for example Chinese characters.
   */
  export enum ImeMode {
    /**
     * IME is used for entering characters.
     */
    Active = "Active",
    /**
     * The value is automatically computed by the user agent.
     */
    Auto = "Auto",
    /**
     * IME is disabled.
     */
    Disabled = "Disabled",
    /**
     * IME is not used for entering characters.
     */
    Inactive = "Inactive",
  }
  /**
   * @SINCE 1.62.0
   *
   * Colors to highlight certain UI elements.
   *
   * In contrast to the `ValueState`, the semantic meaning must be defined by the application.
   * See:
   * 	{@link fiori:/how-to-use-semantic-colors/ Semantic Colors}
   */
  export enum IndicationColor {
    /**
     * Indication Color 1
     */
    Indication01 = "Indication01",
    /**
     * Indication Color 2
     */
    Indication02 = "Indication02",
    /**
     * Indication Color 3
     */
    Indication03 = "Indication03",
    /**
     * Indication Color 4
     */
    Indication04 = "Indication04",
    /**
     * Indication Color 5
     */
    Indication05 = "Indication05",
    /**
     * @SINCE 1.75
     *
     * Indication Color 6
     */
    Indication06 = "Indication06",
    /**
     * @SINCE 1.75
     *
     * Indication Color 7
     */
    Indication07 = "Indication07",
    /**
     * @SINCE 1.75
     *
     * Indication Color 8
     */
    Indication08 = "Indication08",
  }
  /**
   * @SINCE 1.78
   * @EXPERIMENTAL (since 1.73)
   *
   * Enumeration for different mode behaviors of the `InvisibleMessage`.
   */
  export enum InvisibleMessageMode {
    /**
     * Indicates that updates to the region have the highest priority and should be presented to the user immediately.
     */
    Assertive = "Assertive",
    /**
     * Indicates that updates to the region should be presented at the next graceful opportunity, such as at
     * the end of reading the current sentence, or when the user pauses typing.
     */
    Polite = "Polite",
  }
  /**
   * @SINCE 1.92.0
   *
   * Marker interface for container controls.
   *
   * Implementing this interface allows a container control to display a {@link sap.ui.core.Placeholder}.
   * This requires the container control to implement the `showPlaceholder` and `hidePlaceholder` methods.
   *
   * Optionally, the `needPlaceholder` method can be implemented to defined, whether a placeholder is needed
   * or not. If implemented, this method must return a `boolean`. Depending on the return value, `showPlaceholder`
   * will be called or not.
   */
  export interface IPlaceholderSupport {
    __implements__sap_ui_core_IPlaceholderSupport: boolean;
  }

  /**
   * @SINCE 1.86.0
   * @EXPERIMENTAL (since 1.86)
   *
   * Marker interface for controls that can be used as content of `sap.ui.layout.form.SemanticFormElement`.
   *
   * If the value-holding property of the control is not `valuetext`, the name of the value-holding
   * property must be returned in the `getFormValueProperty` function.
   *
   * If the value of the control needs some special output formatting (to show a description instead of a
   * key), this formatted text needs to be returned in the `getFormFormattedValue` function.
   */
  export interface ISemanticFormContent {
    __implements__sap_ui_core_ISemanticFormContent: boolean;

    /**
     * @SINCE 1.86.0
     * @EXPERIMENTAL (since 1.86)
     *
     * Returns the formatted value of a control used in a `SemanticFormElement`.
     *
     * In the `SemanticFormElement` element, the assigned fields are rendered in edit mode. In display mode,
     * a text is rendered that concatenates the values of all assigned fields. In some cases the displayed text
     * does not match the value of the field and needs some formatting. In other cases the control does not
     * have a `value` property, so the `SemanticFormElement` element cannot determine the value.
     *
     * This is an optional method. If not defined, the `value` property or the `text` property is used to determine
     * the value.
     *
     * @returns Formatted value or a `Promise` returning the formatted value if resolved
     */
    getFormFormattedValue?(): string | Promise<any>;
    /**
     * @SINCE 1.86.0
     * @EXPERIMENTAL (since 1.86)
     *
     * Returns the name of the value-holding property of a control used in a `SemanticFormElement`.
     *
     * In the `SemanticFormElement` element, the assigned fields are rendered in edit mode. In display mode,
     * a text is rendered that concatenates the values of all assigned fields. So the concatenated text needs
     * to be updated if the value of a control changes. If a control does not have a `value` property, the `SemanticFormElement`
     * element needs to know the propery it has to listen for changes.
     *
     * This is an optional method. If not defined, the `value` property or the `text` property is used to determine
     * the value.
     *
     * @returns Name of the value-holding property
     */
    getFormValueProperty?(): string;
  }

  /**
   * @SINCE 1.26
   *
   * Interface for the controls which are suitable to shrink.
   *
   * This means the control should still look fine when it gets smaller than its normal size, e.g. Text controls
   * which can show ellipsis in case of shrink.
   *
   * Note: This marker interface can be implemented by controls to give a hint to the container. The control
   * itself does not need to implement anything. A parent control that respects this interface will apply
   * the "flex-shrink" as a CSS property which determines how much the item will shrink relative to the rest
   * of the items in the container when negative free space is distributed.
   */
  export interface IShrinkable {
    __implements__sap_ui_core_IShrinkable: boolean;
  }

  /**
   * @SINCE 1.87
   *
   * Marker interface for controls that can be used in `content` aggregation of the `sap.m.Title` control.
   */
  export interface ITitleContent {
    __implements__sap_ui_core_ITitleContent: boolean;
  }

  /**
   * Marker interface for controls which are suitable for use as label.
   */
  export interface Label {
    __implements__sap_ui_core_Label: boolean;
  }

  /**
   * @SINCE 1.10
   *
   * Defines the different message types.
   */
  export enum MessageType {
    /**
     * Message is an error
     */
    Error = "Error",
    /**
     * Message should be just an information
     */
    Information = "Information",
    /**
     * Message has no specific level
     */
    None = "None",
    /**
     * Message is a success message
     */
    Success = "Success",
    /**
     * Message is a warning
     */
    Warning = "Warning",
  }
  /**
   * Defines the different possible states of an element that can be open or closed and does not only toggle
   * between these states, but also spends some time in between (e.g. because of an animation).
   */
  export enum OpenState {
    /**
     * Closed and currently not changing states.
     */
    CLOSED = "CLOSED",
    /**
     * Still open, but in the process of going to the CLOSED state.
     */
    CLOSING = "CLOSING",
    /**
     * Open and currently not changing states.
     */
    OPEN = "OPEN",
    /**
     * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.
     */
    OPENING = "OPENING",
  }
  /**
   * @SINCE 1.22
   *
   * Orientation of a UI element.
   */
  export enum Orientation {
    /**
     * Arrange Horizontally
     */
    Horizontal = "Horizontal",
    /**
     * Arrange Vertically
     */
    Vertical = "Vertical",
  }
  /**
   * A string type that represents a percentage value.
   */
  export type Percentage = string;

  /**
   * @SINCE 1.19.0
   *
   * Marker interface for controls that are not rendered "embedded" into other controls but need to be opened/closed.
   *
   * Such controls are handled differently during rendering.
   */
  export interface PopupInterface {
    __implements__sap_ui_core_PopupInterface: boolean;
  }

  /**
   * Priorities for general use.
   */
  export enum Priority {
    /**
     * High priority
     */
    High = "High",
    /**
     * Low priority
     */
    Low = "Low",
    /**
     * Medium priority
     */
    Medium = "Medium",
    /**
     * Default, none priority
     */
    None = "None",
  }
  /**
   * Actions are: Click on track, button, drag of thumb, or mouse wheel click.
   */
  export enum ScrollBarAction {
    /**
     * Scrolling done by dragging the scroll bar's paint thumb
     */
    Drag = "Drag",
    /**
     * Scrolling done by mouse wheel
     */
    MouseWheel = "MouseWheel",
    /**
     * Range scrolling caused by clicking track area or using page up or page down key.
     */
    Page = "Page",
    /**
     * Single step scrolling caused by clicking an arrow button or arrow key.
     */
    Step = "Step",
  }
  /**
   * Defines the possible values for horizontal and vertical scrolling behavior.
   */
  export enum Scrolling {
    /**
     * A scroll bar is shown if the content requires more space than the given space (rectangle) provides.
     */
    Auto = "Auto",
    /**
     * No scroll bar is shown, and the content stays in the given rectangle.
     */
    Hidden = "Hidden",
    /**
     * No scroll bar provided even if the content is larger than the available space.
     */
    None = "None",
    /**
     * A scroll bar is always shown even if the space is large enough for the current content.
     */
    Scroll = "Scroll",
  }
  /**
   * @SINCE 1.61.0
   *
   * Sort order of a column.
   */
  export enum SortOrder {
    /**
     * Sorting is done in ascending order.
     */
    Ascending = "Ascending",
    /**
     * Sorting is done in descending order.
     */
    Descending = "Descending",
    /**
     * Sorting is not applied.
     */
    None = "None",
  }
  /**
   * Configuration options for text alignments.
   */
  export enum TextAlign {
    /**
     * Locale-specific positioning at the beginning of the line.
     */
    Begin = "Begin",
    /**
     * Centered text alignment.
     */
    Center = "Center",
    /**
     * Locale-specific positioning at the end of the line.
     */
    End = "End",
    /**
     * @SINCE 1.26.0
     *
     * Sets no text align, so the browser default is used.
     */
    Initial = "Initial",
    /**
     * Hard option for left alignment.
     */
    Left = "Left",
    /**
     * Hard option for right alignment.
     */
    Right = "Right",
  }
  /**
   * Configuration options for the direction of texts.
   */
  export enum TextDirection {
    /**
     * Inherits the direction from its parent control/container.
     */
    Inherit = "Inherit",
    /**
     * Specifies left-to-right text direction.
     */
    LTR = "LTR",
    /**
     * Specifies right-to-left text direction.
     */
    RTL = "RTL",
  }
  /**
   * @SINCE 1.9.1
   *
   * Level of a title.
   */
  export enum TitleLevel {
    /**
     * The level of the title is choosen by the control rendering the title.
     */
    Auto = "Auto",
    /**
     * The Title is of level 1.
     */
    H1 = "H1",
    /**
     * The Title is of level 2
     */
    H2 = "H2",
    /**
     * The Title is of level 3
     */
    H3 = "H3",
    /**
     * The Title is of level 4
     */
    H4 = "H4",
    /**
     * The Title is of level 5
     */
    H5 = "H5",
    /**
     * The Title is of level 6
     */
    H6 = "H6",
  }
  /**
   * @SINCE 1.21.0
   *
   * Marker interface for toolbar controls.
   */
  export interface Toolbar {
    __implements__sap_ui_core_Toolbar: boolean;
  }

  /**
   * A string type that represents an RFC 3986 conformant URI.
   */
  export type URI = string;

  /**
   * @SINCE 1.0
   *
   * Marker for the correctness of the current value.
   * See:
   * 	{@link fiori:/how-to-use-semantic-colors/ Semantic Colors}
   */
  export enum ValueState {
    /**
     * State is not valid.
     */
    Error = "Error",
    /**
     * @SINCE 1.61
     *
     * State is informative.
     */
    Information = "Information",
    /**
     * State is not specified.
     */
    None = "None",
    /**
     * State is valid.
     */
    Success = "Success",
    /**
     * State is valid but with a warning.
     */
    Warning = "Warning",
  }
  /**
   * Configuration options for vertical alignments, for example of a layout cell content within the borders.
   */
  export enum VerticalAlign {
    /**
     * Content is aligned at the bottom.
     */
    Bottom = "Bottom",
    /**
     * Content respect the parent's vertical alignment.
     */
    Inherit = "Inherit",
    /**
     * Content is centered vertically .
     */
    Middle = "Middle",
    /**
     * Content is aligned at the top.
     */
    Top = "Top",
  }
  /**
   * Configuration options for text wrapping.
   */
  export enum Wrapping {
    /**
     * Inserts actual line breaks in the text at the wrap point.
     */
    Hard = "Hard",
    /**
     * The standard browser behavior is considered for wrapping.
     */
    None = "None",
    /**
     * Wrapping shall not be allowed.
     */
    Off = "Off",
    /**
     * The text is actually on the same line but displayed within several lines.
     */
    Soft = "Soft",
  }

  export namespace aria {
    /**
     * @SINCE 1.84
     *
     * Types of popups to set as aria-haspopup attribute. Most of the values (except "None") of the enumeration
     * are taken from the ARIA specification: https://www.w3.org/TR/wai-aria/#aria-haspopup
     */
    enum HasPopup {
      /**
       * Dialog popup type.
       */
      Dialog = "Dialog",
      /**
       * Grid popup type.
       */
      Grid = "Grid",
      /**
       * ListBox popup type.
       */
      ListBox = "ListBox",
      /**
       * Menu popup type.
       */
      Menu = "Menu",
      /**
       * None - the aria-haspopup attribute will not be rendered.
       */
      None = "None",
      /**
       * Tree popup type.
       */
      Tree = "Tree",
    }
  }

  export namespace dnd {
    /**
     * @SINCE 1.52.0
     *
     * Marker interface for drag configuration providing information about the source of the drag operation.
     */
    interface IDragInfo {
      __implements__sap_ui_core_dnd_IDragInfo: boolean;
    }

    /**
     * @SINCE 1.52.0
     *
     * Marker interface for drop configuration providing information about the target of the drop operation.
     */
    interface IDropInfo {
      __implements__sap_ui_core_dnd_IDropInfo: boolean;
    }

    /**
     * @SINCE 1.52.0
     *
     * Configuration options for visual drop effects that are given during a drag and drop operation.
     */
    enum DropEffect {
      /**
       * A copy of the source item is made at the new location.
       */
      Copy = "Copy",
      /**
       * A link is established to the source at the new location.
       */
      Link = "Link",
      /**
       * An item is moved to a new location.
       */
      Move = "Move",
      /**
       * The item cannot be dropped.
       */
      None = "None",
    }
    /**
     * @SINCE 1.52.0
     *
     * Configuration options for the layout of the droppable controls.
     */
    enum DropLayout {
      /**
       * Default {@link sap.ui.core.Element.extend layout} definition of the aggregations.
       */
      Default = "Default",
      /**
       * Droppable controls are arranged horizontally.
       */
      Horizontal = "Horizontal",
      /**
       * Droppable controls are arranged vertically.
       */
      Vertical = "Vertical",
    }
    /**
     * @SINCE 1.52.0
     *
     * Configuration options for drop positions.
     */
    enum DropPosition {
      /**
       * Drop between the controls.
       */
      Between = "Between",
      /**
       * Drop on the control.
       */
      On = "On",
      /**
       * Drop on the control or between the controls.
       */
      OnOrBetween = "OnOrBetween",
    }
    /**
     * @SINCE 1.100.0
     *
     * Drop positions relative to a dropped element.
     */
    enum RelativeDropPosition {
      /**
       * Drop after the control.
       */
      After = "After",
      /**
       * Drop before the control.
       */
      Before = "Before",
      /**
       * Drop on the control.
       */
      On = "On",
    }
  }

  export namespace mvc {
    /**
     * @SINCE 1.56.0
     *
     * Marker interface for a ControllerExtension.
     */
    interface IControllerExtension {
      __implements__sap_ui_core_mvc_IControllerExtension: boolean;
    }
  }

  export namespace routing {
    /**
     * Enumeration for different HistoryDirections.
     */
    enum HistoryDirection {
      /**
       * The page has already been navigated to and it was the predecessor of the previous page.
       */
      Backwards = "Backwards",
      /**
       * The page has already been navigated to and it was the successor of the previous page.
       */
      Forwards = "Forwards",
      /**
       * A new entry is added to the history.
       */
      NewEntry = "NewEntry",
      /**
       * A navigation took place, but it could be any of the other three states.
       */
      Unknown = "Unknown",
    }
  }
}

declare module "sap/ui/core/CustomStyleClassSupport" {
  /**
   * Applies the support for custom style classes on the prototype of a `sap.ui.core.Element`.
   *
   * All controls (subclasses of `sap.ui.core.Control`) provide the support custom style classes. The control
   * API provides functions to the application which allow it to add, remove or change style classes for the
   * control. In general, this option is not available for elements because elements do not necessarily have
   * a representation in the DOM.
   *
   * This function can be used by a control developer to explicitly enrich the API of his/her element implementation
   * with the API functions for the custom style class support. It must be called on the prototype of the
   * element.
   *
   * **Usage Example:**
   * ```javascript
   *
   * sap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {
   *    "use strict";
   *    var MyElement = Element.extend("my.MyElement", {
   *       metadata : {
   *          //...
   *       }
   *       //...
   *    });
   *
   *    CustomStyleClassSupport.apply(MyElement.prototype);
   *
   *    return MyElement;
   * }, true);
   * ```
   *
   *
   * The classes are written to the HTML automatically when using the {@link sap.ui.core.RenderManager Semantic
   * Rendering API}. To ensure that the classes are written to the HTML with the traditional string-based
   * rendering, when writing the root tag of the element you must call the function `oRenderManager.writeClasses(oElement);`
   * ({@link sap.ui.core.RenderManager#writeClasses}) within the renderer of the control to which the element
   * belongs.
   *
   * This function adds the following functions to the elements prototype:
   * 	 - `addStyleClass`: {@link sap.ui.core.Control#addStyleClass}
   * 	 - `removeStyleClass`: {@link sap.ui.core.Control#removeStyleClass}
   * 	 - `toggleStyleClass`: {@link sap.ui.core.Control#toggleStyleClass}
   * 	 - `hasStyleClass`: {@link sap.ui.core.Control#hasStyleClass}  In addition the clone function of
   * 			the element is extended to ensure that the custom style classes are also available on the cloned element.
   *
   * **Note:** This function can only be used within control development. An application cannot add
   * style class support on existing elements by calling this function.
   */
  export default function CustomStyleClassSupport(): void;
}

declare module "sap/ui/core/AppCacheBuster" {
  /**
   * The AppCacheBuster is used to hook into URL relevant functions in jQuery and SAPUI5 and rewrite the URLs
   * with a timestamp segment. The timestamp information is fetched from the server and used later on for
   * the URL rewriting.
   */
  interface AppCacheBuster {
    /**
     * Converts the given URL if it matches a URL in the cachebuster index. If not then the same URL will be
     * returned. To prevent URLs from being modified by the application cachebuster you can implement the function
     * `sap.ui.core.AppCacheBuster.handleURL`.
     *
     * @returns modified URL when matching the index or unmodified when not
     */
    convertURL(
      /**
       * any URL
       */
      sUrl: string
    ): string;
    /**
     * Callback function which can be overwritten to programmatically decide whether to rewrite the given URL
     * or not.
     *
     * @returns `true` to rewrite or `false` to ignore
     */
    handleURL(
      /**
       * any URL
       */
      sUrl: string
    ): boolean;
    /**
     * Normalizes the given URL and make it absolute.
     *
     * @returns normalized URL
     */
    normalizeURL(
      /**
       * any URL
       */
      sUrl: string
    ): string;
    /**
     * Registers an application. Loads the cachebuster index file from this locations. All registered files
     * will be considered by the cachebuster and the URLs will be prefixed with the timestamp of the index file.
     */
    register(
      /**
       * base URL of an application providing a cachebuster index file
       */
      sBaseUrl: string
    ): void;
  }
  const AppCacheBuster: AppCacheBuster;
  export default AppCacheBuster;
}

declare module "sap/ui/core/BusyIndicator" {
  /**
   * Provides methods to show or hide a waiting animation covering the whole page and blocking user interaction.
   */
  interface BusyIndicator {
    /**
     * Registers a handler for the {@link #event:Close Close} event.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to `sap.ui.core.BusyIndicator`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to `sap.ui.core.BusyIndicator`
       */
      oListener?: object
    ): this;
    /**
     * Registers a handler for the {@link #event:Open Open} event.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to `sap.ui.core.BusyIndicator`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to `sap.ui.core.BusyIndicator`
       */
      oListener?: object
    ): this;
    /**
     * Unregisters a handler from the {@link #event:Close Close} event.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClose(
      /**
       * The callback function to unregister
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Unregisters a handler from the {@link #event:Open Open} event.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachOpen(
      /**
       * The callback function to unregister
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Removes the BusyIndicator from the screen.
     */
    hide(): void;
    /**
     * Displays the `BusyIndicator` and starts blocking all user input. This only happens after some delay,
     * and if, after that delay, the `BusyIndicator.hide()` has not yet been called in the meantime.
     *
     * There is a certain default value for the delay, which can be overridden.
     */
    show(
      /**
       * The delay in milliseconds before opening the `BusyIndicator`; It is not opened if `hide()` is called
       * before the delay ends. If no delay (or no valid delay) is given, a delay of 1000 milliseconds is used.
       */
      iDelay?: int
    ): void;
  }
  const BusyIndicator: BusyIndicator;
  export default BusyIndicator;
}

declare module "sap/ui/core/CalendarType" {
  /**
   * The types of `Calendar`.
   */
  enum CalendarType {
    /**
     * The Thai buddhist calendar
     */
    Buddhist = "Buddhist",
    /**
     * The Gregorian calendar
     */
    Gregorian = "Gregorian",
    /**
     * The Islamic calendar
     */
    Islamic = "Islamic",
    /**
     * The Japanese emperor calendar
     */
    Japanese = "Japanese",
    /**
     * The Persian Jalali calendar
     */
    Persian = "Persian",
  }
  export default CalendarType;
}

declare module "sap/ui/core/CommandExecution" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.70
   */
  export default class CommandExecution extends UI5Element {
    /**
     * Creates and initializes a new CommandExecution.
     *
     * The CommandExecution registers a shortcut when it is added to the dependent aggregation of a control.
     * The shortcut information is retrieved from the owner components manifest (`/sap.ui5/commands/<command>`).
     *
     * You can use a CommandExecution instead of an event handler in XMLViews by using `cmd:` plus the command
     * name.
     *
     * Example for `sap.m.Button`:
     *
     *
     * ```javascript
     *
     * <Button press="cmd:MyCommand" />
     * ```
     *
     *
     * When the press event is fired, the CommandExecution will be triggered and the `execute` event is fired.
     *
     * When using commands, the component will create a model named `$cmd`. The model data provides the enabled
     * and visible state of all CommandExecutions. With that, action-triggering controls (e.g. a button) can
     * be bound to the enable/visible property of the CommandExecution to centrally control their state.
     *
     * **Note: The usage of the `$cmd` model is restricted to `sap.suite.ui.generic`**
     *
     * When binding a button's enabled state to this model, it follows the enabled state of the CommandExecution.
     * The binding path must be relative like `myCommand/enabled`:
     *
     *
     * ```javascript
     *
     * <Button press="cmd:MyCommand" enabled="$cmd>MyCommand/enabled" />
     * ```
     *
     *
     * A CommandExecution can have three states:
     * 	 - the CommandExecution is visible and enabled. If the configured shortcut is executed, the configured
     * 			event handler of this CommandExecution is called
     * 	 - the CommandExecution is visible but not enabled. If the configured shortcut is executed, neither
     * 			the configured event handler of this CommandExecution nor any event handler configured on CommandExecutions
     * 			in the ancestor chain is called
     * 	 - the CommandExecution is not visible. If the configured shortcut is executed, the configured event
     * 			handler of this CommandExecution is not called, but the event is propagated to its parent, which can
     * 			then handle the event by a configured CommandExecution or propagate the event to its parent, until no
     * 			parent exits anymore and the browser can handle the executed shortcut
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.CommandExecution with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CommandExecution>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.CommandExecution.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:execute execute} event of this `sap.ui.core.CommandExecution`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.CommandExecution` itself.
     *
     * Execute will be fired when the CommandExecution will be triggered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachExecute(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.CommandExecution` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:execute execute} event of this `sap.ui.core.CommandExecution`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.CommandExecution` itself.
     *
     * Execute will be fired when the CommandExecution will be triggered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachExecute(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.CommandExecution` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:execute execute} event of this `sap.ui.core.CommandExecution`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachExecute(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:execute execute} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireExecute(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getCommand command}.
     *
     * The command's name, that has to be defined in the manifest. This property can only be applied initially.
     *
     * @returns Value of property `command`
     */
    getCommand(): string;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Whether the CommandExecution is enabled or not. By default, it is enabled. If the CommandExecution is
     * disabled, the CommandExecution processes the event, but the event handler for it will not be called.
     * Therefore, also no event handler configured on CommandExecutions on ancestors is called.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the CommandExecution is visible, or not. By default, it is visible. If not visible, the CommandExecution
     * won't process the event, and the event handler for it will not be called, regardless of the enabled state.
     * Therefore, the configured event handler on the next CommandExecution in the ancestor chain or, if no
     * ancestor in the ancestor chain has any CommandExecutions configured for this shortcut, the event handler
     * of the browser is called.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets whether the `CommandExecution` is enabled, or not. If set to false, the `CommandExecution` will
     * still register the shortcut. This will block any configured CommandExecutions on any ancestors for that
     * shortcut.
     *
     * @returns The CommandExecution
     */
    setEnabled(
      /**
       * Whether the CommandExecution is enabled, or not.
       */
      bValue: boolean
    ): UI5Element;
    /**
     * Sets whether the `CommandExecution` is visible, or not. If set to false, the `CommandExecution` will
     * unregister the shortcut. If not visible, the CommandExecution will not be triggered even if it is enabled.
     *
     * @returns The CommandExecution
     */
    setVisible(
      /**
       * Whether the CommandExecution is visible, or not.
       */
      bValue: boolean
    ): UI5Element;
    /**
     * Fires the execute event and triggers the attached handler. If the CommandExecution is disabled, the handler
     * will not be triggered.
     */
    trigger(): void;
  }

  export interface $CommandExecutionSettings extends $ElementSettings {
    /**
     * The command's name, that has to be defined in the manifest. This property can only be applied initially.
     */
    command?: string | PropertyBindingInfo;

    /**
     * Whether the CommandExecution is enabled or not. By default, it is enabled. If the CommandExecution is
     * disabled, the CommandExecution processes the event, but the event handler for it will not be called.
     * Therefore, also no event handler configured on CommandExecutions on ancestors is called.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Whether the CommandExecution is visible, or not. By default, it is visible. If not visible, the CommandExecution
     * won't process the event, and the event handler for it will not be called, regardless of the enabled state.
     * Therefore, the configured event handler on the next CommandExecution in the ancestor chain or, if no
     * ancestor in the ancestor chain has any CommandExecutions configured for this shortcut, the event handler
     * of the browser is called.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Execute will be fired when the CommandExecution will be triggered.
     */
    execute?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/Component" {
  import {
    default as ManagedObject,
    MetadataOptions as MetadataOptions1,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import { ID } from "sap/ui/core/library";

  import EventBus from "sap/ui/core/EventBus";

  import Manifest from "sap/ui/core/Manifest";

  import ComponentMetadata from "sap/ui/core/ComponentMetadata";

  /**
   * @SINCE 1.9.2
   *
   * Base Class for Components. Components are independent and reusable parts of UI5 applications. They facilitate
   * the encapsulation of closely related parts of an application, thus enabling developers to structure and
   * maintain their applications more easily.
   */
  export default class Component extends ManagedObject {
    /**
     * Creates and initializes a new Component with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there. See {@link sap.ui.core.Component} for a general description of this argument.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor
     * sap.ui.base.ManagedObject} can be used.
     */
    constructor(
      /**
       * Optional object with initial settings for the new Component instance
       */
      mSettings?: $ComponentSettings
    );
    /**
     * Creates and initializes a new Component with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there. See {@link sap.ui.core.Component} for a general description of this argument.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor
     * sap.ui.base.ManagedObject} can be used.
     */
    constructor(
      /**
       * Optional ID for the new control; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new Component instance
       */
      mSettings?: $ComponentSettings
    );

    /**
     * @SINCE 1.56.0
     *
     * Asynchronously creates a new component instance from the given configuration.
     *
     * If the component class does not already exists, the component class is loaded and afterwards the new
     * component instance is created.
     *
     * To optimize the loading process, additional `asyncHints` can be provided. The structure of these hints
     * and how they impact the loading of components is an internal feature of this API and reserved for UI5
     * internal use only. Code that wants to be safe wrt. version updates, should not use the `asyncHints` property.
     *
     * If Components and/or libraries are listed in the `asyncHints`, all the corresponding preload files will
     * be requested in parallel, loading errors (404s) will be ignored. The constructor class will only be required
     * after all preloads have been rejected or resolved. Only then, the new instance will be created.
     *
     * A component can implement the {@link sap.ui.core.IAsyncContentCreation} interface. Please see the respective
     * documentation for more information.
     *
     * @returns A Promise that resolves with the newly created component instance
     */
    static create(
      /**
       * Configuration options
       */
      mOptions: {
        /**
         * Name of the component to load, this is the dot-separated name of the package that contains the Component.js
         * module; Even when an alternative location is specified from which the manifest should be loaded (`mOptions.manifest`
         * is set to a non-empty string), then the name specified in that manifest will be ignored and this name
         * will be used instead to determine the module to be loaded.
         */
        name: string;
        /**
         * Alternative location from where to load the Component. If `mOptions.manifest` is set to a non-empty string,
         * this URL specifies the location of the final component defined via that manifest, otherwise it specifies
         * the location of the component defined via its name `mOptions.name`.
         */
        url?: string;
        /**
         * Initial data of the Component, see {@link sap.ui.core.Component#getComponentData}.
         */
        componentData?: object;
        /**
         * ID of the new Component
         */
        id?: ID;
        /**
         * List of active terminologies. The order of the given active terminologies is significant. The {@link
         * module:sap/base/i18n/ResourceBundle ResourceBundle} API documentation describes the processing behavior
         * in more detail. Please have a look at this dev-guide chapter for general usage instructions: {@link topic:eba8d25a31ef416ead876e091e67824e
         * Text Verticalization}.
         */
        activeTerminologies?: string[];
        /**
         * Settings of the new Component
         */
        settings?: object;
        /**
         * Whether and from where to load the manifest.json for the Component. When set to any truthy value, the
         * manifest will be loaded and evaluated before the Component controller. If it is set to a falsy value,
         * the manifest will not be evaluated before the controller. It might still be loaded synchronously if declared
         * in the Component metadata. A non-empty string value will be interpreted as the URL to load the manifest
         * from. If the manifest could not be loaded from a given URL, the Promise returned by the Component.create
         * factory rejects. A non-null object value will be interpreted as manifest content.
         */
        manifest?: boolean | string | object;
        /**
         * @since 1.61.0 Alternative URL for the manifest.json. If `mOptions.manifest` is set to an object value,
         * this URL specifies the location to which the manifest object should resolve the relative URLs to.
         */
        altManifestUrl?: string;
        /**
         * If set to `true` validation of the component is handled by the `MessageManager`
         */
        handleValidation?: string;
        /**
         * Hints for asynchronous loading. **Beware:** This parameter is only used internally by the UI5 framework
         * and compatibility cannot be guaranteed. The parameter must not be used in productive code, except in
         * code delivered by the UI5 teams.
         */
        asyncHints?: {
          /**
           * a list of components needed by the current component and its subcomponents The framework will try to
           * preload these components (their Component-preload.js) asynchronously, errors will be ignored. Please
           * note that the framework has no knowledge about whether a Component provides a preload file or whether
           * it is bundled in some library preload. If Components are listed in the hints section, they will be preloaded.
           * Instead of specifying just the names of components, an object might be given that contains a mandatory
           * `name` property and optionally, an `url` that will be used for a `registerModulePath`, and/or a `lazy`
           * property. When `lazy` is set to a truthy value, only a necessary `registerModulePath` will be executed,
           * but the corresponding component won't be preloaded.
           */
          components?: string[] | object[];
          /**
           * libraries needed by the Component and its subcomponents These libraries should be (pre-)loaded before
           * the Component. The framework will asynchronously load those libraries, if they're not loaded yet. Instead
           * of specifying just the names of libraries, an object might be given that contains a mandatory `name`
           * property and optionally, an `url` that will be used for a `registerModulePath`, and/or a `lazy` property.
           * When `lazy` is set to a truthy value, only a necessary `registerModulePath` will be executed, but the
           * corresponding library won't be preloaded.
           */
          libs?: string[] | object[];
          /**
           * a list of additional preload bundles The framework will try to load these bundles asynchronously before
           * requiring the Component, errors will be ignored. The named modules must only represent preload bundles.
           * If they are normal modules, their dependencies will be loaded with the normal synchronous request mechanism
           * and performance might degrade. Instead of specifying just the names of preload bundles, an object might
           * be given that contains a mandatory `name` property and optionally, an `url` that will be used for a `registerModulePath`.
           */
          preloadBundles?: string[] | object[];
          /**
           * `Promise` or array of `Promise`s for which the Component instantiation should wait
           */
          waitFor?: Promise<any> | Array<Promise<any>>;
        };
      }
    ): Promise<Component>;
    /**
     * Creates a new subclass of class `sap.ui.core.Component` with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend},
     * plus the `manifest` property in the 'metadata' object literal, indicating that the component configuration
     * should be read from a manifest.json file.
     *
     * @returns The created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Qualified name of the newly created class
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Component>,
      /**
       * Constructor function for the metadata object. If not given, it defaults to an internal subclass of `sap.ui.core.ComponentMetadata`.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.56.0
     *
     * Returns an existing component instance, identified by its ID.
     *
     * @returns Component instance or `undefined` when no component with the given ID exists.
     */
    static get(
      /**
       * ID of the component.
       */
      sId: string
    ): Component | undefined;
    /**
     * Returns the metadata for the Component class.
     *
     * @returns Metadata for the Component class.
     */
    static getMetadata(): ComponentMetadata;
    /**
     * @SINCE 1.25.1
     *
     * Returns the Component instance in whose "context" the given ManagedObject has been created or `undefined`.
     *
     * This is a convenience wrapper around {@link sap.ui.core.Component.getOwnerIdFor Component.getOwnerIdFor}.
     * If the owner ID cannot be determined for reasons documented on `getOwnerForId` or when the Component
     * for the determined ID no longer exists, `undefined` will be returned.
     *
     * @returns the owner Component or `undefined`.
     */
    static getOwnerComponentFor(
      /**
       * Object to retrieve the owner Component for
       */
      oObject: ManagedObject
    ): Component | undefined;
    /**
     * @SINCE 1.15.1
     *
     * Returns the ID of the object in whose "context" the given ManagedObject has been created.
     *
     * For objects that are not ManagedObjects or for which the owner is unknown, `undefined` will be returned
     * as owner ID.
     *
     * **Note**: Ownership for objects is only checked by the framework at the time when they are created. It
     * is not checked or updated afterwards. And it can only be detected while the {@link sap.ui.core.Component#runAsOwner
     * Component.runAsOwner} function is executing. Without further action, this is only the case while the
     * content of a UIComponent is {@link sap.ui.core.UIComponent#createContent constructed} or when a {@link
     * sap.ui.core.routing.Router Router} creates a new View and its content.
     *
     * **Note**: This method does not guarantee that the returned owner ID belongs to a Component. Currently,
     * it always does. But future versions of UI5 might introduce a more fine grained ownership concept, e.g.
     * taking Views into account. Callers that want to deal only with components as owners, should use the following
     * method: {@link sap.ui.core.Component.getOwnerComponentFor Component.getOwnerComponentFor}. It guarantees
     * that the returned object (if any) will be a Component.
     *
     * **Further note** that only the ID of the owner is recorded. In rare cases, when the lifecycle of a ManagedObject
     * is not bound to the lifecycle of its owner, (e.g. by the means of aggregations), then the owner might
     * have been destroyed already whereas the ManagedObject is still alive. So even the existence of an owner
     * ID is not a guarantee for the existence of the corresponding owner.
     *
     * @returns ID of the owner or `undefined`
     */
    static getOwnerIdFor(
      /**
       * Object to retrieve the owner ID for
       */
      oObject: ManagedObject
    ): string | undefined;
    /**
     * @SINCE 1.56.0
     *
     * Asynchronously loads a component class without instantiating it; returns a promise on the loaded class.
     *
     * Beware: "Asynchronous component loading" doesn't necessarily mean that no more synchronous loading occurs.
     * Both the framework as well as component implementations might still execute synchronous requests. `Component.load`
     * just allows to use async calls internally.
     *
     * When a manifest is referenced in `mOptions`, this manifest is not automatically used for instances of
     * the Component class that are created after loading. The manifest or the manifest url must be provided
     * for every instance explicitly.
     *
     * To optimize the loading process, additional `asyncHints` can be provided. If components and/or libraries
     * are listed in the `asyncHints`, all the corresponding preload files will be requested in parallel, loading
     * errors (404s) will be ignored. The constructor class will only be required after all preloads have been
     * rejected or resolved. The structure of the hints and how they impact the loading of components is an
     * internal feature of this API and reserved for UI5 internal use only. Code that wants to be safe wrt.
     * version updates, should not use the `asyncHints` property.
     *
     * @returns A Promise that resolves with the loaded component class or `undefined` in case `mOptions.asyncHints.preloadOnly`
     * is set to `true`
     */
    static load(
      /**
       * Configuration options
       */
      mOptions: {
        /**
         * Name of the Component to load, as a dot-separated name; Even when an alternative location is specified
         * from which the manifest should be loaded (`mOptions.manifest` is set to a non-empty string), then the
         * name specified in that manifest will be ignored and this name will be used instead to determine the module
         * to be loaded.
         */
        name: string;
        /**
         * Alternative location from where to load the Component. If `mOptions.manifest` is set to a non-empty string,
         * this URL specifies the location of the final component defined via that manifest, otherwise it specifies
         * the location of the component defined via its name `mOptions.name`.
         */
        url?: string;
        /**
         * Whether and from where to load the manifest.json for the Component. When set to a truthy value, the manifest
         * will be loaded and evaluated **before** the Component controller. When set to a falsy value, the manifest
         * will be loaded and evaluated **after** the Component controller. A non-empty string value will be interpreted
         * as the URL to load the manifest from. This implies that the manifest is loaded and evaluated **before**
         * the Component controller. A non-null object value will be interpreted as manifest content.
         */
        manifest?: boolean | string | object;
        /**
         * @since 1.61.0 Alternative URL for the manifest.json. If `mOptions.manifest` is set to an object value,
         * this URL specifies the location to which the manifest object should resolve the relative URLs to.
         */
        altManifestUrl?: string;
        /**
         * Hints for asynchronous loading. **Beware:** This parameter is only used internally by the UI5 framework
         * and compatibility cannot be guaranteed. The parameter must not be used in productive code, except in
         * code delivered by the UI5 teams.
         */
        asyncHints?: {
          /**
           * a list of components needed by the current component and its subcomponents The framework will try to
           * preload these components (their Component-preload.js) asynchronously, errors will be ignored. Please
           * note that the framework has no knowledge about whether a Component provides a preload file or whether
           * it is bundled in some library preload. If Components are listed in the hints section, they will be preloaded.
           * Instead of specifying just the names of components, an object might be given that contains a mandatory
           * `name` property and optionally, an `url` that will be used for a `registerModulePath`, and/or a `lazy`
           * property. When `lazy` is set to a truthy value, only a necessary `registerModulePath` will be executed,
           * but the corresponding component won't be preloaded.
           */
          components?: string[] | object[];
          /**
           * libraries needed by the Component and its subcomponents These libraries should be (pre-)loaded before
           * the Component. The framework will asynchronously load those libraries, if they're not loaded yet. Instead
           * of specifying just the names of libraries, an object might be given that contains a mandatory `name`
           * property and optionally, an `url` that will be used for a `registerModulePath`, and/or a `lazy` property.
           * When `lazy` is set to a truthy value, only a necessary `registerModulePath` will be executed, but the
           * corresponding library won't be preloaded.
           */
          libs?: string[] | object[];
          /**
           * a list of additional preload bundles The framework will try to load these bundles asynchronously before
           * requiring the component, errors will be ignored. The named modules must only represent preload bundles.
           * If they are normal modules, their dependencies will be loaded with the standard module loading mechanism
           * and performance might degrade. Instead of specifying just the names of preload bundles, an object might
           * be given that contains a mandatory `name` property and, optionally, a `url` that will be used for a `registerModulePath`.
           */
          preloadBundles?: string[] | object[];
          /**
           * Whether only the preloads should be done, but not the loading of the Component controller class itself.
           */
          preloadOnly?: boolean;
        };
      }
    ): Promise<Function>;
    /**
     * @SINCE 1.47.0
     *
     * Creates a nested component that is declared in the `sap.ui5/componentUsages` section of the descriptor
     * (manifest.json). The following snippet shows the declaration:
     * ```javascript
     *
     * {
     *   [...]
     *   "sap.ui5": {
     *     "componentUsages": {
     *       "myUsage": {
     *         "name": "my.useful.Component"
     *       }
     *     }
     *   }
     *   [...]
     * }
     * ```
     *  The syntax of the configuration object of the component usage matches the configuration object of the
     * {#link sap.ui.component} factory function.
     *
     * This is an example of how the `createComponent` function can be used for asynchronous scenarios:
     * ```javascript
     *
     * oComponent.createComponent("myUsage").then(function(oComponent) {
     *   oComponent.doSomething();
     * }).catch(function(oError) {
     *   Log.error(oError);
     * });
     * ```
     *
     *
     * The following example shows how `createComponent` can be used to create a nested component by providing
     * specific properties like `id`, `async`, `settings`, or `componentData`:
     * ```javascript
     *
     * var oComponent = oComponent.createComponent({
     *   usage: "myUsage",
     *   id: "myId",
     *   settings: { ... },
     *   componentData: { ... }
     * });
     * ```
     *  The allowed list of properties are defined in the parameter documentation of this function.
     *
     * The properties can also be defined in the descriptor. These properties can be overwritten by the local
     * properties of that function.
     *
     * @returns Component instance or Promise which will be resolved with the component instance (defaults to
     * Promise / asynchronous behavior)
     */
    createComponent(
      /**
       * ID of the component usage or the configuration object that creates the component
       */
      vUsage:
        | string
        | {
            /**
             * ID of component usage
             */
            usage: string;
            /**
             * ID of the nested component that is prefixed with `autoPrefixId`
             */
            id?: string;
            /**
             * Indicates whether the component creation is done asynchronously (You should use synchronous creation
             * only if really necessary, because this has a negative impact on performance.)
             */
            async?: boolean;
            /**
             * Settings for the nested component like for {#link sap.ui.component} or the component constructor
             */
            settings?: object;
            /**
             * Initial data of the component (@see sap.ui.core.Component#getComponentData)
             */
            componentData?: object;
          }
    ): Component | Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Cleans up the Component instance before destruction.
     *
     * Applications must not call this hook method directly, it is called by the framework when the element
     * is {@link #destroy destroyed}.
     *
     * Subclasses of Component should override this hook to implement any necessary cleanup.
     */
    exit(): void;
    /**
     * @SINCE 1.76
     *
     * Returns the list of active terminologies. See the {@link sap.ui.core.Component.create Component.create}
     * factory API documentation for more detail.
     *
     * @returns List of active terminologies
     */
    getActiveTerminologies(): string[] | undefined;
    /**
     * @SINCE 1.15.0
     *
     * Returns user specific data object
     *
     * @returns componentData
     */
    getComponentData(): object;
    /**
     * @SINCE 1.20.0
     *
     * Returns the event bus of this component.
     *
     * @returns the event bus
     */
    getEventBus(): EventBus;
    /**
     * Components don't have a facade and therefore return themselves as their interface.
     * See:
     * 	sap.ui.base.Object#getInterface
     *
     * @returns `this` as there's no facade for components
     */
    getInterface(): this;
    /**
     * @SINCE 1.33.0
     *
     * Returns the manifest defined in the metadata of the component. If not specified, the return value is
     * null.
     *
     * @returns manifest.
     */
    getManifest(): object;
    /**
     * @SINCE 1.33.0
     *
     * Returns the configuration of a manifest section or the value for a specific path. If no section or key
     * is specified, the return value is null.
     *
     * Example: ` { "sap.ui5": { "dependencies": { "libs": { "sap.m": {} }, "components": { "my.component.a":
     * {} } } }); `
     *
     * The configuration above can be accessed in the following ways:
     * 	 - **By section/namespace**: `oComponent.getManifestEntry("sap.ui5")`
     * 	 - **By path**: `oComponent.getManifestEntry("/sap.ui5/dependencies/libs")`
     *
     * By section/namespace returns the configuration for the specified manifest section and by path allows
     * to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with
     * a slash (/).
     *
     * @returns Value of the manifest section or the key (could be any kind of value)
     */
    getManifestEntry(
      /**
       * Either the manifest section name (namespace) or a concrete path
       */
      sKey: string
    ): any | null;
    /**
     * @SINCE 1.33.0
     *
     * Returns the manifest object.
     *
     * @returns manifest.
     */
    getManifestObject(): Manifest;
    /**
     * Returns the metadata for the specific class of the current instance.
     *
     * @returns Metadata for the specific class of the current instance.
     */
    getMetadata(): ComponentMetadata;
    /**
     * @SINCE 1.37.0
     *
     * Returns a service interface for the {@link sap.ui.core.service.Service Service} declared in the descriptor
     * for components (manifest.json). The declaration needs to be done in the `sap.ui5/services` section as
     * follows:
     * ```javascript
     *
     * {
     *   [...]
     *   "sap.ui5": {
     *     "services": {
     *       "myLocalServiceAlias": {
     *         "factoryName": "my.ServiceFactory",
     *         ["optional": true]
     *       }
     *     }
     *   }
     *   [...]
     * }
     * ```
     *  The service declaration is used to define a mapping between the local alias for the service that can
     * be used in the Component and the name of the service factory which will be used to create a service instance.
     *
     * The `getService` function will look up the service factory and will create a new instance by using the
     * service factory function {@link sap.ui.core.service.ServiceFactory#createInstance createInstance} The
     * optional property defines that the service is not mandatory and the usage will not depend on the availability
     * of this service. When requesting an optional service the `getService` function will reject but there
     * will be no error logged in the console.
     *
     * When creating a new instance of the service the Component context will be passed as `oServiceContext`
     * as follows:
     * ```javascript
     *
     * {
     *   "scopeObject": this,     // the Component instance
     *   "scopeType": "component" // the stereotype of the scopeObject
     * }
     * ```
     *
     *
     * The service will be created only once per Component and reused in future calls to the `getService` function.
     *  This function will return a `Promise` which provides the service interface when resolved. If the
     * `factoryName` could not be found in the {@link sap.ui.core.service.ServiceFactoryRegistry Service Factory
     * Registry} or the service declaration in the descriptor for components (manifest.json) is missing the
     * Promise will reject.
     *
     * This is an example of how the `getService` function can be used:
     * ```javascript
     *
     * oComponent.getService("myLocalServiceAlias").then(function(oService) {
     *   oService.doSomething();
     * }).catch(function(oError) {
     *   Log.error(oError);
     * });
     * ```
     *
     *
     * @returns Promise which will be resolved with the Service interface
     */
    getService(
      /**
       * Local service alias as defined in the manifest.json
       */
      sLocalServiceAlias: string
    ): Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initializes the Component instance after creation.
     *
     * Applications must not call this hook method directly, it is called by the framework while the constructor
     * of a Component is executed.
     *
     * Subclasses of Component should override this hook to implement any necessary initialization.
     */
    init(): void;
    /**
     * @SINCE 1.88
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called after the component is activated
     */
    onActivate(): void;
    /**
     * @SINCE 1.15.1
     *
     * The hook which gets called when the static configuration of the component has been changed by some configuration
     * extension.
     */
    onConfigChange(
      /**
       * Error message.
       */
      sConfigKey: string
    ): void;
    /**
     * @SINCE 1.88
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called after the component is deactivated
     */
    onDeactivate(): void;
    /**
     * @SINCE 1.15.1
     *
     * The window before unload hook. Override this method in your Component class implementation, to handle
     * cleanup before the real unload or to prompt a question to the user, if the component should be exited.
     *
     * @returns a string if a prompt should be displayed to the user confirming closing the Component (e.g.
     * when the Component is not yet saved), or `undefined` if no prompt should be shown.
     */
    onWindowBeforeUnload(): string | undefined;
    /**
     * @SINCE 1.15.1
     *
     * The window error hook. Override this method in your Component class implementation to listen to unhandled
     * errors.
     */
    onWindowError(
      /**
       * The error message.
       */
      sMessage: string,
      /**
       * File where the error occurred
       */
      sFile: string,
      /**
       * Line number of the error
       */
      iLine: int
    ): void;
    /**
     * @SINCE 1.15.1
     *
     * The window unload hook. Override this method in your Component class implementation, to handle cleanup
     * of the component once the window will be unloaded (e.g. closed).
     */
    onWindowUnload(): void;
    /**
     * @SINCE 1.25.1
     *
     * Calls the function `fn` once and marks all ManagedObjects created during that call as "owned" by this
     * Component.
     *
     * Nested calls of this method are supported (e.g. inside a newly created, nested component). The currently
     * active owner Component will be remembered before executing `fn` and restored afterwards.
     *
     * @returns result of function `fn`
     */
    runAsOwner(
      /**
       * Function to execute
       */
      fn: Function
    ): any;
  }
  /**
   * The structure of the "metadata" object which is passed when inheriting from sap.ui.core.Component using
   * its static "extend" method. See {@link sap.ui.core.Component.extend} for details on its usage.
   */
  export type MetadataOptions = MetadataOptions1 & {
    /**
     * When set to the string literal "json", this property indicates that the component configuration should
     * be read from a manifest.json file which is assumed to exist next to the Component.js file.
     */
    manifest?: "json";
  };

  /**
   * @SINCE 1.67
   *
   * Registry of all `Component`s that currently exist.
   */
  export interface registry {
    /**
     * Number of existing components.
     */
    size: int;

    /**
     * Return an object with all instances of `sap.ui.core.Component`, keyed by their ID.
     *
     * Each call creates a new snapshot object. Depending on the size of the UI, this operation therefore might
     * be expensive. Consider to use the `forEach` or `filter` method instead of executing similar operations
     * on the returned object.
     *
     * **Note**: The returned object is created by a call to `Object.create(null)`, and therefore lacks all
     * methods of `Object.prototype`, e.g. `toString` etc.
     *
     * @returns Object with all components, keyed by their ID
     */
    all(): Record<ID, Component>;
    /**
     * Returns an array with components for which the given `callback` returns a value that coerces to `true`.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oComponent, sID)
     * ```
     *  where `oComponent` is the currently visited component instance and `sID` is the ID of that instance.
     *
     * If components are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When a component is destroyed during the filtering and was
     * not visited yet, it might or might not be visited. As the behavior for such concurrent modifications
     * is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     *
     * This function returns an array with all components matching the given predicate. The order of the components
     * in the array is not specified and might change between calls (over time and across different versions
     * of UI5).
     *
     * @returns Array of components matching the predicate; order is undefined and might change in newer versions
     * of UI5
     */
    filter(
      /**
       * predicate against which each Component is tested
       */
      callback: (p1: Component, p2: ID) => boolean,
      /**
       * context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): Component[];
    /**
     * Calls the given `callback` for each existing component.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oComponent, sID)
     * ```
     *  where `oComponent` is the currently visited component instance and `sID` is the ID of that instance.
     *
     * The order in which the callback is called for components is not specified and might change between calls
     * (over time and across different versions of UI5).
     *
     * If components are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When a component is destroyed during the filtering and was
     * not visited yet, it might or might not be visited. As the behavior for such concurrent modifications
     * is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     */
    forEach(
      /**
       * Function to call for each Component
       */
      callback: (p1: Component, p2: ID) => void,
      /**
       * Context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): void;
    /**
     * Retrieves a Component by its ID.
     *
     * When the ID is `null` or `undefined` or when there's no Component with the given ID, then `undefined`
     * is returned.
     *
     * @returns Component with the given ID or `undefined`
     */
    get(
      /**
       * ID of the Component to retrieve
       */
      id: ID
    ): Component | undefined;
  }
  export const registry: registry;

  export interface $ComponentSettings extends $ManagedObjectSettings {}
}

declare module "sap/ui/core/ComponentContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IPlaceholderSupport,
    ID,
    CSSSize,
    ComponentLifecycle,
    URI,
  } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import UIComponent from "sap/ui/core/UIComponent";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Container that embeds a `sap/ui/core/UIComponent` in a control tree.
   *
   * **Concerning asynchronous component loading:**
   *
   * To activate a fully asynchronous loading behavior of components and their dependencies, the property
   * `async` needs to be set to `true` and the `manifest` property needs to be set to a 'truthy' value, e.g.
   * `true` or a URL to the manifest location. If both options are correctly set, the component factory will
   * load and evaluate the component manifest first. In this way, the additional dependencies of the Component
   * are already known before the Component preload/controller is loaded. Both the component preload/controller
   * and the additional dependencies can thus be loaded asynchronously and in parallel.
   *
   * Sample usage of the ComponentContainer:
   *
   *
   * ```javascript
   *
   *     <!-- inside XML view -->
   *     ...
   *     <core:ComponentContainer
   *         usage="someComponent"
   *         manifest="true"
   *         async="true"
   *     />
   * ```
   *
   *
   * See also {@link module:sap/ui/core/ComponentSupport}.
   */
  export default class ComponentContainer
    extends Control
    implements IPlaceholderSupport {
    __implements__sap_ui_core_IPlaceholderSupport: boolean;
    /**
     * Constructor for a new ComponentContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ComponentContainerSettings
    );
    /**
     * Constructor for a new ComponentContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ComponentContainerSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.ComponentContainer with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComponentContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.ComponentContainer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.50
     *
     * Attaches event handler `fnFunction` to the {@link #event:componentCreated componentCreated} event of
     * this `sap.ui.core.ComponentContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ComponentContainer` itself.
     *
     * Fired when the component instance has been created by the ComponentContainer.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachComponentCreated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ComponentContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50
     *
     * Attaches event handler `fnFunction` to the {@link #event:componentCreated componentCreated} event of
     * this `sap.ui.core.ComponentContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ComponentContainer` itself.
     *
     * Fired when the component instance has been created by the ComponentContainer.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachComponentCreated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ComponentContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Attaches event handler `fnFunction` to the {@link #event:componentFailed componentFailed} event of this
     * `sap.ui.core.ComponentContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ComponentContainer` itself.
     *
     * Fired when the creation of the component instance has failed.
     *
     * By default, the `ComponentContainer` also logs the error that occurred. Since 1.83, this default behavior
     * can be prevented by calling `preventDefault()` on the event object.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachComponentFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ComponentContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Attaches event handler `fnFunction` to the {@link #event:componentFailed componentFailed} event of this
     * `sap.ui.core.ComponentContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ComponentContainer` itself.
     *
     * Fired when the creation of the component instance has failed.
     *
     * By default, the `ComponentContainer` also logs the error that occurred. Since 1.83, this default behavior
     * can be prevented by calling `preventDefault()` on the event object.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachComponentFailed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ComponentContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50
     *
     * Detaches event handler `fnFunction` from the {@link #event:componentCreated componentCreated} event of
     * this `sap.ui.core.ComponentContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachComponentCreated(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Detaches event handler `fnFunction` from the {@link #event:componentFailed componentFailed} event of
     * this `sap.ui.core.ComponentContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachComponentFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:componentCreated componentCreated} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireComponentCreated(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Reference to the created component instance
         */
        component?: UIComponent;
      }
    ): this;
    /**
     * @SINCE 1.60
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:componentFailed componentFailed} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireComponentFailed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The reason object as returned by the component promise
         */
        reason?: object;
      }
    ): boolean;
    /**
     * Gets current value of property {@link #getAsync async}.
     *
     * Flag whether the component should be created sync (default) or async. The default will be async when
     * initially the property `manifest` is set to a truthy value and for the property `async` no value has
     * been specified. This property can only be applied initially.
     *
     * Default value is `false`.
     *
     * @returns Value of property `async`
     */
    getAsync(): boolean;
    /**
     * Gets current value of property {@link #getAutoPrefixId autoPrefixId}.
     *
     * Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the
     * ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash.
     * This property can only be applied initially.
     *
     * Default value is `false`.
     *
     * @returns Value of property `autoPrefixId`
     */
    getAutoPrefixId(): boolean;
    /**
     * ID of the element which is the current target of the association {@link #getComponent component}, or
     * `null`.
     */
    getComponent(): ID;
    /**
     * Gets current value of property {@link #getHandleValidation handleValidation}.
     *
     * Enable/disable validation handling by MessageManager for this component. The resulting Messages will
     * be propagated to the controls. This property can only be applied initially.
     *
     * Default value is `false`.
     *
     * @returns Value of property `handleValidation`
     */
    getHandleValidation(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Container height in CSS size
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getLifecycle lifecycle}.
     *
     * Lifecycle behavior for the Component associated by the `ComponentContainer`. The default behavior is
     * `Legacy`. This means that the `ComponentContainer` takes care that the Component is destroyed when the
     * `ComponentContainer` is destroyed, but it is **not** destroyed when a new Component is associated. If
     * you use the `usage` property to create the Component, the default behavior is `Container`. This means
     * that the Component is destroyed when the `ComponentContainer` is destroyed or a new Component is associated.
     * This property must only be applied before a component instance is created.
     *
     * Default value is `Legacy`.
     *
     * @returns Value of property `lifecycle`
     */
    getLifecycle(): ComponentLifecycle | keyof typeof ComponentLifecycle;
    /**
     * Gets current value of property {@link #getManifest manifest}.
     *
     * Controls when and from where to load the manifest for the Component. When set to any truthy value, the
     * manifest will be loaded asynchronously by default and evaluated before the Component controller, if it
     * is set to a falsy value other than `undefined`, the manifest will be loaded after the controller. A non-empty
     * string value will be interpreted as the URL location from where to load the manifest. A non-null object
     * value will be interpreted as manifest content. This property can only be applied initially.
     *
     * @returns Value of property `manifest`
     */
    getManifest(): any;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Component name, the package where the component is contained. This property can only be applied initially.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPropagateModel propagateModel}.
     *
     * Defines whether binding information is propagated to the component.
     *
     * Default value is `false`.
     *
     * @returns Value of property `propagateModel`
     */
    getPropagateModel(): boolean;
    /**
     * Gets current value of property {@link #getSettings settings}.
     *
     * The settings object passed to the component when created. This property can only be applied initially.
     *
     * @returns Value of property `settings`
     */
    getSettings(): object;
    /**
     * Gets current value of property {@link #getUrl url}.
     *
     * The URL of the component. This property can only be applied initially.
     *
     * @returns Value of property `url`
     */
    getUrl(): URI;
    /**
     * Gets current value of property {@link #getUsage usage}.
     *
     * The name of a component usage as configured in the app descriptor of the component owning this `ComponentContainer`.
     *
     * The configuration from the named usage will be used to create a component instance for this `ComponentContainer`.
     * If there's no owning component or if its app descriptor does not contain a usage with the given name,
     * an error will be logged.
     *
     * See {@link topic:346599f0890d4dfaaa11c6b4ffa96312 Using and Nesting Components} for more information
     * about component usages.
     *
     * This property can only be applied initially.
     *
     * @returns Value of property `usage`
     */
    getUsage(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Container width in CSS size
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getAsync async}.
     *
     * Flag whether the component should be created sync (default) or async. The default will be async when
     * initially the property `manifest` is set to a truthy value and for the property `async` no value has
     * been specified. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAsync(
      /**
       * New value for property `async`
       */
      bAsync?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAutoPrefixId autoPrefixId}.
     *
     * Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the
     * ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash.
     * This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAutoPrefixId(
      /**
       * New value for property `autoPrefixId`
       */
      bAutoPrefixId?: boolean
    ): this;
    /**
     * Sets the component of the container. Depending on the ComponentContainer's lifecycle this might destroy
     * the old associated Component.
     *
     * Once the component is associated with the container the cross connection to the component will be set
     * and the models will be propagated if defined. If the `usage` property is set the ComponentLifecycle is
     * processed like a "Container" lifecycle.
     *
     * @returns the reference to `this` in order to allow method chaining
     */
    setComponent(
      /**
       * ID of an element which becomes the new target of this component association. Alternatively, an element
       * instance may be given.
       */
      vComponent: string | UIComponent
    ): this;
    /**
     * Sets a new value for property {@link #getHandleValidation handleValidation}.
     *
     * Enable/disable validation handling by MessageManager for this component. The resulting Messages will
     * be propagated to the controls. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHandleValidation(
      /**
       * New value for property `handleValidation`
       */
      bHandleValidation?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Container height in CSS size
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLifecycle lifecycle}.
     *
     * Lifecycle behavior for the Component associated by the `ComponentContainer`. The default behavior is
     * `Legacy`. This means that the `ComponentContainer` takes care that the Component is destroyed when the
     * `ComponentContainer` is destroyed, but it is **not** destroyed when a new Component is associated. If
     * you use the `usage` property to create the Component, the default behavior is `Container`. This means
     * that the Component is destroyed when the `ComponentContainer` is destroyed or a new Component is associated.
     * This property must only be applied before a component instance is created.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Legacy`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLifecycle(
      /**
       * New value for property `lifecycle`
       */
      sLifecycle?: ComponentLifecycle | keyof typeof ComponentLifecycle
    ): this;
    /**
     * Sets a new value for property {@link #getManifest manifest}.
     *
     * Controls when and from where to load the manifest for the Component. When set to any truthy value, the
     * manifest will be loaded asynchronously by default and evaluated before the Component controller, if it
     * is set to a falsy value other than `undefined`, the manifest will be loaded after the controller. A non-empty
     * string value will be interpreted as the URL location from where to load the manifest. A non-null object
     * value will be interpreted as manifest content. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setManifest(
      /**
       * New value for property `manifest`
       */
      oManifest?: any
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Component name, the package where the component is contained. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPropagateModel propagateModel}.
     *
     * Defines whether binding information is propagated to the component.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropagateModel(
      /**
       * New value for property `propagateModel`
       */
      bPropagateModel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSettings settings}.
     *
     * The settings object passed to the component when created. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSettings(
      /**
       * New value for property `settings`
       */
      oSettings?: object
    ): this;
    /**
     * Sets a new value for property {@link #getUrl url}.
     *
     * The URL of the component. This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUrl(
      /**
       * New value for property `url`
       */
      sUrl?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getUsage usage}.
     *
     * The name of a component usage as configured in the app descriptor of the component owning this `ComponentContainer`.
     *
     * The configuration from the named usage will be used to create a component instance for this `ComponentContainer`.
     * If there's no owning component or if its app descriptor does not contain a usage with the given name,
     * an error will be logged.
     *
     * See {@link topic:346599f0890d4dfaaa11c6b4ffa96312 Using and Nesting Components} for more information
     * about component usages.
     *
     * This property can only be applied initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUsage(
      /**
       * New value for property `usage`
       */
      sUsage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Container width in CSS size
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ComponentContainerSettings extends $ControlSettings {
    /**
     * Component name, the package where the component is contained. This property can only be applied initially.
     */
    name?: string | PropertyBindingInfo;

    /**
     * The URL of the component. This property can only be applied initially.
     */
    url?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Flag whether the component should be created sync (default) or async. The default will be async when
     * initially the property `manifest` is set to a truthy value and for the property `async` no value has
     * been specified. This property can only be applied initially.
     */
    async?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Enable/disable validation handling by MessageManager for this component. The resulting Messages will
     * be propagated to the controls. This property can only be applied initially.
     */
    handleValidation?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The settings object passed to the component when created. This property can only be applied initially.
     */
    settings?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines whether binding information is propagated to the component.
     */
    propagateModel?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Container width in CSS size
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Container height in CSS size
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Lifecycle behavior for the Component associated by the `ComponentContainer`. The default behavior is
     * `Legacy`. This means that the `ComponentContainer` takes care that the Component is destroyed when the
     * `ComponentContainer` is destroyed, but it is **not** destroyed when a new Component is associated. If
     * you use the `usage` property to create the Component, the default behavior is `Container`. This means
     * that the Component is destroyed when the `ComponentContainer` is destroyed or a new Component is associated.
     * This property must only be applied before a component instance is created.
     */
    lifecycle?:
      | (ComponentLifecycle | keyof typeof ComponentLifecycle)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the
     * ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash.
     * This property can only be applied initially.
     */
    autoPrefixId?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The name of a component usage as configured in the app descriptor of the component owning this `ComponentContainer`.
     *
     * The configuration from the named usage will be used to create a component instance for this `ComponentContainer`.
     * If there's no owning component or if its app descriptor does not contain a usage with the given name,
     * an error will be logged.
     *
     * See {@link topic:346599f0890d4dfaaa11c6b4ffa96312 Using and Nesting Components} for more information
     * about component usages.
     *
     * This property can only be applied initially.
     */
    usage?: string | PropertyBindingInfo;

    /**
     * Controls when and from where to load the manifest for the Component. When set to any truthy value, the
     * manifest will be loaded asynchronously by default and evaluated before the Component controller, if it
     * is set to a falsy value other than `undefined`, the manifest will be loaded after the controller. A non-empty
     * string value will be interpreted as the URL location from where to load the manifest. A non-null object
     * value will be interpreted as manifest content. This property can only be applied initially.
     */
    manifest?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * The component displayed in this ComponentContainer.
     */
    component?: UIComponent | string;

    /**
     * @SINCE 1.50
     *
     * Fired when the component instance has been created by the ComponentContainer.
     */
    componentCreated?: (oEvent: Event) => void;

    /**
     * @SINCE 1.60
     *
     * Fired when the creation of the component instance has failed.
     *
     * By default, the `ComponentContainer` also logs the error that occurred. Since 1.83, this default behavior
     * can be prevented by calling `preventDefault()` on the event object.
     */
    componentFailed?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/ComponentMetadata" {
  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Manifest from "sap/ui/core/Manifest";

  /**
   * @SINCE 1.9.2
   */
  export default class ComponentMetadata extends ManagedObjectMetadata {
    /**
     * Creates a new metadata object for a Component subclass.
     */
    constructor(
      /**
       * Fully qualified name of the class that is described by this metadata object
       */
      sClassName: string,
      /**
       * Static info to construct the metadata from
       */
      oClassInfo: object
    );

    /**
     * Returns the name of the Component (which is the namespace only with the module name)
     *
     * @returns Component name
     */
    getComponentName(): string;
    /**
     * @deprecated (since 1.27.1) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/components")
     *
     * Returns array of components specified in the metadata of the Component. If not specified or the array
     * is empty, the return value is null.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns Required Components.
     */
    getComponents(): string[];
    /**
     * @SINCE 1.15.1
     * @deprecated (since 1.27.1) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/config")
     *
     * Returns a copy of the configuration property to disallow modifications. If no key is specified it returns
     * the complete configuration property
     *
     * @returns the value of the configuration property
     */
    getConfig(
      /**
       * Key of the configuration property
       */
      sKey?: string,
      /**
       * If set to `true`, only the local configuration is returned
       */
      bDoNotMerge?: boolean
    ): object;
    /**
     * @deprecated (since 1.27.1) - Please use the sap.ui.core.ComponentMetadata#getManifestEntry
     *
     * Returns the custom Component configuration entry with the specified key (this must be a JSON object).
     * If no key is specified, the return value is null.
     *
     * Example: ` sap.ui.core.Component.extend("sample.Component", { metadata: { "my.custom.config" : { "property1"
     * : true, "property2" : "Something else" } } }); `
     *
     * The configuration above can be accessed via `sample.Component.getMetadata().getCustomEntry("my.custom.config")`.
     *
     * @returns custom Component configuration with the specified key.
     */
    getCustomEntry(
      /**
       * Key of the custom configuration (must be prefixed with a namespace)
       */
      sKey: string,
      /**
       * Indicates whether the custom configuration is merged with the parent custom configuration of the Component.
       */
      bMerged?: boolean
    ): Object;
    /**
     * @deprecated (since 1.27.1) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies")
     *
     * Returns the dependencies defined in the metadata of the Component. If not specified, the return value
     * is null.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns Component dependencies.
     */
    getDependencies(): Object;
    /**
     * @deprecated (since 1.27.1) - For CSS, please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/resources/css").
     *
     * Returns the array of the included files that the Component requires such as CSS and JavaScript. If not
     * specified or the array is empty, the return value is null.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns Included files.
     */
    getIncludes(): string[];
    /**
     * @deprecated (since 1.27.1) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/libs")
     *
     * Returns array of libraries specified in metadata of the Component, that are automatically loaded when
     * an instance of the component is created. If not specified or the array is empty, the return value is
     * null.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns Required libraries.
     */
    getLibs(): string[];
    /**
     * @SINCE 1.27.1
     * @deprecated (since 1.33.0) - Please use the sap.ui.core.Component#getManifest
     *
     * Returns the manifest defined in the metadata of the Component. If not specified, the return value is
     * null.
     *
     * @returns manifest.
     */
    getManifest(): Object | null;
    /**
     * @SINCE 1.27.1
     * @deprecated (since 1.33.0) - Please use the sap.ui.core.Component#getManifest
     *
     * Returns the configuration of a manifest section or the value for a specific path. If no section or key
     * is specified, the return value is null.
     *
     * Example: ` { "sap.ui5": { "dependencies": { "libs": { "sap.m": {} }, "components": { "my.component.a":
     * {} } } }); `
     *
     * The configuration above can be accessed in the following ways:
     * 	 - **By section/namespace**: `oComponent.getMetadata().getManifestEntry("sap.ui5")`
     * 	 - **By path**: `oComponent.getMetadata().getManifestEntry("/sap.ui5/dependencies/libs")`
     *
     * By section/namespace returns the configuration for the specified manifest section and by path allows
     * to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with
     * a slash (/).
     *
     * @returns Value of the manifest section or the key (could be any kind of value)
     */
    getManifestEntry(
      /**
       * Either the manifest section name (namespace) or a concrete path
       */
      sKey: string,
      /**
       * Indicates whether the custom configuration is merged with the parent custom configuration of the Component.
       */
      bMerged?: boolean
    ): any | null;
    /**
     * @SINCE 1.33.0
     *
     * Returns the manifest object.
     *
     * @returns manifest.
     */
    getManifestObject(): Manifest;
    /**
     * @SINCE 1.27.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the version of the metadata which could be 1 or 2. 1 is for legacy metadata whereas 2 is for
     * the manifest.
     *
     * @returns metadata version (1: legacy metadata, 2: manifest)
     */
    getMetadataVersion(): int;
    /**
     * @SINCE 1.29.0
     * @deprecated (since 1.33.0) - Please use the sap.ui.core.Component#getManifest
     *
     * Returns the raw manifest defined in the metadata of the Component. If not specified, the return value
     * is null.
     *
     * @returns manifest
     */
    getRawManifest(): Object;
    /**
     * @deprecated (since 1.27.1) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/minUI5Version")
     *
     * Returns the required version of SAPUI5 defined in the metadata of the Component. If returned value is
     * null, then no special UI5 version is required.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns Required version of UI5 or if not specified then `null`.
     */
    getUI5Version(): string | null;
    /**
     * @deprecated (since 1.34.2) - Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.app/applicationVersion/version")
     *
     * Returns the version of the component. If not specified, the return value is null.  **Important:**
     *  If a Component is loaded using the manifest URL (or according the "manifest first" strategy), this function
     * ignores the entries of the manifest file! It returns only the entries which have been defined in the
     * Component metadata or in the proper Component manifest.
     *
     * @returns The version of the component.
     */
    getVersion(): string;
    /**
     * @SINCE 1.33.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether the class of this metadata is a component base class or not.
     *
     * @returns true if it is sap.ui.core.Component or sap.ui.core.UIComponent
     */
    isBaseClass(): boolean;
  }
}

declare module "sap/ui/core/Configuration" {
  import CalendarWeekNumbering from "sap/ui/core/date/CalendarWeekNumbering";

  import Version from "sap/base/util/Version";

  import Locale from "sap/ui/core/Locale";

  import Metadata from "sap/ui/base/Metadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import BaseObject from "sap/ui/base/Object";

  /**
   * Collects and stores the configuration of the current environment.
   *
   * The Configuration is initialized once when the {@link sap.ui.core.Core} is created. There are different
   * ways to set the environment configuration (in ascending priority):
   * 	 - System defined defaults
   * 	 - Server wide defaults, read from /sap-ui-config.json
   * 	 - Properties of the global configuration object window["sap-ui-config"]
   * 	 - A configuration string in the data-sap-ui-config attribute of the bootstrap tag.
   * 	 - Individual data-sap-ui-xyz attributes of the bootstrap tag
   * 	 - Using URL parameters
   * 	 - Setters in this Configuration object (only for some parameters)
   *
   * That is, attributes of the DOM reference override the system defaults, URL parameters override the DOM
   * attributes (where empty URL parameters set the parameter back to its system default). Calling setters
   * at runtime will override any previous settings calculated during object creation.
   *
   * The naming convention for parameters is:
   * 	 - in the URL : sap-ui-PARAMETER-NAME="value"
   * 	 - in the DOM : data-sap-ui-PARAMETER-NAME="value"  where PARAMETER-NAME is the name
   * 			of the parameter in lower case.
   *
   * Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.
   */
  interface Configuration {
    /**
     * Creates a new subclass of class sap.ui.core.Configuration with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    extend(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: object,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Configuration.
     *
     * @returns Metadata object describing this class
     */
    getMetadata(): Metadata;
    /**
     * @SINCE 1.38.6
     *
     * Applies multiple changes to the configuration at once.
     *
     * If the changed settings contain localization related settings like `language` or calendarType,
     * then only a single `localizationChanged` event will be fired. As the framework has to inform all existing
     * components, elements, models etc. about localization changes, using `applySettings` can significantly
     * reduce the overhead for multiple changes, esp. when they occur after the UI has been created already.
     *
     * The `mSettings` can contain any property `xyz` for which a setter method `setXYZ` exists
     * in the API of this class. Similarly, values for the {@link sap.ui.core.Configuration.FormatSettings format
     * settings} API can be provided in a nested object with name `formatSettings`.
     *
     * @returns Returns `this` to allow method chaining
     */
    applySettings(
      /**
       * Configuration options to apply
       */
      mSettings: object
    ): this;
    /**
     * Returns whether the accessibility mode is used or not.
     *
     * @returns whether the accessibility mode is used or not
     */
    getAccessibility(): boolean;
    /**
     * @SINCE 1.77.0
     *
     * Returns the list of active terminologies defined via the Configuration.
     *
     * @returns if no active terminologies are set, the default value `undefined` is returned.
     */
    getActiveTerminologies(): string[] | undefined;
    /**
     * URL of the allowlist service.
     *
     * @returns allowlist service URL
     */
    getAllowlistService(): string;
    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.ui.core.Configuration#getAnimationMode}
     *
     * Returns whether the animations are globally used.
     *
     * @returns whether the animations are globally used
     */
    getAnimation(): boolean;
    /**
     * @SINCE 1.50.0
     *
     * Returns the current animation mode.
     *
     * @returns The current animationMode
     */
    getAnimationMode(): AnimationMode;
    /**
     * Base URLs to AppCacheBuster ETag-Index files.
     *
     * @returns array of base URLs
     */
    getAppCacheBuster(): string[];
    /**
     * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
     *
     * @returns "sync" | "async"
     */
    getAppCacheBusterMode(): string;
    /**
     * @deprecated (since 1.15.1) - Please use {@link module:sap/ui/core/ComponentSupport} instead. See also
     * {@link topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.
     *
     * The name of the application to start or empty.
     *
     * @returns name of the application
     */
    getApplication(): string;
    /**
     * @SINCE 1.27.0
     *
     * Returns whether the framework automatically adds the ARIA role 'application' to the HTML body or not.
     */
    getAutoAriaBodyRole(): boolean;
    /**
     * @SINCE 1.113.0
     *
     * Returns the calendar week numbering algorithm used to determine the first day of the week and the first
     * calendar week of the year, see {@link sap.ui.core.date.CalendarWeekNumbering}.
     *
     * @returns The calendar week numbering algorithm
     */
    getCalendarWeekNumbering():
      | CalendarWeekNumbering
      | keyof typeof CalendarWeekNumbering;
    /**
     * Returns the used compatibility version for the given feature.
     *
     * @returns the used compatibility version
     */
    getCompatibilityVersion(
      /**
       * the key of desired feature
       */
      sFeature: string
    ): Version;
    /**
     * Returns whether the page runs in full debug mode.
     *
     * @returns Whether the page runs in full debug mode
     */
    getDebug(): boolean;
    /**
     * @SINCE 1.102
     *
     * Name (ID) of a UI5 module that implements file share support.
     *
     * If no implementation is known, `undefined` is returned.
     *
     * The contract of the module is not defined by the configuration API.
     *
     * @returns Module name (ID) of a file share support module
     */
    getFileShareSupport(): string | undefined;
    /**
     * Returns whether the Fiori2Adaptation is on.
     *
     * @returns false - no adaptation, true - full adaptation, comma-separated list - partial adaptation Possible
     * values: style, collapse, title, back, hierarchy
     */
    getFiori2Adaptation(): boolean | string;
    /**
     * @SINCE 1.60.0
     *
     * Returns the URL from where the UI5 flexibility services are called; if empty, the flexibility services
     * are not called.
     *
     * @returns Flexibility services configuration
     */
    getFlexibilityServices(): object[];
    /**
     * Returns the format locale string with language and region code. Falls back to language configuration,
     * in case it has not been explicitly defined.
     *
     * @returns the format locale string with language and country code
     */
    getFormatLocale(): string;
    /**
     * Returns a configuration object that bundles the format settings of UI5.
     *
     * @returns A FormatSettings object.
     */
    getFormatSettings(): FormatSettings;
    /**
     * frameOptions mode (allow/deny/trusted).
     *
     * @returns frameOptions mode
     */
    getFrameOptions(): string;
    /**
     * Returns whether the UI5 control inspe ctor is displayed. Has only an effect when the sap-ui-debug module
     * has been loaded
     *
     * @returns whether the UI5 control inspector is displayed
     */
    getInspect(): boolean;
    /**
     * Returns a string that identifies the current language.
     *
     * The value returned by this method in most cases corresponds to the exact value that has been configured
     * by the user or application or that has been determined from the user agent settings. It has not been
     * normalized, but has been validated against a relaxed version of {@link http://www.ietf.org/rfc/bcp/bcp47.txt
     * BCP47}, allowing underscores ('_') instead of the suggested dashes ('-') and not taking the case of letters
     * into account.
     *
     * The exceptions mentioned above affect languages that have been specified via the URL parameter `sap-language`.
     * That parameter by definition represents an SAP logon language code ('ABAP language'). Most but not all
     * of these language codes are valid ISO639 two-letter languages and as such are valid BCP47 language tags.
     * For better BCP47 compliance, the framework maps the following non-BCP47 SAP logon codes to a BCP47 substitute:
     *
     * ```javascript
     *
     *    "ZH"  -->  "zh-Hans"         // script 'Hans' added to distinguish it from zh-Hant
     *    "ZF"  -->  "zh-Hant"         // ZF is not a valid ISO639 code, use the compliant language + script 'Hant'
     *    "1Q"  -->  "en-US-x-saptrc"  // special language code for supportability (tracing),
     *                                    represented as en-US with a private extension
     *    "2Q"  -->  "en-US-x-sappsd"  // special language code for supportability (pseudo translation),
     *                                    represented as en-US with a private extension
     *    "3Q"  -->  "en-US-x-saprigi" // special language code for the Rigi pseudo language,
     *                                    represented as en-US with a private extension
     * ```
     *
     *
     * For a normalized BCP47 tag, call {@link #getLanguageTag} or call {@link #getLocale} to get a {@link sap.ui.core.Locale
     * Locale} object matching the language.
     *
     * @returns Language string as configured
     */
    getLanguage(): string;
    /**
     * Returns a BCP47-compliant language tag for the current language.
     *
     * The return value of this method is especially useful for an HTTP `Accept-Language` header.
     *
     * Retrieves the modern locale, e.g. sr-Latn (Serbian (Cyrillic)), he (Hebrew), yi (Yiddish)
     *
     * @returns The language tag for the current language, conforming to BCP47
     */
    getLanguageTag(): string;
    /**
     * Returns a Locale object for the current language.
     *
     * The Locale is derived from the {@link #getLanguage language} property.
     *
     * @returns The locale
     */
    getLocale(): Locale;
    /**
     * @SINCE 1.33.0
     *
     * Flag whether a Component should load the manifest first.
     *
     * @returns true if a Component should load the manifest first
     */
    getManifestFirst(): boolean;
    /**
     * Returns whether there should be an exception on any duplicate element IDs.
     *
     * @returns whether there should be an exception on any duplicate element IDs
     */
    getNoDuplicateIds(): boolean;
    /**
     * Returns whether the text origin information is collected.
     *
     * @returns whether the text info is collected
     */
    getOriginInfo(): boolean;
    /**
     * @deprecated (since 1.95) - Please use {@link module:sap/ui/core/ComponentSupport} instead. See also {@link
     * topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.
     *
     * The name of the root component to start or empty.
     *
     * @returns name of the root component
     */
    getRootComponent(): string;
    /**
     * Returns whether the page uses the RTL text direction.
     *
     * If no mode has been explicitly set (neither `true` nor `false`), the mode is derived from the current
     * language setting.
     *
     * @returns whether the page uses the RTL text direction
     */
    getRTL(): boolean;
    /**
     * Returns an SAP logon language for the current language.
     *
     * It will be returned in uppercase. e.g. "EN", "DE"
     *
     * @returns The SAP logon language code for the current language
     */
    getSAPLogonLanguage(): string;
    /**
     * @SINCE 1.95.0
     *
     * Returns the security token handlers of an OData V4 model.
     * See:
     * 	#setSecurityTokenHandlers
     *
     * @returns the security token handlers (an empty array if there are none)
     */
    getSecurityTokenHandlers(): Function[];
    /**
     * @SINCE 1.106.0
     *
     * Flag if statistics are requested.
     *
     * Flag set by TechnicalInfo Popup will also be checked. So its active if set by URL parameter or manually
     * via TechnicalInfo.
     *
     * @returns Whether statistics are enabled
     */
    getStatisticsEnabled(): boolean;
    /**
     * Returns the theme name
     *
     * @returns the theme name
     */
    getTheme(): string;
    /**
     * @SINCE 1.99.0
     *
     * **Note: Due to compatibility considerations, the time zone can only be changed for test purposes via
     * the `sap-timezone` URL parameter. If this parameter is not set, the time zone of the browser/host system
     * is returned.**
     *
     * Retrieves the configured IANA timezone ID.
     *
     * @returns The configured IANA timezone ID, e.g. "America/New_York"
     */
    getTimezone(): string;
    /**
     * Prefix to be used for automatically generated control IDs. Default is a double underscore "__".
     *
     * @returns the prefix to be used
     */
    getUIDPrefix(): string;
    /**
     * Returns the version of the framework.
     *
     * Similar to `sap.ui.version`.
     *
     * @returns the version
     */
    getVersion(): Version;
    /**
     * @deprecated (since 1.85.0) - Use {@link sap.ui.core.Configuration#getAllowlistService} instead. SAP strives
     * to replace insensitive terms with inclusive language. Since APIs cannot be renamed or immediately removed
     * for compatibility reasons, this API has been deprecated.
     *
     * URL of the whitelist service.
     *
     * @returns whitelist service URL
     */
    getWhitelistService(): string;
    /**
     * @SINCE 1.50.0
     *
     * Sets the current animation mode.
     *
     * Expects an animation mode as string and validates it. If a wrong animation mode was set, an error is
     * thrown. If the mode is valid it is set, then the attributes `data-sap-ui-animation` and `data-sap-ui-animation-mode`
     * of the HTML document root element are also updated. If the `animationMode` is `Configuration.AnimationMode.none`
     * the old `animation` property is set to `false`, otherwise it is set to `true`.
     */
    setAnimationMode(
      /**
       * A valid animation mode
       */
      sAnimationMode: AnimationMode
    ): void;
    /**
     * @SINCE 1.28.6
     *
     * Sets the new calendar type to be used from now on in locale dependent functionality (for example, formatting,
     * translation texts, etc.).
     *
     * @returns `this` to allow method chaining
     */
    setCalendarType(
      /**
       * the new calendar type. Set it with null to clear the calendar type and the calendar type is calculated
       * based on the format settings and current locale.
       */
      sCalendarType: (CalendarType | keyof typeof CalendarType) | null
    ): this;
    /**
     * @SINCE 1.113.0
     *
     * Sets the calendar week numbering algorithm which is used to determine the first day of the week and the
     * first calendar week of the year, see {@link sap.ui.core.date.CalendarWeekNumbering}.
     *
     * @returns `this` to allow method chaining
     */
    setCalendarWeekNumbering(
      /**
       * The calendar week numbering algorithm
       */
      sCalendarWeekNumbering:
        | CalendarWeekNumbering
        | keyof typeof CalendarWeekNumbering
    ): this;
    /**
     * Sets a new format locale to be used from now on for retrieving locale specific formatters. Modifying
     * this setting does not have an impact on the retrieval of translated texts!
     *
     * Can either be set to a concrete value (a BCP47 or Java locale compliant language tag) or to `null`. When
     * set to `null` (default value) then locale specific formatters are retrieved for the current language.
     *
     * After changing the format locale, the framework tries to update localization specific parts of the UI.
     * See the documentation of {@link #setLanguage} for details and restrictions.
     *
     * **Note**: When a format locale is set, it has higher priority than a number, date or time format defined
     * with a call to `setLegacyNumberFormat`, `setLegacyDateFormat` or `setLegacyTimeFormat`.
     *
     * **Note**: See documentation of {@link #setLanguage} for restrictions.
     *
     * @returns `this` to allow method chaining
     */
    setFormatLocale(
      /**
       * the new format locale as a BCP47 compliant language tag; case doesn't matter and underscores can be used
       * instead of dashes to separate components (compatibility with Java Locale IDs)
       */
      sFormatLocale: string | null
    ): this;
    /**
     * Sets a new language to be used from now on for language/region dependent functionality (e.g. formatting,
     * data types, translated texts, ...).
     *
     * When the language can't be interpreted as a BCP47 language (using the relaxed syntax described in {@link
     * #getLanguage}, an error will be thrown.
     *
     * When the language has changed, the Core will fire its {@link sap.ui.core.Core#event:localizationChanged
     * localizationChanged} event.
     *
     * Restrictions:
     *
     * The framework **does not** guarantee that already created, language dependent objects will be updated
     * by this call. It therefore remains best practice for applications to switch the language early, e.g.
     * before any language dependent objects are created. Applications that need to support more dynamic changes
     * of the language should listen to the `localizationChanged` event and adapt all language dependent objects
     * that they use (e.g. by rebuilding their UI).
     *
     * Currently, the framework notifies the following objects about a change of the localization settings before
     * it fires the `localizationChanged` event:
     *
     *
     * 	 - date and number data types that are used in property bindings or composite bindings in existing Elements,
     * 			Controls, UIAreas or Components
     * 	 - ResourceModels currently assigned to the Core, a UIArea, Component, Element or Control
     * 	 - Elements or Controls that implement the `onlocalizationChanged` hook (note the lowercase 'l' in onlocalizationChanged)
     *
     *
     * It furthermore derives the RTL mode from the new language, if no explicit RTL mode has been set. If the
     * RTL mode changes, the following additional actions will be taken:
     *
     *
     * 	 - the URLs of already loaded library theme files will be changed
     * 	 - the `dir` attribute of the page will be changed to reflect the new mode.
     * 	 - all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)
     *
     * This method does not accept SAP language codes for `sLanguage`. Instead, a second parameter `sSAPLogonLanguage`
     * can be provided with an SAP language code corresponding to the given language. A given value will be
     * returned by the {@link #getSAPLogonLanguage} method. It is up to the caller to provide a consistent pair
     * of BCP47 language and SAP language code. The SAP language code is only checked to be of length 2 and
     * must consist of letters or digits only.
     *
     * **Note**: When using this method please take note of and respect the above mentioned restrictions.
     * See:
     * 	http://scn.sap.com/docs/DOC-14377
     *
     * @returns `this` to allow method chaining
     */
    setLanguage(
      /**
       * the new language as a BCP47 compliant language tag; case doesn't matter and underscores can be used instead
       * of dashes to separate components (compatibility with Java Locale IDs)
       */
      sLanguage: string,
      /**
       * SAP language code that corresponds to the `sLanguage`; if a value is specified, future calls to `getSAPLogonLanguage`
       * will return that value; if no value is specified, the framework will use the ISO639 language part of
       * `sLanguage` as SAP Logon language.
       */
      sSAPLogonLanguage?: string
    ): this;
    /**
     * Sets the character orientation mode to be used from now on.
     *
     * Can either be set to a concrete value (true meaning right-to-left, false meaning left-to-right) or to
     * `null` which means that the character orientation mode should be derived from the current language (incl.
     * region) setting.
     *
     * After changing the character orientation mode, the framework tries to update localization specific parts
     * of the UI. See the documentation of {@link #setLanguage} for details and restrictions.
     *
     * **Note**: See documentation of {@link #setLanguage} for restrictions.
     *
     * @returns `this` to allow method chaining
     */
    setRTL(
      /**
       * new character orientation mode or `null`
       */
      bRTL: boolean | null
    ): this;
    /**
     * @SINCE 1.95.0
     *
     * Sets the security token handlers for an OData V4 model. See chapter {@link topic:9613f1f2d88747cab21896f7216afdac/section_STH
     * Security Token Handling}.
     * See:
     * 	#getSecurityTokenHandlers
     */
    setSecurityTokenHandlers(
      /**
       * The security token handlers
       */
      aSecurityTokenHandlers: Function[]
    ): void;
    /**
     * @SINCE 1.99.0
     *
     * **Note: Due to compatibility considerations, this function has no effect in this release. The timezone
     * configuration will always reflect the timezone of the browser/host system.**
     *
     * Sets the timezone such that all date and time based calculations use this timezone.
     *
     * When the timezone has changed, the Core will fire its {@link sap.ui.core.Core#event:localizationChanged
     * localizationChanged} event.
     *
     * @returns `this` to allow method chaining
     */
    setTimezone(
      /**
       * IANA timezone ID, e.g. "America/New_York". Use `null` to reset the timezone to the browser's local timezone.
       * An invalid IANA timezone ID will fall back to the browser's timezone.
       */
      sTimezone?: string | null
    ): this;
  }
  const Configuration: Configuration;
  export default Configuration;

  /**
   * @SINCE 1.50.0
   *
   * Enumerable list with available animation modes.
   *
   * This enumerable is used to validate the animation mode. Animation modes allow to specify different animation
   * scenarios or levels. The implementation of the Control (JavaScript or CSS) has to be done differently
   * for each animation mode.
   */
  export enum AnimationMode {}
  /**
   * Encapsulates configuration settings that are related to data formatting/parsing.
   *
   * **Note:** When format configuration settings are modified through this class, UI5 only ensures that formatter
   * objects created after that point in time will honor the modifications. To be on the safe side, applications
   * should do any modifications early in their lifecycle or recreate any model/UI that is locale dependent.
   */
  export class FormatSettings extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FormatSettings>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Adds custom currencies to the existing entries. E.g. ` { "KWD": {"digits": 3}, "TND" : {"digits": 3}
     * } `
     * See:
     * 	sap.ui.core.Configuration.FormatSettings#setCustomCurrencies
     *
     * @returns Returns `this` to allow method chaining
     */
    addCustomCurrencies(
      /**
       * adds to the currency map
       */
      mCurrencies: object
    ): this;
    /**
     * Retrieves the custom currencies. E.g. ` { "KWD": {"digits": 3}, "TND" : {"digits": 3} } `
     *
     * @returns the mapping between custom currencies and its digits
     */
    getCustomCurrencies(): object;
    /**
     * Returns the currently set date pattern or undefined if no pattern has been defined.
     */
    getDatePattern(): void;
    /**
     * Returns the locale to be used for formatting.
     *
     * If no such locale has been defined, this method falls back to the language, see {@link sap.ui.core.Configuration#getLanguage
     * Configuration.getLanguage()}.
     *
     * If any user preferences for date, time or number formatting have been set, and if no format locale has
     * been specified, then a special private use subtag is added to the locale, indicating to the framework
     * that these user preferences should be applied.
     *
     * @returns the format locale
     */
    getFormatLocale(): Locale;
    /**
     * Returns the currently set customizing data for Islamic calendar support
     *
     * @returns Returns an array contains the customizing data. Each element in the array has properties: dateFormat,
     * islamicMonthStart, gregDate. For details, please see {@link #setLegacyDateCalendarCustomizing}
     */
    getLegacyDateCalendarCustomizing(): object[];
    /**
     * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
     *
     * @returns ID of the ABAP date format, if not set or set to `""`, `undefined` will be returned
     */
    getLegacyDateFormat():
      | "1"
      | "2"
      | "3"
      | "4"
      | "5"
      | "6"
      | "7"
      | "8"
      | "9"
      | "A"
      | "B"
      | "C"
      | undefined;
    /**
     * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
     *
     * @returns ID of the ABAP number format, if not set or set to `""`, `undefined` will be returned
     */
    getLegacyNumberFormat(): " " | "X" | "Y" | undefined;
    /**
     * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
     *
     * @returns ID of the ABAP date format, if not set or set to `""`, `undefined` will be returned
     */
    getLegacyTimeFormat(): "0" | "1" | "2" | "3" | "4" | undefined;
    /**
     * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
     *
     * @returns A non-numerical symbol used as part of a number for the given type, e.g. for locale de_DE:
     *
     * 	 - "group": "." (grouping separator)
     * 	 - "decimal": "," (decimal separator)
     * 	 - "plusSign": "+" (plus sign)
     * 	 - "minusSign": "-" (minus sign)
     */
    getNumberSymbol(
      /**
       * the type of symbol
       */
      sType: "group" | "decimal" | "plusSign" | "minusSign"
    ): string;
    /**
     * Returns the currently set time pattern or undefined if no pattern has been defined.
     */
    getTimePattern(): void;
    /**
     * @SINCE 1.75.0
     *
     * Returns current trailingCurrencyCode configuration for new NumberFormatter instances
     *
     * @returns Whether currency codes shall always be placed after the numeric value
     */
    getTrailingCurrencyCode(): boolean;
    /**
     * Sets custom currencies and replaces existing entries.
     *
     * There is a special currency code named "DEFAULT" that is optional. In case it is set it will be used
     * for all currencies not contained in the list, otherwise currency digits as defined by the CLDR will be
     * used as a fallback.
     *
     * Example: To use CLDR, but override single currencies ` { "KWD": {"digits": 3}, "TND" : {"digits": 3}
     * } `
     *
     * To replace the CLDR currency digits completely ` { "DEFAULT": {"digits": 2}, "ADP": {"digits": 0}, ...
     * "XPF": {"digits": 0} } `
     *
     * Note: To unset the custom currencies: call with `undefined` Custom currencies must not only consist of
     * digits but contain at least one non-digit character, e.g. "a", so that the measure part can be distinguished
     * from the number part.
     *
     * @returns Returns `this` to allow method chaining
     */
    setCustomCurrencies(
      /**
       * currency map which is set
       */
      mCurrencies: object
    ): this;
    /**
     * Defines the preferred format pattern for the given date format style.
     *
     * Calling this method with a null or undefined pattern removes a previously set pattern.
     *
     * If a pattern is defined, it will be preferred over patterns derived from the current locale.
     *
     * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
     *
     * After changing the date pattern, the framework tries to update localization specific parts of the UI.
     * See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setDatePattern(
      /**
       * must be one of short, medium, long or full.
       */
      sStyle: string,
      /**
       * the format pattern to be used in LDML syntax.
       */
      sPattern: string
    ): this;
    /**
     * @deprecated (since 1.113.0) - Use {@link sap.ui.core.Configuration#setCalendarWeekNumbering} instead.
     *
     * Defines the day used as the first day of the week.
     *
     * The day is set as an integer value between 0 (Sunday) and 6 (Saturday). Calling this method with a null
     * or undefined symbol removes a previously set value.
     *
     * If a value is defined, it will be preferred over values derived from the current locale.
     *
     * Usually in the US the week starts on Sunday while in most European countries on Monday. There are special
     * cases where you want to have the first day of week set independent of the user locale.
     *
     * After changing the first day of week, the framework tries to update localization specific parts of the
     * UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setFirstDayOfWeek(
      /**
       * must be an integer value between 0 and 6
       */
      iValue: int
    ): this;
    /**
     * Allows to specify the customizing data for Islamic calendar support
     *
     * @returns Returns `this` to allow method chaining
     */
    setLegacyDateCalendarCustomizing(
      /**
       * contains the customizing data for the support of Islamic calendar.
       */
      aMappings: Array<{
        /**
         * The date format
         */
        dateFormat: string;
        /**
         * The Islamic date
         */
        islamicMonthStart: string;
        /**
         * The corresponding Gregorian date
         */
        gregDate: string;
      }>
    ): this;
    /**
     * Allows to specify one of the legacy ABAP date formats.
     *
     * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP format.
     * When called with a null or undefined format id, any previously applied format will be removed.
     *
     * After changing the legacy date format, the framework tries to update localization specific parts of the
     * UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setLegacyDateFormat(
      /**
       * ID of the ABAP date format, `""` will reset the date patterns for 'short' and 'medium' style to the locale-specific
       * ones.
       */
      sFormatId?:
        | ""
        | "1"
        | "2"
        | "3"
        | "4"
        | "5"
        | "6"
        | "7"
        | "8"
        | "9"
        | "A"
        | "B"
        | "C"
    ): this;
    /**
     * Allows to specify one of the legacy ABAP number format.
     *
     * This method will modify the 'group' and 'decimal' symbols. When called with a null or undefined format
     * id, any previously applied format will be removed.
     *
     * After changing the legacy number format, the framework tries to update localization specific parts of
     * the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setLegacyNumberFormat(
      /**
       * ID of the ABAP number format set, `""` will reset the 'group' and 'decimal' symbols to the locale-specific
       * ones.
       */
      sFormatId?: "" | " " | "X" | "Y"
    ): this;
    /**
     * Allows to specify one of the legacy ABAP time formats.
     *
     * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP formats and
     * sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called with a null or undefined
     * format id, any previously applied format will be removed.
     *
     * After changing the legacy time format, the framework tries to update localization specific parts of the
     * UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setLegacyTimeFormat(
      /**
       * ID of the ABAP time format, `""` will reset the time patterns for 'short' and 'medium' style and the
       * day period texts to the locale-specific ones.
       */
      sFormatId?: "" | "0" | "1" | "2" | "3" | "4"
    ): this;
    /**
     * Defines the string to be used for the given number symbol.
     *
     * Calling this method with a null or undefined symbol removes a previously set symbol string. Note that
     * an empty string is explicitly allowed.
     *
     * If a symbol is defined, it will be preferred over symbols derived from the current locale.
     *
     * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
     *
     * After changing the number symbol, the framework tries to update localization specific parts of the UI.
     * See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setNumberSymbol(
      /**
       * the type of symbol
       */
      sType: "group" | "decimal" | "plusSign" | "minusSign",
      /**
       * will be used to represent the given symbol type
       */
      sSymbol: string
    ): this;
    /**
     * Defines the preferred format pattern for the given time format style.
     *
     * Calling this method with a null or undefined pattern removes a previously set pattern.
     *
     * If a pattern is defined, it will be preferred over patterns derived from the current locale.
     *
     * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
     *
     * After changing the time pattern, the framework tries to update localization specific parts of the UI.
     * See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.
     *
     * @returns Returns `this` to allow method chaining
     */
    setTimePattern(
      /**
       * must be one of short, medium, long or full.
       */
      sStyle: string,
      /**
       * the format pattern to be used in LDML syntax.
       */
      sPattern: string
    ): this;
    /**
     * @SINCE 1.75.0
     *
     * Define whether the NumberFormatter shall always place the currency code after the numeric value, with
     * the only exception of right-to-left locales, where the currency code shall be placed before the numeric
     * value. Default configuration setting is `true`.
     *
     * When set to `false` the placement of the currency code is done dynamically, depending on the configured
     * locale using data provided by the Unicode Common Locale Data Repository (CLDR).
     *
     * Each currency instance ({@link sap.ui.core.format.NumberFormat.getCurrencyInstance}) will be created
     * with this setting unless overwritten on instance level.
     *
     * @returns Returns `this` to allow method chaining
     */
    setTrailingCurrencyCode(
      /**
       * Whether currency codes shall always be placed after the numeric value
       */
      bTrailingCurrencyCode: boolean
    ): this;
  }
}

declare module "sap/ui/core/Control" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Event from "sap/ui/base/Event";

  import { AccessibilityInfo, BusyIndicatorSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    default as ManagedObject,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Base Class for Controls.
   *
   * Controls provide the following features:
   * 	 - **Rendering**: the `RenderManager` only expects instances of class `Control` in its {@link sap.ui.core.RenderManager#renderControl
   * 			renderControl} method. By convention, each control class has an associated static class that takes care
   * 			of rendering the control (its 'Renderer').
   * 	 - **show / hide**: a control can be hidden, although it is still part of the control tree, see property
   * 			{@link #getVisible visible}
   * 	 - **local busy indicator**: marks a control visually as 'busy', see properties {@link #getBusy busy}
   * 			and {@link #getBusyIndicatorDelay busyIndicatorDelay}
   * 	 - **field groups**: by assigning the same group ID to a set of editable controls, they form a group
   * 			which can be validated together. See property {@link #getFieldGroupIds fieldGroupIds} and event {@link
   * 			#event:validateFieldGroup validateFieldGroup}. The term field was chosen as most often this feature
   * 			will be used to group editable fields in a form. See the documentation for {@link topic:5b0775397e394b1fb973fa207554003e
   * 			Field Groups} for more details.
   * 	 - **custom style classes**: all controls allow to add custom CSS classes to their rendered DOM without
   * 			modifying their renderer code. See methods {@link #addStyleClass addStyleClass}, {@link #removeStyleClass
   * 			removeStyleClass}, {@link #toggleStyleClass toggleStyleClass} and {@link #hasStyleClass hasStyleClass}.
   *  The necessary implementation is encapsulated in {@link sap.ui.core.CustomStyleClassSupport CustomStyleClassSupport}
   * and can be applied to selected element classes as well.
   * 	 - **browser events**: by calling the methods {@link #attachBrowserEvent attachBrowserEvent} and {@link
   * 			#detachBrowserEvent detachBrowserEvent}, consumers can let the control class take care of registering
   * 			/ de-registering a given set of event listeners to the control's root DOM node. The framework will adapt
   * 			the registration whenever the DOM node changes (e.g. before or after rendering or when the control is
   * 			destroyed).
   *
   * See section "{@link topic:8dcab0011d274051808f959800cabf9f Developing Controls}" in the documentation
   * for an introduction to control development.
   */
  export default class Control extends UI5Element {
    /**
     * Creates and initializes a new control with the given `sId` and settings.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Object with initial settings for the new control
       */
      mSettings?: $ControlSettings
    );
    /**
     * Creates and initializes a new control with the given `sId` and settings.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new control; generated automatically if no non-empty ID is given Note: this can be
       * omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * Object with initial settings for the new control
       */
      mSettings?: $ControlSettings
    );

    /**
     * Defines a new subclass of Control with the name `sClassName` and enriches it with the information contained
     * in `oClassInfo`.
     *
     * `oClassInfo` can contain the same information that {@link sap.ui.core.Element.extend} already accepts,
     * plus the following `renderer` property:
     *
     * Example:
     * ```javascript
     *
     * Control.extend("sap.mylib.MyControl", {
     *   metadata : {
     *     library : "sap.mylib",
     *     properties : {
     *       text : "string",
     *       width : "sap.ui.core.CSSSize"
     *     }
     *   },
     *   renderer: {
     *     apiVersion: 2,
     *     render: function(oRM, oControl) {
     *       oRM.openStart("div", oControl);
     *       oRM.style("width", oControl.getWidth());
     *       oRM.openEnd();
     *       oRM.text(oControl.getText());
     *       oRM.close("div");
     *     }
     *   }
     * });
     * ```
     *
     *
     * There are multiple ways how a renderer can be specified:
     * 	 - As a **plain object**: The object will be used to create a new renderer by using {@link sap.ui.core.Renderer.extend}
     * 			to extend the renderer of the base class of this control. The new renderer will have the same global
     * 			name as this control class with the additional suffix 'Renderer'.
     *  **Note:** The `Renderer.extend` method expects a plain object (no prototype chain).
     * 	 - As a **function**: The given function will be used as `render` function of a new renderer; the renderer
     * 			will be created in the same way as described for the plain object case.
     * 	 - As a **ready-made renderer**, e.g. imported from the corresponding renderer module. As renderers
     * 			are simple objects (not instances of a specific class), some heuristic is used to distinguish renderers
     * 			from the plain object case above: An object is assumed to be a ready-made renderer when it has
     * 			a `render` function and either is already exposed under the expected global name or has an `extend` method.
     *
     * 	 - As a **fully qualified name**: The name will be looked up as a global property. If not defined, a
     * 			module name will be derived from the global name (dots replaced by slashes), the module will be required
     * 			and provides the renderer, either as AMD export or via the named global property.
     * 	 - **Omitting the `renderer` property** or setting it to `undefined`: The fully qualified name of the
     * 			renderer will be derived from the fully qualified name of the control by adding the suffix "Renderer".
     * 			The renderer then is retrieved in the same way as described for the fully qualified name case.
     *
     * 	 - **`null` or empty string**: The control will have no renderer, a call to `oControl.getMetadata().getRenderer()`
     * 			will return `undefined`.
     *
     * If the resulting renderer is incomplete (has no `render` function) or if it cannot be found at all, rendering
     * of the control will be skipped.
     *
     * **Note:** The `apiVersion: 2` flag is required to enable in-place rendering technology. Before setting
     * this property, please ensure that the constraints documented in section "Contract for Renderer.apiVersion
     * 2" of the {@link sap.ui.core.RenderManager RenderManager} API documentation are fulfilled.
     *
     * @returns Constructor of the newly created class
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class to be created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Control>,
      /**
       * Constructor function for the metadata object. If not given, it defaults to `sap.ui.core.ElementMetadata`.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Control.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML
     * element.
     *
     * This method is intended to be used to mark controls as being of a special type for which special styling
     * can be provided using CSS selectors that reference this style class name.
     *
     *
     * ```javascript
     *
     * Example:
     *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
     *
     * ...and in CSS:
     *    .myRedTextButton {
     *       color: red;
     *    }
     * ```
     *
     *
     * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then make
     * the text in this particular button red.
     *
     * Only characters allowed inside HTML attributes are allowed. Quotes are not allowed and this method will
     * ignore any strings containing quotes. Strings containing spaces are interpreted as multiple custom style
     * classes which are split by space and can be removed individually later by calling removeStyleClass. Multiple
     * calls with the same sStyleClass will have no different effect than calling once. If sStyleClass is null,
     * empty string or it contains quotes, the call is ignored.
     *
     * @returns Returns `this` to allow method chaining
     */
    addStyleClass(
      /**
       * the CSS class name to be added
       */
      sStyleClass: string
    ): this;
    /**
     * Defines whether the user can select text inside this control. Defaults to `true` as long as this method
     * has not been called.
     *
     * **Note:**This only works in Safari; for Firefox the element's style must be set to:
     * ```javascript
     *
     *   -moz-user-select: none;
     * ```
     *  in order to prevent text selection.
     *
     * @returns Returns `this` to allow method chaining
     */
    allowTextSelection(
      /**
       * whether to allow text selection or not
       */
      bAllow: boolean
    ): this;
    /**
     * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally
     * handles DOM element replacements caused by re-rendering.
     *
     * **IMPORTANT:**
     *  This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always
     * try using SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
     * E.g. when working with a `sap.m.Button`, always use the Button's "press" event, not the native "click"
     * event, because "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger
     * the Button.
     *
     * In the event handler, `this` refers to the Control - not to the root DOM element like in jQuery. While
     * the DOM element can be used and modified, the general caveats for working with SAPUI5 control DOM elements
     * apply. In particular the DOM element may be destroyed and replaced by a new one at any time, so modifications
     * that are required to have permanent effect may not be done. E.g. use {@link #addStyleClass} instead if
     * the modification is of visual nature.
     *
     * Use {@link #detachBrowserEvent} to remove the event handler(s) again.
     *
     * @returns Returns `this` to allow method chaining
     */
    attachBrowserEvent(
      /**
       * A string containing one or more JavaScript event types, such as "click" or "blur".
       */
      sEventType: string,
      /**
       * A function to execute each time the event is triggered.
       */
      fnHandler: Function,
      /**
       * The object, that wants to be notified, when the event occurs
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validateFieldGroup validateFieldGroup} event
     * of this `sap.ui.core.Control`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Control` itself.
     *
     * Event is fired if a logical field group defined by `fieldGroupIds` of a control was left or when the
     * user explicitly pressed the key combination that triggers validation.
     *
     * By default, the `RETURN` key without any modifier keys triggers validation, see {@link #triggerValidateFieldGroup}.
     *
     * Listen to this event to validate data of the controls belonging to a field group. See {@link #setFieldGroupIds},
     * or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidateFieldGroup(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Control` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validateFieldGroup validateFieldGroup} event
     * of this `sap.ui.core.Control`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Control` itself.
     *
     * Event is fired if a logical field group defined by `fieldGroupIds` of a control was left or when the
     * user explicitly pressed the key combination that triggers validation.
     *
     * By default, the `RETURN` key without any modifier keys triggers validation, see {@link #triggerValidateFieldGroup}.
     *
     * Listen to this event to validate data of the controls belonging to a field group. See {@link #setFieldGroupIds},
     * or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidateFieldGroup(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Control` itself
       */
      oListener?: object
    ): this;
    /**
     * Returns whether this control belongs to a given combination of field groups.
     *
     * If the `vFieldGroupIds` parameter is not specified, the method checks whether this control belongs to
     * **any** field group, that is, whether any field group ID is defined for it.
     *
     * If a list of field group IDs is specified, either as an array of strings or as a single string (interpreted
     * as a comma separated list of IDs), then the method will check whether this control belongs to **all**
     * given field groups. Accordingly, an empty list of IDs (empty array or empty string) will always return
     * true.
     *
     * Note that a string value for `vFieldGroupIds` (comma separated list) will not be trimmed. All whitespace
     * characters are significant, but in general not recommended in field group IDs.
     * See:
     * 	{@link #setFieldGroupIds}
     *
     * @returns Whether the field group IDs defined for the control match the given ones
     */
    checkFieldGroupIds(
      /**
       * An array of field group IDs or a single string with a comma separated list of IDs to match
       */
      vFieldGroupIds?: string | string[]
    ): boolean;
    /**
     * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
     *
     * Note: listeners are only removed, if the same combination of event type, callback function and context
     * object is given as in the call to `attachBrowserEvent`.
     *
     * @returns Returns `this` to allow method chaining
     */
    detachBrowserEvent(
      /**
       * A string containing one or more JavaScript event types, such as "click" or "blur".
       */
      sEventType: string,
      /**
       * The function that is to be no longer executed.
       */
      fnHandler: Function,
      /**
       * The context object that was given in the call to `attachBrowserEvent`.
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validateFieldGroup validateFieldGroup} event
     * of this `sap.ui.core.Control`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidateFieldGroup(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validateFieldGroup validateFieldGroup} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidateFieldGroup(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * field group IDs of the logical field groups to validate
         */
        fieldGroupIds?: string[];
      }
    ): this;
    /**
     * @SINCE 1.37.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This function (if available on the concrete control) provides the current accessibility state of the
     * control.
     *
     * Applications must not call this hook method directly, it is called by the framework.
     *
     * Subclasses of Control should implement this hook to provide any necessary accessibility information:
     *
     *
     * ```javascript
     *
     * MyControl.prototype.getAccessibilityInfo = function() {
     *    return {
     *      role: "textbox",
     *      type: "date input",
     *      description: "value",
     *      focusable: true,
     *      enabled: true,
     *      editable: true,
     *      required: true,
     *      children: []
     *    };
     * };
     * ```
     *
     *
     * Note: The returned object provides the accessibility state of the control at the point in time when this
     * function is called.
     *
     * @returns Current accessibility state of the control.
     */
    getAccessibilityInfo(): AccessibilityInfo;
    /**
     * @deprecated (since 1.69) - The blocked property is deprecated. There is no accessibility support for
     * this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation,
     * e.g. List controls.
     *
     * Gets current value of property {@link #getBlocked blocked}.
     *
     * Whether the control is currently in blocked state.
     *
     * Default value is `false`.
     *
     * @returns Value of property `blocked`
     */
    getBlocked(): boolean;
    /**
     * Gets current value of property {@link #getBusy busy}.
     *
     * Whether the control is currently in busy state.
     *
     * Default value is `false`.
     *
     * @returns Value of property `busy`
     */
    getBusy(): boolean;
    /**
     * Gets current value of property {@link #getBusyIndicatorDelay busyIndicatorDelay}.
     *
     * The delay in milliseconds, after which the busy indicator will show up for this control.
     *
     * Default value is `1000`.
     *
     * @returns Value of property `busyIndicatorDelay`
     */
    getBusyIndicatorDelay(): int;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getBusyIndicatorSize busyIndicatorSize}.
     *
     * The size of the BusyIndicator. For controls with a width smaller 3rem a `sap.ui.core.BusyIndicatorSize.Small`
     * should be used. If the size could vary in width and the width could get smaller than 3rem, the `sap.ui.core.BusyIndicatorSize.Auto`
     * option could be used. The default is set to `sap.ui.core.BusyIndicatorSize.Medium` For a full screen
     * BusyIndicator use `sap.ui.core.BusyIndicatorSize.Large`.
     *
     * Default value is `'Medium'`.
     *
     * @returns Value of property `busyIndicatorSize`
     */
    getBusyIndicatorSize(): BusyIndicatorSize | keyof typeof BusyIndicatorSize;
    /**
     * Returns a list of all child controls with a field group ID. See {@link #checkFieldGroupIds checkFieldGroupIds}
     * for a description of the `vFieldGroupIds` parameter. Associated controls are not taken into account.
     *
     * @returns The list of controls with a field group ID
     */
    getControlsByFieldGroupId(
      /**
       * ID of the field group or an array of field group IDs to match
       */
      vFieldGroupIds?: string | string[]
    ): Control[];
    /**
     * Returns a copy of the field group IDs array. Modification of the field group IDs need to call {@link
     * #setFieldGroupIds setFieldGroupIds} to apply the changes.
     *
     * @returns copy of the field group IDs
     */
    getFieldGroupIds(): string[];
    /**
     * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
     *
     * By default, this is the Id of the control itself.
     *
     * @returns Id to be used for the `labelFor`
     */
    getIdForLabel(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a renderer for this control instance.
     *
     * It is retrieved using the RenderManager as done during rendering.
     *
     * @returns a Renderer suitable for this Control instance.
     */
    getRenderer(): object;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen.
     *
     * If set to false, a placeholder will be rendered to mark the location of the invisible control in the
     * DOM of the current page. The placeholder will be hidden and have zero dimensions (`display: none`).
     *
     * Also see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Returns true if the given style class or all multiple style classes which are generated by splitting
     * the given string with space are already set on the control via previous call(s) to addStyleClass().
     *
     * @returns Whether the given style(s) has been set before
     */
    hasStyleClass(
      /**
       * the style to check for
       */
      sStyleClass: string
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Marks this control and its children for a re-rendering, usually because its state has changed and now
     * differs from the rendered DOM.
     *
     * Managed settings (properties, aggregations, associations) automatically invalidate the corresponding
     * object. Changing the state via the standard mutators, therefore, does not require an explicit call to
     * `invalidate`.
     *
     * By default, all invalidations are buffered and processed together (asynchronously) in a new browser task.
     *
     * The `oOrigin` parameter was introduced to allow parent controls to limit their re-rendering to certain
     * areas that have been invalidated by their children. As there is no strong guideline for control developers
     * whether or not to provide the parameter, it is not a reliable source of information. It is, therefore,
     * not recommended in general to use it, only in scenarios where a control and its descendants know each
     * other very well (e.g. complex controls where parent and children have the same code owner).
     */
    invalidate(
      /**
       * Child control for which the method was called
       */
      oOrigin?: ManagedObject
    ): void;
    /**
     * @deprecated (since 1.15) - use {@link #getBusy} instead
     *
     * Check if the control is currently in busy state.
     */
    isBusy(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Function is called when the rendering of the control is completed.
     *
     * Applications must not call this hook method directly, it is called by the framework.
     *
     * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
     */
    onAfterRendering(
      /**
       * onAfterRendering event object
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Function is called before the rendering of the control is started.
     *
     * Applications must not call this hook method directly, it is called by the framework.
     *
     * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
     */
    onBeforeRendering(
      /**
       * onBeforeRendering event object
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Puts `this` control into the specified container (`oRef`) at the given position (`oPosition`).
     *
     * First it is checked whether `oRef` is a container element / control (has a multiple aggregation with
     * type `sap.ui.core.Control` and name 'content') or is an Id String of such a container. If this is not
     * the case `oRef` can either be a Dom Reference or Id String of the UIArea (if it does not yet exist implicitly
     * a new UIArea is created),
     *
     * The `oPosition` can be one of the following:
     *
     *
     * 	 - "first": The control is added as the first element to the container.
     * 	 - "last": The control is added as the last element to the container (default).
     * 	 - "only": All existing children of the container are removed (not destroyed!) and the control is added
     * 			as new child.
     * 	 - index: The control is added at the specified index to the container.
     *
     * @returns Returns `this` to allow method chaining
     */
    placeAt(
      /**
       * container into which the control should be put
       */
      oRef: string | Element | Control,
      /**
       * Describes the position where the control should be put into the container
       */
      vPosition?: string | int
    ): this;
    /**
     * Removes the given string from the list of custom style classes that have been set previously. Regular
     * style classes like "sapUiBtn" cannot be removed.
     *
     * @returns Returns `this` to allow method chaining
     */
    removeStyleClass(
      /**
       * the style to be removed
       */
      sStyleClass: string
    ): this;
    /**
     * @deprecated (since 1.70) - using this method is no longer recommended, but still works. Synchronous DOM
     * updates via this method have several drawbacks: they only work when the control has been rendered before
     * (no initial rendering possible), multiple state changes won't be combined automatically into a single
     * re-rendering, they might cause additional layout trashing, standard invalidation might cause another
     * async re-rendering.
     *
     * The recommended alternative is to rely on invalidation and standard re-rendering.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Synchronously updates the DOM of this control to reflect the current object state.
     *
     * Note that this method can only be called when the control already has a DOM representation (it has been
     * rendered before) and when the control still is assigned to a UIArea.
     */
    rerender(): void;
    /**
     * Set the controls busy state.
     *
     * **Note:** The busy state can't be set on controls (e.g. sap.m.ColumnListItem) which renderings have the
     * following tags as DOM root element: area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr|tr
     *
     * @returns `this` to allow method chaining
     */
    setBusy(
      /**
       * The new busy state to be set
       */
      bBusy: boolean
    ): this;
    /**
     * Define the delay, after which the busy indicator will show up.
     *
     * @returns `this` to allow method chaining
     */
    setBusyIndicatorDelay(
      /**
       * The delay in ms
       */
      iDelay: int
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getBusyIndicatorSize busyIndicatorSize}.
     *
     * The size of the BusyIndicator. For controls with a width smaller 3rem a `sap.ui.core.BusyIndicatorSize.Small`
     * should be used. If the size could vary in width and the width could get smaller than 3rem, the `sap.ui.core.BusyIndicatorSize.Auto`
     * option could be used. The default is set to `sap.ui.core.BusyIndicatorSize.Medium` For a full screen
     * BusyIndicator use `sap.ui.core.BusyIndicatorSize.Large`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'Medium'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBusyIndicatorSize(
      /**
       * New value for property `busyIndicatorSize`
       */
      sBusyIndicatorSize?: BusyIndicatorSize | keyof typeof BusyIndicatorSize
    ): this;
    /**
     * @SINCE 1.31
     *
     * Sets a new value for property {@link #getFieldGroupIds fieldGroupIds}.
     *
     * The IDs of a logical field group that this control belongs to.
     *
     * All fields in a logical field group should share the same `fieldGroupId`. Once a logical field group
     * is left, the `validateFieldGroup` event is fired.
     *
     * For backward compatibility with older releases, field group IDs are syntactically not limited, but it
     * is suggested to use only valid {@link sap.ui.core.ID}s.
     *
     * See {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field
     * Group} documentation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFieldGroupIds(
      /**
       * New value for property `fieldGroupIds`
       */
      sFieldGroupIds?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen.
     *
     * If set to false, a placeholder will be rendered to mark the location of the invisible control in the
     * DOM of the current page. The placeholder will be hidden and have zero dimensions (`display: none`).
     *
     * Also see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of
     * this control's root HTML element, depending on the value of "bAdd": if bAdd is true, sStyleClass will
     * be added. If bAdd is not given, sStyleClass will be removed if it is currently present and will be added
     * if not present. If sStyleClass is null or empty string, the call is ignored.
     *
     * See addStyleClass and removeStyleClass for further documentation.
     *
     * @returns Returns `this` to allow method chaining
     */
    toggleStyleClass(
      /**
       * the CSS class name to be added or removed
       */
      sStyleClass: string,
      /**
       * whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will
       * be toggled (removed, if present, and added if not present)
       */
      bAdd?: boolean
    ): this;
    /**
     * Triggers the `validateFieldGroup` event for this control.
     *
     * Called by `sap.ui.core.UIArea` if a field group should be validated after it lost the focus or when the
     * key combination was pressed that was configured to trigger validation.
     *
     * By default, the `RETURN` key without any modifier keys triggers validation. There's no public API to
     * change that key combination.
     *
     * See {@link #attachValidateFieldGroup}.
     */
    triggerValidateFieldGroup(
      /**
       * IDs of the field groups that should be validated
       */
      aFieldGroupIds: string[]
    ): void;
  }

  export interface $ControlSettings extends $ElementSettings {
    /**
     * @deprecated (since 1.69) - The blocked property is deprecated. There is no accessibility support for
     * this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation,
     * e.g. List controls.
     *
     * Whether the control is currently in blocked state.
     */
    blocked?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Whether the control is currently in busy state.
     */
    busy?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * The delay in milliseconds, after which the busy indicator will show up for this control.
     */
    busyIndicatorDelay?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.54
     *
     * The size of the BusyIndicator. For controls with a width smaller 3rem a `sap.ui.core.BusyIndicatorSize.Small`
     * should be used. If the size could vary in width and the width could get smaller than 3rem, the `sap.ui.core.BusyIndicatorSize.Auto`
     * option could be used. The default is set to `sap.ui.core.BusyIndicatorSize.Medium` For a full screen
     * BusyIndicator use `sap.ui.core.BusyIndicatorSize.Large`.
     */
    busyIndicatorSize?:
      | (BusyIndicatorSize | keyof typeof BusyIndicatorSize)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Whether the control should be visible on the screen.
     *
     * If set to false, a placeholder will be rendered to mark the location of the invisible control in the
     * DOM of the current page. The placeholder will be hidden and have zero dimensions (`display: none`).
     *
     * Also see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.31
     *
     * The IDs of a logical field group that this control belongs to.
     *
     * All fields in a logical field group should share the same `fieldGroupId`. Once a logical field group
     * is left, the `validateFieldGroup` event is fired.
     *
     * For backward compatibility with older releases, field group IDs are syntactically not limited, but it
     * is suggested to use only valid {@link sap.ui.core.ID}s.
     *
     * See {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field
     * Group} documentation.
     */
    fieldGroupIds?: string[] | PropertyBindingInfo | `{${string}}`;

    /**
     * Event is fired if a logical field group defined by `fieldGroupIds` of a control was left or when the
     * user explicitly pressed the key combination that triggers validation.
     *
     * By default, the `RETURN` key without any modifier keys triggers validation, see {@link #triggerValidateFieldGroup}.
     *
     * Listen to this event to validate data of the controls belonging to a field group. See {@link #setFieldGroupIds},
     * or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.
     */
    validateFieldGroup?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/Core" {
  import Control from "sap/ui/core/Control";

  import { ID } from "sap/ui/core/library";

  import UI5Element from "sap/ui/core/Element";

  import Component from "sap/ui/core/Component";

  import RenderManager from "sap/ui/core/RenderManager";

  import UIArea from "sap/ui/core/UIArea";

  import Type from "sap/ui/model/Type";

  import Application from "sap/ui/app/Application";

  import Configuration from "sap/ui/core/Configuration";

  import EventBus from "sap/ui/core/EventBus";

  import ResourceBundle from "sap/base/i18n/ResourceBundle";

  import MessageManager from "sap/ui/core/message/MessageManager";

  import Metadata from "sap/ui/base/Metadata";

  import Model from "sap/ui/model/Model";

  import Interface from "sap/ui/base/Interface";

  /**
   * Core Class of the SAP UI Library.
   *
   * This class boots the Core framework and makes it available for the application via method `sap.ui.getCore()`.
   *
   * Example:
   * ```javascript
   *
   *
   *   var oCore = sap.ui.getCore();
   *
   * ```
   *
   *
   * With methods of the Core framework you can {@link #attachInit execute code} after the framework has been
   * initialized. It provides access to the {@link #getConfiguration configuration} and exposes events that
   * an application or a control can register to (e.g. {@link #event:localizationChanged localizationChanged},
   * {@link #event:parseError parseError}, {@link #event:validationError validationError}, {@link #event:formatError
   * formatError}, {@link #event:validationSuccess validationSuccess}).
   *
   * Example:
   * ```javascript
   *
   *
   *   oCore.attachInit(function() {
   *     if ( oCore.getConfiguration().getRTL() ) {
   *       ...
   *     }
   *   });
   *
   *   oCore.attachLocalizationChanged(function(oEvent) {
   *     ...
   *   });
   *
   * ```
   */
  interface Core {
    /**
     * Creates a new subclass of class sap.ui.core.Core with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    extend(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: object,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Core.
     *
     * @returns Metadata object describing this class
     */
    getMetadata(): Metadata;
    /**
     * Enforces an immediate update of the visible UI (aka "rendering").
     *
     * In general, applications should avoid calling this method and instead let the framework manage any necessary
     * rendering.
     */
    applyChanges(): void;
    /**
     * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt
     * the application).
     *
     * By default, the theme files are expected to be located at path relative to the respective control library
     * ([libraryLocation]/themes/[themeName]). Different locations can be configured by using the method setThemePath()
     * or by using the second parameter "sThemeBaseUrl" of applyTheme(). Usage of this second parameter is a
     * shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
     *
     * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base
     * folder below which the control library folders are located. E.g. if the CSS files are not located relative
     * to the root location of UI5, but instead they are at locations like http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
     * then the URL that needs to be given is: http://my.server/myapp/resources All theme resources are then
     * loaded from below this folder - except if for a certain library a different location has been registered.
     *
     * If the theme resources are not all either below this base location or with their respective libraries,
     * then setThemePath must be used to configure individual locations.
     */
    applyTheme(
      /**
       * the name of the theme to be loaded
       */
      sThemeName: string,
      /**
       * the (optional) base location of the theme
       */
      sThemeBaseUrl?: string
    ): void;
    /**
     * Registers a listener for control events.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     */
    attachControlEvent(
      /**
       * Callback to be called for each control event
       */
      fnFunction: Function,
      /**
       * Optional context object to call the callback on
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:formatError formatError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFormatError(
      /**
       * An object that will be passed to the handler along with the event object when the event is fired
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:formatError formatError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFormatError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.13.2
     *
     * Registers a given function that is executed after the framework has been initialized.
     *
     * The given function will either be called as soon as the framework has been initialized or, if it has
     * been initialized already, it will be called immediately.
     *
     * More information about the initialization process and the steps it consists of can be found in the documentation
     * topic "{@link topic:91f2c9076f4d1014b6dd926db0e91070 Initialization Process}".
     */
    attachInit(
      /**
       * Function to be after initialization of the framework
       */
      fnFunction: Function
    ): void;
    /**
     * @deprecated (since 1.13.2) - Register with the more convenient {@link #attachInit} function instead
     *
     * Registers a given function that is executed after the framework has been initialized.
     *
     * The method is executed only once and only if the framework has not been initialized already. This could
     * be checked by calling {@link #isInitialized}, but in most cases it is more convenient to use {@link #attachInit}
     * instead. This guarantees that the given function is executed exactly once, independent of the state of
     * the framework.
     */
    attachInitEvent(
      /**
       * Function that is called after initialization of the framework
       */
      fnFunction: Function
    ): void;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.61) - Use `IntervalTrigger.addListener()` from "sap/ui/core/IntervalTrigger" module.
     *
     * Registers a listener to the central interval timer.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to the interval timer instance.
     */
    attachIntervalTimer(
      /**
       * Callback to be called periodically
       */
      fnFunction: Function,
      /**
       * Optional context object to call the callback on
       */
      oListener?: object
    ): void;
    /**
     * Register a listener for the {@link #event:localizationChanged localizationChanged} event.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     */
    attachLocalizationChanged(
      /**
       * Callback to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the function on
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:ThemeChanged ThemeChanged} event of this `sap.ui.core.Core`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to a dummy event provider object.
     */
    attachThemeChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationError validationError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationError validationError} event of `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationSuccess validationSuccess} event of
     * `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationSuccess(
      /**
       * The object, that should be passed along with the event-object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:validationSuccess validationSuccess} event of
     * `sap.ui.core.Core`.
     *
     * When called, the context of the listener (its `this`) will be bound to `oListener` if specified, otherwise
     * it will be bound to a dummy event provider object.
     *
     * Please note that this event is a bubbling event and may already be canceled before reaching the core.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachValidationSuccess(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): this;
    /**
     * Returns a list of all controls with a field group ID. See {@link sap.ui.core.Control#checkFieldGroupIds
     * Control.prototype.checkFieldGroupIds} for a description of the `vFieldGroupIds` parameter.
     *
     * @returns The list of controls with matching field group IDs
     */
    byFieldGroupId(
      /**
       * ID of the field group or an array of field group IDs to match
       */
      vFieldGroupIds?: string | string[]
    ): Control[];
    /**
     * Returns the registered element with the given ID, if any.
     *
     * The ID must be the globally unique ID of an element, the same as returned by `oElement.getId()`.
     *
     * When the element has been created from a declarative source (e.g. XMLView), that source might have used
     * a shorter, non-unique local ID. A search for such a local ID cannot be executed with this method. It
     * can only be executed on the corresponding scope (e.g. on an XMLView instance), by using the {@link sap.ui.core.mvc.View#byId
     * View#byId} method of that scope.
     *
     * @returns Element with the given ID or `undefined`
     */
    byId(
      /**
       * ID of the element to search for
       */
      sId: ID | null | undefined
    ): UI5Element | undefined;
    /**
     * @deprecated (since 1.95) - Please use {@link sap.ui.core.Component.create Component.create} instead.
     *
     * Creates a component with the provided id and settings.
     *
     * When the optional parameter `sUrl` is given, then all request for resources of the library will be redirected
     * to the given URL. This is convenience for a call to
     * ```javascript
     *
     *   sap.ui.loader.config({
     *       paths: {
     *         "lib/with/slashes": vUrl
     *       }
     *   });
     * ```
     *
     *
     * @returns The created component instance or a promise on it in the async use case
     */
    createComponent(
      /**
       * name of the component to import or object containing all needed parameters
       */
      vComponent:
        | string
        | {
            /**
             * name of the component to import
             */
            name?: string;
            /**
             * URL to load the component from
             */
            url?: string;
            /**
             * ID for the component instance
             */
            id?: string;
            /**
             * settings object for the component
             */
            settings?: object;
            /**
             * user specific data which is available during the whole lifecycle of the component
             */
            componentData?: any;
          },
      /**
       * the URL to load the component from
       */
      sUrl?: string,
      /**
       * the ID for the component instance
       */
      sId?: string,
      /**
       * the settings object for the component
       */
      mSettings?: object
    ): Component | Promise<Component>;
    /**
     * Returns a new instance of the RenderManager for exclusive use by the caller.
     *
     * The caller must take care to destroy the render manager when it is no longer needed. Calling this method
     * before the Core has been {@link #isInitialized initialized}, is not recommended.
     *
     * @returns New instance of the RenderManager
     */
    createRenderManager(): RenderManager;
    /**
     * @deprecated (since 1.1) - use {@link sap.ui.core.Control#placeAt Control#placeAt} instead!
     *
     * Creates a new {@link sap.ui.core.UIArea UIArea}.
     *
     * @returns a new UIArea
     */
    createUIArea(
      /**
       * a DOM Element or ID string of the UIArea
       */
      oDomRef: string | Element
    ): UIArea;
    /**
     * Unregisters a listener for control events.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachControlEvent(
      /**
       * Function to unregister
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:formatError formatError} event of `sap.ui.core.Core`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFormatError(
      /**
       * The callback function to unregister
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.61) - Use `IntervalTrigger.removeListener()` from "sap/ui/core/IntervalTrigger"
     * module.
     *
     * Unregisters a listener for the central interval timer.
     *
     * A listener will only be unregistered if the same function/context combination is given as in the `attachIntervalTimer`
     * call.
     */
    detachIntervalTimer(
      /**
       * function to unregister
       */
      fnFunction: Function,
      /**
       * context object given during registration
       */
      oListener?: object
    ): void;
    /**
     * Unregister a listener from the {@link #event:localizationChanged localizationChanged} event.
     *
     * The listener will only be unregistered if the same function/context combination is given as in the call
     * to `attachLocalizationListener`.
     */
    detachLocalizationChanged(
      /**
       * Callback to be deregistered
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:parseError parseError} event of `sap.ui.core.Core`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachParseError(
      /**
       * The callback function to unregister.
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:ThemeChanged ThemeChanged} event of this `sap.ui.core.Core`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachThemeChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which the given function had to be called.
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validationError validationError} event of
     * `sap.ui.core.Core`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidationError(
      /**
       * The callback function to unregister
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:validationSuccess validationSuccess} event
     * of `sap.ui.core.Core`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachValidationSuccess(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:formatError formatError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFormatError(
      /**
       * Parameters to pass along with the event.
       */
      oParameters?: {
        /**
         * Element where the format error occurred
         */
        element: UI5Element;
        /**
         * Name of the property of the element where the format error occurred
         */
        property: string;
        /**
         * Type of the property
         */
        type: Type;
        /**
         * Value of the property which was entered when the format error occurred
         */
        newValue: any;
        /**
         * Value of the property which was present before a new value was entered (before the format error)
         */
        oldValue: any;
        /**
         * Exception object which occurred and has more information about the format error
         */
        exception: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:parseError parseError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireParseError(
      /**
       * Parameters to pass along with the event.
       */
      oParameters?: {
        /**
         * Element where the parse error occurred
         */
        element: UI5Element;
        /**
         * Name of the property of the element where the parse error occurred
         */
        property: string;
        /**
         * Type of the property
         */
        type: Type;
        /**
         * Value of the property which was entered when the parse error occurred
         */
        newValue: object;
        /**
         * Value of the property which was present before a new value was entered (before the parse error)
         */
        oldValue: object;
        /**
         * Exception object which occurred and has more information about the parse error
         */
        exception: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validationError validationError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidationError(
      /**
       * Parameters to pass along with the event.
       */
      oParameters?: {
        /**
         * The Element where the validation error occurred
         */
        element: UI5Element;
        /**
         * Property name of the element where the validation error occurred
         */
        property: string;
        /**
         * Type of the property
         */
        type: Type;
        /**
         * Value of the property which was entered when the validation error occurred
         */
        newValue: object;
        /**
         * Value of the property which was present before a new value was entered (before the validation error)
         */
        oldValue: object;
        /**
         * Exception object which occurred and has more information about the validation error
         */
        exception: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:validationSuccess validationSuccess} to attached listeners.
     *
     * Expects following event parameters:
     * 	 - 'element' of type `sap.ui.core.Element`
     * 	 - 'property' of type `string`
     * 	 - 'type' of type `string`
     * 	 - 'newValue' of type `object`
     * 	 - 'oldValue' of type `object`
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireValidationSuccess(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @deprecated (since 1.15.1) - The Component class is enhanced to take care about the Application code.
     *
     * Returns the instance of the application (if exists).
     *
     * @returns instance of the current application
     */
    getApplication(): Application;
    /**
     * @deprecated (since 1.95) - Please use {@link sap.ui.core.Component.get Component.get} instead.
     *
     * Returns the registered component for the given id, if any.
     *
     * @returns the component for the given id
     */
    getComponent(sId: string): Component;
    /**
     * Returns the Configuration of the Core.
     *
     * @returns the Configuration of the current Core.
     */
    getConfiguration(): Configuration;
    /**
     * @deprecated (since 1.1) - use `sap.ui.core.Core.byId` instead!
     *
     * Returns the registered element for the given ID, if any.
     *
     * @returns Element for the given ID or `undefined`
     */
    getControl(
      /**
       * ID of the control to retrieve
       */
      sId: ID | null | undefined
    ): UI5Element | undefined;
    /**
     * Returns the Id of the control/element currently in focus.
     *
     * @returns the Id of the control/element currently in focus.
     */
    getCurrentFocusedControlId(): string;
    /**
     * @deprecated (since 1.1) - use `sap.ui.core.Core.byId` instead!
     *
     * Returns the registered element for the given ID, if any.
     *
     * @returns Element for the given ID or `undefined`
     */
    getElementById(
      /**
       * ID of the element to retrieve
       */
      sId: ID | null | undefined
    ): UI5Element | undefined;
    /**
     * @SINCE 1.8.0
     *
     * Returns the event bus.
     *
     * @returns the event bus
     */
    getEventBus(): EventBus;
    /**
     * Retrieves a resource bundle for the given library and locale.
     *
     * If only one argument is given, it is assumed to be the libraryName. The locale then falls back to the
     * current {@link sap.ui.core.Configuration#getLanguage session locale}. If no argument is given, the library
     * also falls back to a default: "sap.ui.core".
     *
     * Configuration via App Descriptor: When the App Descriptor for the library is available without further
     * request (manifest.json has been preloaded) and when the App Descriptor is at least of version 1.9.0 or
     * higher, then this method will evaluate the App Descriptor entry `"sap.ui5" / "library" / "i18n"`.
     *
     * 	 - When the entry is `true`, a bundle with the default name "messagebundle.properties" will be loaded
     *
     * 	 - If it is a string, then that string will be used as name of the bundle
     * 	 - If it is `false`, no bundle will be loaded and the result will be `undefined`
     *
     * Caching: Once a resource bundle for a library has been loaded, it will be cached by this method. Further
     * calls for the same library and locale won't create new requests, but return the already loaded bundle.
     * There's therefore no need for control code to cache the returned bundle for a longer period of time.
     * Not further caching the result also prevents stale texts after a locale change.
     *
     * Asynchronous Loading: The asynchronous variant of {@link #loadLibrary} will evaluate the same descriptor
     * entry as described above. If it is not `false`, loading the main resource bundle of the library will
     * become a subtask of the asynchronous loading of the library.
     *
     * Due to this preload of the main bundle and the caching behavior of this method, controls in such a library
     * still can use the synchronous variant of `getLibraryResourceBundle` in their API, behavior and rendering
     * code. Only when the bundle is needed at module execution time (by top level code in a control module),
     * then the asynchronous variant of this method should be preferred.
     *
     * @returns The best matching resource bundle for the given parameters or `undefined`; in asynchronous case
     * a Promise on that bundle is returned
     */
    getLibraryResourceBundle(
      /**
       * Name of the library to retrieve the bundle for
       */
      sLibraryName?: string,
      /**
       * Locale to retrieve the resource bundle for
       */
      sLocale?: string,
      /**
       * Whether the resource bundle is loaded asynchronously
       */
      bAsync?: boolean
    ): ResourceBundle | undefined | Promise<ResourceBundle | undefined>;
    /**
     * Retrieves a resource bundle for the given library and locale.
     *
     * If only one argument is given, it is assumed to be the libraryName. The locale then falls back to the
     * current {@link sap.ui.core.Configuration#getLanguage session locale}. If no argument is given, the library
     * also falls back to a default: "sap.ui.core".
     *
     * Configuration via App Descriptor: When the App Descriptor for the library is available without further
     * request (manifest.json has been preloaded) and when the App Descriptor is at least of version 1.9.0 or
     * higher, then this method will evaluate the App Descriptor entry `"sap.ui5" / "library" / "i18n"`.
     *
     * 	 - When the entry is `true`, a bundle with the default name "messagebundle.properties" will be loaded
     *
     * 	 - If it is a string, then that string will be used as name of the bundle
     * 	 - If it is `false`, no bundle will be loaded and the result will be `undefined`
     *
     * Caching: Once a resource bundle for a library has been loaded, it will be cached by this method. Further
     * calls for the same library and locale won't create new requests, but return the already loaded bundle.
     * There's therefore no need for control code to cache the returned bundle for a longer period of time.
     * Not further caching the result also prevents stale texts after a locale change.
     *
     * Asynchronous Loading: The asynchronous variant of {@link #loadLibrary} will evaluate the same descriptor
     * entry as described above. If it is not `false`, loading the main resource bundle of the library will
     * become a subtask of the asynchronous loading of the library.
     *
     * Due to this preload of the main bundle and the caching behavior of this method, controls in such a library
     * still can use the synchronous variant of `getLibraryResourceBundle` in their API, behavior and rendering
     * code. Only when the bundle is needed at module execution time (by top level code in a control module),
     * then the asynchronous variant of this method should be preferred.
     *
     * @returns The best matching resource bundle for the given parameters or `undefined`; in asynchronous case
     * a Promise on that bundle is returned
     */
    getLibraryResourceBundle(
      /**
       * Name of the library to retrieve the bundle for
       */
      sLibraryName?: string,
      /**
       * Whether the resource bundle is loaded asynchronously
       */
      bAsync?: boolean
    ): ResourceBundle | undefined | Promise<ResourceBundle | undefined>;
    /**
     * Returns a map of library info objects for all currently loaded libraries, keyed by their names.
     *
     * The structure of the library info objects matches the structure of the info object that the {@link #initLibrary}
     * method expects. Only property names documented with `initLibrary` should be accessed, any additional
     * properties might change or disappear in future. When a property does not exists, its default value (as
     * documented with `initLibrary`) should be assumed.
     *
     * **Note:** The returned info objects must not be modified. They might be a living copy of the internal
     * data (for efficiency reasons) and the framework is not prepared to handle modifications to these objects.
     *
     * @returns Map of library info objects keyed by the library names.
     */
    getLoadedLibraries(): Record<string, Object>;
    /**
     * @SINCE 1.33.0
     *
     * Returns the active `MessageManager` instance.
     */
    getMessageManager(): MessageManager;
    /**
     * Get the model with the given model name.
     *
     * The name can be omitted to reference the default model or it must be a non-empty string.
     *
     * Note: to be compatible with future versions of this API, applications must not use the value `null`,
     * the empty string `""` or the string literals `"null"` or `"undefined"` as model name.
     *
     * @returns oModel
     */
    getModel(
      /**
       * name of the model to be retrieved
       */
      sName?: string
    ): Model;
    /**
     * @deprecated (since 0.15.0) - Replaced by `createRenderManager()`
     *
     * Creates a new `RenderManager` instance for use by the caller.
     *
     * @returns A newly createdRenderManeger
     */
    getRenderManager(): RenderManager;
    /**
     * @deprecated (since 1.95) - Please use {@link module:sap/ui/core/ComponentSupport} instead. See also {@link
     * topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.
     *
     * Returns the instance of the root component (if exists).
     *
     * @returns instance of the current root component
     */
    getRootComponent(): Component;
    /**
     * Returns the static, hidden area DOM element belonging to this core instance.
     *
     * It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.
     *
     * If it is not yet available, a DIV is created and appended to the body.
     *
     * @returns the static, hidden area DOM element belonging to this core instance.
     */
    getStaticAreaRef(): Element;
    /**
     * @deprecated (since 1.29.1) - Require 'sap/ui/core/tmpl/Template' and use {@link sap.ui.core.tmpl.Template.byId
     * Template.byId} instead.
     *
     * Returns the registered template for the given id, if any.
     *
     * @returns the template for the given id
     */
    getTemplate(sId: string): Component;
    /**
     * @deprecated (since 1.107) - use {@link sap.ui.core.UIArea.registry#get UIArea.registry#get} instead,
     * but note that `UIArea.registry.get` only accepts the ID of the UIArea as argument.
     *
     * Returns the {@link sap.ui.core.UIArea UIArea} with the given ID or that belongs to the given DOM element.
     *
     * @returns UIArea with the given ID or DOM element or `null` or `undefined`.
     */
    getUIArea(
      /**
       * DOM element or ID of the UIArea
       */
      o: string | Element
    ): UIArea | null | undefined;
    /**
     * Returns `true` if there are any pending rendering tasks or when such rendering tasks are currently being
     * executed.
     *
     * @returns true if there are pending (or executing) rendering tasks.
     */
    getUIDirty(): boolean;
    /**
     * Check if a Model is set to the core
     *
     * @returns true or false
     */
    hasModel(): boolean;
    /**
     * Includes a library theme into the current page (if a variant is specified it will include the variant
     * library theme)
     */
    includeLibraryTheme(
      /**
       * the name of the UI library
       */
      sLibName: string,
      /**
       * the variant to include (optional)
       */
      sVariant?: string,
      /**
       * to be used only by the Core
       */
      sQuery?: string
    ): void;
    /**
     * Provides the framework with information about a library.
     *
     * This method is intended to be called exactly once while the main module of a library (its `library.js`
     * module) is executing, typically at its begin. The single parameter `oLibInfo` is an info object that
     * describes the content of the library.
     *
     * When the `oLibInfo` has been processed, a normalized version of it will be kept and will be returned
     * as library information in later calls to {@link #getLoadedLibraries}. Finally, `initLibrary` fires (the
     * currently private) {@link #event:LibraryChanged} event with operation 'add' for the newly loaded library.
     *
     * Side Effects:
     *
     * While analyzing the `oLibInfo`, the framework takes some additional actions:
     *
     *
     * 	 - If the info object contains a list of `interfaces`, they will be registered with the {@link sap.ui.base.DataType}
     * 			class to make them available as aggregation types in managed objects.
     *
     *
     * 	 - If the object contains a list of `controls` or `elements`, {@link sap.ui.lazyRequire lazy stubs}
     * 			will be created for their constructor as well as for their static `extend` and `getMetadata` methods.
     *  **Note:** Future versions might abandon the concept of lazy stubs as it requires synchronous XMLHttpRequests
     * which have been deprecated (see {@link http://xhr.spec.whatwg.org}). To be on the safe side, productive
     * applications should always require any modules that they directly depend on.
     *
     *
     * 	 - With the `noLibraryCSS` property, the library can be marked as 'theming-free'. Otherwise, the framework
     * 			will add a <link> tag to the page's head, pointing to the library's theme-specific stylesheet.
     * 			The creation of such a <link> tag can be suppressed with the {@link sap.ui.core.Configuration global
     * 			configuration option} `preloadLibCss`. It can contain a list of library names for which no stylesheet
     * 			should be included. This is e.g. useful when an application merges the CSS for multiple libraries and
     * 			already loaded the resulting stylesheet.
     *
     *
     * 	 - If a list of library `dependencies` is specified in the info object, those libraries will be loaded
     * 			synchronously by `initLibrary`.
     *  **Note:** Dependencies between libraries don't have to be modeled as AMD dependencies. Only when enums
     * or types from an additional library are used in the coding of the `library.js` module, the library should
     * be additionally listed in the AMD dependencies.
     *
     * Last but not least, higher layer frameworks might want to include their own metadata for libraries. The
     * property `extensions` might contain such additional metadata. Its structure is not defined by the framework,
     * but it is strongly suggested that each extension only occupies a single property in the `extensions`
     * object and that the name of that property contains some namespace information (e.g. library name that
     * introduces the feature) to avoid conflicts with other extensions. The framework won't touch the content
     * of `extensions` but will make it available in the library info objects returned by {@link #getLoadedLibraries}.
     *
     * Relationship to Descriptor for Libraries (manifest.json):
     *
     * The information contained in `oLibInfo` is partially redundant to the content of the descriptor for the
     * same library (its `manifest.json` file). Future versions of UI5 might ignore the information provided
     * in `oLibInfo` and might evaluate the descriptor file instead. Library developers therefore should keep
     * the information in both files in sync.
     *
     * When the `manifest.json` is generated from the `.library` file (which is the default for UI5 libraries
     * built with Maven), then the content of the `.library` and `library.js` files must be kept in sync.
     *
     * @returns As of version 1.101; returns the library namespace, based on the given library name. Returns
     * 'undefined' if no library name is provided.
     */
    initLibrary(
      /**
       * Info object for the library
       */
      oLibInfo: {
        /**
         * Name of the library; when given it must match the name by which the library has been loaded
         */
        name?: string;
        /**
         * Version of the library
         */
        version: string;
        /**
         * List of libraries that this library depends on; names are in dot notation (e.g. "sap.ui.core")
         */
        dependencies?: string[];
        /**
         * List of names of types that this library provides; names are in dot notation (e.g. "sap.ui.core.CSSSize")
         */
        types?: string[];
        /**
         * List of names of interface types that this library provides; names are in dot notation (e.g. "sap.ui.core.PopupInterface")
         */
        interfaces?: string[];
        /**
         * Names of control types that this library provides; names are in dot notation (e.g. "sap.ui.core.ComponentContainer")
         */
        controls?: string[];
        /**
         * Names of element types that this library provides (excluding controls); names are in dot notation (e.g.
         * "sap.ui.core.Item")
         */
        elements?: string[];
        /**
         * Indicates whether the library doesn't provide / use theming. When set to true, no library.css will be
         * loaded for this library
         */
        noLibraryCSS?: boolean;
        /**
         * Potential extensions of the library metadata; structure not defined by the UI5 core framework.
         */
        extensions?: object;
      }
    ): object | undefined;
    /**
     * Returns true if the Core has already been initialized. This means that instances of RenderManager etc.
     * do already exist and the init event has already been fired (and will not be fired again).
     *
     * @returns whether the Core has already been initialized
     */
    isInitialized(): boolean;
    /**
     * Returns the locked state of the `sap.ui.core.Core`
     *
     * @returns locked state
     */
    isLocked(): boolean;
    /**
     * Check if the script is running on mobile
     *
     * @returns true or false
     */
    isMobile(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks whether the given DOM element is the root of the static area.
     *
     * @returns Whether the given DOM element is the root of the static area
     */
    isStaticAreaRef(
      /**
       * DOM element to check
       */
      oDomRef: Element
    ): boolean;
    /**
     * Returns true, if the styles of the current theme are already applied, false otherwise.
     *
     * This function must not be used before the init event of the Core. If the styles are not yet applied a
     * theme changed event will follow when the styles will be applied.
     *
     * @returns whether the styles of the current theme are already applied
     */
    isThemeApplied(): boolean;
    /**
     * Loads the given library and its dependencies and makes its content available to the application.
     *
     * What it does:
     *
     * When library preloads are not suppressed for the given library, then a library-preload bundle will be
     * loaded for it. By default, the bundle will be loaded synchronously (for compatibility reasons). Only
     * when the optional parameter `vUrl` is given as `true` or as a configuration object with a property of
     * `async:true`, then the bundle will be loaded asynchronously and a `Promise` will be returned (preferred
     * usage).
     *
     * After preloading the bundle, dependency information from the bundle is evaluated and any missing libraries
     * are also preloaded.
     *
     * Only then the library entry module (named `your/lib/library.js`) will be required and executed.
     * The module is supposed to call `sap.ui.getCore().initLibrary(...)` providing the framework with additional
     * metadata about the library, e.g. its version, the set of contained enums, types, interfaces, controls
     * and elements and whether the library requires CSS. If the library requires CSS, a <link> will be
     * added to the page referring to the corresponding `library.css` stylesheet for the library and the current
     * theme.
     *
     * When the optional parameter `vUrl` is given as a string or when a configuration object is given with
     * a non-empty, string-valued property `url`, then that URL will be registered for the namespace of the
     * library and all resources will be loaded from that location. This is convenience for a call like
     * ```javascript
     *
     *   sap.ui.loader.config({
     *     paths: {
     *       "lib/with/slashes": vUrl
     *     }
     *   });
     * ```
     *
     *
     * When the given library has been loaded already, no further action will be taken, especially, a given
     * URL will not be registered! In the case of asynchronous loading, a Promise will be returned, but will
     * be resolved immediately.
     *
     * When to use:
     *
     * For applications that follow the best practices and use components with component descriptors (manifest.json),
     * the framework will load all declared mandatory libraries and their dependencies automatically before
     * instantiating the application component.
     *
     * The same is true for libraries that are listed in the bootstrap configuration (e.g. with the attribute
     * `data-sap-ui-libs`). They will be loaded before the `init` event of the UI5 Core is fired.
     *
     * Only when an app declares a library to be a lazy library dependency or when code does not use descriptors
     * at all, then an explicit call to `loadLibrary` becomes necessary. The call should be made before artifacts
     * (controls, elements, types, helpers, modules etc.) from the library are used or required. This allows
     * the framework to optimize access to those artifacts.
     *
     * For example, when an app uses a heavy-weight charting library that shouldn't be loaded during startup,
     * it can declare it as "lazy" and load it just before it loads and displays a view that uses the charting
     * library:
     * ```javascript
     *
     *   sap.ui.getCore().loadLibrary("heavy.charting", {async: true})
     *     .then(function() {
     *       View.create({
     *         name: "myapp.views.HeavyChartingView",
     *         type: ViewType.XML
     *       });
     *     });
     * ```
     *
     *
     * @returns An info object for the library (sync) or a Promise on it (async).
     */
    loadLibrary(
      /**
       * Name of the library to load
       */
      sLibrary: string,
      /**
       * URL to load the library from or the async flag or a complex configuration object
       */
      vUrl?:
        | string
        | boolean
        | {
            /**
             * Whether to load the library asynchronously
             */
            async?: boolean;
            /**
             * URL to load the library from
             */
            url?: string;
          }
    ): object | Promise<object>;
    /**
     * Locks the Core. No browser events are dispatched to the controls.
     *
     * Lock should be called before and after the DOM is modified for rendering, roundtrips... Exceptions might
     * be the case for asynchronous UI behavior
     */
    lock(): void;
    /**
     * Triggers a realignment of controls
     *
     * This method should be called after changing the cozy/compact CSS class of a DOM element at runtime, for
     * example at the `<body>` tag. Controls can listen to the themeChanged event to realign their appearance
     * after changing the theme. Changing the cozy/compact CSS class should then also be handled as a theme
     * change. In more simple scenarios where the cozy/compact CSS class is added to a DOM element which contains
     * only a few controls it might not be necessary to trigger the realigment of all controls placed in the
     * DOM, for example changing the cozy/compact CSS class at a single control
     */
    notifyContentDensityChanged(): void;
    /**
     * @deprecated (since 1.73) - Plugins never have been meant as a public offering, but were intended for
     * internal usage only. They unfortunately allow access to all internals of the Core and therefore break
     * encapsulation and hinder evolution of the Core. The most common use case of accessing the set of all
     * controls/elements or all components can now be addressed by using the APIs {@link sap.ui.core.Element.registry}
     * or {@link sap.ui.core.Component.registry}, respectively. Future refactorings of the Core will only take
     * existing plugins in the OpenUI5 repository into account.
     *
     * Registers a Plugin to the `sap.ui.core.Core`, which lifecycle will be managed (start and stop).
     *
     * Plugin object need to implement two methods:
     * 	 - `startPlugin(oCore)`: will be invoked, when the Plugin should start (as parameter the reference to
     * 			the Core will be provided
     * 	 - `stopPlugin()`: will be invoked, when the Plugin should stop
     */
    registerPlugin(
      /**
       * reference to a Plugin object
       */
      oPlugin: object
    ): void;
    /**
     * Sets or unsets a model for the given model name.
     *
     * The `sName` must either be `undefined` (or omitted) or a non-empty string. When the name is omitted,
     * the default model is set/unset.
     *
     * When `oModel` is `null` or `undefined`, a previously set model with that name is removed from the Core.
     *
     * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants as
     * long as a descendant doesn't have its own model set for the given name.
     *
     * Note: to be compatible with future versions of this API, applications must not use the value `null`,
     * the empty string `""` or the string literals `"null"` or `"undefined"` as model name.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setModel(
      /**
       * the model to be set or `null` or `undefined`
       */
      oModel: Model,
      /**
       * the name of the model or `undefined`
       */
      sName?: string
    ): this;
    /**
     * @deprecated (since 1.1) - use {@link sap.ui.core.Control#placeAt oControl.placeAt(oDomRef, "only")} instead.
     *
     * Implicitly creates a new `UIArea` (or reuses an exiting one) for the given DOM reference and adds the
     * given control reference to the UIAreas content (existing content will be removed).
     */
    setRoot(
      /**
       * a DOM Element or Id (string) of the UIArea
       */
      oDomRef: string | Element,
      /**
       * the Control that should be the added to the `UIArea`.
       */
      oControl: Interface | Control
    ): void;
    /**
     * @SINCE 1.10
     *
     * Defines the root directory from below which UI5 should load the theme with the given name. Optionally
     * allows restricting the setting to parts of a theme covering specific control libraries.
     *
     * Example:
     * ```javascript
     *
     *   sap.ui.getCore().setThemeRoot("my_theme", "https://mythemeserver.com/allThemes");
     *   sap.ui.getCore().applyTheme("my_theme");
     * ```
     *
     *
     * will cause the following file to be loaded (assuming that the bootstrap is configured to load libraries
     * `sap.m` and `sap.ui.layout`):
     * ```javascript
     *
     *   https://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css
     *   https://mythemeserver.com/allThemes/sap/ui/layout/themes/my_theme/library.css
     *   https://mythemeserver.com/allThemes/sap/m/themes/my_theme/library.css
     * ```
     *
     *
     * If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_belize"
     * for a custom control library and this self-made part of the standard theme is at a different location
     * than the UI5 resources), you can also specify for which control libraries the setting should be used,
     * by giving an array with the names of the respective control libraries as second parameter:
     * ```javascript
     *
     *   sap.ui.getCore().setThemeRoot("sap_belize", ["my.own.library"], "https://mythemeserver.com/allThemes");
     * ```
     *
     *
     * This will cause the Belize theme to be loaded from the UI5 location for all standard libraries. Resources
     * for styling the `my.own.library` controls will be loaded from the configured location:
     * ```javascript
     *
     *   https://sdk.openui5.org/resources/sap/ui/core/themes/sap_belize/library.css
     *   https://sdk.openui5.org/resources/sap/ui/layout/themes/sap_belize/library.css
     *   https://sdk.openui5.org/resources/sap/m/themes/sap_belize/library.css
     *   https://mythemeserver.com/allThemes/my/own/library/themes/sap_belize/library.css
     * ```
     *
     *
     * If the custom theme should be loaded initially (via bootstrap attribute), the `themeRoots` property of
     * the `window["sap-ui-config"]` object must be used instead of calling `sap.ui.getCore().setThemeRoot(...)`
     * in order to configure the theme location early enough.
     *
     * @returns the Core, to allow method chaining
     */
    setThemeRoot(
      /**
       * Name of the theme for which to configure the location
       */
      sThemeName: string,
      /**
       * Optional library names to which the configuration should be restricted
       */
      aLibraryNames: string[],
      /**
       * Base URL below which the CSS file(s) will be loaded from
       */
      sThemeBaseUrl: string,
      /**
       * Force updating URLs of currently loaded theme
       */
      bForceUpdate?: boolean
    ): this;
    /**
     * @SINCE 1.10
     *
     * Defines the root directory from below which UI5 should load the theme with the given name. Optionally
     * allows restricting the setting to parts of a theme covering specific control libraries.
     *
     * Example:
     * ```javascript
     *
     *   sap.ui.getCore().setThemeRoot("my_theme", "https://mythemeserver.com/allThemes");
     *   sap.ui.getCore().applyTheme("my_theme");
     * ```
     *
     *
     * will cause the following file to be loaded (assuming that the bootstrap is configured to load libraries
     * `sap.m` and `sap.ui.layout`):
     * ```javascript
     *
     *   https://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css
     *   https://mythemeserver.com/allThemes/sap/ui/layout/themes/my_theme/library.css
     *   https://mythemeserver.com/allThemes/sap/m/themes/my_theme/library.css
     * ```
     *
     *
     * If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_belize"
     * for a custom control library and this self-made part of the standard theme is at a different location
     * than the UI5 resources), you can also specify for which control libraries the setting should be used,
     * by giving an array with the names of the respective control libraries as second parameter:
     * ```javascript
     *
     *   sap.ui.getCore().setThemeRoot("sap_belize", ["my.own.library"], "https://mythemeserver.com/allThemes");
     * ```
     *
     *
     * This will cause the Belize theme to be loaded from the UI5 location for all standard libraries. Resources
     * for styling the `my.own.library` controls will be loaded from the configured location:
     * ```javascript
     *
     *   https://sdk.openui5.org/resources/sap/ui/core/themes/sap_belize/library.css
     *   https://sdk.openui5.org/resources/sap/ui/layout/themes/sap_belize/library.css
     *   https://sdk.openui5.org/resources/sap/m/themes/sap_belize/library.css
     *   https://mythemeserver.com/allThemes/my/own/library/themes/sap_belize/library.css
     * ```
     *
     *
     * If the custom theme should be loaded initially (via bootstrap attribute), the `themeRoots` property of
     * the `window["sap-ui-config"]` object must be used instead of calling `sap.ui.getCore().setThemeRoot(...)`
     * in order to configure the theme location early enough.
     *
     * @returns the Core, to allow method chaining
     */
    setThemeRoot(
      /**
       * Name of the theme for which to configure the location
       */
      sThemeName: string,
      /**
       * Base URL below which the CSS file(s) will be loaded from
       */
      sThemeBaseUrl: string,
      /**
       * Force updating URLs of currently loaded theme
       */
      bForceUpdate?: boolean
    ): this;
    /**
     * Unlocks the Core.
     *
     * Browser events are dispatched to the controls again after this method is called.
     */
    unlock(): void;
    /**
     * @deprecated (since 1.73) - Plugins never have been meant as a public offering, but were intended for
     * internal usage only. They unfortunately allow access to all internals of the Core and therefore break
     * encapsulation and hinder evolution of the Core. The most common use case of accessing the set of all
     * controls/elements or all components can now be addressed by using the APIs {@link sap.ui.core.Element.registry}
     * or {@link sap.ui.core.Component.registry}, respectively. Future refactorings of the Core will only take
     * existing plugins in the OpenUI5 repository into account.
     *
     * Unregisters a Plugin out of the `sap.ui.core.Core`
     */
    unregisterPlugin(
      /**
       * reference to a Plugin object
       */
      oPlugin: object
    ): void;
  }
  const Core: Core;
  export default Core;
}

declare module "sap/ui/core/CustomData" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Contains a single key/value pair of custom data attached to an `Element`.
   *
   * See method {@link sap.ui.core.Element#data Element.prototype.data} and the chapter {@link topic:91f0c3ee6f4d1014b6dd926db0e91070
   * Custom Data - Attaching Data Objects to Controls} in the documentation.
   */
  export default class CustomData extends UI5Element {
    /**
     * Constructor for a new `CustomData` element.
     */
    constructor(
      /**
       * initial settings for the new element
       */
      mSettings?: $CustomDataSettings
    );
    /**
     * Constructor for a new `CustomData` element.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new element
       */
      mSettings?: $CustomDataSettings
    );

    /**
     * Creates a new subclass of `CustomData` with name `sClassName` and enriches it with the information contained
     * in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend
     * Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class `sap.ui.core.CustomData`.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * The key of the data in this CustomData object. When the data is just stored, it can be any string, but
     * when it is to be written to HTML (`writeToDom == true`) then it must also be a valid HTML attribute name.
     * It must conform to the {@link sap.ui.core.ID} type and may contain no colon. To avoid collisions, it
     * also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-". If any restriction
     * is violated, a warning will be logged and nothing will be written to the DOM.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when
     * it is to be written to HTML (`writeToDom == true`) then it must be a string. If this restriction is violated,
     * a warning will be logged and nothing will be written to the DOM.
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * @SINCE 1.9.0
     *
     * Gets current value of property {@link #getWriteToDom writeToDom}.
     *
     * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions,
     * this custom data is written to the HTML root element of the control as a "data-*" attribute. If the key
     * is "abc" and the value is "cde", the HTML will look as follows:
     *
     *
     * ```javascript
     *
     *   <SomeTag ... data-abc="cde" ... >
     * ```
     *
     *
     * Thus the application can provide stable attributes by data binding which can be used for styling or identification
     * purposes.
     *
     * **ATTENTION:** use carefully to not create huge attributes or a large number of them.
     *
     * Default value is `false`.
     *
     * @returns Value of property `writeToDom`
     */
    getWriteToDom(): boolean;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * The key of the data in this CustomData object. When the data is just stored, it can be any string, but
     * when it is to be written to HTML (`writeToDom == true`) then it must also be a valid HTML attribute name.
     * It must conform to the {@link sap.ui.core.ID} type and may contain no colon. To avoid collisions, it
     * also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-". If any restriction
     * is violated, a warning will be logged and nothing will be written to the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when
     * it is to be written to HTML (`writeToDom == true`) then it must be a string. If this restriction is violated,
     * a warning will be logged and nothing will be written to the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue?: any
    ): this;
    /**
     * @SINCE 1.9.0
     *
     * Sets a new value for property {@link #getWriteToDom writeToDom}.
     *
     * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions,
     * this custom data is written to the HTML root element of the control as a "data-*" attribute. If the key
     * is "abc" and the value is "cde", the HTML will look as follows:
     *
     *
     * ```javascript
     *
     *   <SomeTag ... data-abc="cde" ... >
     * ```
     *
     *
     * Thus the application can provide stable attributes by data binding which can be used for styling or identification
     * purposes.
     *
     * **ATTENTION:** use carefully to not create huge attributes or a large number of them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWriteToDom(
      /**
       * New value for property `writeToDom`
       */
      bWriteToDom?: boolean
    ): this;
  }

  export interface $CustomDataSettings extends $ElementSettings {
    /**
     * The key of the data in this CustomData object. When the data is just stored, it can be any string, but
     * when it is to be written to HTML (`writeToDom == true`) then it must also be a valid HTML attribute name.
     * It must conform to the {@link sap.ui.core.ID} type and may contain no colon. To avoid collisions, it
     * also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-". If any restriction
     * is violated, a warning will be logged and nothing will be written to the DOM.
     */
    key?: string | PropertyBindingInfo;

    /**
     * The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when
     * it is to be written to HTML (`writeToDom == true`) then it must be a string. If this restriction is violated,
     * a warning will be logged and nothing will be written to the DOM.
     */
    value?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.9.0
     *
     * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions,
     * this custom data is written to the HTML root element of the control as a "data-*" attribute. If the key
     * is "abc" and the value is "cde", the HTML will look as follows:
     *
     *
     * ```javascript
     *
     *   <SomeTag ... data-abc="cde" ... >
     * ```
     *
     *
     * Thus the application can provide stable attributes by data binding which can be used for styling or identification
     * purposes.
     *
     * **ATTENTION:** use carefully to not create huge attributes or a large number of them.
     */
    writeToDom?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/date/CalendarWeekNumbering" {
  /**
   * @SINCE 1.108.0
   *
   * The `CalendarWeekNumbering` enum defines how to calculate calendar weeks. Each value defines:
   * 	 - The first day of the week,
   * 	 - the first week of the year.
   */
  enum CalendarWeekNumbering {
    /**
     * The default calendar week numbering:
     *
     * The framework determines the week numbering scheme; currently it is derived from the active format locale.
     * Future versions of UI5 might select a different week numbering scheme.
     */
    Default = "Default",
    /**
     * Official calendar week numbering in most of Europe (ISO 8601 standard):
     * 	Monday is first day of the week, the week containing January 4th is first week of the year.
     */
    ISO_8601 = "ISO_8601",
    /**
     * Official calendar week numbering in much of the Middle East (Middle Eastern calendar):
     * 	Saturday is first day of the week, the week containing January 1st is first week of the year.
     */
    MiddleEastern = "MiddleEastern",
    /**
     * Official calendar week numbering in the United States, Canada, Brazil, Israel, Japan, and other countries
     * (Western traditional calendar):
     * 	Sunday is first day of the week, the week containing January 1st is first week of the year.
     */
    WesternTraditional = "WesternTraditional",
  }
  export default CalendarWeekNumbering;
}

declare module "sap/ui/core/DeclarativeSupport" {
  import HTMLView from "sap/ui/core/mvc/HTMLView";

  /**
   * @SINCE 1.7.0
   *
   * Static class for enabling declarative UI support.
   */
  export default class DeclarativeSupport {
    constructor();

    /**
     * Enhances the given DOM element by parsing the Control and Elements info and creating the SAPUI5 controls
     * for them.
     */
    static compile(
      /**
       * the DOM element to compile
       */
      oElement: Element,
      /**
       * The view instance to use
       */
      oView?: HTMLView,
      /**
       * Whether the call of the function is recursive.
       */
      isRecursive?: boolean
    ): void;
  }
}

declare module "sap/ui/core/delegate/ItemNavigation" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Delegate for the navigation between DOM nodes with the keyboard.
   *
   * The `ItemNavigation` provides keyboard and mouse navigation between DOM nodes representing items. This
   * means that controls rendering a list of items can attach this delegate to get a common keyboard and mouse
   * support to navigate between these items. It is possible to navigate between the items via the arrow keys.
   * If needed, paging using the Page Up and Page Down keys is possible. (To activate call `setPageSize` with
   * a value > 0.) HOME and END keys are also supported. Focusing an item via mouse also is also supported.
   * For mouse navigation, the `mousedown` event is used.
   *
   * As the `ItemNavigation` works with DOM nodes, the items and the control area must be provided as DOM
   * references. There is one root DOM reference (set via `setRootDomRef`). All item DOM references (set via
   * `setItemDomRefs`) must be places somewhere inside of this root DOM reference. Only focusable items are
   * used for the navigation, meaning disabled items or separator items are just ignored by navigating through
   * the items. In some cases however, it makes sense to put the non-focusable items in the array of the DOM
   * references to keep the indexes stable or like in the calling control. **Hint:** To make a DOM reference
   * focusable a `tabindex` of -1 can be set.
   *
   * **Note** After re-rendering of the control or changing the DOM nodes of the control, the DOM references
   * of the `ItemNavigation` must be updated. Then the same item (corresponding to the index) will get the
   * focus.
   *
   * The `ItemNavigation` adjusts the `tabindex` of all DOM references relating to the current focused item.
   * So if the control containing the items gets the focus (e.g. via tab navigation), it is always the focused
   * items which will be focused.
   *
   * **Note:** If the `ItemNavigation` is nested in another `ItemNavigation` (e.g. `SegmentedButton` in `Toolbar`),
   * the `RootDomRef` will always have `tabindex` -1.
   *
   * Per default the `ItemNavigation` cycles over the items. It navigates again to the first item if the Arrow
   * Down or Arrow Right key is pressed while the last item has the focus. It navigates to the last item if
   * arrow up or arrow left is pressed while the first item has the focus. If you want to stop the navigation
   * at the first and last item, call the `setCycling` method with a value of `false`.
   *
   * It is possible to have multiple columns in the item navigation. If multiple columns are used, the keyboard
   * navigation changes. The Arrow Right and Arrow Left keys will take the user to the next or previous item,
   * and the Arrow Up and Arrow Down keys will navigate the same way but in a vertical direction.
   *
   * The `ItemNavigation` also allows setting a selected index that is used to identify the selected item.
   * Initially, if no other focus is set, the selected item will be the focused one. Note that navigating
   * through the items will not change the selected item, only the focus. (For example a radio group has one
   * selected item.)
   */
  export default class ItemNavigation extends EventProvider {
    /**
     * Creates an `ItemNavigation` delegate that can be attached to controls requiring capabilities for keyboard
     * navigation between items.
     */
    constructor(
      /**
       * The root DOM reference that includes all items
       */
      oDomRef: Element,
      /**
       * Array of DOM references representing the items for the navigation
       */
      aItemDomRefs: Element[],
      /**
       * Whether the selected element should be in the tab chain or not
       */
      bNotInTabChain?: boolean
    );

    /**
     * Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ItemNavigation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.delegate.ItemNavigation.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns disabled modifiers These modifiers will not be handled by the `ItemNavigation`
     *
     * @returns Object that includes event type with disabled keys as an array
     */
    getDisabledModifiers(
      /**
       * Object that includes event type with disabled keys as an array
       */
      oDisabledModifiers: object
    ): object;
    /**
     * Returns the array of item DOM references
     *
     * @returns Array of item DOM references
     */
    getItemDomRefs(): Element[];
    /**
     * Returns the root DOM reference surrounding the items
     *
     * @returns Root DOM reference
     */
    getRootDomRef(): Element;
    /**
     * Check whether given event has disabled modifier or not
     *
     * @returns Flag if disabled modifiers are set
     */
    hasDisabledModifier(
      /**
       * jQuery event
       */
      oEvent: jQuery.Event
    ): boolean;
    /**
     * Sets whether the items are displayed in columns.
     *
     * If columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous item of the column.
     * If the first or last item of the column is reached, the next focused item is then in the next or previous
     * column.
     *
     * @returns `this` to allow method chaining
     */
    setColumns(
      /**
       * Count of columns for the table mode or cycling mode
       */
      iColumns: int,
      /**
       * Forbids jumping to an other column with Arrow Up and Arrow Down keys
       */
      bNoColumnChange: boolean
    ): this;
    /**
     * Sets whether the `ItemNavigation` should cycle through the items.
     *
     * If cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys
     * are used.
     *
     * @returns `this` to allow method chaining
     */
    setCycling(
      /**
       * Set to true if cycling should be done, else false
       */
      bCycling: boolean
    ): this;
    /**
     * Sets the disabled modifiers These modifiers will not be handled by the `ItemNavigation`
     *
     *
     * ```javascript
     *
     * Example: Disable shift + up handling of the `ItemNavigation`
     *
     * oItemNavigation.setDisabledModifiers({
     *     sapnext : ["shift"]
     * });
     *
     * Possible keys are : "shift", "alt", "ctrl", "meta"
     * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
     * ```
     *
     *
     * @returns `this` to allow method chaining
     */
    setDisabledModifiers(
      /**
       * Object that includes event type with disabled keys as an array
       */
      oDisabledModifiers: Object
    ): this;
    /**
     * Sets behavior of HOME and END keys if columns are used.
     *
     * @returns `this` to allow method chaining
     */
    setHomeEndColumnMode(
      /**
       * HOME -> go to first item in row; END -> go to last item in row
       */
      bStayInRow: boolean,
      /**
       * HOME/END with CTRL -> go to first/last item of all
       */
      bCtrlEnabled: boolean
    ): this;
    /**
     * Sets the item DOM references as an array for the items
     *
     * @returns `this` to allow method chaining
     */
    setItemDomRefs(
      /**
       * Array of DOM references or DOM node list object, representing the items
       */
      aItemDomRefs: Element[]
    ): this;
    /**
     * Sets the page size of the item navigation to allow Page Up and Page Down keys.
     *
     * @returns `this` to allow method chaining
     */
    setPageSize(
      /**
       * The page size, needs to be at least 1
       */
      iPageSize: int
    ): this;
    /**
     * Sets the root DOM reference surrounding the items
     *
     * @returns `this` to allow method chaining
     */
    setRootDomRef(
      /**
       * Root DOM reference
       */
      oDomRef: Element
    ): this;
    /**
     * Sets the selected index if the used control supports selection.
     *
     * @returns `this` to allow method chaining
     */
    setSelectedIndex(
      /**
       * Index of the first selected item
       */
      iIndex: int
    ): this;
    /**
     * Sets whether the `ItemNavigation` should use the table mode to navigate through the items (navigation
     * in a grid).
     *
     * @returns `this` to allow method chaining
     */
    setTableMode(
      /**
       * Set to true if table mode should be used, else false
       */
      bTableMode: boolean,
      /**
       * This sets a different behavior for table mode. In this mode we keep using table navigation but there
       * are some differences. e.g.
       * 	 - Page-up moves focus to the first row, not to the first cell like in table mode
       * 	 - Page-down moves focus to the last row, not to the last cell like in table mode
       */
      bTableList?: boolean
    ): this;
  }
}

declare module "sap/ui/core/delegate/ScrollEnablement" {
  import BaseObject from "sap/ui/base/Object";

  import Control from "sap/ui/core/Control";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Delegate for touch scrolling on mobile devices.
   *
   * This delegate uses native scrolling of mobile and desktop browsers. Third party scrolling libraries are
   * not supported.
   *
   * Controls that implement ScrollEnablement should additionally provide the getScrollDelegate method that
   * returns the current instance of this delegate object
   */
  export default class ScrollEnablement extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a ScrollEnablement delegate that can be attached to Controls requiring capabilities for scrolling
     * of a certain part of their DOM.
     */
    constructor(
      /**
       * the Control of which this Scroller is the delegate
       */
      oControl: Control,
      /**
       * the Id of the element within the DOM of the Control which should be scrollable
       */
      sScrollContentDom: string,
      /**
       * the configuration of the scroll delegate
       */
      oConfig: {
        /**
         * Whether the element should be scrollable horizontally
         */
        horizontal?: boolean;
        /**
         * Whether the element should be scrollable vertically
         */
        vertical?: boolean;
        /**
         * @deprecated since 1.42, the parameter has no effect
         */
        zynga?: boolean;
        /**
         * @deprecated since 1.42, the parameter has no effect
         */
        iscroll?: boolean;
        /**
         * @deprecated since 1.42, the parameter has no effect
         */
        preventDefault?: boolean;
        /**
         * If true, the delegate will also be active to allow touch like scrolling with the mouse on non-touch platforms.
         */
        nonTouchScrolling?: boolean;
        /**
         * Native scrolling does not need content wrapper. In this case, ID of the container element should be provided.
         */
        scrollContainerId?: string;
      }
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ScrollEnablement>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.core.delegate.ScrollEnablement.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Destroys this Scrolling delegate.
     *
     * This function must be called by the control which uses this delegate in the `exit` function.
     */
    destroy(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Calculates scroll position of a child of a container.
     *
     * @returns Position object.
     */
    getChildPosition(
      /**
       * An element(DOM or jQuery) for which the scroll position will be calculated.
       */
      vElement: HTMLElement | jQuery
    ): object;
    /**
     * @SINCE 1.9.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Get current setting for horizontal scrolling.
     *
     * @returns true if horizontal scrolling is enabled
     */
    getHorizontal(): boolean;
    /**
     * @SINCE 1.9.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Get current setting for vertical scrolling.
     *
     * @returns true if vertical scrolling is enabled
     */
    getVertical(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Refreshes this Scrolling delegate.
     */
    refresh(): void;
    /**
     * Scrolls to a specific position in scroll container.
     */
    scrollTo(
      /**
       * Horizontal position of the scrollbar
       */
      x: int,
      /**
       * Vertical position of the scrollbar
       */
      y: int,
      /**
       * The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as
       * value.
       */
      time: int,
      /**
       * Called when the scroll completes or stops without completing
       */
      fnScrollEndCallback: Function
    ): this;
    /**
     * Scrolls to a specific position in scroll container.
     */
    scrollTo(
      /**
       * Horizontal position of the scrollbar
       */
      x: int,
      /**
       * Vertical position of the scrollbar
       */
      y: int,
      /**
       * Called when the scroll completes or stops without completing
       */
      fnScrollEndCallback: Function
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Scrolls to an element within a container.
     */
    scrollToElement(
      /**
       * A DOM element.
       */
      oElement: HTMLElement,
      /**
       * The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as
       * value.
       */
      iTime?: int,
      /**
       * Specifies an additional left and top offset of the target scroll position, relative to the upper left
       * corner of the DOM element
       */
      aOffset?: int[],
      /**
       * The configuration of the parameter for scrolling only if the element is not in the view port - i.e. if
       * bSkipElementsInScrollport is set to true, there will be no scrolling if the element is already in the
       * view port
       */
      bSkipElementsInScrollport?: boolean
    ): this;
    /**
     * @SINCE 1.17
     * @deprecated (since 1.42)
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Setter for property `bounce`.
     */
    setBounce(
      /**
       * new value for property `bounce`.
       */
      bBounce: boolean
    ): void;
    /**
     * @SINCE 1.11.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets GrowingList control to scroll container
     */
    setGrowingList(
      /**
       * Scrolling callback
       */
      fnScrollLoadCallback: Function,
      /**
       * Scrolling direction
       */
      sScrollLoadDirection: /* was: sap.m.ListGrowingDirection */ any,
      /**
       * listener for the `overflowChange` event
       */
      fnOverflowChange: Function
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Enable or disable horizontal scrolling.
     */
    setHorizontal(
      /**
       * set true to enable horizontal scrolling, false - to disable
       */
      bHorizontal: boolean
    ): void;
    /**
     * @SINCE 1.16.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets IconTabBar control to scroll container
     */
    setIconTabBar(
      /**
       * instance
       */
      oIconTabBar: /* was: sap.m.IconTabBar */ any,
      /**
       * callback function for the scroll end event
       */
      fnScrollEndCallback: Function,
      /**
       * callback function for the scroll start event
       */
      fnScrollStartCallback: Function
    ): void;
    /**
     * @SINCE 1.9.2
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Set overflow control on top of scroll container.
     */
    setPullDown(
      /**
       * Top control that should be normally hidden over the top border of the scroll container (pull-down content).
       */
      oControl: Control
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Enable or disable vertical scrolling.
     */
    setVertical(
      /**
       * set true to enable vertical scrolling, false - to disable
       */
      bVertical: boolean
    ): void;
  }
}

declare module "sap/ui/core/dnd/DragDropBase" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.52
   *
   * Provides the base class for all drag-and-drop configurations. This feature enables a native HTML5 drag-and-drop
   * API for the controls, therefore it is limited to browser support. Restrictions:
   * 	 - There is no accessible alternative for drag and drop. Applications which use the drag-and-drop functionality
   * 			must provide an accessible alternative UI (for example, action buttons or menus) to perform the same
   * 			operations.
   * 	 - Transparency of the drag ghost element and the cursor during drag-and-drop operations depends on
   * 			the browser implementation.
   * 	 - Constraining a drag position is not possible, therefore there is no snap-to-grid or snap-to-element
   * 			feature possible.
   * 	 - Texts in draggable controls cannot be selected.
   * 	 - The text of input fields in draggable controls can be selected, but not dragged.
   */
  export default class DragDropBase extends UI5Element {
    /**
     * Constructor for a new DragDropBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:3ddb6cde6a8d416598ac8ced3f5d82d5 Drag and Drop}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DragDropBaseSettings
    );
    /**
     * Constructor for a new DragDropBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:3ddb6cde6a8d416598ac8ced3f5d82d5 Drag and Drop}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DragDropBaseSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.dnd.DragDropBase with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DragDropBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.dnd.DragDropBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether this configuration is active or not.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getGroupName groupName}.
     *
     * Defines the name of the group to which this object belongs. If `groupName` is specified, then this object
     * will only interacts with other drag-and-drop objects within the same group.
     *
     * @returns Value of property `groupName`
     */
    getGroupName(): string;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether this configuration is active or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGroupName groupName}.
     *
     * Defines the name of the group to which this object belongs. If `groupName` is specified, then this object
     * will only interacts with other drag-and-drop objects within the same group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setGroupName(
      /**
       * New value for property `groupName`
       */
      sGroupName?: string
    ): this;
  }

  export interface $DragDropBaseSettings extends $ElementSettings {
    /**
     * Defines the name of the group to which this object belongs. If `groupName` is specified, then this object
     * will only interacts with other drag-and-drop objects within the same group.
     */
    groupName?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Indicates whether this configuration is active or not.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/dnd/DragDropInfo" {
  import {
    default as DropInfo,
    $DropInfoSettings,
  } from "sap/ui/core/dnd/DropInfo";

  import { dnd, ID } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import UI5Element from "sap/ui/core/Element";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.52
   *
   * Provides the configuration for drag-and-drop operations.
   *
   * **Note:** This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata}
   * restrictions.
   */
  export default class DragDropInfo
    extends DropInfo
    implements dnd.IDragInfo, dnd.IDropInfo {
    __implements__sap_ui_core_dnd_IDragInfo: boolean;
    __implements__sap_ui_core_dnd_IDropInfo: boolean;
    /**
     * Constructor for a new DragDropInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the DragDropInfo
       */
      mSettings?: $DragDropInfoSettings
    );
    /**
     * Constructor for a new DragDropInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new DragDropInfo, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the DragDropInfo
       */
      mSettings?: $DragDropInfoSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.dnd.DragDropInfo with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.dnd.DropInfo.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DragDropInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.dnd.DragDropInfo.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragDropInfo` itself.
     *
     * This event is fired when a drag operation is being ended.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnd(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragDropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragDropInfo` itself.
     *
     * This event is fired when a drag operation is being ended.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnd(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragDropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragDropInfo` itself.
     *
     * This event is fired when the user starts dragging an element.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragStart(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragDropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragDropInfo` itself.
     *
     * This event is fired when the user starts dragging an element.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragStart(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragDropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragEnd(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragDropInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragStart(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragEnd dragEnd} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDragEnd(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragStart dragStart} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireDragStart(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets current value of property {@link #getSourceAggregation sourceAggregation}.
     *
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     *
     * @returns Value of property `sourceAggregation`
     */
    getSourceAggregation(): string;
    /**
     * ID of the element which is the current target of the association {@link #getTargetElement targetElement},
     * or `null`.
     */
    getTargetElement(): ID;
    /**
     * Sets a new value for property {@link #getSourceAggregation sourceAggregation}.
     *
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSourceAggregation(
      /**
       * New value for property `sourceAggregation`
       */
      sSourceAggregation?: string
    ): this;
    /**
     * Sets the associated {@link #getTargetElement targetElement}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTargetElement(
      /**
       * ID of an element which becomes the new target of this targetElement association; alternatively, an element
       * instance may be given
       */
      oTargetElement: ID | UI5Element
    ): this;
  }

  export interface $DragDropInfoSettings extends $DropInfoSettings {
    /**
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     */
    sourceAggregation?: string | PropertyBindingInfo;

    /**
     * The target element for this drag and drop action. If undefined, the control with this drag and drop configuration
     * itself is the target. Leaving this empty, but defining source and target aggregation, allows you to reorder
     * the children within a control, for example.
     */
    targetElement?: UI5Element | string;

    /**
     * This event is fired when the user starts dragging an element.
     */
    dragStart?: (oEvent: Event) => void;

    /**
     * @SINCE 1.56
     *
     * This event is fired when a drag operation is being ended.
     */
    dragEnd?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/dnd/DragInfo" {
  import {
    default as DragDropBase,
    $DragDropBaseSettings,
  } from "sap/ui/core/dnd/DragDropBase";

  import { dnd } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56
   *
   * Provides the configuration for drag operations.
   *
   * **Note:** This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata}
   * restrictions.
   */
  export default class DragInfo extends DragDropBase implements dnd.IDragInfo {
    __implements__sap_ui_core_dnd_IDragInfo: boolean;
    /**
     * Constructor for a new DragInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the DragInfo
       */
      mSettings?: $DragInfoSettings
    );
    /**
     * Constructor for a new DragInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new DragInfo, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the DragInfo
       */
      mSettings?: $DragInfoSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.dnd.DragInfo with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DragInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.dnd.DragInfo.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragInfo` itself.
     *
     * This event is fired when a drag operation is being ended.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnd(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragInfo` itself.
     *
     * This event is fired when a drag operation is being ended.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnd(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragInfo` itself.
     *
     * This event is fired when the user starts dragging an element.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragStart(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DragInfo` itself.
     *
     * This event is fired when the user starts dragging an element.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragStart(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DragInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:dragEnd dragEnd} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragEnd(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dragStart dragStart} event of this `sap.ui.core.dnd.DragInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragStart(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragEnd dragEnd} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDragEnd(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragStart dragStart} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireDragStart(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets current value of property {@link #getSourceAggregation sourceAggregation}.
     *
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     *
     * @returns Value of property `sourceAggregation`
     */
    getSourceAggregation(): string;
    /**
     * Sets a new value for property {@link #getSourceAggregation sourceAggregation}.
     *
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSourceAggregation(
      /**
       * New value for property `sourceAggregation`
       */
      sSourceAggregation?: string
    ): this;
  }

  export interface $DragInfoSettings extends $DragDropBaseSettings {
    /**
     * The name of the aggregation from which all children can be dragged. If undefined, the control itself
     * can be dragged.
     */
    sourceAggregation?: string | PropertyBindingInfo;

    /**
     * This event is fired when the user starts dragging an element.
     */
    dragStart?: (oEvent: Event) => void;

    /**
     * @SINCE 1.56
     *
     * This event is fired when a drag operation is being ended.
     */
    dragEnd?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/dnd/DragAndDrop" {
  import UI5Element from "sap/ui/core/Element";

  import DropInfo from "sap/ui/core/dnd/DropInfo";

  import { dnd } from "sap/ui/core/library";

  /**
   * When a user requests to drag some controls that can be dragged, a drag session is started. The drag session
   * can be used to transfer data between applications or between dragged and dropped controls. Please see
   * provided APIs for more details.
   *
   * **Note:** An implementation of this interface is provided by the framework during drag-and-drop operations
   * and is exposed as `dragSession` parameter of the different drag and drop events.
   *
   * **Note:** This interface is not intended to be implemented by controls, applications or test code. Extending
   * it with additional methods in future versions will be regarded as a compatible change.
   */
  export interface DragSession {
    __implements__sap_ui_core_dnd_DragSession: boolean;

    /**
     * Returns the data that has been set via `setComplexData` method.
     *
     * @returns The previously set data or undefined
     */
    getComplexData(
      /**
       * The key of the data
       */
      sKey: string
    ): any | undefined;
    /**
     * Returns the data that has been set via `setData` method.
     *
     * @returns Data
     */
    getData(
      /**
       * The key of the data
       */
      sKey: string
    ): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the dragged control, if available within the same UI5 application frame.
     */
    getDragControl(): UI5Element | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The valid drop target underneath the dragged control.
     */
    getDropControl(): UI5Element | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the drop configuration corresponding to the drop control.
     */
    getDropInfo(): DropInfo | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the calculated position of the drop action relative to the valid dropped control.
     */
    getDropPosition():
      | dnd.RelativeDropPosition
      | keyof typeof dnd.RelativeDropPosition;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the drop indicator.
     *
     * @returns Drop indicator's DOM reference
     */
    getIndicator(): HTMLElement | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the visual configuration of the drop indicator.
     *
     * @returns Drop indicator configuration
     */
    getIndicatorConfig(): object;
    /**
     * Returns the data that has been set via `setTextData` method.
     *
     * @returns Data
     */
    getTextData(): string;
    /**
     * Sets any type of data (even functions, pointers, anything non-serializable) with any MIME type. **Note:**
     * This works only within a UI5 application within the same window/frame.
     */
    setComplexData(
      /**
       * The key of the data
       */
      sKey: string,
      /**
       * Data
       */
      vData: any
    ): void;
    /**
     * Sets string data with any MIME type. **Note:** This works if you navigate between different windows.
     */
    setData(
      /**
       * The key of the data
       */
      sKey: string,
      /**
       * Data
       */
      sData: string
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Set the valid drop control.
     */
    setDropControl(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Defines the visual configuration of the drop indicator for the current `DropInfo`.
     */
    setIndicatorConfig(
      /**
       * Custom styles of the drop indicator.
       */
      mConfig: object
    ): void;
    /**
     * Sets string data with plain text MIME type. **Note:** This works if you navigate between different windows.
     */
    setTextData(
      /**
       * Data
       */
      sData: string
    ): void;
  }
}

declare module "sap/ui/core/dnd/DropInfo" {
  import {
    default as DragDropBase,
    $DragDropBaseSettings,
  } from "sap/ui/core/dnd/DragDropBase";

  import { dnd } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56
   *
   * Provides the configuration for drop operations. **Note:** This configuration might be ignored due to
   * control {@link sap.ui.core.Element.extend metadata} restrictions.
   */
  export default class DropInfo extends DragDropBase implements dnd.IDropInfo {
    __implements__sap_ui_core_dnd_IDropInfo: boolean;
    /**
     * Constructor for a new DropInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the DropInfo
       */
      mSettings?: $DropInfoSettings
    );
    /**
     * Constructor for a new DropInfo.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new DropInfo, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the DropInfo
       */
      mSettings?: $DropInfoSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.dnd.DropInfo with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DropInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.dnd.DropInfo.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragEnter dragEnter} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when a dragged element enters a drop target.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnter(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dragEnter dragEnter} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when a dragged element enters a drop target.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragEnter(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragOver dragOver} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when an element is being dragged over a valid drop target.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragOver(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:dragOver dragOver} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when an element is being dragged over a valid drop target.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDragOver(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when an element is dropped on a valid drop target, as specified by the drag-and-drop
     * info.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDrop(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.dnd.DropInfo` itself.
     *
     * This event is fired when an element is dropped on a valid drop target, as specified by the drag-and-drop
     * info.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDrop(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.dnd.DropInfo` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dragEnter dragEnter} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragEnter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:dragOver dragOver} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDragOver(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:drop drop} event of this `sap.ui.core.dnd.DropInfo`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDrop(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragEnter dragEnter} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     *
     * @returns Whether or not to prevent the default action
     */
    fireDragEnter(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * @SINCE 1.56
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dragOver dragOver} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDragOver(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:drop drop} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDrop(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDropEffect dropEffect}.
     *
     * Defines the visual drop effect.
     *
     * Default value is `"Move"`.
     *
     * @returns Value of property `dropEffect`
     */
    getDropEffect(): dnd.DropEffect | keyof typeof dnd.DropEffect;
    /**
     * Gets current value of property {@link #getDropLayout dropLayout}.
     *
     * Defines the layout of the droppable controls if `dropPosition` is set to `Between` or `OnOrBetween`.
     *
     * Default value is `"Default"`.
     *
     * @returns Value of property `dropLayout`
     */
    getDropLayout(): dnd.DropLayout | keyof typeof dnd.DropLayout;
    /**
     * Gets current value of property {@link #getDropPosition dropPosition}.
     *
     * Defines the position for the drop action, visualized by a rectangle.
     *
     * Default value is `"On"`.
     *
     * @returns Value of property `dropPosition`
     */
    getDropPosition(): dnd.DropPosition | keyof typeof dnd.DropPosition;
    /**
     * Gets current value of property {@link #getTargetAggregation targetAggregation}.
     *
     * The aggregation name in the drop target control which is the target of this drag-and-drop action. If
     * undefined, the entire control is the target. This can be handy if the target control does not have any
     * aggregations or if the drop position within the target does not matter.
     *
     * @returns Value of property `targetAggregation`
     */
    getTargetAggregation(): string;
    /**
     * Sets a new value for property {@link #getDropEffect dropEffect}.
     *
     * Defines the visual drop effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Move"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDropEffect(
      /**
       * New value for property `dropEffect`
       */
      sDropEffect?: dnd.DropEffect | keyof typeof dnd.DropEffect
    ): this;
    /**
     * Sets a new value for property {@link #getDropLayout dropLayout}.
     *
     * Defines the layout of the droppable controls if `dropPosition` is set to `Between` or `OnOrBetween`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Default"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDropLayout(
      /**
       * New value for property `dropLayout`
       */
      sDropLayout?: dnd.DropLayout | keyof typeof dnd.DropLayout
    ): this;
    /**
     * Sets a new value for property {@link #getDropPosition dropPosition}.
     *
     * Defines the position for the drop action, visualized by a rectangle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"On"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDropPosition(
      /**
       * New value for property `dropPosition`
       */
      sDropPosition?: dnd.DropPosition | keyof typeof dnd.DropPosition
    ): this;
    /**
     * Sets a new value for property {@link #getTargetAggregation targetAggregation}.
     *
     * The aggregation name in the drop target control which is the target of this drag-and-drop action. If
     * undefined, the entire control is the target. This can be handy if the target control does not have any
     * aggregations or if the drop position within the target does not matter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTargetAggregation(
      /**
       * New value for property `targetAggregation`
       */
      sTargetAggregation?: string
    ): this;
  }

  export interface $DropInfoSettings extends $DragDropBaseSettings {
    /**
     * The aggregation name in the drop target control which is the target of this drag-and-drop action. If
     * undefined, the entire control is the target. This can be handy if the target control does not have any
     * aggregations or if the drop position within the target does not matter.
     */
    targetAggregation?: string | PropertyBindingInfo;

    /**
     * Defines the visual drop effect.
     */
    dropEffect?:
      | (dnd.DropEffect | keyof typeof dnd.DropEffect)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the position for the drop action, visualized by a rectangle.
     */
    dropPosition?:
      | (dnd.DropPosition | keyof typeof dnd.DropPosition)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Defines the layout of the droppable controls if `dropPosition` is set to `Between` or `OnOrBetween`.
     */
    dropLayout?:
      | (dnd.DropLayout | keyof typeof dnd.DropLayout)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * This event is fired when a dragged element enters a drop target.
     */
    dragEnter?: (oEvent: Event) => void;

    /**
     * @SINCE 1.56
     *
     * This event is fired when an element is being dragged over a valid drop target.
     */
    dragOver?: (oEvent: Event) => void;

    /**
     * This event is fired when an element is dropped on a valid drop target, as specified by the drag-and-drop
     * info.
     */
    drop?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/Element" {
  import {
    default as ManagedObject,
    ObjectBindingInfo,
    MetadataOptions as MetadataOptions1,
    $ManagedObjectSettings,
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import CustomData from "sap/ui/core/CustomData";

  import DragDropBase from "sap/ui/core/dnd/DragDropBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ContextBinding from "sap/ui/model/ContextBinding";

  import LayoutData from "sap/ui/core/LayoutData";

  import TooltipBase from "sap/ui/core/TooltipBase";

  import { ID } from "sap/ui/core/library";

  /**
   * Base Class for UI Elements.
   *
   * `Element` is the most basic building block for UI5 UIs. An `Element` has state like a `ManagedObject`,
   * it has a unique ID by which the framework remembers it. It can have associated DOM, but it can't render
   * itself. Only {@link sap.ui.core.Control Controls} can render themselves and also take care of rendering
   * `Elements` that they aggregate as children. If an `Element` has been rendered, its related DOM gets the
   * same ID as the `Element` and thereby can be retrieved via API. When the state of an `Element` changes,
   * it informs its parent `Control` which usually re-renders then.
   *
   * Dispatching Events:
   *
   * The UI5 framework already registers generic listeners for common browser events, such as `click` or `keydown`.
   * When called, the generic listener first determines the corresponding target element using {@link jQuery#control}.
   * Then it checks whether the element has an event handler method for the event. An event handler method
   * by convention has the same name as the event, but prefixed with "on": Method `onclick` is the handler
   * for the `click` event, method `onkeydown` the handler for the `keydown` event and so on. If there is
   * such a method, it will be called with the original event as the only parameter. If the element has a
   * list of delegates registered, their handler functions will be called the same way, where present. The
   * set of implemented handlers might differ between element and delegates. Not each handler implemented
   * by an element has to be implemented by its delegates, and delegates can implement handlers that the corresponding
   * element doesn't implement.
   *
   * A list of browser events that are handled that way can be found in {@link module:sap/ui/events/ControlEvents}.
   * Additionally, the framework dispatches pseudo events ({@link module:sap/ui/events/PseudoEvents}) using
   * the same naming convention. Last but not least, some framework events are also dispatched that way, e.g.
   * `BeforeRendering`, `AfterRendering` (only for controls) and `ThemeChanged`.
   *
   * If further browser events are needed, controls can register listeners on the DOM using native APIs in
   * their `onAfterRendering` handler. If needed, they can do this for their aggregated elements as well.
   * If events might fire often (e.g. `mousemove`), it is best practice to register them only while needed,
   * and deregister afterwards. Anyhow, any registered listeners must be cleaned up in the `onBeforeRendering`
   * listener and before destruction in the `exit` hook.
   */
  export default class UI5Element extends ManagedObject {
    /**
     * Constructs and initializes a UI Element with the given `sId` and settings.
     *
     * Uniqueness of IDs:
     *
     * Each `Element` must have an ID. If no `sId` or `mSettings.id` is given at construction time, a new ID
     * will be created automatically. The IDs of all elements that exist at the same time in the same window
     * must be different. Providing an ID which is already used by another element throws an error.
     *
     * When an element is created from a declarative source (e.g. XMLView), then an ID defined in that declarative
     * source needs to be unique only within the declarative source. Declarative views will prefix that ID with
     * their own ID (and some separator) before constructing the element. Programmatically created views (JSViews)
     * can do the same with the {@link sap.ui.core.mvc.View#createId} API. Similarly, UIComponents can prefix
     * the IDs of elements created in their context with their own ID. Also see {@link sap.ui.core.UIComponent#getAutoPrefixId
     * UIComponent#getAutoPrefixId}.
     *
     * Settings: If the optional `mSettings` are given, they must be a JSON-like object (object literal) that
     * defines values for properties, aggregations, associations or events keyed by their name.
     *
     * **Valid Names:**
     *
     * The property (key) names supported in the object literal are exactly the (case sensitive) names documented
     * in the JSDoc for the properties, aggregations, associations and events of the control and its base classes.
     * Note that for 0..n aggregations and associations this usually is the plural name, whereas it is the singular
     * name in case of 0..1 relations.
     *
     * Each subclass should document the set of supported names in its constructor documentation.
     *
     * **Valid Values:**
     *
     *
     * 	 - for normal properties, the value has to be of the correct simple type (no type conversion occurs)
     *
     * 	 - for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
     *
     * 	 - for 0..n aggregations, the value has to be an array of instances of the aggregated type
     * 	 - for 0..1 associations, an instance of the associated type or an id (string) is accepted
     * 	 - 0..n associations are not supported yet
     * 	 - for events either a function (event handler) is accepted or an array of length 2 where the first
     * 			element is a function and the 2nd element is an object to invoke the method on.
     *
     * Special aggregation `dependents` is connected to the lifecycle management and databinding, but not rendered
     * automatically and can be used for popups or other dependent controls or elements. This allows the definition
     * of popup controls in declarative views and enables propagation of model and context information to them.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new element
       */
      mSettings?: $ElementSettings
    );
    /**
     * Constructs and initializes a UI Element with the given `sId` and settings.
     *
     * Uniqueness of IDs:
     *
     * Each `Element` must have an ID. If no `sId` or `mSettings.id` is given at construction time, a new ID
     * will be created automatically. The IDs of all elements that exist at the same time in the same window
     * must be different. Providing an ID which is already used by another element throws an error.
     *
     * When an element is created from a declarative source (e.g. XMLView), then an ID defined in that declarative
     * source needs to be unique only within the declarative source. Declarative views will prefix that ID with
     * their own ID (and some separator) before constructing the element. Programmatically created views (JSViews)
     * can do the same with the {@link sap.ui.core.mvc.View#createId} API. Similarly, UIComponents can prefix
     * the IDs of elements created in their context with their own ID. Also see {@link sap.ui.core.UIComponent#getAutoPrefixId
     * UIComponent#getAutoPrefixId}.
     *
     * Settings: If the optional `mSettings` are given, they must be a JSON-like object (object literal) that
     * defines values for properties, aggregations, associations or events keyed by their name.
     *
     * **Valid Names:**
     *
     * The property (key) names supported in the object literal are exactly the (case sensitive) names documented
     * in the JSDoc for the properties, aggregations, associations and events of the control and its base classes.
     * Note that for 0..n aggregations and associations this usually is the plural name, whereas it is the singular
     * name in case of 0..1 relations.
     *
     * Each subclass should document the set of supported names in its constructor documentation.
     *
     * **Valid Values:**
     *
     *
     * 	 - for normal properties, the value has to be of the correct simple type (no type conversion occurs)
     *
     * 	 - for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
     *
     * 	 - for 0..n aggregations, the value has to be an array of instances of the aggregated type
     * 	 - for 0..1 associations, an instance of the associated type or an id (string) is accepted
     * 	 - 0..n associations are not supported yet
     * 	 - for events either a function (event handler) is accepted or an array of length 2 where the first
     * 			element is a function and the 2nd element is an object to invoke the method on.
     *
     * Special aggregation `dependents` is connected to the lifecycle management and databinding, but not rendered
     * automatically and can be used for popups or other dependent controls or elements. This allows the definition
     * of popup controls in declarative views and enables propagation of model and context information to them.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control; generated automatically if no non-empty id is given Note: this can be omitted,
       * no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new element
       */
      mSettings?: $ElementSettings
    );

    /**
     * @SINCE 1.106
     *
     * Returns the nearest [UI5 Element]{@link sap.ui.core.Element} that wraps the given DOM element.
     *
     * A DOM element or a CSS selector is accepted as a given parameter. When a CSS selector is given as parameter,
     * only the first DOM element that matches the CSS selector is taken to find the nearest UI5 Element that
     * wraps it. When no UI5 Element can be found, `undefined` is returned.
     *
     * @returns The UI5 Element that wraps the given DOM element. `undefined` is returned when no UI5 Element
     * can be found.
     */
    static closestTo(
      /**
       * A DOM Element or a CSS selector from which to start the search for the nearest UI5 Element by traversing
       * up the DOM tree
       */
      vParam: HTMLElement | string,
      /**
       * Whether the `data-sap-ui-related` attribute is also accepted as a selector for a UI5 Element, in addition
       * to `data-sap-ui`
       */
      bIncludeRelated?: boolean
    ): UI5Element;
    /**
     * @deprecated (since 1.3.1) - Use the static `extend` method of the desired base class (e.g. {@link sap.ui.core.Element.extend})
     *
     * Creates metadata for a UI Element by extending the Object Metadata.
     *
     * @returns the created metadata
     */
    static defineClass(
      /**
       * name of the class to build the metadata for
       */
      sClassName: string,
      /**
       * static information used to build the metadata
       */
      oStaticInfo: object,
      /**
       * constructor to be used for the metadata
       */
      fnMetaImpl?: Function
    ): ElementMetadata;
    /**
     * Defines a new subclass of Element with the name `sClassName` and enriches it with the information contained
     * in `oClassInfo`.
     *
     * `oClassInfo` can contain the same information that {@link sap.ui.base.ManagedObject.extend} already accepts,
     * plus the `dnd` property in the metadata object literal to configure drag-and-drop behavior (see {@link
     * sap.ui.core.Element.MetadataOptions MetadataOptions} for details). Objects describing aggregations can
     * also have a `dnd` property when used for a class extending `Element` (see {@link sap.ui.base.ManagedObject.MetadataOptions.AggregationDnD
     * AggregationDnD}).
     *
     * Example:
     * ```javascript
     *
     * Element.extend('sap.mylib.MyElement', {
     *   metadata : {
     *     library : 'sap.mylib',
     *     properties : {
     *       value : 'string',
     *       width : 'sap.ui.core.CSSSize'
     *     },
     *     dnd : { draggable: true, droppable: false },
     *     aggregations : {
     *       items : { type: 'sap.ui.core.Control', multiple : true, dnd : {draggable: false, droppable: true, layout: "Horizontal" } },
     *       header : {type : "sap.ui.core.Control", multiple : false, dnd : true },
     *     }
     *   }
     * });
     * ```
     *
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class to be created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UI5Element>,
      /**
       * Constructor function for the metadata object. If not given, it defaults to `sap.ui.core.ElementMetadata`.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Element.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the best suitable DOM node that represents this Element wrapped as jQuery object. I.e. the element
     * returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
     *
     * If an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single
     * dash) and the DOM node with that compound ID will be wrapped by jQuery. This matches the UI5 naming convention
     * for named inner DOM nodes of a control.
     *
     * @returns The jQuery wrapped element's DOM reference
     */
    $(
      /**
       * ID suffix to get a jQuery object for
       */
      sSuffix?: string
    ): jQuery;
    /**
     * Adds some customData to the aggregation {@link #getCustomData customData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCustomData(
      /**
       * The customData to add; if empty, nothing is inserted
       */
      oCustomData: CustomData
    ): this;
    /**
     * @SINCE 1.19
     *
     * Adds some dependent to the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDependent(
      /**
       * The dependent to add; if empty, nothing is inserted
       */
      oDependent: UI5Element
    ): this;
    /**
     * @SINCE 1.56
     *
     * Adds some dragDropConfig to the aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDragDropConfig(
      /**
       * The dragDropConfig to add; if empty, nothing is inserted
       */
      oDragDropConfig: DragDropBase
    ): this;
    /**
     * @SINCE 1.9.0
     *
     * Adds a delegate that can listen to the browser-, pseudo- and framework events that are handled by this
     * `Element` (as opposed to events which are fired by this `Element`).
     *
     * Delegates are simple objects that can have an arbitrary number of event handler methods. See the section
     * "Handling of Events" in the {@link #constructor} documentation to learn how events will be dispatched
     * and how event handler methods have to be named to be found.
     *
     * If multiple delegates are registered for the same element, they will be called in the order of their
     * registration. Double registrations are prevented. Before a delegate is added, all registrations of the
     * same delegate (no matter what value for `oThis` was used for their registration) are removed and only
     * then the delegate is added. Note that this might change the position of the delegate in the list of delegates.
     *
     * When an element is cloned, all its event delegates will be added to the clone. This behavior is well-suited
     * for applications which want to add delegates that also work with templates in aggregation bindings. For
     * control development, the internal `addDelegate` method may be more suitable. Delegates added via that
     * method are not cloned automatically, as typically each control instance takes care of adding its own
     * delegates.
     *
     * **Important:** If event delegates were added, the delegate will still be called even if the event was
     * processed and/or cancelled via `preventDefault` by the Element or another event delegate. `preventDefault`
     * only prevents the event from bubbling. It should be checked e.g. in the event delegate's listener whether
     * an Element is still enabled via `getEnabled`. Additionally there might be other things that delegates
     * need to check depending on the event (e.g. not adding a key twice to an output string etc.).
     *
     * See {@link topic:bdf3e9818cd84d37a18ee5680e97e1c1 Event Handler Methods} for a general explanation of
     * event handling in controls.
     *
     * **Note:** Setting the special `canSkipRendering` property to `true` for the event delegate object itself
     * lets the framework know that the `onBeforeRendering` and `onAfterRendering` event handlers of the delegate
     * are compatible with the contract of {@link sap.ui.core.RenderManager Renderer.apiVersion 4}. See example
     * "Adding a rendering delegate...".
     *
     * @returns Returns `this` to allow method chaining
     */
    addEventDelegate(
      /**
       * The delegate object which consists of the event handler names and the corresponding event handler functions
       */
      oDelegate: object,
      /**
       * If given, this object will be the "this" context in the listener methods; default is the delegate object
       * itself
       */
      oThis?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Applies the focus info.
     *
     * To be overwritten by the specific control method.
     *
     * @returns Returns `this` to allow method chaining
     */
    applyFocusInfo(
      /**
       * Focus info object as returned by {@link #getFocusInfo}
       */
      oFocusInfo: {
        /**
         * @since 1.60 if it's set to true, the focused element won't be shifted into the viewport if it's not completely
         * visible before the focus is set
         */
        preventScroll?: boolean;
      }
    ): this;
    /**
     * Bind the object to the referenced entity in the model, which is used as the binding context to resolve
     * bound properties or aggregations of the object itself and all of its children relatively to the given
     * path.
     *
     * If a relative binding path is used, this will be applied whenever the parent context changes.
     *
     * There's no difference between `bindElement` and {@link sap.ui.base.ManagedObject#bindObject}.
     * See:
     * 	{@link sap.ui.base.ManagedObject#bindObject}
     *
     * @returns reference to the instance itself
     */
    bindElement(
      /**
       * the binding path or an object with more detailed binding options
       */
      vPath: string | ObjectBindingInfo,
      /**
       * map of additional parameters for this binding. Only taken into account when `vPath` is a string. In that
       * case it corresponds to `mParameters` of {@link sap.ui.base.ManagedObject.ObjectBindingInfo}. The supported
       * parameters are listed in the corresponding model-specific implementation of `sap.ui.model.ContextBinding`.
       */
      mParameters?: object
    ): this;
    /**
     * Create a clone of this Element.
     *
     * Calls {@link sap.ui.base.ManagedObject#clone} and additionally clones event delegates.
     *
     * @returns reference to the newly created clone
     */
    clone(
      /**
       * Suffix to be appended to the cloned element ID
       */
      sIdSuffix?: string,
      /**
       * Array of local IDs within the cloned hierarchy (internally used)
       */
      aLocalIds?: string[]
    ): this;
    /**
     * Retrieves, modifies or removes custom data attached to an `Element`.
     *
     * Usages: Setting the value for a single key:
     * ```javascript
     *
     *    data("myKey", myData)
     * ```
     *  Attaches `myData` (which can be any JS data type, e.g. a number, a string, an object, or a function)
     * to this element, under the given key "myKey". If the key already exists,the value will be updated.
     *
     * Setting a value for a single key (rendered to the DOM):
     * ```javascript
     *
     *    data("myKey", myData, writeToDom)
     * ```
     *  Attaches `myData` to this element, under the given key "myKey" and (if `writeToDom` is true) writes
     * key and value to the HTML. If the key already exists,the value will be updated. While `oValue` can be
     * any JS data type to be attached, it must be a string to be also written to DOM. The key must also be
     * a valid HTML attribute name (it must conform to `sap.ui.core.ID` and may contain no colon) and may not
     * start with "sap-ui". When written to HTML, the key is prefixed with "data-".
     *
     * Getting the value for a single key:
     * ```javascript
     *
     *    data("myKey")
     * ```
     *  Retrieves whatever data has been attached to this element (using the key "myKey") before.
     *
     * Removing the value for a single key:
     * ```javascript
     *
     *    data("myKey", null)
     * ```
     *  Removes whatever data has been attached to this element (using the key "myKey") before.
     *
     * Removing all custom data for all keys:
     * ```javascript
     *
     *    data(null)
     * ```
     *
     *
     * Getting all custom data values as a plain object:
     * ```javascript
     *
     *    data()
     * ```
     *  Returns all data, as a map-like object, property names are keys, property values are values.
     *
     * Setting multiple key/value pairs in a single call:
     * ```javascript
     *
     *    data({"myKey1": myData, "myKey2": null})
     * ```
     *  Attaches `myData` (using the key "myKey1" and removes any data that had been attached for key "myKey2".
     * See:
     * 	See chapter {@link topic:91f0c3ee6f4d1014b6dd926db0e91070 Custom Data - Attaching Data Objects to Controls}
     *    in the documentation.
     *
     * @returns A map with all custom data, a custom data value for a single specified key or `null` when no
     * custom data exists for such a key or this element when custom data was to be removed.
     */
    data(
      /**
       * Single key to set or remove, or an object with key/value pairs or `null` to remove all custom data
       */
      vKeyOrData?: string | Record<string, any> | null,
      /**
       * Value to set or `null` to remove the corresponding custom data
       */
      vValue?: string | any,
      /**
       * Whether this custom data entry should be written to the DOM during rendering
       */
      bWriteToDom?: boolean
    ): Record<string, any> | any | null | UI5Element;
    /**
     * Cleans up the resources associated with this element and all its children.
     *
     * After an element has been destroyed, it can no longer be used in the UI!
     *
     * Applications should call this method if they don't need the element any longer.
     */
    destroy(
      /**
       * If `true`, this ManagedObject and all its ancestors won't be invalidated.
       * This flag should be used only during control development to optimize invalidation procedures. It should
       * not be used by any application code.
       */
      bSuppressInvalidate?: boolean
    ): void;
    /**
     * Destroys all the customData in the aggregation {@link #getCustomData customData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCustomData(): this;
    /**
     * @SINCE 1.19
     *
     * Destroys all the dependents in the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDependents(): this;
    /**
     * @SINCE 1.56
     *
     * Destroys all the dragDropConfig in the aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDragDropConfig(): this;
    /**
     * Destroys the layoutData in the aggregation {@link #getLayoutData layoutData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyLayoutData(): this;
    /**
     * Destroys the tooltip in the aggregation named `tooltip`.
     *
     * @returns `this` to allow method chaining
     */
    destroyTooltip(): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Allows the parent of a control to enhance the ARIA information during rendering.
     *
     * This function is called by the RenderManager's {@link sap.ui.core.RenderManager#accessibilityState accessibilityState}
     * and {@link sap.ui.core.RenderManager#writeAccessibilityState writeAccessibilityState} methods for the
     * parent of the currently rendered control - if the parent implements it.
     *
     * **Note:** Setting the special `canSkipRendering` property of the `mAriaProps` parameter to `true` lets
     * the `RenderManager` know that the accessibility enhancement is static and does not interfere with the
     * child control's {@link sap.ui.core.RenderManager Renderer.apiVersion 4} rendering optimization.
     */
    enhanceAccessibilityState(
      /**
       * The Control/Element for which ARIA properties are collected
       */
      oElement: UI5Element,
      /**
       * Map of ARIA properties keyed by their name (without prefix "aria-"); the method implementation can enhance
       * this map in any way (add or remove properties, modify values)
       */
      mAriaProps: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Hook method for cleaning up the element instance before destruction.
     *
     * Applications must not call this hook method directly, it is called by the framework when the element
     * is {@link #destroy destroyed}.
     *
     * Subclasses of Element should override this hook to implement any necessary cleanup.
     *
     *
     * ```javascript
     *
     * exit: function() {
     *     // ... do any further cleanups of your subclass e.g. detach events...
     *     this.$().off("click", this.handleClick);
     *
     *     if (Element.prototype.exit) {
     *         Element.prototype.exit.apply(this, arguments);
     *     }
     * }
     * ```
     *
     *
     * For a more detailed description how to to use the exit hook, see Section {@link topic:d4ac0edbc467483585d0c53a282505a5
     * exit() Method} in the documentation.
     */
    exit(): void;
    /**
     * Searches and returns an array of child elements and controls which are referenced within an aggregation
     * or aggregations of child elements/controls. This can be either done recursive or not.
     *
     * **Take care: this operation might be expensive.**
     *
     * @returns array of child elements and controls
     */
    findElements(
      /**
       * true, if all nested children should be returned.
       */
      bRecursive: boolean
    ): UI5Element[];
    /**
     * Sets the focus to the stored focus DOM reference.
     */
    focus(
      /**
       * Options for setting the focus
       */
      oFocusInfo?: {
        /**
         * @since 1.60 if it's set to true, the focused element won't be shifted into the viewport if it's not completely
         * visible before the focus is set
         */
        preventScroll?: boolean;
        /**
         * Further control-specific setting of the focus target within the control @since 1.98
         */
        targetInfo?: any;
      }
    ): void;
    /**
     * Gets content of aggregation {@link #getCustomData customData}.
     *
     * Custom Data, a data structure like a map containing arbitrary key value pairs.
     */
    getCustomData(): CustomData[];
    /**
     * @SINCE 1.19
     *
     * Gets content of aggregation {@link #getDependents dependents}.
     *
     * Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating
     * Element.
     */
    getDependents(): UI5Element[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the best suitable DOM Element that represents this UI5 Element. By default the DOM Element with
     * the same ID as this Element is returned. Subclasses should override this method if the lookup via id
     * is not sufficient.
     *
     * Note that such a DOM Element does not necessarily exist in all cases. Some elements or controls might
     * not have a DOM representation at all (e.g. a naive FlowLayout) while others might not have one due to
     * their current state (e.g. an initial, not yet rendered control).
     *
     * If an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single
     * dash) and the DOM node with that compound ID will be returned. This matches the UI5 naming convention
     * for named inner DOM nodes of a control.
     *
     * @returns The Element's DOM Element, sub DOM Element or `null`
     */
    getDomRef(
      /**
       * ID suffix to get the DOMRef for
       */
      sSuffix?: string
    ): Element | null;
    /**
     * @SINCE 1.56
     *
     * Gets content of aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * Defines the drag-and-drop configuration. **Note:** This configuration might be ignored due to control
     * {@link sap.ui.core.Element.extend metadata} restrictions.
     */
    getDragDropConfig(): DragDropBase[];
    /**
     * Get the context binding object for a specific model name.
     *
     * **Note:** to be compatible with future versions of this API, you must not use the following model names:
     *
     * 	 - `null`
     * 	 - empty string `""`
     * 	 - string literals `"null"` or `"undefined"`  Omitting the model name (or using the value `undefined`)
     * 			is explicitly allowed and refers to the default model.
     *
     * @returns Context binding for the given model name or `undefined`
     */
    getElementBinding(
      /**
       * Name of the model or `undefined`
       */
      sModelName?: string
    ): ContextBinding | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the DOM Element that should get the focus or `null` if there's no such element currently.
     *
     * To be overwritten by the specific control method.
     *
     * @returns Returns the DOM Element that should get the focus or `null`
     */
    getFocusDomRef(): Element | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an object representing the serialized focus information.
     *
     * To be overwritten by the specific control method.
     *
     * @returns an object representing the serialized focus information
     */
    getFocusInfo(): object;
    /**
     * Elements don't have a facade and therefore return themselves as their interface.
     * See:
     * 	sap.ui.base.Object#getInterface
     *
     * @returns `this` as there's no facade for elements
     */
    getInterface(): this;
    /**
     * Gets content of aggregation {@link #getLayoutData layoutData}.
     *
     * Defines the layout constraints for this control when it is used inside a Layout. LayoutData classes are
     * typed classes and must match the embedding Layout. See VariantLayoutData for aggregating multiple alternative
     * LayoutData instances to a single Element.
     */
    getLayoutData(): LayoutData;
    /**
     * Returns the runtime metadata for this UI element.
     *
     * When using the defineClass method, this function is automatically created and returns a runtime representation
     * of the design time metadata.
     *
     * @returns runtime metadata
     */
    getMetadata(): ElementMetadata;
    /**
     * Returns the tooltip for this element if any or an undefined value. The tooltip can either be a simple
     * string or a subclass of {@link sap.ui.core.TooltipBase}.
     *
     * Callers that are only interested in tooltips of type string (e.g. to render them as a `title` attribute),
     * should call the convenience method {@link #getTooltip_AsString} instead. If they want to get a tooltip
     * text no matter where it comes from (be it a string tooltip or the text from a TooltipBase instance) then
     * they could call {@link #getTooltip_Text} instead.
     *
     * @returns The tooltip for this Element or `null`.
     */
    getTooltip(): string | TooltipBase | null;
    /**
     * Returns the tooltip for this element but only if it is a simple string. Otherwise, `undefined` is returned.
     *
     * @returns string tooltip or `undefined`
     */
    getTooltip_AsString(): string | undefined;
    /**
     * Returns the main text for the current tooltip or `undefined` if there is no such text.
     *
     * If the tooltip is an object derived from `sap.ui.core.TooltipBase`, then the text property of that object
     * is returned. Otherwise the object itself is returned (either a string or `undefined` or `null`).
     *
     * @returns Text of the current tooltip or `undefined` or `null`
     */
    getTooltip_Text(): string | undefined | null;
    /**
     * Checks for the provided `sap.ui.core.CustomData` in the aggregation {@link #getCustomData customData}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCustomData(
      /**
       * The customData whose index is looked for
       */
      oCustomData: CustomData
    ): int;
    /**
     * @SINCE 1.19
     *
     * Checks for the provided `sap.ui.core.Element` in the aggregation {@link #getDependents dependents}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDependent(
      /**
       * The dependent whose index is looked for
       */
      oDependent: UI5Element
    ): int;
    /**
     * @SINCE 1.56
     *
     * Checks for the provided `sap.ui.core.dnd.DragDropBase` in the aggregation {@link #getDragDropConfig dragDropConfig}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDragDropConfig(
      /**
       * The dragDropConfig whose index is looked for
       */
      oDragDropConfig: DragDropBase
    ): int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initializes the element instance after creation.
     *
     * Applications must not call this hook method directly, it is called by the framework while the constructor
     * of an element is executed.
     *
     * Subclasses of Element should override this hook to implement any necessary initialization.
     */
    init(): void;
    /**
     * Inserts a customData into the aggregation {@link #getCustomData customData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCustomData(
      /**
       * The customData to insert; if empty, nothing is inserted
       */
      oCustomData: CustomData,
      /**
       * The `0`-based index the customData should be inserted at; for a negative value of `iIndex`, the customData
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customData
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.19
     *
     * Inserts a dependent into the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDependent(
      /**
       * The dependent to insert; if empty, nothing is inserted
       */
      oDependent: UI5Element,
      /**
       * The `0`-based index the dependent should be inserted at; for a negative value of `iIndex`, the dependent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dependent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.56
     *
     * Inserts a dragDropConfig into the aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDragDropConfig(
      /**
       * The dragDropConfig to insert; if empty, nothing is inserted
       */
      oDragDropConfig: DragDropBase,
      /**
       * The `0`-based index the dragDropConfig should be inserted at; for a negative value of `iIndex`, the dragDropConfig
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dragDropConfig
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.110
     *
     * Checks whether an element is able to get the focus after {@link #focus} is called.
     *
     * An element is treated as 'focusable' when all of the following conditions are met:
     * 	 - The element and all of its parents are not 'busy' or 'blocked',
     * 	 - the element is rendered at the top layer on the UI and not covered by any other DOM elements, such
     * 			as an opened modal popup or the global `BusyIndicator`,
     * 	 - the element matches the browser's prerequisites for being focusable: if it's a natively focusable
     * 			element, for example `input`, `select`, `textarea`, `button`, and so on, no 'tabindex' attribute is needed.
     * 			Otherwise, 'tabindex' must be set. In any case, the element must be visible in order to be focusable.
     *
     *
     * @returns Whether the element can get the focus after calling {@link #focus}
     */
    isFocusable(): boolean;
    /**
     * @deprecated (since 1.28.0) - The contract of this method is not fully defined and its write capabilities
     * overlap with applySettings
     *
     * This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name
     * depending if an `oValue` is provided or not.
     *
     * @returns Returns `this` to allow method chaining in case of setter and the property value in case of
     * getter
     */
    prop(
      /**
       * name of the property to set
       */
      sPropertyName: string,
      /**
       * value to set the property to
       */
      oValue?: any
    ): any | this;
    /**
     * Removes all the controls from the aggregation {@link #getCustomData customData}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCustomData(): CustomData[];
    /**
     * @SINCE 1.19
     *
     * Removes all the controls from the aggregation {@link #getDependents dependents}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDependents(): UI5Element[];
    /**
     * @SINCE 1.56
     *
     * Removes all the controls from the aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDragDropConfig(): DragDropBase[];
    /**
     * Removes a customData from the aggregation {@link #getCustomData customData}.
     *
     * @returns The removed customData or `null`
     */
    removeCustomData(
      /**
       * The customData to remove or its index or id
       */
      vCustomData: int | string | CustomData
    ): CustomData | null;
    /**
     * @SINCE 1.19
     *
     * Removes a dependent from the aggregation {@link #getDependents dependents}.
     *
     * @returns The removed dependent or `null`
     */
    removeDependent(
      /**
       * The dependent to remove or its index or id
       */
      vDependent: int | string | UI5Element
    ): UI5Element | null;
    /**
     * @SINCE 1.56
     *
     * Removes a dragDropConfig from the aggregation {@link #getDragDropConfig dragDropConfig}.
     *
     * @returns The removed dragDropConfig or `null`
     */
    removeDragDropConfig(
      /**
       * The dragDropConfig to remove or its index or id
       */
      vDragDropConfig: int | string | DragDropBase
    ): DragDropBase | null;
    /**
     * @SINCE 1.9.0
     *
     * Removes the given delegate from this element.
     *
     * This method will remove all registrations of the given delegate, not only one.
     *
     * @returns Returns `this` to allow method chaining
     */
    removeEventDelegate(
      /**
       * The delegate object which consists of the event handler names and the corresponding event handler functions
       */
      oDelegate: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This triggers immediate rerendering of its parent and thus of itself and its children.
     *
     * As `sap.ui.core.Element` "bubbles up" the rerender, changes to child-`Elements` will also result in immediate
     * rerendering of the whole sub tree.
     */
    rerender(): void;
    /**
     * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints for this control when it is used
     * inside a layout.
     *
     * @returns Returns `this` to allow method chaining
     */
    setLayoutData(
      /**
       * which should be set
       */
      oLayoutData: LayoutData
    ): this;
    /**
     * Sets a new tooltip for this object.
     *
     * The tooltip can either be a simple string (which in most cases will be rendered as the `title` attribute
     * of this Element) or an instance of {@link sap.ui.core.TooltipBase}.
     *
     * If a new tooltip is set, any previously set tooltip is deactivated.
     *
     * @returns Returns `this` to allow method chaining
     */
    setTooltip(
      /**
       * New tooltip
       */
      vTooltip: string | TooltipBase
    ): this;
    /**
     * Returns a simple string representation of this element.
     *
     * Mainly useful for tracing purposes.
     *
     * @returns a string description of this element
     */
    toString(): string;
    /**
     * Removes the defined binding context of this object, all bindings will now resolve relative to the parent
     * context again.
     *
     * @returns reference to the instance itself
     */
    unbindElement(sModelName: string): ManagedObject;
  }
  /**
   * The structure of the "metadata" object which is passed when inheriting from sap.ui.core.Element using
   * its static "extend" method. See {@link sap.ui.core.Element.extend} for details on its usage.
   */
  export type MetadataOptions = MetadataOptions1 & {
    /**
     * Defines draggable and droppable configuration of the element. The following boolean properties can be
     * provided in the given object literal to configure drag-and-drop behavior of the element (see {@link sap.ui.core.Element.MetadataOptions.DnD
     * DnD} for details): draggable, droppable If the `dnd` property is of type Boolean, then the `draggable`
     * and `droppable` configuration are both set to this Boolean value.
     */
    dnd?: boolean | MetadataOptions.DnD;
  };

  /**
   * @SINCE 1.67
   *
   * Registry of all `sap.ui.core.Element`s that currently exist.
   */
  export interface registry {
    /**
     * Number of existing elements.
     */
    size: int;

    /**
     * Return an object with all instances of `sap.ui.core.Element`, keyed by their ID.
     *
     * Each call creates a new snapshot object. Depending on the size of the UI, this operation therefore might
     * be expensive. Consider to use the `forEach` or `filter` method instead of executing similar operations
     * on the returned object.
     *
     * **Note**: The returned object is created by a call to `Object.create(null)`, and therefore lacks all
     * methods of `Object.prototype`, e.g. `toString` etc.
     *
     * @returns Object with all elements, keyed by their ID
     */
    all(): Record<ID, UI5Element>;
    /**
     * Returns an array with elements for which the given `callback` returns a value that coerces to `true`.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oElement, sID)
     * ```
     *  where `oElement` is the currently visited element instance and `sID` is the ID of that instance.
     *
     * If elements are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When an element is destroyed during the filtering and was
     * not visited yet, it might or might not be visited. As the behavior for such concurrent modifications
     * is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     *
     * This function returns an array with all elements matching the given predicate. The order of the elements
     * in the array is not specified and might change between calls (over time and across different versions
     * of UI5).
     *
     * @returns Array of elements matching the predicate; order is undefined and might change in newer versions
     * of UI5
     */
    filter(
      /**
       * predicate against which each element is tested
       */
      callback: (p1: UI5Element, p2: ID) => boolean,
      /**
       * context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): UI5Element[];
    /**
     * Calls the given `callback` for each element.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oElement, sID)
     * ```
     *  where `oElement` is the currently visited element instance and `sID` is the ID of that instance.
     *
     * The order in which the callback is called for elements is not specified and might change between calls
     * (over time and across different versions of UI5).
     *
     * If elements are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When an element is destroyed during the filtering and was
     * not visited yet, it might or might not be visited. As the behavior for such concurrent modifications
     * is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     */
    forEach(
      /**
       * Function to call for each element
       */
      callback: (p1: UI5Element, p2: ID) => void,
      /**
       * Context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): void;
    /**
     * Retrieves an Element by its ID.
     *
     * When the ID is `null` or `undefined` or when there's no element with the given ID, then `undefined` is
     * returned.
     *
     * @returns Element with the given ID or `undefined`
     */
    get(
      /**
       * ID of the element to retrieve
       */
      id: ID
    ): UI5Element | undefined;
  }
  export const registry: registry;

  export interface $ElementSettings extends $ManagedObjectSettings {
    /**
     * The tooltip that should be shown for this Element.
     *
     * In the most simple case, a tooltip is a string that will be rendered by the control and displayed by
     * the browser when the mouse pointer hovers over the control's DOM. In this variant, `tooltip` behaves
     * like a simple control property.
     *
     * Controls need to explicitly support this kind of tooltip as they have to render it, but most controls
     * do. Exceptions will be documented for the corresponding controls (e.g. `sap.ui.core.HTML` does not support
     * tooltips).
     *
     * Alternatively, `tooltip` can act like a 0..1 aggregation and can be set to a tooltip control (an instance
     * of a subclass of `sap.ui.core.TooltipBase`). In that case, the framework will take care of rendering
     * the tooltip control in a popup-like manner. Such a tooltip control can display arbitrary content, not
     * only a string.
     *
     * UI5 currently does not provide a recommended implementation of `TooltipBase` as the use of content-rich
     * tooltips is discouraged by the Fiori Design Guidelines. Existing subclasses of `TooltipBase` therefore
     * have been deprecated. However, apps can still subclass from `TooltipBase` and create their own implementation
     * when needed (potentially taking the deprecated implementations as a starting point).
     *
     * See the section {@link https://experience.sap.com/fiori-design-web/using-tooltips/ Using Tooltips} in
     * the Fiori Design Guideline.
     */
    tooltip?: string | TooltipBase | PropertyBindingInfo;

    /**
     * Custom Data, a data structure like a map containing arbitrary key value pairs.
     */
    customData?:
      | CustomData[]
      | CustomData
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Defines the layout constraints for this control when it is used inside a Layout. LayoutData classes are
     * typed classes and must match the embedding Layout. See VariantLayoutData for aggregating multiple alternative
     * LayoutData instances to a single Element.
     */
    layoutData?: LayoutData;

    /**
     * @SINCE 1.19
     *
     * Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating
     * Element.
     */
    dependents?:
      | UI5Element[]
      | UI5Element
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * @SINCE 1.56
     *
     * Defines the drag-and-drop configuration. **Note:** This configuration might be ignored due to control
     * {@link sap.ui.core.Element.extend metadata} restrictions.
     */
    dragDropConfig?:
      | DragDropBase[]
      | DragDropBase
      | AggregationBindingInfo
      | `{${string}}`;
  }

  export namespace MetadataOptions {
    /**
     * An object literal configuring the drag&drop capabilities of a class derived from sap.ui.core.Element.
     * See {@link sap.ui.core.Element.MetadataOptions MetadataOptions} for details on its usage.
     */
    type DnD = {
      /**
       * Defines whether the element is draggable or not. The default value is `false`.
       */
      draggable?: boolean;
      /**
       * Defines whether the element is droppable (it allows being dropped on by a draggable element) or not.
       * The default value is `false`.
       */
      droppable?: boolean;
    };
  }
}

declare module "sap/ui/core/ElementMetadata" {
  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 0.8.6
   */
  export default class ElementMetadata extends ManagedObjectMetadata {
    /**
     * Creates a new metadata object for a UIElement subclass.
     */
    constructor(
      /**
       * fully qualified name of the class that is described by this metadata object
       */
      sClassName: string,
      /**
       * static info to construct the metadata from
       */
      oClassInfo: object
    );

    /**
     * Calculates a new id based on a prefix.
     *
     * @returns A (hopefully unique) control id
     */
    static uid(): string;
    /**
     * @SINCE 1.56
     *
     * Returns an info object describing the drag-and-drop behavior.
     *
     * @returns An info object about the drag-and-drop behavior.
     */
    getDragDropInfo(
      /**
       * name of the aggregation or empty.
       */
      sAggregationName?: string
    ): Object;
    /**
     * By default, the element name is equal to the class name
     *
     * @returns the qualified name of the UIElement class
     */
    getElementName(): string;
  }
}

declare module "sap/ui/core/EnabledPropagator" {
  export default class EnabledPropagator {
    /**
     * Mixin for enhancement of a control prototype with propagation of the `enabled` property.
     *
     * Controls that apply this mixin calculate their effective `enabled` state on read access as the logical
     * OR of their own `enabled` property and the `enabled` state of the nearest ancestor control which has
     * either an `enabled` property or a `getEnabled` method.
     *
     * Applying this mixin adds the `enabled` property, if it not already exists, to the control metadata.
     *
     * Also adds the `useEnabledPropagator(boolean)` helper method to the prototype of the given control. `myControlInstance.useEnabledPropagator(false)`
     * can be used to prevent a single instance from using `EnabledPropagator`. In this case, the effective
     * `enabled` state does not take any ancestors `enabled` state into account, only the control's own `enabled`
     * property.
     */
    constructor(
      /**
       * Value that should be used as default value for the enhancement of the control.
       */
      bDefault?: boolean,
      /**
       * Whether the introduced property should use the old name `Enabled`.
       */
      bLegacy?: boolean
    );
  }
}

declare module "sap/ui/core/EventBus" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.8.0
   *
   * Provides eventing capabilities for applications like firing events and attaching or detaching event handlers
   * for events which are notified when events are fired.
   *
   * It is recommended to use the EventBus only when there is no other option to communicate between different
   * instances, e.g. native UI5 events. Custom events can be fired by classes that extend {@link sap.ui.base.EventProvider},
   * such as sap.ui.core.Control, sap.ui.core.mvc.View or sap.ui.core.Component, and the events can be consumed
   * by other classes to achieve communication between different instances.
   *
   * Heavily using the EventBus can easily result in code which is hard to read and maintain because it's
   * difficult to keep an overview of all event publishers and subscribers.
   */
  export default class EventBus extends BaseObject {
    /**
     * Creates an instance of EventBus.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.EventBus with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EventBus>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.EventBus.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Cleans up the internal structures and removes all event handlers.
     *
     * The object must not be used anymore after destroy was called.
     * See:
     * 	sap.ui.base.Object#destroy
     */
    destroy(): void;
    /**
     * Fires an event using the specified settings and notifies all attached event handlers.
     */
    publish(
      /**
       * The channel of the event to fire. If not given, the default channel is used. The channel `"sap.ui"` is
       * reserved by the UI5 framework. An application might listen to events on this channel but is not allowed
       * to publish its own events there.
       */
      sChannelId: string,
      /**
       * The identifier of the event to fire
       */
      sEventId: string,
      /**
       * The parameters which should be carried by the event
       */
      oData?: object
    ): void;
    /**
     * Fires an event using the specified settings and notifies all attached event handlers.
     */
    publish(
      /**
       * The identifier of the event to fire
       */
      sEventId: string,
      /**
       * The parameters which should be carried by the event
       */
      oData?: object
    ): void;
    /**
     * Attaches an event handler to the event with the given identifier on the given event channel.
     *
     * @returns Returns `this` to allow method chaining
     */
    subscribe(
      /**
       * The channel of the event to subscribe to. If not given, the default channel is used. The channel `"sap.ui"`
       * is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed
       * to publish its own events there.
       */
      sChannelId: string,
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event bus instance. The channel is provided as first argument
       * of the handler, and the event identifier is provided as the second argument. The parameter map carried
       * by the event is provided as the third argument (if present). Handlers must not change the content of
       * this map.
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event bus.
       */
      oListener?: object
    ): this;
    /**
     * Attaches an event handler to the event with the given identifier on the given event channel.
     *
     * @returns Returns `this` to allow method chaining
     */
    subscribe(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event bus instance. The channel is provided as first argument
       * of the handler, and the event identifier is provided as the second argument. The parameter map carried
       * by the event is provided as the third argument (if present). Handlers must not change the content of
       * this map.
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event bus.
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32.0
     *
     * Attaches an event handler, called one time only, to the event with the given identifier on the given
     * event channel.
     *
     * When the event occurs, the handler function is called and the handler registration is automatically removed
     * afterwards.
     *
     * @returns Returns `this` to allow method chaining
     */
    subscribeOnce(
      /**
       * The channel of the event to subscribe to. If not given, the default channel is used. The channel `"sap.ui"`
       * is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed
       * to publish its own events there.
       */
      sChannelId: string,
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event bus instance. The channel is provided as first argument
       * of the handler, and the event identifier is provided as the second argument. The parameter map carried
       * by the event is provided as the third argument (if present). Handlers must not change the content of
       * this map.
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event bus.
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32.0
     *
     * Attaches an event handler, called one time only, to the event with the given identifier on the given
     * event channel.
     *
     * When the event occurs, the handler function is called and the handler registration is automatically removed
     * afterwards.
     *
     * @returns Returns `this` to allow method chaining
     */
    subscribeOnce(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the event bus instance. The channel is provided as first argument
       * of the handler, and the event identifier is provided as the second argument. The parameter map carried
       * by the event is provided as the third argument (if present). Handlers must not change the content of
       * this map.
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the event bus.
       */
      oListener?: object
    ): this;
    /**
     * Removes a previously subscribed event handler from the event with the given identifier on the given event
     * channel.
     *
     * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
     *
     * @returns Returns `this` to allow method chaining
     */
    unsubscribe(
      /**
       * The channel of the event to unsubscribe from. If not given, the default channel is used.
       */
      sChannelId: string,
      /**
       * The identifier of the event to unsubscribe from
       */
      sEventId: string,
      /**
       * The handler function to unsubscribe from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object
    ): this;
    /**
     * Removes a previously subscribed event handler from the event with the given identifier on the given event
     * channel.
     *
     * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
     *
     * @returns Returns `this` to allow method chaining
     */
    unsubscribe(
      /**
       * The identifier of the event to unsubscribe from
       */
      sEventId: string,
      /**
       * The handler function to unsubscribe from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object
    ): this;
  }
}

declare module "sap/ui/core/ExtensionPoint" {
  import View from "sap/ui/core/mvc/View";

  import Fragment from "sap/ui/core/Fragment";

  import Control from "sap/ui/core/Control";

  interface ExtensionPoint {
    /**
     * @SINCE 1.56.0
     *
     * Creates 0..n UI5 controls from an `ExtensionPoint`.
     *
     * One control if the `ExtensionPoint` is e.g. filled with a `View`, zero for extension points without configured
     * extension and n controls for multi-root `Fragments` as extension.
     *
     * @returns a Promise, which resolves with an array of 0..n controls created from an `ExtensionPoint`. If
     * `mOptions.createDefaultContent` is called and returns a Promise, that Promise is returned by `ExtensionPoint.load`.
     */
    load(
      /**
       * an object map (see below)
       */
      mOptions: {
        /**
         * The view or fragment containing the extension point
         */
        container: View | Fragment;
        /**
         * The `mOptions.name` is used to identify the extension point in the customizing
         */
        name: string;
        /**
         * Optional callback function creating default content, returning an array of controls. It is executed when
         * there's no customizing, if not provided, no default content will be rendered. `mOptions.createDefaultContent`
         * might also return a Promise, which resolves with an array of controls.
         */
        createDefaultContent?: Function;
        /**
         * Whether the ExtensionPoint content should be loaded asynchronously
         */
        async?: boolean;
      }
    ): Promise<Control[]>;
  }
  const ExtensionPoint: ExtensionPoint;
  export default ExtensionPoint;
}

declare module "sap/ui/core/format/DateFormat" {
  import CalendarWeekNumbering from "sap/ui/core/date/CalendarWeekNumbering";

  import CalendarType from "sap/ui/core/CalendarType";

  import Locale from "sap/ui/core/Locale";

  import UI5Date from "sap/ui/core/date/UI5Date";

  /**
   * The DateFormat is a static class for formatting and parsing single date and time values or date and time
   * intervals according to a set of format options.
   *
   * Important: Every Date is converted with the timezone taken from {@link sap.ui.core.Configuration#getTimezone}.
   * The timezone falls back to the browser's local timezone.
   *
   * Supported format options are pattern based on Unicode LDML Date Format notation. Please note that only
   * a subset of the LDML date symbols is supported. If no pattern is specified a default pattern according
   * to the locale settings is used.
   *
   * Documentation links:
   * 	 - {@link topic:91f2eba36f4d1014b6dd926db0e91070 Date Format}
   * 	 - {@link http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table}
   */
  export default class DateFormat {
    constructor();

    /**
     * Get a date instance of the DateFormat, which can be used for formatting.
     *
     * @returns date instance of the DateFormat
     */
    static getDateInstance(
      /**
       * Object which defines the format options
       */
      oFormatOptions?: {
        /**
         * since 1.108.0 specifies the calendar week numbering. If specified, this overwrites `oFormatOptions.firstDayOfWeek`
         * and `oFormatOptions.minimalDaysInFirstWeek`.
         */
        calendarWeekNumbering?:
          | CalendarWeekNumbering
          | keyof typeof CalendarWeekNumbering;
        /**
         * since 1.105.0 specifies the first day of the week starting with `0` (which is Sunday); if not defined,
         * the value taken from the locale is used
         */
        firstDayOfWeek?: int;
        /**
         * since 1.105.0 minimal days at the beginning of the year which define the first calendar week; if not
         * defined, the value taken from the locale is used
         */
        minimalDaysInFirstWeek?: int;
        /**
         * since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern
         * in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that
         * is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w), Day-Of-Week (E/e/c), Day (d), Hour (h/H/k/K/j/J),
         * Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x) See {@link http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems}
         */
        format?: string;
        /**
         * a data pattern in LDML format. It is not verified whether the pattern represents only a date.
         */
        pattern?: string;
        /**
         * can be either 'short, 'medium', 'long' or 'full'. If no pattern is given, a locale dependent default
         * date pattern of that style is used from the LocaleData class.
         */
        style?: string;
        /**
         * if true, by parsing it is checked if the value is a valid date
         */
        strictParsing?: boolean;
        /**
         * if true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today",
         * "1 day ago", "in 5 days"
         */
        relative?: boolean;
        /**
         * the day range used for relative formatting. If `oFormatOptions.relativeScale` is set to default value
         * 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next
         * 6 days are formatted relatively. Otherwise when `oFormatOptions.relativeScale` is set to 'auto', all
         * dates are formatted relatively.
         */
        relativeRange?: int[];
        /**
         * if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale
         * is chosen depending on the difference between the given date and now.
         */
        relativeScale?: string;
        /**
         * since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
         */
        relativeStyle?: string;
        /**
         * since 1.48.0 if true, the {@link sap.ui.core.format.DateFormat#format format} method expects an array
         * with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan
         * 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
         * Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
         */
        interval?: boolean;
        /**
         * Since 1.113.0, a delimiter for intervals. With a given interval delimiter a specific interval format
         * is created. **Example:** If `oFormatOptions.intervalDelimiter` is set to "...", an interval would be
         * given as "Jan 10, 2008...Feb 12, 2008". **Note:** If this format option is set, the locale-specific interval
         * notation is overruled, for example "Jan 10 – Feb 12, 2008" becomes "Jan 10, 2008...Feb 12, 2008".
         */
        intervalDelimiter?: string;
        /**
         * Only relevant if oFormatOptions.interval is set to 'true'. This allows to pass an array with only one
         * date object to the {@link sap.ui.core.format.DateFormat#format format} method.
         */
        singleIntervalValue?: boolean;
        /**
         * if true, the date is formatted and parsed as UTC instead of the local timezone
         */
        UTC?: boolean;
        /**
         * The calender type which is used to format and parse the date. This value is by default either set in
         * configuration or calculated based on current locale.
         */
        calendarType?: CalendarType | keyof typeof CalendarType;
      },
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * Get a date instance of the DateFormat, which can be used for formatting.
     *
     * @returns date instance of the DateFormat
     */
    static getDateInstance(
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * Get a datetime instance of the DateFormat, which can be used for formatting.
     *
     * @returns datetime instance of the DateFormat
     */
    static getDateTimeInstance(
      /**
       * Object which defines the format options
       */
      oFormatOptions?: {
        /**
         * since 1.108.0 specifies the calendar week numbering. If specified, this overwrites `oFormatOptions.firstDayOfWeek`
         * and `oFormatOptions.minimalDaysInFirstWeek`.
         */
        calendarWeekNumbering?:
          | CalendarWeekNumbering
          | keyof typeof CalendarWeekNumbering;
        /**
         * since 1.105.0 specifies the first day of the week starting with `0` (which is Sunday); if not defined,
         * the value taken from the locale is used
         */
        firstDayOfWeek?: int;
        /**
         * since 1.105.0 minimal days at the beginning of the year which define the first calendar week; if not
         * defined, the value taken from the locale is used
         */
        minimalDaysInFirstWeek?: int;
        /**
         * since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern
         * in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that
         * is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w), Day-Of-Week (E/e/c), Day (d), Hour (h/H/k/K/j/J),
         * Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x) See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
         */
        format?: string;
        /**
         * a datetime pattern in LDML format. It is not verified whether the pattern represents a full datetime.
         */
        pattern?: string;
        /**
         * can be either 'short, 'medium', 'long' or 'full'. For datetime you can also define mixed styles, separated
         * with a slash, where the first part is the date style and the second part is the time style (e.g. "medium/short").
         * If no pattern is given, a locale dependent default datetime pattern of that style is used from the LocaleData
         * class.
         */
        style?: string;
        /**
         * if true, by parsing it is checked if the value is a valid datetime
         */
        strictParsing?: boolean;
        /**
         * if true, the date is formatted relatively to today's date if it is within the given day range, e.g. "today",
         * "1 day ago", "in 5 days"
         */
        relative?: boolean;
        /**
         * the day range used for relative formatting. If `oFormatOptions.relativeScale` is set to default value
         * 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next
         * 6 days are formatted relatively. Otherwise when `oFormatOptions.relativeScale` is set to 'auto', all
         * dates are formatted relatively.
         */
        relativeRange?: int[];
        /**
         * if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale
         * is chosen depending on the difference between the given date and now.
         */
        relativeScale?: string;
        /**
         * since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
         */
        relativeStyle?: string;
        /**
         * since 1.48.0 if true, the {@link sap.ui.core.format.DateFormat#format format} method expects an array
         * with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan
         * 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
         * Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
         */
        interval?: boolean;
        /**
         * Since 1.113.0, a delimiter for intervals. With a given interval delimiter a specific interval format
         * is created. **Example:** If `oFormatOptions.intervalDelimiter` is set to "...", an interval would be
         * given as "Jan 10, 2008, 9:15:00 AM...Jan 10, 2008, 11:45:00 AM". **Note:** If this format option is set,
         * the locale-specific interval notation is overruled, for example "Jan 10, 2008, 9:15 – 11:45 AM" becomes
         * "Jan 10, 2008, 9:15 AM...Jan 10, 2008, 11:45 AM".
         */
        intervalDelimiter?: string;
        /**
         * Only relevant if oFormatOptions.interval is set to 'true'. This allows to pass an array with only one
         * date object to the {@link sap.ui.core.format.DateFormat#format format} method.
         */
        singleIntervalValue?: boolean;
        /**
         * if true, the date is formatted and parsed as UTC instead of the local timezone
         */
        UTC?: boolean;
        /**
         * The calender type which is used to format and parse the date. This value is by default either set in
         * configuration or calculated based on current locale.
         */
        calendarType?: CalendarType | keyof typeof CalendarType;
      },
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * Get a datetime instance of the DateFormat, which can be used for formatting.
     *
     * @returns datetime instance of the DateFormat
     */
    static getDateTimeInstance(
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * @SINCE 1.99.0
     *
     * Get a datetimeWithTimezone instance of the DateFormat, which can be used for formatting.
     *
     * @returns dateTimeWithTimezone instance of the DateFormat
     */
    static getDateTimeWithTimezoneInstance(
      /**
       * An object which defines the format options
       */
      oFormatOptions?: {
        /**
         * since 1.108.0 specifies the calendar week numbering. If specified, this overwrites `oFormatOptions.firstDayOfWeek`
         * and `oFormatOptions.minimalDaysInFirstWeek`.
         */
        calendarWeekNumbering?:
          | CalendarWeekNumbering
          | keyof typeof CalendarWeekNumbering;
        /**
         * since 1.105.0 specifies the first day of the week starting with `0` (which is Sunday); if not defined,
         * the value taken from the locale is used
         */
        firstDayOfWeek?: int;
        /**
         * since 1.105.0 minimal days at the beginning of the year which define the first calendar week; if not
         * defined, the value taken from the locale is used
         */
        minimalDaysInFirstWeek?: int;
        /**
         * A string containing pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into a pattern for
         * the used locale that matches the wanted symbols best. The symbols must be in canonical order, that is:
         * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w), Day-Of-Week (E/e/c), Day (d), Hour (h/H/k/K/j/J),
         * Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x) See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
         */
        format?: string;
        /**
         * a datetime pattern in LDML format. It is not verified whether the pattern represents a full datetime.
         */
        pattern?: string;
        /**
         * Specifies if the date should be displayed. It is ignored for formatting when an options pattern or a
         * format are supplied.
         */
        showDate?: boolean;
        /**
         * Specifies if the time should be displayed. It is ignored for formatting when an options pattern or a
         * format are supplied.
         */
        showTime?: boolean;
        /**
         * Specifies if the timezone should be displayed. It is ignored for formatting when an options pattern or
         * a format are supplied.
         */
        showTimezone?: boolean;
        /**
         * Can be either 'short, 'medium', 'long' or 'full'. For datetime you can also define mixed styles, separated
         * with a slash, where the first part is the date style and the second part is the time style (e.g. "medium/short").
         * If no pattern is given, a locale-dependent default datetime pattern of that style from the LocaleData
         * class is used.
         */
        style?: string;
        /**
         * Whether to check by parsing if the value is a valid datetime
         */
        strictParsing?: boolean;
        /**
         * Whether the date is formatted relatively to today's date if it is within the given day range, e.g. "today",
         * "1 day ago", "in 5 days"
         */
        relative?: boolean;
        /**
         * The day range used for relative formatting. If `oFormatOptions.relativeScale` is set to the default value
         * 'day', the `relativeRange is by default [-6, 6], which means that only the previous 6 and the following
         * 6 days are formatted relatively. If oFormatOptions.relativeScale` is set to 'auto', all dates are
         * formatted relatively.
         */
        relativeRange?: int[];
        /**
         * If 'auto' is set, a new relative time format is switched on for all Date/Time instances. The default
         * value depends on `showDate` and `showTime` options.
         */
        relativeScale?: string;
        /**
         * The style of the relative format. The valid values are "wide", "short", "narrow"
         */
        relativeStyle?: string;
        /**
         * The calendar type which is used to format and parse the date. This value is by default either set in
         * the configuration or calculated based on the current locale.
         */
        calendarType?: CalendarType | keyof typeof CalendarType;
      },
      /**
       * Locale to ask for locale-specific texts/settings
       */
      oLocale?: Locale
    ): DateTimeWithTimezone;
    /**
     * @SINCE 1.99.0
     *
     * Get a datetimeWithTimezone instance of the DateFormat, which can be used for formatting.
     *
     * @returns dateTimeWithTimezone instance of the DateFormat
     */
    static getDateTimeWithTimezoneInstance(
      /**
       * Locale to ask for locale-specific texts/settings
       */
      oLocale?: Locale
    ): DateTimeWithTimezone;
    /**
     * Get a time instance of the DateFormat, which can be used for formatting.
     *
     * @returns time instance of the DateFormat
     */
    static getTimeInstance(
      /**
       * Object which defines the format options
       */
      oFormatOptions?: {
        /**
         * since 1.108.0 specifies the calendar week numbering. If specified, this overwrites `oFormatOptions.firstDayOfWeek`
         * and `oFormatOptions.minimalDaysInFirstWeek`.
         */
        calendarWeekNumbering?:
          | CalendarWeekNumbering
          | keyof typeof CalendarWeekNumbering;
        /**
         * since 1.105.0 specifies the first day of the week starting with `0` (which is Sunday); if not defined,
         * the value taken from the locale is used
         */
        firstDayOfWeek?: int;
        /**
         * since 1.105.0 minimal days at the beginning of the year which define the first calendar week; if not
         * defined, the value taken from the locale is used
         */
        minimalDaysInFirstWeek?: int;
        /**
         * since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern
         * in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that
         * is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w), Day-Of-Week (E/e/c), Day (d), Hour (h/H/k/K/j/J),
         * Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x) See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
         */
        format?: string;
        /**
         * a time pattern in LDML format. It is not verified whether the pattern only represents a time.
         */
        pattern?: string;
        /**
         * can be either 'short, 'medium', 'long' or 'full'. If no pattern is given, a locale dependent default
         * time pattern of that style is used from the LocaleData class.
         */
        style?: string;
        /**
         * if true, by parsing it is checked if the value is a valid time
         */
        strictParsing?: boolean;
        /**
         * if true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today",
         * "1 day ago", "in 5 days"
         */
        relative?: boolean;
        /**
         * the day range used for relative formatting. If `oFormatOptions.relativeScale` is set to default value
         * 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next
         * 6 days are formatted relatively. Otherwise when `oFormatOptions.relativeScale` is set to 'auto', all
         * dates are formatted relatively.
         */
        relativeRange?: int[];
        /**
         * if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale
         * is chosen depending on the difference between the given date and now.
         */
        relativeScale?: string;
        /**
         * since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
         */
        relativeStyle?: string;
        /**
         * since 1.48.0 if true, the {@link sap.ui.core.format.DateFormat#format format} method expects an array
         * with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan
         * 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
         * Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
         */
        interval?: boolean;
        /**
         * Since 1.113.0, a delimiter for intervals. With a given interval delimiter a specific interval format
         * is created. **Example:** If `oFormatOptions.intervalDelimiter` is set to "...", an interval would be
         * given as "09:15 AM...11:45 AM". **Note:** If this format option is set, the locale-specific interval
         * notation is overruled, for example "09:15 – 11:45 AM" becomes "9:15 AM...11:45 AM".
         */
        intervalDelimiter?: string;
        /**
         * Only relevant if oFormatOptions.interval is set to 'true'. This allows to pass an array with only one
         * date object to the {@link sap.ui.core.format.DateFormat#format format} method.
         */
        singleIntervalValue?: boolean;
        /**
         * if true, the time is formatted and parsed as UTC instead of the local timezone
         */
        UTC?: boolean;
        /**
         * The calender type which is used to format and parse the date. This value is by default either set in
         * configuration or calculated based on current locale.
         */
        calendarType?: CalendarType | keyof typeof CalendarType;
      },
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * Get a time instance of the DateFormat, which can be used for formatting.
     *
     * @returns time instance of the DateFormat
     */
    static getTimeInstance(
      /**
       * Locale to ask for locale specific texts/settings
       */
      oLocale?: Locale
    ): DateFormat;
    /**
     * Format a date according to the given format options.
     *
     * Uses the timezone from {@link sap.ui.core.Configuration#getTimezone}, which falls back to the browser's
     * local timezone to convert the given date.
     *
     * When using instances from getDateTimeWithTimezoneInstance, please see the corresponding documentation:
     * {@link sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance#format}.
     *
     * @returns the formatted output value. If an invalid date is given, an empty string is returned.
     */
    format(
      /**
       * the value to format
       */
      vJSDate: Date | Date[],
      /**
       * whether to use UTC
       */
      bUTC?: boolean
    ): string;
    /**
     * Parse a string which is formatted according to the given format options.
     *
     * Uses the timezone from {@link sap.ui.core.Configuration#getTimezone}, which falls back to the browser's
     * local timezone to convert the given date.
     *
     * When using instances from getDateTimeWithTimezoneInstance, please see the corresponding documentation:
     * {@link sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance#parse}.
     *
     * @returns the parsed value(s)
     */
    parse(
      /**
       * the string containing a formatted date/time value
       */
      sValue: string,
      /**
       * whether to use UTC
       */
      bUTC?: boolean,
      /**
       * whether to use strict value check
       */
      bStrict?: boolean
    ): Date | Date[] | UI5Date | UI5Date[];
  }
  /**
   * @SINCE 1.99
   *
   * Interface for a timezone-specific DateFormat, which is able to format and parse a date based on a given
   * timezone. The timezone is used to convert the given date, and also for timezone-related pattern symbols.
   * The timezone is an IANA timezone ID, e.g. "America/New_York".
   * See:
   * 	sap.ui.core.format.DateFormat
   */
  export interface DateTimeWithTimezone {
    __implements__sap_ui_core_format_DateFormat_DateTimeWithTimezone: boolean;

    /**
     * @SINCE 1.99
     *
     * Format a date object to a string according to the given timezone and format options.
     *
     * @returns the formatted output value. If an invalid date or timezone is given, an empty string is returned.
     */
    format(
      /**
       * The date to format
       */
      oJSDate: Date,
      /**
       * The IANA timezone ID in which the date will be calculated and formatted e.g. "America/New_York". If the
       * parameter is omitted, `null` or an empty string, the timezone will be taken from {@link sap.ui.core.Configuration#getTimezone}.
       * For an invalid IANA timezone ID, an empty string will be returned.
       */
      sTimezone?: string
    ): string;
    /**
     * @SINCE 1.99
     *
     * Parse a string which is formatted according to the given format options to an array containing a date
     * object and the timezone.
     *
     * @returns the parsed values
     * 	 - An array containing datetime and timezone depending on the showDate, showTime and showTimezone options
     *
     * 	(Default): [Date, string], e.g. [UI5Date.getInstance("2021-11-13T13:22:33Z"), "America/New_York"]
     * 	 - `showTimezone: false`: [Date, undefined], e.g. [UI5Date.getInstance("2021-11-13T13:22:33Z"), undefined]
     *
     * 	 - `showDate: false, showTime: false`: [undefined, string], e.g. [undefined, "America/New_York"]
     */
    parse(
      /**
       * the string containing a formatted date/time value
       */
      sValue: string,
      /**
       * The IANA timezone ID which should be used to convert the date e.g. "America/New_York". If the parameter
       * is omitted, `null` or an empty string, the timezone will be taken from {@link sap.ui.core.Configuration#getTimezone}.
       * For an invalid IANA timezone ID, `null` will be returned.
       */
      sTimezone?: string,
      /**
       * Whether to be strict with regards to the value ranges of date fields, e.g. for a month pattern of `MM`
       * and a value range of [1-12] `strict` ensures that the value is within the range; if it is larger than
       * `12` it cannot be parsed and `null` is returned
       */
      bStrict?: boolean
    ):
      | [
          Date | import("sap/ui/core/date/UI5Date").default | undefined,
          string | undefined
        ]
      | null;
  }
}

declare module "sap/ui/core/format/DateFormatTimezoneDisplay" {
  /**
   * @SINCE 1.99.0
   * @deprecated (since 1.101) - replaced by `DateFormat#getDateTimeWithTimezoneInstance` with the `showDate`,
   * `showTime` and `showTimezone` format options.
   *
   * Configuration options for the `showTimezone` format option of `DateFormat#getDateTimeWithTimezoneInstance`.
   */
  enum DateFormatTimezoneDisplay {
    /**
     * Do not add the IANA timezone ID to the format output.
     */
    Hide = "Hide",
    /**
     * Only output the IANA timezone ID.
     */
    Only = "Only",
    /**
     * Add the IANA timezone ID to the format output.
     */
    Show = "Show",
  }
  export default DateFormatTimezoneDisplay;
}

declare module "sap/ui/core/format/FileSizeFormat" {
  import BaseObject from "sap/ui/base/Object";

  import Locale from "sap/ui/core/Locale";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The FileSizeFormat is a static class for formatting and parsing numeric file size values according to
   * a set of format options.
   *
   * Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
   * For format options which are not specified default values according to the type and locale settings are
   * used.
   *
   * Supported format options (additional to NumberFormat):
   * 	 - binaryFilesize: Whether to use base 2, that means 1 Kibibyte = 1024 Byte, or base 10, that means
   * 			1 Kilobyte = 1000 Byte
   */
  export default class FileSizeFormat extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FileSizeFormat>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Get an instance of the FileSizeFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     * @returns instance of the FileSizeFormat
     */
    static getInstance(
      /**
       * Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance}
       */
      oFormatOptions?: {
        /**
         * Whether to use base 2, that means 1 Kibibyte = 1024 Byte, or base 10, that means 1 Kilobyte = 1000 Byte
         */
        binaryFilesize?: boolean;
      },
      /**
       * The locale to get the formatter for
       */
      oLocale?: Locale
    ): FileSizeFormat;
    /**
     * Get an instance of the FileSizeFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     * @returns instance of the FileSizeFormat
     */
    static getInstance(
      /**
       * The locale to get the formatter for
       */
      oLocale?: Locale
    ): FileSizeFormat;
    /**
     * Returns a metadata object for class sap.ui.core.format.FileSizeFormat.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Format a filesize (in bytes) according to the given format options.
     *
     * @returns the formatted output value
     */
    format(
      /**
       * the number (or hex string) to format
       */
      oValue: number | string
    ): string;
    /**
     * Parse a string which is formatted according to the given format options.
     *
     * @returns the parsed value in bytes
     */
    parse(
      /**
       * the string containing a formatted filesize value
       */
      sValue: string
    ): number;
  }
}

declare module "sap/ui/core/format/ListFormat" {
  import Locale from "sap/ui/core/Locale";

  /**
   * The ListFormat is a static class for formatting and parsing an array of strings in a locale-sensitive
   * manner according to a set of format options.
   */
  export default class ListFormat {
    constructor();

    /**
     * Get an instance of the ListFormat which can be used for formatting.
     *
     * @returns Instance of the ListFormat
     */
    static getInstance(
      /**
       * Object which defines the format options
       */
      oFormatOptions?: object,
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): ListFormat;
    /**
     * Get an instance of the ListFormat which can be used for formatting.
     *
     * @returns Instance of the ListFormat
     */
    static getInstance(
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): ListFormat;
    /**
     * Formats a list according to the given format options.
     *
     * @returns The formatted output value.
     */
    format(
      /**
       * The value to format
       */
      aList: any[]
    ): string;
    /**
     * Parses a given list string into an array.
     *
     * @returns The parsed output value
     */
    parse(
      /**
       * String value to be parsed
       */
      sValue: string
    ): any[];
  }
}

declare module "sap/ui/core/format/NumberFormat" {
  import BaseObject from "sap/ui/base/Object";

  import Locale from "sap/ui/core/Locale";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The NumberFormat is a static class for formatting and parsing numeric values according to a set of format
   * options.
   */
  export default class NumberFormat extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.format.NumberFormat with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NumberFormat>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Get a currency instance of the NumberFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     *  This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property
     * in oFormatOptions to change the default value.
     *
     * The currency instance supports locally defined custom currency exclusive to the created instance. The
     * following example shows how to use custom currencies (e.g. for Bitcoins):
     * ```javascript
     *
     * var oFormat = NumberFormat.getCurrencyInstance({
     *     "currencyCode": false,
     *     "customCurrencies": {
     *         "BTC": {
     *             "symbol": "\u0243",
     *             "decimals": 3
     *         }
     *     }
     * });
     *
     * oFormat.format(123.4567, "BTC"); // "Ƀ 123.457"
     * ```
     *
     *
     * As an alternative to using a fixed `symbol` for your custom currencies, you can also provide an ISO-Code.
     * The provided ISO-Code will be used to look up the currency symbol in the global configuration, either
     * defined in the CLDR or custom defined on the Format Settings (see {@link sap.ui.core.Configuration.FormatSettings#setCustomCurrencies},
     * {@link sap.ui.core.Configuration.FormatSettings#addCustomCurrencies}).
     *
     * If no symbol is given at all, the custom currency key is used for formatting.
     *
     *
     * ```javascript
     *
     * var oFormat = NumberFormat.getCurrencyInstance({
     *     "currencyCode": false,
     *     "customCurrencies": {
     *         "MyDollar": {
     *             "isoCode": "USD",
     *             "decimals": 3
     *         },
     *         "Bitcoin": {
     *             "decimals": 2
     *         }
     *     }
     * });
     *
     * // symbol looked up from global configuration
     * oFormat.format(123.4567, "MyDollar"); // "$123.457"
     *
     * // no symbol available, custom currency key is rendered
     * oFormat.format(777.888, "Bitcoin"); // "Bitcoin 777.89"
     * ```
     *
     *
     * @returns currency instance of the NumberFormat
     */
    static getCurrencyInstance(
      /**
       * The option object, which supports the following parameters. If no options are given, default values according
       * to the type and locale settings are used.
       */
      oFormatOptions?: {
        /**
         * defines whether the currency is shown as a code in currency format. The currency symbol is displayed
         * when this option is set to `false` and a symbol has been defined for the given currency code.
         */
        currencyCode?: boolean;
        /**
         * can be set either to 'standard' (the default value) or to 'accounting' for an accounting-specific currency
         * display
         */
        currencyContext?: string;
        /**
         * defines a set of custom currencies exclusive to this NumberFormat instance. Custom currencies must not
         * only consist of digits. If custom currencies are defined on the instance, no other currencies can be
         * formatted and parsed by this instance. Globally available custom currencies can be added via the global
         * configuration. See the above examples. See also {@link sap.ui.core.Configuration.FormatSettings#setCustomCurrencies}
         * and {@link sap.ui.core.Configuration.FormatSettings#addCustomCurrencies}.
         */
        customCurrencies?: Record<string, object>;
        /**
         * defines the number of decimal digits
         */
        decimals?: int;
        /**
         * defines the character used as decimal separator. Note: `decimalSeparator` must always be different from
         * `groupingSeparator`.
         */
        decimalSeparator?: string;
        /**
         * since 1.30.0 defines what an empty string is parsed as, and what is formatted as an empty string. The
         * allowed values are "" (empty string), NaN, `null`, or 0. The 'format' and 'parse' functions are done
         * in a symmetric way. For example, when this parameter is set to NaN, an empty string is parsed as [NaN,
         * undefined], and NaN is formatted as an empty string.
         */
        emptyString?: null | number | string;
        /**
         * defines the grouping base size in digits if it is different from the grouping size (e.g. Indian grouping)
         */
        groupingBaseSize?: int;
        /**
         * defines whether grouping is enabled (grouping separators are shown)
         */
        groupingEnabled?: boolean;
        /**
         * defines the character used as grouping separator. Note: `groupingSeparator` must always be different
         * from `decimalSeparator`.
         */
        groupingSeparator?: string;
        /**
         * defines the grouping size in digits; the default is `3`. It must be a positive number.
         */
        groupingSize?: int;
        /**
         * defines the maximum number of decimal digits
         */
        maxFractionDigits?: int;
        /**
         * defines the maximum number of non-decimal digits. If the number exceeds this maximum, e.g. 1e+120, "?"
         * characters are shown instead of digits.
         */
        maxIntegerDigits?: int;
        /**
         * defines the minimal number of decimal digits
         */
        minFractionDigits?: int;
        /**
         * defines the minimal number of non-decimal digits
         */
        minIntegerDigits?: int;
        /**
         * defines the used minus symbol
         */
        minusSign?: string;
        /**
         * since 1.28.2 defines whether to output the string from the parse function in order to keep the precision
         * for big numbers. Numbers in scientific notation are parsed back to standard notation. For example, "5e-3"
         * is parsed to "0.005".
         */
        parseAsString?: boolean;
        /**
         * CLDR number pattern which is used to format the number
         */
        pattern?: string;
        /**
         * defines the used plus symbol
         */
        plusSign?: string;
        /**
         * Whether {@link #format} preserves decimal digits except trailing zeros in case there are more decimals
         * than the `maxFractionDigits` format option allows. If decimals are not preserved, the formatted number
         * is rounded to `maxFractionDigits`.
         */
        preserveDecimals?: boolean;
        /**
         * specifies the rounding behavior for discarding the digits after the maximum fraction digits defined by
         * maxFractionDigits. Rounding will only be applied if the passed value is of type `number`. This can be
         * assigned
         * 	 - by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode},
         * 	 - via a function that is used for rounding the number and takes two parameters: the number itself,
         * 			and the number of decimal digits that should be reserved.
         */
        roundingMode?: RoundingMode | keyof typeof RoundingMode;
        /**
         * defines the number of decimal in the shortened format string. If this isn't specified, the 'decimals'
         * options is used
         */
        shortDecimals?: int;
        /**
         * only use short number formatting for values above this limit
         */
        shortLimit?: int;
        /**
         * since 1.40 specifies a number from which the scale factor for 'short' or 'long' style format is generated.
         * The generated scale factor is used for all numbers which are formatted with this format instance. This
         * option has effect only when the option 'style' is set to 'short' or 'long'. This option is by default
         * set with `undefined` which means the scale factor is selected automatically for each number being formatted.
         */
        shortRefNumber?: int;
        /**
         * defines whether the currency code/symbol is shown in the formatted string, e.g. true: "1.00 EUR", false:
         * "1.00" for locale "en" If both `showMeasure` and `showNumber` are false, an empty string is returned
         */
        showMeasure?: boolean;
        /**
         * defines whether the number is shown as part of the result string, e.g. 1 EUR for locale "en" `NumberFormat.getCurrencyInstance({showNumber:true}).format(1,
         * "EUR"); // "1.00 EUR"` `NumberFormat.getCurrencyInstance({showNumber:false}).format(1, "EUR"); // "EUR"`
         * If both `showMeasure` and `showNumber` are false, an empty string is returned
         */
        showNumber?: boolean;
        /**
         * since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect
         * only when the 'style' options is set to either 'short' or 'long'.
         */
        showScale?: boolean;
        /**
         * whether the positions of grouping separators are validated. Space characters used as grouping separators
         * are not validated.
         */
        strictGroupingValidation?: boolean;
        /**
         * defines the style of format. Valid values are 'short, 'long' or 'standard' (based on the CLDR decimalFormat).
         * When set to 'short' or 'long', numbers are formatted into compact forms. When this option is set, the
         * default value of the 'precision' option is set to 2. This can be changed by setting either min/maxFractionDigits,
         * decimals, shortDecimals, or the 'precision' option itself.
         */
        style?: string;
        /**
         * overrides the global configuration value {@link sap.ui.core.Configuration.FormatSettings#getTrailingCurrencyCode},
         * which has a default value of `true</>. This is ignored if oFormatOptions.currencyCode` is set to
         * `false`, or if `oFormatOptions.pattern` is supplied.
         */
        trailingCurrencyCode?: boolean;
      },
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): NumberFormat;
    /**
     * Get a float instance of the NumberFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     *  This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property
     * in oFormatOptions to change the default value.
     *
     * The following example shows how grouping is done:
     * ```javascript
     *
     * var oFormat = NumberFormat.getFloatInstance({
     *     "groupingEnabled": true,  // grouping is enabled
     *     "groupingSeparator": '.', // grouping separator is '.'
     *     "groupingSize": 3,        // the amount of digits to be grouped (here: thousand)
     *     "decimalSeparator": ","   // the decimal separator must be different from the grouping separator
     * });
     *
     * oFormat.format(1234.56); // "1.234,56"
     * ```
     *
     *
     * @returns float instance of the NumberFormat
     */
    static getFloatInstance(
      /**
       * The option object, which supports the following parameters. If no options are given, default values according
       * to the type and locale settings are used.
       */
      oFormatOptions?: {
        /**
         * defines the number of decimal digits
         */
        decimals?: int;
        /**
         * defines the character used as decimal separator. Note: `decimalSeparator` must always be different from
         * `groupingSeparator`.
         */
        decimalSeparator?: string;
        /**
         * since 1.30.0 defines what an empty string is parsed as, and what is formatted as an empty string. The
         * allowed values are "" (empty string), NaN, `null`, or 0. The 'format' and 'parse' functions are done
         * in a symmetric way. For example, when this parameter is set to NaN, an empty string is parsed as NaN,
         * and NaN is formatted as an empty string.
         */
        emptyString?: null | number | string;
        /**
         * defines the grouping base size in digits if it is different from the grouping size (e.g. Indian grouping)
         */
        groupingBaseSize?: int;
        /**
         * defines whether grouping is enabled (grouping separators are shown)
         */
        groupingEnabled?: boolean;
        /**
         * defines the character used as grouping separator. Note: `groupingSeparator` must always be different
         * from `decimalSeparator`.
         */
        groupingSeparator?: string;
        /**
         * defines the grouping size in digits; the default is `3`. It must be a positive number.
         */
        groupingSize?: int;
        /**
         * defines the maximum number of decimal digits
         */
        maxFractionDigits?: int;
        /**
         * defines the maximum number of non-decimal digits. If the number exceeds this maximum, e.g. 1e+120, "?"
         * characters are shown instead of digits.
         */
        maxIntegerDigits?: int;
        /**
         * defines the minimal number of decimal digits
         */
        minFractionDigits?: int;
        /**
         * defines the minimal number of non-decimal digits
         */
        minIntegerDigits?: int;
        /**
         * defines the used minus symbol
         */
        minusSign?: string;
        /**
         * since 1.28.2 defines whether to output the string from the parse function in order to keep the precision
         * for big numbers. Numbers in scientific notation are parsed back to standard notation. For example, "5e-3"
         * is parsed to "0.005".
         */
        parseAsString?: boolean;
        /**
         * CLDR number pattern which is used to format the number
         */
        pattern?: string;
        /**
         * defines the used plus symbol
         */
        plusSign?: string;
        /**
         * defines the numerical precision; the number of decimals is calculated dependent on the integer digits
         */
        precision?: int;
        /**
         * Whether {@link #format} preserves decimal digits except trailing zeros in case there are more decimals
         * than the `maxFractionDigits` format option allows. If decimals are not preserved, the formatted number
         * is rounded to `maxFractionDigits`.
         */
        preserveDecimals?: boolean;
        /**
         * specifies the rounding behavior for discarding the digits after the maximum fraction digits defined by
         * maxFractionDigits. Rounding will only be applied if the passed value is of type `number`. This can be
         * assigned
         * 	 - by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode},
         * 	 - via a function that is used for rounding the number and takes two parameters: the number itself,
         * 			and the number of decimal digits that should be reserved.
         */
        roundingMode?: RoundingMode | keyof typeof RoundingMode;
        /**
         * defines the number of decimal in the shortened format string. If this isn't specified, the 'decimals'
         * options is used
         */
        shortDecimals?: int;
        /**
         * only use short number formatting for values above this limit
         */
        shortLimit?: int;
        /**
         * since 1.40 specifies a number from which the scale factor for 'short' or 'long' style format is generated.
         * The generated scale factor is used for all numbers which are formatted with this format instance. This
         * option has effect only when the option 'style' is set to 'short' or 'long'. This option is by default
         * set with `undefined` which means the scale factor is selected automatically for each number being formatted.
         */
        shortRefNumber?: int;
        /**
         * since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect
         * only when the 'style' options is set to either 'short' or 'long'.
         */
        showScale?: boolean;
        /**
         * whether the positions of grouping separators are validated. Space characters used as grouping separators
         * are not validated.
         */
        strictGroupingValidation?: boolean;
        /**
         * defines the style of format. Valid values are 'short, 'long' or 'standard' (based on the CLDR decimalFormat).
         * When set to 'short' or 'long', numbers are formatted into compact forms. When this option is set, the
         * default value of the 'precision' option is set to 2. This can be changed by setting either min/maxFractionDigits,
         * decimals, shortDecimals, or the 'precision' option itself.
         */
        style?: string;
      },
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): NumberFormat;
    /**
     * Get an integer instance of the NumberFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     *  This instance has TOWARDS_ZERO set as default rounding mode. Please set the roundingMode property
     * in oFormatOptions to change the default value.
     *
     * The following example shows how grouping is done:
     * ```javascript
     *
     * var oFormat = NumberFormat.getIntegerInstance({
     *     "groupingEnabled": true,  // grouping is enabled
     *     "groupingSeparator": '.', // grouping separator is '.'
     *     "groupingSize": 3         // the amount of digits to be grouped (here: thousand)
     * });
     *
     * oFormat.format(1234); // "1.234"
     * ```
     *
     *
     * @returns integer instance of the NumberFormat
     */
    static getIntegerInstance(
      /**
       * The option object, which supports the following parameters. If no options are given, default values according
       * to the type and locale settings are used.
       */
      oFormatOptions?: {
        /**
         * defines the number of decimal digits
         */
        decimals?: int;
        /**
         * defines the character used as decimal separator. Note: `decimalSeparator` must always be different from
         * `groupingSeparator`.
         */
        decimalSeparator?: string;
        /**
         * since 1.30.0 defines what an empty string is parsed as, and what is formatted as an empty string. The
         * allowed values are "" (empty string) NaN, `null`, or 0. The 'format' and 'parse' functions are done in
         * a symmetric way. For example, when this parameter is set to NaN, an empty string is parsed as NaN, and
         * NaN is formatted as an empty string.
         */
        emptyString?: null | number | string;
        /**
         * defines the grouping base size in digits if it is different from the grouping size (e.g. Indian grouping)
         */
        groupingBaseSize?: int;
        /**
         * defines whether grouping is enabled (grouping separators are shown)
         */
        groupingEnabled?: boolean;
        /**
         * defines the character used as grouping separator. Note: `groupingSeparator` must always be different
         * from `decimalSeparator`.
         */
        groupingSeparator?: string;
        /**
         * defines the grouping size in digits; the default is `3`. It must be a positive number.
         */
        groupingSize?: int;
        /**
         * defines the maximum number of decimal digits
         */
        maxFractionDigits?: int;
        /**
         * defines the maximum number of non-decimal digits. If the number exceeds this maximum, e.g. 1e+120, "?"
         * characters are shown instead of digits.
         */
        maxIntegerDigits?: int;
        /**
         * defines the minimal number of decimal digits
         */
        minFractionDigits?: int;
        /**
         * defines the minimal number of non-decimal digits
         */
        minIntegerDigits?: int;
        /**
         * defines the used minus symbol
         */
        minusSign?: string;
        /**
         * since 1.28.2 defines whether to output the string from the parse function in order to keep the precision
         * for big numbers. Numbers in scientific notation are parsed back to standard notation. For example, "5e+3"
         * is parsed to "5000".
         */
        parseAsString?: boolean;
        /**
         * CLDR number pattern which is used to format the number
         */
        pattern?: string;
        /**
         * defines the used plus symbol
         */
        plusSign?: string;
        /**
         * defines the numerical precision; the number of decimals is calculated dependent on the integer digits
         */
        precision?: int;
        /**
         * Whether {@link #format} preserves decimal digits except trailing zeros in case there are more decimals
         * than the `maxFractionDigits` format option allows. If decimals are not preserved, the formatted number
         * is rounded to `maxFractionDigits`.
         */
        preserveDecimals?: boolean;
        /**
         * specifies the rounding behavior for discarding the digits after the maximum fraction digits defined by
         * maxFractionDigits. Rounding will only be applied if the passed value is of type `number`. This can be
         * assigned
         * 	 - by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode},
         * 	 - via a function that is used for rounding the number and takes two parameters: the number itself,
         * 			and the number of decimal digits that should be reserved.
         */
        roundingMode?: RoundingMode | keyof typeof RoundingMode;
        /**
         * defines the number of decimal in the shortened format string. If this isn't specified, the 'decimals'
         * options is used
         */
        shortDecimals?: int;
        /**
         * only use short number formatting for values above this limit
         */
        shortLimit?: int;
        /**
         * since 1.40 specifies a number from which the scale factor for 'short' or 'long' style format is generated.
         * The generated scale factor is used for all numbers which are formatted with this format instance. This
         * option has effect only when the option 'style' is set to 'short' or 'long'. This option is by default
         * set with `undefined` which means the scale factor is selected automatically for each number being formatted.
         */
        shortRefNumber?: int;
        /**
         * since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect
         * only when the 'style' options is set to either 'short' or 'long'.
         */
        showScale?: boolean;
        /**
         * whether the positions of grouping separators are validated. Space characters used as grouping separators
         * are not validated.
         */
        strictGroupingValidation?: boolean;
        /**
         * defines the style of format. Valid values are 'short, 'long' or 'standard' (based on the CLDR decimalFormat).
         * When set to 'short' or 'long', numbers are formatted into compact forms. When this option is set, the
         * default value of the 'precision' option is set to 2. This can be changed by setting either min/maxFractionDigits,
         * decimals, shortDecimals, or the 'precision' option itself.
         */
        style?: string;
      },
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): NumberFormat;
    /**
     * Returns a metadata object for class sap.ui.core.format.NumberFormat.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Get a percent instance of the NumberFormat, which can be used for formatting.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     *  This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property
     * in oFormatOptions to change the default value.
     *
     * @returns percentage instance of the NumberFormat
     */
    static getPercentInstance(
      /**
       * The option object, which supports the following parameters. If no options are given, default values according
       * to the type and locale settings are used.
       */
      oFormatOptions?: {
        /**
         * defines the number of decimal digits
         */
        decimals?: int;
        /**
         * defines the character used as decimal separator. Note: `decimalSeparator` must always be different from
         * `groupingSeparator`.
         */
        decimalSeparator?: string;
        /**
         * since 1.30.0 defines what an empty string is parsed as, and what is formatted as an empty string. The
         * allowed values are "" (empty string), NaN, `null`, or 0. The 'format' and 'parse' functions are done
         * in a symmetric way. For example, when this parameter is set to NaN, an empty string is parsed as NaN,
         * and NaN is formatted as an empty string.
         */
        emptyString?: null | number | string;
        /**
         * defines the grouping base size in digits if it is different from the grouping size (e.g. Indian grouping)
         */
        groupingBaseSize?: int;
        /**
         * defines whether grouping is enabled (grouping separators are shown)
         */
        groupingEnabled?: boolean;
        /**
         * defines the character used as grouping separator. Note: `groupingSeparator` must always be different
         * from `decimalSeparator`.
         */
        groupingSeparator?: string;
        /**
         * defines the grouping size in digits; the default is `3`. It must be a positive number.
         */
        groupingSize?: int;
        /**
         * defines the maximum number of decimal digits
         */
        maxFractionDigits?: int;
        /**
         * defines the maximum number of non-decimal digits. If the number exceeds this maximum, e.g. 1e+120, "?"
         * characters are shown instead of digits.
         */
        maxIntegerDigits?: int;
        /**
         * defines the minimal number of decimal digits
         */
        minFractionDigits?: int;
        /**
         * defines the minimal number of non-decimal digits
         */
        minIntegerDigits?: int;
        /**
         * defines the used minus symbol
         */
        minusSign?: string;
        /**
         * since 1.28.2 defines whether to output the string from the parse function in order to keep the precision
         * for big numbers. Numbers in scientific notation are parsed back to standard notation. For example, "5e-3"
         * is parsed to "0.005".
         */
        parseAsString?: boolean;
        /**
         * CLDR number pattern which is used to format the number
         */
        pattern?: string;
        /**
         * defines the used percent symbol
         */
        percentSign?: string;
        /**
         * defines the used plus symbol
         */
        plusSign?: string;
        /**
         * defines the numerical precision; the number of decimals is calculated dependent on the integer digits
         */
        precision?: int;
        /**
         * Whether {@link #format} preserves decimal digits except trailing zeros in case there are more decimals
         * than the `maxFractionDigits` format option allows. If decimals are not preserved, the formatted number
         * is rounded to `maxFractionDigits`.
         */
        preserveDecimals?: boolean;
        /**
         * specifies the rounding behavior for discarding the digits after the maximum fraction digits defined by
         * maxFractionDigits. Rounding will only be applied if the passed value is of type `number`. This can be
         * assigned
         * 	 - by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode},
         * 	 - via a function that is used for rounding the number and takes two parameters: the number itself,
         * 			and the number of decimal digits that should be reserved.
         */
        roundingMode?: RoundingMode | keyof typeof RoundingMode;
        /**
         * defines the number of decimal in the shortened format string. If this isn't specified, the 'decimals'
         * options is used
         */
        shortDecimals?: int;
        /**
         * only use short number formatting for values above this limit
         */
        shortLimit?: int;
        /**
         * since 1.40 specifies a number from which the scale factor for 'short' or 'long' style format is generated.
         * The generated scale factor is used for all numbers which are formatted with this format instance. This
         * option has effect only when the option 'style' is set to 'short' or 'long'. This option is by default
         * set with `undefined` which means the scale factor is selected automatically for each number being formatted.
         */
        shortRefNumber?: int;
        /**
         * since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect
         * only when the 'style' options is set to either 'short' or 'long'.
         */
        showScale?: boolean;
        /**
         * whether the positions of grouping separators are validated. Space characters used as grouping separators
         * are not validated.
         */
        strictGroupingValidation?: boolean;
        /**
         * defines the style of format. Valid values are 'short, 'long' or 'standard' (based on the CLDR decimalFormat).
         * When set to 'short' or 'long', numbers are formatted into compact forms. When this option is set, the
         * default value of the 'precision' option is set to 2. This can be changed by setting either min/maxFractionDigits,
         * decimals, shortDecimals, or the 'precision' option itself.
         */
        style?: string;
      },
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): NumberFormat;
    /**
     * Get a unit instance of the NumberFormat, which can be used for formatting units.
     *
     * If no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale
     * formatLocale} will be used.
     *
     *  This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property
     * in oFormatOptions to change the default value.
     *
     * @returns unit instance of the NumberFormat
     */
    static getUnitInstance(
      /**
       * The option object, which supports the following parameters. If no options are given, default values according
       * to the type and locale settings are used.
       */
      oFormatOptions?: {
        /**
         * defines the allowed units for formatting and parsing, e.g. ["size-meter", "volume-liter", ...]
         */
        allowedUnits?: any[];
        /**
         * defines a set of custom units, e.g. {"electric-inductance": { "displayName": "henry", "unitPattern-count-one":
         * "{0} H", "unitPattern-count-other": "{0} H", "perUnitPattern": "{0}/H", "decimals": 2, "precision": 4
         * }}
         */
        customUnits?: Record<string, object>;
        /**
         * defines the number of decimal digits
         */
        decimals?: int;
        /**
         * defines the character used as decimal separator. Note: `decimalSeparator` must always be different from
         * `groupingSeparator`.
         */
        decimalSeparator?: string;
        /**
         * since 1.30.0 defines what an empty string is parsed as, and what is formatted as an empty string. The
         * allowed values are "" (empty string), NaN, `null`, or 0. The 'format' and 'parse' functions are done
         * in a symmetric way. For example, when this parameter is set to NaN, an empty string is parsed as [NaN,
         * undefined], and NaN is formatted as an empty string.
         */
        emptyString?: null | number | string;
        /**
         * defines the grouping base size in digits if it is different from the grouping size (e.g. Indian grouping)
         */
        groupingBaseSize?: int;
        /**
         * defines whether grouping is enabled (grouping separators are shown)
         */
        groupingEnabled?: boolean;
        /**
         * defines the character used as grouping separator. Note: `groupingSeparator` must always be different
         * from `decimalSeparator`.
         */
        groupingSeparator?: string;
        /**
         * defines the grouping size in digits; the default is `3`. It must be a positive number.
         */
        groupingSize?: int;
        /**
         * defines the maximum number of decimal digits
         */
        maxFractionDigits?: int;
        /**
         * defines the maximum number of non-decimal digits. If the number exceeds this maximum, e.g. 1e+120, "?"
         * characters are shown instead of digits.
         */
        maxIntegerDigits?: int;
        /**
         * defines the minimal number of decimal digits
         */
        minFractionDigits?: int;
        /**
         * defines the minimal number of non-decimal digits
         */
        minIntegerDigits?: int;
        /**
         * defines the used minus symbol
         */
        minusSign?: string;
        /**
         * since 1.28.2 defines whether to output the string from the parse function in order to keep the precision
         * for big numbers. Numbers in scientific notation are parsed back to standard notation. For example, "5e-3"
         * is parsed to "0.005".
         */
        parseAsString?: boolean;
        /**
         * CLDR number pattern which is used to format the number
         */
        pattern?: string;
        /**
         * defines the used plus symbol
         */
        plusSign?: string;
        /**
         * defines the numerical precision; the number of decimals is calculated dependent on the integer digits
         */
        precision?: int;
        /**
         * Whether {@link #format} preserves decimal digits except trailing zeros in case there are more decimals
         * than the `maxFractionDigits` format option allows. If decimals are not preserved, the formatted number
         * is rounded to `maxFractionDigits`.
         */
        preserveDecimals?: boolean;
        /**
         * specifies the rounding behavior for discarding the digits after the maximum fraction digits defined by
         * maxFractionDigits. Rounding will only be applied if the passed value is of type `number`. This can be
         * assigned
         * 	 - by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode},
         * 	 - via a function that is used for rounding the number and takes two parameters: the number itself,
         * 			and the number of decimal digits that should be reserved.
         */
        roundingMode?: RoundingMode | keyof typeof RoundingMode;
        /**
         * defines the number of decimals in the shortened format string. If this option isn't specified, the 'decimals'
         * option is used instead.
         */
        shortDecimals?: int;
        /**
         * defines a limit above which only short number formatting is used
         */
        shortLimit?: int;
        /**
         * since 1.40 specifies a number from which the scale factor for the 'short' or 'long' style format is generated.
         * The generated scale factor is used for all numbers which are formatted with this format instance. This
         * option only takes effect when the 'style' option is set to 'short' or 'long'. This option is set to `undefined`
         * by default, which means that the scale factor is selected automatically for each number being formatted.
         */
        shortRefNumber?: int;
        /**
         * defines whether the unit of measure is shown in the formatted string, e.g. for input 1 and "duration-day"
         * true: "1 day", false: "1". If both `showMeasure` and `showNumber` are false, an empty string is returned
         */
        showMeasure?: boolean;
        /**
         * defines whether the number is shown as part of the result string, e.g. 1 day for locale "en" `NumberFormat.getUnitInstance({showNumber:true}).format(1,
         * "duration-day"); // "1 day"` `NumberFormat.getUnitInstance({showNumber:false}).format(1, "duration-day");
         * // "day"` e.g. 2 days for locale "en" `NumberFormat.getUnitInstance({showNumber:true}).format(2, "duration-day");
         * // "2 days"` `NumberFormat.getUnitInstance({showNumber:false}).format(2, "duration-day"); // "days"`
         * If both `showMeasure` and `showNumber` are false, an empty string is returned
         */
        showNumber?: boolean;
        /**
         * since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect
         * only when the 'style' options is set to either 'short' or 'long'.
         */
        showScale?: boolean;
        /**
         * whether the positions of grouping separators are validated. Space characters used as grouping separators
         * are not validated.
         */
        strictGroupingValidation?: boolean;
        /**
         * defines the style of format. Valid values are 'short, 'long' or 'standard' (based on the CLDR decimalFormat).
         * When set to 'short' or 'long', numbers are formatted into compact forms. When this option is set, the
         * default value of the 'precision' option is set to 2. This can be changed by setting either min/maxFractionDigits,
         * decimals, shortDecimals, or the 'precision' option itself.
         */
        style?: string;
      },
      /**
       * Locale to get the formatter for
       */
      oLocale?: Locale
    ): NumberFormat;
    /**
     * Format a number according to the given format options.
     *
     * @returns the formatted output value
     */
    format(
      /**
       * the number to format or an array which contains the number to format and the sMeasure parameter
       */
      vValue: number | any[],
      /**
       * an optional unit which has an impact on formatting currencies and units
       */
      sMeasure?: string
    ): string;
    /**
     * @SINCE 1.100
     *
     * Returns the scaling factor which is calculated based on the format options and the current locale being
     * used.
     *
     * This function only returns a meaningful scaling factor when the 'style' formatting option is set to 'short'
     * or 'long', and the 'shortRefNumber' option for calculating the scale factor is set.
     *
     * Consider using this function when the 'showScale' option is set to `false`, which causes the scale factor
     * not to appear in every formatted number but in a shared place.
     *
     * @returns The scale string if it exists based on the given 'shortRefNumber' option. Otherwise it returns
     * `undefined`.
     */
    getScale(): string | undefined;
    /**
     * Parse a string which is formatted according to the given format options.
     *
     * @returns the parsed value as:
     * 	 - number
     * 	 - array which contains the parsed value and the currency code (symbol) or unit for currency and unit
     * 			instances
     * 	 - string when option "parseAsString" is `true`
     * 	 - `NaN` if value cannot be parsed
     * 	 - `null` if value is invalid
     */
    parse(
      /**
       * the string containing a formatted numeric value
       */
      sValue: string
    ): number | any[] | string | null;
  }
  /**
   * Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding
   * mode in this object indicates how the least significant returned digits of rounded result is to be calculated.
   */
  export enum RoundingMode {
    /**
     * Rounding mode to round away from zero
     */
    AWAY_FROM_ZERO = "AWAY_FROM_ZERO",
    /**
     * Rounding mode to round towards positive infinity
     */
    CEILING = "CEILING",
    /**
     * Rounding mode to round towards negative infinity
     */
    FLOOR = "FLOOR",
    /**
     * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case
     * round away from zero.
     */
    HALF_AWAY_FROM_ZERO = "HALF_AWAY_FROM_ZERO",
    /**
     * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case
     * round towards positive infinity.
     */
    HALF_CEILING = "HALF_CEILING",
    /**
     * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case
     * round towards negative infinity.
     */
    HALF_FLOOR = "HALF_FLOOR",
    /**
     * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case
     * round towards zero.
     */
    HALF_TOWARDS_ZERO = "HALF_TOWARDS_ZERO",
    /**
     * Rounding mode to round towards zero
     */
    TOWARDS_ZERO = "TOWARDS_ZERO",
  }
}

declare module "sap/ui/core/Fragment" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import UI5Element from "sap/ui/core/Element";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Controller from "sap/ui/core/mvc/Controller";

  import View from "sap/ui/core/mvc/View";

  import Control from "sap/ui/core/Control";

  /**
   * Fragments support the definition of light-weight stand-alone UI control trees. This class acts as factory
   * which returns the UI control tree defined inside the Fragments. When used within declarative Views, the
   * Fragment content is imported and seamlessly integrated into the View.
   *
   * Fragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their
   * own (they may know one, though), they are not a Control, they are not part of the UI tree and they have
   * no representation in HTML. By default, in contrast to declarative Views, they do not do anything to guarantee
   * ID uniqueness.
   *
   * But like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for
   * other types can be plugged in), the declaration syntax is the same as in declarative Views and the name
   * and location of the Fragment files is similar to Views. Controller methods can also be referenced in
   * the declarations, but as Fragments do not have their own controllers, this requires the Fragments to
   * be used within a View which does have a controller. That controller is used, then.
   *
   * Do not call the Fragment constructor directly!
   *
   * Use-cases for Fragments are e.g.: - Modularization of UIs without fragmenting the controller structure
   * - Re-use of UI parts - 100%-declarative definition of Views
   */
  export default class Fragment extends ManagedObject {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Returns an Element/Control by its ID in the context of the Fragment with the given ID
     *
     * @returns Element by its ID and Fragment ID
     */
    static byId(
      /**
       * ID of the Fragment from which to retrieve the Control
       */
      sFragmentId: string,
      /**
       * ID of the Element/Control to retrieve
       */
      sId: string
    ): UI5Element | undefined;
    /**
     * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would
     * have.
     *
     * @returns the prefixed ID
     */
    static createId(
      /**
       * ID of the Fragment for which to calculate the Control ID
       */
      sFragmentId: string,
      /**
       * Fragment-local ID of the Control to calculate the ID for
       */
      sId: string
    ): string;
    /**
     * Creates a new subclass of class sap.ui.core.Fragment with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Fragment>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Fragment.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @SINCE 1.58
     *
     * Loads and instantiates a Fragment. A Promise is returned, which resolves with the Fragments content.
     *
     * The Fragment object itself is not an entity with significance beyond this factory.
     *
     * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be
     * added using the sap.ui.core.Fragment.registerType() function.
     *
     * Further properties may be supported by future or custom Fragment types. Any given properties will be
     * forwarded to the Fragment implementation.
     *
     * If no fixed ID is given, the Fragment ID is generated. In any case, the Fragment ID will be used as prefix
     * for the IDs of all contained controls.
     *
     * @returns a `Promise` resolving with the resulting control (array) after fragment parsing and instantiation
     */
    static load(
      /**
       * options map
       */
      mOptions: {
        /**
         * must be supplied if no "definition" parameter is given. The Fragment name must correspond to an XML Fragment
         * which can be loaded via the module system (fragmentName + suffix ".fragment.[typeextension]") and which
         * contains the Fragment definition. If "mOptions.controller" is supplied, the (event handler-) methods
         * referenced in the Fragment will be called on this Controller. Note that Fragments may require a Controller
         * to be given and certain methods to be implemented by it.
         */
        name?: string;
        /**
         * the Fragment type, e.g. "XML", "JS", or "HTML" (see above). Default is "XML"
         */
        type?: string;
        /**
         * definition of the Fragment content. When this property is supplied, the "name" parameter must not be
         * used. If both are supplied, the definition has priority. Please see the above example on how to use the
         * 'definition' parameter.
         */
        definition?: string;
        /**
         * the ID of the Fragment
         */
        id?: string;
        /**
         * the Controller or Object which should be used by the controls in the Fragment. Note that some Fragments
         * may not need a Controller while others may need one and certain methods to be implemented by it.
         */
        controller?: Controller | Object;
        /**
         * The view containing the Fragment content. If the Fragment content contains ExtensionPoints this parameter
         * must be given.
         */
        containingView?: View;
      }
    ): Promise<Control | Control[]>;
    /**
     * Registers a new Fragment type
     */
    static registerType(
      /**
       * the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
       */
      sType: string,
      /**
       * an object having the properties "init" and "load".
       */
      oFragmentImpl: {
        /**
         * Called on Fragment instantiation with the settings map as argument. Function needs to return a promise
         * which resolves with sap.ui.core.Control|sap.ui.core.Control[]
         */
        init: Function;
        /**
         * Called to load the fragment content. Must return a Promise which resolves with the loaded resource. This
         * resource is passed as 'fragmentContent' to the init() function via a parameter object.
         */
        load: Function;
      }
    ): void;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * @returns Value of property `type`
     */
    getType(): string;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setType(
      /**
       * New value for property `type`
       */
      sType: string
    ): this;
  }

  export interface $FragmentSettings extends $ManagedObjectSettings {
    type?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/History" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * History handles the history of certain controls (e.g. sap.ui.commons.SearchField).
   */
  export default class History extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates an instance of the History.
     *
     * Attention: The Web Storage API which is used by this class stores the data on the client. Therefore do
     * not use this API for confidential information.
     */
    constructor(
      /**
       * id for the history
       */
      sId: string,
      /**
       * optional map/JSON-object with additional settings
       */
      mSettings?: object
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.core.History with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, History>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.core.History.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/core/HTML" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Embeds standard HTML in an SAPUI5 control tree.
   *
   * Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore open
   * to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize
   * the content on their own or activate automatic sanitizing through the {@link #setSanitizeContent sanitizeContent}
   * property.
   *
   * Although this control inherits the `tooltip` aggregation/property and the `hasStyleClass`, `addStyleClass`,
   * `removeStyleClass` and `toggleStyleClass` methods from its base class, it doesn't support them. Instead,
   * the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.
   *
   * For further hints about usage restrictions for this control, see also the documentation of the `content`
   * property.
   */
  export default class HTML extends Control {
    /**
     * Constructor for a new HTML.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HTMLSettings
    );
    /**
     * Constructor for a new HTML.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HTMLSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.HTML with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HTML>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.HTML.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.HTML`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.HTML` itself.
     *
     * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
     *
     * When the control doesn't have string content and no preserved DOM existed for this control, then this
     * event will fire, but there won't be a DOM node for this control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.HTML` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.HTML`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.HTML` itself.
     *
     * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
     *
     * When the control doesn't have string content and no preserved DOM existed for this control, then this
     * event will fire, but there won't be a DOM node for this control.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.HTML` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.HTML`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterRendering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterRendering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property
         * or it is an empty HTML control).
         */
        isPreservedDOM?: boolean;
      }
    ): this;
    /**
     * Gets current value of property {@link #getContent content}.
     *
     * HTML content to be displayed, defined as a string.
     *
     * The content is converted to DOM nodes with a call to `new jQuery(content)`, so any restrictions for the
     * jQuery constructor apply to the content of the HTML control as well.
     *
     * Some of these restrictions (there might be others!) are:
     * 	 - the content must be enclosed in tags, pure text is not supported.
     * 	 - if the content contains script tags, they will be executed but they will not appear in the resulting
     * 			DOM tree. When the contained code tries to find the corresponding script tag, it will fail.
     *
     * Please consider to consult the jQuery documentation as well.
     *
     * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g.
     * `setContent("<div></div><div></div>")`), but this is not a guaranteed feature. The accepted
     * content might be restricted to single root nodes in future versions. To notify applications about this
     * fact, a warning is written in the log when multiple root nodes are used.
     *
     * When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML
     * control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.
     *
     * @returns Value of property `content`
     */
    getContent(): string;
    /**
     *
     * @returns The element's DOM reference or `null`
     */
    getDomRef(
      /**
       * Suffix of the Element to be retrieved or empty
       */
      sSuffix?: string
    ): Element | null;
    /**
     * Gets current value of property {@link #getPreferDOM preferDOM}.
     *
     * Whether existing DOM content is preferred over the given content string.
     *
     * There are two scenarios where this flag is relevant (when set to true):
     * 	 - for the initial rendering: when an HTML control is added to a UIArea for the first time and if the
     * 			root node of that UIArea contained DOM content with the same id as the HTML control, then that content
     * 			will be used for rendering instead of any specified string content
     * 	 - any follow-up rendering: when an HTML control is rendered for the second or any later time and the
     * 			preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string
     * 			content
     *
     * As preserving the existing DOM is the most common use case of the HTML control, the default value is
     * true.
     *
     * Default value is `true`.
     *
     * @returns Value of property `preferDOM`
     */
    getPreferDOM(): boolean;
    /**
     * Gets current value of property {@link #getSanitizeContent sanitizeContent}.
     *
     * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
     *
     * To configure the set of allowed URLs, you can use the {@link module:sap/base/security/URLListValidator.add
     * URLListValidator API}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `sanitizeContent`
     */
    getSanitizeContent(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies whether the control is visible. Invisible controls are not rendered.
     *
     * Default value is `true`.
     *
     * @returns Value of property `visible`
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getContent content}.
     *
     * HTML content to be displayed, defined as a string.
     *
     * The content is converted to DOM nodes with a call to `new jQuery(content)`, so any restrictions for the
     * jQuery constructor apply to the content of the HTML control as well.
     *
     * Some of these restrictions (there might be others!) are:
     * 	 - the content must be enclosed in tags, pure text is not supported.
     * 	 - if the content contains script tags, they will be executed but they will not appear in the resulting
     * 			DOM tree. When the contained code tries to find the corresponding script tag, it will fail.
     *
     * Please consider to consult the jQuery documentation as well.
     *
     * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g.
     * `setContent("<div></div><div></div>")`), but this is not a guaranteed feature. The accepted
     * content might be restricted to single root nodes in future versions. To notify applications about this
     * fact, a warning is written in the log when multiple root nodes are used.
     *
     * When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML
     * control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * New value for property `content`
       */
      sContent?: string
    ): this;
    /**
     * Sets some new DOM content for this HTML control. The content will replace the existing content after
     * the next rendering. Properties are not modified, but preferDOM should be set to true.
     *
     * @returns `this` to facilitate method chaining
     */
    setDOMContent(
      /**
       * the new DOM content
       */
      oDom: Element
    ): this;
    /**
     * Sets a new value for property {@link #getPreferDOM preferDOM}.
     *
     * Whether existing DOM content is preferred over the given content string.
     *
     * There are two scenarios where this flag is relevant (when set to true):
     * 	 - for the initial rendering: when an HTML control is added to a UIArea for the first time and if the
     * 			root node of that UIArea contained DOM content with the same id as the HTML control, then that content
     * 			will be used for rendering instead of any specified string content
     * 	 - any follow-up rendering: when an HTML control is rendered for the second or any later time and the
     * 			preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string
     * 			content
     *
     * As preserving the existing DOM is the most common use case of the HTML control, the default value is
     * true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPreferDOM(
      /**
       * New value for property `preferDOM`
       */
      bPreferDOM?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSanitizeContent sanitizeContent}.
     *
     * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
     *
     * To configure the set of allowed URLs, you can use the {@link module:sap/base/security/URLListValidator.add
     * URLListValidator API}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSanitizeContent(
      /**
       * New value for property `sanitizeContent`
       */
      bSanitizeContent?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies whether the control is visible. Invisible controls are not rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $HTMLSettings extends $ControlSettings {
    /**
     * HTML content to be displayed, defined as a string.
     *
     * The content is converted to DOM nodes with a call to `new jQuery(content)`, so any restrictions for the
     * jQuery constructor apply to the content of the HTML control as well.
     *
     * Some of these restrictions (there might be others!) are:
     * 	 - the content must be enclosed in tags, pure text is not supported.
     * 	 - if the content contains script tags, they will be executed but they will not appear in the resulting
     * 			DOM tree. When the contained code tries to find the corresponding script tag, it will fail.
     *
     * Please consider to consult the jQuery documentation as well.
     *
     * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g.
     * `setContent("<div></div><div></div>")`), but this is not a guaranteed feature. The accepted
     * content might be restricted to single root nodes in future versions. To notify applications about this
     * fact, a warning is written in the log when multiple root nodes are used.
     *
     * When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML
     * control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.
     */
    content?: string | PropertyBindingInfo;

    /**
     * Whether existing DOM content is preferred over the given content string.
     *
     * There are two scenarios where this flag is relevant (when set to true):
     * 	 - for the initial rendering: when an HTML control is added to a UIArea for the first time and if the
     * 			root node of that UIArea contained DOM content with the same id as the HTML control, then that content
     * 			will be used for rendering instead of any specified string content
     * 	 - any follow-up rendering: when an HTML control is rendered for the second or any later time and the
     * 			preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string
     * 			content
     *
     * As preserving the existing DOM is the most common use case of the HTML control, the default value is
     * true.
     */
    preferDOM?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
     *
     * To configure the set of allowed URLs, you can use the {@link module:sap/base/security/URLListValidator.add
     * URLListValidator API}.
     */
    sanitizeContent?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Specifies whether the control is visible. Invisible controls are not rendered.
     */
    visible?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
     *
     * When the control doesn't have string content and no preserved DOM existed for this control, then this
     * event will fire, but there won't be a DOM node for this control.
     */
    afterRendering?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/hyphenation/Hyphenation" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import Event from "sap/ui/base/Event";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.60
   *
   * This class provides methods for evaluating the possibility of using browser-native hyphenation or initializing
   * and using a third-party hyphenation module.
   *
   * Overview: By using this API, a developer can check if browser-native hyphenation is supported for a particular
   * language.
   *
   * When browser-native hyphenation is not supported or if otherwise required, the API can be used to hyphenate
   * texts. A third-party library "Hyphenopoly" is used in that case.
   *
   * It is used internally by controls that support the `wrappingType:{@link sap.m.WrappingType WrappingType.Hyphenated}`
   * property.
   *
   * As the class is singleton, an instance should be acquired from {@link sap.ui.core.hyphenation.Hyphenation.getInstance
   * Hyphenation.getInstance}.
   *
   * Usage: When to use::
   * 	 - To check if browser-native hyphenation is available for particular language.
   * 	 - To hyphenate texts if browser-native hyphenation is not available.  When not to use::
   * 	 -  If the use case is covered by controls that support the property `wrappingType:{@link sap.m.WrappingType
   * 			WrappingType.Hyphenated}`. This functionality is supported by {@link sap.m.Title sap.m.Title}, {@link
   * 			sap.m.Label sap.m.Label} and {@link sap.m.Text sap.m.Text}.
   * 	 - If browser-native hyphenation is available
   *
   * Example:
   * ```javascript
   *
   * if (!Hyphenation.getInstance().canUseNativeHyphenation("en")) {
   * 	Hyphenation.getInstance().initialize("en").then(function() {
   * 		console.log(Hyphenation.getInstance().hyphenate("An example text to hyphenate.", "en"));
   * 	});
   * }
   * ```
   *
   *
   * For more information, see {@link topic:6322164936f047de941ec522b95d7b70 Hyphenation for Text Controls}.
   *
   * `Caution:` Note that as the hyphenation feature uses third-party and browser-native tools, we are not
   * responsible for any grammatical incorrectness or inconsistencies of the hyphenation. Also, the variety
   * of supported languages is outside the scope of our control and may be subject to future changes.
   */
  export default class Hyphenation extends ManagedObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.hyphenation.Hyphenation with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Hyphenation>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the singleton instance of the Hyphenation API.
     * See:
     * 	sap.ui.core.hyphenation.Hyphenation
     *
     * @returns The singleton instance of the Hyphenation API
     */
    static getInstance(): Hyphenation;
    /**
     * Returns a metadata object for class sap.ui.core.hyphenation.Hyphenation.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.ui.core.hyphenation.Hyphenation`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.hyphenation.Hyphenation` itself.
     *
     * Fired if an error with initialization or hyphenation occurs.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.hyphenation.Hyphenation`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.ui.core.hyphenation.Hyphenation`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.hyphenation.Hyphenation` itself.
     *
     * Fired if an error with initialization or hyphenation occurs.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.hyphenation.Hyphenation`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Checks if native hyphenation works in the current browser for the given language. This check is performed
     * against the value of the "lang" HTML attribute of the page.
     *
     * @returns True if native hyphenation works for the given language. False if native hyphenation will not
     * work. Null if the language is not known to the Hyphenation API
     */
    canUseNativeHyphenation(
      /**
       * For what language to check. The global application language is the default one
       */
      sLang?: string
    ): boolean | null;
    /**
     * Checks if third-party hyphenation works for the given language.
     *
     * @returns True if third-party hyphenation works for the given language. False if third-party hyphenation
     * doesn't work. Null if the language is not known to the `Hyphenation` API.
     */
    canUseThirdPartyHyphenation(
      /**
       * For what language to check. The global application language is the default one.
       */
      sLang?: string
    ): boolean | null;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.ui.core.hyphenation.Hyphenation`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:error error} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The message of the error.
         */
        sErrorMessage?: string;
      }
    ): this;
    /**
     * What languages were initialized with {@link sap.ui.core.hyphenation.Hyphenation#initialize Hyphenation#initialize}
     *
     * @returns List of languages which were initialized
     */
    getInitializedLanguages(): any[];
    /**
     * Hyphenates the given text with the third-party library.
     *
     * Adds the soft hyphen symbol at the places where words can break.
     *
     * @returns The text with the hyphens symbol added
     */
    hyphenate(
      /**
       * The text to hyphenate
       */
      sText: string,
      /**
       * The language of the text. The global application language is the default one
       */
      sLang?: string
    ): string;
    /**
     * Initializes the third-party library for the given language.
     *
     * Loads required third-party resources and language-specific resources.
     *
     * @returns A promise which resolves when all language resources are loaded. Rejects if the language is
     * not supported
     */
    initialize(
      /**
       * The language for which the third-party library should be initialized. The global application language
       * is the default one
       */
      sLang?: string
    ): Promise<any>;
    /**
     * Checks if the given language was initialized with {@link sap.ui.core.hyphenation.Hyphenation#initialize
     * Hyphenation#initialize}
     *
     * @returns True if the language was initialized
     */
    isLanguageInitialized(
      /**
       * The language to check for
       */
      sLang?: string
    ): boolean;
    /**
     * Checks if `Hyphenation` API knows about the given language.
     *
     * If it is a known language, the API can be used to check browser-native and third-party support.
     *
     * @returns True if the language is known to the `Hyphenation` API
     */
    isLanguageSupported(
      /**
       * For what language to check. The global application language is the default one.
       */
      sLang?: string
    ): boolean;
  }

  export interface $HyphenationSettings extends $ManagedObjectSettings {
    /**
     * Fired if an error with initialization or hyphenation occurs.
     */
    error?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/Icon" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, CSSSize, URI } from "sap/ui/core/library";

  import Event from "sap/ui/base/Event";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.11.1
   *
   * Icon uses embedded font instead of pixel image. Comparing to image, Icon is easily scalable, color can
   * be altered live and various effects can be added using css.
   *
   * A set of built in Icons is available in the {@link demo:sap/m/demokit/iconExplorer/webapp/index.html
   * Icon Explorer}.
   *
   * For further information, see {@link topic:21ea0ea94614480d9a910b2e93431291 Icon and Icon Pool}.
   */
  export default class Icon extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new Icon.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $IconSettings
    );
    /**
     * Constructor for a new Icon.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $IconSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.Icon with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Icon>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Icon.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.ui.core.Icon`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Icon` itself.
     *
     * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event,
     * the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Icon` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.ui.core.Icon`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Icon` itself.
     *
     * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event,
     * the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Icon` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.ui.core.Icon`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:press press} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     *
     * @returns Current accessibility state of the Icon
     */
    getAccessibilityInfo(): object;
    /**
     * Gets current value of property {@link #getActiveBackgroundColor activeBackgroundColor}.
     *
     * Background color for Icon in active state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `activeBackgroundColor`
     */
    getActiveBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getActiveColor activeColor}.
     *
     * This color is shown when icon is pressed/activated by the user.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `activeColor`
     */
    getActiveColor(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getAlt alt}.
     *
     * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
     *
     * @returns Value of property `alt`
     */
    getAlt(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color of the Icon in normal state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `backgroundColor`
     */
    getBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getColor color}.
     *
     * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `color`
     */
    getColor(): string;
    /**
     * @SINCE 1.16.4
     *
     * Gets current value of property {@link #getDecorative decorative}.
     *
     * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab
     * stop isn't affected by this property anymore and it's now controlled by the existence of press event
     * handler and the noTabStop property.
     *
     * Default value is `true`.
     *
     * @returns Value of property `decorative`
     */
    getDecorative(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHoverBackgroundColor hoverBackgroundColor}.
     *
     * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `hoverBackgroundColor`
     */
    getHoverBackgroundColor(): string;
    /**
     * Gets current value of property {@link #getHoverColor hoverColor}.
     *
     * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * @returns Value of property `hoverColor`
     */
    getHoverColor(): string;
    /**
     * @SINCE 1.30.1
     *
     * Gets current value of property {@link #getNoTabStop noTabStop}.
     *
     * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's
     * set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon
     * control never has tab stop no matter whether press event handler exists or not.
     *
     * Default value is `false`.
     *
     * @returns Value of property `noTabStop`
     */
    getNoTabStop(): boolean;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM
     * element.
     *
     * @returns Value of property `size`
     */
    getSize(): CSSSize;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * This property can be set by following options:
     *
     * **Option 1:**
     *  The value has to be matched by following pattern `sap-icon://collection-name/icon-name` where `collection-name`
     * and `icon-name` have to be replaced by the desired values. In case the default UI5 icons are used the
     * `collection-name` can be omited.
     *  Example: `sap-icon://accept`
     *
     * **Option 2:** The value is determined by using {@link sap.ui.core.IconPool.getIconURI} with an Icon name
     * parameter and an optional collection parameter which is required when using application extended Icons.
     *  Example: `IconPool.getIconURI("accept")`
     *
     * @returns Value of property `src`
     */
    getSrc(): URI;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getUseIconTooltip useIconTooltip}.
     *
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     *
     * Default value is `true`.
     *
     * @returns Value of property `useIconTooltip`
     */
    getUseIconTooltip(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     *
     * @returns The removed ariaLabelledBy or `null`
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID | null;
    /**
     * Sets a new value for property {@link #getActiveBackgroundColor activeBackgroundColor}.
     *
     * Background color for Icon in active state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActiveBackgroundColor(
      /**
       * New value for property `activeBackgroundColor`
       */
      sActiveBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getActiveColor activeColor}.
     *
     * This color is shown when icon is pressed/activated by the user.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setActiveColor(
      /**
       * New value for property `activeColor`
       */
      sActiveColor?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getAlt alt}.
     *
     * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAlt(
      /**
       * New value for property `alt`
       */
      sAlt?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color of the Icon in normal state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getColor color}.
     *
     * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setColor(
      /**
       * New value for property `color`
       */
      sColor?: string
    ): this;
    /**
     * @SINCE 1.16.4
     *
     * Sets a new value for property {@link #getDecorative decorative}.
     *
     * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab
     * stop isn't affected by this property anymore and it's now controlled by the existence of press event
     * handler and the noTabStop property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDecorative(
      /**
       * New value for property `decorative`
       */
      bDecorative?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHoverBackgroundColor hoverBackgroundColor}.
     *
     * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverBackgroundColor(
      /**
       * New value for property `hoverBackgroundColor`
       */
      sHoverBackgroundColor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHoverColor hoverColor}.
     *
     * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHoverColor(
      /**
       * New value for property `hoverColor`
       */
      sHoverColor?: string
    ): this;
    /**
     * @SINCE 1.30.1
     *
     * Sets a new value for property {@link #getNoTabStop noTabStop}.
     *
     * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's
     * set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon
     * control never has tab stop no matter whether press event handler exists or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setNoTabStop(
      /**
       * New value for property `noTabStop`
       */
      bNoTabStop?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM
     * element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * This property can be set by following options:
     *
     * **Option 1:**
     *  The value has to be matched by following pattern `sap-icon://collection-name/icon-name` where `collection-name`
     * and `icon-name` have to be replaced by the desired values. In case the default UI5 icons are used the
     * `collection-name` can be omited.
     *  Example: `sap-icon://accept`
     *
     * **Option 2:** The value is determined by using {@link sap.ui.core.IconPool.getIconURI} with an Icon name
     * parameter and an optional collection parameter which is required when using application extended Icons.
     *  Example: `IconPool.getIconURI("accept")`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSrc(
      /**
       * New value for property `src`
       */
      sSrc?: URI
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getUseIconTooltip useIconTooltip}.
     *
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUseIconTooltip(
      /**
       * New value for property `useIconTooltip`
       */
      bUseIconTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $IconSettings extends $ControlSettings {
    /**
     * This property can be set by following options:
     *
     * **Option 1:**
     *  The value has to be matched by following pattern `sap-icon://collection-name/icon-name` where `collection-name`
     * and `icon-name` have to be replaced by the desired values. In case the default UI5 icons are used the
     * `collection-name` can be omited.
     *  Example: `sap-icon://accept`
     *
     * **Option 2:** The value is determined by using {@link sap.ui.core.IconPool.getIconURI} with an Icon name
     * parameter and an optional collection parameter which is required when using application extended Icons.
     *  Example: `IconPool.getIconURI("accept")`
     */
    src?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM
     * element.
     */
    size?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    color?: string | PropertyBindingInfo;

    /**
     * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    hoverColor?: string | PropertyBindingInfo;

    /**
     * This color is shown when icon is pressed/activated by the user.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    activeColor?: string | PropertyBindingInfo;

    /**
     * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the
     * size of the font. If you want to make the font bigger, increase the size property.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Background color of the Icon in normal state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    backgroundColor?: string | PropertyBindingInfo;

    /**
     * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    hoverBackgroundColor?: string | PropertyBindingInfo;

    /**
     * Background color for Icon in active state.
     *
     * The property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic
     * Icon Color}.
     */
    activeBackgroundColor?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.16.4
     *
     * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab
     * stop isn't affected by this property anymore and it's now controlled by the existence of press event
     * handler and the noTabStop property.
     */
    decorative?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.30.0
     *
     * Decides whether a default Icon tooltip should be used if no tooltip is set.
     */
    useIconTooltip?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.30.0
     *
     * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
     */
    alt?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.1
     *
     * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's
     * set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon
     * control never has tab stop no matter whether press event handler exists or not.
     */
    noTabStop?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event,
     * the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
     */
    press?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/IconPool" {
  import ResourceBundle from "sap/base/i18n/ResourceBundle";

  import Control from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  /**
   * The IconPool is a static class for retrieving or registering icons. It also provides helping methods
   * for easier consumption of icons. There are already icons registered in IconPool, please use the Demo
   * App named "Icon Explorer" to find the name of the icon.
   *
   * In order to use the icon inside an existing control, please call {@link sap.ui.core.IconPool.getIconURI}
   * and assign the URI to the control's property which supports icons. If you want to support both, icons
   * and standard images in your own control, please use the static method {@link sap.ui.core.IconPool.createControlByURI}
   * to either create an Icon in case the first argument is an icon-URL or another control which you define
   * by providing it as the second argument.
   */
  interface IconPool {
    /**
     * Register an additional icon to the sap.ui.core.IconPool.
     *
     * @returns the info object of the registered icon which has the name, collection, uri, fontFamily, content
     * and suppressMirroring properties.
     */
    addIcon(
      /**
       * the name of the icon.
       */
      iconName: string,
      /**
       * the name of icon collection. The built in icons are with empty collectionName, so if additional icons
       * need to be registered in IconPool, the collectionName can't be empty.
       */
      collectionName: string,
      /**
       * the icon info which contains the following properties:
       */
      iconInfo: {
        /**
         * is the name of the font when importing the font using @font-face in CSS
         */
        fontFamily: string;
        /**
         * is the special hexadecimal code without the prefix, for example "e000" or several of them
         */
        content: string | string[];
        /**
         * indicates if already registered icons should be overwritten when the same name and collection are given.
         * The built in icons can never be overwritten.
         */
        overWrite?: boolean;
        /**
         * indicates whether this icon should NOT be mirrored in RTL (right to left) mode.
         */
        suppressMirroring?: boolean;
        /**
         * ResourceBundle to be used for translation. Key format: "Icon.".
         */
        resourceBundle?: ResourceBundle;
      }
    ): {
      name: string;

      collection: string;

      uri: string;

      fontFamily: string;

      content: string | string[];

      suppressMirroring: boolean;
    };
    /**
     * Creates an instance of {@link sap.ui.core.Icon} if the given URI is an icon URI, otherwise the given
     * constructor is called. The given URI is set to the src property of the control.
     *
     * @returns Either an instance of `sap.ui.core.Icon` or instance created by calling the given constructor
     */
    createControlByURI(
      /**
       * Contains the properties which will be used to instantiate the returned control. All properties of the
       * associated constructor can be used. Unknown properties are ignored. It should contain at least a property
       * named src. If it's given with a string type, it will be taken as the value of src property.
       */
      setting: string | object,
      /**
       * The constructor function which is called when the given URI isn't an icon URI
       */
      constructor: Function
    ): Control;
    /**
     * @SINCE 1.56.0
     *
     * Checks if the icon font is loaded
     *
     * @returns a Promise that resolves when the icon font is loaded; or `undefined` if the icon font has not
     * been registered yet
     */
    fontLoaded(
      /**
       * icon collection name
       */
      sCollectionName: string
    ): Promise<any> | undefined;
    /**
     * Returns all names of registered collections in IconPool
     *
     * @returns An array contains all of the registered collections' names.
     */
    getIconCollectionNames(): any[];
    /**
     * @SINCE 1.25.0
     *
     * Returns the icon url based on the given mime type
     *
     * @returns the icon url (e.g. "sap-icon://attachment-zip-file")
     */
    getIconForMimeType(
      /**
       * the mime type of a file (e.g. "application/zip")
       */
      sMimeType: string
    ): string;
    /**
     * Returns an info object for the icon with the given `iconName` and `collectionName`.
     *
     * Instead of giving name and collection, a complete icon-URI can be provided as `iconName`. The method
     * will determine name and collection from the URI, see {@link #.isIconURI IconPool.isIconURI} for details.
     *
     * The returned info object has the following properties:
     * 	 - `string: name` Name of the icon
     * 	 - `string: collection` Name of the collection that contains the icon or `undefined` in case of the
     * 			default collection
     * 	 - `string: uri` Icon URI that identifies the icon
     * 	 - `string: fontFamily` CSS font family to use for this icon
     * 	 - `string: content` Character sequence that represents the icon in the icon font
     * 	 - `string: text` Alternative text describing the icon (optional, might be empty)
     * 	 - `boolean: suppressMirroring` Whether the icon needs no mirroring in right-to-left mode
     *
     * @returns Info object or Promise for the icon depending on the loadingMode or `undefined` when the icon
     * can't be found or no icon name was given.
     */
    getIconInfo(
      /**
       * Name of the icon, or a complete icon-URI with icon collection and icon name; must not be empty
       */
      iconName: string,
      /**
       * Name of the icon collection; to access built-in icons, omit the collection name
       */
      collectionName?: string,
      /**
       * The approach for loading the icon info, if it is not already available: sync - font metadata is loaded
       * synchronously and the icon info is returned immediately async - a promise is returned that returns the
       * icon info when the font metadata is loaded mixed - until the font metadata is loaded a promise is returned,
       * afterwards the icon info
       */
      loadingMode?: string
    ): object | Promise<any> | undefined;
    /**
     * Returns all name of icons that are registered under the given collection.
     *
     * @returns An array contains all of the registered icon names under the given collection.
     */
    getIconNames(
      /**
       * the name of collection where icon names are retrieved.
       */
      collectionName: string
    ): any[];
    /**
     * Returns the URI of the icon in the pool which has the given `iconName` and `collectionName`.
     *
     * @returns URI of the icon or `undefined` if the icon can't be found in the IconPool
     */
    getIconURI(
      /**
       * Name of the icon, must not be empty
       */
      iconName: string,
      /**
       * Name of the icon collection; to access built-in icons, omit the collection name
       */
      collectionName?: string
    ): string | undefined;
    /**
     * Adds CSS code to load an icon font to the DOM
     */
    insertFontFaceStyle(
      /**
       * the file name of the font face
       */
      sFontFace: string,
      /**
       * the path to the font file
       */
      sPath: string,
      /**
       * the collection name, if not specified the font face is used
       */
      sCollectionName?: string
    ): void;
    /**
     * Returns whether the given `uri` is an icon URI.
     *
     * A string is an icon URI when it can be parsed as a URI and when it has one of the two forms
     * 	 - sap-icon://collectionName/iconName
     * 	 - sap-icon://iconName  where collectionName and iconName must be non-empty.
     *
     * @returns Whether the URI matches the icon URI format
     */
    isIconURI(
      /**
       * The URI to check
       */
      uri: string
    ): boolean;
    /**
     * @SINCE 1.56.0
     *
     * Registers an additional icon font to the icon pool
     */
    registerFont(
      /**
       * configuration object for registering the font
       */
      oConfig: {
        /**
         * the file name of the font face
         */
        fontFamily: string;
        /**
         * a collection name for the font, if not specified the font face will be used
         */
        collectionName?: string;
        /**
         * the location where the font files are physically located
         */
        fontURI: URI;
        /**
         * a configuration object mapping the icon name to the hexadecimal icon address in the font
         */
        metadata?: object;
        /**
         * an URI to a file containing the configuration object specified with oConfig.metadata
         */
        metadataURI?: object;
        /**
         * load the icon font metadata only when an icon is requested with {@link #.getIconInfo} if not specified
         * a JSON file with the name oConfig.fontFamily will be loaded from the location specified in oConfig.fontURI
         */
        lazy?: boolean;
      }
    ): void;
  }
  const IconPool: IconPool;
  export default IconPool;
}

declare module "sap/ui/core/IndicationColorSupport" {
  import UI5Element from "sap/ui/core/Element";

  import { IndicationColor } from "sap/ui/core/library";

  /**
   * @SINCE 1.66
   *
   * Helper functionality for indication color support.
   */
  interface IndicationColorSupport {
    /**
     * Returns a generic indication color message if the given Element has a property `IndicationColor` with
     * one of the states or the given `indicationColor` string represents one of five states.
     *
     * @returns the indication color text, if appropriate; otherwise `null`
     */
    getAdditionalText(
      /**
       * the Element of which the indicationColor needs to be checked, or the IndicationColor explicitly
       */
      vValue: UI5Element | (IndicationColor | keyof typeof IndicationColor)
    ): string | null;
  }
  const IndicationColorSupport: IndicationColorSupport;
  export default IndicationColorSupport;
}

declare module "sap/ui/core/IntervalTrigger" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.11.0
   *
   * Provides a trigger that triggers in a set interval and calls all registered listeners. If the interval
   * is <= 0 the trigger is switched off and won't trigger at all.
   */
  export default class IntervalTrigger extends BaseObject {
    /**
     * Creates an instance of EventBus.
     */
    constructor(
      /**
       * is the interval the trigger should be used. If the trigger is >0 triggering starts/runs and if the interval
       * is set to <=0 triggering stops.
       */
      iInterval: int
    );

    /**
     * @SINCE 1.61
     *
     * Adds a listener to the list that should be triggered.
     */
    static addListener(
      /**
       * is the called function that should be called when the trigger want to trigger the listener.
       */
      fnFunction: Function,
      /**
       * that should be triggered.
       */
      oListener?: object
    ): void;
    /**
     * Creates a new subclass of class sap.ui.core.IntervalTrigger with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IntervalTrigger>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.IntervalTrigger.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.61
     *
     * Removes corresponding listener from list.
     */
    static removeListener(
      /**
       * is the previously registered function
       */
      fnFunction: Function,
      /**
       * that should be removed
       */
      oListener?: object
    ): void;
    /**
     * Adds a listener to the list that should be triggered.
     */
    addListener(
      /**
       * is the called function that should be called when the trigger want to trigger the listener.
       */
      fnFunction: Function,
      /**
       * that should be triggered.
       */
      oListener?: object
    ): void;
    /**
     * Destructor method for objects.
     */
    destroy(): void;
    /**
     * Removes corresponding listener from list.
     */
    removeListener(
      /**
       * is the previously registered function
       */
      fnFunction: Function,
      /**
       * that should be removed
       */
      oListener?: object
    ): void;
    /**
     * Sets the trigger interval. If the value is >0 triggering will start if there are any registered listeners.
     * If the interval is set to <=0 triggering will stop.
     */
    setInterval(
      /**
       * sets the interval in milliseconds when a new triggering should occur.
       */
      iInterval: int
    ): void;
  }
}

declare module "sap/ui/core/InvisibleMessage" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import { InvisibleMessageMode } from "sap/ui/core/library";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.78
   *
   * The InvisibleMessage provides a way to programmatically expose dynamic content changes in a way that
   * can be announced by screen readers.
   *
   * Overview: This class is a singleton. The class instance can be retrieved via the static method {@link
   * sap.ui.core.InvisibleMessage.getInstance}.
   *
   * **Note:** Keep in mind that, according to the ARIA standard, the live regions should be presented and
   * should be empty. Thus, we recommend to instantiate `InvisibleMessage` via `sap.ui.core.InvisibleMessage.getInstance()`
   * as early as possible in the application logic, e.g. with the Component initialization, with the main
   * Controller initialization, after Core initialization, etc. Then, you should specify the text that has
   * to be announced by the screen reader and the live region’s mode using the `announce` method.
   */
  export default class InvisibleMessage extends ManagedObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.InvisibleMessage with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InvisibleMessage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the instance of the class.
     *
     * @returns oInstance
     */
    static getInstance(): InvisibleMessage;
    /**
     * Returns a metadata object for class sap.ui.core.InvisibleMessage.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Inserts the string into the respective span, depending on the mode provided.
     */
    announce(
      /**
       * String to be announced by the screen reader.
       */
      sText: string,
      /**
       * The mode to be inserted in the aria-live attribute.
       */
      sMode: InvisibleMessageMode | keyof typeof InvisibleMessageMode
    ): void;
  }

  export interface $InvisibleMessageSettings extends $ManagedObjectSettings {}
}

declare module "sap/ui/core/InvisibleText" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.27.0
   *
   * An InvisibleText is used to bring hidden texts to the UI for screen reader support. The hidden text can
   * e.g. be referenced in the ariaLabelledBy or ariaDescribedBy associations of other controls.
   *
   * The inherited properties busy, busyIndicatorDelay and visible and the aggregation tooltip is not supported
   * by this control.
   */
  export default class InvisibleText extends Control {
    /**
     * Constructor for a new InvisibleText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $InvisibleTextSettings
    );
    /**
     * Constructor for a new InvisibleText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $InvisibleTextSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.InvisibleText with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InvisibleText>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.InvisibleText.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns the ID of a shared `InvisibleText` instance whose `text` property is retrieved from the given
     * library resource bundle and text key.
     *
     * Calls with the same library and text key will return the same instance. The instance will be rendered
     * statically.
     *
     * When accessibility has been switched off by configuration or when the text key is empty or falsy, no
     * ID will be returned.
     *
     * @returns ID of the shared control
     */
    static getStaticId(
      /**
       * Name of the library to load the resource bundle for
       */
      sLibrary: string,
      /**
       * Key of the text to retrieve from the resource bundle
       */
      sTextKey?: string
    ): ID;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text of the InvisibleText.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * @deprecated (since 1.27) - local BusyIndicator is not supported by control.
     *
     *
     * @returns Returns `this` to allow method chaining
     */
    setBusy(): this;
    /**
     * @deprecated (since 1.27) - local BusyIndicator is not supported by control.
     *
     *
     * @returns Returns `this` to allow method chaining
     */
    setBusyIndicatorDelay(): this;
    /**
     * @deprecated (since 1.54) - local BusyIndicator is not supported by control.
     *
     *
     * @returns Returns `this` to allow method chaining
     */
    setBusyIndicatorSize(): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text of the InvisibleText.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * @deprecated (since 1.27) - tooltip is not supported by control.
     *
     *
     * @returns Returns `this` to allow method chaining
     */
    setTooltip(): this;
    /**
     * @deprecated (since 1.27) - property `visible` is not supported by control.
     *
     *
     * @returns Returns `this` to allow method chaining
     */
    setVisible(): this;
    /**
     * Adds `this` control into the static, hidden area UI area container.
     * See:
     * 	sap.ui.core.Control#placeAt
     *
     * @returns Returns `this` to allow method chaining
     */
    toStatic(): this;
  }

  export interface $InvisibleTextSettings extends $ControlSettings {
    /**
     * The text of the InvisibleText.
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/Item" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TextDirection } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A control base type.
   */
  export default class Item extends UI5Element {
    /**
     * Constructor for a new Item.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ItemSettings
    );
    /**
     * Constructor for a new Item.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.Item with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Item>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Item.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Enabled items can be selected.
     *
     * Default value is `true`.
     *
     * @returns Value of property `enabled`
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Can be used as input for subsequent actions.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
     *
     * Default value is `Inherit`.
     *
     * @returns Value of property `textDirection`
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Enabled items can be selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Can be used as input for subsequent actions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
  }

  export interface $ItemSettings extends $ElementSettings {
    /**
     * The text to be displayed for the item.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Enabled items can be selected.
     */
    enabled?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * Can be used as input for subsequent actions.
     */
    key?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/LabelEnablement" {
  import Control from "sap/ui/core/Control";

  import UI5Element from "sap/ui/core/Element";

  import RenderManager from "sap/ui/core/RenderManager";

  import { Label } from "sap/ui/core/library";

  /**
   * @SINCE 1.28.0
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Helper functionality for enhancement of a `Label` with common label functionality.
   * See:
   * 	sap.ui.core.LabelEnablement#enrich
   */
  interface LabelEnablement {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This function should be called on a label control to enrich its functionality.
     *
     * **Usage:** The function can be called with a control prototype: ` sap.ui.core.LabelEnablement.enrich(my.Label.prototype);
     * ` Or the function can be called on instance level in the init function of a label control: ` my.Label.prototype.init:
     * function(){ sap.ui.core.LabelEnablement.enrich(this); } `
     *
     * **Preconditions:** The given control must implement the interface sap.ui.core.Label and have an association
     * 'labelFor' with cardinality 0..1. This function extends existing API functions. Ensure not to override
     * these extensions AFTER calling this function.
     *
     * **What does this function do?**
     *
     * A mechanism is added that ensures that a bidirectional reference between the label and its labeled control
     * is established: The label references the labeled control via the HTML 'for' attribute (see {@link sap.ui.core.LabelEnablement#writeLabelForAttribute}).
     * If the labeled control supports the aria-labelledby attribute, a reference to the label is added automatically.
     *
     * In addition an alternative to apply a 'for' reference without influencing the labelFor association of
     * the API is applied (e.g. used by Form). For this purpose the functions setAlternativeLabelFor and getLabelForRendering
     * are added.
     */
    enrich(
      /**
       * the label control which should be enriched with further label functionality.
       */
      oControl: Control
    ): void;
    /**
     * Returns an array of IDs of the labels referencing the given element.
     *
     * @returns an array of ids of the labels referencing the given element
     */
    getReferencingLabels(
      /**
       * The element whose referencing labels should be returned
       */
      oElement: UI5Element
    ): string[];
    /**
     * @SINCE 1.29.0
     *
     * Returns `true` when the given control is required (property 'required') or one of its referencing labels,
     * `false` otherwise.
     *
     * @returns `true` when the given control is required (property 'required') or one of its referencing labels,
     * `false` otherwise
     */
    isRequired(
      /**
       * The element which should be checked for its required state
       */
      oElement: UI5Element
    ): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Helper function for the `Label` control to render the HTML 'for' attribute.
     *
     * This function should be called at the desired location in the renderer code of the `Label` control. It
     * can be used with both rendering APIs, with the new semantic rendering API (`apiVersion 2`) as well as
     * with the old, string-based API.
     *
     * As this method renders an attribute, it can only be called while a start tag is open. For the new semantic
     * rendering API, this means it can only be called between an `openStart/voidStart` call and the corresponding
     * `openEnd/voidEnd` call. In the context of the old rendering API, it can be called only after the prefix
     * of a start tag has been written (e.g. after `rm.write("<span id=\"foo\"");`), but before the start
     * tag ended, e.g before the right-angle ">" of the start tag has been written.
     */
    writeLabelForAttribute(
      /**
       * The RenderManager that can be used for rendering.
       */
      oRenderManager: RenderManager,
      /**
       * The `Label` for which the 'for' HTML attribute should be rendered.
       */
      oLabel: Label
    ): void;
  }
  const LabelEnablement: LabelEnablement;
  export default LabelEnablement;
}

declare module "sap/ui/core/LayoutData" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * A layout data base type.
   */
  export default class LayoutData extends UI5Element {
    /**
     * Constructor for a new LayoutData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor
     * sap.ui.core.Element} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LayoutDataSettings
    );
    /**
     * Constructor for a new LayoutData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor
     * sap.ui.core.Element} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LayoutDataSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.LayoutData with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LayoutData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.LayoutData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $LayoutDataSettings extends $ElementSettings {}
}

declare module "sap/ui/core/ListItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * An item that is used in list controls, such as `DropdownBox`.
   *
   * The element foresees the usage of additional texts displayed in a second column.
   */
  export default class ListItem extends Item {
    /**
     * Constructor for a new ListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ListItemSettings
    );
    /**
     * Constructor for a new ListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ListItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.ListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.ListItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Some additional text of type string, optionally to be displayed along with this item.
     *
     * @returns Value of property `additionalText`
     */
    getAdditionalText(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Some additional text of type string, optionally to be displayed along with this item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
  }

  export interface $ListItemSettings extends $ItemSettings {
    /**
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Some additional text of type string, optionally to be displayed along with this item.
     */
    additionalText?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/LocalBusyIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.11.0
   * @deprecated (since 1.14.2) - The LocalBusyIndicator Control is not needed anymore by the new implementation
   * of the LBI. Hence, it is not used anymore.
   *
   * The LocalBusyIndicator is a special version of the BusyIndicator. This one doesn't block the whole screen
   * - it just blocks the corresponding control and puts a local animation over the control. To use the functionality
   * of this control the corresponding control needs to be enabled via the 'LocalBusyIndicatorSupport' accordingly
   * to the ListBox control (see the init-function of the ListBox).
   */
  export default class LocalBusyIndicator extends Control {
    /**
     * Constructor for a new LocalBusyIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $LocalBusyIndicatorSettings
    );
    /**
     * Constructor for a new LocalBusyIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $LocalBusyIndicatorSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LocalBusyIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.LocalBusyIndicator.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * This property is the height of the control that has to be covered. With this height the position of the
     * animation can be properly set.
     *
     * Default value is `'100px'`.
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * This property is the width of the control that has to be covered. With this width the position of the
     * animation can be properly set.
     *
     * Default value is `'100px'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * This property is the height of the control that has to be covered. With this height the position of the
     * animation can be properly set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * This property is the width of the control that has to be covered. With this width the position of the
     * animation can be properly set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100px'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $LocalBusyIndicatorSettings extends $ControlSettings {
    /**
     * This property is the width of the control that has to be covered. With this width the position of the
     * animation can be properly set.
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * This property is the height of the control that has to be covered. With this height the position of the
     * animation can be properly set.
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/Locale" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Locale represents a locale setting, consisting of a language, script, region, variants, extensions and
   * private use section.
   */
  export default class Locale extends BaseObject {
    /**
     * Creates an instance of the Locale.
     */
    constructor(
      /**
       * the locale identifier, in format en-US or en_US.
       */
      sLocaleId: string
    );

    /**
     * Creates a new subclass of class sap.ui.core.Locale with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Locale>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Locale.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Get the locale extension as a single string or `null`.
     *
     * The extension always consists of a singleton character (not 'x'), a dash '-' and one or more extension
     * token, each separated again with a dash.
     *
     * Use {@link #getExtensionSubtags} to get the individual extension tokens as an array.
     *
     * @returns the extension or `null`
     */
    getExtension(): string | null;
    /**
     * Get the locale extensions as an array of tokens.
     *
     * The leading singleton and the separating dashes are not part of the result. If there is no extensions
     * section in the locale tag, an empty array is returned.
     *
     * @returns the individual extension sections
     */
    getExtensionSubtags(): string[];
    /**
     * Get the locale language.
     *
     * Note that the case might differ from the original script tag (Lower case is enforced as recommended by
     * BCP47/ISO639).
     *
     * @returns the language code
     */
    getLanguage(): string;
    /**
     * Get the locale private use section or `null`.
     *
     * @returns the private use section
     */
    getPrivateUse(): string;
    /**
     * Get the locale private use section as an array of tokens.
     *
     * The leading singleton and the separating dashes are not part of the result. If there is no private use
     * section in the locale tag, an empty array is returned.
     *
     * @returns the tokens of the private use section
     */
    getPrivateUseSubtags(): string[];
    /**
     * Get the locale region or `null` if none was specified.
     *
     * Note that the case might differ from the original script tag (Upper case is enforced as recommended by
     * BCP47/ISO3166-1).
     *
     * @returns the ISO3166-1 region code (2-letter or 3-digits)
     */
    getRegion(): string;
    /**
     * @SINCE 1.17.0
     * @deprecated (since 1.44) - use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead as that
     * class allows to configure an SAP Logon language.
     *
     * Best guess to get a proper SAP Logon Language for this locale.
     *
     * Conversions taken into account:
     * 	 - use the language part only
     * 	 - convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')
     * 	 - for Chinese, map 'Traditional Chinese' or region 'TW' to SAP proprietary code 'zf'
     * 	 - map private extensions x-saptrc, x-sappsd and saprigi to SAP pseudo languages '1Q', '2Q' and '3Q'
     *
     * 	 - remove ext. language sub tags
     * 	 - convert to uppercase
     *
     * Note that the conversion also returns a result for languages that are not supported by the default set
     * of SAP languages. This method has no knowledge about the concrete languages of any given backend system.
     *
     * @returns a language code that should
     */
    getSAPLogonLanguage(): string;
    /**
     * Get the locale script or `null` if none was specified.
     *
     * Note that the case might differ from the original language tag (Upper case first letter and lower case
     * reminder enforced as recommended by BCP47/ISO15924)
     *
     * @returns the script code or `null`
     */
    getScript(): string | null;
    /**
     * Get the locale variants as a single string or `null`.
     *
     * Multiple variants are separated by a dash '-'.
     *
     * @returns the variant or `null`
     */
    getVariant(): string | null;
    /**
     * Get the locale variants as an array of individual variants.
     *
     * The separating dashes are not part of the result. If there is no variant section in the locale tag, an
     * empty array is returned.
     *
     * @returns the individual variant sections
     */
    getVariantSubtags(): string[];
  }
}

declare module "sap/ui/core/LocaleData" {
  import BaseObject from "sap/ui/base/Object";

  import Locale from "sap/ui/core/Locale";

  import CalendarType from "sap/ui/core/CalendarType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Provides access to locale-specific data, such as, date formats, number formats, and currencies.
   */
  export default class LocaleData extends BaseObject {
    /**
     * Creates an instance of LocaleData for the given locale.
     */
    constructor(
      /**
       * the locale
       */
      oLocale: Locale
    );

    /**
     * Creates a new subclass of class sap.ui.core.LocaleData with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LocaleData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.LocaleData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.92.0
     *
     * Whether 1 January is the first day of the first calendar week. This is the definition of the calendar
     * week in the US.
     *
     * @returns true if the first week of the year starts with 1 January.
     */
    firstDayStartsFirstWeek(): boolean;
    /**
     * @SINCE 1.32.0
     *
     * Returns the defined pattern for representing the calendar week number.
     *
     * @returns the week number string
     */
    getCalendarWeek(
      /**
       * the style of the pattern. It can only be either "wide" or "narrow".
       */
      sStyle: string,
      /**
       * the week number
       */
      iWeekNumber: int
    ): string;
    /**
     * Get combined datetime pattern with given date and time style.
     *
     * @returns the combined datetime pattern
     */
    getCombinedDateTimePattern(
      /**
       * the required style for the date part
       */
      sDateStyle: string,
      /**
       * the required style for the time part
       */
      sTimeStyle: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * @SINCE 1.46
     *
     * Get combined interval pattern using a given pattern and the fallback interval pattern.
     *
     * If a skeleton based pattern is not available or not wanted, this method can be used to create an interval
     * pattern based on a given pattern, using the fallback interval pattern.
     *
     * @returns the calculated interval pattern
     */
    getCombinedIntervalPattern(
      /**
       * the single date pattern to use within the interval pattern
       */
      sPattern: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * @SINCE 1.27.0
     *
     * Returns the currency code which is corresponded with the given currency symbol.
     *
     * @returns The corresponded currency code defined for the given currency symbol. The given currency symbol
     * is returned if no currency code can be found by using the given currency symbol.
     */
    getCurrencyCodeBySymbol(
      /**
       * The currency symbol which needs to be converted to currency code
       */
      sCurrencySymbol: string
    ): string;
    /**
     * @SINCE 1.21.1
     *
     * Returns the number of digits of the specified currency.
     *
     * @returns digits of the currency
     */
    getCurrencyDigits(
      /**
       * ISO 4217 currency code
       */
      sCurrency: string
    ): int;
    /**
     * @SINCE 1.51.0
     *
     * Returns the short currency formats (like 1K USD, 1M USD....).
     *
     * @returns decimal format
     */
    getCurrencyFormat(
      /**
       * short
       */
      sStyle: string,
      /**
       * 1000, 10000 ...
       */
      sNumber: string,
      /**
       * one or other (if not exists other is used)
       */
      sPlural: string
    ): string;
    /**
     * Get currency format pattern.
     *
     * CLDR format pattern:
     * See:
     * 	https://cldr.unicode.org/translation/numbers-currency/number-patterns
     *
     * @returns The pattern
     */
    getCurrencyPattern(
      /**
       * the context of the currency pattern (standard or accounting)
       */
      sContext: string
    ): string;
    /**
     * @SINCE 1.21.1
     *
     * Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code
     * is returned.
     *
     * @returns the currency symbol
     */
    getCurrencySymbol(
      /**
       * ISO 4217 currency code
       */
      sCurrency: string
    ): string;
    /**
     * @SINCE 1.60
     *
     * Returns the currency symbols available for this locale. Currency symbols get accumulated by custom currency
     * symbols.
     *
     * @returns the map of all currency symbols available in this locale, e.g. { "AUD": "A$", "BRL": "R$", "EUR":
     * "€", "GBP": "£", }
     */
    getCurrencySymbols(): Record<string, string>;
    /**
     * @SINCE 1.34
     *
     * Get custom datetime pattern for a given skeleton format.
     *
     * The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the
     * pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order,
     * that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),
     * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
     *
     * See https://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
     *
     * @returns the best matching datetime pattern
     */
    getCustomDateTimePattern(
      /**
       * the wanted skeleton format for the datetime pattern
       */
      sSkeleton: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * @SINCE 1.46
     *
     * Get interval pattern for a given skeleton format.
     *
     * The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the
     * pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order,
     * that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),
     * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
     *
     * See https://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
     *
     * @returns the best matching interval pattern if interval difference is given otherwise an array with all
     * possible interval patterns which match the given skeleton format
     */
    getCustomIntervalPattern(
      /**
       * the wanted skeleton format for the datetime pattern
       */
      sSkeleton: string,
      /**
       * is either a string which represents the symbol matching the greatest difference in the two dates to format
       * or an object which contains key-value pairs. The value is always true. The key is one of the date field
       * symbol groups whose value are different between the two dates. The key can only be set with 'Year', 'Quarter',
       * 'Month', 'Week', 'Day', 'DayPeriod', 'Hour', 'Minute', or 'Second'.
       */
      vGreatestDiff: object | string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string | string[];
    /**
     * Get date pattern in format "short", "medium", "long" or "full".
     *
     * @returns the selected date pattern
     */
    getDatePattern(
      /**
       * the required style for the date pattern
       */
      sStyle: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * Get datetime pattern in style "short", "medium", "long" or "full".
     *
     * @returns the selected datetime pattern
     */
    getDateTimePattern(
      /**
       * the required style for the datetime pattern
       */
      sStyle: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * Get day periods in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of day periods (AM, PM)
     */
    getDayPeriods(
      /**
       * the required width for the day period names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get standalone day periods in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of day periods (AM, PM)
     */
    getDayPeriodsStandAlone(
      /**
       * the required width for the day period names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get day names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of day names (starting with Sunday)
     */
    getDays(
      /**
       * the required width for the day names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get standalone day names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of day names (starting with Sunday)
     */
    getDaysStandAlone(
      /**
       * the required width for the day names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * @SINCE 1.25.0
     *
     * Returns the short decimal formats (like 1K, 1M....).
     *
     * @returns decimal format
     */
    getDecimalFormat(
      /**
       * short or long
       */
      sStyle: string,
      /**
       * 1000, 10000 ...
       */
      sNumber: string,
      /**
       * one or other (if not exists other is used)
       */
      sPlural: string
    ): string;
    /**
     * Get decimal format pattern.
     *
     * @returns The pattern
     */
    getDecimalPattern(): string;
    /**
     * @SINCE 1.34.0
     *
     * Returns the display name for a time unit (second, minute, hour, day, week, month, year).
     */
    getDisplayName(
      /**
       * Type (second, minute, hour, day, week, month, year)
       */
      sType: string,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow" returns
       * {string} display name
       */
      sStyle?: string
    ): void;
    /**
     * @SINCE 1.32.0
     *
     * Returns the map of era IDs to era dates.
     *
     * @returns the array of eras containing objects with either an _end or _start property with a date
     */
    getEraDates(
      /**
       * the type of calendar
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * @SINCE 1.32.0
     *
     * Returns array of eras.
     *
     * @returns the array of eras
     */
    getEras(
      /**
       * the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'
       */
      sWidth: string,
      /**
       * the type of calendar
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Returns the day that usually is regarded as the first day of a week in the current locale.
     *
     * Days are encoded as integer where Sunday=0, Monday=1 etc.
     *
     * All week data information in the CLDR is provided for territories (countries). If the locale of this
     * LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag"
     * information of the CLDR is taken into account to guess the "most likely" territory for the locale.
     *
     * @returns first day of week
     */
    getFirstDayOfWeek(): int;
    /**
     * @SINCE 1.17.0
     *
     * Returns the interval format with the given Id (see CLDR documentation for valid Ids) or the fallback
     * format if no interval format with that Id is known.
     *
     * The empty Id ("") might be used to retrieve the interval format fallback.
     *
     * @returns interval format string with placeholders {0} and {1}
     */
    getIntervalPattern(
      /**
       * Id of the interval format, e.g. "d-d"
       */
      sId: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * Get locale specific language names.
     *
     * @returns map of locale specific language names
     */
    getLanguages(): Record<string, string>;
    /**
     * Get lenient number symbols for "plusSign" or "minusSign".
     *
     * @returns the selected lenient number symbols, e.g. "-‒⁻₋−➖﹣"
     */
    getLenientNumberSymbols(
      /**
       * the required type of symbol
       */
      sType: string
    ): string;
    /**
     * Returns the required minimal number of days for the first week of a year.
     *
     * This is the minimal number of days of the week which must be contained in the new year for the week to
     * become the first week of the year. Depending on the country, this is just a single day (in the US) or
     * at least 4 days (in most of Europe).
     *
     * All week data information in the CLDR is provided for territories (countries). If the locale of this
     * LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag"
     * information of the CLDR is taken into account to guess the "most likely" territory for the locale.
     *
     * @returns minimal number of days
     */
    getMinimalDaysInFirstWeek(): int;
    /**
     * Get miscellaneous pattern.
     *
     * @returns The pattern
     */
    getMiscPattern(
      /**
       * the name of the misc pattern, can be "approximately", "atLeast", "atMost" or "range"
       */
      sName: string
    ): string;
    /**
     * Get month names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of month names (starting with January)
     */
    getMonths(
      /**
       * the required width for the month names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get standalone month names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of month names (starting with January)
     */
    getMonthsStandAlone(
      /**
       * the required width for the month names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign".
     *
     * @returns the selected number symbol
     */
    getNumberSymbol(
      /**
       * the required type of symbol
       */
      sType: string
    ): string;
    /**
     * Get orientation (left-to-right or right-to-left).
     *
     * @returns character orientation for this locale
     */
    getOrientation(): string;
    /**
     * Get percent format pattern.
     *
     * @returns The pattern
     */
    getPercentPattern(): string;
    /**
     * @SINCE 1.50
     *
     * Returns an array of all plural categories available in this language.
     *
     * @returns The array of plural categories
     */
    getPluralCategories(): any[];
    /**
     * @SINCE 1.50
     *
     * Returns the plural category (zero, one, two, few, many or other) for the given number value. The number
     * must be passed as an unformatted number string with dot as decimal separator (for example "12345.67").
     * To determine the correct plural category, it is also necessary to keep the same number of decimal digits
     * as given in the formatted output string. For example "1" and "1.0" could be in different plural categories
     * as the number of decimal digits is different.
     *
     * Compact numbers (for example in "short" format) must be provided in the locale-independent CLDR compact
     * notation. This notation uses the plural rule operand "c" for the compact decimal exponent, for example
     * "1.2c3" for "1.2K" (1200) or "4c6" for "4M" (4000000).
     *
     * Note that the operand "e" is deprecated, but is a synonym corresponding to the CLDR specification for
     * "c" and may be redefined in the future.
     *
     * @returns The plural category
     */
    getPluralCategory(
      /**
       * The number to find the plural category for
       */
      vNumber: string | number
    ): string;
    /**
     * @SINCE 1.28.6
     *
     * Returns the preferred calendar type for the current locale which exists in {@link sap.ui.core.CalendarType}
     *
     * @returns the preferred calendar type
     */
    getPreferredCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * @SINCE 1.34
     *
     * Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale.
     *
     * @returns the preferred hour symbol
     */
    getPreferredHourSymbol(): string;
    /**
     * Get quarter names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of quarters
     */
    getQuarters(
      /**
       * the required width for the quarter names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * Get standalone quarter names in width "narrow", "abbreviated" or "wide".
     *
     * @returns array of quarters
     */
    getQuartersStandAlone(
      /**
       * the required width for the quarter names
       */
      sWidth: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): any[];
    /**
     * @SINCE 1.25.0
     *
     * Returns the relative day resource pattern (like "Today", "Yesterday", "{0} days ago") based on the given
     * difference of days (0 means today, 1 means tomorrow, -1 means yesterday, ...).
     *
     * @returns the relative day resource pattern
     */
    getRelativeDay(
      /**
       * the difference in days
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.31.0
     *
     * Returns the relative resource pattern with unit 'hour' (like "in {0} hour(s)", "{0} hour(s) ago" under
     * locale 'en') based on the given difference value (positive value means in the future and negative value
     * means in the past).
     *
     * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference
     * case, you can use the getRelativeMinute or getRelativeSecond function to format the difference using
     * unit 'minute' or 'second'.
     *
     * @returns the relative resource pattern in unit 'hour'. The method returns null if 0 is given as parameter.
     */
    getRelativeHour(
      /**
       * the difference in hours
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string | null;
    /**
     * @SINCE 1.31.0
     *
     * Returns the relative resource pattern with unit 'minute' (like "in {0} minute(s)", "{0} minute(s) ago"
     * under locale 'en') based on the given difference value (positive value means in the future and negative
     * value means in the past).
     *
     * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference
     * case, you can use the getRelativeSecond function to format the difference using unit 'second'.
     *
     * @returns the relative resource pattern in unit 'minute'. The method returns null if 0 is given as parameter.
     */
    getRelativeMinute(
      /**
       * the difference in minutes
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string | null;
    /**
     * @SINCE 1.25.0
     *
     * Returns the relative month resource pattern (like "This month", "Last month", "{0} months ago") based
     * on the given difference of months (0 means this month, 1 means next month, -1 means last month, ...).
     *
     * @returns the relative month resource pattern
     */
    getRelativeMonth(
      /**
       * the difference in months
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.34
     *
     * Returns the relative format pattern with given scale (year, month, week, ...) and difference value.
     *
     * @returns the relative format pattern
     */
    getRelativePattern(
      /**
       * the scale the relative pattern is needed for
       */
      sScale: string,
      /**
       * the difference in the given scale unit
       */
      iDiff: int,
      /**
       * whether a future or past pattern should be used
       */
      bFuture?: boolean,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.34
     *
     * Returns relative time patterns for the given scales as an array of objects containing scale, value and
     * pattern.
     *
     * The array may contain the following values: "year", "month", "week", "day", "hour", "minute" and "second".
     * If no scales are given, patterns for all available scales will be returned.
     *
     * The return array will contain objects looking like:
     * ```javascript
     *
     * {
     *     scale: "minute",
     *     sign: 1,
     *     pattern: "in {0} minutes"
     * }
     * ```
     *
     *
     * @returns An array of all relative time patterns
     */
    getRelativePatterns(
      /**
       * The scales for which the available patterns should be returned
       */
      aScales: string[],
      /**
       * @since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are "wide", "short" and "narrow".
       */
      sStyle?: string
    ): object[];
    /**
     * @SINCE 1.31.0
     *
     * Returns the relative resource pattern with unit 'second' (like now, "in {0} seconds", "{0} seconds ago"
     * under locale 'en') based on the given difference value (0 means now, positive value means in the future
     * and negative value means in the past).
     *
     * @returns the relative resource pattern in unit 'second'
     */
    getRelativeSecond(
      /**
       * the difference in seconds
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.31.0
     *
     * Returns the relative week resource pattern (like "This week", "Last week", "{0} weeks ago") based on
     * the given difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).
     *
     * @returns the relative week resource pattern
     */
    getRelativeWeek(
      /**
       * the difference in weeks
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.25.0
     *
     * Returns the relative year resource pattern (like "This year", "Last year", "{0} year ago") based on the
     * given difference of years (0 means this year, 1 means next year, -1 means last year, ...).
     *
     * @returns the relative year resource pattern
     */
    getRelativeYear(
      /**
       * the difference in years
       */
      iDiff: int,
      /**
       * @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
       */
      sStyle?: string
    ): string;
    /**
     * @SINCE 1.54
     *
     * Retrieves the unit format pattern for a specific unit name considering the unit mappings.
     * See:
     * 	sap.ui.core.LocaleData#getUnitFromMapping
     *
     * @returns The unit format configuration for the given unit name
     */
    getResolvedUnitFormat(
      /**
       * unit name, e.g. "duration-hour" or "my"
       */
      sUnit: string
    ): object;
    /**
     * Get locale specific script names.
     *
     * @returns map of locale specific script names
     */
    getScripts(): Record<string, string>;
    /**
     * Get locale specific territory names.
     *
     * @returns map of locale specific territory names
     */
    getTerritories(): Record<string, string>;
    /**
     * Get time pattern in style "short", "medium", "long" or "full".
     *
     * @returns the selected time pattern
     */
    getTimePattern(
      /**
       * the required style for the date pattern
       */
      sStyle: string,
      /**
       * the type of calendar. If it's not set, it falls back to the calendar type either set in configuration
       * or calculated from locale.
       */
      sCalendarType?: CalendarType | keyof typeof CalendarType
    ): string;
    /**
     * @SINCE 1.54
     *
     * Retrieves the localized display name of a unit by sUnit, e.g. "duration-hour".
     *
     * @returns The localized display name for the requested unit, e.g. `"Hour"`. Return empty string `""` if
     * not found
     */
    getUnitDisplayName(
      /**
       * the unit key, e.g. "duration-hour"
       */
      sUnit: string
    ): string;
    /**
     * @SINCE 1.54
     *
     * Retrieves the unit format pattern for a specific unit name.
     *
     * Note: Does not take unit mapping into consideration.
     *
     * @returns The unit format configuration for the given unit name
     */
    getUnitFormat(
      /**
       * unit name, e.g. "duration-hour"
       */
      sUnit: string
    ): object;
    /**
     * @SINCE 1.54
     *
     * Retrieves all unit format patterns merged.
     *
     * Note: Does not take unit mapping into consideration.
     *
     * @returns The unit format patterns
     */
    getUnitFormats(): object;
    /**
     * @SINCE 1.54
     *
     * Looks up the unit from defined unit mapping. E.g. for defined unit mapping ` { "my": "my-custom-unit",
     * "cm": "length-centimeter" } `
     *
     * Call: `getUnitFromMapping("my")` would result in `"my-custom-unit"`
     *
     * @returns unit from the mapping
     */
    getUnitFromMapping(
      /**
       * mapping identifier
       */
      sMapping: string
    ): string;
    /**
     * Returns the last day of a weekend for the given locale.
     *
     * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
     *
     * All week data information in the CLDR is provided for territories (countries). If the locale of this
     * LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag"
     * information of the CLDR is taken into account to guess the "most likely" territory for the locale.
     *
     * @returns last day of weekend
     */
    getWeekendEnd(): int;
    /**
     * Returns the first day of a weekend for the given locale.
     *
     * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
     *
     * All week data information in the CLDR is provided for territories (countries). If the locale of this
     * LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag"
     * information of the CLDR is taken into account to guess the "most likely" territory for the locale.
     *
     * @returns first day of weekend
     */
    getWeekendStart(): int;
  }
}

declare module "sap/ui/core/Manifest" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.33.0
   *
   * The Manifest class.
   */
  export default class Manifest extends BaseObject {
    /**
     * Creates and initializes a manifest wrapper which provides API access to the content of the manifest.
     */
    constructor(
      /**
       * the manifest object
       */
      oManifest: object,
      /**
       * (optional) the configuration options
       */
      mOptions?: {
        /**
         * (optional) the name of the component
         */
        componentName?: string;
        /**
         * (optional) the base URL which is used to resolve relative URLs against
         */
        baseUrl?: string;
        /**
         * (optional) Flag whether the manifest object should be processed or not which means that the placeholders
         * will be replaced with resource bundle values
         */
        process?: boolean;
        /**
         * (optional) A list of active terminologies. If the `mOptions.process` flag is set to `true`, the given
         * terminologies will be respected when replacing placeholders with resource bundle values. To use active
         * terminologies, the `sap.app.i18n` section in the manifest must be defined in object syntax as described
         * here: {@link topic:eba8d25a31ef416ead876e091e67824e Text Verticalization}. The order of the given active
         * terminologies is significant. The {@link module:sap/base/i18n/ResourceBundle ResourceBundle} API documentation
         * describes the processing behavior in more detail.
         */
        activeTerminologies?: string[];
      }
    );

    /**
     * Creates a new subclass of class sap.ui.core.Manifest with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Manifest>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Manifest.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Function to load the manifest by URL
     *
     * @returns Manifest object or for asynchronous calls an ECMA Script 6 Promise object will be returned.
     */
    static load(
      /**
       * the configuration options
       */
      mOptions: {
        /**
         * URL of the manifest
         */
        manifestUrl: string;
        /**
         * name of the component
         */
        componentName?: string;
        /**
         * Flag whether to load the manifest async or not
         */
        async?: boolean;
        /**
         * Flag whether to fail if an error occurs or not If set to `false`, errors during the loading of the manifest.json
         * file (e.g. 404) will be ignored and the resulting manifest object will be `null`. For asynchronous calls
         * the returned Promise will not reject but resolve with `null`.
         */
        failOnError?: boolean;
        /**
         * Callback for asynchronous processing of the loaded manifest. The callback receives the parsed manifest
         * object and must return a Promise which resolves with an object. It allows to early access and modify
         * the manifest object.
         */
        processJson?: Function;
        /**
         * A list of active terminologies. The order of the given active terminologies is significant. The {@link
         * module:sap/base/i18n/ResourceBundle ResourceBundle} API documentation describes the processing behavior
         * in more detail. Please have a look at this dev-guide chapter for general usage instructions: {@link topic:eba8d25a31ef416ead876e091e67824e
         * Text Verticalization}.
         */
        activeTerminologies?: string[];
      }
    ): Manifest | Promise<any>;
    /**
     * Returns the Component name which is defined in the manifest as `sap.ui5/componentName` or `sap.app/id`
     *
     * @returns the component name
     */
    getComponentName(): string;
    /**
     * Returns the configuration of a manifest section or the value for a specific path. If no key is specified,
     * the return value is null.
     *
     * Example: ` { "sap.ui5": { "dependencies": { "libs": { "sap.m": {} }, "components": { "my.component.a":
     * {} } } }); `
     *
     * The configuration above can be accessed in the following ways:
     * 	 - **By section/namespace**: `oManifest.getEntry("sap.ui5")`
     * 	 - **By path**: `oManifest.getEntry("/sap.ui5/dependencies/libs")`
     *
     * By section/namespace returns the configuration for the specified manifest section and by path allows
     * to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with
     * a slash (/).
     *
     * @returns Value of the key (could be any kind of value)
     */
    getEntry(
      /**
       * Either the manifest section name (namespace) or a concrete path
       */
      sPath: string
    ): any | null;
    /**
     * Returns the manifest defined in the metadata of the component. If not specified, the return value is
     * null.
     *
     * @returns manifest.
     */
    getJson(): Object;
    /**
     * Returns the raw manifest defined in the metadata of the component. If not specified, the return value
     * is null.
     *
     * @returns manifest
     */
    getRawJson(): Object;
    /**
     * @SINCE 1.60.1
     *
     * Resolves the given URI relative to the Component by default or optional relative to the manifest when
     * passing 'manifest' as second parameter.
     *
     * @returns resolved URI as string
     */
    resolveUri(
      /**
       * URI to resolve as string
       */
      sUri: string,
      /**
       * defines to which base URI the given URI will be resolved to; one of ‘component' (default) or 'manifest'
       */
      sRelativeTo?: string
    ): string;
  }
}

declare module "sap/ui/core/Message" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI, MessageType } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * This element is used to provide messages.
   *
   * Rendering must be done within the control that uses this kind of element. Its default level is none.
   */
  export default class Message extends UI5Element {
    /**
     * Constructor for a new Message.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MessageSettings
    );
    /**
     * Constructor for a new Message.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MessageSettings
    );

    /**
     * Compares two given messages with each other.
     *
     * The types of {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" > "Information"
     * > "None".
     *
     * @returns returns `0` if both messages are at the same level. `-1` if `this` message has a lower level.
     * `1` if `this` message has a higher level.
     */
    static compareByType(
      /**
       * first message to compare
       */
      oMessage1: Message,
      /**
       * second message to compare
       */
      oMessage2: Message
    ): int;
    /**
     * Creates a new subclass of class sap.ui.core.Message with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Message>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Message.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Compares the given message with `this` message. The types of {@link sap.ui.core.MessageType} are ordered
     * from "Error" > "Warning" > "Success" > "Information" > "None".
     *
     * See {@link sap.ui.core.Message.compareByType}
     *
     * @returns returns `0` if both messages are at the same level. `-1` if `this` message has a lower level.
     * `1` if `this` message has a higher level.
     */
    compareByType(
      /**
       * message to compare with this one
       */
      oOther: Message
    ): int;
    /**
     * Returns the icon's default URI depending on given size.
     *
     * @returns URI of the default icon.
     */
    getDefaultIcon(
      /**
       * Only the values "16x16" or "32x32" are allowed. Otherwise the default value is used.
       */
      sSize?: string
    ): URI;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * A possible icon URI of the message
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getLevel level}.
     *
     * Setting the message's level.
     *
     * Default value is `None`.
     *
     * @returns Value of property `level`
     */
    getLevel(): MessageType | keyof typeof MessageType;
    /**
     * @SINCE 1.19.0
     *
     * Gets current value of property {@link #getReadOnly readOnly}.
     *
     * Determines whether the message should be read only. This helps the application to handle a message a
     * different way if the application differentiates between read-only and common messages.
     *
     * Default value is `false`.
     *
     * @returns Value of property `readOnly`
     */
    getReadOnly(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Message text
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTimestamp timestamp}.
     *
     * Message's timestamp. It is just a simple String that will be used without any transformation. So the
     * application that uses messages needs to format the timestamp to its own needs.
     *
     * @returns Value of property `timestamp`
     */
    getTimestamp(): string;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * A possible icon URI of the message
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLevel level}.
     *
     * Setting the message's level.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLevel(
      /**
       * New value for property `level`
       */
      sLevel?: MessageType | keyof typeof MessageType
    ): this;
    /**
     * @SINCE 1.19.0
     *
     * Sets a new value for property {@link #getReadOnly readOnly}.
     *
     * Determines whether the message should be read only. This helps the application to handle a message a
     * different way if the application differentiates between read-only and common messages.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setReadOnly(
      /**
       * New value for property `readOnly`
       */
      bReadOnly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Message text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTimestamp timestamp}.
     *
     * Message's timestamp. It is just a simple String that will be used without any transformation. So the
     * application that uses messages needs to format the timestamp to its own needs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTimestamp(
      /**
       * New value for property `timestamp`
       */
      sTimestamp?: string
    ): this;
  }

  export interface $MessageSettings extends $ElementSettings {
    /**
     * Message text
     */
    text?: string | PropertyBindingInfo;

    /**
     * Message's timestamp. It is just a simple String that will be used without any transformation. So the
     * application that uses messages needs to format the timestamp to its own needs.
     */
    timestamp?: string | PropertyBindingInfo;

    /**
     * A possible icon URI of the message
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Setting the message's level.
     */
    level?:
      | (MessageType | keyof typeof MessageType)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * @SINCE 1.19.0
     *
     * Determines whether the message should be read only. This helps the application to handle a message a
     * different way if the application differentiates between read-only and common messages.
     */
    readOnly?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/message/ControlMessageProcessor" {
  import MessageProcessor from "sap/ui/core/message/MessageProcessor";

  import Metadata from "sap/ui/base/Metadata";

  import Message from "sap/ui/core/message/Message";

  /**
   * The ControlMessageProcessor implementation. This MessageProcessor is able to handle Messages with the
   * following target syntax: 'ControlID/PropertyName'. Creating an instance of this class using the "new"
   * keyword always results in the same instance (Singleton).
   */
  export default class ControlMessageProcessor extends MessageProcessor {
    /**
     * Constructor for a new ControlMessageProcessor
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ControlMessageProcessor>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.message.ControlMessageProcessor.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Check Messages and update controls with messages
     */
    checkMessages(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Set Messages to check
     */
    setMessages(
      /**
       * map of messages: {'target': [sap.ui.core.message.Message],...}
       */
      mMessages: Record<string, Message[]>
    ): void;
  }
}

declare module "sap/ui/core/message/Message" {
  import BaseObject from "sap/ui/base/Object";

  import { MessageType } from "sap/ui/core/library";

  import MessageProcessor from "sap/ui/core/message/MessageProcessor";

  import Metadata from "sap/ui/base/Metadata";

  export default class Message extends BaseObject {
    /**
     * Constructor for a new Message.
     */
    constructor(
      /**
       * a map which contains the following parameter properties:
       */
      mParameters?: {
        /**
         * The message id: will be generated if no id is set
         */
        id?: string;
        /**
         * The message text
         */
        message?: string;
        /**
         * The message description
         */
        description?: string;
        /**
         * The message description url to get a more detailed message
         */
        descriptionUrl?: string;
        /**
         * The message additionalText
         */
        additionalText?: string;
        /**
         * The message type
         */
        type?: MessageType | keyof typeof MessageType;
        /**
         * The message code
         */
        code?: string;
        /**
         * If the message is set as technical message
         */
        technical?: boolean;
        /**
         * An object containing technical details for a message
         */
        technicalDetails?: object;

        processor?: MessageProcessor;
        /**
         * The single message target or (since 1.79) an array of message targets in case the message has multiple
         * targets. The syntax is MessageProcessor dependent. Read the documentation of the respective MessageProcessor.
         */
        target?: string | string[];
        /**
         * Sets message persistent: If persistent is set `true` the message lifecycle is controlled by the application
         */
        persistent?: boolean;
        /**
         * Sets message date which can be used to remove old messages. Number of milliseconds elapsed since 1 January
         * 1970 00:00:00 UTC
         */
        date?: int;
        /**
         * Defines more detailed information about the message target or (since 1.79) the message targets in case
         * the message has multiple targets. This property is currently only used by the ODataMessageParser.
         */
        fullTarget?: string | string[];
      }
    );

    /**
     * Creates a new subclass of class sap.ui.core.message.Message with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Message>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.message.Message.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the messages additional text.
     *
     * @returns The additionaltext
     */
    getAdditionalText(): string;
    /**
     * Returns the message code
     *
     * @returns code
     */
    getCode(): string;
    /**
     * Returns the control ID if set.
     *
     * NOTE: The control ID is only set for Controls based on `sap.m.InputBase` The Control must be bound to
     * a Model so the Message could be propagated to this Control. The propagation happens only if the Control
     * is created and visible on the screen. Is this the case the control ID is set. The ID is not set in all
     * other cases and cannot be set manually.
     *
     * If a Message is propagated to multiple Controls bound to the same target the last Control wins.
     *
     * @returns sControlId
     */
    getControlId(): string;
    /**
     * Returns an array of control IDs.
     *
     * NOTE: The control ID is only set for Controls based on `sap.m.InputBase`. The Control must be bound to
     * a Model so the Message could be propagated to this Control. The propagation happens only if the Control
     * is created and visible on the screen. The ID is not set in all other cases and cannot be set manually.
     *
     * @returns aControlIds
     */
    getControlIds(): any[];
    /**
     * Set the date of the message
     *
     * @returns The message date in number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. As returned
     * by Date.now().
     */
    getDate(): int;
    /**
     * Returns the message description
     *
     * @returns description
     */
    getDescription(): string;
    /**
     * Returns the message description URL which should be used to download the description content
     *
     * @returns The URL pointing to the description long text
     */
    getDescriptionUrl(): string;
    /**
     * Returns the Message Id
     *
     * @returns id
     */
    getId(): string;
    /**
     * Returns message text
     *
     * @returns message
     */
    getMessage(): string;
    /**
     * Returns the message processor
     *
     * @returns processor
     */
    getMessageProcessor(): MessageProcessor;
    /**
     * Returns the if Message is persistent
     *
     * @returns bPersistent
     */
    getPersistent(): boolean;
    /**
     * @deprecated (since 1.79.0) - As a message may have multiple targets, use {@link #getTargets} instead
     *
     * Returns the message target or the first target if the message has multiple targets.
     *
     * @returns The message target
     */
    getTarget(): string;
    /**
     * @SINCE 1.79
     *
     * Returns the targets of this message.
     *
     * @returns The message targets; empty array if the message has no targets
     */
    getTargets(): string[];
    /**
     * Returns the if Message set as technical message
     *
     * @returns true if message is technical or false if not
     */
    getTechnical(): boolean;
    /**
     * Returns the technical details of the message
     *
     * @returns The technical details
     */
    getTechnicalDetails(): object;
    /**
     * Returns the message type
     *
     * @returns type
     */
    getType(): MessageType | keyof typeof MessageType;
    /**
     * Sets the additionaltext for the message or merge different additionaltext strings
     */
    setAdditionalText(
      /**
       * The additionaltext.
       */
      sAdditionalText: string
    ): void;
    /**
     * Set message code
     */
    setCode(
      /**
       * The Message code
       */
      sCode: string
    ): void;
    /**
     * Set the date of the message, this will automatically be set on message creation
     */
    setDate(
      /**
       * The message date in number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. As returned by
       * Date.now().
       */
      iDate: int
    ): void;
    /**
     * Set message description
     */
    setDescription(
      /**
       * The Message description
       */
      sDescription: string
    ): void;
    /**
     * Set message description URL which should be used to download the description content
     */
    setDescriptionUrl(
      /**
       * The URL pointing to the description long text
       */
      sDescriptionUrl: string
    ): void;
    /**
     * Set message text
     */
    setMessage(
      /**
       * The Message as text
       */
      sMessage: string
    ): void;
    /**
     * Set message processor
     */
    setMessageProcessor(
      /**
       * The Message processor
       */
      oMessageProcessor: MessageProcessor
    ): void;
    /**
     * Set message persistent
     */
    setPersistent(
      /**
       * Set Message persistent: If persisten is set true the message lifecycle controlled by Application
       */
      bPersistent: boolean
    ): void;
    /**
     * @deprecated (since 1.79.0) - As a message may have multiple targets, use {@link #setTargets} instead
     *
     * Sets the message target; in case the message has multiple targets, sets the first target of the message.
     * The syntax is MessageProcessor dependent. See the documentation of the respective MessageProcessor.
     */
    setTarget(
      /**
       * The message target
       */
      sTarget: string
    ): void;
    /**
     * @SINCE 1.79
     *
     * Sets the targets of this message.
     */
    setTargets(
      /**
       * The new targets of this message; use an empty array if the message shall have no targets
       */
      aNewTargets: string[]
    ): void;
    /**
     * Set message as technical message
     */
    setTechnical(
      /**
       * Set Message as technical message lifecycle controlled by Application
       */
      bTechnical: boolean
    ): void;
    /**
     * Set the technical details for the message
     */
    setTechnicalDetails(
      /**
       * The technical details of the message
       */
      oTechnicalDetails: object
    ): void;
    /**
     * Set message type
     */
    setType(
      /**
       * The Message type
       */
      sType: MessageType | keyof typeof MessageType
    ): void;
  }
}

declare module "sap/ui/core/message/MessageManager" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Message from "sap/ui/core/message/Message";

  import MessageModel from "sap/ui/model/message/MessageModel";

  import Metadata from "sap/ui/base/Metadata";

  import MessageProcessor from "sap/ui/core/message/MessageProcessor";

  import ManagedObject from "sap/ui/base/ManagedObject";

  export default class MessageManager extends EventProvider {
    /**
     * Constructor for a new MessageManager.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.message.MessageManager with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageManager>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.message.MessageManager.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Add messages to MessageManager
     */
    addMessages(
      /**
       * Array of sap.ui.core.message.Message or single sap.ui.core.message.Message
       */
      vMessages: Message | Message[]
    ): void;
    /**
     * @deprecated (since 1.32) - do not call `destroy()` on a `MessageManager`.
     *
     * Destroy MessageManager
     */
    destroy(): void;
    /**
     * Get the MessageModel
     *
     * @returns oMessageModel The Message Model
     */
    getMessageModel(): MessageModel;
    /**
     * Register MessageProcessor
     */
    registerMessageProcessor(
      /**
       * The MessageProcessor
       */
      oProcessor: MessageProcessor
    ): void;
    /**
     * When using the databinding type system, the validation/parsing of a new property value could fail. In
     * this case, a validationError/parseError event is fired. These events bubble up to the core. For registered
     * ManagedObjects, the MessageManager attaches to these events and creates a `sap.ui.core.message.Message`
     * (bHandleValidation=true) for each of these errors and cancels the event bubbling.
     */
    registerObject(
      /**
       * The sap.ui.base.ManagedObject
       */
      oObject: ManagedObject,
      /**
       * Handle validationError/parseError events for this object. If set to true, the MessageManager creates
       * a Message for each validation/parse error. The event bubbling is canceled in every case.
       */
      bHandleValidation: boolean
    ): void;
    /**
     * Remove all messages
     */
    removeAllMessages(): void;
    /**
     * Remove given Messages
     */
    removeMessages(
      /**
       * The message(s) to be removed.
       */
      vMessages: Message | Message[]
    ): void;
    /**
     * Deregister MessageProcessor
     */
    unregisterMessageProcessor(
      /**
       * The MessageProcessor
       */
      oProcessor: MessageProcessor
    ): void;
    /**
     * Unregister ManagedObject
     */
    unregisterObject(
      /**
       * The sap.ui.base.ManagedObject
       */
      oObject: ManagedObject
    ): void;
  }
}

declare module "sap/ui/core/message/MessageParser" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  import MessageProcessor from "sap/ui/core/message/MessageProcessor";

  /**
   * This is an abstract base class for MessageParser objects.
   */
  export default class MessageParser extends BaseObject {
    /**
     * Abstract MessageParser class to be inherited in back-end specific implementations.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.message.MessageParser with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageParser>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.message.MessageParser.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the registered processor on which the events for message handling can be fired
     *
     * @returns The currently set MessageProcessor or `null` if none is set
     */
    getProcessor(): MessageProcessor | null;
    /**
     * Abstract parse method must be implemented in the inheriting class.
     */
    parse(
      /**
       * The response from the server containing body and headers
       */
      oResponse: object,
      /**
       * The original request that lead to this response
       */
      oRequest: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is used by the model to register itself as MessageProcessor for this parser
     *
     * @returns Instance reference for method chaining
     */
    setProcessor(
      /**
       * The MessageProcessor that can be used to fire events
       */
      oProcessor: MessageProcessor
    ): this;
  }
}

declare module "sap/ui/core/message/MessageProcessor" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Message from "sap/ui/core/message/Message";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This is an abstract base class for MessageProcessor objects.
   */
  export default class MessageProcessor extends EventProvider {
    /**
     * Constructor for a new MessageProcessor
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.message.MessageProcessor with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageProcessor>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.message.MessageProcessor.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:messageChange messageChange} event of this `sap.ui.core.message.MessageProcessor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.message.MessageProcessor` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMessageChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `MessageProcessor` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:messageChange messageChange} event of this `sap.ui.core.message.MessageProcessor`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.message.MessageProcessor` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMessageChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `MessageProcessor` itself
       */
      oListener?: object
    ): this;
    /**
     * Implement in inheriting classes
     */
    checkMessages(): void;
    /**
     * Destroys the MessageProcessor Instance
     */
    destroy(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:messageChange messageChange} event of this
     * `sap.ui.core.message.MessageProcessor`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMessageChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:messageChange messageChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMessageChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters: {
        /**
         * Messages already existing before the `messageChange` event was fired.
         */
        oldMessages: Message;
        /**
         * New messages added by the trigger of the `messageChange` event.
         */
        newMessages: Message;
      }
    ): this;
    /**
     * Returns the ID of the MessageProcessor instance
     *
     * @returns sId The MessageProcessor ID
     */
    getId(): string;
    /**
     * Implement in inheriting classes
     */
    setMessages(
      /**
       * map of messages: {'target': [sap.ui.core.message.Message],...}
       */
      mMessages: Record<string, Message[]>
    ): void;
  }
}

declare module "sap/ui/core/mvc/Controller" {
  import EventProvider from "sap/ui/base/EventProvider";

  import UI5Element from "sap/ui/core/Element";

  import Metadata from "sap/ui/base/Metadata";

  import Component from "sap/ui/core/Component";

  import View from "sap/ui/core/mvc/View";

  import Control from "sap/ui/core/Control";

  /**
   * A generic controller implementation for the UI5 Model-View-Controller concept.
   *
   * Can be used as a base class for typed controllers.
   *
   * **Typed Controller Scenario**:
   * 	 - use {@link sap.ui.core.mvc.Controller.extend Controller.extend} to define the controller class
   * 	 - use {@link sap.ui.core.mvc.Controller.create Controller.create} to create an instance
   */
  export default class Controller extends EventProvider {
    /**
     * Instantiates a (MVC-style) controller.
     */
    constructor(
      /**
       * The name of the controller to instantiate. If a controller is defined as real sub-class, the "arguments"
       * of the sub-class constructor should be given instead.
       */
      sName: string | object[]
    );

    /**
     * @SINCE 1.56.0
     *
     * Creates an instance of controller class.
     *
     * @returns the Promise resolves with a new instance of the controller
     */
    static create(
      /**
       * A map containing the controller configuration options.
       */
      mOptions: {
        /**
         * The controller name that corresponds to a JS module that can be loaded via the module system (mOptions.name
         * + suffix ".controller.js")
         */
        name: string;
      }
    ): Promise<any>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.Controller with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Controller>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.Controller.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.34.0
     *
     * Registers a callback module, which provides code enhancements for the lifecycle and event handler functions
     * of a specific controller. The code enhancements are returned either in sync or async mode.
     *
     * The extension provider module provides the `getControllerExtensions` function which returns either directly
     * an array of objects or a Promise that returns an array of objects when it resolves. These objects are
     * object literals defining the methods and properties of the controller in a similar way as for {@link
     * sap.ui.core.mvc.Controller Controller} subclasses.
     *
     * **Example for a callback module definition (sync):**
     * ```javascript
     *
     * sap.ui.define("my/custom/sync/ExtensionProvider", [], function() {
     *   var ExtensionProvider = function() {};
     *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
     *     if (!bAsync && sControllerName == "my.own.Controller") {
     *       // IMPORTANT: only return extensions for a specific controller
     *       return [{
     *         onInit: function() {
     *           // Do something here...
     *         },
     *         onAfterRendering: function() {
     *           // Do something here...
     *         },
     *         onButtonClick: function(oEvent) {
     *           // Handle the button click event
     *         }
     *       }
     *     }];
     *   };
     *   return ExtensionProvider;
     * });
     * ```
     *
     *
     * **Example for a callback module definition (async):**
     * ```javascript
     *
     * sap.ui.define("my/custom/async/ExtensionProvider", [], function() {
     *   var ExtensionProvider = function() {};
     *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
     *     if (bAsync && sControllerName == "my.own.Controller") {
     *       // IMPORTANT:
     *       // only return a Promise for a specific controller since it
     *       // requires the View/Controller and its parents to run in async
     *       // mode!
     *       return new Promise(function(fnResolve, fnReject) {
     *         fnResolve([{
     *           onInit: function() {
     *             // Do something here...
     *           },
     *           onAfterRendering: function() {
     *             // Do something here...
     *           },
     *           onButtonClick: function(oEvent) {
     *             // Handle the button click event
     *           }
     *         }]);
     *       }
     *     };
     *   };
     *   return ExtensionProvider;
     * });
     * ```
     *
     *
     * The lifecycle functions `onInit`, `onExit`, `onBeforeRendering` and `onAfterRendering` are added before
     * or after the lifecycle functions of the original controller. The event handler functions, such as `onButtonClick`,
     * are replacing the original controller's function.
     *
     * When using an async extension provider, you need to ensure that the view is loaded in async mode.
     *
     * In both cases, return `undefined` if no controller extension shall be applied.
     */
    static registerExtensionProvider(
      /**
       * the module name of the extension provider
       *
       * See {@link sap.ui.core.mvc.Controller} for an overview of the available functions for controllers.
       */
      sExtensionProvider: string
    ): void;
    /**
     * Returns an Element of the connected view with the given local ID.
     *
     * Views automatically prepend their own ID as a prefix to created Elements to make the IDs unique even
     * in the case of multiple view instances. This method helps to find an element by its local ID only.
     *
     * If no view is connected or if the view doesn't contain an element with the given local ID, `undefined`
     * is returned.
     *
     * @returns Element by its (view local) ID
     */
    byId(
      /**
       * View-local ID
       */
      sId: string
    ): UI5Element | undefined;
    /**
     * Converts a view local ID to a globally unique one by prepending the view ID.
     *
     * If no view is connected, `undefined` is returned.
     *
     * @returns Prefixed ID
     */
    createId(
      /**
       * View-local ID
       */
      sId: string
    ): string | undefined;
    /**
     * @SINCE 1.23.0
     *
     * Gets the component of the controller's view
     *
     * If there is no Component connected to the view or the view is not connected to the controller, `undefined`
     * is returned.
     *
     * @returns Component instance
     */
    getOwnerComponent(): Component | undefined;
    /**
     * Returns the view associated with this controller or `undefined`.
     *
     * @returns View connected to this controller.
     */
    getView(): View | undefined;
    /**
     * @SINCE 1.93
     *
     * Loads a Fragment by {@link sap.ui.core.Fragment.load}.
     *
     * The fragment content will be added to the `dependents` aggregation of the view by default. This behavior
     * can be suppressed by setting `mOptions.addToDependents` to false.
     *
     * The controller is passed to the Fragment by default, so the (event handler) methods referenced in the
     * Fragment will be called on this Controller.
     *
     * If the controller has an owner component, it is passed to the fragment content. By default the fragment
     * content will be prefixed with the view ID to avoid duplicate ID issues. The prefixing can be switched
     * off with the `autoPrefixId` option.
     *
     * When `autoPrefixId` is enabled, the fragment content can be accessed by calling {@link sap.ui.core.mvc.Controller.byId}.
     *
     * **Destroy behavior**: Different scenarios concerning the destruction of the fragment's content exist,
     * of which some must be addressed by the caller, while others are handled automatically.
     * 	 - The controller instance is destroyed before the fragment content creation has finished: In this case,
     * 			the controller instance takes care of asynchronously destroying the fragment content
     * 	 - The fragment content is aggregated within a control (e.g. `dependents` aggregation by default): In
     * 			this case, the content will be destroyed during the regular destroy lifecycle.
     * 	 - The fragment content is not aggregated within a control: In this case, ***it must be destroyed manually***
     * 			in the exit hook of the controller.
     *
     * @returns A Promise that resolves with the fragment content
     */
    loadFragment(
      /**
       * Options regarding fragment loading
       */
      mOptions: {
        /**
         * The Fragment name, which must correspond to a Fragment which can be loaded via the module system (fragmentName
         * + suffix ".fragment.[typeextension]") and which contains the Fragment definition.
         */
        name: string;
        /**
         * Whether the fragment content should be added to the `dependents` aggregation of the view
         */
        addToDependents?: boolean;
        /**
         * Whether the IDs of the fragment content will be prefixed by the view ID
         */
        autoPrefixId?: boolean;
        /**
         * the ID of the Fragment
         */
        id?: string;
        /**
         * the Fragment type, e.g. "XML", "JS", or "HTML" (see above). Default is "XML"
         */
        type?: string;
      }
    ): Promise<Control | Control[]>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can
     * be used to apply additional changes to the DOM after the Renderer has finished. (Even though this method
     * is declared as "abstract", it does not need to be defined in controllers, if the method does not exist,
     * it will simply not be called.)
     * See:
     * 	sap.ui.core.Control.prototype.onAfterRendering
     */
    onAfterRendering(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called every time the View is rendered, before the Renderer is called and the HTML is
     * placed in the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering. (Even though this
     * method is declared as "abstract", it does not need to be defined in controllers, if the method does not
     * exist, it will simply not be called.)
     * See:
     * 	sap.ui.core.Control.prototype.onBeforeRendering
     */
    onBeforeRendering(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called upon desctuction of the View. The controller should perform its internal destruction
     * in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
     * hooks. (Even though this method is declared as "abstract", it does not need to be defined in controllers,
     * if the method does not exist, it will simply not be called.)
     */
    onExit(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is called upon initialization of the View. The controller can perform its internal setup
     * in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
     * hooks. (Even though this method is declared as "abstract", it does not need to be defined in controllers,
     * if the method does not exist, it will simply not be called.)
     *
     * **Note:** In component-based apps `this.getOwnerComponent().getModel()` should be used inside `onInit()`
     * to get a model assigned to the component instead of using `this.getView().getModel()`. The latter call
     * might return `undefined` because the view might not have been attached to a parent yet (i.e. the component),
     * and thus the view can't inherit a model from that parent. You could also attach to the `modelContextChange`
     * event. The event is fired when either the context or the model changes for the control.
     */
    onInit(): void;
  }
}

declare module "sap/ui/core/mvc/ControllerExtension" {
  import BaseObject from "sap/ui/base/Object";

  import UI5Element from "sap/ui/core/Element";

  import Metadata from "sap/ui/base/Metadata";

  import View from "sap/ui/core/mvc/View";

  /**
   * Base class for controller extensions.
   *
   * All controller extensions must {@link #.extend extend} from this base class. It provides access to the
   * {@link #getView view} of the extended controller as well as to the view's {@link #byId controls}.
   *
   * For a more detailed description how to develop controller extensions, see section {@link topic:21515f09c0324218bb705b27407f5d61
   * Using Controller Extension} in the documentation.
   */
  export default class ControllerExtension extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.mvc.ControllerExtension with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ControllerExtension>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.ControllerExtension.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Override the ControllerExtension class with the given custom extension definition.
     *
     * Only public methods that are not final could be overridden. The lifecycle methods `onInit`, `onExit`,
     * `onBeforeRendering` and `onAfterRendering` are added before or after the lifecycle functions of the original
     * extension.
     *
     * Example for `oExtension`:
     * ```javascript
     *
     * {
     *     onInit: function() {
     *         ...
     *     },
     *     ...
     * }
     * ```
     *
     *
     * **Note:** This static method is automatically propagated to subclasses of `ControllerExtension`.
     *
     * @returns A controller extension class
     */
    static override(
      /**
       * The custom extension definition
       */
      oExtension: object
    ): Function;
    /**
     * Returns an Element of the connected view with the given local ID.
     *
     * Views automatically prepend their own ID as a prefix to created Elements to make the IDs unique even
     * in the case of multiple view instances. For a controller extension, the namespace of the control ID gets
     * also prefixed with the namespace of the extension. This method helps to find an element by its local
     * ID only.
     *
     * If no view is connected or if the view doesn't contain an element with the given local ID, `undefined`
     * is returned.
     *
     * @returns Element by its (view local) ID
     */
    byId(
      /**
       * View-local ID
       */
      sId: string
    ): UI5Element;
    /**
     * Returns the View from the corresponding controller.
     *
     * @returns oView The corresponding view instance
     */
    getView(): View;
  }
}

declare module "sap/ui/core/mvc/HTMLView" {
  import { default as View, $ViewSettings } from "sap/ui/core/mvc/View";

  import Controller from "sap/ui/core/mvc/Controller";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.9.2
   * @deprecated (since 1.108) - as there are no more known usages of `HTMLViews`, and as the use of HTML
   * as syntax does not bring any advantages over XML. The HTML necessary for the `HTMLView` is not re-used
   * for the HTML of the controls, but is fully replaced.
   *
   * Consider using {@link sap.ui.core.mvx.XMLView XMLViews} or "typed views" (view classes written in JavaScript)
   * instead. For more information, see the documentation on {@link topic:91f27e3e6f4d1014b6dd926db0e91070
   * View types}.
   *
   * A view defined/constructed by declarative HTML.
   */
  export default class HTMLView extends View {
    /**
     * Constructor for a new `HTMLView`.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.HTMLView.create HTMLView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.HTML HTML}. The factory simplifies asynchronous loading of a view
     * and future features might be added to the factory only.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HTMLViewSettings
    );
    /**
     * Constructor for a new `HTMLView`.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.HTMLView.create HTMLView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.HTML HTML}. The factory simplifies asynchronous loading of a view
     * and future features might be added to the factory only.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HTMLViewSettings
    );
    /**
     * @SINCE 1.30
     *
     * Flag for feature detection of asynchronous loading/rendering
     */
    static asyncSupport: boolean;

    /**
     * @SINCE 1.56.0
     *
     * Creates an instance of a declarative HTML view.
     *
     * @returns A promise which resolves with the created `HTMLView` instance
     */
    static create(
      /**
       * An object containing the view configuration options.
       */
      oOptions: {
        /**
         * Specifies an ID for the view instance. If no ID is given, an ID will be generated.
         */
        id?: string;
        /**
         * Name of the view resource in module name notation (without suffix)
         */
        viewName?: string;
        /**
         * The view definition.
         */
        definition?: string;
        /**
         * Controller instance to be used for this view. The given controller instance overrides the controller
         * defined in the view definition. Sharing a controller instance between multiple views is not supported.
         */
        controller?: Controller;
      }
    ): Promise<HTMLView>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.HTMLView with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HTMLView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.HTMLView.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $HTMLViewSettings extends $ViewSettings {}
}

declare module "sap/ui/core/mvc/JSONView" {
  import { default as View, $ViewSettings } from "sap/ui/core/mvc/View";

  import Controller from "sap/ui/core/mvc/Controller";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * A View defined using JSON.
   */
  export default class JSONView extends View {
    /**
     * Constructor for a new mvc/JSONView.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.JSONView.create JSONView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.JSON JSON}. The factory simplifies asynchronous loading of a view
     * and future features might be added to the factory only.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $JSONViewSettings
    );
    /**
     * Constructor for a new mvc/JSONView.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.JSONView.create JSONView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.JSON JSON}. The factory simplifies asynchronous loading of a view
     * and future features might be added to the factory only.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $JSONViewSettings
    );
    /**
     * @SINCE 1.30
     *
     * Flag for feature detection of asynchronous loading/rendering.
     */
    static asyncSupport: boolean;

    /**
     * @SINCE 1.56.0
     *
     * Creates a JSON view of the given configuration.
     *
     * @returns A promise which resolves with the created `JSONView` instance.
     */
    static create(
      /**
       * An object containing the view configuration options.
       */
      oOptions: {
        /**
         * Specifies an ID for the view instance. If no ID is given, an ID will be generated.
         */
        id?: string;
        /**
         * The view name (in dot-notation) that corresponds to a JSON resource that can be loaded via the module
         * system (viewName + suffix ".view.json").
         */
        viewName?: string;
        /**
         * view definition as a JSON string or an object literal
         */
        definition?: string | object;
        /**
         * Controller instance to be used for this view. The given controller instance overrides the controller
         * defined in the view definition. Sharing a controller instance between multiple views is not supported.
         */
        controller?: Controller;
      }
    ): Promise<JSONView>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.JSONView with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, JSONView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.JSONView.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $JSONViewSettings extends $ViewSettings {}
}

declare module "sap/ui/core/mvc/JSView" {
  import { default as View, $ViewSettings } from "sap/ui/core/mvc/View";

  import Controller from "sap/ui/core/mvc/Controller";

  import Control from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.90) - Instead use {@link topic:e6bb33d076dc4f23be50c082c271b9f0 Typed Views} by
   * defining the view class with {@link sap.ui.core.mvc.View.extend View.extend} and creating the view instances
   * with {@link sap.ui.core.mvc.View.create View.create}.
   *
   * A View defined/constructed by JavaScript code.
   */
  export default class JSView extends View {
    /**
     * Constructor for a new `JSView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $JSViewSettings
    );
    /**
     * Constructor for a new `JSView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $JSViewSettings
    );
    /**
     * @SINCE 1.30
     *
     * Flag for feature detection of asynchronous loading/rendering.
     */
    static asyncSupport: boolean;

    /**
     * @SINCE 1.56.0
     * @deprecated (since 1.90) - Use {@link sap.ui.core.mvc.View.create View.create} to create view instances
     *
     * Creates an instance of the view with the given name (and id).
     *
     * @returns A promise that resolves with the view instance
     */
    static create(
      /**
       * An object containing the view configuration options.
       */
      oOptions: {
        /**
         * Specifies an ID for the view instance. If no ID is given, an ID will be generated.
         */
        id?: string;
        /**
         * Name of the view definition. The view must still be defined using {@link sap.ui.jsview}.
         */
        viewName?: string;
        /**
         * Controller instance to be used for this view. The given controller instance overrides the controller
         * defined in the view definition. Sharing a controller instance between multiple views is not supported.
         */
        controller?: Controller;
      }
    ): Promise<JSView>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.JSView with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, JSView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.JSView.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * A method to be implemented by `JSView`s, returning the view UI.
     *
     * While for declarative view types like `XMLView` or `JSONView` the user interface definition is declared
     * in a separate file, `JSView`s programmatically constructs the UI. This happens in the `createContent`
     * method which every `JSView` needs to implement. The view implementation can construct the complete UI
     * in this method, or only return the root control and create the remainder of the UI lazily later on.
     *
     * @returns A control or array of controls representing the view user interface
     */
    createContent(): Control | Control[];
  }

  export interface $JSViewSettings extends $ViewSettings {}
}

declare module "sap/ui/core/mvc/OverrideExecution" {
  /**
   * Execution option for overrides defined by a `ControllerExtension`.
   * See:
   * 	sap.ui.core.mvc.ControllerExtension
   */
  enum OverrideExecution {
    /**
     * The override function gets executed after the original function
     */
    After = "After",
    /**
     * The override function gets executed before the original function
     */
    Before = "Before",
    /**
     * The override function is called instead of the original function
     *
     * This is the default option for ControllerExtension overrides
     */
    Instead = "Instead",
  }
  export default OverrideExecution;
}

declare module "sap/ui/core/mvc/TemplateView" {
  import { default as View, $ViewSettings } from "sap/ui/core/mvc/View";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @deprecated (since 1.56.0) - use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b
   * XML Templating} instead.
   *
   * A view defined in a template.
   */
  export default class TemplateView extends View {
    /**
     * Constructor for a new mvc/TemplateView.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.templateview} or {@link sap.ui.core.mvc.View.create View.create} with type {@link sap.ui.core.mvc.ViewType.Template
     * Template}.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TemplateViewSettings
    );
    /**
     * Constructor for a new mvc/TemplateView.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.templateview} or {@link sap.ui.core.mvc.View.create View.create} with type {@link sap.ui.core.mvc.ViewType.Template
     * Template}.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TemplateViewSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.mvc.TemplateView with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TemplateView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.TemplateView.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $TemplateViewSettings extends $ViewSettings {}
}

declare module "sap/ui/core/mvc/View" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import UI5Element from "sap/ui/core/Element";

  import ViewType from "sap/ui/core/mvc/ViewType";

  import Controller from "sap/ui/core/mvc/Controller";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A base class for Views.
   *
   * Introduces the relationship to a Controller, some basic visual appearance settings like width and height,
   * and provides lifecycle events.
   *
   * Views form an ID scope for the elements and controls in their content. They can prefix the IDs of elements
   * either automatically (e.g. XMLView) or programmatically (using {@link #createId}). With method {@link
   * #byId}, elements or controls can be found with their view-local ID. Also see {@link topic:91f28be26f4d1014b6dd926db0e91070
   * "Support for Unique IDs"} in the documentation.
   *
   * View Definition: A view can be defined by {@link sap.ui.core.mvc.View.extend extending} this class and
   * implementing the {@link #createContent} method. The method must return one or many root controls that
   * will be rendered as content of the view.
   *
   * Views that are defined that way are referred to as **typed views**, as each view definition is represented
   * by its own class (type). See {@link topic:e6bb33d076dc4f23be50c082c271b9f0 Typed Views} for further information.
   *
   * **Example:** Defining a typed view (module 'myapp/views/MainView.js')
   * ```javascript
   *
   *   // view definition
   *   sap.ui.define([
   *     "sap/ui/core/mvc/View",
   *     "sap/m/Panel"
   *   ], function(View, Panel) {
   *
   *     return View.extend("myapp.views.MainView", {
   *
   *       // define, which controller to use
   *       getControllerName: function() {
   *         return "myapp.controller.Main";
   *       },
   *
   *       // whether the ID of content controls should be prefixed automatically with the view's ID
   *       getAutoPrefixId: function() {
   *         return true; // default is false
   *       }
   *
   *       // create view content and return the root control(s)
   *       // or a Promise resolving with the control(s).
   *       createContent: function() {
   *         return new Promise(function(res, rej) {
   *             res(new Panel({...}));
   *         }).catch(function(err) {
   *             rej(err);
   *         });
   *       }
   *     });
   *   });
   * ```
   *
   *
   * View Instantiation: The preferred way of instantiating a typed view is via the generic factory {@link
   * sap.ui.core.mvc.View.create View.create}.
   *
   * When the `viewName` starts with prefix `"module:"`, the remainder of the name is assumed to be the name
   * of a module that exports a typed view (a subclass of `View`). The module name must use the same syntax
   * as for `sap.ui.define/sap.ui.require` (slash-separated name without '.js' suffix).
   *
   * **Example:** Instantiating a typed view with `View.create`
   * ```javascript
   *
   *   View.create({
   *     viewName: "module:myapp/views/MainView"
   *   }).then(oView) {
   *     oView.placeAt("content");
   *   });
   * ```
   *
   *
   * A typed view can also be instantiated by calling its constructor without any arguments:
   * ```javascript
   *
   *   sap.ui.require(["myapp/views/MainView"], function(MainView) {
   *     new MainView().placeAt("content");
   *   });
   * ```
   *
   *
   * Other Methods: Besides `createContent`, there are two other methods that a view can implement: Method
   * {@link #getControllerName getControllerName} defines the name of the controller that should be instantiated
   * and used for the view. The name must be in class name notation (dot notation), without the `".controller"`
   * suffix. The suffix will be added by the framework when loading the module containing the controller.
   *
   * {@link #getAutoPrefixId getAutoPrefixId} defines whether the IDs of controls created during the execution
   * of `createContent` will be prefixed with the ID of the view automatically. The default implementation
   * of this method returns `false`.
   */
  export default class View extends Control {
    /**
     * Constructor for a new `View`.
     *
     * As `View` is an abstract base class for views, applications should not call the constructor, but rather
     * use one of the view factories instead, e.g. {@link #.create View.create}, to create an instance of a
     * concrete subclass (e.g. `XMLView`).
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettings
    );
    /**
     * Constructor for a new `View`.
     *
     * As `View` is an abstract base class for views, applications should not call the constructor, but rather
     * use one of the view factories instead, e.g. {@link #.create View.create}, to create an instance of a
     * concrete subclass (e.g. `XMLView`).
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettings
    );

    /**
     * @SINCE 1.56.0
     *
     * Creates a view of the given type, name and with the given ID.
     *
     * If the option `viewName` is given, the corresponding view module is loaded if needed.
     *
     * When the `viewName` starts with prefix `"module:"`, the remainder of the name is assumed to be the name
     * of a module that exports a typed view (subclass of `View`). The module name must use the same syntax
     * as for `sap.ui.define/sap.ui.require` (slash-separated name).
     *
     * @returns A Promise which resolves with the created View instance
     */
    static create(
      /**
       * Options for the view instantiation. Can contain any settings that are documented for the {@link sap.ui.core.mvc.View};
       * specialized view types could bring in additional settings.
       */
      oOptions: {
        /**
         * Specifies an ID for the View instance. If no ID is given, one will be generated
         */
        id?: string;
        /**
         * Name of the view resource in module name notation (dot-separated, without suffix); either `viewName`
         * or `definition` must be given. A `viewName` can be given in the form `module:my/views/Main` to load a
         * typed view.
         */
        viewName?: string;
        /**
         * The view definition. Only supported for XML and HTML views. See also {@link sap.ui.core.mvc.XMLView.create}
         * and {@link sap.ui.core.mvc.HTMLView.create} (deprecated) for more information.
         */
        definition?: any;
        /**
         * Specifies what kind of view will be instantiated. All valid view types are listed in the enumeration
         * {@link sap.ui.core.mvc.ViewType}.
         */
        type?: ViewType | keyof typeof ViewType;
        /**
         * A general purpose data bag, which is under full control of the caller. It can be retrieved with the {@link
         * sap.ui.core.mvc.View#getViewData} method during the whole lifecycle of the view and controller. In contrast
         * to data propagated from the parent control (e.g. models, binding contexts), `viewData` can already be
         * accessed at construction time, e.g. in the `onInit` hook of the controller. Propagated data can only
         * be accessed after the view has been added to the control hierarchy.
         */
        viewData?: any;
        /**
         * Can hold a map from the specified preprocessor type (e.g. "xml") to an array of preprocessor configurations;
         * each configuration consists of a `preprocessor` property (optional when registered as on-demand preprocessor)
         * and may contain further preprocessor-specific settings. The preprocessor can be either a module name
         * as string implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function according to {@link
         * sap.ui.core.mvc.View.Preprocessor.process}. Do not set properties starting with underscore like `_sProperty`
         * property, these are reserved for internal purposes. When several preprocessors are provided for one hook,
         * it has to be made sure that they do not conflict when being processed serially.
         *
         * **Note**: These preprocessors are only available to this instance. For global or on-demand availability
         * use {@link sap.ui.core.mvc.XMLView.registerPreprocessor}. **Note**: Please note that preprocessors in
         * general are currently only available to XMLViews
         */
        preprocessors?: object;
        /**
         * Controller instance to be used for this view. The given controller instance overrides the controller
         * defined in the view definition. Sharing a controller instance between multiple views is not supported.
         */
        controller?: Controller;
      }
    ): Promise<View>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.View with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, View>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.View.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.30
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Register a preprocessor for all views of a specific type.
     *
     * The preprocessor can be registered for several stages of view initialization, which are dependent on
     * the view type, e.g. "raw", "xml" or already initialized "controls". If there is a preprocessor passed
     * to or activated at the view instance already, that one is used. When several preprocessors are registered
     * for one hook, it has to be made sure that they do not conflict when being processed serially.
     *
     * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor}
     * or a function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
     *
     * **Note**: Preprocessors only work in async views and will be ignored when the view is instantiated in
     * sync mode by default, as this could have unexpected side effects. You may override this behaviour by
     * setting the `bSyncSupport` flag to `true`.
     */
    static registerPreprocessor(
      /**
       * the type of content to be processed
       */
      sType: string,
      /**
       * module path of the preprocessor implementation or a preprocessor function
       */
      vPreprocessor: string | Function,
      /**
       * type of the calling view, e.g. `XML`
       */
      sViewType: string,
      /**
       * declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
       * also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
       * break the view initialization and lead to unexpected results.
       */
      bSyncSupport: boolean,
      /**
       * on-demand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting
       * `preprocessors : { xml }`, for example. This should be false except for very special cases. There can
       * only be one on-demand preprocessor per content type.
       */
      bOnDemand?: boolean,
      /**
       * optional configuration for preprocessor
       */
      mSettings?: object
    ): void;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterInit afterInit} event of this `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterInit(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterInit afterInit} event of this `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterInit(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeExit beforeExit} event of this `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeExit(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeExit beforeExit} event of this `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeExit(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRendering beforeRendering} event of this
     * `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRendering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRendering beforeRendering} event of this
     * `sap.ui.core.mvc.View`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.mvc.View` itself.
     *
     * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRendering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.mvc.View` itself
       */
      oListener?: object
    ): this;
    /**
     * Returns an element by its ID in the context of this view.
     *
     * This method expects a view-local ID of an element (the same as e.g. defined in the *.view.xml of an XMLView).
     * For a search with a global ID (the value returned by `oElement.getId()`) you should rather use {@link
     * sap.ui.core.Core#byId sap.ui.getCore().byId()}.
     *
     * @returns Element by its ID or `undefined`
     */
    byId(
      /**
       * View local ID of the element
       */
      sId: string
    ): UI5Element | undefined;
    /**
     * Creates a clone of this view.
     *
     * Overrides the clone method to avoid conflicts between generic cloning of the content aggregation and
     * content creation as defined by the UI5 Model View Controller lifecycle.
     *
     * For more details see the {@link topic:a575619e25c2487f904bae71764e2350 View Cloning} section in the documentation.
     *
     * @returns Reference to the newly created clone
     */
    clone(
      /**
       * Suffix to be appended to the cloned element IDs
       */
      sIdSuffix?: string,
      /**
       * Array of local IDs within the cloned hierarchy (internally used)
       */
      aLocalIds?: string[]
    ): this;
    /**
     * A method to be implemented by typed `View`s, returning the view UI.
     *
     * While for declarative view types like `XMLView` or `JSONView` the user interface definition is declared
     * in a separate file, `View`s programmatically constructs the UI. This happens in the `createContent` method,
     * which every `View` needs to implement. The view implementation can construct the complete UI in this
     * method, or only return the root control and create the remainder of the UI lazily later on.
     *
     * @returns A control or array of controls representing the view user interface or a Promise resolving with
     * a control or an array of controls.
     */
    createContent(): Control | Control[] | Promise<Control | Control[]>;
    /**
     * Convert the given view local element ID to a globally unique ID by prefixing it with the view ID.
     *
     * @returns prefixed id
     */
    createId(
      /**
       * View local ID of the element
       */
      sId: string
    ): string;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterInit afterInit} event of this `sap.ui.core.mvc.View`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterInit(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.mvc.View`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterRendering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeExit beforeExit} event of this `sap.ui.core.mvc.View`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeExit(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeRendering beforeRendering} event of
     * this `sap.ui.core.mvc.View`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeRendering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterInit afterInit} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterInit(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterRendering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeExit beforeExit} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeExit(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeRendering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.88
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * A method to be implemented by typed views, returning the flag whether to prefix the IDs of controls automatically
     * or not, if the controls are created inside the {@link sap.ui.core.mvc.View#createContent} function. By
     * default this feature is not activated.
     *
     * You can overwrite this function and return `true` to activate the automatic prefixing.
     *
     * **Note**: Auto-prefixing is only available for synchronous content creation. For asynchronous content
     * creation use {@link #createId} instead, to prefix the IDs programmatically.
     *
     * @returns Whether the control IDs should be prefixed automatically
     */
    getAutoPrefixId(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Child Controls of the view
     */
    getContent(): Control[];
    /**
     * Returns the view's Controller instance or null for a controller-less View.
     *
     * @returns Controller of this view.
     */
    getController(): Controller;
    /**
     * An (optional) method to be implemented by Views. When no controller instance is given at View instantiation
     * time AND this method exists and returns the (package and class) name of a controller, the View tries
     * to load and instantiate the controller and to connect it to itself.
     *
     * @returns the name of the controller
     */
    getControllerName(): string;
    /**
     * Gets current value of property {@link #getDisplayBlock displayBlock}.
     *
     * Whether the CSS display should be set to "block". Set this to "true" if the default display "inline-block"
     * causes a vertical scrollbar with Views that are set to 100% height. Do not set this to "true" if you
     * want to display other content in the same HTML parent on either side of the View (setting to "true" may
     * push that other content to the next/previous line).
     *
     * Default value is `false`.
     *
     * @returns Value of property `displayBlock`
     */
    getDisplayBlock(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * @SINCE 1.39.0
     *
     * Returns the local ID of an element by removing the view ID prefix or `null` if the ID does not contain
     * a prefix.
     *
     * @returns ID without prefix or `null`
     */
    getLocalId(
      /**
       * Prefixed ID
       */
      sId: string
    ): string | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the info object which is also passed to the preprocessors
     * See:
     * 	sap.ui.core.mvc.View.Preprocessor.process
     *
     * @returns Info object for the view
     */
    getPreprocessorInfo(
      /**
       * Describes the view execution, true if sync
       */
      bSync: boolean
    ): object;
    /**
     * Returns user specific data object.
     *
     * @returns viewData
     */
    getViewData(): object;
    /**
     * Gets current value of property {@link #getViewName viewName}.
     *
     * Name of the View
     *
     * @returns Value of property `viewName`
     */
    getViewName(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks if any preprocessors are active for the specified type
     *
     * @returns `true` if a preprocessor is active
     */
    hasPreprocessor(
      /**
       * Type of the preprocessor, e.g. "raw", "xml" or "controls"
       */
      sType: string
    ): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.30
     * @deprecated (since 1.66) - Use {@link sap.ui.core.mvc.View.create View.create} instead
     *
     * Returns a Promise representing the state of the view initialization.
     *
     * For views that are loading asynchronously (by setting async=true) this Promise is created by view initialization.
     * Synchronously loading views get wrapped in an immediately resolving Promise.
     *
     * @returns resolves with the complete view instance, rejects with any thrown error
     */
    loaded(): Promise<any>;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control | null;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Executes preprocessors for a type of source
     *
     * @returns a promise resolving with the processed source or an error | the source when bSync=true
     */
    runPreprocessor(
      /**
       * the type of preprocessor, e.g. "raw", "xml" or "controls"
       */
      sType: string,
      /**
       * the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those
       */
      vSource: object | string | Element,
      /**
       * describes the view execution, true if sync
       */
      bSync?: boolean
    ): Promise<any> | object | string | Element;
    /**
     * Sets a new value for property {@link #getDisplayBlock displayBlock}.
     *
     * Whether the CSS display should be set to "block". Set this to "true" if the default display "inline-block"
     * causes a vertical scrollbar with Views that are set to 100% height. Do not set this to "true" if you
     * want to display other content in the same HTML parent on either side of the View (setting to "true" may
     * push that other content to the next/previous line).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayBlock(
      /**
       * New value for property `displayBlock`
       */
      bDisplayBlock?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getViewName viewName}.
     *
     * Name of the View
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setViewName(
      /**
       * New value for property `viewName`
       */
      sViewName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }
  /**
   * @SINCE 1.30
   *
   * Interface for Preprocessor implementations that can be hooked in the view life cycle.
   *
   * There are two possibilities to use the preprocessor. It can be either passed to the view via the mSettings.preprocessors
   * object where it is the executed only for this instance, or by the registerPreprocessor method of the
   * view type. Currently this is available only for XMLViews (as of version 1.30).
   * See:
   * 	sap.ui.view
   * 	sap.ui.core.mvc.View.registerPreprocessor (the method is available specialized for view types, so use
   * the following)
   * 	sap.ui.core.mvc.XMLView.registerPreprocessor
   */
  export interface Preprocessor {
    __implements__sap_ui_core_mvc_View_Preprocessor: boolean;

    /**
     * @SINCE 1.40
     *
     * Cache key provider method that can be implemented by a preprocessor.
     *
     * This method should be used to invalidate a cache on the currently preprocessed view. Therefore, a Promise
     * needs to be passed which resolves with the according cache key increment.
     *
     * **Note:** Caching is only available for XMLViews! Some parts of the feature are still experimental, For
     * further information see {@link sap.ui.core.mvc.XMLView.create XMLView.create}
     *
     * @returns String or Promise resolving with a string
     */
    getCacheKey(
      /**
       * identification information about the calling instance
       */
      oViewInfo: {
        /**
         * ID
         */
        id: string;
        /**
         * Name
         */
        name: string;
        /**
         * ID of the owning Component
         */
        componentId: string;
      }
    ): string | Promise<any>;
    /**
     * Processing method that must be implemented by a Preprocessor.
     *
     * @returns the processed resource or a promise which resolves with the processed resource or an error according
     * to the declared preprocessor sync capability
     */
    process(
      /**
       * the source to be processed
       */
      vSource: object,
      /**
       * identification information about the calling instance
       */
      oViewInfo: {
        /**
         * the id
         */
        id: string;
        /**
         * the name
         */
        name: string;
        /**
         * the id of the owning Component
         */
        componentId: string;
        /**
         * identifies the caller of this preprocessor; basis for log or exception messages
         */
        caller: string;
      },
      /**
       * settings object containing the settings provided with the preprocessor
       */
      mSettings?: object
    ): object | Promise<any>;
  }

  export interface $ViewSettings extends $ControlSettings {
    /**
     * The width
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The height
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Name of the View
     */
    viewName?: string | PropertyBindingInfo;

    /**
     * Whether the CSS display should be set to "block". Set this to "true" if the default display "inline-block"
     * causes a vertical scrollbar with Views that are set to 100% height. Do not set this to "true" if you
     * want to display other content in the same HTML parent on either side of the View (setting to "true" may
     * push that other content to the next/previous line).
     */
    displayBlock?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Child Controls of the view
     */
    content?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
     */
    afterInit?: (oEvent: Event) => void;

    /**
     * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
     */
    beforeExit?: (oEvent: Event) => void;

    /**
     * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
     */
    afterRendering?: (oEvent: Event) => void;

    /**
     * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
     */
    beforeRendering?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/mvc/ViewType" {
  /**
   * Specifies possible view types.
   *
   * **Note:** Typed views do not rely on a `ViewType`, it must be omitted in the view settings.
   *
   * See the {@link topic:91f27e3e6f4d1014b6dd926db0e91070 documentation} for more information on the different
   * view types.
   */
  enum ViewType {
    /**
     * @deprecated (since 1.108) - Consider using {@link sap.ui.core.mvx.XMLView XMLViews} or "typed views"
     * (view classes written in JavaScript) instead.
     *
     * HTML view
     */
    HTML = "HTML",
    /**
     * @deprecated (since 1.90)
     *
     * JS View
     */
    JS = "JS",
    /**
     * JSON View
     */
    JSON = "JSON",
    /**
     * @deprecated (since 1.56)
     *
     * Template View
     */
    Template = "Template",
    /**
     * XML view
     */
    XML = "XML",
  }
  export default ViewType;
}

declare module "sap/ui/core/mvc/XMLView" {
  import { default as View, $ViewSettings } from "sap/ui/core/mvc/View";

  import Controller from "sap/ui/core/mvc/Controller";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * A View defined using XML and, optionally, pure HTML markup.
   *
   * **Note:**
   *  Be aware that modifications of the content aggregation of this control are not supported due to technical
   * reasons. This includes calls to all content modifying methods like `addContent>` etc., but also the implicit
   * removal of controls contained by the content aggregation. For example the destruction of a Control via
   * the ` destroy` method. All functions can be called but may not work properly or lead to unexpected side
   * effects.
   *
   * **Note:**
   *  The XML view offers special handling for context binding and style classes. You can specify them via
   * the `binding` and `class` attributes on a control's XML node. Please be aware that these attributes are
   * not properties of the respective controls and thus are not supported by a control's constructor. For
   * more information, see {@link topic:91f05e8b6f4d1014b6dd926db0e91070 Context Binding (Element Binding)}
   * and {@link topic:b564935324f449209354c7e2f9903f22 Using CSS Style Sheets in XML Views}.
   *
   * **Note:**
   *  When the content aggregation of this control is bound, no HTML markup is allowed in the binding template
   * of the bound content aggregation. An error will be thrown when the above combination is detected.
   */
  export default class XMLView extends View {
    /**
     * Constructor for a new `XMLView`.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.XMLView.create XMLView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.XML XML}. The factory provides more features than the constructor
     * (e.g. caching and preprocessing) and simplifies asynchronous loading of a view. Future features might
     * only be available when using the factory.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * Initial settings for the new view
       */
      mSettings?: $XMLViewSettings
    );
    /**
     * Constructor for a new `XMLView`.
     *
     * **Note:** Application code shouldn't call the constructor directly, but rather use the factory {@link
     * sap.ui.core.mvc.XMLView.create XMLView.create} or {@link sap.ui.core.mvc.View.create View.create} with
     * type {@link sap.ui.core.mvc.ViewType.XML XML}. The factory provides more features than the constructor
     * (e.g. caching and preprocessing) and simplifies asynchronous loading of a view. Future features might
     * only be available when using the factory.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor
     * sap.ui.core.mvc.View} can be used.
     */
    constructor(
      /**
       * ID for the new view, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new view
       */
      mSettings?: $XMLViewSettings
    );
    /**
     * @SINCE 1.30
     *
     * Flag for feature detection of asynchronous loading/rendering
     */
    static asyncSupport: boolean;

    /**
     * @SINCE 1.56.0
     *
     * Instantiates an XMLView from the given configuration options.
     *
     * If a `viewName` is given, it must be a dot-separated name of an XML view resource (without the mandatory
     * suffix ".view.xml"). The resource will be loaded asynchronously via the module system (preload caches
     * might apply) and will be parsed as XML. Alternatively, an already loaded view `definition` can be provided,
     * either as XML string or as an already parsed XML document. Exactly one of `viewName` or `definition`
     * must be given, if none or both are given, an error will be reported.
     *
     * The `controller` property is optional and can hold a controller instance. When given, it overrides the
     * controller class defined in the view definition.
     *
     * **Note**: On root level, you can only define content for the default aggregation, e.g. without adding
     * the `<content>` tag. If you want to specify content for another aggregation of a view like `dependents`,
     * place it in a child control's `dependents` aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
     *
     * **Note**: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation
     * takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still
     * an experimental feature and may experience slight changes of the invalidation parameters or the cache
     * key format.
     *
     * @returns A Promise that resolves with the view instance or rejects with any thrown error.
     */
    static create(
      /**
       * An object containing the view configuration options.
       */
      oOptions: {
        /**
         * Specifies an ID for the View instance. If no ID is given, an ID will be generated.
         */
        id?: string;
        /**
         * Corresponds to an XML module that can be loaded via the module system (oOptions.viewName + suffix ".view.xml")
         */
        viewName?: string;
        /**
         * XML string or XML document that defines the view. Exactly one of `viewName` or `definition` must be given.
         */
        definition?: string | Document;
        /**
         * Controller instance to be used for this view. The given controller instance overrides the controller
         * defined in the view definition. Sharing one controller instance between multiple views is not possible.
         */
        controller?: Controller;
        /**
         * Cache configuration; caching gets active when this object is provided with vView.cache.keys array; keys
         * are used to store data in the cache and for invalidation of the cache.
         */
        cache?: {
          /**
           * Array with strings or Promises resolving with strings
           */
          keys?: Array<string | Promise<string>>;
        };
        /**
         * Preprocessors configuration, see {@link sap.ui.core.mvc.View} **Note**: These preprocessors are only
         * available to this instance. For global or on-demand availability use {@link sap.ui.core.mvc.XMLView.registerPreprocessor}.
         */
        preprocessors?: object;
      }
    ): Promise<XMLView>;
    /**
     * Creates a new subclass of class sap.ui.core.mvc.XMLView with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, XMLView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.mvc.XMLView.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.30
     *
     * Register a preprocessor for all views of a specific type.
     *
     * The preprocessor can be registered for several stages of view initialization, for xml views these are
     * either the plain "xml" or the already initialized "controls" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}.
     * For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the
     * view instance already, that one is used. When several preprocessors are registered for one hook, it has
     * to be made sure, that they do not conflict when being processed serially.
     *
     * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor}
     * or a function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
     *
     * **Note**: Preprocessors work only in async views and will be ignored when the view is instantiated in
     * sync mode by default, as this could have unexpected side effects. You may override this behaviour by
     * setting the bSyncSupport flag to true.
     */
    static registerPreprocessor(
      /**
       * the type of content to be processed
       */
      sType: string | PreprocessorType,
      /**
       * module path of the preprocessor implementation or a preprocessor function
       */
      vPreprocessor: string | Function,
      /**
       * Since 1.89, added for signature compatibility with {@link sap.ui.core.mvc.View#registerPreprocessor View#registerPreprocessor}.
       * Only supported value is "XML".
       */
      sViewType: string,
      /**
       * declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
       * also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
       * break the view initialization and lead to unexpected results.
       */
      bSyncSupport: boolean,
      /**
       * ondemand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting
       * `preprocessors : { xml }`, for example.
       */
      bOnDemand?: boolean,
      /**
       * optional configuration for preprocessor
       */
      mSettings?: object
    ): void;
    /**
     * @SINCE 1.30
     *
     * Register a preprocessor for all views of a specific type.
     *
     * The preprocessor can be registered for several stages of view initialization, for xml views these are
     * either the plain "xml" or the already initialized "controls" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}.
     * For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the
     * view instance already, that one is used. When several preprocessors are registered for one hook, it has
     * to be made sure, that they do not conflict when being processed serially.
     *
     * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor}
     * or a function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
     *
     * **Note**: Preprocessors work only in async views and will be ignored when the view is instantiated in
     * sync mode by default, as this could have unexpected side effects. You may override this behaviour by
     * setting the bSyncSupport flag to true.
     */
    static registerPreprocessor(
      /**
       * the type of content to be processed
       */
      sType: string | PreprocessorType,
      /**
       * module path of the preprocessor implementation or a preprocessor function
       */
      vPreprocessor: string | Function,
      /**
       * declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
       * also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
       * break the view initialization and lead to unexpected results.
       */
      bSyncSupport: boolean,
      /**
       * ondemand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting
       * `preprocessors : { xml }`, for example.
       */
      bOnDemand?: boolean,
      /**
       * optional configuration for preprocessor
       */
      mSettings?: object
    ): void;
  }
  /**
   * @SINCE 1.34
   *
   * Specifies the available preprocessor types for XMLViews
   * See:
   * 	sap.ui.core.mvc.XMLView
   * 	sap.ui.core.mvc.View.Preprocessor
   */
  export enum PreprocessorType {
    /**
     * This preprocessor receives the control tree produced through the view source
     */
    CONTROLS = "controls",
    /**
     * This preprocessor receives a valid xml source for View creation without any template tags but with control
     * declarations. These include their full IDs by which they can also be queried during runtime.
     */
    VIEWXML = "viewxml",
    /**
     * This preprocessor receives the plain xml source of the view and should also return a valid xml ready
     * for view creation
     */
    XML = "xml",
  }

  export interface $XMLViewSettings extends $ViewSettings {}
}

declare module "sap/ui/core/Popup" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import Control from "sap/ui/core/Control";

  import UI5Element from "sap/ui/core/Element";

  import Event from "sap/ui/base/Event";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { OpenState, Collision, CSSSize } from "sap/ui/core/library";

  /**
   * Popup Class is a helper class for controls that want themselves or parts of themselves or even other
   * aggregated or composed controls or plain HTML content to popup on the screen like menus, dialogs, drop
   * down boxes.
   *
   * It allows the controls to be aligned to other DOM elements using the {@link sap.ui.core.Popup.Dock} method.
   * With it you can define where the popup should be docked. One can dock the popup to the top, bottom, left
   * or right side of another DOM element.
   *
   * In the case that the popup has no space to show itself in the view port of the current window, it tries
   * to open itself to the inverted direction.
   *
   * **Since 1.12.3**, it is possible to add further DOM-element-IDs that can get the focus when `autoclose`
   * or `modal` is enabled. E.g. the `RichTextEditor` with running TinyMCE uses this method to be able to
   * focus the popups of the TinyMCE if the `RichTextEditor` runs within a `Popup`/`Dialog` etc.
   *
   * To provide an additional DOM element that can get the focus the following should be done:
   * ```javascript
   *
   *   // create an object with the corresponding DOM-ID
   *   var oObject = {
   *     id : "this_is_the_most_valuable_id_of_the_DOM_element"
   *   };
   *
   *   // add the event prefix for adding an element to the ID of the corresponding Popup
   *   var sEventId = "sap.ui.core.Popup.addFocusableContent-" + oPopup.getId();
   *
   *   // fire the event with the created event-ID and the object with the DOM-ID
   *   sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, oObject);
   * ```
   *
   *
   * **Since 1.75**, DOM elements which have the attribute `data-sap-ui-integration-popup-content` are considered
   * to be part of all opened popups. Those DOM elements can get the focus without causing the autoclose popup
   * to be closed or the modal popup to take the focus back to itself. Additionally, a further DOM query selector
   * can be provided by using {@link sap.ui.core.Popup.addExternalContent} to make the DOM elements which
   * match the selector be considered as part of all opened popups. Please be aware that the Popup implementation
   * only checks if a DOM element is marked with the attribute `data-sap-ui-integration-popup-content`. The
   * actual attribute value is not checked. To prevent a DOM element from matching, you must remove the attribute
   * itself. Setting the attribute to a falsy value is not enough in this case.
   */
  export default class Popup extends ManagedObject {
    /**
     * Creates an instance of `sap.ui.core.Popup` that can be used to open controls as a Popup, visually appearing
     * in front of other controls.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present
       * in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
       */
      oContent: Control | UI5Element | Element,
      /**
       * whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true"
       * effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically
       * sets the focus back to whatever was focused when the popup opened.
       */
      bModal?: boolean,
      /**
       * whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme
       * and browser support)
       */
      bShadow?: boolean,
      /**
       * whether the popup should automatically close when the focus moves out of the popup
       */
      bAutoClose?: boolean
    );

    /**
     * @SINCE 1.75
     *
     * Adds a DOM query selector for determining additional external popup content.
     *
     * When the browser focus is switched from the main popup content (which is set by calling {@link #setContent})
     * to another DOM element, this DOM element is tested against the selector to determine:
     *
     *
     * 	 - Autoclose popup: whether the popup should be kept open
     * 	 - Modal popup: whether the focus is allowed to be taken away
     */
    static addExternalContent(
      /**
       * One query selector or an array of query selectors to be added
       */
      vSelectors: string[] | string,
      /**
       * Whether the external content should be marked instantly as user selectable. If the external content which
       * matches the given or default selector is added after a modal popup is opened, this parameter needs to
       * be set to `true` to make the external content user selectable.
       */
      bMarkAsSelectable?: boolean
    ): void;
    /**
     * Attaches event handler `fnFunction` to the static {@link #.blockLayerStateChange blockLayerStateChange}
     * event.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to a dummy event provider object.
     *
     * The event gets triggered in case of modal popups when the first of multiple popups opens and closes.
     */
    static attachBlockLayerStateChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the static {@link #.blockLayerStateChange blockLayerStateChange}
     * event.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to a dummy event provider object.
     *
     * The event gets triggered in case of modal popups when the first of multiple popups opens and closes.
     */
    static attachBlockLayerStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to a dummy event provider object
       */
      oListener?: object
    ): void;
    /**
     * Removes a previously attached event handler `fnFunction` from the static {@link #.blockLayerStateChange
     * blockLayerStateChange} event.
     *
     * The event gets triggered in case of modal popups when the first of multiple popups opens and closes.
     */
    static detachBlockLayerStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Creates a new subclass of class sap.ui.core.Popup with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Popup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
     *
     * @returns The z-index value
     */
    static getLastZIndex(): number;
    /**
     * Returns a metadata object for class sap.ui.core.Popup.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal
     * z-index counter and the returned z-index.
     *
     * @returns the next z-index on top of the Popup stack
     */
    static getNextZIndex(): number;
    /**
     * @SINCE 1.89.0
     *
     * Returns the value that has been set by {@link sap.ui.core.Popup.setWithinArea}. When a DOM element that
     * represents the within area is needed, use {@link sap.ui.core.Popup.getWithinAreaDomRef} instead.
     *
     * If no within area is specified, `undefined` is returned.
     *
     * @returns The specfied within area
     */
    static getWithinArea(): string | Element | UI5Element | Window;
    /**
     * @SINCE 1.89.0
     *
     * Returns the actual DOM element of the value that has been set by {@link sap.ui.core.Popup.setWithinArea}.
     * It returns `window` by default when no within area has been set using {@link sap.ui.core.Popup.setWithinArea}.
     *
     * When an {@link sap.ui.core.Element} is set as a within area, `document.documentElement` is returned before
     * element is rendered.
     *
     * @returns The DOM Element or the window object
     */
    static getWithinAreaDomRef(): Element | Window;
    /**
     * @SINCE 1.77
     *
     * Marks the external content as not user selectable
     */
    static markExternalContentAsNotSelectable(): void;
    /**
     * @SINCE 1.77
     *
     * Marks the external content as user selectable
     */
    static markExternalContentAsSelectable(): void;
    /**
     * @SINCE 1.75
     *
     * Removes a DOM query selector which has been added by {@link sap.ui.core.Popup.addExternalContent}.
     *
     * The default query selector `[data-sap-ui-integration-popup-content]` can't be deleted.
     */
    static removeExternalContent(
      /**
       * One query selector or an array of query selectors to be deleted
       */
      vSelectors: string[] | string,
      /**
       * Whether the external content should be marked instantly as not user selectable. If the selector is removed
       * while a modal popup is still open, this parameter needs to be set to `true` to make the external content
       * not user selectable.
       */
      bMarkAsNotSelectable?: boolean
    ): void;
    /**
     * @SINCE 1.30.0
     *
     * Set an initial z-index that should be used by all Popup so all Popups start at least with the set z-index.
     * If the given z-index is lower than any current available z-index the highest z-index will be used.
     */
    static setInitialZIndex(
      /**
       * is the initial z-index
       */
      iInitialZIndex: number
    ): void;
    /**
     * @SINCE 1.89.0
     *
     * Sets a within area that is used as the area available for positioning the popup. It mainly affects the
     * collision detection. The position of the popup can then be further adapted depending on the "collision"
     * parameter that is set with {@link sap.ui.core.Popup#open} or {@link sap.ui.core.Popup#setPosition} when
     * the popup overflows the within area.
     *
     * If no within area is specified, all popups use the `window` as within area.
     *
     * When an {@link sap.ui.core.Element} is set as the within area, make sure that the control is rendered
     * when the popup opens, otherwise the `window` is used as the within area.
     */
    static setWithinArea(
      /**
       * The within area
       */
      vValue: string | Element | UI5Element | Window
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.ui.core.Popup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Popup` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Popup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.ui.core.Popup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Popup` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Popup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:opened opened} event of this `sap.ui.core.Popup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Popup` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOpened(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Popup` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:opened opened} event of this `sap.ui.core.Popup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.Popup` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOpened(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.Popup` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the popup.
     *
     * If the Popup is already closed or in the process of closing, calling this method does nothing. If the
     * Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
     * If the Popup is in the process of being opened and closed with an animation duration, the animation will
     * be chained, but this functionality is dangerous, may lead to inconsistent behavior and is thus not recommended
     * and may even be removed.
     */
    close(
      /**
       * Animation duration in milliseconds. For `iDuration` == 0 the closing happens synchronously without animation.
       */
      iDuration?: int
    ): void;
    /**
     * Closes and destroys this instance of Popup. Does not destroy the hosted content.
     */
    destroy(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:closed closed} event of this `sap.ui.core.Popup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClosed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:opened opened} event of this `sap.ui.core.Popup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachOpened(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * When the Popup is being destroyed all corresponding references should be deleted as well to prevent any
     * memory leaks.
     */
    exit(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:closed closed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireClosed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:opened opened} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireOpened(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Determines whether the Popup should auto closes or not.
     *
     * @returns `true` if auto close is enabled, `false` if no auto close is configured for this popup instance
     */
    getAutoClose(): boolean;
    /**
     * Returns this Popup's content.
     *
     * @returns the content that has been set previously (if any)
     */
    getContent(): Control | Element;
    /**
     * @SINCE 1.13.0
     *
     * This returns true/false if the default followOf method should be used. If a separate followOf-handler
     * was previously added the corresponding function is returned.
     *
     * @returns if a function was set it is returned otherwise a boolean value whether the follow of is activated
     */
    getFollowOf(): boolean | Function;
    /**
     * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
     *
     * @returns Th z-index value
     */
    getLastZIndex(): number;
    /**
     * Returns the value if a Popup is of modal type
     *
     * @returns bModal whether the Popup is of modal type
     */
    getModal(): boolean;
    /**
     * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal
     * z-index counter and the returned z-index.
     *
     * @returns the next z-index on top of the Popup stack
     */
    getNextZIndex(): number;
    /**
     * Returns whether the Popup is currently open, closed, or in a transition between these states.
     *
     * @returns whether the Popup is opened
     */
    getOpenState(): OpenState | keyof typeof OpenState;
    /**
     * Returns whether the Popup is currently open (this includes opening and closing animations).
     *
     * @returns whether the Popup is opened (or currently being opened or closed)
     */
    isOpen(): boolean;
    /**
     * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
     * Content must be capable of being positioned via "position:absolute;" All parameters are optional (open()
     * may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset",
     * "collision" is given, also the preceding positional parameters ("my", at",...) must be given.
     *
     * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing),
     * the call is ignored.
     */
    open(
      /**
       * animation duration in milliseconds. For `iDuration` == 0 the opening happens synchronously without animation.
       */
      iDuration?: int,
      /**
       * the popup content's reference position for docking
       */
      my?: Dock,
      /**
       * the "of" element's reference point for docking to
       */
      at?: Dock,
      /**
       * specifies the reference element to which the given content should dock to
       */
      of?: string | UI5Element | Element | jQuery | jQuery.Event,
      /**
       * the offset relative to the docking point, specified as a string with space-separated pixel values (e.g.
       * "10 0" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive
       * ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
       */
      offset?: string,
      /**
       * defines how the position of an element should be adjusted in case it overflows the within area in some
       * direction.
       */
      collision?: Collision,
      /**
       * defines the area the popup should be placed in. This affects the collision detection.
       */
      within?: string | UI5Element | Element | Window,
      /**
       * defines whether the popup should follow the dock reference when the reference changes its position.
       */
      followOf?: boolean | Function | null
    ): void;
    /**
     * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
     * Content must be capable of being positioned via "position:absolute;" All parameters are optional (open()
     * may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset",
     * "collision" is given, also the preceding positional parameters ("my", at",...) must be given.
     *
     * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing),
     * the call is ignored.
     */
    open(
      /**
       * the popup content's reference position for docking
       */
      my?: Dock,
      /**
       * the "of" element's reference point for docking to
       */
      at?: Dock,
      /**
       * specifies the reference element to which the given content should dock to
       */
      of?: string | UI5Element | Element | jQuery | jQuery.Event,
      /**
       * the offset relative to the docking point, specified as a string with space-separated pixel values (e.g.
       * "10 0" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive
       * ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
       */
      offset?: string,
      /**
       * defines how the position of an element should be adjusted in case it overflows the within area in some
       * direction.
       */
      collision?: Collision,
      /**
       * defines the area the popup should be placed in. This affects the collision detection.
       */
      within?: string | UI5Element | Element | Window,
      /**
       * defines whether the popup should follow the dock reference when the reference changes its position.
       */
      followOf?: boolean | Function | null
    ): void;
    /**
     * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored
     * and not change the respective animation function. When called, the animation functions receive three
     * parameters: - the jQuery object wrapping the DomRef of the popup - the requested animation duration -
     * a function that MUST be called once the animation has completed
     *
     * @returns `this` to allow method chaining
     */
    setAnimations(
      /**
       * The function which executes the custom opening animation
       */
      fnOpen: Function,
      /**
       * The function which executes the custom closing animation
       */
      fnClose: Function
    ): this;
    /**
     * Used to specify whether the Popup should close as soon as - for non-touch environment: the focus leaves
     * - for touch environment: user clicks the area which is outside the popup itself, the DOM element which
     * the popup aligns to (except document), and any extra popup content set by calling setExtraContent.
     *
     * @returns `this` to allow method chaining
     */
    setAutoClose(
      /**
       * whether the Popup should close as soon as the focus leaves
       */
      bAutoClose: boolean
    ): this;
    /**
     * @deprecated (since 1.75) - please use {@link #setExtraContent} instead.
     */
    setAutoCloseAreas(): void;
    /**
     * Sets the content this instance of the Popup should render. Content must be capable of being positioned
     * via position:absolute;
     *
     * @returns `this` to allow method chaining
     */
    setContent(
      /**
       * The content of the popup
       */
      oContent: Control | Element
    ): this;
    /**
     * Sets the durations for opening and closing animations. Null values and values < 0 are ignored. A duration
     * of 0 means no animation.
     *
     * @returns `this` to allow method chaining
     */
    setDurations(
      /**
       * in milliseconds
       */
      iOpenDuration?: int,
      /**
       * in milliseconds
       */
      iCloseDuration?: int
    ): this;
    /**
     * @SINCE 1.75
     *
     * Sets additional content that are considered part of the Popup.
     *
     * A popup with autoclose {@link #setAutoClose} enabled allows the focus to be moved into the extra content
     * without closing itself.
     *
     * A popup with modal {@link #setModal} enabled allows the focus to be shifted into the extra content without
     * taking it back to the previous focused element in the popup.
     *
     * @returns `this` to allow method chaining
     */
    setExtraContent(
      /**
       * An array containing DOM elements, sap.ui.core.Element or an ID which are considered to be part of the
       * Popup; a value of null removes all previous content
       */
      aContent: Element[] | UI5Element[] | string[]
    ): this;
    /**
     * @SINCE 1.13.0
     *
     * This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf
     * should be set the corresponding listener will be attached.
     */
    setFollowOf(
      /**
       * a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given.
       * null deletes all followOf settings.
       */
      followOf: boolean | Function | null
    ): void;
    /**
     * Sets the ID of the element that should be focused once the popup opens. If the given ID is the ID of
     * an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element
     * with a different ID (usually a sub-element inside the Control). If no existing element ID is supplied
     * and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
     */
    setInitialFocusId(
      /**
       * the ID of the DOM element to focus
       */
      sId: string
    ): void;
    /**
     * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over
     * the background and prevent attempts to put the focus outside/below the popup. Setting this while the
     * popup is open will change "block layer" immediately.
     *
     * @returns `this` to allow method chaining
     */
    setModal(
      /**
       * whether the Popup is of modal type
       */
      bModal: boolean,
      /**
       * a CSS class (or space-separated list of classes) that should be added to the block layer
       */
      sModalCSSClass?: string
    ): this;
    /**
     * Sets the position of the Popup (if you refer to a Control as anchor then do not use the DOMRef of the
     * control which might change after re-renderings). Optional parameters can only be omitted when all subsequent
     * parameters are omitted as well.
     *
     * @returns `this` to allow method chaining
     */
    setPosition(
      /**
       * specifies which point of the given Content should be aligned
       */
      my: Dock,
      /**
       * specifies the point of the reference element to which the given Content should be aligned
       */
      at:
        | Dock
        | {
            left: CSSSize;

            top: CSSSize;
          },
      /**
       * specifies the reference element to which the given content should be aligned as specified in the other
       * parameters
       */
      of?: string | UI5Element | Element | jQuery | jQuery.Event,
      /**
       * the offset relative to the docking point, specified as a string with space-separated pixel values (e.g.
       * "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive
       * ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
       */
      offset?: string,
      /**
       * defines how the position of an element should be adjusted in case it overflows the within area in some
       * direction.
       */
      collision?: Collision,
      /**
       * defines the area the popup should be placed in. This affects the collision detection.
       */
      within?: string | UI5Element | Element | Window
    ): this;
    /**
     * Determines whether the Popup should have a shadow (in supporting browsers). This also affects a currently
     * open popup.
     *
     * @returns `this` to allow method chaining
     */
    setShadow(
      /**
       * whether to show a shadow
       */
      bShowShadow: boolean
    ): this;
  }
  /**
   * Enumeration providing options for docking of some element to another.
   *
   * "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side
   * ("Begin" is "Right" in RTL).
   */
  export enum Dock {
    BeginBottom = "begin bottom",

    BeginCenter = "begin center",

    BeginTop = "begin top",

    CenterBottom = "center bottom",

    CenterCenter = "center center",

    CenterTop = "center top",

    EndBottom = "end bottom",

    EndCenter = "end center",

    EndTop = "end top",

    LeftBottom = "left bottom",

    LeftCenter = "left center",

    LeftTop = "left top",

    RightBottom = "right bottom",

    RightCenter = "right center",

    RightTop = "right top",
  }

  export interface $PopupSettings extends $ManagedObjectSettings {
    opened?: (oEvent: Event) => void;

    closed?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/Renderer" {
  import { TextAlign, TextDirection } from "sap/ui/core/library";

  /**
   * Base Class for a Renderer.
   */
  interface Renderer {
    /**
     * Creates a new renderer that extends a given renderer.
     *
     * This method can be used with two signatures that are explained below. In both variants, the returned
     * renderer inherits all properties (methods, fields) from the given parent renderer. Both variants also
     * add an 'extend' method to the created renderer that behaves like the modern signature variant of this
     * `Renderer.extend` method, but allows to extend the new renderer instead of `sap.ui.core.Renderer`.
     *
     * Modern Signature:
     *
     * In the modern signature variant, two parameters must be given: a qualified name for the new renderer
     * (its global name, in dot-notation), and an optional object literal that contains methods or fields to
     * be added to the new renderer class.
     *
     * This signature has been designed to resemble the class extension mechanism as provided by {@link sap.ui.base.Object.extend
     * Object.extend}.
     *
     *
     * ```javascript
     *
     * sap.ui.define(['sap/ui/core/Renderer'],
     *     function(Renderer) {
     *     "use strict";
     *
     *     var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {
     *         render: function(oRM, oControl) {
     *
     *             renderPreamble(oRM, oControl);
     *
     *             // implementation core renderer logic here
     *
     *             renderPostamble(oRM, oControl);
     *
     *         },
     *
     *         renderPreamble : function(oRM, oControl) {
     *         ...
     *         },
     *
     *         renderPostamble : function(oRM, oControl) {
     *         ...
     *         }
     *
     *     });
     *
     *     return LabelRenderer;
     * });
     * ```
     *
     *
     * The extension of renderers works across multiple levels. A `FancyLabelRenderer` can extend the above
     * `LabelRenderer`:
     *
     *
     * ```javascript
     *
     * sap.ui.define(['sap/m/LabelRenderer'],
     *     function(LabelRenderer) {
     *     "use strict";
     *
     *     var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {
     *         render: function(oRM, oControl) {
     *
     *             // call base renderer
     *             LabelRenderer.renderPreamble(oRM, oControl);
     *
     *             // ... do your own fancy rendering here
     *
     *             // call base renderer again
     *             LabelRenderer.renderPostamble(oRM, oControl);
     *         }
     *     });
     *
     *     return FancyLabelRenderer;
     * });
     * ```
     *
     *
     * **Note:** The modern signature no longer requires the `bExport` flag to be set for the enclosing {@link
     * sap.ui.define} call. The Renderer base class takes care of the necessary global export of the renderer.
     * This allows non-SAP developers to write a renderer that complies with the documented restriction for
     * `sap.ui.define` (no use of bExport = true outside sap.ui.core projects).
     *
     * Deprecated Signature:
     *
     * The deprecated old signature expects just one parameter: a renderer that should be extended. With that
     * signature, the renderer can't be exported globally as the name of the renderer class is not known.
     *
     * For compatibility reasons, the class created by the deprecated signature contains a property `_super`
     * that references the parent class. It shouldn't be used by applications / control developers as it doesn't
     * work reliably for deeper inheritance chains: if the old variant of `Renderer.extend` is used on two or
     * more levels of the inheritance hierarchy, the `_super` property of the resulting renderer class will
     * always point to the implementation of the base renderer of the last call to extend. Instead of using
     * `this._super`, renderer implementations should use the new signature variant and access the base implementation
     * of a method via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).
     *
     * Use as a Generic Method:
     *
     * Only renderers that have been created with a call to `extend` will get their own `extend` method to create
     * new subclasses. To allow extending from older renderers that have been written from scratch as a plain
     * object, the `Renderer.extend` method can be called as a generic method, providing the base renderer
     * as `this`.
     *
     * Example: Derive from `HBoxRenderer` (which is assumed to be a plain object)
     * ```javascript
     *
     * sap.ui.define(['sap/ui/core/Renderer', 'sap/m/HBoxRenderer'],
     *     function(Renderer, HBoxRenderer) {
     *     "use strict";
     *
     *     // Call 'extend' as a generic method, providing the HBoxRenderer as 'this'
     *     var MyRenderer = Renderer.extend.call(HBoxRenderer, 'sap.m.LabelRenderer', {
     *
     *         someOverriddenHook: function(oRM, oControl) {
     *         ...
     *         },
     *
     *     });
     *
     *     return LabelRenderer;
     * });
     * ```
     *
     *
     * **Note:** The deprecated signature cannot be used generically, it is only supported when called on `sap.ui.core.Renderer`.
     *
     * @returns A new renderer that can be enriched further
     */
    extend(
      /**
       * Either the name of the new renderer class (modern signature) or the base renderer to extend (deprecated
       * signature)
       */
      vName: string | object,
      /**
       * Methods and/or properties that should be added to the new renderer class
       */
      oRendererInfo?: object
    ): object;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the TextAlignment for the provided configuration.
     *
     * @returns the actual text alignment that must be set for this environment
     */
    getTextAlign(
      /**
       * the text alignment of the Control
       */
      oTextAlign: TextAlign | keyof typeof TextAlign,
      /**
       * the text direction of the Control
       */
      oTextDirection: TextDirection | keyof typeof TextDirection
    ): string;
  }
  const Renderer: Renderer;
  export default Renderer;
}

declare module "sap/ui/core/RenderManager" {
  import UI5Element from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import Configuration from "sap/ui/core/Configuration";

  import { URI, ID } from "sap/ui/core/library";

  /**
   * A class that handles the rendering of controls.
   *
   * For the default rendering task of UI5, a shared RenderManager is created and owned by `sap.ui.core.Core`.
   * Controls or other code that want to render controls outside the default rendering task can create a private
   * instance of RenderManager by calling the {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()}
   * method. When such a private instance is no longer needed, it should be {@link #destroy destroyed}.
   *
   * Control renderers only have access to a subset of the public and protected instance methods of this class.
   * The instance methods {@link #flush}, {@link #render} and {@link #destroy} are not part of that subset
   * and are reserved to the owner of the corresponding RenderManager instance. Renderers will use the provided
   * methods to create their HTML output. The RenderManager will collect the HTML output and inject the final
   * HTML DOM at the desired location.
   *
   * Renderers: When the {@link #renderControl} method of the RenderManager is invoked, it will retrieve the
   * default renderer for that control. By convention, the default renderer is implemented in its own namespace
   * (static class) which matches the name of the control's class with the additional suffix 'Renderer'. So
   * for a control `sap.m.Input` the default renderer will be searched for under the global name `sap.m.InputRenderer`.
   *
   * Semantic Rendering: As of 1.67, `RenderManager` provides a set of new APIs to describe the structure
   * of the DOM that can be used by the control renderers.
   *
   *
   * ```javascript
   *
   *
   *   myButtonRenderer.render = function(rm, oButton) {
   *
   *       rm.openStart("button", oButton);
   *       rm.attr("tabindex", 1);
   *       rm.class("myButton");
   *       rm.style("width", oButton.getWidth());
   *       rm.openEnd();
   *           rm.text(oButton.getText());
   *       rm.close("button");
   *
   *   };
   *
   * ```
   *
   *
   * By default, when the control is invalidated (e.g. a property is changed, an aggregation is removed, or
   * an association is added), it will be registered for rerendering. During the (re)rendering, the `render`
   * method of the control renderer is executed via a specified `RenderManager` interface and the control
   * instance.
   *
   * Traditional string-based rendering creates a new HTML structure of the control in every rendering cycle
   * and removes the existing control DOM structure from the DOM tree.
   *
   * The set of new semantic `RenderManager` APIs lets us understand the structure of the DOM, walk along
   * the live DOM tree, and figure out changes as new APIs are called. If there is a change, then `RenderManager`
   * patches only the required parts of the live DOM tree. This allows control developers to remove their
   * DOM-related custom setters.
   *
   * **Note:** To enable the new in-place rendering technology, the `apiVersion` property of the control renderer
   * must be set to `2`. This property is not inherited by subclass renderers. It has to be set anew by each
   * subclass to assure that the extended contract between framework and renderer is fulfilled (see next paragraph).
   *
   *
   * ```javascript
   *
   *
   *   var myButtonRenderer = {
   *       apiVersion: 2    // enable semantic rendering
   *   };
   *
   *   myButtonRenderer.render = function(rm, oButton) {
   *
   *       rm.openStart("button", oButton);
   *       ...
   *       ...
   *       rm.close("button");
   *
   *   };
   *
   * ```
   *
   *
   * Contract for Renderer.apiVersion 2: To allow a more efficient in-place DOM patching and to ensure the
   * compatibility of the control, the following prerequisites must be fulfilled for the controls using the
   * new rendering technology:
   *
   *
   * 	 - Legacy control renderers must be migrated to the new semantic renderer API: {@link sap.ui.core.RenderManager#openStart
   * 			openStart}, {@link sap.ui.core.RenderManager#voidStart voidStart}, {@link sap.ui.core.RenderManager#style
   * 			style}, {@link sap.ui.core.RenderManager#class class}, {@link sap.ui.core.RenderManager#attr attr}, {@link
   * 			sap.ui.core.RenderManager#openEnd openEnd}, {@link sap.ui.core.RenderManager#voidEnd voidEnd}, {@link
   * 			sap.ui.core.RenderManager#text text}, {@link sap.ui.core.RenderManager#unsafeHtml unsafeHtml}, {@link
   * 			sap.ui.core.RenderManager#icon icon}, {@link sap.ui.core.RenderManager#accessibilityState accessibilityState},
   * 			{@link sap.ui.core.RenderManager#renderControl renderControl}, {@link sap.ui.core.RenderManager#cleanupControlWithoutRendering
   * 			cleanupControlWithoutRendering}
   * 	 - During the migration, restrictions that are defined in the API documentation of those methods must
   * 			be taken into account, e.g. tag and attribute names must be set in their canonical form.
   * 	 - Fault tolerance of HTML5 markup is not applicable for the new semantic rendering API, e.g. except
   * 			void tags, all tags must be closed; duplicate attributes within one HTML element must not exist.
   * 	 - Existing control DOM structure will not be removed from the DOM tree; therefore all custom events,
   * 			including the ones that are registered with jQuery, must be de-registered correctly at the `onBeforeRendering`
   * 			and `exit` hooks.
   * 	 - Classes and attribute names must not be escaped.
   * 	 - Styles should be validated via types (e.g. `sap.ui.core.CSSSize`). But this might not be sufficient
   * 			in all cases, e.g. validated URL values can contain harmful content; in this case {@link module:sap/base/security/encodeCSS
   * 			encodeCSS} can be used.
   * 	 - To allow a more efficient DOM update, second parameter of the {@link sap.ui.core.RenderManager#openStart
   * 			openStart} or {@link sap.ui.core.RenderManager#voidStart voidStart} methods must be used to identify
   * 			elements, e.g. use `rm.openStart("div", oControl.getId() + "-suffix");` instead of `rm.openStart("div").attr("id",
   * 			oControl.getId() + "-suffix");`
   * 	 - Controls that listen to the `focusin` event must double check their focus handling. Since DOM nodes
   * 			are not removed and only reused, the `focusin` event might not be fired during rerendering.
   *
   * Contract for Renderer.apiVersion 4: The `apiVersion 4` marker of the control renderer lets the `RenderManager`
   * know if a control's output is not affected by changes in the parent control. By default, if a property,
   * an aggregation, or an association of a control is changed, then the control gets invalidated, and the
   * rerendering process for that control and all of its children starts. That means child controls rerender
   * together with their parent even though there is no DOM update necessary. If a control's output is only
   * affected by its own properties, aggregations, or associations, then the `apiVersion 4` marker can help
   * to reuse the control's DOM output and prevent child controls from rerendering unnecessarily while they
   * are getting rendered by their parent. This can help to improve performance by reducing the number of
   * re-renderings.
   *  For example: A control called "ParentControl" has a child control called "ChildControl". ChildControl
   * has its own properties, aggregations, and associations, and its output is only affected by them. The
   * `apiVersion 4` marker is set in the renderer of ChildControl. Whenever a property of the ParentControl
   * is changed during the re-rendering process, the `RenderManager` will check the `apiVersion` marker of
   * the ChildControl's renderer, and if it's 4, the `RenderManager` will skip rendering of the ChildControl.
   *
   *
   * To allow a more efficient rerendering with an `apiVersion 4` marker, the following prerequisites must
   * be fulfilled for the control to ensure compatibility:
   *
   *
   * 	 - All the prerequisites of the `apiVersion 2` marker must be fulfilled by the control.
   * 	 - The behavior and rendering logic of the control must not rely on the assumption that it will always
   * 			be re-rendered at the same time as its parent.
   * 	 - The `onBeforeRendering` and `onAfterRendering` hooks of the control must not be used to manipulate
   * 			or access any elements outside of the control's own DOM structure.
   * 	 - The control renderer must maintain a proper rendering encapsulation and render only the properties,
   * 			aggregations, and associations that are specific to the control. The renderer should not reference or
   * 			depend on any state of the parent control or any other external element.
   * 	 - If certain aggregations are dependent on the state of the parent control, they must always be rendered
   * 			together with their parent. To accomplish this, the parent control must use the {@link sap.ui.core.Control#invalidate
   * 			invalidate} method to signal to the child controls that they need to re-render whenever the dependent
   * 			state of the parent control changes. This guarantees that the child controls are always in sync with
   * 			the parent control, regardless of the `apiVersion` definition of their renderer.
   *
   *
   * **Note:** The rendering can only be skipped if the renderer of each descendant control has the `apiVersion
   * 4` marker, and no `onBeforeRendering` or `onAfterRendering` event delegates are registered. However,
   * while {@link sap.ui.core.Element#addEventDelegate adding the event delegate}, setting the `canSkipRendering`
   * property to `true` on the event delegate object can be done to indicate that those delegate handlers
   * are compliant with the `apiVersion:4` prerequisites and still allows for rendering optimization.
   *  The `canSkipRendering` property can also be used for the controls that enhance the accessibility state
   * of child controls with implementing the {@link sap.ui.core.Element#enhanceAccessibilityState enhanceAccessibilityState}
   * method. In this case, setting the `canSkipRendering` property to `true` lets the `RenderManager` know
   * that the parent control's accessibility enhancement is static and does not interfere with the child control's
   * rendering optimization.
   */
  export default class RenderManager extends Object {
    /**
     * Creates an instance of the RenderManager.
     *
     * Applications or controls must not call the `RenderManager` constructor on their own but should use the
     * {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()} method to create
     * an instance for their exclusive use.
     * See:
     * 	sap.ui.core.Core
     * 	sap.ui.getCore
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates the ID to be used for the invisible Placeholder DOM element. This method can be used to get direct
     * access to the placeholder DOM element. Also statically available as RenderManager.createInvisiblePlaceholderId()
     *
     * @returns The ID used for the invisible Placeholder of this element
     */
    static createInvisiblePlaceholderId(
      /**
       * The Element instance for which to create the placeholder ID
       */
      oElement: UI5Element
    ): string;
    /**
     * Searches "to-be-preserved" nodes for the given control id.
     *
     * @returns a jQuery collection representing the found content
     */
    static findPreservedContent(
      /**
       * control id to search content for.
       */
      sId: string
    ): jQuery;
    /**
     * Returns the hidden area reference belonging to the current window instance.
     *
     * @returns The hidden area reference belonging to the current window instance.
     */
    static getPreserveAreaRef(): Element;
    /**
     * Returns the renderer class for a given control instance
     *
     * @returns the renderer class for a given control instance
     */
    static getRenderer(
      /**
       * the control that should be rendered
       */
      oControl: Control
    ): object;
    /**
     * Collects descendants of the given root node that need to be preserved before the root node is wiped out.
     * The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
     *
     * A node is declared "to-be-preserved" when it has the `data-sap-ui-preserve` attribute set. When the optional
     * parameter `bPreserveNodesWithId` is set to true, then nodes with an id are preserved as well and their
     * `data-sap-ui-preserve` attribute is set automatically. This option is used by UIAreas when they render
     * for the first time and simplifies the handling of predefined HTML content in a web page.
     *
     * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve' area in
     * the order that they are found. So for direct siblings the order should be stable.
     */
    static preserveContent(
      /**
       * to search for "to-be-preserved" nodes
       */
      oRootNode: Element,
      /**
       * whether to preserve the root itself
       */
      bPreserveRoot?: boolean,
      /**
       * whether to preserve nodes with an id as well
       */
      bPreserveNodesWithId?: boolean
    ): void;
    /**
     * Collects accessibility related attributes for an `Element` and renders them as part of the currently
     * rendered DOM element.
     *
     * See the WAI-ARIA specification for a general description of the accessibility related attributes. Attributes
     * are only rendered when the accessibility feature is activated in the UI5 runtime configuration.
     *
     * The values for the attributes are collected from the following sources (last one wins):
     * 	 - from the properties and associations of the given `oElement`, using a heuristic mapping (described
     * 			below)
     * 	 - from the `mProps` parameter, as provided by the caller
     * 	 - from the parent of the given `oElement`, if it has a parent and if the parent implements the method
     * 			{@link sap.ui.core.Element#enhanceAccessibilityState enhanceAccessibilityState}  If no `oElement`
     * 			is given, only `mProps` will be taken into account.
     *
     * Heuristic Mapping: The following mapping from properties/values to ARIA attributes is used (if the element
     * does have such properties):
     * 	 - `editable===false` => `aria-readonly="true"`
     * 	 - `enabled===false` => `aria-disabled="true"`
     * 	 - `visible===false` => `aria-hidden="true"`
     * 	 - `required===true` => `aria-required="true"`
     * 	 - `selected===true` => `aria-selected="true"`
     * 	 - `checked===true` => `aria-checked="true"`
     *
     * In case of the `required` property, all label controls which reference the given element in their `labelFor`
     * relation are additionally taken into account when determining the value for the `aria-required` attribute.
     *
     * Additionally, the associations `ariaDescribedBy` and `ariaLabelledBy` are used to determine the lists
     * of IDs for the ARIA attributes `aria-describedby` and `aria-labelledby`.
     *
     * Label controls that reference the given element in their `labelFor` relation are automatically added
     * to the `aria-labelledby` attribute.
     *
     * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
     * have to check whether it fulfills their requirements. In case of problems (for example the `RadioButton`
     * has a `selected` property but must provide an `aria-checked` attribute) the auto-generated result of
     * this function can be influenced via the parameter `mProps` as described below.
     *
     * The parameter `mProps` can be used to either provide additional attributes which should be rendered and/or
     * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically
     * to the keys (Exception: Attribute `role` does not get the prefix 'aria-').
     *
     * Examples:
     *  `{hidden : true}` results in `aria-hidden="true"` independent of the presence or absence of the visibility
     * property.
     *  `{hidden : null}` ensures that no `aria-hidden` attribute is written independent of the presence or
     * absence of the visibility property.
     *
     *
     * The function behaves in the same way for the associations `ariaDescribedBy` and `ariaLabelledBy`. To
     * append additional values to the auto-generated `aria-describedby` and `aria-labelledby` attributes, the
     * following format can be used:
     * ```javascript
     *
     *   {describedby : {value: "id1 id2", append: true}} =>  aria-describedby = "ida idb id1 id2"
     * ```
     *  (assuming that "ida idb" is the auto-generated part based on the association `ariaDescribedBy`).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    accessibilityState(
      /**
       * The `Element` whose accessibility state should be rendered
       */
      oElement?: UI5Element,
      /**
       * A map of additional properties that should be added or changed.
       */
      mProps?: object
    ): this;
    /**
     * Collects accessibility related attributes for an `Element` and renders them as part of the currently
     * rendered DOM element.
     *
     * See the WAI-ARIA specification for a general description of the accessibility related attributes. Attributes
     * are only rendered when the accessibility feature is activated in the UI5 runtime configuration.
     *
     * The values for the attributes are collected from the following sources (last one wins):
     * 	 - from the properties and associations of the given `oElement`, using a heuristic mapping (described
     * 			below)
     * 	 - from the `mProps` parameter, as provided by the caller
     * 	 - from the parent of the given `oElement`, if it has a parent and if the parent implements the method
     * 			{@link sap.ui.core.Element#enhanceAccessibilityState enhanceAccessibilityState}  If no `oElement`
     * 			is given, only `mProps` will be taken into account.
     *
     * Heuristic Mapping: The following mapping from properties/values to ARIA attributes is used (if the element
     * does have such properties):
     * 	 - `editable===false` => `aria-readonly="true"`
     * 	 - `enabled===false` => `aria-disabled="true"`
     * 	 - `visible===false` => `aria-hidden="true"`
     * 	 - `required===true` => `aria-required="true"`
     * 	 - `selected===true` => `aria-selected="true"`
     * 	 - `checked===true` => `aria-checked="true"`
     *
     * In case of the `required` property, all label controls which reference the given element in their `labelFor`
     * relation are additionally taken into account when determining the value for the `aria-required` attribute.
     *
     * Additionally, the associations `ariaDescribedBy` and `ariaLabelledBy` are used to determine the lists
     * of IDs for the ARIA attributes `aria-describedby` and `aria-labelledby`.
     *
     * Label controls that reference the given element in their `labelFor` relation are automatically added
     * to the `aria-labelledby` attribute.
     *
     * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
     * have to check whether it fulfills their requirements. In case of problems (for example the `RadioButton`
     * has a `selected` property but must provide an `aria-checked` attribute) the auto-generated result of
     * this function can be influenced via the parameter `mProps` as described below.
     *
     * The parameter `mProps` can be used to either provide additional attributes which should be rendered and/or
     * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically
     * to the keys (Exception: Attribute `role` does not get the prefix 'aria-').
     *
     * Examples:
     *  `{hidden : true}` results in `aria-hidden="true"` independent of the presence or absence of the visibility
     * property.
     *  `{hidden : null}` ensures that no `aria-hidden` attribute is written independent of the presence or
     * absence of the visibility property.
     *
     *
     * The function behaves in the same way for the associations `ariaDescribedBy` and `ariaLabelledBy`. To
     * append additional values to the auto-generated `aria-describedby` and `aria-labelledby` attributes, the
     * following format can be used:
     * ```javascript
     *
     *   {describedby : {value: "id1 id2", append: true}} =>  aria-describedby = "ida idb id1 id2"
     * ```
     *  (assuming that "ida idb" is the auto-generated part based on the association `ariaDescribedBy`).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    accessibilityState(
      /**
       * A map of additional properties that should be added or changed.
       */
      mProps?: object
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#class} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Adds a class to the class collection if the name is not empty or null. The class collection is flushed
     * if it is written to the buffer using {@link #writeClasses}
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addClass(
      /**
       * name of the class to be added; null values are ignored
       */
      sName: string
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#style} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Adds a style property to the style collection if the value is not empty or null The style collection
     * is flushed if it is written to the buffer using {@link #writeStyle}
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addStyle(
      /**
       * Name of the CSS property to write
       */
      sName: string,
      /**
       * Value to write
       */
      vValue: string | float | int
    ): this;
    /**
     * @SINCE 1.67
     *
     * Adds an attribute name-value pair to the last open HTML element.
     *
     * This is only valid when called between `openStart/voidStart` and `openEnd/voidEnd`. The attribute name
     * must not be equal to `style` or `class`. Styles and classes must be set via dedicated `class` or `style`
     * methods. To update the DOM correctly, all attribute names have to be used in their canonical form. For
     * HTML elements, {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes attribute names} must
     * all be set in lowercase. For foreign elements, such as SVG, {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
     * attribute names} can be set in upper camel case (e.g. viewBox).
     *
     * HTML entities are not supported by this method, use unicode escaping or the unicode character to implement
     * HTML entities. For further information see {@link https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attr(
      /**
       * Name of the attribute
       */
      sName: string,
      /**
       * Value of the attribute
       */
      vValue: any
    ): this;
    /**
     * @SINCE 1.67
     *
     * Adds a class name to the class collection of the last open HTML element.
     *
     * This is only valid when called between `openStart/voidStart` and `openEnd/voidEnd`. Class name must not
     * contain any whitespace.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    class(
      /**
       * Class name to be written
       */
      sClass: string
    ): this;
    /**
     * @SINCE 1.22.9
     *
     * Cleans up the rendering state of the given control without rendering it.
     *
     * A control is responsible for the rendering of all its child controls. But in some cases it makes sense
     * that a control only renders a subset of its children based on some criterion. For example, a typical
     * carousel control might, for performance reasons, only render the currently visible children (and maybe
     * some child before and after the visible area to facilitate slide-in / slide-out animations), but not
     * all children. This leads to situations where a child had been rendered before, but shouldn't be rendered
     * anymore after an update of the carousel's position. The DOM related state of that child then must be
     * cleaned up correctly, e.g. by de-registering resize handlers or native event handlers. `cleanupControlWithoutRendering`
     * helps with that task by triggering the same activities that the normal rendering triggers before the
     * rendering of a control (e.g. it fires the `BeforeRendering` event). It just doesn't call the renderer
     * and the control will not receive an `AfterRendering` event.
     *
     * The following example shows how `renderControl` and `cleanupControlWithoutRendering` should be used:
     *
     *
     * ```javascript
     *
     *   CarouselRenderer.render = function(rm, oCarousel){
     *
     *     ...
     *
     *     oCarousel.getPages().forEach( function( oPage ) {
     *        if ( oCarousel.isPageToBeRendered( oPage ) ) {
     *           rm.renderControl( oPage ); // onBeforeRendering, render, later onAfterRendering
     *        } else {
     *           rm.cleanupControlWithoutRendering( oPage ); // onBeforeRendering
     *        }
     *     });
     *
     *     ...
     *
     *   };
     * ```
     *
     *
     * DOM Removal: The method does not remove the DOM of the given control. The caller of this method has to
     * take care to remove it at some later point in time. It should indeed be later, not before
     * as the `onBeforeRendering` hook of the control might need access to the old DOM for a proper cleanup.
     *
     * For parents which are rendered with the normal mechanism as shown in the example above, the removal of
     * the old child DOM is guaranteed. The whole DOM of the parent control (including the DOM of the no longer
     * rendered child) will be replaced with new DOM (no longer containing the child) when the rendering cycle
     * finishes.
     *
     * **Note:**: the functionality of this method is different from the default handling for invisible controls
     * (controls with `visible == false`). The standard rendering for invisible controls still renders a placeholder
     * DOM. This allows rerendering of the invisible control once it becomes visible again without a need to
     * render its parent, too. Children that are cleaned up with this method here, are supposed to have no more
     * DOM at all. Rendering them later on therefore requires an involvement (typically: a rendering) of their
     * parent.
     */
    cleanupControlWithoutRendering(
      /**
       * Control that should be cleaned up
       */
      oControl: Control
    ): void;
    /**
     * @SINCE 1.67
     *
     * Closes an open tag started with `openStart` and ended with `openEnd`.
     *
     * This indicates that there are no more children to append to the open tag.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    close(
      /**
       * Tag name of the HTML element
       */
      sTagName: string
    ): this;
    /**
     * Cleans up the resources associated with this instance.
     *
     * After the instance has been destroyed, it must not be used anymore. Applications should call this function
     * if they don't need the instance any longer.
     */
    destroy(): void;
    /**
     * Renders the content of the rendering buffer into the provided DOM node.
     *
     * This function must not be called within control renderers.
     *
     * Usage:
     * ```javascript
     *
     *
     *   // Create a new instance of the RenderManager
     *   var rm = sap.ui.getCore().createRenderManager();
     *
     *   // Use the writer API to fill the buffers
     *   rm.write(...);
     *   rm.renderControl(oControl);
     *   rm.write(...);
     *   ...
     *
     *   // Finally flush the buffer into the provided DOM node (The current content is removed)
     *   rm.flush(oDomNode);
     *
     *   // If the instance is not needed anymore, destroy it
     *   rm.destroy();
     *
     * ```
     */
    flush(
      /**
       * Node in the DOM where the buffer should be flushed into
       */
      oTargetDomNode: Element,
      /**
       * Determines whether the content is preserved (`false`) or not (`true`)
       */
      bDoNotPreserve: boolean,
      /**
       * Determines whether the buffer of the target DOM node is expanded (`true`) or replaced (`false`), or the
       * new entry is inserted at a specific position (value of type `int`)
       */
      vInsert: boolean | int
    ): void;
    /**
     * @deprecated (since 1.92) - Instead, use the {@link sap.ui.core.Core#getConfiguration} API.
     *
     * Returns the configuration object Shortcut for `sap.ui.getCore().getConfiguration()`
     *
     * @returns the configuration object
     */
    getConfiguration(): Configuration;
    /**
     * @deprecated (since 0.15.0) - Use `flush()` instead render content outside the rendering phase.
     *
     * Renders the given {@link sap.ui.core.Control} and finally returns the content of the rendering buffer.
     * Ensures the buffer is restored to the state before calling this method.
     *
     * @returns the resulting HTML of the provided control
     */
    getHTML(
      /**
       * the Control whose HTML should be returned.
       */
      oControl: Control
    ): string;
    /**
     * Returns the renderer class for a given control instance
     *
     * @returns the renderer class for a given control instance
     */
    getRenderer(
      /**
       * the control that should be rendered
       */
      oControl: Control
    ): object;
    /**
     * Writes either an <img> tag for normal URI or a <span> tag with needed properties for an icon
     * URI.
     *
     * Additional classes and attributes can be added to the tag with the second and third parameter. All of
     * the given attributes are escaped when necessary for security consideration.
     *
     * When an <img> tag is rendered, the following two attributes are added by default and can be overwritten
     * with corresponding values in the `mAttributes` parameter:
     * 	 - `role: "presentation"` `alt: ""`
     *
     * **Note:** This function requires the {@link sap.ui.core.IconPool} module. Ensure that the module is loaded
     * before this function is called to avoid syncXHRs.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    icon(
      /**
       * URI of an image or of an icon registered in {@link sap.ui.core.IconPool}
       */
      sURI: URI,
      /**
       * Additional classes that are added to the rendered tag
       */
      aClasses?: any[] | string,
      /**
       * Additional attributes that will be added to the rendered tag. Currently the attributes `class` and `style`
       * are not allowed
       */
      mAttributes?: object
    ): this;
    /**
     * @SINCE 1.67
     *
     * Ends an open tag started with `openStart`.
     *
     * This indicates that there are no more attributes to set to the open tag.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    openEnd(): this;
    /**
     * @SINCE 1.67
     *
     * Opens the start tag of an HTML element.
     *
     * This must be followed by `openEnd` and concluded with `close`. To allow a more efficient DOM update,
     * all tag names have to be used in their canonical form. For HTML elements, {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element
     * tag names} must all be set in lowercase. For foreign elements, such as SVG, {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element
     * tag names} can be set in upper camel case (e.g. linearGradient).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    openStart(
      /**
       * Tag name of the HTML element
       */
      sTagName: string,
      /**
       * Control instance or ID to identify the element
       */
      vControlOrId?: UI5Element | ID
    ): this;
    /**
     * Renders the given control to the provided DOMNode.
     *
     * If the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the
     * control is already rendered somewhere else the current DOM of the control is removed and the new DOM
     * is appended to the provided DOMNode.
     *
     * This function must not be called within control renderers.
     */
    render(
      /**
       * the Control that should be rendered.
       */
      oControl: Control,
      /**
       * The node in the DOM where the result of the rendering should be inserted.
       */
      oTargetDomNode: Element
    ): void;
    /**
     * Turns the given control into its HTML representation and appends it to the rendering buffer.
     *
     * If the given control is undefined or null, then nothing is rendered.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    renderControl(
      /**
       * the control that should be rendered
       */
      oControl: Control
    ): this;
    /**
     * @SINCE 1.67
     *
     * Adds a style name-value pair to the style collection of the last open HTML element.
     *
     * This is only valid when called between `openStart/voidStart` and `openEnd/voidEnd`. To allow a more efficient
     * DOM update, the CSS property names and values have to be used in their canonical form. In general, CSS
     * properties are lower-cased in their canonical form, except for parts that are not under the control of
     * CSS. For more information, see {@link https://www.w3.org/TR/CSS/#indices}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    style(
      /**
       * Name of the style property
       */
      sName: string,
      /**
       * Value of the style property
       */
      vValue: string | float | int
    ): this;
    /**
     * @SINCE 1.67
     *
     * Sets the text content with the given text.
     *
     * Line breaks are not supported by this method, use CSS {@link https://www.w3.org/TR/CSS2/text.html#white-space-prop
     * white-space: pre-line} option to implement line breaks.
     *
     * HTML entities are not supported by this method, use unicode escaping or the unicode character to implement
     * HTML entities. For further information see {@link https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    text(
      /**
       * The text to be written
       */
      sText: string
    ): this;
    /**
     * @deprecated (since 1.1) - never has been implemented - DO NOT USE
     */
    translate(
      /**
       * the key
       */
      sKey: string
    ): void;
    /**
     * @SINCE 1.67
     *
     * Sets the given HTML markup without any encoding or sanitizing.
     *
     * This must not be used for plain texts; use the `text` method instead.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unsafeHtml(
      /**
       * Well-formed, valid HTML markup
       */
      sHtml: string
    ): this;
    /**
     * @SINCE 1.67
     *
     * Ends an open self-closing tag started with `voidStart`.
     *
     * This indicates that there are no more attributes to set to the open tag. For self-closing tags `close`
     * must not be called.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    voidEnd(): this;
    /**
     * @SINCE 1.67
     *
     * Starts a self-closing tag, such as `img` or `input`.
     *
     * This must be followed by `voidEnd`. For self-closing tags, the `close` method must not be called. To
     * allow a more efficient DOM update, void tag names have to be set in lowercase. This API is specific for
     * void elements and must not be used for foreign elements. For more information, see {@link https://www.w3.org/TR/html5/syntax.html#void-elements}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    voidStart(
      /**
       * Tag name of the HTML element
       */
      sTagName: string,
      /**
       * Control instance or ID to identify the element
       */
      vControlOrId?: UI5Element | ID
    ): this;
    /**
     * @deprecated (since 1.92) - Instead, use the {@link sap.ui.core.RenderManager Semantic Rendering API}.
     * There is no 1:1 replacement for `write`. Typically, `write` is used to create a longer sequence of HTML
     * markup (e.g. an element with attributes and children) in a single call. Such a markup sequence has to
     * be split into the individual calls of the Semantic Rendering API.
     *
     *
     *
     * Example:
     *  oRm.write("<span id=\"" + oCtrl.getId() + "-outer\" class=\"myCtrlOuter\">" + "&nbsp;" + oResourceBundle.getText("TEXT_KEY")
     * + "&nbsp;</span>");
     *
     *  has to be transformed to
     *
     *  oRm.openStart("span", oCtrl.getId() + "-outer").class("myCtrlOuter").openEnd().text("\u00a0" + oResourceBundle.getText("TEXT_KEY")
     * + "\u00a0").close("span");
     *
     *  Note that "&nbsp;" was replaced with "\u00a0" (no-break-space). In general, HTML entities have to
     * be replaced by the corresponding Unicode character escapes. A mapping table can be found at {@link https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references}.
     *
     * Write the given texts to the buffer.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    write(
      /**
       * (can be a number too)
       */
      sText: string | number
    ): this;
    /**
     * @deprecated (since 1.1) - never has been implemented - DO NOT USE
     *
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeAcceleratorKey(): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#accessibilityState} of the {@link
     * sap.ui.core.RenderManager Semantic Rendering API}.
     *
     * Collects accessibility related attributes for an `Element` and renders them as part of the currently
     * rendered DOM element.
     *
     * See the WAI-ARIA specification for a general description of the accessibility related attributes. Attributes
     * are only rendered when the accessibility feature is activated in the UI5 runtime configuration.
     *
     * The values for the attributes are collected from the following sources (last one wins):
     * 	 - from the properties and associations of the given `oElement`, using a heuristic mapping (described
     * 			below)
     * 	 - from the `mProps` parameter, as provided by the caller
     * 	 - from the parent of the given `oElement`, if it has a parent and if the parent implements the method
     * 			{@link sap.ui.core.Element#enhanceAccessibilityState enhanceAccessibilityState}  If no `oElement`
     * 			is given, only `mProps` will be taken into account.
     *
     * Heuristic Mapping: The following mapping from properties/values to ARIA attributes is used (if the element
     * does have such properties):
     * 	 - `editable===false` => `aria-readonly="true"`
     * 	 - `enabled===false` => `aria-disabled="true"`
     * 	 - `visible===false` => `aria-hidden="true"`
     * 	 - `required===true` => `aria-required="true"`
     * 	 - `selected===true` => `aria-selected="true"`
     * 	 - `checked===true` => `aria-checked="true"`
     *
     * In case of the `required` property, all label controls which reference the given element in their `labelFor`
     * relation are additionally taken into account when determining the value for the `aria-required` attribute.
     *
     * Additionally, the associations `ariaDescribedBy` and `ariaLabelledBy` are used to determine the lists
     * of IDs for the ARIA attributes `aria-describedby` and `aria-labelledby`.
     *
     * Label controls that reference the given element in their `labelFor` relation are automatically added
     * to the `aria-labelledby` attribute.
     *
     * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
     * have to check whether it fulfills their requirements. In case of problems (for example the `RadioButton`
     * has a `selected` property but must provide an `aria-checked` attribute) the auto-generated result of
     * this function can be influenced via the parameter `mProps` as described below.
     *
     * The parameter `mProps` can be used to either provide additional attributes which should be rendered and/or
     * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically
     * to the keys (Exception: Attribute `role` does not get the prefix 'aria-').
     *
     * Examples:
     *  `{hidden : true}` results in `aria-hidden="true"` independent of the presence or absence of the visibility
     * property.
     *  `{hidden : null}` ensures that no `aria-hidden` attribute is written independent of the presence or
     * absence of the visibility property.
     *
     *
     * The function behaves in the same way for the associations `ariaDescribedBy` and `ariaLabelledBy`. To
     * append additional values to the auto-generated `aria-describedby` and `aria-labelledby` attributes, the
     * following format can be used:
     * ```javascript
     *
     *   {describedby : {value: "id1 id2", append: true}} =>  aria-describedby = "ida idb id1 id2"
     * ```
     *  (assuming that "ida idb" is the auto-generated part based on the association `ariaDescribedBy`).
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeAccessibilityState(
      /**
       * The `Element` whose accessibility state should be rendered
       */
      oElement?: UI5Element,
      /**
       * A map of additional properties that should be added or changed.
       */
      mProps?: object
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#attr} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Writes the attribute and its value into the HTML.
     *
     * For details about the escaping refer to {@link sap/base/security/encodeXML}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeAttribute(
      /**
       * Name of the attribute
       */
      sName: string,
      /**
       * Value of the attribute
       */
      vValue: string | number | boolean
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#attr} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Writes the attribute and a value into the HTML, the value will be encoded.
     *
     * The value is properly encoded to avoid XSS attacks.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeAttributeEscaped(
      /**
       * Name of the attribute
       */
      sName: string,
      /**
       * Value of the attribute
       */
      vValue: any
    ): this;
    /**
     * @deprecated (since 1.92) - Not longer needed, when using the {@link sap.ui.core.RenderManager Semantic
     * Rendering API} the actual writing of classes happens when {@link sap.ui.core.RenderManager#openEnd} or
     * {@link sap.ui.core.RenderManager#voidEnd} are used.
     *
     * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
     * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes
     * are added by default from the currently rendered control. If an oElement is given, this Element's custom
     * style classes are added instead. If oElement === false, no custom style classes are added.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeClasses(
      /**
       * an Element from which to add custom style classes (instead of adding from the control itself)
       */
      oElement?: UI5Element | boolean
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#openStart} or {@link sap.ui.core.RenderManager#voidStart}
     * of the {@link sap.ui.core.RenderManager Semantic Rendering API} and pass the desired control data as
     * the second parameter to the new API.
     *
     * Writes the controls data into the HTML. Control Data consists at least of the id of a control
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeControlData(
      /**
       * the control whose identifying information should be written to the buffer
       */
      oControl: Control
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#openStart} or {@link sap.ui.core.RenderManager#voidStart}
     * of the {@link sap.ui.core.RenderManager Semantic Rendering API} and pass the desired element data as
     * the second parameter to the new API.
     *
     * Writes the elements data into the HTML. Element Data consists at least of the id of an element
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeElementData(
      /**
       * the element whose identifying information should be written to the buffer
       */
      oElement: UI5Element
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#text} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Escape text for HTML and write it to the buffer.
     *
     * For details about the escaping refer to {@link sap/base/security/encodeXML}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeEscaped(
      /**
       * the text to escape
       */
      sText: any,
      /**
       * Whether to convert line breaks into
       *  tags
       */
      bLineBreaks?: boolean
    ): this;
    /**
     * @deprecated (since 1.92) - Instead use {@link sap.ui.core.RenderManager#icon} of the {@link sap.ui.core.RenderManager
     * Semantic Rendering API}.
     *
     * Writes either an <img> tag for normal URI or a <span> tag with needed properties for an icon
     * URI.
     *
     * Additional classes and attributes can be added to the tag with the second and third parameter. All of
     * the given attributes are escaped for security consideration.
     *
     * When an <img> tag is rendered, the following two attributes are added by default and can be overwritten
     * with corresponding values in the `mAttributes` parameter:
     * 	 - `role: "presentation"` `alt: ""`
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeIcon(
      /**
       * URI of an image or of an icon registered in {@link sap.ui.core.IconPool}
       */
      sURI: URI,
      /**
       * Additional classes that are added to the rendered tag
       */
      aClasses?: any[] | string,
      /**
       * Additional attributes that will be added to the rendered tag
       */
      mAttributes?: object
    ): this;
    /**
     * @deprecated (since 1.92) - Not longer needed, when using the {@link sap.ui.core.RenderManager Semantic
     * Rendering API} the actual writing of styles happens when {@link sap.ui.core.RenderManager#openEnd} or
     * {@link sap.ui.core.RenderManager#voidEnd} are used.
     *
     * Writes and flushes the style collection
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    writeStyles(): this;
  }
}

declare module "sap/ui/core/ResizeHandler" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  import Control from "sap/ui/core/Control";

  /**
   * Regularly checks the width and height of registered DOM elements or controls and fires resize events
   * to registered listeners when a change is detected.
   *
   * **Note**: The public usage of the constructor is deprecated since 1.103.0. Please use the static methods
   * of the module export only and do not expect the module export to be a class (do not subclass it, do not
   * create instances, do not call inherited methods).
   */
  export default class ResizeHandler extends BaseObject {
    constructor();

    /**
     * Deregisters a previously registered handler for resize events with the given registration ID.
     */
    static deregister(
      /**
       * The registration ID of the handler to deregister. The ID was provided by function {@link sap.ui.core.ResizeHandler.register}
       * when the handler was registered.
       */
      sId: string
    ): void;
    /**
     * @deprecated (since 1.110) - As the class nature of ResizeHandler is deprecated since 1.103, the `extend`
     * method shouldn't be called either
     *
     * Creates a new subclass of class `sap.ui.core.ResizeHandler`.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResizeHandler>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.110) - As the class nature of ResizeHandler is deprecated since 1.103, the `getMetadata`
     * method shouldn't be called either
     *
     * Returns a metadata object for class `sap.ui.core.ResizeHandler`.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Registers the given event handler for resize events on the given DOM element or control.
     *
     * **Note:** This function must not be used before the UI5 framework is initialized. Please use the {@link
     * sap.ui.core.Core#attachInit init event} of UI5 if you are not sure whether this is the case.
     *
     * The resize handler periodically checks the dimensions of the registered reference. Whenever it detects
     * changes, an event is fired. Be careful when changing dimensions within the event handler which might
     * cause another resize event and so on.
     *
     * The available parameters of the resize event are:
     * 	 - `oEvent.target`: The DOM element of which the dimensions were checked
     * 	 - `oEvent.size.width`: The current width of the DOM element in pixels
     * 	 - `oEvent.size.height`: The current height of the DOM element in pixels
     * 	 - `oEvent.oldSize.width`: The previous width of the DOM element in pixels
     * 	 - `oEvent.oldSize.height`: The previous height of the DOM element in pixels
     * 	 - `oEvent.control`: The control which was given during registration of the event handler (if present)
     *
     *
     * @returns A registration ID which can be used for deregistering the event handler, see {@link sap.ui.core.ResizeHandler.deregister}.
     * If the UI5 framework is not yet initialized `null` is returned.
     */
    static register(
      /**
       * The control or the DOM reference for which the given event handler should be registered (beside the window)
       */
      oRef: Element | Control,
      /**
       * The event handler which should be called whenever the size of the given reference is changed. The event
       * object is passed as first argument to the event handler. See the description of this function for more
       * details about the available parameters of this event.
       */
      fnHandler: Function
    ): string | null;
  }
}

declare module "sap/ui/core/routing/HashChanger" {
  import HashChangerBase from "sap/ui/core/routing/HashChangerBase";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Class for manipulating and receiving changes of the browser hash with the hasher framework.
   *
   * Fires a `hashChanged` event if the browser hash changes.
   */
  export default class HashChanger extends HashChangerBase {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.routing.HashChanger with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.routing.HashChangerBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HashChanger>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked
     * for the first time.
     *
     * @returns The global HashChanger
     */
    static getInstance(): HashChanger;
    /**
     * Returns a metadata object for class sap.ui.core.routing.HashChanger.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the
     * new one
     */
    static replaceHashChanger(
      /**
       * the new instance for the global singleton
       */
      oHashChanger: HashChanger
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Cleans the event registration
     * See:
     * 	sap.ui.base.Object.prototype.destroy
     */
    destroy(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires the hashchanged event, may be extended to modify the hash before fireing the event
     */
    fireHashChanged(
      /**
       * the new hash of the browser
       */
      sNewHash: string,
      /**
       * the previous hash
       */
      sOldHash: string
    ): void;
    /**
     * Gets the current hash
     *
     * @returns the current hash
     */
    getHash(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Defines the events and its parameters which should be used for tracking the hash changes
     *
     * @returns The array containing the events info
     */
    getRelevantEventsInfo(): HashChangerEventInfo[];
    /**
     * Will start listening to hashChanges with the parseHash function. This will also fire a hashchanged event
     * with the initial hash.
     *
     * @returns false if it was initialized before, true if it was initialized the first time
     */
    init(): boolean;
    /**
     * Replaces the hash with a certain value. When using the replace function, no browser history entry is
     * written. If you want to have an entry in the browser history, please use the {@link #setHash} function.
     */
    replaceHash(
      /**
       * New hash
       */
      sHash: string
    ): void;
    /**
     * Sets the hash to a certain value. When using this function, a browser history entry is written. If you
     * do not want to have an entry in the browser history, please use the {@link #replaceHash} function.
     */
    setHash(
      /**
       * New hash
       */
      sHash: string
    ): void;
  }
  /**
   * @SINCE 1.82.0
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * The object containing the event info for the events that are forwarded to {@link sap.ui.core.routing.RouterHashChanger}.
   */
  export type HashChangerEventInfo = {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The name of the event that is fired by the HashChanger and should be forwarded to the RouterHashChanger
     */
    name: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The optional defined parameter name mapping that is used for forwarding the event to the {@link sap.ui.core.routing.RouterHashChanger}.
     */
    paramMapping?: HashChangerEventParameterMapping;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Indicates whether the event is ignored by every RouterHashChanger instance and is only relevant for the
     * other routing classes, for example {@link sap.ui.core.routing.History}.
     */
    updateHashOnly: boolean;
  };

  /**
   * @SINCE 1.82.0
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * The object containing the parameter mapping for forwarding the event to the {@link sap.ui.core.routing.RouterHashChanger}.
   */
  export type HashChangerEventParameterMapping = {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The name of the parameter whose value is used as the `newHash` parameter in the event that is forwarded
     * to the {@link sap.ui.core.routing.RouterHashChanger}. If this isn't set, the value is taken from the
     * property `newHash`.
     */
    newHash?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The name of the parameter whose value is used as the `oldHash` parameter in the event that is forwarded
     * to the {@link sap.ui.core.routing.RouterHashChanger}. If this isn't set, the value is taken from the
     * property `oldHash`.
     */
    oldHash?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * The name of the parameter whose value is used as the `fullHash` parameter in the event that is forwarded
     * to the {@link sap.ui.core.routing.RouterHashChanger}. If this isn't set, the value is taken from the
     * property `fullHash`.
     */
    fullHash?: string;
  };
}

declare module "sap/ui/core/routing/HashChangerBase" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Metadata from "sap/ui/base/Metadata";

  import { routing } from "sap/ui/core/library";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Base Class for manipulating and receiving changes of hash segment.
   *
   * Fires a `hashChanged` event if the relevant hash changes.
   */
  export default class HashChangerBase extends EventProvider {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.core.routing.HashChangerBase with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HashChangerBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.core.routing.HashChangerBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Replaces the hash with a certain value. When using the replace function, no browser history entry is
     * written. If you want to have an entry in the browser history, please use the {@link #setHash} function.
     *
     * The `sDirection` parameter can be used to provide direction information on the navigation which leads
     * to this hash replacement. This is typically used when synchronizing the hashes between multiple frames
     * to provide information to the frame where the hash is replaced with the navigation direction in the other
     * frame where the navigation occurs.
     */
    replaceHash(
      /**
       * New hash
       */
      sHash: string,
      /**
       * The direction information for this hash replacement
       */
      sDirection:
        | routing.HistoryDirection
        | keyof typeof routing.HistoryDirection
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the hash to a certain value. When using this function, a browser history entry is written. If you
     * do not want to have an entry in the browser history, please use the {@link #replaceHash} function.
     */
    setHash(
      /**
       * New hash
       */
      sHash: string
    ): void;
  }
}

declare module "sap/ui/core/routing/History" {
  import HashChanger from "sap/ui/core/routing/HashChanger";

  import { routing } from "sap/ui/core/library";

  export default class History {
    /**
     * Used to determine the {@link sap.ui.core.routing.HistoryDirection} of the current or a future navigation,
     * done with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.
     *
     * **ATTENTION:** this class will not be accurate if someone does hash-replacement without the named classes
     * above. If you are manipulating the hash directly, this class is not supported anymore.
     */
    constructor(
      /**
       * required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
       */
      oHashChanger: HashChanger
    );

    /**
     *
     * @returns a global singleton that gets created as soon as the sap.ui.core.routing.History is required
     */
    static getInstance(): History;
    /**
     * Determines what the navigation direction for a newly given hash would be It will say Unknown if there
     * is a history foo - bar (current history) - foo If you now ask for the direction of the hash "foo" you
     * get Unknown because it might be backwards or forwards. For hash replacements, the history stack will
     * be replaced at this position for the history.
     *
     * @returns Direction for the given hash or `undefined`, if no navigation has taken place yet.
     */
    getDirection(
      /**
       * optional, if this parameter is not passed the last hashChange is taken.
       */
      sNewHash?: string
    ):
      | (routing.HistoryDirection | keyof typeof routing.HistoryDirection)
      | undefined;
    /**
     * @SINCE 1.70
     *
     * Returns the length difference between the history state stored in browser's pushState and the state maintained
     * in this class.
     *
     * The function returns `undefined` when
     * 	 - The current state in browser's history pushState isn't initialized, for example, between a new hash
     * 			is set or replaced and the "hashChange" event is processed by this class
     * 	 - History pushState is already used before UI5 History is initialized, and UI5 can't maintain the hash
     * 			history by using the browser pushState
     *
     * Once the "hashChange" event is processed by this class, this method always returns 0. However, before
     * a "hashChange" event reaches this class, it returns the offset between the new hash and the previous
     * one within the history state.
     *
     * @returns The length difference or returns `undefined` when browser pushState can't be used at the moment
     * when this function is called
     */
    getHistoryStateOffset(): int | undefined;
    /**
     * Gets the previous hash in the history.
     *
     * If the last direction was Unknown or there was no navigation yet, `undefined` will be returned.
     *
     * @returns Previous hash in the history or `undefined`
     */
    getPreviousHash(): string | undefined;
  }
}

declare module "sap/ui/core/routing/Route" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Router from "sap/ui/core/routing/Router";

  import Metadata from "sap/ui/base/Metadata";

  export default class Route extends EventProvider {
    /**
     * Instantiates a route
     */
    constructor(
      /**
       * Router instance to which the route will be added
       */
      oRouter: Router,
      /**
       * Configuration object for the route
       */
      oConfig: {
        /**
         * Name of the route, it will be used to retrieve the route from the router, it needs to be unique per router
         * instance
         */
        name: string;
        /**
         * URL pattern where it needs to match again. A pattern may consist of the following:
         * 	 -  hardcoded parts: "pattern" : "product/settings" - this pattern will only match if the hash of the
         * 			browser is product/settings and no arguments will be passed to the events of the route.
         *
         * 	 -  mandatory parameters: "pattern" : "product/{id}" - {id} is a mandatory parameter, e. g. the following
         * 			hashes would match: product/5, product/3. The pattenMatched event will get 5 or 3 passed as id in its
         * 			arguments.The hash product/ will not match.
         *
         * 	 -  optional parameters: "pattern" : "product/{id}/detail/:detailId:" - :detailId: is an optional parameter,
         * 			e. g. the following hashes would match: product/5/detail, product/3/detail/2
         *
         * 	 -  query parameters: "pattern" : "product{?query}" // {?query} allows you to pass queries with any
         * 			parameters, e. g. the following hashes would match: product?first=firstValue, product?first=firstValue&second=secondValue
         *    rest as string parameters: "pattern" : ":all*:" - this pattern will define an optional variable
         * that will pass the whole hash as string to the routing events. It may be used to define a catchall route,
         * e. g. the following hashes would match: foo, product/5/3, product/5/detail/3/foo. You can also combine
         * it with the other variables but make sure a variable with a * is the last one.
         */
        pattern?: string;
        /**
         * Since 1.27. By default only the first route matching the hash, will fire events. If greedy is turned
         * on for a route, its events will be fired even if another route has already matched.
         */
        greedy?: boolean;
        /**
         * Since 1.32. This property contains the information about the route which nests this route in the form:
         * "[componentName:]routeName". The nesting routes pattern will be prefixed to this routes pattern and hence
         * the nesting route also matches if this one matches.
         */
        parent?: string;
        /**
         * One or multiple name of targets {@link sap.ui.core.routing.Targets}. As soon as the route matches, the
         * target(s) will be displayed. All the deprecated parameters are ignored, if a target is used.
         */
        target?: string | string[];
        /**
         * **Deprecated since 1.28, use `target.viewName` instead.**
         *  The name of a view that will be created, the first time this route will be matched. To place the view
         * into a Control use the targetAggregation and targetControl. Views will only be created once per Router
         */
        view?: string;
        /**
         * **Deprecated since 1.28, use `target.viewType` instead.**
         *  The type of the view that is going to be created. eg: "XML", "JS"
         */
        viewType?: string;
        /**
         * **Deprecated since 1.28, use `target.viewPath` instead.**
         *  A prefix that will be prepended in front of the view eg: view is set to "myView" and viewPath is set
         * to "myApp" - the created view will be "myApp.myView"
         */
        viewPath?: string;
        /**
         * **Deprecated since 1.28, use `config.rootView` (only available in the router config) instead.**
         *  The id of the parent of the targetControl - This should be the id view your targetControl is located
         * in. By default, this will be the view created by a component, or if the Route is a subroute the view
         * of the parent route is taken. You only need to specify this, if you are not using a router created by
         * a component on your top level routes
         */
        targetParent?: string;
        /**
         * **Deprecated since 1.28, use `target.controlId` instead.**
         *  Views will be put into a container Control, this might be an {@link sap.ui.ux3.Shell} control or an
         * {@link sap.m.NavContainer} if working with mobile, or any other container. The id of this control has
         * to be put in here
         */
        targetControl?: string;
        /**
         * **Deprecated since 1.28, use `target.controlAggregation` instead.**
         *  The name of an aggregation of the targetControl, that contains views. Eg: an {@link sap.m.NavContainer}
         * has an aggregation "pages", another Example is the {@link sap.ui.ux3.Shell} it has "content".
         */
        targetAggregation?: string;
        /**
         * **Deprecated since 1.28, use `target.clearControlAggregation` instead.**
         *  Defines a boolean that can be passed to specify if the aggregation should be cleared before adding the
         * View to it. When using an {@link sap.ui.ux3.Shell} this should be true. For an {@link sap.m.NavContainer}
         * it should be false
         */
        clearTarget?: boolean;
        /**
         * **Deprecated since 1.28, use `targets.parent` instead.** one or multiple route configs taking all of
         * these parameters again. If a subroute is hit, it will fire the routeMatched event for all its parents.
         * The routePatternMatched event will only be fired for the subroute not the parents. The routing will also
         * display all the targets of the subroutes and its parents.
         */
        subroutes?: object;
      },
      /**
       * The parent route - if a parent route is given, the routeMatched event of this route will also trigger
       * the route matched of the parent and it will also create the view of the parent(if provided).
       */
      oParent?: Route
    );

    /**
     * Creates a new subclass of class sap.ui.core.routing.Route with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Route>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.routing.Route.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.46.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeMatched beforeMatched} event of this `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `Route` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeMatched beforeMatched} event of this `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `Route` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:matched matched} event of this `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Route` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:matched matched} event of this `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Route` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:patternMatched patternMatched} event of this
     * `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPatternMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `Route` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:patternMatched patternMatched} event of this
     * `sap.ui.core.routing.Route`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Route` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPatternMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `Route` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys a route
     *
     * @returns this for chaining.
     */
    destroy(): Route;
    /**
     * @SINCE 1.46.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:beforeMatched beforeMatched} event of this
     * `sap.ui.core.routing.Route`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:matched matched} event of this `sap.ui.core.routing.Route`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.25.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:patternMatched patternMatched} event of this
     * `sap.ui.core.routing.Route`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPatternMatched(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeMatched beforeMatched} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeMatched(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): Router;
    /**
     * Returns the pattern of the route. If there are multiple patterns, the first pattern is returned
     *
     * @returns the routes pattern
     */
    getPattern(): string;
    /**
     * Returns the URL for the route and replaces the placeholders with the values in oParameters
     *
     * @returns the unencoded pattern with interpolated arguments
     */
    getURL(
      /**
       * Parameters for the route
       */
      oParameters: object
    ): string;
    /**
     * @SINCE 1.58.0
     *
     * Returns whether the given hash can be matched by the Route
     *
     * @returns whether the hash can be matched
     */
    match(
      /**
       * which will be tested by the Route
       */
      sHash: string
    ): boolean;
  }
}

declare module "sap/ui/core/routing/Router" {
  import EventProvider from "sap/ui/base/EventProvider";

  import UIComponent from "sap/ui/core/UIComponent";

  import Route from "sap/ui/core/routing/Route";

  import RouterHashChanger from "sap/ui/core/routing/RouterHashChanger";

  import Metadata from "sap/ui/base/Metadata";

  import Target from "sap/ui/core/routing/Target";

  import Targets from "sap/ui/core/routing/Targets";

  import View from "sap/ui/core/mvc/View";

  import Views from "sap/ui/core/routing/Views";

  export type RouteInfo = {
    /**
     * The route name
     */
    name: string;
    /**
     * The route data
     */
    arguments: Record<string, string>;
  };

  export default class Router extends EventProvider {
    /**
     * Instantiates a router
     */
    constructor(
      /**
       * may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.
       *  Each of the routes contained in the array/object will be added to the router.
       *
       *
       * One way of defining routes is an array:
       * ```javascript
       *
       * [
       *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
       *     {
       *         name: "firstRoute"
       *         pattern : "usefulPattern"
       *     },
       *     //Will create a route called 'anotherRoute' for displaying the target 'targetView' which is defined in 'oTargets'
       *     {
       *         name: "anotherRoute"
       *         pattern : "anotherPattern",
       *         target: "targetView"
       *     },
       *     //Will create a route for displaying a nested component which is defined in 'oTargets' with the prefix 'componentPrefix'
       *     {
       *         pattern: "componentPattern",
       *         name: "componentRoute",
       *         target: [
       *              {
       *                  name: "subComponent",
       *                  prefix: "componentPrefix"
       *              }
       *         ]
       *     }
       * ]
       * ```
       *
       *
       * The alternative way of defining routes is an Object.
       *  If you choose this way, the name attribute is the name of the property.
       * ```javascript
       *
       * {
       *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
       *     firstRoute : {
       *         pattern : "usefulPattern"
       *     },
       *     //Will create a route called 'anotherRoute' for displaying the target 'targetView' which is defined in 'oTargets'
       *     anotherRoute : {
       *         pattern : "anotherPattern",
       *         target: "targetView"
       *     },
       *     //Will create a route for displaying a nested component which is defined in 'oTargets' with the prefix 'componentPrefix'
       *     componentRoute{
       *         pattern: "componentPattern",
       *         target: [
       *              {
       *                  name: "subComponent",
       *                  prefix: "componentPrefix"
       *              }
       *         ]
       *     }
       * }
       * ```
       *  The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}
       */
      oRoutes?: object | object[],
      /**
       * Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.
       *  This config will be used for routes and for targets, used in the router
       *  Eg: if the config object specifies:
       * ```javascript
       *
       * {
       *     viewType: "XML"
       * }
       * ```
       *  The targets look like this:
       * ```javascript
       *
       * {
       *     xmlTarget : {
       *         ...
       *     },
       *     jsTarget : {
       *         viewType : "JS"
       *         ...
       *     }
       * }
       * ```
       *  Then the effective config will look like this:
       * ```javascript
       *
       * {
       *     xmlTarget : {
       *         viewType : "XML"
       *         ...
       *     },
       *     jsTarget : {
       *         viewType : "JS"
       *         ...
       *     }
       * }
       * ```
       *
       *
       * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget
       * is specifying it, so the viewType will be JS.
       */
      oConfig?: {
        /**
         * Since 1.28. Settings which are used when no route of the router is matched after a hash change.
         */
        bypassed?: {
          /**
           * Since 1.28. One or multiple names of targets that will be displayed, if no route of the router is matched.
           *  A typical use case is a not found page.
           *  The current hash will be passed to the display event of the target.
           *  **Example:**
           * ```javascript
           *
           *     new Router(
           *     // Routes
           *     [
           *         // Any route here
           *     ],
           *     {
           *         bypassed: {
           *             // you will find this name in the target config
           *             target: "notFound"
           *         }
           *     },
           *     // You should only use this constructor when you are not using a router with a component. Please use the metadata of a component to define your routes and targets. The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
           *     null,
           *     // Target config
           *     {
           *          //same name as in the config.bypassed.target
           *          notFound: {
           *              type: "View"
           *              name: "notFound",
           *              ...
           *              // more properties to place the view in the correct container
           *          }
           *     });
           * ```
           */
          target?: string | string[];
        };
        /**
         * Since 1.34. Whether views are loaded asynchronously within this router instance. As of 1.90 synchronous
         * routing is deprecated. Therefore, you should explicitly set `oConfig.async` to `true`.
         */
        async?: boolean;
      },
      /**
       * the Component of all the views that will be created by this Router,
       *  will get forwarded to the {@link sap.ui.core.routing.Views#constructor}.
       *  If you are using the componentMetadata to define your routes you should skip this parameter.
       */
      oOwner?: UIComponent,
      /**
       * Since 1.28 the target configuration, see {@link sap.ui.core.routing.Targets#constructor} documentation
       * (the options object).
       *  You should use Targets to create and display views. Since 1.28 the route should only contain routing
       * relevant properties.
       *  **Example:**
       * ```javascript
       *
       *     new Router(
       *     // Routes
       *     [
       *         {
       *             // no view creation related properties are in the route
       *             name: "startRoute",
       *             //no hash
       *             pattern: "",
       *             // you can find this target in the targetConfig
       *             target: "welcome"
       *         }
       *     ],
       *     // Default values shared by routes and Targets
       *     {
       *         path: "my.application.namespace",
       *         viewType: "XML"
       *     },
       *     // You should only use this constructor when you are using a router without a component.
       *     // Please use the metadata of a component to define your routes and targets.
       *     // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
       *     null,
       *     // Target config
       *     {
       *          //same name as in the route called 'startRoute'
       *          welcome: {
       *              // All properties for creating and placing a view go here or in the config
       *              type: "View",
       *              name: "Welcome",
       *              controlId: "app",
       *              controlAggregation: "pages"
       *          }
       *     })
       * ```
       */
      oTargetsConfig?: object
    );

    /**
     * Creates a new subclass of class sap.ui.core.routing.Router with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Router>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.routing.Router.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Get a registered router.
     *
     * @returns The router with the specified name, else `undefined`
     */
    static getRouter(
      /**
       * Name of the router
       */
      sName: string
    ): Router | undefined;
    /**
     * Adds a route to the router.
     */
    addRoute(
      /**
       * Configuration object for the route @see sap.ui.core.routing.Route#constructor
       */
      oConfig: object,
      /**
       * The parent route - if a parent route is given, the `routeMatched` event of this route will also trigger
       * the `routeMatched` of the parent and it will also create the view of the parent (if provided).
       */
      oParent: Route
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRouteMatched beforeRouteMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRouteMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRouteMatched beforeRouteMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRouteMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:bypassed bypassed} event of this `sap.ui.core.routing.Router`.
     *
     * The event will get fired, if none of the routes of the router is matching.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBypassed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:bypassed bypassed} event of this `sap.ui.core.routing.Router`.
     *
     * The event will get fired, if none of the routes of the router is matching.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBypassed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:routeMatched routeMatched} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRouteMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:routeMatched routeMatched} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRouteMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:routePatternMatched routePatternMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * This event is similar to `routeMatched`. But it will only fire for the route that has a matching pattern,
     * not for its parent routes.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRoutePatternMatched(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:routePatternMatched routePatternMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * This event is similar to `routeMatched`. But it will only fire for the route that has a matching pattern,
     * not for its parent routes.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRoutePatternMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitleChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitleChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.28) - use {@link #getViews} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:viewCreated viewCreated} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachViewCreated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.28) - use {@link #getViews} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:viewCreated viewCreated} event of this `sap.ui.core.routing.Router`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Router` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachViewCreated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `sap.ui.core.routing.Router` itself
       */
      oListener?: object
    ): this;
    /**
     * Removes the router from the hash changer.
     *
     * See {@link sap.ui.core.routing.HashChanger}.
     *
     * @returns this for chaining.
     */
    destroy(): Router;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeRouteMatched beforeRouteMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeRouteMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:bypassed bypassed} event of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * The event will get fired, if none of the routes of the router is matching.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBypassed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:routeMatched routeMatched} event of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRouteMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:routePatternMatched routePatternMatched} event
     * of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * This event is similar to `routeMatched`. But it will only fire for the route that has a matching pattern,
     * not for its parent routes.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRoutePatternMatched(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachTitleChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * @deprecated (since 1.28) - use {@link #getViews} instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:viewCreated viewCreated} event of this `sap.ui.core.routing.Router`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachViewCreated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeRouteMatched beforeRouteMatched} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeRouteMatched(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:bypassed bypassed} to attached listeners.
     *
     * The event will get fired, if none of the routes of the router is matching.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBypassed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:routeMatched routeMatched} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRouteMatched(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:routePatternMatched routePatternMatched} to attached listeners.
     *
     * This event is similar to `routeMatched`. But it will only fire for the route that has a matching pattern,
     * not for its parent routes.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRoutePatternMatched(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @deprecated (since 1.28) - use {@link #getViews} instead.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:viewCreated viewCreated} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireViewCreated(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @SINCE 1.75
     *
     * Returns the hash changer instance which is used in the router.
     *
     * This hash changer behaves differently than the hash changer that is returned by {@link sap.ui.core.routing.HashChanger.getInstance},
     * especially when the router is created in a component which is nested within another component. When this
     * hash changer is used, the other hash parts which belong to the parent components are kept in the browser
     * hash, while the complete browser hash is changed when it's changed by using the {@link sap.ui.core.routing.HashChanger.getInstance}.
     *
     * @returns The hash changer
     */
    getHashChanger(): RouterHashChanger;
    /**
     * @SINCE 1.25.1
     *
     * Returns the route with the given name or `undefined` if no route is found.
     *
     * @returns Route with the provided name or `undefined`.
     */
    getRoute(
      /**
       * Name of the route
       */
      sName: string
    ): Route | undefined;
    /**
     * @SINCE 1.75
     *
     * Returns a route info object containing the name and arguments of the route which matches the given hash
     * or `undefined`.
     *
     * @returns An object containing the route `name` and the `arguments` or `undefined`
     */
    getRouteInfoByHash(
      /**
       * The hash to be matched
       */
      sHash: string
    ): RouteInfo | undefined;
    /**
     * Returns a target by its name.
     *
     * If you pass `myTarget: { view: "myView" })` in the config, `myTarget` is the name. See {@link sap.ui.core.routing.Targets#getTarget}.
     *
     * @returns Target with the corresponding name or `undefined`. If an array of names was passed, this will
     * return an array with all found targets. Non existing targets will not be returned but will log an error.
     */
    getTarget(
      /**
       * Name of a single target or an array of names of multiple targets
       */
      vName: string | string[]
    ): Target | undefined | Target[];
    /**
     * Returns the instance of `sap.ui.core.routing.Targets`, if you passed a `targets` configuration to the
     * router.
     *
     * @returns Instance of `Targets` which the router uses to place views or `undefined` if you did not specify
     * the `targets` parameter in the router's constructor.
     */
    getTargets(): Targets | undefined;
    /**
     * Returns the title history.
     *
     * History entry example:
     * ```javascript
     *
     * 	{
     * 		title: "TITLE", // The displayed title
     * 		hash: "HASH" // The url hash
     * 		isHome: "true/false" // The app home indicator
     * 	}
     * ```
     *
     *
     * @returns An array which contains the history entries.
     */
    getTitleHistory(): any[];
    /**
     * Returns the URL for the route and replaces the placeholders with the values in `oParameters`.
     *
     * @returns The unencoded pattern with interpolated arguments or `undefined` if no matching route can be
     * determined
     */
    getURL(
      /**
       * Name of the route
       */
      sName: string,
      /**
       * Parameters for the route
       */
      oParameters?: object
    ): string | undefined;
    /**
     * @deprecated (since 1.28.1) - use {@link #getViews} instead.
     *
     * Returns a cached view for a given name or creates it if it does not exist yet.
     *
     * @returns The view instance
     */
    getView(
      /**
       * Name of the view
       */
      sViewName: string,
      /**
       * Type of the view
       */
      sViewType: string,
      /**
       * Optional view id
       */
      sViewId: string
    ): View;
    /**
     * @SINCE 1.28
     *
     * Returns the `sap.ui.core.routing.Views` instance created by the router.
     *
     * @returns the Views instance
     */
    getViews(): Views;
    /**
     * Attaches the router to the hash changer.
     *
     * See {@link sap.ui.core.routing.HashChanger}.
     *
     * @returns this for chaining.
     */
    initialize(
      /**
       * Since 1.48.0. Whether the current URL hash shouldn't be parsed after the router is initialized
       */
      bIgnoreInitialHash?: boolean
    ): this;
    /**
     * @SINCE 1.62
     *
     * Returns whether the router is initialized by calling {@link sap.ui.core.routing.Router#initialize} function.
     *
     * @returns Whether the router is initialized
     */
    isInitialized(): boolean;
    /**
     * @SINCE 1.62
     *
     * Returns whether the router is stopped by calling {@link sap.ui.core.routing.Router#stop} function.
     *
     * @returns Whether the router is stopped
     */
    isStopped(): boolean;
    /**
     * @SINCE 1.58.0
     *
     * Returns whether the given hash can be matched by any of the routes in the router.
     *
     * @returns Whether the hash can be matched
     */
    match(
      /**
       * which will be tested by the Router
       */
      sHash: string
    ): boolean;
    /**
     * Navigates to a specific route defining a set of parameters.
     *
     * The parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be
     * encoded. If you want to use special characters in your `oParameters`, you have to encode them (encodeURIComponent).
     *
     * If the given route name can't be found, an error message is logged to the console and the hash will be
     * changed to the empty string.
     *
     * This method excecutes following steps: 1. Interpolates the pattern with the given parameters 2. Sets
     * the interpolated pattern to the browser's hash 3. Reacts to the browser's `hashchange` event to find
     * out the route which matches the hash
     *
     * If there are multiple routes that have the same pattern, the call of navTo with a specific route won't
     * necessarily trigger the matching process of this route. In the end, the first route in the router configuration
     * list that matches the browser hash will be chosen.
     *
     * If the browser hash is already set with the interpolated pattern from the navTo call, nothing will happen
     * because the browser won't fire `hashchange` event in this case.
     *
     * @returns this for chaining.
     */
    navTo(
      /**
       * The name of the route
       */
      sName: string,
      /**
       * The parameters for the route. As of Version 1.75 the recommendation is naming the query parameter with
       * a leading "?" character, which is identical to the definition in the route's pattern. The old syntax
       * without a leading "?" character is deprecated. e.g. **Route:** `{parameterName1}/:parameterName2:/{?queryParameterName}`
       * **Parameter:**
       * ```javascript
       *
       * 				{
       * 					parameterName1: "parameterValue1",
       * 					parameterName2: "parameterValue2",
       * 					"?queryParameterName": {
       * 						queryParameterName1: "queryParameterValue1"
       * 					}
       * 				}
       * 				```
       */
      oParameters?: object,
      /**
       * Information for route name and parameters of the router in nested components. When any target of the
       * route which is specified with the `sName` parameter loads a component and a route of this component whose
       * pattern is different than an empty string should be matched directly with this navTo call, the route
       * name and its parameters can be given by using this parameter. Information for deeper nested component
       * target can be given within the `componentTargetInfo` property which contains the same properties as the
       * top level.
       */
      oComponentTargetInfo?: {
        /**
         * The name of a target which loads a component. This target is used in the Route which is specified by
         * `sName`.
         */
        anyName?: {
          /**
           * The name of the route which should be matched after this navTo call.
           */
          route?: string;
          /**
           * The parameters for the route. See the documentation of the `oParameters`.
           */
          parameters?: object;
          /**
           * The information for the targets within a nested component. This shares the same structure with the `oComponentTargetInfo`
           * parameter.
           */
          componentTargetInfo?: object;
        };
      },
      /**
       * If set to `true`, the hash is replaced, and there will be no entry in the browser history. If set to
       * `false`, the hash is set and the entry is stored in the browser history.
       */
      bReplace?: boolean
    ): this;
    /**
     * Navigates to a specific route defining a set of parameters.
     *
     * The parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be
     * encoded. If you want to use special characters in your `oParameters`, you have to encode them (encodeURIComponent).
     *
     * If the given route name can't be found, an error message is logged to the console and the hash will be
     * changed to the empty string.
     *
     * This method excecutes following steps: 1. Interpolates the pattern with the given parameters 2. Sets
     * the interpolated pattern to the browser's hash 3. Reacts to the browser's `hashchange` event to find
     * out the route which matches the hash
     *
     * If there are multiple routes that have the same pattern, the call of navTo with a specific route won't
     * necessarily trigger the matching process of this route. In the end, the first route in the router configuration
     * list that matches the browser hash will be chosen.
     *
     * If the browser hash is already set with the interpolated pattern from the navTo call, nothing will happen
     * because the browser won't fire `hashchange` event in this case.
     *
     * @returns this for chaining.
     */
    navTo(
      /**
       * The name of the route
       */
      sName: string,
      /**
       * The parameters for the route. As of Version 1.75 the recommendation is naming the query parameter with
       * a leading "?" character, which is identical to the definition in the route's pattern. The old syntax
       * without a leading "?" character is deprecated. e.g. **Route:** `{parameterName1}/:parameterName2:/{?queryParameterName}`
       * **Parameter:**
       * ```javascript
       *
       * 				{
       * 					parameterName1: "parameterValue1",
       * 					parameterName2: "parameterValue2",
       * 					"?queryParameterName": {
       * 						queryParameterName1: "queryParameterValue1"
       * 					}
       * 				}
       * 				```
       */
      oParameters?: object,
      /**
       * If set to `true`, the hash is replaced, and there will be no entry in the browser history. If set to
       * `false`, the hash is set and the entry is stored in the browser history.
       */
      bReplace?: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Will trigger routing events + place targets for routes matching the string.
     */
    parse(
      /**
       * A new hash
       */
      sNewHash: string
    ): void;
    /**
     * Centrally register this router instance under a given name to be able to access it from another context,
     * just by knowing the name.
     *
     * Use {@link sap.ui.core.routing.Router.getRouter Router.getRouter()} to retrieve the instance.
     *
     * @returns The router instance
     */
    register(
      /**
       * Name of the router instance
       */
      sName: string
    ): this;
    /**
     * @SINCE 1.22
     * @deprecated (since 1.28) - use {@link #getViews} instead.
     *
     * Adds or overwrites a view in the view cache of the router which will be cached under the given `sViewName`
     * and the "undefined" key.
     *
     * @returns Since 1.28, the `this` pointer for chaining
     */
    setView(
      /**
       * Name of the view
       */
      sViewName: string,
      /**
       * The view instance
       */
      oView: View
    ): this;
    /**
     * Stops to listen to the `hashchange` of the browser.
     *
     * If you want the router to start again, call {@link #initialize} again.
     *
     * @returns this for chaining.
     */
    stop(): Router;
  }
}

declare module "sap/ui/core/routing/RouterHashChanger" {
  import HashChangerBase from "sap/ui/core/routing/HashChangerBase";

  import Metadata from "sap/ui/base/Metadata";

  import { routing } from "sap/ui/core/library";

  import Router from "sap/ui/core/routing/Router";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Class for manipulating and receiving changes of the relevant hash segment which belongs to a router.
   * This Class doesn't change the browser hash directly, but informs its parent RouterHashChanger and finally
   * changes the browser hash through the {@link sap.ui.core.routing.HashChanger}
   */
  export default class RouterHashChanger extends HashChangerBase {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.core.routing.RouterHashChanger with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.routing.HashChangerBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RouterHashChanger>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.core.routing.RouterHashChanger.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Save the given hash and potentially fires a "hashChanged" event; may be extended to modify the hash before
     * firing the event.
     */
    fireHashChanged(
      /**
       * the new hash of the browser
       */
      sHash: string,
      /**
       * the prefixes and hashes for the child RouterHashChangers
       */
      oSubHashMap: object,
      /**
       * if this parameter is set to true, the given sHash is saved in the instance but no "hashChanged" event
       * is fired.
       */
      bUpdateHashOnly: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Gets the current hash
     *
     * @returns the current hash
     */
    getHash(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Replaces the hash with a certain value. When using the replace function, no browser history entry is
     * written. If you want to have an entry in the browser history, please use the {@link #setHash} function.
     *
     * @returns When `pNestedHashChange` is given as a Promise, this function also returns a Promise which resolves
     * after the given promise resolves. Otherwise it returns `undefined`.
     */
    replaceHash(
      /**
       * New hash
       */
      sHash: string,
      /**
       * The direction information for the hash replacement
       */
      sDirection:
        | routing.HistoryDirection
        | keyof typeof routing.HistoryDirection,
      /**
       * When this parameter is given, this RouterHashChanger switchs to collect mode and all hash changes from
       * its children will be collected. When this promise resolves, this RouterHashChanger fires a "hashReplaced"
       * event with its own hash and the hashes which are collected from the child RouterHashChanger(s).
       */
      pNestedHashChange?: Promise<any>,
      /**
       * Whether this RouterHashChanger shouldn't collect the prefixes from its active child RouterHashChanger(s)
       * and forward them as delete prefixes within the next "hashReplaced" event
       */
      bSuppressActiveHashCollect?: boolean
    ): Promise<any> | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Reset the hash if the given router is the active router that is saved in this RouterHashChanger
     *
     * This is needed for allowing to fire the hashChanged event with the previous hash again after displaying
     * a Target without involving a Router.
     *
     * @returns The current RouterHashChanger for chaining the method
     */
    resetHash(
      /**
       * the router from which the resetHash is started
       */
      oRouter: Router
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the hash to a certain value. When using this function, a browser history entry is written. If you
     * do not want to have an entry in the browser history, please use the {@link #replaceHash} function.
     *
     * @returns When `pNestedHashChange` is given as a Promise, this function also returns a Promise which resolves
     * after the given promise resolves. Otherwise it returns `undefined`.
     */
    setHash(
      /**
       * New hash
       */
      sHash: string,
      /**
       * When this parameter is given, this RouterHashChanger switchs to collect mode and all hash changes from
       * its children will be collected. When this promise resolves, this RouterHashChanger fires a "hashSet"
       * event with its own hash and the hashes which are collected from the child RouterHashChanger(s).
       */
      pNestedHashChange?: Promise<any>,
      /**
       * Whether this RouterHashChanger shouldn't collect the prefixes from its active child RouterHashChanger(s)
       * and forward them as delete prefixes within the next "hashSet" event
       */
      bSuppressActiveHashCollect?: boolean
    ): Promise<any> | undefined;
  }
}

declare module "sap/ui/core/routing/Target" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Control from "sap/ui/core/Control";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.28.1
   *
   * Provides a convenient way for placing views into the correct containers of your application.
   *
   * The main benefit of Targets is lazy loading: you do not have to create the views until you really need
   * them.
   */
  export default class Target extends EventProvider {
    /**
     * **Don't call this constructor directly**, use {@link sap.ui.core.routing.Targets} instead, it will create
     * instances of a Target.
     *  If you are using the mobile library, please use the {@link sap.m.routing.Targets} constructor, please
     * read the documentation there.
     */
    constructor(
      /**
       * all of the parameters defined in {@link sap.m.routing.Targets#constructor} are accepted here, except
       * for children you need to specify the parent.
       */
      oOptions: object,
      /**
       * All views required by this target will get created by the views instance using {@link sap.ui.core.routing.Views#getView}
       */
      oCache: /* was: sap.ui.core.routing.TargetCache */ any,
      /**
       * the parent of this target. Will also get displayed, if you display this target. In the config you have
       * the fill the children property {@link sap.m.routing.Targets#constructor}
       */
      oParent?: Target
    );

    /**
     * Creates a new subclass of class sap.ui.core.routing.Target with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Target>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.routing.Target.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.46.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This function is called between the target view is loaded and the view is added to the container.
     *
     * This function can be used for applying modification on the view or the container to make the rerendering
     * occur together with the later aggregation change.
     */
    _beforePlacingViewIntoContainer(
      /**
       * the object containing the arguments
       */
      mArguments: {
        /**
         * the container where the view will be added
         */
        container: Control;
        /**
         * the view which will be added to the container
         */
        view: Control;
        /**
         * the data passed from {@link sap.ui.core.routing.Target#display} method
         */
        data?: object;
      }
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:display display} event of this `sap.ui.core.routing.Target`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Target` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDisplay(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Target` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:display display} event of this `sap.ui.core.routing.Target`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Target` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDisplay(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Target` itself
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Destroys the target, will be called by {@link sap.m.routing.Targets} don't call this directly.
     *
     * @returns this for chaining.
     */
    destroy(): Target;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:display display} event of this `sap.ui.core.routing.Target`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDisplay(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a view and puts it in an aggregation of a control that has been defined in the {@link sap.ui.core.routing.Target#constructor}.
     *
     * @returns resolves with {name: *, view: *, control: *} if the target can be successfully displayed otherwise
     * it resolves with {name: *, error: *}
     */
    display(
      /**
       * an object that will be passed to the display event in the data property. If the target has parents, the
       * data will also be passed to them.
       */
      vData?: any
    ): Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:created created} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDisplay(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * Suspends the object which is loaded by the target.
     *
     * Currently this function stops the router of the component when the object which is loaded by this target
     * is an instance of UIComponent. This is done only when the target is already loaded. When the target is
     * not loaded yet or still being loaded, the router of the component isn't stopped.
     *
     * @returns The 'this' to chain the call
     */
    suspend(): Target;
  }
}

declare module "sap/ui/core/routing/Targets" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Views from "sap/ui/core/routing/Views";

  import Metadata from "sap/ui/base/Metadata";

  import Target from "sap/ui/core/routing/Target";

  /**
   * @SINCE 1.84.0
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Object containing the target info for displaying targets
   */
  export type TargetInfo = {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Defines the name of the target that is going to be displayed
     */
    name: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * A prefix that is used for reserving a dedicated section in the browser hash for the router of this target.
     * This needs to be set only for target that has type "Component"
     */
    prefix?: string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the titleChanged event from this target should be propagated to the parent or not
     */
    propagateTitle?: boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Whether the target is relevant to the current matched route or not. If 'true', then the dynamic target
     * is linked to the route's life cycle. When switching to a different route, then the dynamic target will
     * be suspended.
     */
    routeRelevant?: boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Since 1.90. Whether the router of the "Component" target ignores the browser hash when it's re-initialized.
     * This parameter only has effect when the target is of type "Component" and its router is currently stopped.
     * It has no effect on the first call of {@link sap.ui.core.routing.Router#initialize}, because this is
     * done by the application and not by the UI5 routing.
     */
    ignoreInitialHash?: boolean;
  };

  /**
   * @SINCE 1.28.1
   *
   * Provides a convenient way for placing views into the correct containers of your application.
   *
   * The main benefit of `Targets` is lazy loading: you do not have to create the views until you really need
   * them. If you are using the mobile library, please use {@link sap.m.routing.Targets} instead of this class.
   */
  export default class Targets extends EventProvider {
    /**
     * Constructor for a new Targets class.
     */
    constructor(oOptions: {
      /**
       * the views instance will create the instances of all the targets defined, so if 2 targets have the same
       * `type` and `name` set, the same instance of the target will be displayed.
       */
      views: Views;
      /**
       * this config allows all the values oOptions.targets.anyName allows, these will be the default values for
       * properties used in the target.
       *  For example if you are only using xmlViews in your app you can specify viewType="XML" so you don't have
       * to repeat this in every target.
       *  If a target specifies viewType="JS", the JS will be stronger than the XML here is an example.
       *
       *
       * ```javascript
       *
       *
       * {
       *     config: {
       *         viewType : "XML"
       *     }
       *     targets : {
       *         xmlTarget : {
       *             ...
       *         },
       *         jsTarget : {
       *             viewType : "JS"
       *             ...
       *         }
       *     }
       * }
       *
       * ```
       *  Then the effective config that will be used looks like this:
       * ```javascript
       *
       *
       * {
       *     xmlTarget : {
       *         // coming from the defaults
       *         viewType : "XML"
       *         ...
       *     },
       *     jsTarget : {
       *        // XML is overwritten by the "JS" of the targets property
       *        viewType : "JS"
       *       ...
       *     }
       * }
       *
       * ```
       */
      config?: {
        /**
         * The id of the rootView - This should be the id of the view that contains the control with the controlId
         * since the control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the
         * rootView. If you are using a component and add the routing.targets **do not set this parameter**, since
         * the component will set the rootView to the view created by the {@link sap.ui.core.UIComponent#createContent}
         * function. If you specify the "parent" property of a target, the control will not be searched in the root
         * view but in the view Created by the parent (see parent documentation).
         */
        rootView?: string;
        /**
         * @since 1.34 Whether the views which are created through this Targets are loaded asyncly. This option
         * can be set only when the Targets is used standalone without the involvement of a Router. Otherwise the
         * async option is inherited from the Router.
         */
        async?: boolean;
      };
      /**
       * One or multiple targets in a map.
       */
      targets: {
        /**
         * a new target, the key severs as a name. An example:
         * ```javascript
         *
         *
         * {
         *     targets: {
         *         welcome: {
         *             type: "View",
         *             name: "Welcome",
         *             viewType: "XML",
         *             ....
         *             // Other target parameters
         *         },
         *         goodbye: {
         *             type: "Component",
         *             usage: "myreuse",
         *             containerSettings: {
         *                 // settings for the component container
         *             }
         *             ....
         *             // Other target parameters
         *         }
         *     }
         * }
         *
         * ```
         *
         *
         * This will create two targets named 'welcome' and 'goodbye' you can display both of them or one of them
         * using the {@link #display} function.
         *
         * The 'welcome' target creates a View instance when it's displayed. The 'goodbye' target creates a Component
         * instance.
         *
         *
         * The settings for the Component are defined in the manifest of the owner component of the router under
         * path '/sap.ui5/componentUsages' and it can be used in the target by setting the 'usage' option with the
         * name in the 'componentUsages'.
         *  See the following manifest.json example of the owner component. There's a component settings object
         * defined with name "myreuse" which can be used to set the "usage" option in a target's configuration.
         *
         * ```javascript
         *
         *
         * {
         *     "sap.ui5": {
         *         "componentUsages": {
         *             "myreuse": {
         *                 "name": "reuse.component",
         *                 "settings": {},
         *                 "componentData": {},
         *                 "lazy": false,
         *             }
         *         }
         *     }
         * }
         *
         * ```
         */
        anyName: {
          /**
           * Defines whether the target creates an instance of 'View' or 'Component'.
           */
          type: string;
          /**
           * Defines the name of the View or Component that will be created. For type 'Component', use option 'usage'
           * instead if an owner component exists. To place the view or component into a Control, use the options
           * `controlAggregation` and `controlId`. Instance of View or Component will only be created once per `name`
           * or `usage` combined with `id`.
           * ```javascript
           *
           *
           * {
           *     targets: {
           *         // If display("masterWelcome") is called, the master view will be placed in the 'MasterPages' of a control with the id splitContainter
           *         masterWelcome: {
           *             type: "View",
           *             name: "Welcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "masterPages"
           *         },
           *         // If display("detailWelcome") is called after the masterWelcome, the view will be removed from the master pages and added to the detail pages, since the same instance is used. Also the controls inside of the view will have the same state.
           *         detailWelcome: {
           *             // same view here, that's why the same instance is used
           *             type: "View",
           *             name: "Welcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "detailPages"
           *         }
           *     }
           * }
           *
           * ```
           *
           *
           * If you want to have a second instance of the 'welcome' view you can set different 'id' to the targets:
           *
           *
           * ```javascript
           *
           *
           * {
           *     targets: {
           *         // If display("masterWelcome") is called, the view with name "Welcome" will be placed in the 'MasterPages' of a control with the id splitContainter
           *         masterWelcome: {
           *             type: "View",
           *             name: "Welcome",
           *             id: "masterWelcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "masterPages"
           *         },
           *         // If display("detailWelcome") is called after the "masterWelcome" target, a second instance of the same view with its own controller instance will be added in the detail pages.
           *         detailWelcome: {
           *             type: "View",
           *             name: "Welcome",
           *             // another instance will be created because a different id is used
           *             id: "detailWelcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "detailPages"
           *         }
           *     }
           * }
           *
           * ```
           */
          name?: string;
          /**
           * Defines the 'usage' name for 'Component' target which refers to the '/sap.ui5/componentUsages' entry
           * in the owner component's manifest.
           */
          usage?: string;
          /**
           * The type of the view that is going to be created. These are the supported types: {@link sap.ui.core.mvc.ViewType}.
           * You always have to provide a viewType except if `oOptions.config.viewType` is set or when using {@link
           * sap.ui.core.routing.Views#setView}.
           */
          viewType?: string;
          /**
           * A prefix that will be prepended in front of the `name`.
           *  **Example:** `name` is set to "myView" and `path` is set to "myApp" - the created view's name will be
           * "myApp.myView".
           */
          path?: string;
          /**
           * The ID of the created instance. This is will be prefixed with the id of the component set to the views
           * instance provided in oOptions.views. For details see {@link sap.ui.core.routing.Views#getView}.
           */
          id?: string;
          /**
           * The id of the parent of the controlId - This should be the id of the view that contains your controlId,
           * since the target control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function
           * of the targetParent. By default, this will be the view created by a component, so you do not have to
           * provide this parameter. If you are using children, the view created by the parent of the child is taken.
           * You only need to specify this, if you are not using a Targets instance created by a component and you
           * should give the id of root view of your application to this property.
           */
          targetParent?: string;
          /**
           * The ID of the control where you want to place the instance created by this target. You also need to set
           * "controlAggregation" property to specify to which aggregation of the control should the created instance
           * be added. An example for containers are {@link sap.ui.ux3.Shell} with the aggregation 'content' or a
           * {@link sap.m.NavContainer} with the aggregation 'pages'.
           */
          controlId?: string;
          /**
           * The name of an aggregation of the controlId, where the created instance from the target will be added.
           * Eg: a {@link sap.m.NavContainer} has an aggregation 'pages', another Example is the {@link sap.ui.ux3.Shell}
           * it has 'content'.
           */
          controlAggregation?: string;
          /**
           * Defines a boolean that can be passed to specify if the aggregation should be cleared - all items will
           * be removed - before adding the View to it. When using a {@link sap.ui.ux3.Shell} this should be true.
           * For a {@link sap.m.NavContainer} it should be false. When you use the {@link sap.m.routing.Router} the
           * default will be false.
           */
          clearControlAggregation?: boolean;
          /**
           * A reference to another target, using the name of the target. If you display a target that has a parent,
           * the parent will also be displayed. Also the control you specify with the controlId parameter, will be
           * searched inside of the created instance of the parent not in the rootView, provided in the config. The
           * control will be searched using the byId function of a view. When it is not found, the global id is checked.
           *
           *  The main usecase for the parent property is placing a view or component inside a smaller container of
           * an instance, which is also created by targets. This is useful for lazy loading views or components, only
           * if the user really navigates to this part of your application.
           *  **Example:** Our aim is to lazy load a tab of an IconTabBar (a control that displays a view initially
           * and when a user clicks on it the view changes). It's a perfect candidate to lazy load something inside
           * of it.
           *  **Example app structure:**
           *  We have a rootView that is returned by the createContent function of our UIComponent. This view contains
           * an sap.m.App control with the id 'myApp'
           * ```javascript
           *
           *
           * <View xmlns="sap.m">
           *     <App id="myApp"/>
           * </View>
           *
           * ```
           *  an xml view called 'Detail'
           * ```javascript
           *
           *
           * <View xmlns="sap.m">
           *     <IconTabBar>
           *         <items>
           *             <IconTabFilter>
           *                 <!-- content of our first tab -->
           *             <IconTabFilter>
           *             <IconTabFilter id="mySecondTab">
           *                 <!-- nothing here, since we will lazy load this one with a target -->
           *             <IconTabFilter>
           *         </items>
           *     </IconTabBar>
           * </View>
           *
           * ```
           *  and a view called 'SecondTabContent', this one contains our content we want to have lazy loaded. Now
           * we need to create our Targets instance with a config matching our app:
           * ```javascript
           *
           *
           *     new Targets({
           *         //Creates our views except for root, we created this one before - when using a component you
           *         views: new Views(),
           *         config: {
           *             // all of our views have that type
           *             viewType: 'XML',
           *             // a reference to the app control in the rootView created by our UIComponent
           *             controlId: 'myApp',
           *             // An app has a pages aggregation where the views need to be put into
           *             controlAggregation: 'pages'
           *         },
           *         targets: {
           *             detail: {
           *                 type: "View",
           *                 name: 'Detail'
           *             },
           *             secondTabContent: {
           *                 // A reference to the detail target defined above
           *                 parent: 'detail',
           *                 // A reference to the second Tab container in the Detail view. Here the target does not look in the rootView, it looks in the Parent view (Detail).
           *                 controlId: 'mySecondTab',
           *                 // An IconTabFilter has an aggregation called content so we need to overwrite the pages set in the config as default.
           *                 controlAggregation: 'content',
           *                 // A view containing the content
           *                 type: "View",
           *                 name: 'SecondTabContent'
           *             }
           *         }
           *     });
           *
           * ```
           *
           *
           * Now if we call ` oTargets.display("secondTabContent") `, 2 views will be created: Detail and SecondTabContent.
           * The 'Detail' view will be put into the pages aggregation of the App. And afterwards the 'SecondTabContent'
           * view will be put into the content Aggregation of the second IconTabFilter. So a parent will always be
           * created before the target referencing it.
           */
          parent?: string;
        };
      };
    });

    /**
     * Creates a new subclass of class sap.ui.core.routing.Targets with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Targets>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.routing.Targets.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Creates a target by using the given name and options.
     *
     * If there's already a target with the same name, the existing target is not overwritten and an error log
     * will be written to the console.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addTarget(
      /**
       * Name of a target
       */
      sName: string,
      /**
       * Options of a target. The option names are the same as the ones in "oOptions.targets.anyName" of {@link
       * #constructor}.
       */
      oTargetOptions: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:display display} event of this `sap.ui.core.routing.Targets`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Targets` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDisplay(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Targets` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:display display} event of this `sap.ui.core.routing.Targets`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Targets` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachDisplay(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Targets` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Targets`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Targets` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitleChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Targets` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Targets`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.routing.Targets` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachTitleChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.routing.Targets` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the targets instance and all created targets. Does not destroy the views instance passed to
     * the constructor. It has to be destroyed separately.
     *
     * @returns this for method chaining.
     */
    destroy(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:display display} event of this `sap.ui.core.routing.Targets`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachDisplay(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:titleChanged titleChanged} event of this `sap.ui.core.routing.Targets`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachTitleChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a view and puts it in an aggregation of the specified control.
     *
     * @returns this pointer for chaining or a Promise
     */
    display(
      /**
       * Either the target name or a target info object. To display multiple targets you may also pass an array
       * of target names or target info objects.
       */
      vTargets: string | string[] | TargetInfo | TargetInfo[],
      /**
       * an object that will be passed to the display event in the data property. If the target has parents, the
       * data will also be passed to them.
       */
      oData?: object,
      /**
       * the name of the target from which the title option is taken for firing the {@link sap.ui.core.routing.Targets#event:titleChanged
       * titleChanged} event
       */
      sTitleTarget?: string
    ): Targets | Promise<any>;
    /**
     * Fires event {@link #event:created created} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireDisplay(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * Returns a target by its name (if you pass myTarget: { view: "myView" }) in the config myTarget is the
     * name.
     *
     * @returns The target with the coresponding name or undefined. If an array was passed as name, this will
     * return an array with all found targets. Non existing targets will not be returned and an error is logged
     * when `bSuppressNotFoundError` param isn't set to `true`.
     */
    getTarget(
      /**
       * the name of a single target or the name of multiple targets
       */
      vName: string | string[],
      /**
       * In case no target is found for the given name, the not found error is supressed when this is set with
       * true
       */
      bSuppressNotFoundError?: boolean
    ): Target | undefined | Target[];
    /**
     * Returns the views instance passed to the constructor
     *
     * @returns the views instance
     */
    getViews(): Views;
  }
}

declare module "sap/ui/core/routing/Views" {
  import EventProvider from "sap/ui/base/EventProvider";

  import UIComponent from "sap/ui/core/UIComponent";

  import Metadata from "sap/ui/base/Metadata";

  import View from "sap/ui/core/mvc/View";

  /**
   * @SINCE 1.28.1
   */
  export default class Views extends EventProvider {
    /**
     * Instantiates a view repository that creates and caches views. If it is destroyed, all the Views it created
     * are destroyed. Usually you do not have to create instances of this class, it is used by the {@link sap.ui.core.routing.Router}.
     * If you are using {@link sap.ui.core.routing.Targets} without using a {@link sap.ui.core.UIComponent}
     * you have to create an instance of this class. They will create an instance on their own, or if they are
     * used with a {@link sap.ui.core.UIComponent} they will share the same instance of Views.
     */
    constructor(oOptions?: {
      /**
       * the owner of all the views that will be created by this Instance.
       */
      component?: UIComponent;
      /**
       * @since 1.34 Whether the views which are created through this Views are loaded asyncly. This option can
       * be set only when the Views is used standalone without the involvement of a Router. Otherwise the async
       * option is inherited from the Router.
       */
      async?: boolean;
    });

    /**
     * Creates a new subclass of class sap.ui.core.routing.Views with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Views>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.routing.Views.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:created created} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireCreated(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * Returns a cached view, for a given name. If it does not exist yet, it will create the view with the provided
     * options. If you provide a viewId, it will be prefixed with the viewId of the component.
     *
     * @returns A promise that is resolved when the view is loaded {@link sap.ui.core.mvc.View#loaded}. The
     * view instance will be passed to the promise.
     */
    getView(
      /**
       * see {@link sap.ui.view} for the documentation. The viewId you pass into the options will be prefixed
       * with the id of the component you pass into the constructor. So you can retrieve the view later by calling
       * the {@link sap.ui.core.UIComponent#byId} function of the UIComponent.
       */
      oOptions: {
        /**
         * If you do not use setView please see {@link sap.ui.view} for the documentation. This is used as a key
         * in the cache of the Views instance. If you want to retrieve a view that has been given an alternative
         * name in {@link #setView} you need to provide the same name here and you can skip all the other viewOptions.
         */
        viewName: string;
      }
    ): Promise<any>;
    /**
     * Adds or overwrites a view in the cache of the Views instance. The viewName serves as a key for caching.
     *
     * If the second parameter is set to null or undefined, the previous cache view under the same name isn't
     * managed by the Views instance. The lifecycle (for example the destroy of the view) of the view instance
     * should be maintained by additional code.
     *
     * @returns this for chaining.
     */
    setView(
      /**
       * Name of the view, may differ from the actual viewName of the oView parameter provided, since you can
       * retrieve this view per {@link #.getView}.
       */
      sViewName: string,
      /**
       * the view instance
       */
      oView: View | null | undefined
    ): this;
  }
}

declare module "sap/ui/core/ScrollBar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { ScrollBarAction, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.56)
   *
   * The ScrollBar control can be used for virtual scrolling of a certain area. This means: to simulate a
   * very large scrollable area when technically the area is small and the control takes care of displaying
   * the respective part only. E.g. a Table control can take care of only rendering the currently visible
   * rows and use this ScrollBar control to make the user think he actually scrolls through a long list.
   */
  export default class ScrollBar extends Control {
    /**
     * Constructor for a new ScrollBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ScrollBarSettings
    );
    /**
     * Constructor for a new ScrollBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ScrollBarSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.ScrollBar with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ScrollBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.ScrollBar.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:scroll scroll} event of this `sap.ui.core.ScrollBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ScrollBar` itself.
     *
     * Scroll event.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachScroll(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ScrollBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:scroll scroll} event of this `sap.ui.core.ScrollBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ScrollBar` itself.
     *
     * Scroll event.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachScroll(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.ScrollBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
     */
    bind(
      /**
       * Dom ref of the control that uses the scrollbar
       */
      oOwnerDomRef: string
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:scroll scroll} event of this `sap.ui.core.ScrollBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachScroll(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:scroll scroll} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireScroll(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Actions are: Click on track, button, drag of thumb, or mouse wheel click.
         */
        action?: ScrollBarAction | keyof typeof ScrollBarAction;
        /**
         * Direction of scrolling: back (up) or forward (down).
         */
        forward?: boolean;
        /**
         * Current Scroll position either in pixels or in steps.
         */
        newScrollPos?: int;
        /**
         * Old Scroll position - can be in pixels or in steps.
         */
        oldScrollPos?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getContentSize contentSize}.
     *
     * Size of the scrollable content (in pixels).
     *
     * @returns Value of property `contentSize`
     */
    getContentSize(): CSSSize;
    /**
     * Gets current value of property {@link #getScrollPosition scrollPosition}.
     *
     * Scroll position in steps or pixels.
     *
     * @returns Value of property `scrollPosition`
     */
    getScrollPosition(): int;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Size of the Scrollbar (in pixels).
     *
     * @returns Value of property `size`
     */
    getSize(): CSSSize;
    /**
     * Gets current value of property {@link #getSteps steps}.
     *
     * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
     *
     * @returns Value of property `steps`
     */
    getSteps(): int;
    /**
     * Gets current value of property {@link #getVertical vertical}.
     *
     * Orientation. Defines if the Scrollbar is vertical or horizontal.
     *
     * Default value is `true`.
     *
     * @returns Value of property `vertical`
     */
    getVertical(): boolean;
    /**
     * Page Down is used to scroll one page forward.
     */
    pageDown(): void;
    /**
     * Page Up is used to scroll one page back.
     */
    pageUp(): void;
    /**
     * Sets a new value for property {@link #getContentSize contentSize}.
     *
     * Size of the scrollable content (in pixels).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContentSize(
      /**
       * New value for property `contentSize`
       */
      sContentSize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getScrollPosition scrollPosition}.
     *
     * Scroll position in steps or pixels.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setScrollPosition(
      /**
       * New value for property `scrollPosition`
       */
      iScrollPosition?: int
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Size of the Scrollbar (in pixels).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getSteps steps}.
     *
     * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSteps(
      /**
       * New value for property `steps`
       */
      iSteps?: int
    ): this;
    /**
     * Sets a new value for property {@link #getVertical vertical}.
     *
     * Orientation. Defines if the Scrollbar is vertical or horizontal.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setVertical(
      /**
       * New value for property `vertical`
       */
      bVertical?: boolean
    ): this;
    /**
     * Unbinds the mouse wheel scroll event of the control that has the scrollbar
     */
    unbind(
      /**
       * Dom ref of the Control that uses the scrollbar
       */
      oOwnerDomRef: string
    ): void;
  }

  export interface $ScrollBarSettings extends $ControlSettings {
    /**
     * Orientation. Defines if the Scrollbar is vertical or horizontal.
     */
    vertical?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Scroll position in steps or pixels.
     */
    scrollPosition?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Size of the Scrollbar (in pixels).
     */
    size?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Size of the scrollable content (in pixels).
     */
    contentSize?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
     */
    steps?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Scroll event.
     */
    scroll?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/search/OpenSearchProvider" {
  import {
    default as SearchProvider,
    $SearchProviderSettings,
  } from "sap/ui/core/search/SearchProvider";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { URI } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A SearchProvider which uses the OpenSearch protocol (either JSON or XML).
   */
  export default class OpenSearchProvider extends SearchProvider {
    /**
     * Constructor for a new search/OpenSearchProvider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $OpenSearchProviderSettings
    );
    /**
     * Constructor for a new search/OpenSearchProvider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $OpenSearchProviderSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OpenSearchProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.search.OpenSearchProvider.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSuggestType suggestType}.
     *
     * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
     *
     * Default value is `'json'`.
     *
     * @returns Value of property `suggestType`
     */
    getSuggestType(): string;
    /**
     * Gets current value of property {@link #getSuggestUrl suggestUrl}.
     *
     * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}'
     * must be used. For cross domain requests maybe a proxy must be used.
     *
     * @returns Value of property `suggestUrl`
     */
    getSuggestUrl(): URI;
    /**
     * Sets a new value for property {@link #getSuggestType suggestType}.
     *
     * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'json'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSuggestType(
      /**
       * New value for property `suggestType`
       */
      sSuggestType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSuggestUrl suggestUrl}.
     *
     * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}'
     * must be used. For cross domain requests maybe a proxy must be used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setSuggestUrl(
      /**
       * New value for property `suggestUrl`
       */
      sSuggestUrl?: URI
    ): this;
    /**
     * Call this function to get suggest values from the search provider. The given callback function is called
     * with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]',
     * 2nd parameter).
     */
    suggest(
      /**
       * The value for which suggestions are requested.
       */
      sValue: string,
      /**
       * The callback function which is called when the suggestions are available.
       */
      fCallback: (p1: string, p2: string[]) => void
    ): void;
  }

  export interface $OpenSearchProviderSettings extends $SearchProviderSettings {
    /**
     * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}'
     * must be used. For cross domain requests maybe a proxy must be used.
     */
    suggestUrl?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
     */
    suggestType?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/search/SearchProvider" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Abstract base class for all SearchProviders which can be e.g. attached to a SearchField.
   *
   * Do not create instances of this class, but use a concrete subclass instead.
   */
  export default class SearchProvider extends UI5Element {
    /**
     * Constructor for a new search/SearchProvider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SearchProviderSettings
    );
    /**
     * Constructor for a new search/SearchProvider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SearchProviderSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.search.SearchProvider with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SearchProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.search.SearchProvider.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon of the Search Provider
     *
     * @returns Value of property `icon`
     */
    getIcon(): string;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon of the Search Provider
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Call this function to get suggest values from the search provider. The given callback function is called
     * with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]',
     * 2nd parameter).
     */
    suggest(
      /**
       * The value for which suggestions are requested.
       */
      sValue: string,
      /**
       * The callback function which is called when the suggestions are available.
       */
      fnCallback: (p1: string, p2: string[]) => void
    ): void;
  }

  export interface $SearchProviderSettings extends $ElementSettings {
    /**
     * Icon of the Search Provider
     */
    icon?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/SeparatorItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item,
   * sap.ui.core.Element, sap.ui.base.EventProvider, and sap.ui.base.Object.
   */
  export default class SeparatorItem extends Item {
    /**
     * Constructor for a new SeparatorItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Item#constructor
     * sap.ui.core.Item} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SeparatorItemSettings
    );
    /**
     * Constructor for a new SeparatorItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Item#constructor
     * sap.ui.core.Item} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SeparatorItemSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.SeparatorItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SeparatorItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.SeparatorItem.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SeparatorItemSettings extends $ItemSettings {}
}

declare module "sap/ui/core/support/RuleEngineOpaExtension" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * RuleEngineOpaAssertions represents a set of methods with which OPA test assertions can be enhanced. To
   * use this functionality, {@link sap.ui.core.support.RuleEngineOpaExtension RuleEngineOpaExtension} should
   * be provided in the OPA extensions list.
   */
  export interface RuleEngineOpaAssertions {
    __implements__sap_ui_core_support_RuleEngineOpaAssertions: boolean;

    /**
     * If there are issues found the assertion result will be false and a report with all the issues will be
     * generated in the message of the test. If no issues were found the assertion result will be true and no
     * report will be generated.
     *
     * If "sap-skip-rules-issues=true" is set as an URI parameter, assertion result will be always positive.
     *
     * @returns Promise.
     */
    getFinalReport(): Promise<{
      result: boolean;

      message: string;

      actual: string;

      expected: object[];
    }>;
    /**
     * Stores analysis history (if such) as last element in window._$files array. Accessing this array gives
     * an opportunity to store this history in a file.
     *
     * @returns Promise.
     */
    getReportAsFileInFormat(
      /**
       * The options used to configure reporting.
       */
      options?: {
        /**
         * The format into which the history object will be converted.
         */
        historyFormat?: /* was: sap.ui.support.HistoryFormats */ any;
        /**
         * The name of the file. It should have extension .support-assistant.json". Example: myfile.support-assistant.json
         * **Note:** Extension ".support-assistant.json" will be appended automatically, if it is not already given.
         * If only ".json" extension is given, it will be turned to ".support-assistant.json"
         */
        fileName?: string;
      }
    ): Promise<{
      result: boolean;

      message: string;

      actual: boolean;

      expected: boolean;
    }>;
    /**
     * Run the Support Assistant and analyze against a specific state of the application. Depending on the options
     * passed the assertion might either fail or not if any issues were found.
     *
     * If "sap-skip-rules-issues=true" is set as an URI parameter, assertion result will be always positive.
     *
     * @returns Promise.
     */
    noRuleFailures(
      /**
       * The options used to configure an analysis.
       */
      options?: {
        /**
         * Should the test fail or not if there are issues of any severity.
         */
        failOnAnyIssues?: boolean;
        /**
         * Should the test fail or not if there are issues of high severity. This parameter will override failOnAnyIssues
         * if set.
         */
        failOnHighIssues?: boolean;
        /**
         * The rules to check.
         */
        rules?: Array<{
          libName: string;

          ruleId: string;
        }>;
        /**
         * This parameter allows for selection of subset of rules for the analysis
         */
        preset?: object;
        /**
         * The execution scope of the analysis.
         */
        executionScope?: {
          /**
           * The type of the execution scope, one of 'global', 'subtree' or 'components'.
           */
          type?: string;
          /**
           * The IDs of the components or the subtree.
           */
          selectors?: string | string[];
        };
        /**
         * The metadata that will be passed to the analysis.
         */
        metadata?: object;
      }
    ): Promise<{
      result: boolean;

      message: string;

      actual: string;

      expected: string;
    }>;
  }

  /**
   * @SINCE 1.48
   *
   * This class represents an extension for OPA tests which allows running Support Assistant checks.
   *
   * It enriches the OPA assertions with the methods described in {@link sap.ui.core.support.RuleEngineOpaAssertions}.
   *
   * For more information, see {@link topic:cfabbd4dfc054936997d9d00916e1668 Integrating the Support Assistant
   * in OPA Tests}.
   */
  export default class RuleEngineOpaExtension extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.support.RuleEngineOpaExtension with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RuleEngineOpaExtension>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.support.RuleEngineOpaExtension.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     *
     * @returns Object with the methods which will enhance the OPA assertions.
     */
    getAssertions(): RuleEngineOpaAssertions;
  }
}

declare module "sap/ui/core/theming/Parameters" {
  import UI5Element from "sap/ui/core/Element";

  /**
   * A helper used for (read-only) access to CSS parameters at runtime.
   */
  interface Parameters {
    /**
     *  Returns the current value for one or more theming parameters, depending on the given arguments. The
     * synchronous usage of this API has been deprecated and only the asynchronous usage should still be used
     * (see the 4th bullet point and the code examples below).
     *
     *  The theming parameters are immutable and cannot be changed at runtime. Multiple `Parameters.get()`
     * API calls for the same parameter name will always result in the same parameter value.
     *
     *  The following API variants are available (see also the below examples):
     * 	 -  **(deprecated since 1.92)** If no parameter is given a key-value map containing all parameters is
     * 			returned
     * 	 -  **(deprecated since 1.94)** If a `string` is given as first parameter the value is returned as a
     * 			`string`
     * 	 -  **(deprecated since 1.94)** If an `array` is given as first parameter a key-value map containing
     * 			all parameters from the `array` is returned
     * 	 - If an `object` is given as first parameter the result is returned immediately in case all parameters
     * 			are loaded and available or within the callback in case not all CSS files are already loaded. This is
     * 			the **only asynchronous** API variant. This variant is the preferred way to retrieve theming parameters.
     * 			The structure of the return value is the same as listed above depending on the type of the name property
     * 			within the `object`.
     *
     * The returned key-value maps are a copy so changing values in the map does not have any effect
     *
     *  Please see the examples below for a detailed guide on how to use the **asynchronous variant** of
     * the API.
     *
     * @returns the CSS parameter value(s) or `undefined` if the parameters could not be retrieved.
     */
    get(
      /**
       * the (array with) CSS parameter name(s) or an object containing the (array with) CSS parameter name(s),
       * the scopeElement and a callback for async retrieval of parameters.
       */
      vName:
        | string
        | string[]
        | {
            /**
             * the (array with) CSS parameter name(s)
             */
            name: string | string[];
            /**
             * Element / control instance to take into account when looking for a parameter value. This can make a difference
             * when a parameter value is overridden in a theme scope set via a CSS class.
             */
            scopeElement?: UI5Element;
            /**
             * If given, the callback is only executed in case there are still parameters pending and one or more of
             * the requested parameters is missing.
             */
            callback?: Function;
          },
      /**
       * Element / control instance to take into account when looking for a parameter value. This can make a difference
       * when a parameter value is overridden in a theme scope set via a CSS class.
       */
      oElement?: UI5Element
    ): string | object | undefined;
    /**
     * @deprecated (since 1.92)
     *
     * Resets the CSS parameters which finally will reload the parameters the next time they are queried via
     * the method `get`.
     */
    reset(): void;
  }
  const Parameters: Parameters;
  export default Parameters;
}

declare module "sap/ui/core/Title" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI, TitleLevel } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16.0
   *
   * Represents a title element that can be used for aggregation with other controls.
   */
  export default class Title extends UI5Element {
    /**
     * Constructor for a new Title.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TitleSettings
    );
    /**
     * Constructor for a new Title.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TitleSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.Title with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.Title.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getEmphasized emphasized}.
     *
     * If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.
     *
     * Default value is `false`.
     *
     * @returns Value of property `emphasized`
     */
    getEmphasized(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the URL for icon display
     *
     * @returns Value of property `icon`
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getLevel level}.
     *
     * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering
     * the title.
     *
     * Currently not all controls using the Title.control supporting this property.
     *
     * Default value is `Auto`.
     *
     * @returns Value of property `level`
     */
    getLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the title text
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getEmphasized emphasized}.
     *
     * If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setEmphasized(
      /**
       * New value for property `emphasized`
       */
      bEmphasized?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the URL for icon display
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getLevel level}.
     *
     * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering
     * the title.
     *
     * Currently not all controls using the Title.control supporting this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLevel(
      /**
       * New value for property `level`
       */
      sLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the title text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $TitleSettings extends $ElementSettings {
    /**
     * Defines the title text
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the URL for icon display
     */
    icon?: URI | PropertyBindingInfo | `{${string}}`;

    /**
     * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering
     * the title.
     *
     * Currently not all controls using the Title.control supporting this property.
     */
    level?:
      | (TitleLevel | keyof typeof TitleLevel)
      | PropertyBindingInfo
      | `{${string}}`;

    /**
     * If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.
     */
    emphasized?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/tmpl/DOMAttribute" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.15
   * @deprecated (since 1.56)
   *
   * Represents a DOM attribute of a DOM element.
   */
  export default class DOMAttribute extends UI5Element {
    /**
     * Constructor for a new tmpl/DOMAttribute.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DOMAttributeSettings
    );
    /**
     * Constructor for a new tmpl/DOMAttribute.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DOMAttributeSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DOMAttribute>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.tmpl.DOMAttribute.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Name of the DOM attribute
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Value of the DOM attribute
     *
     * @returns Value of property `value`
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Name of the DOM attribute
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Value of the DOM attribute
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
  }

  export interface $DOMAttributeSettings extends $ElementSettings {
    /**
     * Name of the DOM attribute
     */
    name?: string | PropertyBindingInfo;

    /**
     * Value of the DOM attribute
     */
    value?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/tmpl/DOMElement" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import DOMAttribute from "sap/ui/core/tmpl/DOMAttribute";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.15
   * @deprecated (since 1.56)
   *
   * Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.
   */
  export default class DOMElement extends Control {
    /**
     * Constructor for a new tmpl/DOMElement.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DOMElementSettings
    );
    /**
     * Constructor for a new tmpl/DOMElement.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DOMElementSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DOMElement>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.tmpl.DOMElement.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: DOMAttribute
    ): this;
    /**
     * Adds some element to the aggregation {@link #getElements elements}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addElement(
      /**
       * The element to add; if empty, nothing is inserted
       */
      oElement: DOMElement
    ): this;
    /**
     * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available
     * when using this method with the parameter name only. When using the method with the parameter name and
     * value the method acts as a setter and sets the value of a DOM attribute. In this case the return value
     * is the reference to this DOM element to support method chaining. If you pass null as value of the attribute
     * the attribute will be removed.
     *
     * @returns value of attribute or `this` when called as a setter
     */
    attr(
      /**
       * The name of the DOM attribute.
       */
      sName: string,
      /**
       * The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.
       */
      sValue: string
    ): any;
    /**
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyAttributes(): this;
    /**
     * Destroys all the elements in the aggregation {@link #getElements elements}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyElements(): this;
    /**
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * DOM attributes which are rendered as part of the DOM element and bindable
     */
    getAttributes(): DOMAttribute[];
    /**
     * Gets content of aggregation {@link #getElements elements}.
     *
     * Nested DOM elements to support nested bindable structures
     */
    getElements(): DOMElement[];
    /**
     * Gets current value of property {@link #getTag tag}.
     *
     * The HTML-tag of the DOM element which contains the text
     *
     * Default value is `'span'`.
     *
     * @returns Value of property `tag`
     */
    getTag(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text content of the DOM element
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Checks for the provided `sap.ui.core.tmpl.DOMAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: DOMAttribute
    ): int;
    /**
     * Checks for the provided `sap.ui.core.tmpl.DOMElement` in the aggregation {@link #getElements elements}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfElement(
      /**
       * The element whose index is looked for
       */
      oElement: DOMElement
    ): int;
    /**
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: DOMAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a element into the aggregation {@link #getElements elements}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertElement(
      /**
       * The element to insert; if empty, nothing is inserted
       */
      oElement: DOMElement,
      /**
       * The `0`-based index the element should be inserted at; for a negative value of `iIndex`, the element
       * is inserted at position 0; for a value greater than the current size of the aggregation, the element
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllAttributes(): DOMAttribute[];
    /**
     * Removes all the controls from the aggregation {@link #getElements elements}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllElements(): DOMElement[];
    /**
     * Removes the DOM attribute for the given name and returns the reference to this DOM element to support
     * method chaining.
     */
    removeAttr(
      /**
       * The name of the DOM attribute.
       */
      sName: string
    ): this;
    /**
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     *
     * @returns The removed attribute or `null`
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | DOMAttribute
    ): DOMAttribute | null;
    /**
     * Removes a element from the aggregation {@link #getElements elements}.
     *
     * @returns The removed element or `null`
     */
    removeElement(
      /**
       * The element to remove or its index or id
       */
      vElement: int | string | DOMElement
    ): DOMElement | null;
    /**
     * Sets a new value for property {@link #getTag tag}.
     *
     * The HTML-tag of the DOM element which contains the text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'span'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTag(
      /**
       * New value for property `tag`
       */
      sTag?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text content of the DOM element
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $DOMElementSettings extends $ControlSettings {
    /**
     * The text content of the DOM element
     */
    text?: string | PropertyBindingInfo;

    /**
     * The HTML-tag of the DOM element which contains the text
     */
    tag?: string | PropertyBindingInfo;

    /**
     * DOM attributes which are rendered as part of the DOM element and bindable
     */
    attributes?:
      | DOMAttribute[]
      | DOMAttribute
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Nested DOM elements to support nested bindable structures
     */
    elements?:
      | DOMElement[]
      | DOMElement
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/ui/core/tmpl/HandlebarsTemplate" {
  import {
    default as Template,
    $TemplateSettings,
  } from "sap/ui/core/tmpl/Template";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.15
   * @deprecated (since 1.56)
   *
   * The class for Handlebars Templates.
   */
  export default class HandlebarsTemplate extends Template {
    /**
     * Creates and initializes a new handlebars template with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.tmpl.Template#constructor
     * sap.ui.core.tmpl.Template} can be used.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $HandlebarsTemplateSettings
    );
    /**
     * Creates and initializes a new handlebars template with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.tmpl.Template#constructor
     * sap.ui.core.tmpl.Template} can be used.
     */
    constructor(
      /**
       * optional id for the new template; generated automatically if no non-empty id is given Note: this can
       * be omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $HandlebarsTemplateSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HandlebarsTemplate>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.tmpl.HandlebarsTemplate.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
  }

  export interface $HandlebarsTemplateSettings extends $TemplateSettings {}
}

declare module "sap/ui/core/tmpl/Template" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import View from "sap/ui/core/mvc/View";

  import TemplateControl from "sap/ui/core/tmpl/TemplateControl";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.15
   * @deprecated (since 1.56) - use an {@link sap.ui.core.mvc.XMLView XMLView} or a {@link topic:e6bb33d076dc4f23be50c082c271b9f0
   * Typed View} instead.
   *
   * Base Class for Template.
   */
  export default class Template extends ManagedObject {
    /**
     * Creates and initializes a new template with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TemplateSettings
    );
    /**
     * Creates and initializes a new template with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional id for the new template; generated automatically if no non-empty id is given Note: this can
       * be omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TemplateSettings
    );
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * parses the given path and extracts the model and path
     */
    static parsePath: undefined;

    /**
     * Returns the registered template for the given ID, if any.
     *
     * @returns the template for the given ID
     */
    static byId(sId: string): Template;
    /**
     * Creates a new subclass of class sap.ui.core.tmpl.Template with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Template>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.tmpl.Template.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Creates an anonymous TemplateControl for the Template.
     *
     * @returns the created control instance
     */
    createControl(
      /**
       * the control ID
       */
      sId: string,
      /**
       * the context for the renderer/templating
       */
      oContext: object,

      oView: View
    ): TemplateControl;
    /**
     * Creates an anonymous TemplateControl for the Template.
     *
     * @returns the created control instance
     */
    createControl(
      /**
       * the control ID
       */
      sId: string,

      oView: View
    ): TemplateControl;
    /**
     * Declares a new control based on this template and returns the created class / constructor function. The
     * class is based on the information coming from the abstract functions `createMetadata` and `createRenderer`.
     *
     * @returns the created class / constructor function
     */
    declareControl(
      /**
       * the fully qualified name of the control
       */
      sControl: string
    ): Function;
    /**
     * Gets current value of property {@link #getContent content}.
     *
     * The Template definition as a String.
     *
     * @returns Value of property `content`
     */
    getContent(): string;
    /**
     * Templates don't have a facade and therefore return themselves as their interface.
     * See:
     * 	sap.ui.base.Object#getInterface
     *
     * @returns `this` as there's no facade for templates
     */
    getInterface(): this;
    /**
     * Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.
     *
     * @returns the created control instance
     */
    placeAt(
      /**
       * the id or the DOM reference where to render the template
       */
      oRef: string | Element | Control,
      /**
       * The context to use to evaluate the Template. It will be applied as value for the context property of
       * the created control.
       */
      oContext: object,
      /**
       * Describes the position where the control should be put into the container
       */
      vPosition: string | int,

      bInline: boolean
    ): TemplateControl;
    /**
     * Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.
     *
     * @returns the created control instance
     */
    placeAt(
      /**
       * the id or the DOM reference where to render the template
       */
      oRef: string | Element | Control,
      /**
       * The context to use to evaluate the Template. It will be applied as value for the context property of
       * the created control.
       */
      oContext: object,

      bInline: boolean
    ): TemplateControl;
    /**
     * Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.
     *
     * @returns the created control instance
     */
    placeAt(
      /**
       * the id or the DOM reference where to render the template
       */
      oRef: string | Element | Control,
      /**
       * Describes the position where the control should be put into the container
       */
      vPosition: string | int,

      bInline: boolean
    ): TemplateControl;
    /**
     * Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.
     *
     * @returns the created control instance
     */
    placeAt(
      /**
       * the id or the DOM reference where to render the template
       */
      oRef: string | Element | Control,

      bInline: boolean
    ): TemplateControl;
    /**
     * Sets a new value for property {@link #getContent content}.
     *
     * The Template definition as a String.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * New value for property `content`
       */
      sContent?: string
    ): this;
  }

  export interface $TemplateSettings extends $ManagedObjectSettings {
    /**
     * The Template definition as a String.
     */
    content?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/tmpl/TemplateControl" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import View from "sap/ui/core/mvc/View";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  import Template from "sap/ui/core/tmpl/Template";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.15
   * @deprecated (since 1.56)
   *
   * This is the base class for all template controls. Template controls are declared based on templates.
   */
  export default class TemplateControl extends Control {
    /**
     * Constructor for a new tmpl/TemplateControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TemplateControlSettings
    );
    /**
     * Constructor for a new tmpl/TemplateControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TemplateControlSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TemplateControl>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.tmpl.TemplateControl.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.tmpl.TemplateControl`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.tmpl.TemplateControl` itself.
     *
     * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.tmpl.TemplateControl` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.tmpl.TemplateControl`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.tmpl.TemplateControl` itself.
     *
     * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAfterRendering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.tmpl.TemplateControl` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRendering beforeRendering} event of this
     * `sap.ui.core.tmpl.TemplateControl`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.tmpl.TemplateControl` itself.
     *
     * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRendering(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.tmpl.TemplateControl` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeRendering beforeRendering} event of this
     * `sap.ui.core.tmpl.TemplateControl`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.tmpl.TemplateControl` itself.
     *
     * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBeforeRendering(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.tmpl.TemplateControl` itself
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a pseudo binding for an aggregation to get notified once the property changes to invalidate the
     * control and trigger a re-rendering.
     *
     * @returns the value of the path
     */
    bindList(
      /**
       * the binding path
       */
      sPath: string
    ): any;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a pseudo binding for a property to get notified once the property changes to invalidate the control
     * and trigger a re-rendering.
     *
     * @returns the value of the path
     */
    bindProp(
      /**
       * the binding path
       */
      sPath: string
    ): any;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * compiles (creates and registers) a new control
     *
     * @returns new control instance
     */
    createControl(
      /**
       * the settings for the new control
       */
      mSettings: object,
      /**
       * the parent path for the control
       */
      sParentPath: string,
      /**
       * if true, then the control will not be added to the _controls aggregation
       */
      bDoNotAdd: boolean,

      oView: View
    ): Control;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * compiles (creates and registers) a new control
     *
     * @returns new control instance
     */
    createControl(
      /**
       * the settings for the new control
       */
      mSettings: object,
      /**
       * the parent path for the control
       */
      sParentPath: string,

      oView: View
    ): Control;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * compiles (creates and registers) a new control
     *
     * @returns new control instance
     */
    createControl(
      /**
       * the settings for the new control
       */
      mSettings: object,
      /**
       * if true, then the control will not be added to the _controls aggregation
       */
      bDoNotAdd: boolean,

      oView: View
    ): Control;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * compiles (creates and registers) a new control
     *
     * @returns new control instance
     */
    createControl(
      /**
       * the settings for the new control
       */
      mSettings: object,

      oView: View
    ): Control;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * compiles (creates and registers) a new DOM element
     *
     * @returns new DOM element instance
     */
    createDOMElement(
      /**
       * the settings for the new DOM element
       */
      mSettings: object,
      /**
       * the parent path for the DOM element
       */
      sParentPath?: string,
      /**
       * if true, then the control will not be added to the _controls aggregation
       */
      bDoNotAdd?: boolean
    ): Control;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterRendering afterRendering} event of this
     * `sap.ui.core.tmpl.TemplateControl`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAfterRendering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeRendering beforeRendering} event of
     * this `sap.ui.core.tmpl.TemplateControl`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBeforeRendering(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireAfterRendering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireBeforeRendering(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContext context}.
     *
     * The context is a data object. It can be used for default template expressions. A change of the context
     * object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By
     * default the context is an empty object.
     *
     * @returns Value of property `context`
     */
    getContext(): object;
    /**
     * ID of the element which is the current target of the association {@link #getTemplate template}, or `null`.
     */
    getTemplate(): ID;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the instance specific renderer for an anonymous template control.
     *
     * @returns the instance specific renderer function
     */
    getTemplateRenderer(): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * checks whether the control is inline or not
     *
     * @returns flag, whether to control is inline or not
     */
    isInline(): boolean;
    /**
     * Sets a new value for property {@link #getContext context}.
     *
     * The context is a data object. It can be used for default template expressions. A change of the context
     * object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By
     * default the context is an empty object.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContext(
      /**
       * New value for property `context`
       */
      oContext?: object
    ): this;
    /**
     * Sets the associated {@link #getTemplate template}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTemplate(
      /**
       * ID of an element which becomes the new target of this template association; alternatively, an element
       * instance may be given
       */
      oTemplate: ID | Template
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the instance specific renderer for an anonymous template control.
     *
     * @returns `this` to allow method chaining
     */
    setTemplateRenderer(
      /**
       * the instance specific renderer function
       */
      fnRenderer: Function
    ): this;
  }

  export interface $TemplateControlSettings extends $ControlSettings {
    /**
     * The context is a data object. It can be used for default template expressions. A change of the context
     * object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By
     * default the context is an empty object.
     */
    context?: object | PropertyBindingInfo | `{${string}}`;

    /**
     * The template on which the template control is based on.
     */
    template?: Template | string;

    /**
     * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
     */
    afterRendering?: (oEvent: Event) => void;

    /**
     * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
     */
    beforeRendering?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/TooltipBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { Dock, Collision } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip
   * Control is based on it. It provides the opening/closing behavior and the main "text" property.
   */
  export default class TooltipBase extends Control {
    /**
     * Constructor for a new TooltipBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TooltipBaseSettings
    );
    /**
     * Constructor for a new TooltipBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TooltipBaseSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.TooltipBase with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TooltipBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.TooltipBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.11.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.ui.core.TooltipBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.TooltipBase` itself.
     *
     * This event is fired when the Tooltip has been closed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.TooltipBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.11.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.ui.core.TooltipBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.TooltipBase` itself.
     *
     * This event is fired when the Tooltip has been closed
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClosed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.core.TooltipBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.11.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:closed closed} event of this `sap.ui.core.TooltipBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClosed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.11.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:closed closed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireClosed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAtPosition atPosition}.
     *
     * Optional. At position defines which position on the target control to align the positioned tooltip.
     *
     * Default value is `'begin bottom'`.
     *
     * @returns Value of property `atPosition`
     */
    getAtPosition(): Dock;
    /**
     * Gets current value of property {@link #getCloseDelay closeDelay}.
     *
     * Closing delay of the tooltip in milliseconds
     *
     * Default value is `100`.
     *
     * @returns Value of property `closeDelay`
     */
    getCloseDelay(): int;
    /**
     * Gets current value of property {@link #getCloseDuration closeDuration}.
     *
     * Optional. Close Duration in milliseconds.
     *
     * Default value is `200`.
     *
     * @returns Value of property `closeDuration`
     */
    getCloseDuration(): int;
    /**
     * Gets current value of property {@link #getCollision collision}.
     *
     * Optional. Collision - when the positioned element overflows the window in some direction, move it to
     * an alternative position.
     *
     * Default value is `'flip'`.
     *
     * @returns Value of property `collision`
     */
    getCollision(): Collision;
    /**
     * Gets current value of property {@link #getMyPosition myPosition}.
     *
     * Optional. My position defines which position on the extended tooltip being positioned to align with the
     * target control.
     *
     * Default value is `'begin top'`.
     *
     * @returns Value of property `myPosition`
     */
    getMyPosition(): Dock;
    /**
     * Gets current value of property {@link #getOffset offset}.
     *
     * Optional. Offset adds these left-top values to the calculated position. Example: "10 3".
     *
     * Default value is `'10 3'`.
     *
     * @returns Value of property `offset`
     */
    getOffset(): string;
    /**
     * Gets current value of property {@link #getOpenDelay openDelay}.
     *
     * Opening delay of the tooltip in milliseconds
     *
     * Default value is `500`.
     *
     * @returns Value of property `openDelay`
     */
    getOpenDelay(): int;
    /**
     * Gets current value of property {@link #getOpenDuration openDuration}.
     *
     * Optional. Open Duration in milliseconds.
     *
     * Default value is `200`.
     *
     * @returns Value of property `openDuration`
     */
    getOpenDuration(): int;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
     *
     * Default value is `empty string`.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getAtPosition atPosition}.
     *
     * Optional. At position defines which position on the target control to align the positioned tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'begin bottom'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAtPosition(
      /**
       * New value for property `atPosition`
       */
      sAtPosition?: Dock
    ): this;
    /**
     * Sets a new value for property {@link #getCloseDelay closeDelay}.
     *
     * Closing delay of the tooltip in milliseconds
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCloseDelay(
      /**
       * New value for property `closeDelay`
       */
      iCloseDelay?: int
    ): this;
    /**
     * Sets a new value for property {@link #getCloseDuration closeDuration}.
     *
     * Optional. Close Duration in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `200`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCloseDuration(
      /**
       * New value for property `closeDuration`
       */
      iCloseDuration?: int
    ): this;
    /**
     * Sets a new value for property {@link #getCollision collision}.
     *
     * Optional. Collision - when the positioned element overflows the window in some direction, move it to
     * an alternative position.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'flip'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCollision(
      /**
       * New value for property `collision`
       */
      sCollision?: Collision
    ): this;
    /**
     * Sets a new value for property {@link #getMyPosition myPosition}.
     *
     * Optional. My position defines which position on the extended tooltip being positioned to align with the
     * target control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'begin top'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMyPosition(
      /**
       * New value for property `myPosition`
       */
      sMyPosition?: Dock
    ): this;
    /**
     * Sets a new value for property {@link #getOffset offset}.
     *
     * Optional. Offset adds these left-top values to the calculated position. Example: "10 3".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'10 3'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOffset(
      /**
       * New value for property `offset`
       */
      sOffset?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOpenDelay openDelay}.
     *
     * Opening delay of the tooltip in milliseconds
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `500`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOpenDelay(
      /**
       * New value for property `openDelay`
       */
      iOpenDelay?: int
    ): this;
    /**
     * Sets a new value for property {@link #getOpenDuration openDuration}.
     *
     * Optional. Open Duration in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `200`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setOpenDuration(
      /**
       * New value for property `openDuration`
       */
      iOpenDuration?: int
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $TooltipBaseSettings extends $ControlSettings {
    /**
     * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Optional. Open Duration in milliseconds.
     */
    openDuration?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Optional. Close Duration in milliseconds.
     */
    closeDuration?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Optional. My position defines which position on the extended tooltip being positioned to align with the
     * target control.
     */
    myPosition?: Dock | PropertyBindingInfo | `{${string}}`;

    /**
     * Optional. At position defines which position on the target control to align the positioned tooltip.
     */
    atPosition?: Dock | PropertyBindingInfo | `{${string}}`;

    /**
     * Optional. Offset adds these left-top values to the calculated position. Example: "10 3".
     */
    offset?: string | PropertyBindingInfo;

    /**
     * Optional. Collision - when the positioned element overflows the window in some direction, move it to
     * an alternative position.
     */
    collision?: Collision | PropertyBindingInfo | `{${string}}`;

    /**
     * Opening delay of the tooltip in milliseconds
     */
    openDelay?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * Closing delay of the tooltip in milliseconds
     */
    closeDelay?: int | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.11.0
     *
     * This event is fired when the Tooltip has been closed
     */
    closed?: (oEvent: Event) => void;
  }
}

declare module "sap/ui/core/UIArea" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Control from "sap/ui/core/Control";

  import EventProvider from "sap/ui/base/EventProvider";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Interface from "sap/ui/base/Interface";

  import { ID } from "sap/ui/core/library";

  /**
   * An area in a page that hosts a tree of UI elements.
   *
   * `UIArea`s are fully managed by the UI5 {@link sap.ui.core.Core Core}. They cannot be created by the application
   * but are implicitly created by the Core when controls are placed via {@link sap.ui.core.Control#placeAt
   * Control#placeAt} at a new DOM element for which no `UIArea` exists yet.
   *
   * `UIArea`s are essential for the rendering of controls. Controls get rendered only when they are directly
   * or indirectly contained in the `content` aggregation of a `UIArea`. `Control#placeAt` ensures that there
   * is a `UIArea` with the given ID and adds the control to the `content` aggregation of this `UIArea`. Whenever
   * controls become invalidated, the corresponding `UIArea` remembers this and takes care of the re-rendering
   * of the control.
   *
   * Additionally, `UIArea`s play an important role in the event handling of controls. They register for a
   * standard set of browser events. For each incoming event, they identify the control to which the target
   * of the event belongs to and dispatch the event to that control. This dispatching reduces the number of
   * event handlers in a page.
   *
   * `UIArea`s also act as a data binding root for their contained controls. Whenever a model is attached
   * to or detached from the Core, this change is propagated to all `UIAreas` which in turn propagate it further
   * down to their aggregated children, etc.
   *
   * The special aggregation named `dependents` also participates in the databinding, but its content is not
   * rendered by the `UIArea`. It can be used for popups or similar controls that are not contained in the
   * normal control tree, but nevertheless should receive model or binding context updates.
   */
  export default class UIArea extends ManagedObject {
    constructor();

    /**
     * @SINCE 1.62
     *
     * Enabled or disables logging of certain event types.
     *
     * The event handling code of class UIArea logs all processed browser events with log level DEBUG. Only
     * some events that occur too frequently are suppressed by default: `mousemove`, `mouseover`, `mouseout`,
     * `scroll`, `dragover`, `dragenter` and `dragleave`.
     *
     * With this method, logging can be disabled for further event types or it can be enabled for some or all
     * of the event types listed above. The parameter `mEventTypes` is a map of boolean values keyed by event
     * type names. When the value for an event type coerces to true, events of that type won't be logged.
     *
     * @returns A copy of the resulting event logging configuration (not normalized)
     */
    static configureEventLogging(
      /**
       * Map of logging flags keyed by event types
       */
      mEventTypes?: Record<string, boolean>
    ): Record<string, boolean>;
    /**
     * Creates a new subclass of class sap.ui.core.UIArea with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UIArea>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.UIArea.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some dependent to the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addDependent(
      /**
       * The dependent to add; if empty, nothing is inserted
       */
      oDependent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyContent(): this;
    /**
     * Destroys all the dependents in the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyDependents(): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Provide getBindingContext, as UIArea can be parent of an element.
     *
     * @returns Always returns null.
     */
    getBindingContext(): null;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Content that is displayed in the UIArea.
     */
    getContent(): Control[];
    /**
     * Gets content of aggregation {@link #getDependents dependents}.
     *
     * Dependent objects whose lifecycle is bound to the UIArea but which are not automatically rendered by
     * the UIArea.
     */
    getDependents(): Control[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the Core's event provider as new eventing parent to enable control event bubbling to the core
     * to ensure compatibility with the core validation events.
     *
     * @returns the parent event provider
     */
    getEventingParent(): EventProvider;
    /**
     * Returns this `UIArea`'s id (as determined from provided RootNode).
     *
     * @returns id of this UIArea
     */
    getId(): string;
    /**
     * @deprecated (since 1.1) - use function {@link #getContent} instead
     *
     * Returns the content control of this `UIArea` at the specified index. If no index is given the first content
     * control is returned.
     *
     * @returns the content control of this `UIArea` at the specified index.
     */
    getRootControl(
      /**
       * index of the control in the content of this `UIArea`
       */
      idx: int
    ): Control;
    /**
     * Returns the Root Node hosting this instance of `UIArea`.
     *
     * @returns the Root Node hosting this instance of `UIArea`.
     */
    getRootNode(): Element;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns this UI area. Needed to stop recursive calls from an element to its parent.
     *
     * @returns this
     */
    getUIArea(): UIArea;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getDependents dependents}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfDependent(
      /**
       * The dependent whose index is looked for
       */
      oDependent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a dependent into the aggregation {@link #getDependents dependents}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertDependent(
      /**
       * The dependent to insert; if empty, nothing is inserted
       */
      oDependent: Control,
      /**
       * The `0`-based index the dependent should be inserted at; for a negative value of `iIndex`, the dependent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dependent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Triggers asynchronous re-rendering of the `UIArea`'s content.
     *
     * Serves as an end-point for the bubbling of invalidation requests along the element/control aggregation
     * hierarchy.
     */
    invalidate(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks whether the control is still valid (is in the DOM)
     *
     * @returns True if the control is still in the active DOM
     */
    isActive(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether re-rendering is currently suppressed on this UIArea.
     *
     * @returns Whether re-rendering is currently suppressed on this UIArea
     */
    isInvalidateSuppressed(): boolean;
    /**
     * Returns the locked state of the `sap.ui.core.UIArea`
     *
     * @returns locked state
     */
    isLocked(): boolean;
    /**
     * Locks this instance of UIArea.
     *
     * Rerendering and eventing will not be active as long as no {@link #unlock} is called.
     */
    lock(): void;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getDependents dependents}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllDependents(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     *
     * @returns The removed content or `null`
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control | null;
    /**
     * Removes a dependent from the aggregation {@link #getDependents dependents}.
     *
     * @returns The removed dependent or `null`
     */
    removeDependent(
      /**
       * The dependent to remove or its index or id
       */
      vDependent: int | string | Control
    ): Control | null;
    /**
     * @deprecated (since 1.1) - use {@link #removeAllContent} and {@link #addContent} instead
     *
     * Sets the root control to be displayed in this UIArea.
     *
     * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent relationship
     * to this UIArea will be cut off). Then the parent relationship for the new content control (if not empty)
     * will be set to this UIArea and finally, the UIArea will be marked for re-rendering.
     *
     * The real re-rendering happens whenever the re-rendering is called. Either implicitly at the end of any
     * control event or by calling sap.ui.getCore().applyChanges().
     */
    setRootControl(
      /**
       * the Control that should be the Root for this `UIArea`.
       */
      oRootControl: Interface | Control
    ): void;
    /**
     * @deprecated (since 1.107.0)
     *
     * Allows setting the root node hosting this instance of `UIArea`.
     *
     * The node must have an ID that will be used as ID for this instance of `UIArea`.
     */
    setRootNode(
      /**
       * the hosting DOM node for this instance of `UIArea`.
       */
      oRootNode: Element
    ): void;
    /**
     * Un-Locks this instance of UIArea.
     *
     * Rerendering and eventing will now be enabled again.
     */
    unlock(): void;
  }
  /**
   * @SINCE 1.107
   *
   * Registry of all `sap.ui.core.Element`s that currently exist.
   */
  export interface registry {
    /**
     * Number of existing UIAreas.
     */
    size: int;

    /**
     * Return an object with all instances of `sap.ui.core.UIArea`, keyed by their ID.
     *
     * Each call creates a new snapshot object. Depending on the size of the UI, this operation therefore might
     * be expensive. Consider to use the `forEach` or `filter` method instead of executing similar operations
     * on the returned object.
     *
     * **Note**: The returned object is created by a call to `Object.create(null)`, and therefore lacks all
     * methods of `Object.prototype`, e.g. `toString` etc.
     *
     * @returns Object with all UIAreas, keyed by their ID
     */
    all(): Record<ID, UIArea>;
    /**
     * Returns an array with UIAreas for which the given `callback` returns a value that coerces to `true`.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oUIArea, sID)
     * ```
     *  where `oUIArea` is the currently visited UIArea instance and `sID` is the ID of that instance.
     *
     * If UIAreas are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When an UIArea is destroyed or the root node is changed
     * during the filtering and was not visited yet, it might or might not be visited. As the behavior for such
     * concurrent modifications is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     *
     * This function returns an array with all UIAreas matching the given predicate. The order of the UIAreas
     * in the array is not specified and might change between calls (over time and across different versions
     * of UI5).
     *
     * @returns Array of UIAreas matching the predicate; order is undefined and might change in newer versions
     * of UI5
     */
    filter(
      /**
       * predicate against which each UIArea is tested
       */
      callback: (p1: UIArea, p2: ID) => boolean,
      /**
       * context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): UIArea[];
    /**
     * Calls the given `callback` for each UIArea.
     *
     * The expected signature of the callback is
     * ```javascript
     *
     *    function callback(oUIArea, sID)
     * ```
     *  where `oUIArea` is the currently visited UIArea instance and `sID` is the ID of that instance.
     *
     * The order in which the callback is called for UIAreas is not specified and might change between calls
     * (over time and across different versions of UI5).
     *
     * If UIAreas are created or destroyed within the `callback`, then the behavior is not specified. Newly
     * added objects might or might not be visited. When an UIArea is destroyed or the root node is changed
     * during the filtering and was not visited yet, it might or might not be visited. As the behavior for such
     * concurrent modifications is not specified, it may change in newer releases.
     *
     * If a `thisArg` is given, it will be provided as `this` context when calling `callback`. The `this` value
     * that the implementation of `callback` sees, depends on the usual resolution mechanism. E.g. when `callback`
     * was bound to some context object, that object wins over the given `thisArg`.
     */
    forEach(
      /**
       * Function to call for each UIArea
       */
      callback: (p1: UIArea, p2: ID) => void,
      /**
       * Context object to provide as `this` in each call of `callback`
       */
      thisArg?: Object
    ): void;
    /**
     * Retrieves an UIArea by its ID.
     *
     * When the ID is `null` or `undefined` or when there's no UIArea with the given ID, then `undefined` is
     * returned.
     *
     * @returns UIArea with the given ID or `undefined`
     */
    get(
      /**
       * ID of the UIArea to retrieve
       */
      id: ID
    ): UIArea | undefined;
  }
  export const registry: registry;

  export interface $UIAreaSettings extends $ManagedObjectSettings {
    /**
     * Content that is displayed in the UIArea.
     */
    content?: Control[] | Control | AggregationBindingInfo | `{${string}}`;

    /**
     * Dependent objects whose lifecycle is bound to the UIArea but which are not automatically rendered by
     * the UIArea.
     */
    dependents?: Control[] | Control | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/UIComponent" {
  import {
    default as Component,
    $ComponentSettings,
  } from "sap/ui/core/Component";

  import UI5Element from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import EventProvider from "sap/ui/base/EventProvider";

  import ComponentMetadata from "sap/ui/core/ComponentMetadata";

  import Router from "sap/ui/core/routing/Router";

  import View from "sap/ui/core/mvc/View";

  import Controller from "sap/ui/core/mvc/Controller";

  import Targets from "sap/ui/core/routing/Targets";

  import UIArea from "sap/ui/core/UIArea";

  import RenderManager from "sap/ui/core/RenderManager";

  import ComponentContainer from "sap/ui/core/ComponentContainer";

  /**
   * @SINCE 1.9.2
   *
   * Base Class for UIComponent.
   *
   * If you are extending a UIComponent make sure you read the {@link #.extend} documentation since the metadata
   * is special.
   */
  export default class UIComponent extends Component {
    /**
     * Creates and initializes a new UIComponent with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there. See {@link sap.ui.core.Component} for a general description of this argument.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $UIComponentSettings
    );
    /**
     * Creates and initializes a new UIComponent with the given `sId` and settings.
     *
     * The set of allowed entries in the `mSettings` object depends on the concrete subclass and is described
     * there. See {@link sap.ui.core.Component} for a general description of this argument.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new control; generated automatically if no non-empty ID is given; Note: this can
       * be omitted, no matter whether `mSettings` will be given or not
       */
      sId?: string,
      /**
       * Optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $UIComponentSettings
    );

    /**
     * Creates a new subclass of class `sap.ui.core.UIComponent` with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`. `oClassInfo` might contain the same kind of information as
     * described in {@link sap.ui.core.Component.extend}.
     *
     * @returns The created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Qualified name of the newly created class
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UIComponent>,
      /**
       * Constructor function for the metadata object. If not given, it defaults to an internal subclass of `sap.ui.core.ComponentMetadata`.
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.UIComponent.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ComponentMetadata;
    /**
     * @SINCE 1.16.1
     *
     * Returns the reference to the router instance.
     *
     * The passed controller or view has to be created in the context of a UIComponent to return the router
     * instance. Otherwise this function will return undefined. You may define the routerClass property in the
     * config section of the routing to make the Component create your router extension.
     *
     * Example:
     * ```javascript
     *
     * routing: {
     * 	config: {
     * 		routerClass : myAppNamespace.MyRouterClass
     * 		...
     * }
     * ...
     * ```
     *
     *
     * @returns the router instance
     */
    static getRouterFor(
      /**
       * either a view or controller
       */
      oControllerOrView: View | Controller
    ): Router;
    /**
     * Returns an element by its ID in the context of the component.
     *
     * @returns element by its ID or `undefined`
     */
    byId(
      /**
       * Component local ID of the element
       */
      sId: string
    ): UI5Element | undefined;
    /**
     * Hook method to create the content (UI Control Tree) of this component.
     *
     * The default implementation in this class reads the name (and optionally type) of a root view from the
     * descriptor for this component (path `/sap.ui5/rootView`) or, for backward compatibility, just the name
     * from static component metadata (property `rootView`). When no type is specified, it defaults to XML.
     * The method then calls the {@link sap.ui.view view factory} to instantiate the root view and returns the
     * result.
     *
     * When there is no root view configuration, `null` will be returned.
     *
     * This method can be overwritten by subclasses if the default implementation doesn't fit their needs. Subclasses
     * are not limited to views as return type but may return any control, but only a single control (can be
     * the root of a larger control tree, however).
     *
     * A `sap.ui.core.UIComponent` subclass can additionally implement the {@link sap.ui.core.IAsyncContentCreation}
     * interface. When implementing this interface the loading and processing of an asynchronous `rootView`
     * will be chained into the result Promise of the {@link sap.ui.core.Component.create Component.create}
     * factory. An additional async flag can be omitted. See Sample 1 below.
     *
     * Samples 2 and 3 show how subclasses can overwrite the `createContent` function to run asynchronously.
     * To create the root control asynchronously, the subclass has to define the `sap.ui.core.IAsyncContentCreation`
     * interface in the metadata.
     *
     * @returns Root control of the UI tree, or a promise resolving with the root control, or `null`, if none
     * is configured.
     */
    createContent(): Control | Promise<Control | null> | null;
    /**
     * Convert the given component local element ID to a globally unique ID by prefixing it with the component
     * ID.
     *
     * @returns prefixed id
     */
    createId(
      /**
       * Component local ID of the element
       */
      sId: string
    ): string;
    /**
     * @SINCE 1.15.1
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * A method to be implemented by UIComponents, returning the flag whether to prefix the IDs of controls
     * automatically or not if the controls are created inside the {@link sap.ui.core.UIComponent#createContent}
     * function. By default this feature is not activated.
     *
     * You can overwrite this function and return `true` to activate the automatic prefixing. In addition the
     * default behavior can be configured in the manifest by specifying the entry `sap.ui5/autoPrefixId`.
     *
     * @returns true, if the Controls IDs should be prefixed automatically
     */
    getAutoPrefixId(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the parent in the eventing hierarchy of this object which will be the UIArea of the containing
     * ComponentContainer or null.
     * See:
     * 	sap.ui.base.EventProvider#getEventingParent
     *
     * @returns The parent event provider
     */
    getEventingParent(): EventProvider;
    /**
     * @SINCE 1.39.0
     *
     * Returns the local ID of an element by removing the component ID prefix or `null` if the ID does not contain
     * a prefix.
     *
     * @returns ID without prefix or `null`
     */
    getLocalId(
      /**
       * Prefixed ID
       */
      sId: string
    ): string | null;
    /**
     * @SINCE 1.44.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the content of {@link sap.ui.core.UIComponent#createContent}. If you specified a `rootView` in
     * your metadata or in the descriptor file (manifest.json), you will get the instance of the root view.
     * This getter will only return something if the {@link sap.ui.core.UIComponent#init} function was invoked.
     * If `createContent` is not implemented, and there is no root view, it will return `null`. Here is an example:
     *
     * ```javascript
     *
     *          var MyExtension = UIComponent.extend("my.Component", {
     *               metadata: {
     *                    rootView: "my.View"
     *               },
     *               init: function () {
     *                    this.getRootControl(); // returns null
     *                    UIComponent.prototype.init.apply(this, arguments);
     *                    this.getRootControl(); // returns the view "my.View"
     *               }
     *          });
     *     ```
     *
     *
     * @returns the control created by {@link sap.ui.core.UIComponent#createContent}
     */
    getRootControl(): Control;
    /**
     * @SINCE 1.16.1
     *
     * Returns the reference to the router instance which has been created by the UIComponent once the routes
     * in the routing metadata has been defined.
     *
     * @returns the router instance
     */
    getRouter(): Router;
    /**
     * @SINCE 1.28
     *
     * Returns the reference to the Targets instance which has been created by the UIComponent once the targets
     * in the routing metadata has been defined. If routes have been defined, it will be the Targets instance
     * created and used by the router.
     *
     * @returns the targets instance
     */
    getTargets(): Targets;
    /**
     * Returns the reference to the UIArea of the container.
     *
     * @returns reference to the UIArea of the container
     */
    getUIArea(): UIArea;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initializes the component instance after creation.
     *
     * Applications must not call this hook method directly, it is called by the framework while the constructor
     * of a Component is executed.
     *
     * Subclasses of `UIComponent` should override this hook to implement any necessary initialization. **When
     * overriding this function make sure to invoke the `init` function of the `UIComponent` as well!**
     */
    init(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Function is called when the rendering of the ComponentContainer is completed.
     *
     * Applications must not call this hook method directly, it is called from ComponentContainer.
     *
     * Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.
     */
    onAfterRendering(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Function is called when the rendering of the ComponentContainer is started.
     *
     * Applications must not call this hook method directly, it is called from ComponentContainer.
     *
     * Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.
     */
    onBeforeRendering(): void;
    /**
     * Renders the root control of the UIComponent.
     */
    render(
      /**
       * a RenderManager instance
       */
      oRenderManager: RenderManager
    ): void;
    /**
     * @SINCE 1.90.0
     *
     * Returns a Promise representing the loading state of the root control.
     *
     * For UIComponents implementing the {@link sap.ui.core.IAsyncContentCreation} interface, there are two
     * possible cases:
     * 	 -  The `UIComponent` overwrites the {@link sap.ui.core.UIComponent#createContent} function and returns
     * 			a Promise. The `rootControlLoaded` function will then return the same Promise.
     * 	 -  The `UIComponent` defines a root view via its manifest. The root view is then automatically created
     * 			asynchronously, and the `rootControlLoaded` function returns a Promise which resolves with the fully
     * 			loaded and processed root view instance.
     *
     * For synchronous root control creation the Promise resolves immediately with the root control instance
     * or null if none was created.
     *
     * @returns resolves with the created root control or null if none was created, rejects with any thrown
     * error
     */
    rootControlLoaded(): Promise<Control | null>;
    /**
     * Sets the reference to the ComponentContainer - later required for the determination of the UIArea for
     * the UIComponent.
     *
     * @returns reference to this instance to allow method chaining
     */
    setContainer(
      /**
       * reference to a ComponentContainer
       */
      oContainer: ComponentContainer
    ): this;
  }
  /**
   * An object containing the routing-relevant configurations, routes, targets, config.
   *
   * Example for a config::
   *
   *
   * ```javascript
   *
   *     routing: {
   *         "routes": {
   *             "welcome": {
   *                 // If the URL has no hash e.g.: index.html or index.html# , this route will be matched.
   *                 "pattern": "",
   *                 // Displays the target called "welcome" specified in metadata.routing.targets.welcome.
   *                 "target": "welcome"
   *             }
   *             "product": {
   *                 "pattern": "Product/{id}",
   *                 "target": "product"
   *             }
   *         }
   *         // Default values for targets
   *         "config": {
   *             // For a detailed documentation of these parameters have a look at the sap.ui.core.routing.Targets documentation
   *             "viewType": "XML",
   *             "controlId": "App",
   *             "controlAggregation": "pages",
   *             "viewNamespace": "myApplication.namespace",
   *             // If you are using the mobile library, you have to use an sap.m.Router, to get support for
   *             // the controls sap.m.App, sap.m.SplitApp, sap.m.NavContainer and sap.m.SplitContainer.
   *             "routerClass": "sap.m.routing.Router"
   *             // What happens if no route matches the hash?
   *             "bypassed": {
   *                 // the not found target gets displayed
   *                 "target": "notFound"
   *             }
   *         }
   *         "targets": {
   *             "welcome": {
   *                 // Referenced by the route "welcome"
   *                 "viewName": "Welcome",
   *                 "viewLevel": 0
   *             },
   *             "product": {
   *                 // Referenced by the route "Product"
   *                 "viewName": "Product",
   *                 "viewLevel": 1
   *             }
   *             "notFound": {
   *                 // Referenced by the bypassed section of the config
   *                 "viewName": "NotFound"
   *             }
   *         }
   *     }
   *
   * ```
   */
  export type RoutingMetadata = {
    /**
     * An object containing the routes that should be added to the router. See {@link sap.ui.core.routing.Route}
     * for the allowed properties.
     */
    routes?: object;
    /**
     * Since 1.28.1. An object containing the targets that will be available for the router and the `Targets`
     * instance. See {@link sap.ui.core.routing.Targets} for the allowed values.
     */
    targets?: object;
    /**
     * Since 1.16. An object containing default values used for routes and targets. See {@link sap.ui.core.routing.Router#constructor}
     * and {@link sap.ui.core.routing.Targets} for more documentation.
     */
    config?: {
      /**
       * Since 1.20. The qualified name (in dot notation) or the constructor of the router class that should be
       * used for the component's router. If you are using an own router extension, it has to be required before
       * the constructor of the component is invoked. If you use `sap.m.routing.Router`, the component will automatically
       * create an {@link sap.m.routing.Targets} instance. If you pass a function, it has to be the constructor
       * of a class that extends a router.
       */
      routerClass?: string | Function;
      /**
       * Since 1.28.1. The qualified name (in dot notation) or the constructor of the `Targets` class that should
       * be used by the component's router. If you are using an own `Targets` extension, it has to be required
       * before the constructor of the component is invoked. If you define routes in your routing section, this
       * parameter will be ignored and the `Targets` instance of the router will be taken, see {@link sap.ui.core.routing.Router#getTargets}.
       */
      targetsClass?: string | Function;
      /**
       * By default, the root view will be set to the ID of the view returned by the {@link sap.ui.core.UIComponent#getRootView}
       * function. You should not set this parameter if you create a view with the UIComponent.
       */
      rootView?: string;
    };
  };

  export interface $UIComponentSettings extends $ComponentSettings {}
}

declare module "sap/ui/core/util/Export" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ExportColumn from "sap/ui/core/util/ExportColumn";

  import ExportRow from "sap/ui/core/util/ExportRow";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  import ExportType from "sap/ui/core/util/ExportType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use
   * it in other programs / applications.
   */
  export default class Export extends Control {
    /**
     * Constructor for a new Export.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportSettings
    );
    /**
     * Constructor for a new Export.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.Export with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Export>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.Export.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some column to the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addColumn(
      /**
       * The column to add; if empty, nothing is inserted
       */
      oColumn: ExportColumn
    ): this;
    /**
     * Adds some row to the aggregation {@link #getRows rows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addRow(
      /**
       * The row to add; if empty, nothing is inserted
       */
      oRow: ExportRow
    ): this;
    /**
     * Binds aggregation {@link #getColumns columns} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    bindColumns(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Binds aggregation {@link #getRows rows} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    bindRows(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the columns in the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyColumns(): this;
    /**
     * Destroys the exportType in the aggregation {@link #getExportType exportType}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyExportType(): this;
    /**
     * Destroys all the rows in the aggregation {@link #getRows rows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyRows(): this;
    /**
     * Generates the file content and returns a Promise with the instance as context (this).
     *  The promise will be resolved with the generated content as a string.
     *
     * **Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery
     * specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should
     * not be used. Please use only the standard methods 'then' and 'catch'!**
     *
     * @returns Promise object
     */
    generate(): Promise<any>;
    /**
     * Gets content of aggregation {@link #getColumns columns}.
     *
     * Columns for the Export.
     */
    getColumns(): ExportColumn[];
    /**
     * Gets content of aggregation {@link #getExportType exportType}.
     *
     * Type that generates the content.
     */
    getExportType(): ExportType;
    /**
     * Gets content of aggregation {@link #getRows rows}.
     *
     * Rows of the Export.
     */
    getRows(): ExportRow[];
    /**
     * Checks for the provided `sap.ui.core.util.ExportColumn` in the aggregation {@link #getColumns columns}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfColumn(
      /**
       * The column whose index is looked for
       */
      oColumn: ExportColumn
    ): int;
    /**
     * Checks for the provided `sap.ui.core.util.ExportRow` in the aggregation {@link #getRows rows}. and returns
     * its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfRow(
      /**
       * The row whose index is looked for
       */
      oRow: ExportRow
    ): int;
    /**
     * Inserts a column into the aggregation {@link #getColumns columns}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertColumn(
      /**
       * The column to insert; if empty, nothing is inserted
       */
      oColumn: ExportColumn,
      /**
       * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
       * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a row into the aggregation {@link #getRows rows}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertRow(
      /**
       * The row to insert; if empty, nothing is inserted
       */
      oRow: ExportRow,
      /**
       * The `0`-based index the row should be inserted at; for a negative value of `iIndex`, the row is inserted
       * at position 0; for a value greater than the current size of the aggregation, the row is inserted at the
       * last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColumns columns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllColumns(): ExportColumn[];
    /**
     * Removes all the controls from the aggregation {@link #getRows rows}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllRows(): ExportRow[];
    /**
     * Removes a column from the aggregation {@link #getColumns columns}.
     *
     * @returns The removed column or `null`
     */
    removeColumn(
      /**
       * The column to remove or its index or id
       */
      vColumn: int | string | ExportColumn
    ): ExportColumn | null;
    /**
     * Removes a row from the aggregation {@link #getRows rows}.
     *
     * @returns The removed row or `null`
     */
    removeRow(
      /**
       * The row to remove or its index or id
       */
      vRow: int | string | ExportRow
    ): ExportRow | null;
    /**
     * Generates the file content, triggers a download / save action and returns a Promise with the instance
     * as context (this).
     *  The promise will be resolved with the generated content as a string. **For information about browser
     * support, see `sap.ui.core.util.File.save`**
     *
     * **Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery
     * specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should
     * not be used. Please use only the standard methods 'then' and 'catch'!**
     *
     * @returns Promise object
     */
    saveFile(
      /**
       * The file name
       */
      sFileName?: string
    ): Promise<any>;
    /**
     * Sets the aggregated {@link #getExportType exportType}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setExportType(
      /**
       * The exportType to set
       */
      oExportType: ExportType
    ): this;
    /**
     * Unbinds aggregation {@link #getColumns columns} from model data.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unbindColumns(): this;
    /**
     * Unbinds aggregation {@link #getRows rows} from model data.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    unbindRows(): this;
  }

  export interface $ExportSettings extends $ControlSettings {
    /**
     * Type that generates the content.
     */
    exportType?: ExportType;

    /**
     * Columns for the Export.
     */
    columns?:
      | ExportColumn[]
      | ExportColumn
      | AggregationBindingInfo
      | `{${string}}`;

    /**
     * Rows of the Export.
     */
    rows?: ExportRow[] | ExportRow | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/util/ExportCell" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * Contains content that can be used to export data. Used in {@link sap.ui.core.util.ExportColumn ExportColumn}
   * / {@link sap.ui.core.util.Export Export}.
   */
  export default class ExportCell extends UI5Element {
    /**
     * Constructor for a new ExportCell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportCellSettings
    );
    /**
     * Constructor for a new ExportCell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportCellSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.ExportCell with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExportCell>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.ExportCell.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getContent content}.
     *
     * Cell content.
     *
     * @returns Value of property `content`
     */
    getContent(): string;
    /**
     * Sets a new value for property {@link #getContent content}.
     *
     * Cell content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setContent(
      /**
       * New value for property `content`
       */
      sContent: string
    ): this;
  }

  export interface $ExportCellSettings extends $ElementSettings {
    /**
     * Cell content.
     */
    content?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/util/ExportColumn" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import ExportCell from "sap/ui/core/util/ExportCell";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * Can have a name and a cell template.
   */
  export default class ExportColumn extends ManagedObject {
    /**
     * Constructor for a new ExportColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportColumnSettings
    );
    /**
     * Constructor for a new ExportColumn.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportColumnSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.ExportColumn with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExportColumn>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.ExportColumn.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Destroys the template in the aggregation {@link #getTemplate template}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyTemplate(): this;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Column name.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets content of aggregation {@link #getTemplate template}.
     *
     * Cell template for column.
     */
    getTemplate(): ExportCell;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Column name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName: string
    ): this;
    /**
     * Sets the aggregated {@link #getTemplate template}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setTemplate(
      /**
       * The template to set
       */
      oTemplate: ExportCell
    ): this;
  }

  export interface $ExportColumnSettings extends $ManagedObjectSettings {
    /**
     * Column name.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Cell template for column.
     */
    template?: ExportCell;
  }
}

declare module "sap/ui/core/util/ExportRow" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ExportCell from "sap/ui/core/util/ExportCell";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * Internally used in {@link sap.ui.core.util.Export Export}.
   */
  export default class ExportRow extends ManagedObject {
    /**
     * Constructor for a new ExportRow.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportRowSettings
    );
    /**
     * Constructor for a new ExportRow.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportRowSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.ExportRow with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExportRow>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.ExportRow.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Adds some cell to the aggregation {@link #getCells cells}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addCell(
      /**
       * The cell to add; if empty, nothing is inserted
       */
      oCell: ExportCell
    ): this;
    /**
     * Destroys all the cells in the aggregation {@link #getCells cells}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyCells(): this;
    /**
     * Gets content of aggregation {@link #getCells cells}.
     *
     * Cells for the Export.
     */
    getCells(): ExportCell[];
    /**
     * Checks for the provided `sap.ui.core.util.ExportCell` in the aggregation {@link #getCells cells}. and
     * returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfCell(
      /**
       * The cell whose index is looked for
       */
      oCell: ExportCell
    ): int;
    /**
     * Inserts a cell into the aggregation {@link #getCells cells}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertCell(
      /**
       * The cell to insert; if empty, nothing is inserted
       */
      oCell: ExportCell,
      /**
       * The `0`-based index the cell should be inserted at; for a negative value of `iIndex`, the cell is inserted
       * at position 0; for a value greater than the current size of the aggregation, the cell is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCells cells}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllCells(): ExportCell[];
    /**
     * Removes a cell from the aggregation {@link #getCells cells}.
     *
     * @returns The removed cell or `null`
     */
    removeCell(
      /**
       * The cell to remove or its index or id
       */
      vCell: int | string | ExportCell
    ): ExportCell | null;
  }

  export interface $ExportRowSettings extends $ManagedObjectSettings {
    /**
     * Cells for the Export.
     */
    cells?: ExportCell[] | ExportCell | AggregationBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/util/ExportType" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Export from "sap/ui/core/util/Export";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * Base export type. Subclasses can be used for {@link sap.ui.core.util.Export Export}.
   */
  export default class ExportType extends ManagedObject {
    /**
     * Constructor for a new ExportType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportTypeSettings
    );
    /**
     * Constructor for a new ExportType.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportTypeSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.ExportType with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExportType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.ExportType.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Handles the generation process of the file.
     *
     *
     * @returns content
     */
    _generate(
      /**
       * export instance
       */
      oExport: Export
    ): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a cell "generator" (inspired by ES6 Generators)
     *
     * @returns generator
     */
    cellGenerator(): Generator;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a column "generator" (inspired by ES6 Generators)
     *
     * @returns generator
     */
    columnGenerator(): Generator;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Generates the file content.
     *  Should be implemented by the individual types!
     *
     * @returns content
     */
    generate(): string;
    /**
     * Gets current value of property {@link #getByteOrderMark byteOrderMark}.
     *
     * Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).
     *
     * Default value is `undefined`.
     *
     * @returns Value of property `byteOrderMark`
     */
    getByteOrderMark(): boolean;
    /**
     * Gets current value of property {@link #getCharset charset}.
     *
     * Charset.
     *
     * @returns Value of property `charset`
     */
    getCharset(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the number of columns.
     *
     * @returns count
     */
    getColumnCount(): int;
    /**
     * Gets current value of property {@link #getFileExtension fileExtension}.
     *
     * File extension.
     *
     * @returns Value of property `fileExtension`
     */
    getFileExtension(): string;
    /**
     * Gets current value of property {@link #getMimeType mimeType}.
     *
     * MIME type.
     *
     * @returns Value of property `mimeType`
     */
    getMimeType(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the number of rows.
     *
     * @returns count
     */
    getRowCount(): int;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a row "generator" (inspired by ES6 Generators)
     *
     * @returns generator
     */
    rowGenerator(): Generator;
    /**
     * Sets a new value for property {@link #getByteOrderMark byteOrderMark}.
     *
     * Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `undefined`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setByteOrderMark(
      /**
       * New value for property `byteOrderMark`
       */
      bByteOrderMark?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getCharset charset}.
     *
     * Charset.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCharset(
      /**
       * New value for property `charset`
       */
      sCharset: string
    ): this;
    /**
     * Sets a new value for property {@link #getFileExtension fileExtension}.
     *
     * File extension.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setFileExtension(
      /**
       * New value for property `fileExtension`
       */
      sFileExtension: string
    ): this;
    /**
     * Sets a new value for property {@link #getMimeType mimeType}.
     *
     * MIME type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setMimeType(
      /**
       * New value for property `mimeType`
       */
      sMimeType: string
    ): this;
  }

  export interface $ExportTypeSettings extends $ManagedObjectSettings {
    /**
     * File extension.
     */
    fileExtension?: string | PropertyBindingInfo;

    /**
     * MIME type.
     */
    mimeType?: string | PropertyBindingInfo;

    /**
     * Charset.
     */
    charset?: string | PropertyBindingInfo;

    /**
     * Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).
     */
    byteOrderMark?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/util/ExportTypeCSV" {
  import {
    default as ExportType,
    $ExportTypeSettings,
  } from "sap/ui/core/util/ExportType";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22.0
   * @deprecated (since 1.73)
   *
   * CSV export type. Can be used for {@link sap.ui.core.util.Export Export}.
   *
   * Please note that there could be an issue with the separator char depending on the user's system language
   * in some programs such as Microsoft Excel. To prevent those issues use the data-import functionality which
   * enables the possibility to explicitly set the separator char that should be used. This way the content
   * will be displayed correctly.
   *
   * Potential formulas (cell data starts with one of = + - @) will be escaped by prepending a single quote.
   * As the export functionality is intended to be used with actual (user) data there is no reason to allow
   * formulas.
   *
   * The maximum cell length is limited to 32,760 characters. In case any string exceeds this limit, it will
   * be cut off.
   */
  export default class ExportTypeCSV extends ExportType {
    /**
     * Constructor for a new ExportTypeCSV.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportTypeCSVSettings
    );
    /**
     * Constructor for a new ExportTypeCSV.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ExportTypeCSVSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExportTypeCSV>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.ExportTypeCSV.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Generates the file content.
     *
     * @returns content
     */
    generate(): string;
    /**
     * Gets current value of property {@link #getSeparatorChar separatorChar}.
     *
     * Separator char.
     *
     * Value needs to be exactly one character or empty for default.
     *
     * Default value is `','`.
     *
     * @returns Value of property `separatorChar`
     */
    getSeparatorChar(): string;
    /**
     * Setter for property `separatorChar`.
     *
     * Value needs to be exactly one character or empty for default. Default value is ','.
     *
     * @returns `this` to allow method chaining
     */
    setSeparatorChar(
      /**
       * new value for property `separatorChar`
       */
      sSeparatorChar: string
    ): this;
  }

  export interface $ExportTypeCSVSettings extends $ExportTypeSettings {
    /**
     * Separator char.
     *
     * Value needs to be exactly one character or empty for default.
     */
    separatorChar?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/core/util/File" {
  /**
   * @SINCE 1.22.0
   *
   * Utility class to handle files.
   */
  interface File {
    /**
     * Triggers a download / save action of the given file.
     */
    save(
      /**
       * file content
       */
      sData: string,
      /**
       * file name
       */
      sFileName: string,
      /**
       * file extension
       */
      sFileExtension: string,
      /**
       * file mime-type
       */
      sMimeType: string,
      /**
       * file charset
       */
      sCharset: string,
      /**
       * Whether to prepend a unicode byte order mark (only applies for utf-8 charset). Default is `false` except
       * when `sFileExtension` === 'csv' and `sCharset` === 'utf-8' it is `true` (compatibility reasons).
       */
      bByteOrderMark?: boolean
    ): void;
  }
  const File: File;
  export default File;
}

declare module "sap/ui/core/util/MockServer" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * Class to mock http requests made to a remote server supporting the OData V2 REST protocol.
   */
  export default class MockServer extends ManagedObject {
    /**
     * Creates a mocked server. This helps to mock some back-end calls, e.g. for OData V2/JSON Models or simple
     * XHR calls, without changing the application code. This class can also be used for qunit tests.
     *
     * **Note:** Not all features of mock and all properties are supported.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $MockServerSettings,
      /**
       * scope object for resolving string based type and formatter references in bindings
       */
      oScope?: object
    );
    /**
     * Creates a mocked server. This helps to mock some back-end calls, e.g. for OData V2/JSON Models or simple
     * XHR calls, without changing the application code. This class can also be used for qunit tests.
     *
     * **Note:** Not all features of mock and all properties are supported.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new server object; generated automatically if no non-empty id is given Note: this can be omitted,
       * no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial property values, aggregated objects etc. for the new object
       */
      mSettings?: $MockServerSettings,
      /**
       * scope object for resolving string based type and formatter references in bindings
       */
      oScope?: object
    );

    /**
     * Global configuration of all mock servers.
     */
    static config(
      /**
       * the configuration object.
       */
      mConfig: {
        /**
         * If set true, all mock servers will respond automatically. If set false you have to call {@link sap.ui.core.util.MockServer.respond}
         * method for response.
         */
        autoRespond?: boolean;
        /**
         * the time in ms after all mock servers should send their response.
         */
        autoRespondAfter?: int;
        /**
         * If set to true, all mock server will find `_method` parameter in the POST body and use this to override
         * the actual method.
         */
        fakeHTTPMethods?: boolean;
      }
    ): void;
    /**
     * Stops and calls destroy on all registered servers. Use this method for cleaning up.
     */
    static destroyAll(): void;
    /**
     * Creates a new subclass of class sap.ui.core.util.MockServer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MockServer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.util.MockServer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Respond to a request, when the servers are configured not to automatically respond.
     */
    static respond(): void;
    /**
     * Starts all registered servers.
     */
    static startAll(): void;
    /**
     * Stops all registered servers.
     */
    static stopAll(): void;
    /**
     * Attaches an event handler to be called after the built-in request processing of the mock server
     */
    attachAfter(
      /**
       * event type according to HTTP Method
       */
      sHttpMethod: string,
      /**
       * the name of the function that will be called at this exit The callback function exposes an event with
       * parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per
       * the request. Examples are: oXhr : the request object; oFilteredData : the mock data entries that are
       * about to be returned in the response; oEntry : the mock data entry that is about to be returned in the
       * response;
       */
      fnCallback: Function,
      /**
       * (optional) the name of the entity set
       */
      sEntitySet: string
    ): void;
    /**
     * Attaches an event handler to be called before the built-in request processing of the mock server
     */
    attachBefore(
      /**
       * event type according to HTTP Method
       */
      sHttpMethod: string,
      /**
       * the name of the function that will be called at this exit. The callback function exposes an event with
       * parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per
       * the request. Examples are: oXhr : the request object; sUrlParams : the URL parameters of the request;
       * sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation
       */
      fnCallback: Function,
      /**
       * (optional) the name of the entity set
       */
      sEntitySet: string
    ): void;
    /**
     * Cleans up the resources associated with this object and all its aggregated children.
     *
     * After an object has been destroyed, it can no longer be used!
     *
     * Applications should call this method if they don't need the object any longer.
     * See:
     * 	sap.ui.base.ManagedObject#destroy
     */
    destroy(
      /**
       * if true, this ManagedObject is not marked as changed
       */
      bSuppressInvalidate?: boolean
    ): void;
    /**
     * Removes a previously attached event handler
     */
    detachAfter(
      /**
       * event type according to HTTP Method
       */
      sHttpMethod: string,
      /**
       * the name of the function that will be called at this exit
       */
      fnCallback: Function,
      /**
       * (optional) the name of the entity set
       */
      sEntitySet: string
    ): void;
    /**
     * Removes a previously attached event handler
     */
    detachBefore(
      /**
       * event type according to HTTP Method
       */
      sHttpMethod: string,
      /**
       * the name of the function that will be called at this exit
       */
      fnCallback: Function,
      /**
       * (optional) the name of the entity set
       */
      sEntitySet: string
    ): void;
    /**
     * Returns the data model of the given EntitySet name.
     *
     * @returns data model of the given EntitySet
     */
    getEntitySetData(
      /**
       * EntitySet name
       */
      sEntitySetName: string
    ): any[];
    /**
     * Getter for property `recordRequests`. Returns whether or not the requests performed should be recorded
     * (stored).
     *
     * Default value is `true`
     *
     * @returns the value of property `recordRequests`
     */
    getRecordRequests(): boolean;
    /**
     * Getter for property `requests`.
     *
     * Default value is `[]`
     *
     * @returns the value of property `requests`
     */
    getRequests(): RequestHandler[];
    /**
     * Getter for property `rootUri`. Has to be relative and requires a trailing '/'. It also needs to match
     * the URI set in OData/JSON models or simple XHR calls in order for the mock server to intercept them.
     *
     * Default value is empty/`undefined`. Must end with a a trailing slash ("/").
     *
     * @returns the value of property `rootUri`
     */
    getRootUri(): string;
    /**
     * Returns whether the server is started or not.
     *
     * @returns whether the server is started or not.
     */
    isStarted(): boolean;
    /**
     * Sets the data of the given EntitySet name with the given array.
     */
    setEntitySetData(
      /**
       * EntitySet name
       */
      sEntitySetName: string,

      aData: any[]
    ): void;
    /**
     * Setter for property `recordRequests`. Defines whether or not the requests performed should be recorded
     * (stored).
     *
     * Default value is `true`
     */
    setRecordRequests(
      /**
       * new value for property `recordRequests`
       */
      recordRequests: boolean
    ): void;
    /**
     * Setter for property `requests`.
     *
     * Default value is `[]`
     *
     * @returns Returns `this` to allow method chaining
     */
    setRequests(
      /**
       * new value for the `requests` property
       */
      requests: RequestHandler[]
    ): this;
    /**
     * Setter for property `rootUri`. All request path URI are prefixed with this root URI if set.
     *
     * Default value is empty/`undefined`
     */
    setRootUri(
      /**
       * new value for property `rootUri`
       */
      rootUri: string
    ): void;
    /**
     * @SINCE 1.13.2
     *
     * Simulates an existing OData service by sepcifying the metadata URL and the base URL for the mockdata.
     * The server configures the request handlers depending on the service metadata. The mockdata needs to be
     * stored individually for each entity type in a separate JSON file. The name of the JSON file needs to
     * match the name of the entity type. If no base url for the mockdata is specified then the mockdata are
     * generated from the metadata
     */
    simulate(
      /**
       * Either the URL to the service metadata document or the metadata document as xml string itself (starting
       * with "xml")
       */
      sMetadataString: string,
      /**
       * (optional) base url which contains the path to the mockdata, or an object which contains the following
       * properties: sMockdataBaseUrl, bGenerateMissingMockData, aEntitySetsNames. See below for descriptions
       * of these parameters. Ommit this parameter to produce random mock data based on the service metadata.
       */
      vMockdataSettings?:
        | string
        | {
            /**
             * base url which contains the mockdata as single .json files or the .json file containing the complete
             * mock data
             */
            sMockdataBaseUrl?: string;
            /**
             * if the MockServer should generate mock data for missing .json files that are not found in sMockdataBaseUrl
             */
            bGenerateMissingMockData?: boolean;
            /**
             * list of entity set names to fetch. If the list is empty or `undefined`, all entity sets will be retrieved.
             * This parameter should be used to improve performance in case there are a lot of entity sets but only
             * a few are needed to be fetched.
             */
            aEntitySetsNames?: any[];
          }
    ): void;
    /**
     * Starts the server.
     */
    start(): void;
    /**
     * Stops the server.
     */
    stop(): void;
  }
  /**
   * Enum for the method.
   */
  export enum HTTPMETHOD {
    DELETE = "DELETE",

    GET = "GET",

    MERGE = "MERGE",

    PATCH = "PATCH",

    POST = "POST",

    PUT = "PUT",
  }

  export type RequestHandler = {
    /**
     * Any HTTP verb
     */
    method: HTTPMETHOD | keyof typeof HTTPMETHOD;
    /**
     * A string path is converted to a regular expression, so it can contain normal regular expression syntax.
     *
     * All regular expression groups are forwarded as arguments to the `response` function. In addition to this,
     * parameters can be written in this notation: `:param`. These placeholders will be replaced by regular
     * expression groups.
     */
    path: string | RegExp;
    /**
     * A response handler function that will be called when an incoming request matches `method` and `path`.
     * The first parameter of the handler will be a `Response` object which can be used to respond on the request.
     */
    response: (p1: Response, p2: any) => void;
  };

  /**
   * Methods that can be used to respond to a request.
   */
  export interface Response {
    __implements__sap_ui_core_util_MockServer_Response: boolean;

    /**
     * Responds to the incoming request with the given `iStatusCode`, `mHeaders` and `sBody`.
     */
    respond(
      /**
       * HTTP status code to send with the response
       */
      StatusCode?: int,
      /**
       * HTTP headers to send with the response
       */
      mHeaders?: Record<string, string>,
      /**
       * A string that will be sent as response body
       */
      sBody?: string
    ): void;
    /**
     * Convenience variant of {@link #respond} which allows to send the content of an external resource as response.
     *
     * This method first synchronously fetches the given `sFileUrl`. Depending on the extension and path of
     * the `sFileUrl`, it propagates the received response body to {@link #respondJSON}, {@link #respondXML}
     * or {@link #respond}, using the given `iStatus` and `mHeaders`.
     *
     * The status code and headers of the received response are ignored. In particular, the `Content-Type` header
     * is not used for the mock server's response.
     */
    respondFile(
      /**
       * HTTP status code to send with the response
       */
      iStatusCode: int,
      /**
       * HTTP Headers to send with the response
       */
      mHeaders: Record<string, string>,
      /**
       * URL to get the response body from
       */
      sFileUrl: string
    ): void;
    /**
     * Convenience variant of {@link #respond} which allows to send the content of an external resource as response.
     *
     * This method first synchronously fetches the given `sFileUrl`. Depending on the extension and path of
     * the `sFileUrl`, it propagates the received response body to {@link #respondJSON}, {@link #respondXML}
     * or {@link #respond}, using the given `iStatus` and `mHeaders`.
     *
     * The status code and headers of the received response are ignored. In particular, the `Content-Type` header
     * is not used for the mock server's response.
     */
    respondFile(
      /**
       * HTTP status code to send with the response
       */
      iStatusCode: int,
      /**
       * URL to get the response body from
       */
      sFileUrl: string
    ): void;
    /**
     * Convenience variant of {@link #respond} which allows to send the content of an external resource as response.
     *
     * This method first synchronously fetches the given `sFileUrl`. Depending on the extension and path of
     * the `sFileUrl`, it propagates the received response body to {@link #respondJSON}, {@link #respondXML}
     * or {@link #respond}, using the given `iStatus` and `mHeaders`.
     *
     * The status code and headers of the received response are ignored. In particular, the `Content-Type` header
     * is not used for the mock server's response.
     */
    respondFile(
      /**
       * HTTP Headers to send with the response
       */
      mHeaders: Record<string, string>,
      /**
       * URL to get the response body from
       */
      sFileUrl: string
    ): void;
    /**
     * Convenience variant of {@link #respond} which allows to send the content of an external resource as response.
     *
     * This method first synchronously fetches the given `sFileUrl`. Depending on the extension and path of
     * the `sFileUrl`, it propagates the received response body to {@link #respondJSON}, {@link #respondXML}
     * or {@link #respond}, using the given `iStatus` and `mHeaders`.
     *
     * The status code and headers of the received response are ignored. In particular, the `Content-Type` header
     * is not used for the mock server's response.
     */
    respondFile(
      /**
       * URL to get the response body from
       */
      sFileUrl: string
    ): void;
    /**
     * Convenience variant of {@link #respond} which simplifies sending a JSON response.
     *
     * The response content `vBody` can either be given as a string, which is then assumed to be in JSON format.
     * Or it can be any JSON-stringifiable value which then will be converted to a string using `JSON.stringify`.
     * If no `vBody` is given, an empty response will be sent.
     *
     * If no `Content-Type` header is given, it will be set to `application/json`.
     */
    respondJSON(
      /**
       * HTTP status code to send with the response
       */
      iStatusCode?: int,
      /**
       * HTTP Headers to send with the response
       */
      mHeaders?: Record<string, string>,
      /**
       * A valid JSON-string or a JSON-stringifiable object that should be sent as response body
       */
      vBody?: object | string
    ): void;
    /**
     * Convenience variant of {@link #respond} which simplifies sending an XML response.
     *
     * If no `Content-Type` header is given, it will be set to `application/xml`.
     */
    respondXML(
      /**
       * HTTP status code to send with the response
       */
      iStatusCode?: int,
      /**
       * HTTP Headers to send with the response
       */
      mHeaders?: Record<string, string>,
      /**
       * XML string to send as response body
       */
      sXmlString?: string
    ): void;
  }

  export interface $MockServerSettings extends $ManagedObjectSettings {
    /**
     * Getter for property `rootUri`. Has to be relative and requires a trailing '/'. It also needs to match
     * the URI set in OData/JSON models or simple XHR calls in order for the mock server to intercept them.
     *
     * Default value is empty/`undefined`. Must end with a a trailing slash ("/").
     */
    rootUri?: string | PropertyBindingInfo;

    /**
     * Whether or not the requests performed should be recorded (stored). This could be memory intense if each
     * request is recorded. For unit testing purposes it should be set to `true` to compare requests performed
     * otherwise this flag should be set to `false` e.g. for demonstration/app purposes.
     */
    recordRequests?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Getter for property `requests`.
     *
     * Default value is `[]`
     */
    requests?: object[] | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/core/util/XMLPreprocessor" {
  import Model from "sap/ui/model/Model";

  /**
   * @SINCE 1.27.1
   *
   * The XML pre-processor for template instructions in XML views.
   */
  interface XMLPreprocessor {}
  const XMLPreprocessor: XMLPreprocessor;
  export default XMLPreprocessor;

  /**
   * @SINCE 1.27.1
   *
   * Context interface provided by XML template processing as an additional first argument to any formatter
   * function which opts in to this mechanism. Candidates for such formatter functions are all those used
   * in binding expressions which are evaluated during XML template processing, including those used inside
   * template instructions like `<template:if>`. The formatter function needs to be marked with a property
   * `requiresIContext = true` to express that it requires this extended signature (compared to ordinary formatter
   * functions). The usual arguments are provided after the first one (currently: the raw value from the model).
   *
   * This interface provides callback functions to access the model and path which are needed to process OData
   * V4 annotations. It initially offers a subset of methods from {@link sap.ui.model.Context} so that formatters
   * might also be called with a context object for convenience, e.g. outside of XML template processing (see
   * below for an exception to this rule).
   *
   * **Example:** Suppose you have a formatter function called "foo" like below and it is used within an XML
   * template like `<template:if test="{path: '...', formatter: 'foo'}">`. In this case `foo` is called
   * with arguments `oInterface, vRawValue` such that `oInterface.getModel().getObject(oInterface.getPath())
   * === vRawValue` holds.
   * ```javascript
   *
   * window.foo = function (oInterface, vRawValue) {
   *     //TODO ...
   * };
   * window.foo.requiresIContext = true;
   * ```
   *
   *
   * **Composite Binding Examples:** Suppose you have the same formatter function and it is used in a composite
   * binding like `<Text text="{path: 'Label', formatter: 'foo'}: {path: 'Value', formatter: 'foo'}"/>`.
   * In this case `oInterface.getPath()` refers to ".../Label" in the 1st call and ".../Value" in the 2nd
   * call. This means each formatter call knows which part of the composite binding it belongs to and behaves
   * just as if it was an ordinary binding.
   *
   * Suppose your formatter is not used within a part of the composite binding, but at the root of the composite
   * binding in order to aggregate all parts like ` <Text text="{parts: [{path: 'Label'}, {path: 'Value'}],
   * formatter: 'foo'}"/>`. In this case `oInterface.getPath(0)` refers to ".../Label" and `oInterface.getPath(1)`
   * refers to ".../Value". This means, the root formatter can access the ith part of the composite binding
   * at will (since 1.31.0); see also {@link #.getInterface getInterface}. The function `foo` is called with
   * arguments such that ` oInterface.getModel(i).getObject(oInterface.getPath(i)) === arguments[i + 1]` holds.
   *
   * To distinguish those two use cases, just check whether `oInterface.getModel() === undefined`, in which
   * case the formatter is called on root level of a composite binding. To find out the number of parts, probe
   * for the smallest non-negative integer where `oInterface.getModel(i) === undefined`. This additional functionality
   * is, of course, not available from {@link sap.ui.model.Context}, i.e. such formatters MUST be called with
   * an instance of this context interface.
   */
  export interface IContext {
    __implements__sap_ui_core_util_XMLPreprocessor_IContext: boolean;

    /**
     * @SINCE 1.31.0
     *
     * Returns a context interface for the indicated part in case of the root formatter of a composite binding.
     * The new interface provides access to the original settings, but only to the model and path of the indicated
     * part:
     * ```javascript
     *
     * this.getInterface(i).getSetting(sName) === this.getSetting(sName);
     * this.getInterface(i).getModel() === this.getModel(i);
     * this.getInterface(i).getPath() === this.getPath(i);
     * ```
     *
     *
     * If a path is given, the new interface points to the resolved path as follows:
     * ```javascript
     *
     * this.getInterface(i, "foo/bar").getPath() === this.getPath(i) + "/foo/bar";
     * this.getInterface(i, "/absolute/path").getPath() === "/absolute/path";
     * ```
     *  A formatter which is not at the root level of a composite binding can also provide a path, but must
     * not provide an index:
     * ```javascript
     *
     * this.getInterface("foo/bar").getPath() === this.getPath() + "/foo/bar";
     * this.getInterface("/absolute/path").getPath() === "/absolute/path";
     * ```
     *  Note that at least one argument must be present.
     *
     * @returns the context interface related to the indicated part
     */
    getInterface(
      /**
       * index of part in case of the root formatter of a composite binding
       */
      iPart?: number,
      /**
       * a path, interpreted relative to `this.getPath(iPart)`
       */
      sPath?: string
    ): IContext;
    /**
     * @SINCE 1.31.0
     *
     * Returns a context interface for the indicated part in case of the root formatter of a composite binding.
     * The new interface provides access to the original settings, but only to the model and path of the indicated
     * part:
     * ```javascript
     *
     * this.getInterface(i).getSetting(sName) === this.getSetting(sName);
     * this.getInterface(i).getModel() === this.getModel(i);
     * this.getInterface(i).getPath() === this.getPath(i);
     * ```
     *
     *
     * If a path is given, the new interface points to the resolved path as follows:
     * ```javascript
     *
     * this.getInterface(i, "foo/bar").getPath() === this.getPath(i) + "/foo/bar";
     * this.getInterface(i, "/absolute/path").getPath() === "/absolute/path";
     * ```
     *  A formatter which is not at the root level of a composite binding can also provide a path, but must
     * not provide an index:
     * ```javascript
     *
     * this.getInterface("foo/bar").getPath() === this.getPath() + "/foo/bar";
     * this.getInterface("/absolute/path").getPath() === "/absolute/path";
     * ```
     *  Note that at least one argument must be present.
     *
     * @returns the context interface related to the indicated part
     */
    getInterface(
      /**
       * a path, interpreted relative to `this.getPath(iPart)`
       */
      sPath?: string
    ): IContext;
    /**
     * Returns the model related to the current formatter call.
     *
     * @returns the model related to the current formatter call, or (since 1.31.0) `undefined` in case of a
     * root formatter if no `iPart` is given or if `iPart` is out of range
     */
    getModel(
      /**
       * index of part in case of the root formatter of a composite binding (since 1.31.0)
       */
      iPart?: number
    ): Model | undefined;
    /**
     * Returns the absolute path related to the current formatter call.
     *
     * @returns the absolute path related to the current formatter call, or (since 1.31.0) `undefined` in case
     * of a root formatter if no `iPart` is given or if `iPart` is out of range
     */
    getPath(
      /**
       * index of part in case of the root formatter of a composite binding (since 1.31.0)
       */
      iPart?: number
    ): string | undefined;
    /**
     * Returns the value of the setting with the given name which was provided to the XML template processing.
     *
     * @returns the value of the setting
     */
    getSetting(
      /**
       * the name of the setting
       */
      sName: string
    ): any;
  }
}

declare module "sap/ui/core/ValueStateSupport" {
  import UI5Element from "sap/ui/core/Element";

  import { ValueState } from "sap/ui/core/library";

  /**
   * Helper functionality for value state support.
   */
  interface ValueStateSupport {
    /**
     * Appends a generic success, warning or error message to the given tooltip text if the given Element has
     * a property "valueState" with one of these three states.
     *
     * @returns the given text, with appended success/warning/error text, if appropriate
     */
    enrichTooltip(
      /**
       * the Element of which the tooltip needs to be modified
       */
      oElement: UI5Element,
      /**
       * the original tooltip text (may be null)
       */
      sTooltipText: string
    ): string;
    /**
     * @SINCE 1.25.0
     *
     * Returns a ValueState object based on the given integer value
     *
     * 0 : ValueState.None 1 : ValueState.Warning 2 : ValueState.Success 3 : ValueState.Error 4 : ValueState.Information
     *
     * @returns the corresponding ValueState object
     */
    formatValueState(
      /**
       * the state as an integer
       */
      iState: int
    ): ValueState | keyof typeof ValueState;
    /**
     * Returns a generic success, warning or error message if the given Element has a property "valueState"
     * with one of these three states or the given ValueState represents one of these states.
     *
     * @returns the success/warning/error text, if appropriate; otherwise null
     */
    getAdditionalText(
      /**
       * the Element of which the valueState needs to be checked, or the ValueState explicitly
       */
      vValue: UI5Element | (ValueState | keyof typeof ValueState)
    ): string | null;
  }
  const ValueStateSupport: ValueStateSupport;
  export default ValueStateSupport;
}

declare module "sap/ui/core/VariantLayoutData" {
  import {
    default as LayoutData,
    $LayoutDataSettings,
  } from "sap/ui/core/LayoutData";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.9.2
   *
   * Allows to add multiple LayoutData to one control in case that an easy switch of layouts (e.g. in a Form)
   * is needed.
   */
  export default class VariantLayoutData extends LayoutData {
    /**
     * Constructor for a new VariantLayoutData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VariantLayoutDataSettings
    );
    /**
     * Constructor for a new VariantLayoutData.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VariantLayoutDataSettings
    );

    /**
     * Creates a new subclass of class sap.ui.core.VariantLayoutData with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VariantLayoutData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.VariantLayoutData.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * Adds some multipleLayoutData to the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    addMultipleLayoutData(
      /**
       * The multipleLayoutData to add; if empty, nothing is inserted
       */
      oMultipleLayoutData: LayoutData
    ): this;
    /**
     * Destroys all the multipleLayoutData in the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    destroyMultipleLayoutData(): this;
    /**
     * Gets content of aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * Allows multiple LayoutData.
     */
    getMultipleLayoutData(): LayoutData[];
    /**
     * Checks for the provided `sap.ui.core.LayoutData` in the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     * and returns its index if found or -1 otherwise.
     *
     * @returns The index of the provided control in the aggregation if found, or -1 otherwise
     */
    indexOfMultipleLayoutData(
      /**
       * The multipleLayoutData whose index is looked for
       */
      oMultipleLayoutData: LayoutData
    ): int;
    /**
     * Inserts a multipleLayoutData into the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    insertMultipleLayoutData(
      /**
       * The multipleLayoutData to insert; if empty, nothing is inserted
       */
      oMultipleLayoutData: LayoutData,
      /**
       * The `0`-based index the multipleLayoutData should be inserted at; for a negative value of `iIndex`, the
       * multipleLayoutData is inserted at position 0; for a value greater than the current size of the aggregation,
       * the multipleLayoutData is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     *
     * @returns An array of the removed elements (might be empty)
     */
    removeAllMultipleLayoutData(): LayoutData[];
    /**
     * Removes a multipleLayoutData from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
     *
     * @returns The removed multipleLayoutData or `null`
     */
    removeMultipleLayoutData(
      /**
       * The multipleLayoutData to remove or its index or id
       */
      vMultipleLayoutData: int | string | LayoutData
    ): LayoutData | null;
  }

  export interface $VariantLayoutDataSettings extends $LayoutDataSettings {
    /**
     * Allows multiple LayoutData.
     */
    multipleLayoutData?:
      | LayoutData[]
      | LayoutData
      | AggregationBindingInfo
      | `{${string}}`;
  }
}

declare module "sap/ui/core/ws/ReadyState" {
  /**
   * Defines the different ready states for a WebSocket connection.
   */
  enum ReadyState {
    /**
     * The connection has been closed or could not be opened.
     */
    CLOSED = "3",
    /**
     * The connection is going through the closing handshake.
     */
    CLOSING = "2",
    /**
     * The connection has not yet been established.
     */
    CONNECTING = "0",
    /**
     * The WebSocket connection is established and communication is possible.
     */
    OPEN = "1",
  }
  export default ReadyState;
}

declare module "sap/ui/core/ws/SapPcpWebSocket" {
  import WebSocket from "sap/ui/core/ws/WebSocket";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * WebSocket class implementing the pcp-protocol.
   */
  export default class SapPcpWebSocket extends WebSocket {
    /**
     * Creates a new WebSocket connection and uses the pcp-protocol for communication.
     */
    constructor(
      /**
       * relative or absolute URL for WebSocket connection.
       */
      sUrl: string,
      /**
       * array of protocols as strings, a single protocol as a string. Protocol(s) should be selected from {@link
       * sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS}.
       */
      aProtocols?: any[]
    );

    /**
     * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SapPcpWebSocket>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.ws.SapPcpWebSocket.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:message message} to attached listeners.
     *
     * @returns `this` to allow method chaining
     */
    fireMessage(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * Received data from the server.
         */
        data?: string;
        /**
         * Received pcpFields as a key-value map.
         */
        pcpFields?: string;
      }
    ): this;
    /**
     * Sends a message and optional pcp-header-fields using the pcp-protocol.
     *
     * If the connection is not yet opened, the message will be queued and sent when the connection is established.
     *
     * @returns Reference to `this` to allow method chaining
     */
    send(
      /**
       * message to send
       */
      message: string | Blob | ArrayBuffer,
      /**
       * additional pcp-fields as key-value map
       */
      oPcpFields?: object
    ): this;
  }
  /**
   * Protocol versions.
   *
   * One (or more) of these have to be selected to create an SapPcpWebSocket connection (or no protocol at
   * all).
   */
  export enum SUPPORTED_PROTOCOLS {
    v10 = "v10.pcp.sap.com",
  }
}

declare module "sap/ui/core/ws/WebSocket" {
  import EventProvider from "sap/ui/base/EventProvider";

  import UI5Element from "sap/ui/core/Element";

  import Metadata from "sap/ui/base/Metadata";

  import ReadyState from "sap/ui/core/ws/ReadyState";

  /**
   * Basic WebSocket class.
   */
  export default class WebSocket extends EventProvider {
    /**
     * Creates a new WebSocket connection.
     */
    constructor(
      /**
       * relative or absolute URL for WebSocket connection.
       */
      sUrl: string,
      /**
       * array of protocols as strings, a single protocol as a string
       */
      aProtocols?: any[]
    );

    /**
     * Creates a new subclass of class sap.ui.core.ws.WebSocket with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, WebSocket>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.ws.WebSocket.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:message message} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMessage(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:message message} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMessage(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:open open} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:open open} event of this `sap.ui.core.ws.WebSocket`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.core.ws.WebSocket` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `WebSocket` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the connection.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    close(
      /**
       * Status code that explains why the connection is closed. Must either be 1000, or between 3000 and 4999
       */
      iCode?: int,
      /**
       * Closing reason as a string
       */
      sReason?: string
    ): this;
    /**
     * Closes the connection.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    close(
      /**
       * Closing reason as a string
       */
      sReason?: string
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.ui.core.ws.WebSocket`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachClose(
      /**
       * The function to call, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.ui.core.ws.WebSocket`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachError(
      /**
       * The function to call, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:message message} event of this `sap.ui.core.ws.WebSocket`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMessage(
      /**
       * The function to call, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:open open} event of this `sap.ui.core.ws.WebSocket`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachOpen(
      /**
       * The function to call, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:close close} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * Close code provided by the server
         */
        code?: string;
        /**
         * Reason from server for closing the connection
         */
        reason?: string;
        /**
         * Indicates whether the connection was cleanly closed or not
         */
        wasClean?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:error error} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireError(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:message message} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMessage(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * Received data from the server
         */
        data?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:open open} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireOpen(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * `WebSockets` don't have a facade and therefore return themselves as their interface.
     * See:
     * 	sap.ui.base.Object#getInterface
     *
     * @returns `this` as there's no facade for a `Websocket` instance
     */
    getInterface(): UI5Element;
    /**
     * Getter for the protocol selected by the server once the connection is open.
     *
     * @returns protocol
     */
    getProtocol(): string;
    /**
     * Getter for WebSocket readyState.
     *
     * @returns readyState
     */
    getReadyState(): ReadyState;
    /**
     * Sends a message.
     *
     * If the connection is not yet opened, the message will be queued and sent when the connection is established.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    send(
      /**
       * Message to send
       */
      sMessage: string
    ): this;
  }
}

declare module "sap/ui/core/XMLComposite" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import UI5Element from "sap/ui/core/Element";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ResourceBundle from "sap/base/i18n/ResourceBundle";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.56.0
   * @deprecated (since 1.88) - use {@link topic:c1512f6ce1454ff1913e3857bad56392 Standard Composite Controls}
   * @EXPERIMENTAL (since 1.56.0)
   *
   * Base Class for XMLComposite controls.
   */
  export default class XMLComposite extends Control {
    /**
     * XMLComposite is the base class for composite controls that use a XML fragment representation for their
     * visual parts. From a user perspective such controls appear as any other control, but internally the rendering
     * part is added as a fragment. The fragment that is used should appear in the same folder as the control's
     * JS implementation with the file extension `.control.xml`. The fragment's content can access the interface
     * data from the XMLComposite control via bindings. Currently only aggregations and properties can be used
     * with bindings inside a fragment. The exposed model that is used for internal bindings in the fragment
     * has the default name `$this`. The name will always start with an `$`. The metadata of the derived control
     * can define the alias with its metadata. A code example can be found below.
     *
     * As XMLComposites compose other controls, they are only invalidated and re-rendered if explicitly defined.
     * Additional metadata for invalidation can be given for properties and aggregation. The default invalidation
     * is `"none"`. Setting invalidate to `true` for properties and aggregations sets the complete XMLComposite
     * to invalidate and rerender.
     *
     * Example:
     * ```javascript
     *
     * XMLComposite.extend("sap.mylib.MyXMLComposite", {
     *   metadata : {
     *     library: "sap.mylib",
     *     properties : {
     *       text: { //changing this property will not re-render the XMLComposite
     *          type: "string",
     *          defaultValue: ""
     *       },
     *       title: { //changing this property will re-render the XMLComposite as it defines invalidate: true
     *          type: "string",
     *          defaultValue: "",
     *          invalidate: true
     *       },
     *       value: { //changing this property will re-render the XMLComposite as it defines invalidate: true
     *          type: "string",
     *          defaultValue: "",
     *          invalidate: true
     *       }
     *     },
     *     defaultProperty : "text",
     *     aggregations : {
     *       items : {
     *          type: "sap.ui.core.Control",
     *          invalidate: true
     *       },
     *       header : {
     *          type: "sap.mylib.FancyHeader",
     *          multiple : false
     *       }
     *     },
     *     defaultAggregation : "items"
     *     events: {
     *       outerEvent : {
     *         parameters : {
     *           opener : "sap.ui.core.Control"
     *         }
     *       }
     *     }
     *   },
     *   //alias defaults to "this"
     *   alias: "mycontrolroot" //inner bindings will use model name $mycontrolroot
     *   //fragment defaults to {control name}.control.xml in this case sap.mylib.MyXMLComposite.control.xml
     *   fragment: "sap.mylib.MyXMLCompositeOther.control.xml" //the name of the fragment
     * });
     * ```
     *
     *
     * Internally the XMLComposite instantiates and initializes the given fragment and stores the resulting
     * control in a hidden aggregation named `_content`. The fragment should only include one root element.
     *
     * Bindings of inner controls to the interface of the XMLComposite can be done with normal binding syntax.
     * Here properties are used as property bindings and aggregations are used as list bindings. Currently it
     * is not possible to bind associations in a fragment.
     *
     * Example:
     * ```javascript
     *
     *    <core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core">
     *       <m:Text text="{$this>text}" visible="{= ${$this>text} !== ""}" />
     *    </core:FragmentDefinition>
     * ```
     *
     * ```javascript
     *
     *    <core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core">
     *       <m:VBox items="{path:"$this>texts", filters:{path:"text", operator:"Contains", value1:"Text"}, sorter:{path:"text", descending:true}}">
     *           <m:Text text="{$this>text}" />
     *       </m:VBox>
     *    </core:FragmentDefinition>
     * ```
     *
     * ```javascript
     *
     *    <core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core">
     *       <m:Button text="Press Me" press="handlePress"/>
     *    </core:FragmentDefinition>
     * ```
     *
     *
     * All events handled within the fragment will be dispatched to the XMLComposite control. It is recommended
     * to follow this paradigm to allow reuse of a XMLComposite without any dependency to controller code of
     * the current embedding view.
     *
     *
     * ```javascript
     *
     *    MyXMLComposite.prototype.handlePress = function() {
     *        this.fireOuterEvent(); // passing on the event to the outer view
     *    }
     * ```
     *
     *
     * **Note:** {@link topic:b11d853a8e784db6b2d210ef57b0f7d7 Requiring modules in XML} will result in side
     * effects that might cause the XMLComposite to not work properly. We suggest you require the needed modules
     * inside the JavaScript coding of the class extending the XMLComposite.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	sap.ui.core.Control
     * 	sap.ui.core.Fragment
     * 	{@link topic:b83a4dcb7d0e46969027345b8d32fd44 XML Composite Controls}
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.core.XMLComposite with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, XMLComposite>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.core.XMLComposite.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ElementMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an element by its ID in the context of the XMLComposite.
     *
     * May only be used by the implementation of a specific XMLComposite, not by an application using a XMLComposite.
     *
     * @returns element by its ID or `undefined`
     */
    byId(
      /**
       * XMLComposite-local ID of the inner element
       */
      sId: string
    ): UI5Element | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * This method is a hook for the RenderManager that gets called during the rendering of child Controls.
     * It allows to add, remove and update existing accessibility attributes (ARIA) of those controls.
     */
    enhanceAccessibilityState(
      /**
       * The Control that gets rendered by the RenderManager
       */
      oElement: Control,
      /**
       * The mapping of "aria-" prefixed attributes
       */
      mAriaProps: object
    ): void;
    /**
     * Gets current value of property {@link #getDisplayBlock displayBlock}.
     *
     * Whether the CSS display should be set to "block".
     *
     * Default value is `true`.
     *
     * @returns Value of property `displayBlock`
     */
    getDisplayBlock(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height
     *
     * @returns Value of property `height`
     */
    getHeight(): CSSSize;
    /**
     * Returns the resource bundle of the resource model
     *
     * Sample: this.getResourceBundle().then(function(oBundle) {oBundle.getText()})
     *
     * @returns loaded resource bundle or ECMA Script 6 Promise in asynchronous case
     */
    getResourceBundle(): ResourceBundle | Promise<any>;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width
     *
     * Default value is `'100%'`.
     *
     * @returns Value of property `width`
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getDisplayBlock displayBlock}.
     *
     * Whether the CSS display should be set to "block".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDisplayBlock(
      /**
       * New value for property `displayBlock`
       */
      bDisplayBlock?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $XMLCompositeSettings extends $ControlSettings {
    /**
     * The width
     */
    width?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * The height
     */
    height?: CSSSize | PropertyBindingInfo | `{${string}}`;

    /**
     * Whether the CSS display should be set to "block".
     */
    displayBlock?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/Device" {
  /**
   * Device and Feature Detection API: Provides information about the used browser / device and cross platform
   * support for certain events like media queries, orientation change or resizing.
   *
   * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand,
   * if it is needed, to create the UI5 bootstrap dynamically depending on the capabilities of the browser
   * or device.
   */
  interface Device {}
  const Device: Device;
  export default Device;

  export namespace browser {
    /**
     * @SINCE 1.56.0
     *
     * If this flag is set to `true`, a browser featuring a Blink rendering engine is used.
     */
    export const blink: boolean;

    /**
     * If this flag is set to `true`, a browser that is based on the Chromium browser project is used, such
     * as the Google Chrome browser or the Microsoft Edge (Chromium) browser.
     */
    export const chrome: boolean;

    /**
     * If this flag is set to `true`, the Mozilla Firefox browser is used.
     */
    export const firefox: boolean;

    /**
     * @SINCE 1.31.0
     *
     * If this flag is set to `true`, the Safari browser runs in standalone fullscreen mode on iOS.
     *
     * **Note:** This flag is only available if the Safari browser was detected. There might be slight differences
     * in behavior and detection, e.g. regarding the availability of {@link sap.ui.Device.browser.version}.
     */
    export const fullscreen: boolean;

    /**
     * If this flag is set to `true`, the mobile variant of the browser is used or a tablet or phone device
     * is detected.
     *
     * **Note:** This information might not be available for all browsers. **Note:** The flag is also set to
     * `true` for any touch device, including laptops with touchscreen monitor. For more information, see the
     * documentation for {@link sap.ui.Device.system.combi} devices.
     */
    export const mobile: boolean;

    /**
     * @SINCE 1.20.0
     *
     * If this flag is set to `true`, a browser featuring a Mozilla engine is used.
     */
    export const mozilla: boolean;

    /**
     * The name of the browser.
     * See:
     * 	sap.ui.Device.browser.BROWSER
     */
    export const name: string;

    /**
     * If this flag is set to `true`, the Apple Safari browser is used.
     *
     * **Note:** This flag is also `true` when the standalone (fullscreen) mode or webview is used on iOS devices.
     * Please also note the flags {@link sap.ui.Device.browser.fullscreen} and {@link sap.ui.Device.browser.webview}.
     */
    export const safari: boolean;

    /**
     * The version of the browser as `float`.
     *
     * Might be `-1` if no version can be determined.
     */
    export const version: float;

    /**
     * The version of the browser as `string`.
     *
     * Might be empty if no version can be determined.
     */
    export const versionStr: string;

    /**
     * @SINCE 1.20.0
     *
     * If this flag is set to `true`, a browser featuring a Webkit engine is used.
     *
     * **Note:** This flag is also `true` when the used browser was based on the Webkit engine, but uses another
     * rendering engine in the meantime. For example the Chrome browser started from version 28 and above uses
     * the Blink rendering engine.
     */
    export const webkit: boolean;

    /**
     * @SINCE 1.31.0
     * @deprecated (since 1.98)
     *
     * If this flag is set to `true`, the Safari browser runs in webview mode on iOS.
     *
     * **Note:** Since iOS 11 it is no longer reliably possible to detect whether an application runs in `webview`.
     * The flag is `true` if the browser's user agent contains 'SAPFioriClient'. Applications using WKWebView
     * have the possibility to customize the user agent, and to explicitly add this information.
     */
    export const webview: boolean;

    namespace BROWSER {
      /**
       * Android stock browser name.
       * See:
       * 	sap.ui.Device.browser.name
       */
      export const ANDROID: undefined;

      /**
       * Chrome browser name, used for Google Chrome browser and Microsoft Edge (Chromium) browser.
       * See:
       * 	sap.ui.Device.browser.name
       */
      export const CHROME: undefined;

      /**
       * Firefox browser name.
       * See:
       * 	sap.ui.Device.browser.name
       */
      export const FIREFOX: undefined;

      /**
       * Safari browser name.
       * See:
       * 	sap.ui.Device.browser.name
       */
      export const SAFARI: undefined;
    }
  }

  export namespace media {
    /**
     * Registers the given event handler to change events of the screen width based on the range set with the
     * specified name.
     *
     * The event is fired whenever the screen width changes and the current screen width is in a different interval
     * of the given range set than before the width change.
     *
     * The event handler is called with a single argument: a map `mParams` which provides the following information
     * about the entered interval:
     * 	 - `mParams.from`: The start value (inclusive) of the entered interval as a number
     * 	 - `mParams.to`: The end value (exclusive) range of the entered interval as a number or undefined for
     * 			the last interval (infinity)
     * 	 - `mParams.unit`: The unit used for the values above, e.g. `"px"`
     * 	 - `mParams.name`: The name of the entered interval, if available
     */
    function attachHandler(
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the `window` instance. A map with information about the entered
       * range set is provided as a single argument to the handler (see details above).
       */
      fnFunction: (p1: {
        from: number;

        to: number;

        unit: string;

        name: string | undefined;
      }) => void,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the `window`.
       */
      oListener?: object,
      /**
       * The name of the range set to listen to. The range set must be initialized beforehand ({@link sap.ui.Device.media.initRangeSet}).
       * If no name is provided, the {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
       */
      sName?: string
    ): void;
    /**
     * Removes a previously attached event handler from the change events of the screen width.
     *
     * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
     */
    function detachHandler(
      /**
       * The handler function to detach from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object,
      /**
       * The name of the range set to listen to. If no name is provided, the {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD
       * default range set} is used.
       */
      sName?: string
    ): void;
    /**
     * Returns information about the current active range of the range set with the given name.
     *
     * If the optional parameter `iWidth` is given, the active range will be determined for that width, otherwise
     * it is determined for the current window size.
     *
     * @returns Information about the current active interval of the range set. The returned object has the
     * same structure as the argument of the event handlers ({@link sap.ui.Device.media.attachHandler})
     */
    function getCurrentRange(
      /**
       * The name of the range set. The range set must be initialized beforehand ({@link sap.ui.Device.media.initRangeSet})
       */
      sName: string,
      /**
       * An optional width, based on which the range should be determined; If `iWidth` is not a number, the window
       * size will be used.
       */
      iWidth?: int
    ): {
      from: number;

      to: number;

      unit: string;

      name: string | undefined;
    };
    /**
     * Returns `true` if a range set with the given name is already initialized.
     *
     * @returns Returns `true` if a range set with the given name is already initialized
     */
    function hasRangeSet(
      /**
       * The name of the range set.
       */
      sName: string
    ): boolean;
    /**
     * Initializes a screen width media query range set.
     *
     * This initialization step makes the range set ready to be used for one of the other functions in namespace
     * `sap.ui.Device.media`. The most important {@link sap.ui.Device.media.RANGESETS predefined range sets}
     * are initialized automatically.
     *
     * To make a not yet initialized {@link sap.ui.Device.media.RANGESETS predefined range set} ready to be
     * used, call this function with the name of the range set to be initialized:
     * ```javascript
     *
     * sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);
     * ```
     *
     *
     * Alternatively it is possible to define custom range sets as shown in the following example:
     * ```javascript
     *
     * sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"]);
     * ```
     *  This example defines the following named ranges:
     * 	 - `"Small"`: For screens smaller than 200 pixels.
     * 	 - `"Medium"`: For screens greater than or equal to 200 pixels and smaller than 400 pixels.
     * 	 - `"Large"`: For screens greater than or equal to 400 pixels.  The range names are optional. If
     * 			they are specified a CSS class (e.g. `sapUiMedia-MyRangeSet-Small`) is also added to the document root
     * 			depending on the current active range. This can be suppressed via parameter `bSuppressClasses`.
     */
    function initRangeSet(
      /**
       * The name of the range set to be initialized - either a {@link sap.ui.Device.media.RANGESETS predefined}
       * or custom one. The name must be a valid id and consist only of letters and numeric digits.
       */
      sName: string,
      /**
       * The range borders
       */
      aRangeBorders?: int[],
      /**
       * The unit which should be used for the values given in `aRangeBorders`. The allowed values are `"px"`
       * (default), `"em"` or `"rem"`
       */
      sUnit?: string,
      /**
       * The names of the ranges. The names must be a valid id and consist only of letters and digits. If names
       * are specified, CSS classes are also added to the document root as described above. This behavior can
       * be switched off explicitly by using `bSuppressClasses`. **Note:** `aRangeBorders` with `n` entries define
       * `n+1` ranges. Therefore `n+1` names must be provided.
       */
      aRangeNames?: string[],
      /**
       * Whether or not writing of CSS classes to the document root should be suppressed when `aRangeNames` are
       * provided
       */
      bSuppressClasses?: boolean
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Removes a previously initialized range set and detaches all registered handlers.
     *
     * Only custom range sets can be removed via this function. Initialized predefined range sets ({@link sap.ui.Device.media.RANGESETS})
     * cannot be removed.
     */
    function removeRangeSet(
      /**
       * The name of the range set which should be removed.
       */
      sName: string
    ): void;

    namespace RANGESETS {
      /**
       * A 3-step range set (S-L).
       *
       * The ranges of this set are:
       * 	 - `"S"`: For screens smaller than 520 pixels.
       * 	 - `"M"`: For screens greater than or equal to 520 pixels and smaller than 960 pixels.
       * 	 - `"L"`: For screens greater than or equal to 960 pixels.
       *
       * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
       *
       * If this range set is initialized, a CSS class is added to the page root (`html` tag) which indicates
       * the current screen width range: `sapUiMedia-3Step-NAME_OF_THE_INTERVAL`.
       */
      export const SAP_3STEPS: undefined;

      /**
       * A 4-step range set (S-XL).
       *
       * The ranges of this set are:
       * 	 - `"S"`: For screens smaller than 520 pixels.
       * 	 - `"M"`: For screens greater than or equal to 520 pixels and smaller than 760 pixels.
       * 	 - `"L"`: For screens greater than or equal to 760 pixels and smaller than 960 pixels.
       * 	 - `"XL"`: For screens greater than or equal to 960 pixels.
       *
       * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
       *
       * If this range set is initialized, a CSS class is added to the page root (`html` tag) which indicates
       * the current screen width range: `sapUiMedia-4Step-NAME_OF_THE_INTERVAL`.
       */
      export const SAP_4STEPS: undefined;

      /**
       * A 6-step range set (XS-XXL).
       *
       * The ranges of this set are:
       * 	 - `"XS"`: For screens smaller than 241 pixels.
       * 	 - `"S"`: For screens greater than or equal to 241 pixels and smaller than 400 pixels.
       * 	 - `"M"`: For screens greater than or equal to 400 pixels and smaller than 541 pixels.
       * 	 - `"L"`: For screens greater than or equal to 541 pixels and smaller than 768 pixels.
       * 	 - `"XL"`: For screens greater than or equal to 768 pixels and smaller than 960 pixels.
       * 	 - `"XXL"`: For screens greater than or equal to 960 pixels.
       *
       * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
       *
       * If this range set is initialized, a CSS class is added to the page root (`html` tag) which indicates
       * the current screen width range: `sapUiMedia-6Step-NAME_OF_THE_INTERVAL`.
       */
      export const SAP_6STEPS: undefined;

      /**
       * A 3-step range set (Phone, Tablet, Desktop).
       *
       * The ranges of this set are:
       * 	 - `"Phone"`: For screens smaller than 600 pixels.
       * 	 - `"Tablet"`: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.
       * 	 - `"Desktop"`: For screens greater than or equal to 1024 pixels.
       *
       * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet}
       * is not needed.
       *
       * A CSS class is added to the page root (`html` tag) which indicates the current screen width range: `sapUiMedia-Std-NAME_OF_THE_INTERVAL`.
       * Furthermore there are 5 additional CSS classes to hide elements based on the width of the screen:
       *
       * 	 - `sapUiHideOnPhone`: Will be hidden if the screen has 600px or less
       * 	 - `sapUiHideOnTablet`: Will be hidden if the screen has more than 600px and less than 1023px
       * 	 - `sapUiHideOnDesktop`: Will be hidden if the screen is larger than 1024px
       * 	 - `sapUiVisibleOnlyOnPhone`: Will be visible only if the screen has less than 600px
       * 	 - `sapUiVisibleOnlyOnTablet`: Will be visible only if the screen has 600px or more but less than 1024px
       *
       * 	 - `sapUiVisibleOnlyOnDesktop`: Will be visible only if the screen has 1024px or more
       */
      export const SAP_STANDARD: undefined;

      /**
       * A 4-step range set (Phone, Tablet, Desktop, LargeDesktop).
       *
       * The ranges of this set are:
       * 	 - `"Phone"`: For screens smaller than 600 pixels.
       * 	 - `"Tablet"`: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.
       * 	 - `"Desktop"`: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.
       * 	 - `"LargeDesktop"`: For screens greater than or equal to 1440 pixels.
       *
       * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet}
       * is not needed.
       *
       * A CSS class is added to the page root (`html` tag) which indicates the current screen width range: `sapUiMedia-StdExt-NAME_OF_THE_INTERVAL`.
       */
      export const SAP_STANDARD_EXTENDED: undefined;
    }
  }

  export namespace orientation {
    /**
     * If this flag is set to `true`, the screen is currently in landscape mode (the width is greater than the
     * height).
     */
    export const landscape: boolean;

    /**
     * If this flag is set to `true`, the screen is currently in portrait mode (the height is greater than the
     * width).
     */
    export const portrait: boolean;

    /**
     * Registers the given event handler to orientation change events of the document's window.
     *
     * The event is fired whenever the screen orientation changes and the width of the document's window becomes
     * greater than its height or the other way round.
     *
     * The event handler is called with a single argument: a map `mParams` which provides the following information:
     *
     * 	 - `mParams.landscape`: If this flag is set to `true`, the screen is currently in landscape mode, otherwise
     * 			in portrait mode.
     */
    function attachHandler(
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the `window` instance. A map with information about the orientation
       * is provided as a single argument to the handler (see details above).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the `window`.
       */
      oListener?: object
    ): void;
    /**
     * Removes a previously attached event handler from the orientation change events.
     *
     * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
     */
    function detachHandler(
      /**
       * The handler function to detach from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object
    ): void;
  }

  export namespace os {
    /**
     * If this flag is set to `true`, an Android operating system is used.
     */
    export const android: boolean;

    /**
     * If this flag is set to `true`, an iOS operating system is used.
     */
    export const ios: boolean;

    /**
     * If this flag is set to `true`, a Linux operating system is used.
     */
    export const linux: boolean;

    /**
     * If this flag is set to `true`, a Mac operating system is used.
     *
     * **Note:** An iPad using Safari browser, which is requesting desktop sites, is also recognized as Macintosh.
     */
    export const macintosh: boolean;

    /**
     * The name of the operating system.
     * See:
     * 	sap.ui.Device.os.OS
     */
    export const name: string;

    /**
     * The version of the operating system as `float`.
     *
     * Might be `-1` if no version can reliably be determined.
     */
    export const version: float;

    /**
     * The version of the operating system as `string`.
     *
     * Might be empty if no version can reliably be determined.
     */
    export const versionStr: string;

    /**
     * If this flag is set to `true`, a Windows operating system is used.
     */
    export const windows: boolean;

    namespace OS {
      /**
       * Android operating system name.
       * See:
       * 	sap.ui.Device.os.name
       */
      export const ANDROID: undefined;

      /**
       * iOS operating system name.
       * See:
       * 	sap.ui.Device.os.name
       */
      export const IOS: undefined;

      /**
       * Linux operating system name.
       * See:
       * 	sap.ui.Device.os.name
       */
      export const LINUX: undefined;

      /**
       * MAC operating system name.
       * See:
       * 	sap.ui.Device.os.name
       */
      export const MACINTOSH: undefined;

      /**
       * Windows operating system name.
       * See:
       * 	sap.ui.Device.os.name
       */
      export const WINDOWS: undefined;
    }
  }

  export namespace resize {
    /**
     * The current height of the document's window in pixels.
     */
    export const height: int;

    /**
     * The current width of the document's window in pixels.
     */
    export const width: int;

    /**
     * Registers the given event handler to resize change events of the document's window.
     *
     * The event is fired whenever the document's window size changes.
     *
     * The event handler is called with a single argument: a map `mParams` which provides the following information:
     *
     * 	 - `mParams.height`: The height of the document's window in pixels.
     * 	 - `mParams.width`: The width of the document's window in pixels.
     */
    function attachHandler(
      /**
       * The handler function to call when the event occurs. This function will be called in the context of the
       * `oListener` instance (if present) or on the `window` instance. A map with information about the size
       * is provided as a single argument to the handler (see details above).
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs (`this` context within the handler function).
       * If it is not specified, the handler function is called in the context of the `window`.
       */
      oListener?: object
    ): void;
    /**
     * Removes a previously attached event handler from the resize events.
     *
     * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
     */
    function detachHandler(
      /**
       * The handler function to detach from the event
       */
      fnFunction: Function,
      /**
       * The object that wanted to be notified when the event occurred
       */
      oListener?: object
    ): void;
  }

  export namespace support {
    /**
     * If this flag is set to `true`, the used browser natively supports media queries via JavaScript.
     *
     * **Note:** The {@link sap.ui.Device.media media queries API} of the device API can also be used when there
     * is no native support.
     */
    export const matchmedia: boolean;

    /**
     * If this flag is set to `true`, the used browser natively supports events of media queries via JavaScript.
     *
     * **Note:** The {@link sap.ui.Device.media media queries API} of the device API can also be used when there
     * is no native support.
     */
    export const matchmedialistener: boolean;

    /**
     * If this flag is set to `true`, the used browser natively supports the `orientationchange` event.
     *
     * **Note:** The {@link sap.ui.Device.orientation orientation event} of the device API can also be used
     * when there is no native support.
     */
    export const orientation: boolean;

    /**
     * If this flag is set to `true`, the used browser supports pointer events.
     */
    export const pointer: boolean;

    /**
     * If this flag is set to `true`, the device has a display with a high resolution.
     */
    export const retina: boolean;

    /**
     * If this flag is set to `true`, the used browser supports touch events.
     *
     * **Note:** This flag indicates whether the used browser supports touch events or not. This does not necessarily
     * mean that the used device has a touchable screen. **Note:** This flag also affects other {@link sap.ui.Device}
     * properties. For more information, see the documentation for {@link sap.ui.Device.browser.mobile} and
     * {@link sap.ui.Device.system.combi} devices.
     */
    export const touch: boolean;

    /**
     * If this flag is set to `true`, the used browser supports web sockets.
     */
    export const websocket: boolean;
  }

  export namespace system {
    /**
     * If this flag is set to `true`, the device is recognized as a combination of a desktop system and tablet.
     *
     * Furthermore, a CSS class `sap-combi` is added to the document root element.
     *
     * **Note:** This property is set to `true` only when both a desktop and a mobile device is detected.
     */
    export const combi: boolean;

    /**
     * If this flag is set to `true`, the device is recognized as a desktop system.
     *
     * Furthermore, a CSS class `sap-desktop` is added to the document root element.
     *
     * **Note:** This flag is by default also true for Safari on iPads running on iOS 13 or higher. The end
     * user can change this behavior by disabling "Request Desktop Website -> All websites" within the iOS settings.
     * See also the documentation for {@link sap.ui.Device.system.combi} devices.
     */
    export const desktop: boolean;

    /**
     * If this flag is set to `true`, the device is recognized as a phone.
     *
     * Furthermore, a CSS class `sap-phone` is added to the document root element.
     *
     * **Note:** In case a phone requests a web page as a "Desktop Page", it is possible that all properties
     * except `Device.system.phone` are set to `true`. In this case it is not possible to differentiate between
     * tablet and phone relying on the user agent.
     */
    export const phone: boolean;

    /**
     * If this flag is set to `true`, the device is recognized as a tablet.
     *
     * Furthermore, a CSS class `sap-tablet` is added to the document root element.
     *
     * **Note:** This flag is also `true` for some browsers running on desktop devices. See the documentation
     * for {@link sap.ui.Device.system.combi} devices. You can use the following logic to ensure that the current
     * device is a tablet device:
     *
     *
     * ```javascript
     *
     * if(sap.ui.Device.system.tablet && !sap.ui.Device.system.desktop){
     * 	...tablet related commands...
     * }
     * ```
     */
    export const tablet: boolean;
  }
}

declare module "sap/ui/model/analytics/AnalyticalBinding" {
  import TreeBinding from "sap/ui/model/TreeBinding";

  import Model from "sap/ui/model/Model";

  import TreeAutoExpandMode from "sap/ui/model/TreeAutoExpandMode";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import { QueryResult } from "sap/ui/model/analytics/odata4analytics";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  import Sorter from "sap/ui/model/Sorter";

  /**
   * @EXPERIMENTAL - This module is only for experimental use!
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Tree binding implementation for OData entity sets with aggregate semantics.
   *
   * Note on the handling of different count modes: The AnalyticalBinding always uses the OData $inlinecount
   * system query option to determine the total count of matching entities. It ignores the default count mode
   * set in the ODataModel instance and the count mode specified in the binding parameters. If the default
   * count mode is `None`, a warning is added to the log to remind the application that OData requests generated
   * by the AnalyticalBinding will include a $inlinecount. If a count mode has been specified in the binding
   * parameters, an error message is logged if it is `None`, because the binding still adds the $inlinecount
   * to OData requests. If a binding count mode is set to `Request` or `Both`, a warning is logged to remind
   * the application that the OData requests generated by the AnalyticalBinding include a $inlinecount.
   */
  export default class AnalyticalBinding extends TreeBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor(
      /**
       * The OData model
       */
      oModel: Model,
      /**
       * The path pointing to the tree / array that should be bound
       */
      sPath: string,
      /**
       * The context object for this data binding
       */
      oContext?: object,
      /**
       * An array of predefined sorters
       */
      aSorter?: any[],
      /**
       * An array of predefined filters
       */
      aFilters?: any[],
      /**
       * A map containing additional binding parameters
       */
      mParameters?: {
        /**
         * The auto expand mode; applying sorters to groups is only possible in auto expand mode {@link sap.ui.model.TreeAutoExpandMode.Sequential}
         */
        autoExpandMode?: TreeAutoExpandMode | keyof typeof TreeAutoExpandMode;
        /**
         * The entity set addressed by the last segment of the given binding path
         */
        entitySet?: undefined;
        /**
         * Whether multiple OData requests are wrapped into a single $batch request wherever possible
         */
        useBatchRequests?: undefined;
        /**
         * Whether grand total values are provided for all bound measure properties
         */
        provideGrandTotals?: undefined;
        /**
         * Whether the total number of matching entries in the bound OData entity set is provided
         */
        provideTotalResultSize?: undefined;
        /**
         * Whether the binding checks aggregated entries with multi-unit occurrences, if some measure properties
         * have a unique unit and will trigger separate OData requests to fetch them
         */
        reloadSingleUnitMeasures?: undefined;
        /**
         * A comma-separated list of property names that need to be selected.
         *  If the `select` parameter is given, it has to contain all properties that are contained in the analytical
         * information (see {@link sap.ui.model.analytics.AnalyticalBinding#updateAnalyticalInfo}). It must not
         * contain additional dimensions or measures or associated properties for additional dimensions or measures.
         * But it may contain additional properties like a text property of a dimension that is also selected.
         *  All properties of the `select` parameter are also considered in {@link sap.ui.model.analytics.AnalyticalBinding#getDownloadUrl}.
         *  The `select` parameter must not contain any duplicate entry.
         *  If the `select` parameter does not fit to the analytical information or if the `select` parameter contains
         * duplicates, a warning is logged and the `select` parameter is ignored.
         */
        select?: string;
      }
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AnalyticalBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Sets filters for matching only a subset of the entities in the bound OData entity set.
     *
     * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts()
     * will need to trigger OData requests in order to fetch the data that are in line with these filters.
     *
     * @returns returns `this` to facilitate method chaining
     */
    filter(
      /**
       * an Array of sap.ui.model.Filter objects or a single Filter instance.
       */
      aFilter: Filter[] | Filter,
      /**
       * Type of the filter which should be adjusted.
       */
      sFilterType?: FilterType | keyof typeof FilterType
    ): this;
    /**
     * Gets the analytical information for a column with a given name.
     *
     * @returns analytical information for the column; see {@link #updateAnalyticalInfo} for an explanation
     * of the object structure
     */
    getAnalyticalInfoForColumn(
      /**
       * the column name.
       */
      sColumnName: string
    ): object;
    /**
     * Gets analytical metadata for the bound OData entity set.
     *
     * @returns analytical metadata for the bound OData entity set
     */
    getAnalyticalQueryResult(): QueryResult;
    /**
     * @SINCE 1.92.0
     *
     * Gets the total number of leaves or `undefined` if this is unknown.
     * See:
     * 	sap.ui.model.odata.v4.ODataListBinding#getCount
     *
     * @returns The total number of leaves, or `undefined` if the number is not yet known or if the `provideTotalResultSize`
     * binding parameter is set to `false`
     */
    getCount(): number | undefined;
    /**
     * Gets details about the dimension properties included in the bound OData entity set.
     *
     * @returns details for every dimension property addressed by its name. The details object provides these
     * properties: name of the dimension, keyPropertyName for the name of the property holding the dimension
     * key, textPropertyName for the name of the property holding the text for the dimension, aAttributeName
     * listing all properties holding dimension attributes, grouped as indicator whether or not this dimension
     * is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed
     * from the AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
     */
    getDimensionDetails(): object;
    /**
     * @SINCE 1.24
     *
     * Get a download URL with the specified format considering the sort/filter/custom parameters.
     *
     * The download URL also takes into account the selected dimensions and measures, depending on the given
     * column definitions of the AnalyticalTable. This is based on the visible/inResult flags of the columns,
     * as well as integrity dependencies, e.g. for mandatory Unit properties.
     *
     * @returns URL which can be used for downloading
     */
    getDownloadUrl(
      /**
       * Value for the $format Parameter
       */
      sFormat: string
    ): string;
    /**
     * Gets the names of the filterable properties in the bound OData entity set.
     *
     * @returns names of properties that can be filtered.
     */
    getFilterablePropertyNames(): any[];
    /**
     * Gets a printable name for a group.
     *
     * The printable name follows the pattern is `<label>:<key-value>[-<text-value>]`, where
     * `label` is the label of the dimension property used at the aggregation level for the group, `key-value`
     * is the key value of that dimension for the group, and `text-value` is the value of the associated text
     * property, if it is also used in the binding.
     *
     * Whenever a formatter function has been defined for a column displaying the key or text of this dimension,
     * the return value of this function is applied for the group name instead of the respective key or text
     * value.
     *
     * @returns a printable name for the group.
     */
    getGroupName(
      /**
       * the parent context identifying the requested group.
       */
      oContext: Context,
      /**
       * the level number of oContext (because the context might occur at multiple levels)
       */
      iLevel: int
    ): string;
    /**
     * Gets the total number of contexts contained in a group, if known.
     *
     * For a given group, be aware that the group size might vary over time. In principle, this can happen if
     * the bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding
     * recognizes situations where the OData service returns multiple entries for a single group entry due to
     * the fact that a measure property cannot be aggregated properly, because an amount exists in multiple
     * currencies or a quantity exists in multiple units. In such situations, the AnalyticalBinding substitutes
     * these entries by a single representative, and the group size gets reduced by the count of duplicate entries.
     * Finally, since the Binding does not always fetch all children of a group at once, but only a page with
     * a certain range, such size changes might happen after every page access.
     *
     * @returns The currently known group size, or -1, if not yet determined
     */
    getGroupSize(
      /**
       * the parent context identifying the requested group of child contexts.
       */
      oContext: Context,
      /**
       * the level number of oContext (because the context might occur at multiple levels)
       */
      iLevel: int
    ): int;
    /**
     * Gets details about the measure properties included in the bound OData entity set.
     *
     * @returns details for every measure property addressed by its name. The details object provides these
     * properties: name of the measure, rawValuePropertyName for the name of the property holding the raw value,
     * unitPropertyName for the name of the property holding the related value unit or currency, if any, and
     * analyticalInfo, which contains the binding information for this measure passed from the AnalyticalBinding's
     * consumer via call to function updateAnalyticalInfo.
     */
    getMeasureDetails(): object;
    /**
     * Gets child contexts for a specified parent context.
     *
     * Contexts are returned in a stable order imposed by the dimension property that defines this aggregation
     * level beneath the parent context: Either a sort order has been specified for this property, or the entries
     * are returned in ascending order of the values of this dimension property by default.
     *
     * If any of the requested data is missing, an OData request will be triggered to load it.
     *
     * @returns Array containing the requested contexts of class sap.ui.model.Context, limited by the number
     * of entries contained in the entity set at that aggregation level. The array will contain less than the
     * requested number of contexts, if some are not locally available and an OData request is pending to fetch
     * them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.
     */
    getNodeContexts(
      /**
       * Parent context identifying the requested group of child contexts
       */
      oContext: Context,
      /**
       * Parameters, specifying the aggregation level for which contexts shall be fetched or (legacy signature
       * variant) index of first child entry to return from the parent context (zero-based)
       */
      mParameters:
        | {
            /**
             * Level number for oContext, because it might occur at multiple levels; context with group ID `"/"` has
             * level 0
             */
            level: int;
            /**
             * Number of child levels that shall be fetched automatically
             */
            numberOfExpandedLevels?: int;
            /**
             * Index of first child entry to return from the parent context (zero-based)
             */
            startIndex?: int;
            /**
             * Number of entries to return; counting begins at the given start index
             */
            length?: int;
            /**
             * Number of additional entries that shall be locally available in the binding for subsequent accesses to
             * child entries of the given parent context
             */
            threshold?: int;
          }
        | int,
      /**
       * Same meaning as `mParameters.length`, legacy signature variant only
       */
      iLength?: int,
      /**
       * Same meaning as `mParameters.threshold`, legacy signature variant only
       */
      iThreshold?: int,
      /**
       * Same meaning as `mParameters.level`, legacy signature variant only
       */
      iLevel?: int,
      /**
       * Same meaning as `mParameters.numberOfExpandedLevels`, legacy signature variant only
       */
      iNumberOfExpandedLevels?: int
    ): Context[];
    /**
     * Gets the metadata of a property with a given name.
     *
     * @returns OData metadata of this property or null if it does not exist.
     */
    getProperty(
      /**
       * The property name.
       */
      sPropertyName: string
    ): object;
    /**
     * Gets the label of a property with a given name.
     *
     * @returns The heading maintained for this property or null if it does not exist.
     */
    getPropertyHeading(
      /**
       * The property name.
       */
      sPropertyName: string
    ): string;
    /**
     * Gets the label of a property with a given name.
     *
     * @returns The label maintained for this property or null if it does not exist.
     */
    getPropertyLabel(
      /**
       * The property name.
       */
      sPropertyName: string
    ): string;
    /**
     * Gets the quick info of a property with a given name.
     *
     * @returns The quick info maintained for this property or null if it does not exist.
     */
    getPropertyQuickInfo(
      /**
       * The property name.
       */
      sPropertyName: string
    ): string;
    /**
     * Gets the context for the root aggregation level representing the grand total for all bound measure properties.
     *
     * The context is assigned to parent group ID `null`. If the binding is configured not to provide a grand
     * total, this context is empty. If data for this context is not locally available yet, an OData request
     * will be triggered to load it.
     *
     * This function must be called whenever the bound set of OData entities changes, e.g., by changing selected
     * dimensions, modifying filter conditions, etc.
     *
     * @returns Array with a single object of class sap.ui.model.Context for the root context, or an empty array
     * if an OData request is pending to fetch requested contexts that are not yet locally available.
     */
    getRootContexts(
      /**
       * Parameter map specifying how the topmost aggregation level shall be fetched. If this parameter map is
       * set, the optional function parameters are ignored. Optionally, instead of a parameter map an integer
       * value can be set to define the parameter `startIndex` as described in this parameter list. In this case,
       * the function parameters `iLength`, `iNumberOfExpandedLevels` and `iThreshold` become mandatory.
       */
      mParameters:
        | {
            /**
             * Number of entries to return at and after the given start index; defaults to the model's size limit, see
             * {@link sap.ui.model.Model#setSizeLimit}
             */
            length: int;
            /**
             * Number of child levels that shall be fetched automatically
             */
            numberOfExpandedLevels: int;
            /**
             * Index of first entry to return from parent group ID `"/"` (zero-based)
             */
            startIndex: int;
            /**
             * Number of additional entries that shall be locally available in the binding for subsequent accesses to
             * contexts of parent group ID `"/"` or below, if auto-expanding is selected
             */
            threshold: int;
          }
        | int,
      /**
       * See documentation of the `length` parameter in the parameter list of `mParameters`
       */
      iLength?: int,
      /**
       * See documentation of the `numberOfExpandedLevels` parameter in the parameter list of `mParameters`
       */
      iNumberOfExpandedLevels?: int,
      /**
       * See documentation of the `threshold` parameter in the parameter list of `mParameters`
       */
      iThreshold?: int
    ): Context[];
    /**
     * Gets the names of the sortable properties in the bound OData entity set.
     *
     * @returns names of properties that can be used for sorting the result entities.
     */
    getSortablePropertyNames(): any[];
    /**
     * @deprecated (since 1.92) - use {@link #getCount} instead
     *
     * Gets the total number of leaves or `-1` if this is unknown.
     *
     * @returns The total number of leaves, or `-1` if the number is not yet known or if the binding parameter
     * `provideTotalResultSize` is set to `false`
     */
    getTotalSize(): number;
    /**
     * Determines if the binding has the entries of a given aggregation level locally available.
     *
     * If so, no further OData request is required to fetch any of them.
     *
     * @returns property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus, indicating
     * whether all, some, or none of the entries are locally available.
     */
    hasAvailableNodeContexts(
      /**
       * the parent context identifying the aggregation level.
       */
      oContext: Context,
      /**
       * the level number of oContext (because the context might occur at multiple levels).
       */
      iLevel: int
    ): boolean;
    /**
     * Determines if the contexts in a specified group have further children. If so, any of these group contexts
     * can be a parent context of a nested sub-group in a subsequent aggregation level.
     *
     * @returns `true` if any of the contexts in the specified group has further children
     */
    hasChildren(
      /**
       * The parent context identifying the requested group of child contexts
       */
      oContext: Context,
      /**
       * The only supported parameter is `level` as the level number of oContext (because the context might occur
       * at multiple levels)
       */
      mParameters?: {
        /**
         * The aggregation level number
         */
        level?: int;
      }
    ): boolean;
    /**
     * Determines if any of the properties included in the bound OData entity set is a measure property.
     *
     * @returns true if and only one or more properties are measure properties.
     */
    hasMeasures(): boolean;
    /**
     * Determines if a given name refers to a measure property
     *
     * @returns true if and only if the bound OData entity set includes a measure property with this name.
     */
    isMeasure(
      /**
       * The property name.
       */
      sPropertyName: string
    ): boolean;
    /**
     * Loads child contexts of multiple groups.
     */
    loadGroups(
      /**
       * specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group
       * index range is given by an object consisting of startIndex, length, threshold. For every group ID, the
       * map holds an array of such range objects.
       */
      mGroupIdRanges: Record<string, any[]>
    ): void;
    /**
     * Determines if the binding has been configured to provide a grand total for the selected measure properties.
     *
     * @returns true if and only if the binding provides a context for the grand totals of all selected measure
     * properties.
     */
    providesGrandTotal(): boolean;
    /**
     * Refreshes the binding, check whether the model data has been changed and fire change event if this is
     * the case. For service side models this should refetch the data from the service. To update a control,
     * even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
     * bForceUpdate.
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean
    ): void;
    /**
     * Sets sorters for retrieving the entities in the bound OData entity set in a specific order.
     *
     * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts()
     * will need to trigger OData requests in order to fetch the data that are in line with these sorters.
     *
     * @returns returns `this` to facilitate method chaining.
     */
    sort(
      /**
       * a sorter object or an array of sorter objects which define the sort order.
       */
      aSorter: Sorter | any[]
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Updates the binding's structure with new analytical information.
     *
     * Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every
     * column object contains the `name` of the bound property and in addition:
     * 	 - A column bound to a dimension property has further boolean properties:
     * 	grouped: dimension is used for building groups
     * 	 - inResult: if the column is not visible, but declared to be part of the result, values for the related
     * 			property are also fetched from the OData service
     * 	 - visible: if the column is visible, values for the related property are fetched from the OData service
     *
     * 	 - A column bound to a measure property has further boolean properties:
     * 	inResult: if the column is not visible, but declared to be part of the result, values for the related
     * property are also fetched from the OData service
     * 	 - total: totals and sub-totals are provided for the measure at all aggregation levels
     * 	 - visible: if the column is visible, values for the related property are fetched from the OData service
     *
     * 	 - A column bound to a hierarchy property has further properties:
     * 	grouped: boolean value; indicates whether the hierarchy is used for building groups
     * 	 - level: integer value; the hierarchy level is mandatory for at least one of those columns that represent
     * 			the same hierarchy
     *
     * Invoking this function resets the state of the binding and subsequent data requests such as calls to
     * getNodeContexts() trigger OData requests in order to fetch the data that are in line with this analytical
     * information.
     *
     * Be aware that a call of this function might lead to additional back-end requests, as well as a control
     * re-rendering later on. Whenever possible use the API of the analytical control, instead of relying on
     * the binding.
     */
    updateAnalyticalInfo(
      /**
       * An array with objects holding the analytical information for every column
       */
      aColumns: object[],
      /**
       * Whether to fire a change event asynchronously even if columns didn't change
       */
      bForceChange: boolean
    ): void;
  }
}

declare module "sap/ui/model/analytics/AnalyticalTreeBindingAdapter" {
  export default class AnalyticalTreeBindingAdapter {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
     * controls.
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).
     *
     * @returns the number of expanded levels
     */
    getNumberOfExpandedLevels(): int;
    /**
     * Checks if the AnalyticalBinding has totaled measures available. Used for rendering sum rows.
     *
     * @returns Whether the binding has totaled measures or not
     */
    hasTotaledMeasures(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding). This is NOT the
     * same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand. Setting the number
     * of expanded levels leads to different requests. This function is used by the AnalyticalTable for the
     * ungroup/ungroup-all feature.
     */
    setNumberOfExpandedLevels(
      /**
       * the number of levels which should be expanded, minimum is 0
       */
      iLevels: int
    ): void;
  }
}

declare module "sap/ui/model/analytics/BatchResponseCollector" {
  /**
   * Simple Response Collection Component, collects the responses for each sub-request inside a bigger batch
   * request.
   *
   * Also handles clean-up after all responses (either success or error) have been collected. Instantiated
   * in AnalyticalBinding.prototype._executeBatchRequest()
   */
  export default class BatchResponseCollector {
    /**
     * Constructor for a batch response collecting component.
     */
    constructor(
      /**
       * optional Setup-Parameter, @see BatchResponseCollector#setup
       */
      mParams?: object
    );

    /**
     * Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.
     *
     * Keeps track of all collected responses and fires the necessary events after all responses for the requests,
     * given in the constructor, have returned.
     */
    collect(
      /**
       * the response which should be collected
       */
      oResponse: object,
      /**
       * the type of the response, either BatchResponseCollector.TYPE_SUCCESS or BatchResponseCollector.TYPE_ERROR
       */
      sResponseType?: string
    ): void;
    /**
     * Convenience function to collect an error response.
     *
     * Internally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR
     */
    error(
      /**
       * the erroneous response object
       */
      oResponse: object
    ): void;
    /**
     * Setup-Function to initialize/reset the BatchResponseCollector.
     */
    setup(
      /**
       * optional Setup-Parameter
       */
      mParams?: {
        /**
         * an Array with detail information for all executed batch sub-requests
         */
        executedRequests: any[];
        /**
         * a reference to the AnalyticalBinding which started the batch request
         */
        binding: object;
        /**
         * the analyticalInfo version at the time of the creation of this BatchResponseCollector instance, this
         * may change during the process of a pending request. Typically changed via a call to AnalyticalBinding#updateAnalyticalInfo.
         */
        lastAnalyticalInfoVersion: int;
      }
    ): void;
    /**
     * Convenience function to collect a success response.
     *
     * Internally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS
     */
    success(
      /**
       * the successful response, which should be collected
       */
      oResponse: object
    ): void;
  }
}

declare module "sap/ui/model/analytics/odata4analytics" {
  import FilterOperator from "sap/ui/model/FilterOperator";

  import Filter from "sap/ui/model/Filter";

  import Sorter from "sap/ui/model/Sorter";

  /**
   * @EXPERIMENTAL - This module is only for experimental use!
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * The OData4Analytics API is purely experimental, not yet functionally complete and not meant for productive
   * usage. At present, its only purpose is to demonstrate how easy analytical extensions of OData4SAP can
   * be consumed.
   *
   * ***USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES DIRECTLY !***
   *
   * Lazy initialization of attributes will cause unexpected values when you access object attributes directly.
   */
  interface odata4analytics {
    /**
     * Specify which components of the dimension shall be included in the value set.
     */
    includeDimensionTextAttributes(
      /**
       * Indicator whether or not to include the dimension text (if available) in the value set.
       */
      bIncludeText: boolean,
      /**
       * Indicator whether or not to include all dimension attributes (if available) in the value set.
       */
      bIncludeAttributes: boolean
    ): void;
  }
  const odata4analytics: odata4analytics;
  export default odata4analytics;

  /**
   * Representation of a property annotated with sap:aggregation-role="dimension".
   */
  export class Dimension {
    /**
     * Create a representation of a dimension provided by an analytic query. Do not create your own instances.
     */
    constructor(
      /**
       * The query result containing this dimension
       */
      oQueryResult: QueryResult,
      /**
       * The datajs object object representing the dimension
       */
      oProperty: object
    );

    /**
     * Find attribute by name
     *
     * @returns The dimension attribute object with this name or null if it does not exist
     */
    findAttributeByName(
      /**
       * Attribute name
       */
      sName: string
    ): Dimension;
    /**
     * Get the names of all attributes included in this dimension
     *
     * @returns List of all attribute names
     */
    getAllAttributeNames(): string[];
    /**
     * Get all attributes of this dimension
     *
     * @returns An object with individual JS properties for each attribute of this dimension. The JS object
     * properties all are objects of type odata4analytics.DimensionAttribute. The names of the JS object properties
     * are given by the OData entity type property names representing the dimension attribute keys.
     */
    getAllAttributes(): object;
    /**
     * Get query result containing this dimension
     *
     * @returns The query result object
     */
    getContainingQueryResult(): QueryResult;
    /**
     * Get associated hierarchy
     *
     * @returns The hierarchy object or null if there is none. It can be an instance of class odata4analytics.RecursiveHierarchy
     * (TODO later: or a leveled hierarchy). Use methods isLeveledHierarchy and isRecursiveHierarchy to determine
     * object type.
     */
    getHierarchy(): object;
    /**
     * Get the key property
     *
     * @returns The datajs object representing the property for the dimension key
     */
    getKeyProperty(): object;
    /**
     * Get label
     *
     * @returns The (possibly language-dependent) label text for this dimension
     */
    getLabelText(): string;
    /**
     * Get master data entity set for this dimension
     *
     * @returns The master data entity set for this dimension, or null, if it does not exist
     */
    getMasterDataEntitySet(): EntitySet;
    /**
     * Get the name of the dimension
     *
     * @returns The name of this dimension, which is identical to the name of the dimension key property in
     * the entity type
     */
    getName(): string;
    /**
     * Get super-ordinate dimension
     *
     * @returns The super-ordinate dimension or null if there is none
     */
    getSuperOrdinateDimension(): object;
    /**
     * Get text property related to this dimension
     *
     * @returns The datajs object representing the text property or null if it does not exist
     */
    getTextProperty(): object;
    /**
     * Get indicator whether or not master data is available for this dimension
     *
     * @returns True iff master data is available
     */
    hasMasterData(): boolean;
  }
  /**
   * Representation of a dimension attribute.
   */
  export class DimensionAttribute {
    /**
     * Create a representation of a dimension attribute provided by an analytic query. Do not create your own
     * instances.
     */
    constructor(
      /**
       * The query result containing this dimension attribute
       */
      oQueryResult: QueryResult,
      /**
       * The datajs object object representing the dimension attribute
       */
      oProperty: object
    );

    /**
     * Get dimension
     *
     * @returns The dimension object containing this attribute
     */
    getDimension(): Dimension;
    /**
     * Get the key property
     *
     * @returns The datajs object representing the property for the key of this dimension attribute
     */
    getKeyProperty(): object;
    /**
     * Get label
     *
     * @returns The (possibly language-dependent) label text for this dimension attribute
     */
    getLabelText(): string;
    /**
     * Get the name of the dimension attribute
     *
     * @returns The name of the dimension attribute, which is identical to the name of the property in the entity
     * type holding the attribute value
     */
    getName(): string;
    /**
     * Get text property related to this dimension attribute
     *
     * @returns The datajs object representing the text property or null if it does not exist
     */
    getTextProperty(): object;
  }
  /**
   * Creation of URIs for fetching a query dimension value set.
   */
  export class DimensionMemberSetRequest {
    /**
     * Create a request object for interaction with a dimension value help. Such a value help is served by either
     * the query result entity set, in which case the returned dimension members are limited to those also used
     * in the query result data. Or, the value help is populated by a master data entity set, if made available
     * by the service. In this case, the result will include all valid members for that dimension.
     */
    constructor(
      /**
       * Description of a dimension
       */
      oDimension: Dimension,
      /**
       * (optional) Request object for interactions with the parameterization of the query result or (not yet
       * supported) master data entity set Such an object is required if the entity set holding the dimension
       * members includes parameters.
       */
      oParameterizationRequest: ParameterizationRequest,
      /**
       * (optional) Indicates use of master data for determining the dimension members.
       */
      bUseMasterData: boolean
    );

    /**
     * Get the filter expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The filter object associated to this request.
     */
    getFilterExpression(): FilterExpression;
    /**
     * Returns the current page boundaries as object with properties `start` and `end`. If the end of the page
     * is unbounded, `end` is null.
     *
     * @returns the current page boundaries as object
     */
    getResultPageBoundaries(): Object;
    /**
     * Get the sort expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The sort object associated to this request.
     */
    getSortExpression(): SortExpression;
    /**
     * Get the value of a query option for the OData request URI corresponding to this request.
     *
     * @returns The value of the requested query option or null, if this option is not used for the OData request.
     */
    getURIQueryOptionValue(
      /**
       * Identifies the query option: $select, $filter,... or any custom query option
       */
      sQueryOptionName: string
    ): string;
    /**
     * Get the URI to locate the entity set for the dimension memebers.
     *
     * @returns The resource path of the URI pointing to the entity set. It is a relative URI unless a service
     * root is given, which would then prefixed in order to return a complete URL.
     */
    getURIToDimensionMemberEntitySet(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): string;
    /**
     * Get the unescaped URI to fetch the dimension members, optionally augmented by text and attributes.
     *
     * @returns The unescaped URI that contains the OData resource path and OData system query options to express
     * the request for the parameter value set..
     */
    getURIToDimensionMemberEntries(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): string;
    /**
     * Set the filter expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the filter object maintained
     * by this request.
     */
    setFilterExpression(
      /**
       * The filter object to be associated with this request.
       */
      oFilter: FilterExpression
    ): void;
    /**
     * Set the parameterization request required for retrieving dimension members directly from the query result,
     * if it is parameterized.
     */
    setParameterizationRequest(
      /**
       * Request object for interactions with the parameterization of this query result
       */
      oParameterizationRequest: undefined
    ): void;
    /**
     * Set further options to be applied for the OData request
     */
    setRequestOptions(
      /**
       * Indicates whether or not the result shall include a count for the returned entities. Default is not to
       * include it. Pass null to keep current setting.
       */
      bIncludeCount: boolean
    ): void;
    /**
     * Specify that only a page of the query result shall be returned. A page is described by its boundaries,
     * that are row numbers for the first and last rows in the query result to be returned.
     */
    setResultPageBoundaries(
      /**
       * The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to
       * start with the first row.
       */
      start: int,
      /**
       * The last row of the query result to be returned. Passing null is equivalent to get all rows up to the
       * end of the query result.
       */
      end: int
    ): void;
    /**
     * Set the sort expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the sort object maintained
     * by this request.
     */
    setSortExpression(
      /**
       * The sort object to be associated with this request.
       */
      oSorter: SortExpression
    ): void;
  }
  /**
   * Representation of an OData entity set.
   */
  export class EntitySet {
    /**
     * Create a representation of an OData entity set in the context of an analytic query. Do not create your
     * own instances.
     */
    constructor(
      /**
       * datajs object for the OData model containing this entity set
       */
      oModel: object,
      /**
       * datajs object for the schema surrounding the container of this entity set
       */
      oSchema: object,
      /**
       * datajs object for the container holding this entity set
       */
      oContainer: object,
      /**
       * datajs object for the entity set
       */
      oEntitySet: object,
      /**
       * datajs object for the entity type
       */
      oEntityType: object
    );

    /**
     * Get entity type used for this entity set
     *
     * @returns The datajs object representing the entity type
     */
    getEntityType(): object;
    /**
     * Get the fully qualified name for this entity type
     *
     * @returns The fully qualified name
     */
    getQName(): string;
    /**
     * Get full description for this entity set
     *
     * @returns The datajs object representing the entity set
     */
    getSetDescription(): object;
    /**
     * Get names of properties in this entity set that can be updated
     *
     * @returns An object with individual JS properties for each updatable property. For testing whether propertyName
     * is the name of an updatable property, use `getUpdatablePropertyNameSet()[propertyName]`. The included
     * JS object properties are all set to true.
     */
    getUpdatablePropertyNameSet(): object;
  }
  /**
   * Representation of an OData entity type.
   */
  export class EntityType {
    /**
     * Create a representation of an OData entity type in the context of an analytic query. Do not create your
     * own instances.
     */
    constructor(
      /**
       * datajs object for the OData model containing this entity type
       */
      oModel: object,
      /**
       * datajs object for the schema containing this entity type
       */
      oSchema: object,
      /**
       * datajs object for the entity type
       */
      oEntityType: object
    );

    /**
     * Find property by name
     *
     * @returns The datajs object representing the property or null if it does not exist
     */
    findPropertyByName(
      /**
       * Property name
       */
      sPropertyName: string
    ): object;
    /**
     * Get the names of all properties with an associated hierarchy
     *
     * @returns List of all property names
     */
    getAllHierarchyPropertyNames(): string[];
    /**
     * Get names of properties that can be filtered, that is they can be used in $filter expressions
     *
     * @returns Array with names of properties that can be filtered.
     */
    getFilterablePropertyNames(): string[];
    /**
     * Get heading of the property with specified name (identified by property metadata annotation sap:heading)
     *
     * @returns The heading string
     */
    getHeadingOfProperty(
      /**
       * Property name
       */
      sPropertyName: string
    ): string;
    /**
     * Get the hierarchy associated to a given property Based on the current specification, hierarchies are
     * always recursive. TODO: Extend behavior when leveled hierarchies get in scope
     *
     * @returns The hierarchy object or null if it does not exist
     */
    getHierarchy(
      /**
       * Parameter name
       */
      sName: string
    ): RecursiveHierarchy;
    /**
     * Get key properties of this type
     *
     * @returns The list of key property names
     */
    getKeyProperties(): string[];
    /**
     * Get label of the property with specified name (identified by property metadata annotation sap:label)
     *
     * @returns The label string
     */
    getLabelOfProperty(
      /**
       * Property name
       */
      sPropertyName: string
    ): string;
    /**
     * Get all properties
     *
     * @returns Object with (JavaScript) properties, one for each (OData entity type) property. These (JavaScript)
     * properties hold the datajs object representing the property
     */
    getProperties(): object;
    /**
     * Get properties for which filter restrictions have been specified
     *
     * @returns Object with (JavaScript) properties, one for each (OData entity type) property. The property
     * value is from odata4analytics.EntityType.propertyFilterRestriction and indicates the filter restriction
     * for this property.
     */
    getPropertiesWithFilterRestrictions(): object;
    /**
     * Get the fully qualified name for this entity type
     *
     * @returns The fully qualified name
     */
    getQName(): string;
    /**
     * Get quick info of the property with specified name (identified by property metadata annotation sap:quickinfo)
     *
     * @returns The quick info string
     */
    getQuickInfoOfProperty(
      /**
       * Property name
       */
      sPropertyName: string
    ): string;
    /**
     * Get names of properties that must be filtered, that is they must appear in every $filter expression
     *
     * @returns Array with names of properties that must be filtered.
     */
    getRequiredFilterPropertyNames(): string[];
    /**
     * Get names of properties that can be sorted, that is they can be used in $orderby expressions
     *
     * @returns Array with names of properties that can be sorted.
     */
    getSortablePropertyNames(): string[];
    /**
     * Get the super-ordinate property related to the property with specified name (identified by property metadata
     * annotation sap:super-ordinate)
     *
     * @returns The datajs object representing the super-ordinate property or null if it does not exist
     */
    getSuperOrdinatePropertyOfProperty(
      /**
       * Property name
       */
      sPropertyName: string
    ): object;
    /**
     * Get the text property related to the property with specified name (identified by property metadata annotation
     * sap:text)
     *
     * @returns The datajs object representing the text property or null if it does not exist
     */
    getTextPropertyOfProperty(
      /**
       * Property name
       */
      sPropertyName: string
    ): object;
    /**
     * Get full description for this entity type
     *
     * @returns The datajs object representing the entity type
     */
    getTypeDescription(): object;
  }
  /**
   * Representation of a $filter expression for an OData entity type.
   */
  export class FilterExpression {
    /**
     * Create a representation of a filter expression for a given entity type. It can be rendered as value for
     * the $filter system query option.
     */
    constructor(
      /**
       * datajs object for the OData model containing this entity type
       */
      oModel: object,
      /**
       * datajs object for the schema containing this entity type
       */
      oSchema: object,
      /**
       * object for the entity type
       */
      oEntityType: EntityType
    );

    /**
     * Add a condition to the filter expression.
     *
     * Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions
     * for different properties are combined with a logical AND.
     *
     * @returns This object for method chaining
     */
    addCondition(
      /**
       * The name of the property bound in the condition
       */
      sPropertyName: string,
      /**
       * operator used for the condition
       */
      sOperator: FilterOperator | keyof typeof FilterOperator,
      /**
       * value to be used for this condition
       */
      oValue: object,
      /**
       * (optional) as second value to be used for this condition
       */
      oValue2: object
    ): FilterExpression;
    /**
     * Add a set condition to the filter expression.
     *
     * A set condition tests if the value of a property is included in a set of given values. It is a convenience
     * method for this particular use case eliminating the need for multiple API calls.
     *
     * @returns This object for method chaining
     */
    addSetCondition(
      /**
       * The name of the property bound in the condition
       */
      sPropertyName: string,
      /**
       * values defining the set
       */
      aValues: any[]
    ): FilterExpression;
    /**
     * Add an array of UI5 filter conditions to the filter expression.
     *
     * The UI5 filter condition is combined with the other given conditions using a logical AND. This method
     * is particularly useful for passing forward already created UI5 filter arrays.
     *
     * @returns This object for method chaining
     */
    addUI5FilterConditions(
      /**
       * Array of UI5 filter objects
       */
      aUI5Filter: Filter[]
    ): FilterExpression;
    /**
     * Check if request is compliant with basic filter constraints expressed in metadata:
     *
     * (a) all properties required in the filter expression have been referenced (b) the single-value filter
     * restrictions have been obeyed
     *
     * @returns The value true. In case the expression violates some of the rules, an exception with some explanatory
     * message is thrown
     */
    checkValidity(): boolean;
    /**
     * Clear expression from any conditions that may have been set previously
     */
    clear(): void;
    /**
     * Get description for this entity type
     *
     * @returns The object representing the entity type
     */
    getEntityType(): EntityType;
    /**
     * Get an array of SAPUI5 Filter objects corresponding to this expression.
     *
     * @returns List of filter objects representing this expression
     */
    getExpressionAsUI5FilterArray(): Filter[];
    /**
     * Get the value for the OData system query option $filter corresponding to this expression.
     *
     * @returns The $filter value for the filter expression
     */
    getURIFilterOptionValue(): string;
    /**
     * Remove all conditions for some property from the filter expression.
     *
     * All previously set conditions for some property are removed from the filter expression.
     *
     * @returns This object for method chaining
     */
    removeConditions(
      /**
       * The name of the property bound in the condition
       */
      sPropertyName: string
    ): FilterExpression;
  }
  /**
   * Representation of a property annotated with sap:aggregation-role="measure".
   */
  export class Measure {
    /**
     * Create a representation of a measure provided by an analytic query. Do not create your own instances.
     */
    constructor(
      /**
       * The query result containing this measure
       */
      oQueryResult: QueryResult,
      /**
       * The datajs object object representing the measure
       */
      oProperty: object
    );

    /**
     * Get the text property associated to the raw value property holding the formatted value related to this
     * measure
     *
     * @returns The datajs object representing the property holding the formatted value text of this measure
     * or null if this measure does not have a unit
     */
    getFormattedValueProperty(): object;
    /**
     * Get label
     *
     * @returns The (possibly language-dependent) label text for this measure
     */
    getLabelText(): string;
    /**
     * Get the name of the measure
     *
     * @returns The name of the measure, which is identical to the name of the measure raw value property in
     * the entity type
     */
    getName(): string;
    /**
     * Get the raw value property
     *
     * @returns The datajs object representing the property holding the raw value of this measure
     */
    getRawValueProperty(): object;
    /**
     * Get the unit property related to this measure
     *
     * @returns The datajs object representing the unit property or null if this measure does not have a unit
     */
    getUnitProperty(): object;
    /**
     * Get indicator whether or not the measure is updatable
     *
     * @returns True iff the measure is updatable
     */
    isUpdatable(): boolean;
  }
  /**
   * Representation of an OData model with analytical annotations defined by OData4SAP.
   */
  export class Model {
    /**
     * Create a representation of the analytical semantics of OData service metadata
     */
    constructor(
      /**
       * An instance of {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel} or {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround}
       * for locating the OData service. {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI} is
       * deprecated.
       */
      oModelReference: object,
      /**
       * Additional parameters for controlling the model construction. Currently supported are:
       * 	 -  sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the structure
       * 			of the given service
       * 	 -  modelVersion (deprecated) - Parameter to define which ODataModel version should be used if you use
       * 			{@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI}; supported values are: 1 (default),
       * 			2
       */
      mParameter?: object
    );

    /**
     * Find analytic query result by name
     *
     * @returns The query result object with this name or null if it does not exist
     */
    findQueryResultByName(
      /**
       * Fully qualified name of query result entity set
       */
      sName: string
    ): QueryResult;
    /**
     * Get the names of all query results (entity sets) offered by the model
     *
     * @returns List of all query result names
     */
    getAllQueryResultNames(): string[];
    /**
     * Get all query results offered by the model
     *
     * @returns An object with individual JS properties for each query result included in the model. The JS
     * object properties all are objects of type odata4analytics.QueryResult. The names of the JS object properties
     * are given by the entity set names representing the query results.
     */
    getAllQueryResults(): object;
    /**
     * Get underlying OData model provided by SAPUI5
     *
     * @returns The SAPUI5 representation of the model.
     */
    getODataModel(): object;
  }
  /**
   * Representation of a property annotated with sap:parameter.
   */
  export class Parameter {
    /**
     * Create a representation of a single parameter contained in a parameterization. Do not create your own
     * instances.
     */
    constructor(
      /**
       * The parameterization containing this parameter
       */
      oParameterization: Parameterization,
      /**
       * The datajs object object representing the text property
       */
      oProperty: object
    );

    /**
     * Get parameterization containing this parameter
     *
     * @returns The parameterization object
     */
    getContainingParameterization(): Parameterization;
    /**
     * Get label
     *
     * @returns The (possibly language-dependent) label text for this parameter
     */
    getLabelText(): string;
    /**
     * Get the name of the parameter
     *
     * @returns The name of the parameter, which is identical with the name of the property representing the
     * parameter in the parameterization entity type
     */
    getName(): string;
    /**
     * Get property for the parameter representing the peer boundary of the same interval
     *
     * @returns The parameter representing the peer boundary of the same interval. This means that if *this*
     * parameter is a lower boundary, the returned object
     */
    getPeerIntervalBoundaryParameter(): Parameter;
    /**
     * Get property
     *
     * @returns The datajs object representing the property of this parameter
     */
    getProperty(): object;
    /**
     * Get text property related to this parameter
     *
     * @returns The datajs object representing the text property or null if it does not exist
     */
    getTextProperty(): object;
    /**
     * Get the URI to locate the entity set holding the value set, if it is available.
     *
     * @returns The resource path of the URI pointing to the entity set. It is a relative URI unless a service
     * root is given, which would then prefixed in order to return a complete URL.
     */
    getURIToValueEntitySet(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): undefined;
    /**
     * Get indicator if the parameter represents an interval boundary
     *
     * @returns True iff it represents an interval boundary, otherwise false
     */
    isIntervalBoundary(): boolean;
    /**
     * Get indicator if the parameter represents the lower boundary of an interval
     *
     * @returns True iff it represents the lower boundary of an interval, otherwise false
     */
    isLowerIntervalBoundary(): boolean;
    /**
     * Get indicator whether or not the parameter is optional
     *
     * @returns True iff the parameter is optional
     */
    isOptional(): boolean;
    /**
     * Get indicator if a set of values is available for this parameter. Typically, this is true for parameters
     * with a finite set of known values such as products, business partners in different roles, organization
     * units, and false for integer or date parameters
     *
     * @returns True iff a value set is available, otherwise false
     */
    isValueSetAvailable(): boolean;
  }
  /**
   * Representation of an entity type annotated with sap:semantics="parameters".
   */
  export class Parameterization {
    /**
     * Create a representation of a parameterization for an analytic query. Do not create your own instances.
     */
    constructor(
      /**
       * The OData entity type for this parameterization
       */
      oEntityType: EntityType,
      /**
       * The OData entity set for this parameterization offered by the OData service
       */
      oEntitySet: EntitySet
    );

    /**
     * Find parameter by name
     *
     * @returns The parameter object with this name or null if it does not exist
     */
    findParameterByName(
      /**
       * Parameter name
       */
      sName: string
    ): Parameter;
    /**
     * Get the names of all parameters part of the parameterization
     *
     * @returns List of all parameter names
     */
    getAllParameterNames(): string[];
    /**
     * Get all parameters included in this parameterization
     *
     * @returns An object with individual JS properties for each parameter included in the query result. The
     * JS object properties all are objects of type odata4analytics.Parameter. The names of the JS object properties
     * are given by the OData entity type property names representing the parameter keys.
     */
    getAllParameters(): object;
    /**
     * Get the entity set representing this query result in the OData model
     *
     * @returns The OData entity set representing this query result
     */
    getEntitySet(): EntitySet;
    /**
     * Get the entity type defining the type of this query result in the OData model
     *
     * @returns The OData entity type for this query result
     */
    getEntityType(): EntityType;
    /**
     * Get the name of the parameter
     *
     * @returns The name of the parameterization, which is identical with the name of the entity set representing
     * the parameterization in the OData service
     */
    getName(): string;
    /**
     * Get navigation property to query result
     *
     * @returns The parameter object with this name or null if it does not exist
     */
    getNavigationPropertyToQueryResult(): QueryResult;
  }
  /**
   * Creation of URIs for query parameterizations.
   */
  export class ParameterizationRequest {
    /**
     * Create a request object for interaction with a query parameterization.
     */
    constructor(
      /**
       * Description of a query parameterization
       */
      oParameterization: Parameterization
    );

    /**
     * Get the description of the parameterization on which this request operates on
     *
     * @returns Description of a query parameterization
     */
    getParameterization(): Parameterization;
    /**
     * Get the URI to locate the entity set for the query parameterization.
     *
     * @returns The resource path of the URI pointing to the entity set. It is a relative URI unless a service
     * root is given, which would then prefixed in order to return a complete URL.
     */
    getURIToParameterizationEntitySet(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): undefined;
    /**
     * Get the URI to locate the parameterization entity for the values assigned to all parameters beforehand.
     * Notice that a value must be supplied for every parameter including those marked as optional. For optional
     * parameters, assign the special value that the service provider uses as an "omitted" value. For example,
     * for services based on BW Easy Queries, this would be an empty string.
     *
     * @returns The resource path of the URI pointing to the entity set. It is a relative URI unless a service
     * root is given, which would then prefixed in order to return a complete URL.
     */
    getURIToParameterizationEntry(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): undefined;
    /**
     * Assign a value to a parameter
     */
    setParameterValue(
      /**
       * Name of the parameter. In case of a range value, provide the name of the lower boundary parameter.
       */
      sParameterName: string,
      /**
       * Assigned value. Pass null to remove a value assignment.
       */
      sValue: string,
      /**
       * Omit it or set it to null for single values. If set, it will be assigned to the upper boundary parameter
       */
      sToValue: string
    ): void;
  }
  /**
   * Creation of URIs for fetching a query parameter value set.
   */
  export class ParameterValueSetRequest {
    /**
     * Create a request object for interaction with a query parameter value help.
     */
    constructor(
      /**
       * Description of a query parameter
       */
      oParameter: Parameter
    );

    /**
     * Get the filter expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The filter object associated to this request.
     */
    getFilterExpression(): FilterExpression;
    /**
     * Get the sort expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The sort object associated to this request.
     */
    getSortExpression(): SortExpression;
    /**
     * Get the value of a query option for the OData request URI corresponding to this request.
     *
     * @returns The value of the requested query option or null, if this option is not used for the OData request.
     */
    getURIQueryOptionValue(
      /**
       * Identifies the query option: $select, $filter,... or any custom query option
       */
      sQueryOptionName: string
    ): string;
    /**
     * Get the unescaped URI to fetch the parameter value set.
     *
     * @returns The unescaped URI that contains the OData resource path and OData system query options to express
     * the request for the parameter value set..
     */
    getURIToParameterValueSetEntries(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): string;
    /**
     * Specify which components of the parameter shall be included in the value set.
     */
    includeParameterText(
      /**
       * Indicator whether or not to include the parameter text (if available) in the value set. Pass null to
       * keep current setting.
       */
      bIncludeText: boolean
    ): void;
    /**
     * Set the filter expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the filter object maintained
     * by this request.
     */
    setFilterExpression(
      /**
       * The filter object to be associated with this request.
       */
      oFilter: FilterExpression
    ): void;
    /**
     * Set the sort expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the sort object maintained
     * by this request.
     */
    setSortExpression(
      /**
       * The sort object to be associated with this request.
       */
      oSorter: SortExpression
    ): void;
  }
  /**
   * Representation of an entity type annotated with sap:semantics="aggregate".
   */
  export class QueryResult {
    /**
     * Create a representation of an analytic query. Do not create your own instances.
     */
    constructor(
      /**
       * The analytical model containing this query result entity set
       */
      oModel: Model,
      /**
       * The OData entity type for this query
       */
      oEntityType: EntityType,
      /**
       * The OData entity set for this query offered by the OData service
       */
      oEntitySet: EntitySet,
      /**
       * The parameterization of this query, if any
       */
      oParameterization: Parameterization
    );

    /**
     * Find dimension by name
     *
     * @returns The dimension object with this name or null if it does not exist
     */
    findDimensionByName(
      /**
       * Dimension name
       */
      sName: string
    ): Dimension;
    /**
     * Find dimension by property name
     *
     * @returns The dimension object to which the given property name is related, because the property holds
     * the dimension key, its text, or is an attribute of this dimension. If no such dimension exists, null
     * is returned.
     */
    findDimensionByPropertyName(
      /**
       * Property name
       */
      sName: string
    ): Dimension;
    /**
     * Find measure by name
     *
     * @returns The measure object with this name or null if it does not exist
     */
    findMeasureByName(
      /**
       * Measure name
       */
      sName: string
    ): Measure;
    /**
     * Find measure by property name
     *
     * @returns The measure object to which the given property name is related, because the property holds the
     * raw measure value or its formatted value. If no such measure exists, null is returned.
     */
    findMeasureByPropertyName(
      /**
       * Property name
       */
      sName: string
    ): Measure;
    /**
     * Get the names of all dimensions included in the query result
     *
     * @returns List of all dimension names
     */
    getAllDimensionNames(): string[];
    /**
     * Get all dimensions included in this query result
     *
     * @returns An object with individual JS properties for each dimension included in the query result. The
     * JS object properties all are objects of type odata4analytics.Dimension. The names of the JS object properties
     * are given by the OData entity type property names representing the dimension keys.
     */
    getAllDimensions(): object;
    /**
     * Get the names of all measures included in the query result
     *
     * @returns List of all measure names
     */
    getAllMeasureNames(): string[];
    /**
     * Get all measures included in this query result
     *
     * @returns An object with individual JS properties for each measure included in the query result. The JS
     * object properties all are objects of type odata4analytics.Measure. The names of the JS object properties
     * are given by the OData entity type property names representing the measure raw values.
     */
    getAllMeasures(): object;
    /**
     * Get the entity set representing this query result in the OData model
     *
     * @returns The OData entity set representing this query result
     */
    getEntitySet(): EntitySet;
    /**
     * Get the entity type defining the type of this query result in the OData model
     *
     * @returns The OData entity type for this query result
     */
    getEntityType(): EntityType;
    /**
     * Get the analytical model containing the entity set for this query result
     *
     * @returns The analytical representation of the OData model
     */
    getModel(): object;
    /**
     * Get the name of the query result
     *
     * @returns The fully qualified name of the query result, which is identical with the name of the entity
     * set representing the query result in the OData service
     */
    getName(): string;
    /**
     * Get the parameterization of this query result
     *
     * @returns The object for the parameterization or null if the query result is not parameterized
     */
    getParameterization(): Parameterization;
    /**
     * Get property holding the totaled property list
     *
     * @returns The datajs object representing this property
     */
    getTotaledPropertiesListProperty(): object;
  }
  /**
   * Creation of URIs for fetching query results.
   */
  export class QueryResultRequest {
    /**
     * Create a request object for interaction with a query result.
     */
    constructor(
      /**
       * Description of a query parameterization
       */
      oQueryResult: QueryResult,
      /**
       * Request object for interactions with the parameterization of this query. Only required if the query service
       * includes parameters.
       */
      oParameterizationRequest?: ParameterizationRequest
    );

    /**
     * Adds a recursive hierarchy to the aggregation level.
     */
    addRecursiveHierarchy(
      /**
       * Name of dimension whose hierarchy shall be part of the aggregation level
       */
      sHierarchyDimensionName: string,
      /**
       * Indicator whether or not to include the external node key (if available) in the query result
       */
      bIncludeExternalKey: boolean,
      /**
       * Indicator whether or not to include the node text (if available) in the query result
       */
      bIncludeText: boolean
    ): void;
    /**
     * Add one or more dimensions to the aggregation level
     */
    addToAggregationLevel(
      /**
       * Array of dimension names to be added to the already defined aggregation level.
       */
      aDimensionName: undefined
    ): void;
    /**
     * Get the names of the dimensions included in the aggregation level
     *
     * @returns The dimension names included in the aggregation level
     */
    getAggregationLevel(): any[];
    /**
     * Get details about a dimensions included in the aggregation level
     *
     * @returns An object with three properties named key and text, both with Boolean values indicating whether
     * the key and text of this dimension are included in this request. The third property named attributes
     * is an array of attribute names of this dimension included in this request, or null, if there are none.
     */
    getAggregationLevelDetails(
      /**
       * Name of a dimension included in the aggregation level of this request, for which details shall be returned
       */
      sDImensionName: undefined
    ): object;
    /**
     * Get the filter expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The filter object associated to this request.
     */
    getFilterExpression(): FilterExpression;
    /**
     * Get the names of the measures included in the query result request
     *
     * @returns The measure names included in the query result request
     */
    getMeasureNames(): any[];
    /**
     * Retrieves the current parametrization request
     */
    getParameterizationRequest(): ParameterizationRequest;
    /**
     * Get the description of the query result on which this request operates on
     *
     * @returns Description of a query result
     */
    getQueryResult(): QueryResult;
    /**
     * Returns the current page boundaries as object with properties `start` and `end`. If the end of the page
     * is unbounded, `end` is null.
     *
     * @returns the current page boundaries as object
     */
    getResultPageBoundaries(): Object;
    /**
     * Get the sort expression for this request.
     *
     * Expressions are represented by separate objects. If none exists so far, a new expression object gets
     * created.
     *
     * @returns The sort object associated to this request.
     */
    getSortExpression(): SortExpression;
    /**
     * Get the value of a query option for the OData request URI corresponding to this request.
     *
     * @returns The value of the requested query option or null, if this option is not used for the OData request.
     */
    getURIQueryOptionValue(
      /**
       * Identifies the query option: $select, $filter,$orderby ... or any custom query option
       */
      sQueryOptionName: string
    ): string;
    /**
     * Get the URI to locate the entity set for the query result.
     *
     * @returns The resource path of the URI pointing to the entity set. It is a relative URI unless a service
     * root is given, which would then prefixed in order to return a complete URL.
     */
    getURIToQueryResultEntitySet(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string
    ): string;
    /**
     * Get the unescaped URI to fetch the query result.
     *
     * @returns The unescaped URI that contains the OData resource path and OData system query options to express
     * the aggregation level, filter expression and further options.
     */
    getURIToQueryResultEntries(
      /**
       * (optional) Identifies the root of the OData service
       */
      sServiceRootURI: string,
      /**
       * (optional) OData resource path to be considered. If provided, it overwrites any parameterization object
       * that might have been specified separately.
       */
      sResourcePath: string
    ): string;
    /**
     * Specify which dimension components shall be included in the query result. The settings get applied to
     * the currently defined aggregation level.
     */
    includeDimensionKeyTextAttributes(
      /**
       * Name of the dimension for which the settings get applied. Specify null to apply the settings to all dimensions
       * in the aggregation level.
       */
      sDimensionName: string,
      /**
       * Indicator whether or not to include the dimension key in the query result. Pass null to keep current
       * setting.
       */
      bIncludeKey: boolean,
      /**
       * Indicator whether or not to include the dimension text (if available) in the query result. Pass null
       * to keep current setting.
       */
      bIncludeText: boolean,
      /**
       * Array of dimension attribute names to be included in the result. Pass null to keep current setting. This
       * argument is ignored if sDimensionName is null.
       */
      aAttributeName: undefined
    ): void;
    /**
     * Specify which measure components shall be included in the query result. The settings get applied to the
     * currently set measures.
     */
    includeMeasureRawFormattedValueUnit(
      /**
       * Name of the measure for which the settings get applied. Specify null to apply the settings to all currently
       * set measures.
       */
      sMeasureName: string,
      /**
       * Indicator whether or not to include the raw value in the query result. Pass null to keep current setting.
       */
      bIncludeRawValue: boolean,
      /**
       * Indicator whether or not to include the formatted value (if available) in the query result. Pass null
       * to keep current setting.
       */
      bIncludeFormattedValue: boolean,
      /**
       * Indicator whether or not to include the unit (if available) in the query result. Pass null to keep current
       * setting.
       */
      bIncludeUnit: boolean
    ): void;
    /**
     * Remove one or more dimensions from the aggregation level. The method also removed a potential sort expression
     * on the dimension.
     */
    removeFromAggregationLevel(
      /**
       * Array of dimension names to be removed from the already defined aggregation level.
       */
      aDimensionName: undefined
    ): void;
    /**
     * Set the aggregation level for the query result request. By default, the query result will include the
     * properties holding the keys of the given dimensions. This setting can be changed using includeDimensionKeyTextAttributes.
     */
    setAggregationLevel(
      /**
       * Array of dimension names to be part of the aggregation level. If null, the aggregation level includes
       * all dimensions, if empty, no dimension is included.
       */
      aDimensionName: undefined
    ): void;
    /**
     * Set the filter expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the filter object maintained
     * by this request.
     */
    setFilterExpression(
      /**
       * The filter object to be associated with this request.
       */
      oFilter: FilterExpression
    ): void;
    /**
     * Set the measures to be included in the query result request. By default, the query result will include
     * the properties holding the raw values of the given measures. This setting can be changed using includeMeasureRawFormattedValueUnit.
     */
    setMeasures(
      /**
       * Array of measure names to be part of the query result request. If null, the request includes all measures,
       * if empty, no measure is included.
       */
      aMeasureName: undefined
    ): void;
    /**
     * Set the parameterization request required for interactions with the query result of parameterized queries.
     * This method provides an alternative way to assign a parameterization request to a query result request.
     */
    setParameterizationRequest(
      /**
       * Request object for interactions with the parameterization of this query
       */
      oParameterizationRequest: undefined
    ): void;
    /**
     * Set further options to be applied for the OData request to fetch the query result
     */
    setRequestOptions(
      /**
       * Indicates whether or not the entity key should be returned for every entry in the query result. Default
       * is not to include it. Pass null to keep current setting.
       */
      bIncludeEntityKey: boolean,
      /**
       * Indicates whether or not the result shall include a count for the returned entities. Default is not to
       * include it. Pass null to keep current setting.
       */
      bIncludeCount: boolean,
      /**
       * Indicates whether or not the result shall be empty. This will translate to $top=0 in the OData request
       * and override any setting done with setResultPageBoundaries. The default is not to suppress entities in
       * the result. Pass null to keep current setting. The main use case for this option is to create a request
       * with $inlinecount returning an entity count.
       */
      bReturnNoEntities: boolean
    ): void;
    /**
     * Set the resource path to be considered for the OData request URI of this query request object. This method
     * provides an alternative way to assign a path comprising a parameterization. If a path is provided, it
     * overwrites any parameterization object that might have been specified separately.
     */
    setResourcePath(
      /**
       * Resource path pointing to the entity set of the query result. Must include a valid parameterization if
       * query contains parameters.
       */
      sResourcePath: string
    ): void;
    /**
     * Specify that only a page of the query result shall be returned. A page is described by its boundaries,
     * that are row numbers for the first and last rows in the query result to be returned.
     */
    setResultPageBoundaries(
      /**
       * The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to
       * start with the first row.
       */
      start: int,
      /**
       * The last row of the query result to be returned. Passing null is equivalent to get all rows up to the
       * end of the query result.
       */
      end: int
    ): void;
    /**
     * Set the sort expression for this request.
     *
     * Expressions are represented by separate objects. Calling this method replaces the sort object maintained
     * by this request.
     */
    setSortExpression(
      /**
       * The sort object to be associated with this request.
       */
      oSorter: SortExpression
    ): void;
  }
  /**
   * Representation of a recursive hierarchy.
   */
  export class RecursiveHierarchy {
    /**
     * Create a representation of a recursive hierarchy defined on one multiple properties in an OData entity
     * type query. Do not create your own instances.
     */
    constructor(
      /**
       * object for the entity type
       */
      oEntityType: EntityType,
      /**
       * datajs object for the property holding the hierarchy node ID identifying the hierarchy node to which
       * the OData entry belongs
       */
      oNodeIDProperty: object,
      /**
       * datajs object for the property holding the node ID of the parent of the hierarchy node pointed to by
       * the value of oNodeIDProperty
       */
      oParentNodeIDProperty: object,
      /**
       * datajs object for the property holding the level number for the of the hierarchy node pointed to by the
       * value of oNodeIDProperty
       */
      oNodeLevelProperty: object,
      /**
       * datajs object for the property holding the data value for the of the hierarchy node pointed to by the
       * value of oNodeIDProperty
       */
      oNodeValueProperty: object,
      /**
       * datajs object for the property holding the node external key of the hierarchy node. The external key
       * is a human-readable identification of a node. The value of the `hierarchy-node-external-key-for` attribute
       * is always the name of another property in the same type. It points to the related property holding the
       * hierarchy node ID.
       */
      oNodeExternalKeyProperty: object
    );

    /**
     * Get the property holding the node external key of the hierarchy node
     *
     * @returns The datajs object representing this property
     */
    getNodeExternalKeyProperty(): object;
    /**
     * Get the property holding the node ID of the hierarchy node
     *
     * @returns The datajs object representing this property
     */
    getNodeIDProperty(): object;
    /**
     * Get the property holding the level of the hierarchy node
     *
     * @returns The datajs object representing this property
     */
    getNodeLevelProperty(): object;
    /**
     * Get the property holding the value that is structurally organized by the hierarchy
     *
     * @returns The datajs object representing this property
     */
    getNodeValueProperty(): object;
    /**
     * Get the property holding the parent node ID of the hierarchy node
     *
     * @returns The datajs object representing this property
     */
    getParentNodeIDProperty(): object;
    /**
     * Get indicator if this is a leveled hierarchy
     *
     * @returns False
     */
    isLeveledHierarchy(): boolean;
    /**
     * Get indicator if this is a recursive hierarchy
     *
     * @returns True
     */
    isRecursiveHierarchy(): boolean;
  }
  /**
   * Representation of a $orderby expression for an OData entity type.
   */
  export class SortExpression {
    /**
     * Create a representation of an order by expression for a given entity type. It can be rendered as value
     * for the $orderby system query option.
     */
    constructor(
      /**
       * datajs object for the OData model containing this entity type
       */
      oModel: object,
      /**
       * datajs object for the schema containing this entity type
       */
      oSchema: object,
      /**
       * object for the entity type
       */
      oEntityType: EntityType
    );

    /**
     * Add a condition to the order by expression. It replaces any previously specified sort order for the property.
     *
     * @returns This object for method chaining
     */
    addSorter(
      /**
       * The name of the property bound in the condition
       */
      sPropertyName: string,
      /**
       * sorting order used for the condition
       */
      sSortOrder: SortOrder,
      /**
       * If there is already a sorter for that property, ignore this call.
       */
      bIgnoreIfAlreadySorted: boolean
    ): SortExpression;
    /**
     * Clear expression from any sort conditions that may have been set previously
     */
    clear(): void;
    /**
     * Get description for this entity type
     *
     * @returns The object representing the entity type
     */
    getEntityType(): EntityType;
    /**
     * Get the first SAPUI5 Sorter object.
     *
     * @returns first sorter object or null if empty
     */
    getExpressionAsUI5Sorter(): Sorter;
    /**
     * Get an array of SAPUI5 Sorter objects corresponding to this expression.
     *
     * @returns List of sorter objects representing this expression
     */
    getExpressionsAsUI5SorterArray(): Sorter[];
    /**
     * Get the value for the OData system query option $orderby corresponding to this expression.
     *
     * @returns The $orderby value for the sort expressions
     */
    getURIOrderByOptionValue(
      /**
       * Object with properties requested for $select
       */
      oSelectedPropertyNames: object
    ): string;
    /**
     * Removes the order by expression for the given property name from the list of order by expression. If
     * no order by expression with this property name exists the method does nothing.
     */
    removeSorter(
      /**
       * The name of the property to be removed from the condition
       */
      sPropertyName: string
    ): void;
  }
  /**
   * Sort order of a property.
   */
  export enum SortOrder {
    /**
     * Sort Order: ascending.
     */
    Ascending = "asc",
    /**
     * Sort Order: descending.
     */
    Descending = "desc",
  }

  export namespace Model {
    /**
     * Handle to an already instantiated SAPUI5 OData model.
     */
    class ReferenceByModel {
      /**
       * Create a reference to an OData model already loaded elsewhere with the help of SAPUI5.
       */
      constructor(
        /**
         * holding the OData model.
         */
        oModel: object
      );
    }
    /**
     * @deprecated (since 1.94) - use {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel}
     * instead
     *
     * Handle to an OData model by the URI pointing to it.
     */
    class ReferenceByURI {
      /**
       * Create a reference to an OData model by the URI of the related OData service.
       */
      constructor(
        /**
         * holding the URI.
         */
        sURI: string
      );
    }
    /**
     * Handle to an already instantiated SAPUI5 OData model.
     */
    class ReferenceWithWorkaround {
      /**
       * Create a reference to an OData model having certain workarounds activated. A workaround is an implementation
       * that changes the standard behavior of the API to overcome some gap or restriction in the OData provider.
       * The workaround implementation can be conditionally activated by passing the identifier in the constructor.
       *
       * Known workaround identifiers are:
       *
       *
       * 	 - "CreateLabelsFromTechnicalNames" - If a property has no label text, it gets generated from the property
       * 			name.
       *
       *
       * 	 - "IdentifyTextPropertiesByName" -If a dimension property has no text and another property with the
       * 			same name and an appended "Name", "Text" etc. exists, they are linked via annotation.
       */
      constructor(
        /**
         * Holds a reference to the OData model, obtained by {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel},
         * or by {@link sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI} which is deprecated.
         */
        oModel: object,
        /**
         * All workarounds to be applied.
         */
        aWorkaroundID: string[]
      );
    }
  }
}

declare module "sap/ui/model/base/ManagedObjectModel" {
  import JSONModel from "sap/ui/model/json/JSONModel";

  import ManagedObject from "sap/ui/base/ManagedObject";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @EXPERIMENTAL (since 1.58)
   *
   * The ManagedObjectModel class can be used for data binding of properties and aggregations for managed
   * objects.
   *
   * Provides model access to a given {@link sap.ui.base.ManagedObject}. Such access allows to bind to properties
   * and aggregations of this object.
   */
  export default class ManagedObjectModel extends JSONModel {
    /**
     * The ManagedObjectModel class allows you to bind to properties and aggregations of managed objects.
     */
    constructor(
      /**
       * the managed object models root object
       */
      oObject: ManagedObject,
      /**
       * an object for custom data
       */
      oData?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.base.ManagedObjectModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ManagedObjectModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.base.ManagedObjectModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Private method iterating the registered bindings of this model instance and initiating their check for
     * update
     */
    checkUpdate(
      bForceUpdate: boolean,

      bAsync: boolean,
      /**
       * an optional test function to filter the binding
       */
      fnFilter: Function
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Private method iterating the registered bindings of this model instance and initiating their check for
     * update
     */
    checkUpdate(
      bAsync: boolean,
      /**
       * an optional test function to filter the binding
       */
      fnFilter: Function
    ): void;
    /**
     * Inserts the user-defined custom data into the model.
     */
    setData(
      /**
       * The data as JSON object to be set on the model
       */
      oData: object,
      /**
       * If set to `true`, the data is merged instead of replaced
       */
      bMerge?: boolean
    ): void;
  }
}

declare module "sap/ui/model/Binding" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The Binding is the object, which holds the necessary information for a data binding, like the binding
   * path and the binding context, and acts like an interface to the model for the control, so it is the event
   * provider for changes in the data model and provides getters for accessing properties or lists.
   */
  export default class Binding extends EventProvider {
    /**
     * Constructor for Binding class.
     */
    constructor(
      /**
       * The model
       */
      oModel: Model,
      /**
       * The path
       */
      sPath: string,
      /**
       * The context object
       */
      oContext: Context,
      /**
       * Additional, implementation-specific parameters
       */
      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.Binding with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Binding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Binding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the {@link #event:AggregatedDataStateChange AggregatedDataStateChange}
     * event of this `sap.ui.model.Binding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachAggregatedDataStateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * Attaches the `fnFunction` event handler to the {@link #event:change change} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.model.Binding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachDataReceived(
      /**
       * Function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataRequested dataRequested} event of this `sap.ui.model.Binding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachDataRequested(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches the `fnFunction` event handler to the {@link #event:DataStateChange DataStateChange} event of
     * thi `sap.ui.model.Binding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachDataStateChange(
      /**
       * Function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attach multiple events.
     *
     * @returns A reference to itself
     */
    attachEvents(
      /**
       * Events to attach to this binding
       */
      oEvents: Record<string, Function>
    ): Binding;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the {@link #event:refresh refresh} event of this `sap.ui.model.Binding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Binding` itself.
     */
    attachRefresh(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `sap.ui.model.Binding` itself
       */
      oListener?: object
    ): void;
    /**
     * Removes all control messages for this binding from the MessageManager in addition to the standard clean-up
     * tasks.
     * See:
     * 	sap.ui.base.EventProvider#destroy
     */
    destroy(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:AggregatedDataStateChange AggregatedDataStateChange}
     * event of this `sap.ui.model.Binding`.
     */
    detachAggregatedDataStateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.model.Binding`.
     */
    detachChange(
      /**
       * Function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataReceived dataReceived} event of this `sap.ui.model.Binding`.
     */
    detachDataReceived(
      /**
       * Function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataRequested dataRequested} event of this
     * `sap.ui.model.Binding`.
     */
    detachDataRequested(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:DataStateChange DataStateChange} event of
     * this `sap.ui.model.Binding`.
     */
    detachDataStateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detach multiple events.
     *
     * @returns A reference to itself
     */
    detachEvents(
      /**
       * Events to detach from this binding
       */
      oEvents: Record<string, Function>
    ): Binding;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:refresh refresh} event of this `sap.ui.model.Binding`.
     */
    detachRefresh(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function.
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
     *
     * This event may also be fired when an error occurred.
     */
    fireDataReceived(
      /**
       * Parameters to pass along with the event
       */
      oParameters: {
        /**
         * Data received; on error cases it will be undefined
         */
        data?: object;
      }
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:dataRequested dataRequested} to attached listeners.
     */
    fireDataRequested(
      /**
       * Parameters to pass along with the event
       */
      oParameters: object
    ): void;
    /**
     * Returns the model context in which this binding will be resolved.
     *
     * If the binding path is absolute, the context is not relevant.
     *
     * @returns Context object
     */
    getContext(): Context;
    /**
     * @SINCE 1.82.0
     *
     * Whether this binding does not propagate model messages to the control. By default, all bindings propagate
     * messages. If a binding wants to support this feature, it has to override {@link #supportsIgnoreMessages},
     * which returns `true`.
     *
     * For example, a binding for a currency code is used in a composite binding for rendering the proper number
     * of decimals, but the currency code is not displayed in the attached control. In that case, messages for
     * the currency code shall not be displayed at that control, only messages for the amount.
     *
     * @returns Whether this binding does not propagate model messages to the control; returns `undefined` if
     * the corresponding binding parameter is not set, which means that model messages are propagated to the
     * control
     */
    getIgnoreMessages(): boolean | undefined;
    /**
     * Returns the model to which this binding belongs.
     *
     * @returns Model to which this binding belongs
     */
    getModel(): Model;
    /**
     * Returns the model path to which this binding binds.
     *
     * Might be a relative or absolute path. If it is relative, it will be resolved relative to the context
     * as returned by {@link #getContext}.
     *
     * @returns Binding path
     */
    getPath(): string;
    /**
     * @SINCE 1.88.0
     *
     * Provides the resolved path for this binding's path and context and returns it, or `undefined` if the
     * binding is not resolved or has no model.
     *
     * @returns The resolved path
     */
    getResolvedPath(): string | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initialize the binding. The message should be called when creating a binding. The default implementation
     * calls checkUpdate(true).
     */
    initialize(): void;
    /**
     * Returns whether the binding is initial, which means it did not get an initial value yet.
     *
     * @returns Whether the binding is initial
     */
    isInitial(): boolean;
    /**
     * Returns whether the binding is relative, which means its path does not start with a slash.
     *
     * @returns Whether the binding is relative
     */
    isRelative(): boolean;
    /**
     * @SINCE 1.79.0
     *
     * Returns whether the binding is resolved, which means the binding's path is absolute or the binding has
     * a model context.
     * See:
     * 	#getContext
     * 	#getPath
     * 	#isRelative
     *
     * @returns Whether the binding is resolved
     */
    isResolved(): boolean;
    /**
     * Returns true if the binding is suspended or false if not.
     *
     * @returns Whether the binding is suspended
     */
    isSuspended(): boolean;
    /**
     * Refreshes the binding, check whether the model data has been changed and fire change event if this is
     * the case. For server side models this should refetch the data from the server. To update a control, even
     * if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
     * `bForceUpdate`.
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean
    ): void;
    /**
     * Resumes the binding update. Change events will be fired again.
     *
     * When the binding is resumed, a change event will be fired immediately if the data has changed while the
     * binding was suspended. For server-side models, a request to the server will be triggered if a refresh
     * was requested while the binding was suspended.
     */
    resume(): void;
    /**
     * @SINCE 1.82.0
     *
     * Sets the indicator whether this binding does not propagate model messages to the control.
     * See:
     * 	#getIgnoreMessages
     * 	#supportsIgnoreMessages
     */
    setIgnoreMessages(
      /**
       * Whether this binding does not propagate model messages to the control
       */
      bIgnoreMessages: boolean
    ): void;
    /**
     * @SINCE 1.82.0
     *
     * Whether this binding supports the feature of not propagating model messages to the control. The default
     * implementation returns `false`.
     * See:
     * 	#getIgnoreMessages
     * 	#setIgnoreMessages
     *
     * @returns `false`; subclasses that support this feature need to override this function and need to return
     * `true`
     */
    supportsIgnoreMessages(): boolean;
    /**
     * Suspends the binding update. No change events will be fired.
     *
     * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended
     * mode. Special operations on bindings, which require updates to work properly (as paging or filtering
     * in list bindings) will also update and cause a change event although the binding is suspended.
     */
    suspend(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Determines if the binding should be updated by comparing the current model against a specified model.
     *
     * @returns Whether this binding should be updated
     */
    updateRequired(
      /**
       * The model instance to compare against
       */
      oModel: object
    ): boolean;
  }
}

declare module "sap/ui/model/BindingMode" {
  /**
   * Binding type definitions.
   */
  enum BindingMode {
    /**
     * BindingMode default means that the binding mode of the model is used
     */
    Default = "Default",
    /**
     * BindingMode one time means value is only read from the model once
     */
    OneTime = "OneTime",
    /**
     * BindingMode one way means from model to view
     */
    OneWay = "OneWay",
    /**
     * BindingMode two way means from model to view and vice versa
     */
    TwoWay = "TwoWay",
  }
  export default BindingMode;
}

declare module "sap/ui/model/ChangeReason" {
  /**
   * Change Reason for Model/ListBinding/TreeBinding.
   */
  enum ChangeReason {
    /**
     * A context was added to a binding.
     */
    Add = "add",
    /**
     * Binding changes a model property value
     */
    Binding = "binding",
    /**
     * The list has changed
     */
    Change = "change",
    /**
     * The tree node was collapsed
     */
    Collapse = "collapse",
    /**
     * The list context has changed
     */
    Context = "context",
    /**
     * The tree node was expanded
     */
    Expand = "expand",
    /**
     * The List was filtered
     */
    Filter = "filter",
    /**
     * The list was refreshed
     */
    Refresh = "refresh",
    /**
     * A context was removed from a binding.
     */
    Remove = "remove",
    /**
     * The list was sorted
     */
    Sort = "sort",
  }
  export default ChangeReason;
}

declare module "sap/ui/model/ClientContextBinding" {
  import ContextBinding from "sap/ui/model/ContextBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The ContextBinding is a specific binding for setting a context for the model.
   */
  export default class ClientContextBinding extends ContextBinding {
    /**
     * Creates a new ClientContextBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.Model#bindContext Model#bindContext} on the corresponding
     * model implementation instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: Model,
      /**
       * Binding path to be used for this binding, syntax depends on the concrete subclass
       */
      sPath: string,
      /**
       * Binding context relative to which a relative binding path will be resolved
       */
      oContext: Context,
      /**
       * Map of optional parameters as defined by subclasses; this class does not introduce any own parameters
       */
      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.ClientContextBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ClientContextBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.ClientContextBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/ClientListBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * List binding implementation for client models.
   */
  export default class ClientListBinding extends ListBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new ClientListBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.Model#bindList Model#bindList} on the corresponding
     * model implementation instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: Model,
      /**
       * Binding path to be used for this binding, syntax depends on the concrete subclass
       */
      sPath: string,
      /**
       * Binding context relative to which a relative binding path will be resolved
       */
      oContext: Context,
      /**
       * Initial sort order (can be either a sorter or an array of sorters)
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filter/s (can be either a filter or an array of filters)
       */
      aFilters?: Filter | Filter[],
      /**
       * Map of optional parameters as defined by subclasses; this class does not introduce any own parameters
       */
      mParameters?: object
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.model.ClientListBinding with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ClientListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.model.ClientListBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Applies a new set of filters to the list represented by this binding.
     *
     * See {@link sap.ui.model.ListBinding#filter ListBinding#filter} for a more detailed description of list
     * filtering.
     *
     * When no `sFilterType` is given, any previously configured application filters are cleared and the given
     * filters are used as control filters
     *
     * @returns returns `this` to facilitate method chaining
     */
    filter(
      /**
       * Single filter object or an array of filter objects
       */
      aFilters: Filter | Filter[],
      /**
       * Type of the filter which should be adjusted; if no type is given, then any previously configured application
       * filters are cleared and the given filters are used as control filters
       */
      sFilterType?: FilterType | keyof typeof FilterType
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an array of binding contexts for the bound target list.
     *
     * In case of extended change detection, the context array may have an additional `diff` property, see {@link
     * topic:7cdff73f308b4b10bdf7d83b7aba72e7 documentation on extended change detection} for details.
     *
     * **Note:**The public usage of this method is deprecated, as calls from outside of controls will lead to
     * unexpected side effects. To avoid this, use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
     * instead.
     *
     * @returns The array of contexts for each row of the bound list
     */
    getContexts(
      /**
       * The start index where to start the retrieval of contexts
       */
      iStartIndex?: int,
      /**
       * Determines how many contexts to retrieve beginning from the start index; default is the whole list length
       * up to the model's size limit; see {@link sap.ui.model.Model#setSizeLimit}
       */
      iLength?: int,
      /**
       * Must not be used
       */
      iMaximumPrefetchSize?: int,
      /**
       * Whether this call keeps the result of {@link #getCurrentContexts} untouched; since 1.102.0.
       */
      bKeepCurrent?: boolean
    ): Context[];
  }
}

declare module "sap/ui/model/ClientModel" {
  import Model from "sap/ui/model/Model";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Model implementation for Client models
   */
  export default class ClientModel extends Model {
    /**
     * Constructor for a new ClientModel.
     */
    constructor(
      /**
       * URL where to load the data from
       */
      oData?: string
    );

    /**
     * Creates a new subclass of class sap.ui.model.ClientModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ClientModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.ClientModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * See:
     * 	sap.ui.model.Model.prototype.destroy
     */
    destroy(): void;
    /**
     * Force no caching.
     */
    forceNoCache(
      /**
       * whether to force not to cache
       */
      bForceNoCache?: boolean
    ): void;
    /**
     * Returns the current data of the model.
     *
     * Be aware that the returned object is a reference to the model data so all changes to that data will also
     * change the model data.
     *
     * @returns the data object
     */
    getData(): any;
    /**
     * update all bindings
     */
    updateBindings(
      /**
       * true/false: Default = false. If set to false an update will only be done when the value of a binding
       * changed.
       */
      bForceUpdate: boolean
    ): void;
  }
}

declare module "sap/ui/model/ClientPropertyBinding" {
  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Property binding implementation for client models.
   */
  export default class ClientPropertyBinding extends PropertyBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new ClientPropertyBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.Model#bindProperty Model#bindProperty} on the
     * corresponding model implementation instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: Model,
      /**
       * Binding path to be used for this binding, syntax depends on the concrete subclass
       */
      sPath: string,
      /**
       * Binding context relative to which a relative binding path will be resolved
       */
      oContext: Context,
      /**
       * Map of optional parameters as defined by subclasses; this class does not introduce any own parameters
       */
      mParameters?: object
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.model.ClientPropertyBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ClientPropertyBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.model.ClientPropertyBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/ClientTreeBinding" {
  import TreeBinding from "sap/ui/model/TreeBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Filter from "sap/ui/model/Filter";

  import Sorter from "sap/ui/model/Sorter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Tree binding implementation for client models.
   *
   * Please Note that a hierarchy's "state" (i.e. the information about expanded, collapsed, selected, and
   * deselected nodes) may become inconsistent when the structure of the model data is changed at runtime.
   * This is because each node is identified internally by its index position relative to its parent, plus
   * its parent's ID. Therefore, inserting or removing a node in the model data will likely lead to a shift
   * in the index positions of other nodes, causing them to lose their state and/or to gain the state of another
   * node.
   */
  export default class ClientTreeBinding extends TreeBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new ClientTreeBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.Model#bindTree Model#bindTree} on the corresponding
     * model implementation instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: Model,
      /**
       * Binding path pointing to the tree / array that should be bound; syntax is defined by subclasses
       */
      sPath: string,
      /**
       * Context object for this binding, mandatory when when a relative binding path is given
       */
      oContext?: Context,
      /**
       * Predefined application filter, either a single instance or an array
       */
      aApplicationFilters?: Filter | Filter[],
      /**
       * Additional model specific parameters as defined by subclasses; this class does not introduce any own
       * parameters
       */
      mParameters?: object,
      /**
       * Predefined sorter/s contained in an array (optional)
       */
      aSorters?: Sorter[]
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new subclass of class sap.ui.model.ClientTreeBinding with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ClientTreeBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns a metadata object for class sap.ui.model.ClientTreeBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Filters the tree according to the filter definitions.
     *
     * The filtering is applied recursively through the tree. The parent nodes of filtered child nodes will
     * also be displayed if they don't match the filter conditions. All filters belonging to a group (=have
     * the same path) are ORed and after that the results of all groups are ANDed.
     * See:
     * 	sap.ui.model.TreeBinding.prototype.filter
     *
     * @returns `this` to facilitate method chaining
     */
    filter(
      /**
       * Single filter object or an array of filter objects
       */
      aFilters: Filter | Filter[],
      /**
       * Type of the filter to be adjusted; if no type is given, any previously configured application filters
       * are cleared, and the given filters are used as control filters
       */
      sFilterType?: FilterType | keyof typeof FilterType
    ): this;
    /**
     * @SINCE 1.108.0
     *
     * Returns the count of entries in the tree, or `undefined` if it is unknown. If the tree is filtered, the
     * count of all entries matching the filter conditions is returned. The entries required only for the tree
     * structure are not counted.
     *
     * @returns The count of entries in the tree, or `undefined` if the binding is not resolved
     */
    getCount(): number | undefined;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Return node contexts for the tree
     *
     * @returns the contexts array
     */
    getNodeContexts(
      /**
       * to use for retrieving the node contexts
       */
      oContext: Context,
      /**
       * the startIndex where to start the retrieval of contexts
       */
      iStartIndex: int,
      /**
       * determines how many contexts to retrieve beginning from the start index.
       */
      iLength: int
    ): Context[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Return root contexts for the tree
     *
     * @returns the contexts array
     */
    getRootContexts(
      /**
       * the startIndex where to start the retrieval of contexts
       */
      iStartIndex: int,
      /**
       * determines how many contexts to retrieve beginning from the start index.
       */
      iLength: int
    ): object[];
    /**
     * Returns if the node has child nodes.
     *
     * @returns true if node has children
     */
    hasChildren(
      /**
       * the context element of the node
       */
      oContext: object
    ): boolean;
    /**
     * Sorts the contexts of this ClientTreeBinding. The tree will be sorted level by level. So the nodes are
     * NOT sorted absolute, but relative to their parent node, to keep the hierarchy untouched.
     *
     * @returns Returns `this` to facilitate method chaining
     */
    sort(
      /**
       * An array of Sorter instances which will be applied
       */
      aSorters: Sorter[]
    ): this;
  }
}

declare module "sap/ui/model/ClientTreeBindingAdapter" {
  export default class ClientTreeBindingAdapter {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
     * controls.
     */
    constructor();
  }
}

declare module "sap/ui/model/CompositeBinding" {
  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import CompositeType from "sap/ui/model/CompositeType";

  /**
   * Combines multiple property bindings (called 'parts') into a single one.
   *
   * A `CompositeBinding` combines the values from all its binding parts (each an instance of `PropertyBinding`),
   * either by calling a formatter function or by involving a {@link sap.ui.model.CompositeType composite
   * type}. When a formatter function is used, the composite binding is automatically limited to `OneWay`
   * mode. When a type is used, the binding can also operate in `TwoWay` mode.
   *
   * Higher layers of the framework derive composite bindings from easy-to-write string representations (the
   * following features require complex binding syntax, e.g. `data-sap-ui-bindingSyntax="complex"`):
   *
   * XML views, for example, convert attribute values with nested curly braces like
   * ```javascript
   *
   *   text="{fullname} &lt;{email}&gt;"
   * ```
   *  into a composite binding with two parts (one property binding for property "fullname" and one for property
   * "email") and with a generic formatter function that injects the values of the parts into the string literal
   * "{0} <{1}>" accordingly.
   *
   * Similarly, {@link topic:daf6852a04b44d118963968a1239d2c0 expression bindings} are parsed and converted
   * into composite bindings, too. The formatter function is created by the framework and executes the calculations
   * as defined by the expression string, taking the values from the binding parts as input.
   *
   * **Note:** A nesting of composite bindings is currently not supported (albeit being helpful).
   */
  export default class CompositeBinding extends PropertyBinding {
    /**
     * Constructor for CompositeBinding.
     * See:
     * 	{@link topic:a2fe8e763014477e87990ff50657a0d0}
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.CompositeBinding with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CompositeBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.CompositeBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the `AggregatedDataStateChange` event of this `sap.ui.model.CompositeBinding`.
     *
     * The `AggregatedDataStateChange` event is fired asynchronously, meaning that the `DataState` object given
     * as parameter of the event contains all changes that were applied to the `DataState` in the running thread.
     */
    attachAggregatedDataStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the `change` event of this `sap.ui.model.CompositeBinding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.CompositeBinding` itself.
     */
    attachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the `DataStateChange` event of this `sap.ui.model.CompositeBinding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.CompositeBinding` itself.
     */
    attachDataStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the `AggregatedDataStateChange` event of this `sap.ui.model.CompositeBinding`.
     */
    detachAggregatedDataStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the `change` event of this `sap.ui.model.CompositeBinding`.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the `DataStateChange` event of this `sap.ui.model.CompositeBinding`.
     */
    detachDataStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * Returns the property bindings contained in this composite binding.
     *
     * @returns The property bindings in this composite binding
     */
    getBindings(): any[];
    /**
     * Returns the current external value of the bound target which is formatted via a type or formatter function.
     *
     * @returns The current value of the bound target
     */
    getExternalValue(): object;
    /**
     * Returns the current internal value of the bound target which is an array of the internal (JS native)
     * values of nested bindings.
     *
     * @returns The current values of the nested bindings
     */
    getInternalValue(): any[];
    /**
     * Returns the current raw value of the bound target which is an array of the raw (model) values of nested
     * bindings.
     *
     * @returns The current values of the nested bindings
     */
    getRawValue(): any[];
    /**
     * Returns the raw values of the property bindings in an array.
     *
     * @returns The values of the internal property bindings in an array
     */
    getValue(): object;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initialize the binding. The method should be called when creating a binding. The default implementation
     * calls checkUpdate(true). Prevent checkUpdate to be triggered while initializing nested bindings, it is
     * sufficient to call checkUpdate when all nested bindings are initialized.
     *
     * @returns A reference to itself
     */
    initialize(): this;
    /**
     * Suspends the binding update. No change events will be fired.
     *
     * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended
     * mode. Special operations on bindings, which require updates to work properly (as paging or filtering
     * in list bindings) will also update and cause a change event although the binding is suspended.
     */
    resume(): void;
    /**
     * Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default
     * implementation assumes a space-separated list of values. This will cause the setValue to be called for
     * each nested binding, except for undefined values in the array.
     *
     * @returns A promise in case of asynchronous type parsing or validation
     */
    setExternalValue(
      /**
       * The value to set for this binding
       */
      oValue: object
    ): undefined | Promise<any>;
    /**
     * Sets the internal value of the bound target. Parameter must be an array of values matching the internal
     * (JS native) types of nested bindings.
     *
     * @returns A promise in case of asynchronous type parsing or validation
     */
    setInternalValue(
      /**
       * the new values of the nested bindings
       */
      aValues: any[]
    ): undefined | Promise<any>;
    /**
     * Sets the raw value of the bound target. Parameter must be an array of values matching the raw (model)
     * types of nested bindings.
     *
     * @returns A promise in case of asynchronous type parsing or validation
     */
    setRawValue(
      /**
       * the new values of the nested bindings
       */
      aValues: any[]
    ): undefined | Promise<any>;
    /**
     * Sets the optional type and internal type for the binding. The type and internal type are used to do the
     * parsing/formatting correctly. The internal type is the property type of the element which the value is
     * formatted to.
     */
    setType(
      /**
       * The type for the binding
       */
      oType: CompositeType,
      /**
       * The internal type of the element property which this binding is bound against.
       */
      sInternalType: string
    ): void;
    /**
     * Sets the values. This will cause the setValue to be called for each nested binding, except for undefined
     * values in the array.
     */
    setValue(
      /**
       * The values to set for this binding
       */
      aValues: any[]
    ): void;
    /**
     * Suspends the binding update. No change events will be fired.
     *
     * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended
     * mode. Special operations on bindings, which require updates to work properly (as paging or filtering
     * in list bindings) will also update and cause a change event although the binding is suspended.
     */
    suspend(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Determines if the property bindings in the composite binding should be updated by calling updateRequired
     * on all property bindings with the specified model.
     *
     * @returns Whether this binding should be updated
     */
    updateRequired(
      /**
       * The model instance to compare against
       */
      oModel: object
    ): boolean;
  }
}

declare module "sap/ui/model/CompositeDataState" {
  import DataState from "sap/ui/model/DataState";

  import Message from "sap/ui/core/Message";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Holds the status data of a composite binding.
   */
  export default class CompositeDataState extends DataState {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.CompositeDataState with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CompositeDataState>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.CompositeDataState.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns or sets whether the data state is changed. As long as changed was not set to false the data state
     * is dirty and the corresponding binding will fire data state change events.
     *
     * @returns Whether the data state was changed.
     */
    changed(
      /**
       * the optional new state
       */
      bNewState?: boolean
    ): boolean;
    /**
     * @SINCE 1.98.0
     *
     * Returns an array of all model and control messages of all parts of the composite binding, regardless
     * of whether they are old or new.
     *
     * @returns The array of all messages
     */
    getAllMessages(): Message[];
    /**
     * Returns the changes of the data state in a map that the control can use in the `refreshDataState` method.
     * The changed property's name is the key in the map. Each element in the map contains an object of below
     * structure.
     * ```javascript
     *
     *    {
     *        oldValue : The old value of the property,
     *        value    : The new value of the property
     *    }
     * ```
     *  The map only contains the changed properties.
     *
     * @returns the changed of the data state
     */
    getChanges(): Record<
      string,
      {
        oldValue: any;

        value: any;
      }
    >;
    /**
     * Returns the array of current state messages of the control.
     *
     * @returns The array of control messages
     */
    getControlMessages(): Message[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an array of values for the given property in the inner datastates.
     *
     * @returns The array of property values in the inner datastates
     */
    getInternalProperty(
      /**
       * The property name
       */
      sProperty: string
    ): any[];
    /**
     * Returns the dirty value of a binding that was rejected by a type validation. This value was of an incorrect
     * type and could not be applied to the model. If the value was not rejected it will return null. In this
     * case the current model value can be accessed using the `getValue` method.
     *
     * @returns The value that was rejected
     */
    getInvalidValue(): any;
    /**
     * Returns the array of all current state messages combining the model and control messages.
     *
     * @returns The array of all messages
     */
    getMessages(): Message[];
    /**
     * Returns the array of current state messages of the model.
     *
     * @returns The array of messages of the model
     */
    getModelMessages(): Message[];
    /**
     * Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if
     * the entered value did not yet pass the type validation.
     *
     * @returns Whether the control data state is dirty
     */
    isControlDirty(): boolean;
    /**
     * Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet
     * confirmed by a server or the entered value did not yet pass the type validation.
     *
     * @returns Whether the data state is dirty
     */
    isDirty(): boolean;
    /**
     * Returns whether the data state is in laundering. If data is send to the server the data state becomes
     * laundering until the data was accepted or rejected.
     *
     * @returns Whether the data state is laundering
     */
    isLaundering(): boolean;
  }
}

declare module "sap/ui/model/CompositeType" {
  import SimpleType from "sap/ui/model/SimpleType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * This is an abstract base class for composite types. Composite types have multiple parts and know how
   * to merge/split them upon formatting/parsing the value. Typical use cases are currency or amount values.
   *
   * Subclasses of `CompositeType` may set the following boolean properties in the constructor:
   * 	 - `bParseWithValues`: Whether the {@link #parseValue} method requires the current binding values as
   * 			a third parameter; defaults to `false`
   * 	 - `bUseInternalValues`: Whether the {@link #formatValue} and {@link #parseValue} methods operate on
   * 			the internal values; defaults to `false`
   * 	 - `bUseRawValues`: Whether the {@link #formatValue} and {@link #parseValue} methods operate on the
   * 			raw model values; the types of embedded bindings are ignored; defaults to `false`  `bUseRawValues`
   * 			and `bUseInternalValues` cannot be both `true`.
   */
  export default class CompositeType extends SimpleType {
    /**
     * Constructor for a new CompositeType.
     */
    constructor(
      /**
       * Format options as defined by concrete subclasses
       */
      oFormatOptions?: object,
      /**
       * Constraints as defined by concrete subclasses
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.CompositeType with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CompositeType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.CompositeType.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given raw values to an output value of the given target type. This happens according to the
     * format options if the target type is `string`. If `aValues` is not defined or `null`, `null` is returned.
     *
     * @returns The formatted output value
     */
    formatValue(
      /**
       * The values to be formatted
       */
      aValues: any[],
      /**
       * The target type; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}
       */
      sTargetType: string
    ): any;
    /**
     * Returns whether the {@link #parseValue} method requires the current binding values as a third parameter.
     *
     * @returns Whether the {@link #parseValue} method requires the current binding values as a third parameter
     */
    getParseWithValues(): boolean;
    /**
     * @SINCE 1.82.0
     *
     * Gets an array of indices that determine which parts of this type shall not propagate their model messages
     * to the attached control. Prerequisite is that the corresponding binding supports this feature, see {@link
     * sap.ui.model.Binding#supportsIgnoreMessages}.
     * See:
     * 	sap.ui.model.Binding#supportsIgnoreMessages
     *
     * @returns An array of indices that determine which parts of this type shall not propagate their model
     * messages to the attached control
     */
    getPartsIgnoringMessages(): number[];
    /**
     * Returns whether the {@link #formatValue} and {@link #parseValue} methods operate on the internal, related
     * native JavaScript values.
     *
     * @returns Whether the {@link #formatValue} and {@link #parseValue} methods operate on the internal, related
     * native JavaScript values
     */
    getUseInternalValues(): boolean;
    /**
     * Returns whether the {@link #formatValue} and {@link #parseValue} methods operate on the raw model values
     * instead of formatted values.
     *
     * @returns Whether the {@link #formatValue} and {@link #parseValue} methods operate on the raw model values
     * instead of formatted values
     */
    getUseRawValues(): boolean;
    /**
     * Parses an external value of the given source type to the corresponding values in model representation.
     *
     * @returns An array of raw values or the raw value returned by the type's conversion object in case it
     * exists, see {@link sap.ui.model.SimpleType#getModelFormat SimpleType#getModelFormat}
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: any,
      /**
       * The source type (the expected type of `vValue`); see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed
       * Property Types}
       */
      sSourceType: string,
      /**
       * The current values of all binding parts; required if {@link #getParseWithValues} returns `true`
       */
      aCurrentValues?: any[]
    ): any[] | any;
    /**
     * @SINCE 1.100.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Processes the types of the parts of this composite type. A concrete composite type may override this
     * method if it needs to derive information from the types of the parts.
     */
    processPartTypes(
      /**
       * Types of the composite binding's parts
       */
      aPartTypes: SimpleType[]
    ): void;
    /**
     * Validates whether the given raw values meet the defined constraints. This method does nothing if no constraints
     * are defined.
     */
    validateValue(
      /**
       * The set of values to be validated
       */
      aValues: any[]
    ): void;
  }
}

declare module "sap/ui/model/Context" {
  import BaseObject from "sap/ui/base/Object";

  import Model from "sap/ui/model/Model";

  import Message from "sap/ui/core/message/Message";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The Context is a pointer to an object in the model data. A relative binding needs a context as a reference
   * point in order to resolve its path; without a context, a relative binding is unresolved and does not
   * point to model data. Context instances can, for example, be created in the following ways:
   * 	 - by a {@link sap.ui.model.ListBinding} for each list entry,
   * 	 - as the single context associated with a {@link sap.ui.model.ContextBinding},
   * 	 - by calling {@link sap.ui.model.Model#createBindingContext}.
   *
   * For more information on the concept of data binding and binding contexts, see {@link topic:e2e6f4127fe4450ab3cf1339c42ee832
   * documentation on binding syntax}.
   */
  export default class Context extends BaseObject {
    /**
     * Constructor for Context class.
     */
    constructor(
      /**
       * the model
       */
      oModel: Model,
      /**
       * the binding path
       */
      sPath: string
    );

    /**
     * Creates a new subclass of class sap.ui.model.Context with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Context>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Context.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.76.0
     *
     * Returns messages associated with this context, that is messages belonging to the object referred to by
     * this context or a child object of that object. The messages are sorted by their {@link sap.ui.core.message.Message#getType
     * type} according to the type's severity in a way that messages with highest severity come first.
     * See:
     * 	sap.ui.model.Model#getMessages
     *
     * @returns The messages associated with this context sorted by severity; empty array in case no messages
     * exist
     */
    getMessages(): Message[];
    /**
     * Getter for model
     *
     * @returns the model
     */
    getModel(): Model;
    /**
     * Gets the (model dependent) object the context points to or the object with the given relative binding
     * path
     *
     * @returns the context object
     */
    getObject(
      /**
       * the binding path
       */
      sPath?: string,
      /**
       * additional model specific parameters (optional)
       */
      mParameters?: object
    ): object;
    /**
     * Getter for path of the context itself or a subpath
     *
     * @returns the binding path
     */
    getPath(
      /**
       * the binding path (optional)
       */
      sPath?: string
    ): string;
    /**
     * Gets the property with the given relative binding path
     *
     * @returns the property value
     */
    getProperty(
      /**
       * the binding path
       */
      sPath: string
    ): any;
  }
}

declare module "sap/ui/model/ContextBinding" {
  import Binding from "sap/ui/model/Binding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The ContextBinding is a specific binding for a setting context for the model
   */
  export default class ContextBinding extends Binding {
    /**
     * Constructor for ContextBinding
     */
    constructor(
      oModel: Model,

      sPath: string,

      oContext: Context,

      mParameters?: object,
      /**
       * object defining event handlers
       */
      oEvents?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.ContextBinding with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ContextBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.ContextBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Return the bound context.
     *
     * @returns Context object used by this context binding or `null`
     */
    getBoundContext(): Context | null;
  }
}

declare module "sap/ui/model/DataState" {
  import BaseObject from "sap/ui/base/Object";

  import Message from "sap/ui/core/Message";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Holds the status data of a binding. To react to changes of this status data, a control must implement
   * the `refreshDataState` method, which is called with the name of the bound control property and the data
   * state object as parameters. With the {@link #getChanges} method, the control can determine the changed
   * properties and their old and new values.
   * ```javascript
   *
   *     // sample implementation to handle message changes
   *     myControl.prototype.refreshDataState = function (sPropertyName, oDataState) {
   *        oDataState.getMessages().forEach(function (oMessage) {
   *            console.log(oMessage.getMessage());
   *        }
   *     }
   *
   *     // sample implementation to handle laundering state
   *     myControl.prototype.refreshDataState = function (sPropertyName, oDataState) {
   *        this.setBusy(oDataState.isLaundering());
   *     }
   *
   *     // sample implementation to handle dirty state
   *     myControl.prototype.refreshDataState = function (sPropertyName, oDataState) {
   *        if (oDataState.isDirty()) {
   *           console.log("Property " + sPropertyName + " of control " + this.getId()
   *               + " is dirty");
   *        }
   *     }
   * ```
   *
   *
   * With the {@link #getProperty} method, the control can read a property of the data state. The properties
   * are
   * 	`controlMessages` The {@link sap.ui.core.message.Message messages} created from type validation or parse
   * errors on user input for a property binding `dirty` Whether the value was not yet confirmed by the
   * server; use {@link #isDirty} to read this property `invalidValue` The control value that was rejected
   * by type parsing or validation on user input for a property binding `laundering` Whether the value
   * has been sent to the server but is not yet confirmed `messages` All messages of the data state `modelMessages`
   * The {@link sap.ui.core.message.Message messages} available for the binding in its {@link sap.ui.model.Binding#getModel
   * model} `originalValue` The ***original*** value of a property binding in {@link sap.ui.model.PropertyBinding#getExternalValue
   * external representation} `value` The value of a property binding in {@link sap.ui.model.PropertyBinding#getExternalValue
   * external representation}
   */
  export default class DataState extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.DataState with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DataState>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.DataState.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns whether the data state is changed, or resets the data state in case the parameter `bNewState`
     * is false; reset data state means that the data state properties are replaced with the changed properties.
     * As long as there was no call to this method with `bNewState` set to false, the data state is dirty, and
     * the corresponding binding will fire data state change events.
     *
     * @returns Whether the data state was changed
     */
    changed(
      /**
       * Whether the data state is to be reset
       */
      bNewState?: boolean
    ): boolean;
    /**
     * @SINCE 1.98.0
     *
     * Returns an array of all model and control messages, regardless of whether they are old or new.
     *
     * @returns The array of all messages
     */
    getAllMessages(): Message[];
    /**
     * Returns the changes of the data state in a map that the control can use in the `refreshDataState` method.
     * The changed property's name is the key in the map. Each element in the map contains an object with the
     * properties `oldValue` with the old property value and `value` with the new value of the property. The
     * map only contains the changed properties.
     *
     * @returns The changed properties of the data state
     */
    getChanges(): object;
    /**
     * Returns the array of this data state's current control messages.
     *
     * @returns The array of control messages
     */
    getControlMessages(): Message[];
    /**
     * Returns the dirty value of a binding that was rejected by a type validation so that it could not be applied
     * to the model. If the value was not rejected it returns `undefined`. In this case the current model value
     * can be accessed using the {@link #getValue} method.
     *
     * @returns The value that was rejected or `undefined`
     */
    getInvalidValue(): any | undefined;
    /**
     * Returns the array of this data state's current messages combining the model and control messages. The
     * array is sorted descendingly by message severity.
     *
     * @returns The sorted array of all messages
     */
    getMessages(): Message[];
    /**
     * Returns the array of this data state's current model messages.
     *
     * @returns The array of messages of the model
     */
    getModelMessages(): Message[];
    /**
     * Returns the formatted original value of the data. The original value is the last confirmed value.
     *
     * @returns The original confirmed value of the server
     */
    getOriginalValue(): any;
    /**
     * Returns the formatted value of the data state.
     *
     * @returns The value of the data.
     */
    getValue(): any;
    /**
     * Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if
     * the entered value did not yet pass the type validation.
     *
     * @returns Whether the data state is dirty
     */
    isControlDirty(): boolean;
    /**
     * Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet
     * confirmed by a server or the entered value did not yet pass the type validation.
     *
     * @returns Whether the data state is dirty
     */
    isDirty(): boolean;
    /**
     * Returns whether the data state is in laundering. If data is sent to the server, the data state becomes
     * laundering until the data was accepted or rejected.
     *
     * @returns Whether the data state is laundering
     */
    isLaundering(): boolean;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets an array of control state messages.
     *
     * @returns `this` to allow method chaining
     */
    setControlMessages(
      /**
       * The control messages
       */
      aMessages: Message[]
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the dirty value that was rejected by the type validation.
     *
     * @returns `this` to allow method chaining
     */
    setInvalidValue(
      /**
       * The value that was rejected by the type validation or `undefined` if the value was valid
       */
      vInvalidValue: any
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the laundering state of the data state.
     *
     * @returns `this` to allow method chaining
     */
    setLaundering(
      /**
       * Whether the state is laundering
       */
      bLaundering: boolean
    ): this;
    /**
     * Sets an array of model state messages.
     *
     * @returns `this` to allow method chaining
     */
    setModelMessages(
      /**
       * The model messages for this data state.
       */
      aMessages?: Message[]
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the formatted original value of the data.
     *
     * @returns `this` to allow method chaining
     */
    setOriginalValue(
      /**
       * The original value
       */
      vOriginalValue: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the formatted value of the data state,
     *
     * @returns `this` to allow method chaining
     */
    setValue(
      /**
       * the value
       */
      vValue: any
    ): this;
  }
}

declare module "sap/ui/model/Filter" {
  import BaseObject from "sap/ui/base/Object";

  import FilterOperator from "sap/ui/model/FilterOperator";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Filter for the list binding.
   */
  export default class Filter extends BaseObject {
    /**
     * Constructor for Filter.
     *
     * You either pass a single object literal with the filter parameters or use the individual constructor
     * arguments. No matter which variant is used, only certain combinations of parameters are supported (the
     * following list uses the names from the object literal):
     * 	A `path`, `operator` and one or two values (`value1`, `value2`), depending on the operator A `path`
     * and a custom filter function `test` An array of other filters named `filters` and a Boolean flag
     * `and` that specifies whether to combine the filters with an AND (`true`) or an OR (`false`) operator.
     *  An error will be logged to the console if an invalid combination of parameters is provided.
     *
     * Please note that a model implementation may not support a custom filter function, e.g. if the model does
     * not perform client-side filtering. It also depends on the model implementation if the filtering is case
     * sensitive or not. Client models filter case insensitive compared to the OData models which filter case
     * sensitive by default. See particular model documentation for details.
     *
     * The filter operators {@link sap.ui.model.FilterOperator.Any "Any"} and {@link sap.ui.model.FilterOperator.All
     * "All"} are only supported in V4 OData models. When creating a filter instance with these filter operators,
     * the argument `variable` only accepts a string identifier and `condition` needs to be another filter instance.
     */
    constructor(
      /**
       * Filter info object or a path or an array of filters
       */
      vFilterInfo:
        | {
            /**
             * Binding path for this filter
             */
            path?: string;
            /**
             * Function used for the client-side filtering of items. It should return a Boolean indicating whether the
             * current item passes the filter. If no test function is given, a default test function is used, based
             * on the given filter operator and the comparator function.
             */
            test?: (p1: any) => boolean;
            /**
             * Function used to compare two values for equality and order during client-side filtering. Two values are
             * given as parameters. The function is expected to return:
             * 	a negative number if the first value is smaller than the second value, `0` if the two values are
             * equal, a positive number if the first value is larger than the second value, `NaN` for non-comparable
             * values.  If no function is given, {@link sap.ui.model.Filter.defaultComparator} is used.
             */
            comparator?: (p1: any, p2: any) => number;
            /**
             * Operator used for the filter
             */
            operator?: FilterOperator | keyof typeof FilterOperator;
            /**
             * First value to use with the given filter operator
             */
            value1?: any;
            /**
             * Second value to use with the given filter operator, used only for the {@link sap.ui.model.FilterOperator.BT
             * "BT" between} and {@link sap.ui.model.FilterOperator.NB "NB" not between} filter operators
             */
            value2?: any;
            /**
             * The variable name used in lambda operators ({@link sap.ui.model.FilterOperator.Any "Any"} and {@link
             * sap.ui.model.FilterOperator.All "All"})
             */
            variable?: string;
            /**
             * A filter instance which will be used as the condition for lambda operators ({@link sap.ui.model.FilterOperator.Any
             * "Any"} and {@link sap.ui.model.FilterOperator.All "All"})
             */
            condition?: Filter;
            /**
             * An array of filters on which the logical conjunction is applied
             */
            filters?: Filter[];
            /**
             * Indicates whether an "AND" logical conjunction is applied on the filters. If it's not set or set to `false`,
             * an "OR" conjunction is applied.
             */
            and?: boolean;
            /**
             * Indicates whether a string value should be compared case sensitive or not. The handling of `undefined`
             * depends on the model implementation.
             */
            caseSensitive?: boolean;
          }
        | string
        | Filter[],
      /**
       * Either a filter operator or a custom filter function or a `boolean` flag that defines how to combine
       * multiple filters
       */
      vOperator?:
        | (FilterOperator | keyof typeof FilterOperator)
        | ((p1: any) => boolean | boolean),
      /**
       * First value to use with the given filter operator
       */
      vValue1?: any,
      /**
       * Second value to use with the given filter operator, used only for the {@link sap.ui.model.FilterOperator.BT
       * "BT" between} and {@link sap.ui.model.FilterOperator.NB "NB" not between} filter operators
       */
      vValue2?: any
    );

    /**
     * Compares two values
     *
     * This is the default comparator function used for client-side filtering, if no custom comparator is given
     * in the constructor. It does compare just by using equal/less than/greater than with automatic type casting,
     * except for null values, which are neither less or greater, and string values where localeCompare is used.
     *
     * The comparator method returns -1, 0, 1 for comparable values and NaN for non-comparable values.
     *
     * @returns -1, 0, 1 or NaN depending on the compare result
     */
    static defaultComparator(
      /**
       * the first value to compare
       */
      a: any,
      /**
       * the second value to compare
       */
      b: any
    ): number;
    /**
     * Creates a new subclass of class sap.ui.model.Filter with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Filter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Filter.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.96.0
     *
     * Returns the comparator function as provided on construction of this filter, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.comparator`.
     *
     * @returns The comparator function
     */
    getComparator(): (p1: any) => boolean | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the filter instance which is used as the condition for lambda operators, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.condition`.
     *
     * @returns The filter instance
     */
    getCondition(): Filter | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the array of filters as specified on construction of this filter, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.filters`
     *
     * @returns The array of filters
     */
    getFilters(): Filter[] | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the filter operator used for this filter, see {@link sap.ui.model.Filter#constructor}, parameter
     * `vFilterInfo.operator` or `vOperator`.
     *
     * @returns The operator
     */
    getOperator(): (FilterOperator | keyof typeof FilterOperator) | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the binding path for this filter, see {@link sap.ui.model.Filter#constructor}, parameter `vFilterInfo`
     * or `vFilterInfo.path`.
     *
     * @returns The binding path
     */
    getPath(): string | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the test function which is used to filter the items, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.test`.
     *
     * @returns The test function
     */
    getTest(): (p1: any, p2: any) => boolean | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Returns the first value that is used with the given filter operator, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.value1` or `vValue1`.
     *
     * @returns The first value
     */
    getValue1(): any;
    /**
     * @SINCE 1.96.0
     *
     * Returns the second value that is used with the given filter operator, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.value2` or `vValue2`.
     *
     * @returns The second value
     */
    getValue2(): any;
    /**
     * @SINCE 1.96.0
     *
     * Returns the variable name used in lambda operators, see {@link sap.ui.model.Filter#constructor}, parameter
     * `vFilterInfo.variable`.
     *
     * @returns The variable name
     */
    getVariable(): string | undefined;
    /**
     * @SINCE 1.96.0
     *
     * Indicates whether an "AND" logical conjunction is applied on the filters, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.and`.
     *
     * @returns Whether "AND" is being applied
     */
    isAnd(): boolean;
    /**
     * @SINCE 1.96.0
     *
     * Indicates whether a string value should be compared case sensitive, see {@link sap.ui.model.Filter#constructor},
     * parameter `vFilterInfo.caseSensitive`.
     *
     * @returns Whether the string values should be compared case sensitive
     */
    isCaseSensitive(): boolean;
  }
}

declare module "sap/ui/model/FilterOperator" {
  /**
   * Operators for the Filter.
   */
  enum FilterOperator {
    /**
     * @SINCE 1.48.0
     *
     * Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems.
     * `All` returns a list of those items for which **all** dependent subitems match the filter criteria of
     * the nested filter. For example, a list of customers can be filtered by filter criteria that are applied
     * to the list of orders the customer placed in the past. The filter returns a list of those customers that
     * **always** ordered a specific product.
     *
     * This filter operator is only supported in OData V4 models.
     */
    All = "All",
    /**
     * @SINCE 1.48.0
     *
     * Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems.
     * `Any` returns a list of those items for which **at least one** dependent subitem matches the filter criteria
     * of the nested filter. For example, a list of customers can be filtered by filter criteria that are applied
     * to the list of orders the customer placed in the past. The filter returns a list of those customers that
     * **at least once** ordered a specific product.
     *
     * This filter operator is only supported in OData V4 models.
     */
    Any = "Any",
    /**
     * FilterOperator between
     *
     * Used to filter all entries between the given boundaries. The filter result contains the boundaries, but
     * no entries before or further. The order of the entries in the filter results is based on their occurrence
     * in the input list.
     *
     * **Note, when used on strings:** The String comparison is based on lexicographical ordering. Characters
     * are ranked in their alphabetical order. Words with the same preceding substring are ordered based on
     * their length e.g. "Chris" comes before "Christian".
     *
     * The filtering includes the right boundary, but no strings further in the lexicographical ordering. e.g.
     * between "A" and "C" includes the string "C", but not "Chris".
     */
    BT = "BT",
    /**
     * FilterOperator contains
     */
    Contains = "Contains",
    /**
     * FilterOperator ends with
     */
    EndsWith = "EndsWith",
    /**
     * FilterOperator equals
     */
    EQ = "EQ",
    /**
     * FilterOperator greater or equals
     */
    GE = "GE",
    /**
     * FilterOperator greater than
     */
    GT = "GT",
    /**
     * FilterOperator less or equals
     */
    LE = "LE",
    /**
     * FilterOperator less than
     */
    LT = "LT",
    /**
     * @SINCE 1.58.0
     *
     * FilterOperator "Not Between"
     *
     * Used to filter all entries, which are not between the given boundaries. The filter result does not contains
     * the boundaries, but only entries outside of the boundaries. The order of the entries in the filter results
     * is based on their occurrence in the input list.
     *
     * **Note, when used on strings:** The String comparison is based on lexicographical ordering. Characters
     * are ranked in their alphabetical order. Words with the same preceding substring are ordered based on
     * their length e.g. "Chris" comes before "Christian".
     */
    NB = "NB",
    /**
     * FilterOperator not equals
     */
    NE = "NE",
    /**
     * @SINCE 1.58.0
     *
     * FilterOperator not contains
     */
    NotContains = "NotContains",
    /**
     * @SINCE 1.58.0
     *
     * FilterOperator not ends with
     */
    NotEndsWith = "NotEndsWith",
    /**
     * @SINCE 1.58.0
     *
     * FilterOperator not starts with
     */
    NotStartsWith = "NotStartsWith",
    /**
     * FilterOperator starts with
     */
    StartsWith = "StartsWith",
  }
  export default FilterOperator;
}

declare module "sap/ui/model/FilterType" {
  /**
   * Enumeration of the possible filter types.
   *
   * Each {@link sap.ui.model.ListBinding list binding} maintains two separate lists of filters: one for filters
   * defined by the control that owns the binding, and another list for filters that an application can define
   * in addition. When executing the filter operation, both sets of filters are combined.
   *
   * See method {@link sap.ui.model.ListBinding#filter ListBinding#filter} on how to specify the filter type.
   * When no filter type is given to that method, the behavior depends on the specific model implementation
   * and should be documented in the API reference for that model.
   */
  enum FilterType {
    /**
     * Filters which are provided by the application.
     */
    Application = "Application",
    /**
     * Filters which are set by a control itself.
     *
     * Some controls implement filter capabilities as part of their behavior, e.g. table columns or facet filters.
     * When such controls define filters for a binding, they should use filter type `Control` to keep their
     * filters separated from filters that the application might define in addition.
     */
    Control = "Control",
  }
  export default FilterType;
}

declare module "sap/ui/model/FormatException" {
  /**
   * Instances of this exception are thrown when converting a model value to its representation on the UI
   * fails.
   */
  export default class FormatException {
    /**
     * Creates a new FormatException.
     * See:
     * 	sap.ui.model.SimpleType#formatValue
     */
    constructor(
      /**
       * A message explaining why the formatting of a value failed
       */
      message: string
    );
  }
}

declare module "sap/ui/model/json/JSONListBinding" {
  import ClientListBinding from "sap/ui/model/ClientListBinding";

  import JSONModel from "sap/ui/model/json/JSONModel";

  import Context from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * List binding implementation for JSON format.
   */
  export default class JSONListBinding extends ClientListBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new JSONListBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.json.JSONModel#bindList JSONModel#bindList} on
     * the corresponding model instance instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: JSONModel,
      /**
       * Binding path to be used for this binding
       */
      sPath: string,
      /**
       * Binding context relative to which a relative binding path will be resolved
       */
      oContext: Context,
      /**
       * Initial sort order (can be either a sorter or an array of sorters)
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filter/s (can be either a filter or an array of filters)
       */
      aFilters?: Filter | Filter[],
      /**
       * Map of optional parameters as defined by subclasses; this class does not introduce any own parameters
       */
      mParameters?: object
    );
  }
}

declare module "sap/ui/model/json/JSONModel" {
  import ClientModel from "sap/ui/model/ClientModel";

  import Metadata from "sap/ui/base/Metadata";

  import Context from "sap/ui/model/Context";

  /**
   * Model implementation for the JSON format.
   *
   * This model is not prepared to be inherited from.
   */
  export default class JSONModel extends ClientModel {
    /**
     * Constructor for a new JSONModel.
     *
     * The observation feature is experimental! When observation is activated, the application can directly
     * change the JS objects without the need to call setData, setProperty or refresh. Observation does only
     * work for existing properties in the JSON, it cannot detect new properties or new array entries.
     */
    constructor(
      /**
       * Either the URL where to load the JSON from or a JS object
       */
      oData?: object | string,
      /**
       * Whether to observe the JSON data for property changes (experimental)
       */
      bObserve?: boolean
    );

    /**
     * Creates a new subclass of class sap.ui.model.json.JSONModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, JSONModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.json.JSONModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns a Promise of the current data-loading state. Every currently running {@link sap.ui.model.json.JSONModel#loadData}
     * call is respected by the returned Promise. This also includes a potential loadData call from the JSONModel's
     * constructor in case a URL was given. The data-loaded Promise will resolve once all running requests have
     * finished. Only request, which have been queued up to the point of calling this function will be respected
     * by the returned Promise.
     *
     * @returns a Promise, which resolves if all pending data-loading requests have finished
     */
    dataLoaded(): Promise<any>;
    /**
     * Serializes the current JSON data of the model into a string.
     *
     * @returns The JSON data serialized as string
     */
    getJSON(): string;
    /**
     * Returns the value for the property with the given path and context.
     *
     * @returns The value of the property. If the property is not found, `null` or `undefined` is returned.
     */
    getProperty(
      /**
       * The path to the property
       */
      sPath: string,
      /**
       * The context which will be used to retrieve the property
       */
      oContext?: Context
    ): any | null | undefined;
    /**
     * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in
     * the model. Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin
     * policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.
     *
     * @returns in case bAsync is set to true a Promise is returned; this promise resolves/rejects based on
     * the request status
     */
    loadData(
      /**
       * A string containing the URL to which the request is sent.
       */
      sURL: string,
      /**
       * A map or string that is sent to the server with the request. Data that is sent to the server is appended
       * to the URL as a query string. If the value of the data parameter is an object (map), it is converted
       * to a string and url-encoded before it is appended to the URL.
       */
      oParameters?: object | string,
      /**
       * **Deprecated as of Version 1.107**; always use asynchronous loading for performance reasons. By default,
       * all requests are sent asynchronously. Synchronous requests may temporarily lock the browser, disabling
       * any actions while the request is active. Cross-domain requests do not support synchronous operations.
       */
      bAsync?: boolean,
      /**
       * The type of request to make ("POST" or "GET"), default is "GET". Note: Other HTTP request methods, such
       * as PUT and DELETE, can also be used here, but they are not supported by all browsers.
       */
      sType?: string,
      /**
       * Whether the data should be merged instead of replaced
       */
      bMerge?: boolean,
      /**
       * **Deprecated as of Version 1.107**; always use the cache headers from the back-end system for performance
       * reasons. Disables caching if set to `false`.
       */
      bCache?: boolean,
      /**
       * An object of additional header key/value pairs to send along with the request
       */
      mHeaders?: object
    ): Promise<any> | undefined;
    /**
     * Sets the data, passed as a JS object tree, to the model.
     */
    setData(
      /**
       * the data to set on the model
       */
      oData: object,
      /**
       * whether to merge the data instead of replacing it
       */
      bMerge?: boolean
    ): void;
    /**
     * Sets the data, passed as a string in JSON format, to the model.
     */
    setJSON(
      /**
       * the JSON data to set on the model
       */
      sJSON: string,
      /**
       * whether to merge the data instead of replacing it
       */
      bMerge?: boolean
    ): void;
    /**
     * Sets `oValue` as new value for the property defined by the given `sPath` and `oContext`. Once the new
     * model value has been set, all interested parties are informed.
     *
     * @returns `true` if the value was set correctly, and `false` if errors occurred, for example if the entry
     * was not found.
     */
    setProperty(
      /**
       * The path of the property to set
       */
      sPath: string,
      /**
       * The new value to be set for this property
       */
      oValue: any,
      /**
       * The context used to set the property
       */
      oContext?: Context,
      /**
       * Whether to update other bindings dependent on this property asynchronously
       */
      bAsyncUpdate?: boolean
    ): boolean;
  }
}

declare module "sap/ui/model/json/JSONPropertyBinding" {
  import ClientPropertyBinding from "sap/ui/model/ClientPropertyBinding";

  import JSONModel from "sap/ui/model/json/JSONModel";

  import Context from "sap/ui/model/Context";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Property binding implementation for JSON format.
   */
  export default class JSONPropertyBinding extends ClientPropertyBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new JSONListBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.json.JSONModel#bindProperty JSONModel#bindProperty}
     * on the corresponding model instance instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: JSONModel,
      /**
       * Binding path to be used for this binding
       */
      sPath: string,
      /**
       * Binding context relative to which a relative binding path will be resolved
       */
      oContext: Context,
      /**
       * Map of optional parameters as defined by subclasses; this class does not introduce any own parameters
       */
      mParameters?: object
    );
  }
}

declare module "sap/ui/model/json/JSONTreeBinding" {
  import ClientTreeBinding from "sap/ui/model/ClientTreeBinding";

  import JSONModel from "sap/ui/model/json/JSONModel";

  import Filter from "sap/ui/model/Filter";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Tree binding implementation for JSON format.
   *
   * The bound data can contain JSON objects and arrays. Both will be used to build the tree structure. You
   * can optionally define a set of arrays to be used for the tree structure in the parameter `arrayNames`.
   * If this parameter is set, all other objects and arrays will be ignored.
   */
  export default class JSONTreeBinding extends ClientTreeBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a new JSONListBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.json.JSONModel#bindTree JSONModel#bindTree} on
     * the corresponding model instance instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: JSONModel,
      /**
       * Path pointing to the tree or array that should be bound
       */
      sPath: string,
      /**
       * Context object for this binding, mandatory when a relative binding path is given
       */
      oContext?: object,
      /**
       * Predefined filters contained in an array
       */
      aFilters?: Filter | Filter[],
      /**
       * Additional model-specific parameters
       */
      mParameters?: {
        /**
         * Keys of arrays to be used for building the tree structure. If not specified, all arrays and objects in
         * the bound data will be used. Note that for arrays nested inside differently named arrays, you need to
         * add both to `arrayNames`. You always have to add the complete parent chain. If any array is ignored,
         * its child arrays will be ignored as well even if they have been added to `arrayNames`.
         */
        arrayNames?: string[];
      }
    );
  }
}

declare module "sap/ui/model/ListBinding" {
  import Binding from "sap/ui/model/Binding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import Message from "sap/ui/core/message/Message";

  /**
   * ListBinding is a specific binding for lists in the model, which can be used to populate Tables or ItemLists.
   */
  export default class ListBinding extends Binding {
    /**
     * Constructor for ListBinding.
     */
    constructor(
      /**
       * Model instance that this binding belongs to
       */
      oModel: Model,
      /**
       * Binding path for this binding; a relative path will be resolved relative to a given context
       */
      sPath: string,
      /**
       * Context to be used to resolve a relative path
       */
      oContext: Context,
      /**
       * Initial sort order (can be either a sorter or an array of sorters)
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filter/s (can be either a filter or an array of filters)
       */
      aFilters?: Filter | Filter[],
      /**
       * Additional, implementation-specific parameters that should be used by the new list binding; this base
       * class doesn't define any parameters, check the API reference for the concrete model implementations to
       * learn about their supported parameters (if any)
       */
      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.ListBinding with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.ListBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @deprecated (since 1.11) - use the `change` event. It now contains a parameter `(reason : "filter")`
     * when a filter event is fired.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the {@link #event:filter filter} event of this `sap.ui.model.ListBinding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.ListBinding` itself.
     */
    attachFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `ListBinding` itself
       */
      oListener?: object
    ): void;
    /**
     * @deprecated (since 1.11) - use the `change` event. It now contains a parameter `(reason : "sort")` when
     * a sorter event is fired.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the {@link #event:sort sort} event of this `sap.ui.model.ListBinding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.ListBinding` itself.
     */
    attachSort(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with; defaults to this `ListBinding` itself
       */
      oListener?: object
    ): void;
    /**
     * @deprecated (since 1.11) - use the `change` event.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:filter filter} event of this `sap.ui.model.ListBinding`.
     */
    detachFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * On which object the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * @deprecated (since 1.11) - use the `change` event.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:sort sort} event of this `sap.ui.model.ListBinding`.
     */
    detachSort(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Calculates delta of specified old data array and new data array.
     *
     * For more information, see {@link module:sap/base/util/array/diff}.
     *
     * @returns List of update operations
     */
    diffData(
      /**
       * Old data array
       */
      aOld: any[],
      /**
       * New data array
       */
      aNew: any[]
    ): Array<{
      type: string;

      index: int;
    }>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Enable extended change detection. When extended change detection is enabled, the list binding provides
     * detailed information about changes, for example which entries have been removed or inserted. This can
     * be utilized by a control for fine-grained update of its elements. Please see {@link sap.ui.model.ListBinding.prototype.getContexts}
     * for more information.
     *
     * For models that do not have a unique key on each entry by default, a key property or function can be
     * set which is used to identify entries.
     */
    enableExtendedChangeDetection(
      /**
       * Whether changes within the same entity should cause a delete and insert command
       */
      bDetectUpdates: boolean,
      /**
       * The path of the property containing the key or a function getting the context as only parameter to calculate
       * a key to identify an entry
       */
      vKey: Function | string,
      /**
       * The configuration for the change detection
       */
      oExtendedChangeDetectionConfig: object
    ): void;
    /**
     * Applies a new set of filters to the list represented by this binding.
     *
     * Depending on the nature of the model (client or server), the operation might be executed locally or on
     * a server and it might execute asynchronously.
     *
     * Application and Control Filters: Each list binding maintains two separate lists of filters, one for filters
     * defined by the control that owns the binding, and another list for filters that an application can define
     * in addition. When executing the filter operation, both sets of filters are combined.
     *
     * By using the `sFilterType` parameter of the `filter` method, the caller can control which set of filters
     * is modified. If no type is given, then the behavior depends on the model implementation and should be
     * documented in the API reference for that model.
     *
     * Auto-Grouping of Filters: Filters are first grouped according to their binding path. All filters belonging
     * to the same path are ORed, and after that the results of all paths are ANDed. Usually this means that
     * all filters applied to the same property are ORed, while filters on different properties are ANDed. Please
     * use either the automatic grouping of filters (where applicable) or explicit AND/OR filters, as a mixture
     * of both is not supported.
     *
     * @returns Returns `this` to facilitate method chaining
     */
    filter(
      /**
       * Single filter object or an array of filter objects
       */
      aFilters: Filter | Filter[],
      /**
       * Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation
       */
      sFilterType?: FilterType | keyof typeof FilterType
    ): this;
    /**
     * @SINCE 1.97.0
     *
     * Returns all current contexts of this list binding in no special order. Just like {@link #getCurrentContexts},
     * this method does not request any data from a back end and does not change the binding's state. In contrast
     * to {@link #getCurrentContexts}, it does not only return those contexts that were last requested by a
     * control, but all contexts that are currently available in the binding.
     *
     * @returns All current contexts of this list binding, in no special order
     */
    getAllCurrentContexts(): Context[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an array of binding contexts for the bound target list.
     *
     * In case of extended change detection, the context array may have an additional `diff` property, see {@link
     * topic:7cdff73f308b4b10bdf7d83b7aba72e7 documentation on extended change detection} for details.
     *
     * **Note:**The public usage of this method is deprecated, as calls from outside of controls will lead to
     * unexpected side effects. To avoid this, use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
     * instead.
     *
     * @returns The array of contexts for each row of the bound list
     */
    getContexts(
      /**
       * The startIndex where to start the retrieval of contexts
       */
      iStartIndex?: int,
      /**
       * Determines how many contexts to retrieve beginning from the start index; default is the whole list length
       * up to the model's size limit; see {@link sap.ui.model.Model#setSizeLimit}
       */
      iLength?: int,
      /**
       * The maximum number of contexts to read before and after the given range; with this, controls can prefetch
       * data that is likely to be needed soon, e.g. when scrolling down in a table; this parameter is model-specific
       * and not implemented by all models
       */
      iMaximumPrefetchSize?: int,
      /**
       * Whether this call keeps the result of {@link #getCurrentContexts} untouched; since 1.86.0. This parameter
       * is model-specific and not implemented by all models
       */
      bKeepCurrent?: boolean
    ): Context[];
    /**
     * @SINCE 1.93.0
     *
     * Returns the count of entries in the list, or `undefined` if it is unknown. The count is by default identical
     * to the list length if it is final. Concrete subclasses may, however, override the method, for example:
     *
     * 	 for server-side models where lists are not completely read by the client,  for lists representing
     * hierarchical data.
     * See:
     * 	#getLength
     * 	#isLengthFinal
     *
     * @returns The count of entries
     */
    getCount(): number | undefined;
    /**
     * @SINCE 1.28
     *
     * Returns the contexts of this list binding as last requested by the control and in the same order the
     * control has received them.
     *
     * This method does not request any data from a back end and does not change the binding's state.
     *
     * @returns The contexts of this list binding as last requested by the control and in the same order the
     * control has received them
     */
    getCurrentContexts(): Context[];
    /**
     * Returns list of distinct values for the given relative binding path.
     *
     * @returns Array of distinct values.
     */
    getDistinctValues(
      /**
       * Relative binding path
       */
      sPath: string
    ): any[];
    /**
     * @SINCE 1.96.0
     *
     * Returns the filters set via the constructor or via {@link #filter} for the given {@link sap.ui.model.FilterType}.
     *
     * @returns An array of filters for the given filter type.
     */
    getFilters(
      /**
       * The FilterType
       */
      sFilterType: FilterType | keyof typeof FilterType
    ): Filter[];
    /**
     * Gets the group for the given context. Must only be called if `isGrouped()` returns that grouping is enabled
     * for this binding. The grouping will be performed using the first sorter (in case multiple sorters are
     * defined).
     * See:
     * 	sap.ui.model.Sorter#getGroup
     *
     * @returns The group object containing a key property and optional custom properties
     */
    getGroup(
      /**
       * The binding context
       */
      oContext: Context
    ): object;
    /**
     * @SINCE 1.24
     *
     * Returns the number of entries in the list.
     *
     * This might be an estimated or preliminary length, in case the full length is not known yet, see method
     * {@link #isLengthFinal}.
     *
     * @returns Returns the number of entries in the list
     */
    getLength(): int;
    /**
     * Indicates whether grouping is enabled for the binding. Grouping is enabled for a list binding if at least
     * one sorter exists on the binding and the first sorter is a grouping sorter.
     *
     * @returns Whether grouping is enabled
     */
    isGrouped(): boolean;
    /**
     * @SINCE 1.24
     *
     * Returns whether the length which can be retrieved using getLength() is a known, final length, or a preliminary
     * or estimated length which may change if further data is requested.
     *
     * @returns Whether the length is final
     */
    isLengthFinal(): boolean;
    /**
     * @SINCE 1.77.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Requests a {@link sap.ui.model.Filter} object which can be used to filter the list binding by entries
     * with model messages. With the filter callback, you can define if a message is considered when creating
     * the filter for entries with messages.
     *
     * The resulting filter does not consider application or control filters specified for this list binding
     * in its constructor or in its {@link #filter} method; add filters which you want to keep with the "and"
     * conjunction to the resulting filter before calling {@link #filter}.
     *
     * The implementation of this method is optional for model specific implementations of `sap.ui.model.ListBinding`.
     * Check for existence of this function before calling it.
     *
     * @returns A Promise that resolves with a {@link sap.ui.model.Filter} representing the entries with messages;
     * it resolves with `null` if the binding is not resolved or if the binding knows that there is no message
     * for any entry
     */
    requestFilterForMessages(
      /**
       * A callback function to filter only relevant messages. The callback returns whether the given {@link sap.ui.core.message.Message}
       * is considered. If no callback function is given, all messages are considered.
       */
      fnFilter?: (p1: Message) => boolean
    ): Promise<Filter | null>;
    /**
     * Sorts the list according to the sorter object.
     *
     * Instead of a single sorter also an array of sorters can be passed to the sort method. In this case they
     * are processed in the sequence in which they are contained in the array.
     *
     * Grouping: Sorting and grouping are closely related. In case a list should be grouped, it must be sorted
     * by the property to group with. Grouping is enabled by setting the `group` property on the sorter object.
     * If it is enabled, you can get the current group of an item using {@link sap.ui.model.ListBinding.prototype.getGroup}.
     * In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping
     * is not supported.
     *
     * @returns Returns `this` to facilitate method chaining
     */
    sort(
      /**
       * The Sorter object or an array of sorters which defines the sort order
       */
      aSorters: Sorter | Sorter[]
    ): this;
  }
}

declare module "sap/ui/model/message/MessageModel" {
  import ClientModel from "sap/ui/model/ClientModel";

  import MessageManager from "sap/ui/core/message/MessageManager";

  import Metadata from "sap/ui/base/Metadata";

  import Context from "sap/ui/model/Context";

  /**
   * Model implementation for Messages.
   *
   * This model is not prepared to be inherited from.
   */
  export default class MessageModel extends ClientModel {
    /**
     * Constructor for a new JSONModel.
     */
    constructor(
      /**
       * The MessageManager instance
       */
      oMessageManager: MessageManager
    );

    /**
     * Creates a new subclass of class sap.ui.model.message.MessageModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.message.MessageModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the value for the property with the given `sPropertyName`.
     *
     * @returns The value of the property
     */
    getProperty(
      /**
       * The path to the property
       */
      sPath: string,
      /**
       * The context to resolve a relative path with
       */
      oContext?: Context
    ): any;
    /**
     * Sets the message data to the model.
     */
    setData(
      /**
       * the data to set on the model
       */
      oData: object
    ): void;
    /**
     * Unsupported operation.
     *
     * Other models provide this method to set a new value for a specific property. `MessageModel` does not
     * support it as it supports the `OneWay` mode only.
     */
    setProperty(
      /**
       * Unused in this implementation
       */
      sPath: string,
      /**
       * Unused in this implementation
       */
      oValue: object,
      /**
       * Unused in this implementation
       */
      oContext: Context
    ): void;
  }
}

declare module "sap/ui/model/MetaModel" {
  import Model from "sap/ui/model/Model";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Model implementation for meta models
   */
  export default class MetaModel extends Model {
    /**
     * Constructor for a new MetaModel.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.MetaModel with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MetaModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.MetaModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/Model" {
  import MessageProcessor from "sap/ui/core/message/MessageProcessor";

  import Context from "sap/ui/model/Context";

  import ContextBinding from "sap/ui/model/ContextBinding";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import ListBinding from "sap/ui/model/ListBinding";

  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import TreeBinding from "sap/ui/model/TreeBinding";

  import ChangeReason from "sap/ui/model/ChangeReason";

  import BindingMode from "sap/ui/model/BindingMode";

  import Message from "sap/ui/core/message/Message";

  import Metadata from "sap/ui/base/Metadata";

  import MetaModel from "sap/ui/model/MetaModel";

  /**
   * This is an abstract base class for model objects.
   */
  export default class Model extends MessageProcessor {
    /**
     * Constructor for a new Model.
     *
     * Every Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax
     * in the target.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.Model with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Model>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Model.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself.
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:parseError parseError} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachParseError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself.
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:propertyChange propertyChange} event of this
     * `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPropertyChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:propertyChange propertyChange} event of this
     * `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachPropertyChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestCompleted requestCompleted} event of
     * this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestCompleted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestCompleted requestCompleted} event of
     * this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestCompleted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestFailed requestFailed} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestFailed requestFailed} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestFailed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestSent requestSent} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestSent(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:requestSent requestSent} event of this `sap.ui.model.Model`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.Model` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachRequestSent(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.Model` itself
       */
      oListener?: object
    ): this;
    /**
     * Create ContextBinding.
     *
     * @returns The newly created binding
     */
    bindContext(
      /**
       * The path pointing to the property that should be bound
       */
      sPath: string,
      /**
       * The context object for this databinding
       */
      oContext?: Context,
      /**
       * Additional model-specific parameters
       */
      mParameters?: object,
      /**
       * Event handlers can be passed to the binding ({change:myHandler})
       */
      oEvents?: object
    ): ContextBinding;
    /**
     *
     * @returns The newly created binding
     */
    bindList(
      /**
       * The path pointing to the list / array that should be bound
       */
      sPath: string,
      /**
       * The context object for this databinding
       */
      oContext?: Context,
      /**
       * Initial sort order (can be either a sorter or an array of sorters)
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filter/s (can be either a filter or an array of filters)
       */
      aFilters?: Filter | Filter[],
      /**
       * Additional model-specific parameters
       */
      mParameters?: object
    ): ListBinding;
    /**
     *
     * @returns The newly created binding
     */
    bindProperty(
      /**
       * The path pointing to the property that should be bound
       */
      sPath: string,
      /**
       * The context object for this databinding
       */
      oContext?: Context,
      /**
       * Additional model-specific parameters
       */
      mParameters?: object
    ): PropertyBinding;
    /**
     *
     * @returns The newly created binding
     */
    bindTree(
      /**
       * The path pointing to the tree / array that should be bound
       */
      sPath: string,
      /**
       * The context object for this databinding
       */
      oContext?: Context,
      /**
       * Predefined filter/s contained in an array
       */
      aFilters?: Filter[],
      /**
       * Additional model specific parameters
       */
      mParameters?: object,
      /**
       * Predefined sap.ui.model.sorter/s contained in an array
       */
      aSorters?: Sorter[]
    ): TreeBinding;
    /**
     *
     * @returns The binding context, if it could be created synchronously
     */
    createBindingContext(
      /**
       * The path to create the new context from
       */
      sPath: string,
      /**
       * The context which should be used to create the new binding context
       */
      oContext?: Context,
      /**
       * The parameters used to create the new binding context
       */
      mParameters?: object,
      /**
       * The function which should be called after the binding context has been created
       */
      fnCallBack?: Function,
      /**
       * Force reload even if data is already available; for server-side models this should refetch the data from
       * the server
       */
      bReload?: boolean
    ): Context | undefined;
    /**
     * Destroys the model and clears the model data.
     *
     * A model implementation may override this function and perform model-specific cleanup tasks e.g. abort
     * requests, prevent new requests, etc.
     * See:
     * 	sap.ui.base.Object.prototype.destroy
     */
    destroy(): void;

    destroyBindingContext(
      /**
       * The context to destroy
       */
      oContext: Context
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:parseError parseError} event of this `sap.ui.model.Model`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachParseError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:propertyChange propertyChange} event of this
     * `sap.ui.model.Model`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachPropertyChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:requestCompleted requestCompleted} event of
     * this `sap.ui.model.Model`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRequestCompleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:requestFailed requestFailed} event of this
     * `sap.ui.model.Model`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRequestFailed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:requestSent requestSent} event of this `sap.ui.model.Model`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachRequestSent(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:parseError parseError} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireParseError(
      /**
       * Parameters to pass along with the event; May contain the following parameters: `errorCode`, `url`, `reason`,
       * `srcText`, `line`, `linePos`, `filePos`
       */
      oParameters?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:propertyChange propertyChange} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    firePropertyChange(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The reason of the property change
         */
        reason?: ChangeReason;
        /**
         * The path of the property
         */
        path?: string;
        /**
         * The context of the property
         */
        context?: object;
        /**
         * The value of the property
         */
        value?: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:requestCompleted requestCompleted} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRequestCompleted(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The url which was sent to the back end.
         */
        url?: string;
        /**
         * The type of the request (if available)
         */
        type?: string;
        /**
         * If the request was synchronous or asynchronous (if available)
         */
        async?: boolean;
        /**
         * additional information for the request (if available) **deprecated**
         */
        info?: string;
        /**
         * Additional information for the request (if available)
         */
        infoObject?: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:requestFailed requestFailed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRequestFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request, as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:requestSent requestSent} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireRequestSent(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The url which is sent to the back end.
         */
        url?: string;
        /**
         * The type of the request (if available)
         */
        type?: string;
        /**
         * If the request is synchronous or asynchronous (if available)
         */
        async?: boolean;
        /**
         * Additional information for the request (if available) **deprecated**
         */
        info?: string;
        /**
         * Additional information for the request (if available)
         */
        infoObject?: object;
      }
    ): this;
    /**
     * Get the default binding mode for the model.
     *
     * @returns Default binding mode of the model
     */
    getDefaultBindingMode(): BindingMode | keyof typeof BindingMode;
    /**
     * @SINCE 1.76.0
     *
     * Returns messages of this model associated with the given context, that is messages belonging to the object
     * referred to by this context or a child object of that object. The messages are sorted by their {@link
     * sap.ui.core.message.Message#getType type} according to the type's severity in a way that messages with
     * highest severity come first.
     *
     * @returns The messages associated with this context sorted by severity; empty array in case no messages
     * exist
     */
    getMessages(
      /**
       * The context to retrieve messages for
       */
      oContext: Context
    ): Message[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns model messages for which the target matches the given resolved binding path.
     *
     * @returns An array of messages matching the given path; may be empty but not `null` or `undefined`
     */
    getMessagesByPath(
      /**
       * The resolved binding path
       */
      sPath: string,
      /**
       * Whether also messages with a target starting with the given path are returned, not just the messages
       * with a target identical to the given path
       */
      bPrefixMatch?: boolean
    ): Message[];
    /**
     * Returns the meta model associated with this model if it is available for the concrete model type.
     *
     * @returns The meta model or `undefined` if no meta model exists.
     */
    getMetaModel(): MetaModel | undefined;
    /**
     *
     * @returns The value for the given path/context or `undefined` if data could not be found
     */
    getObject(
      /**
       * Path to where to read the object
       */
      sPath: string,
      /**
       * Context with which the path should be resolved
       */
      oContext?: Context,
      /**
       * Additional model-specific parameters
       */
      mParameters?: object
    ): any | undefined;
    /**
     * Returns the original value for the property with the given path and context.
     *
     * The original value is the value that was last responded by a server if using a server model implementation.
     *
     * @returns vValue The value of the property
     */
    getOriginalProperty(
      /**
       * Path/name of the property
       */
      sPath: string,
      /**
       * Context if available to access the property value
       */
      oContext?: Context
    ): any;
    /**
     *
     * @returns Value of the addressed property
     */
    getProperty(
      /**
       * The path to where to read the attribute value
       */
      sPath: string,
      /**
       * The context with which the path should be resolved
       */
      oContext?: Context
    ): any;
    /**
     * Check if the specified binding mode is supported by the model.
     *
     * @returns Whether the given binding mode is supported
     */
    isBindingModeSupported(
      /**
       * The binding mode to check
       */
      sMode: BindingMode | keyof typeof BindingMode
    ): boolean;
    /**
     * @deprecated (since 1.88.0) - legacy path syntax is not supported by most model implementations.
     *
     * Returns whether legacy path syntax is used.
     *
     * @returns Whether legacy path syntax is used
     */
    isLegacySyntax(): boolean;
    /**
     * Refresh the model.
     *
     * This will check all bindings for updated data and update the controls if data has been changed.
     */
    refresh(
      /**
       * Update controls even if data has not been changed
       */
      bForceUpdate?: boolean
    ): void;
    /**
     * Set the default binding mode for the model.
     *
     * If the default binding mode should be changed, this method should be called directly after model instance
     * creation and before any binding creation. Otherwise it is not guaranteed that the existing bindings will
     * be updated with the new binding mode.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setDefaultBindingMode(
      /**
       * The default binding mode to set for the model
       */
      sMode: BindingMode | keyof typeof BindingMode
    ): this;
    /**
     * @deprecated (since 1.88.0) - legacy path syntax is not supported by most model implementations.
     *
     * Enables legacy path syntax handling.
     *
     * This defines, whether relative bindings, which do not have a defined binding context, should be compatible
     * to earlier releases which means they are resolved relative to the root element or handled strict and
     * stay unresolved until a binding context is set.
     */
    setLegacySyntax(
      /**
       * The path syntax to use
       */
      bLegacySyntax: boolean
    ): void;
    /**
     * Sets the messages for this model and notifies the bindings if the new messages differ from the current
     * model messages.
     */
    setMessages(
      /**
       * The new messages for the model, mapping a binding path to an array of {@link sap.ui.core.message.Message}
       * objects
       */
      mMessages?: Record<string, Message[]>
    ): void;
    /**
     * Set the maximum number of entries which are used for list bindings.
     *
     * The default size limit for models is 100.
     */
    setSizeLimit(
      /**
       * Collection size limit
       */
      iSizeLimit: int
    ): void;
  }
}

declare module "sap/ui/model/odata/ODataTreeBindingAdapter" {
  /**
   * @EXPERIMENTAL - This module is only for experimental and internal use!
   *
   * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
   * controls. Only usable with the sap.ui.table.TreeTable control. The functions defined here are only available
   * when you are using a TreeTable and an ODataModel.
   */
  export default function ODataTreeBindingAdapter(): void;
}

declare module "sap/ui/model/odata/ODataTreeBindingFlat" {
  /**
   * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
   * controls.
   */
  export default function ODataTreeBindingFlat(): void;
}

declare module "sap/ui/model/odata/AnnotationHelper" {
  import { IContext } from "sap/ui/core/util/XMLPreprocessor";

  import Context from "sap/ui/model/Context";

  /**
   * @SINCE 1.27.0
   *
   * A collection of methods which help to consume
   * OData V4 annotations in XML template views. Every context argument must belong to a `sap.ui.model.odata.ODataMetaModel`
   * instance.
   *
   * Formatter functions like {@link #.format format} and {@link #.simplePath simplePath} can be used in complex
   * bindings to turn OData V4 annotations into texts or data bindings, e.g. `<sfi:SmartField value="{path
   * : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/>`.
   *
   * Helper functions like {@link #.resolvePath resolvePath} can be used by template instructions in XML template
   * views, e.g. `<template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath"
   * var="target">`.
   *
   * Since 1.31.0, you DO NOT need to {@link sap.ui.require} this module before use.
   */
  interface AnnotationHelper {
    /**
     * @SINCE 1.31.0
     *
     * Creates a property setting (which is either a constant value or a binding info object) from the given
     * parts and from the optional root formatter function. Each part can have one of the following types:
     * 	`boolean`, `number`, `undefined`: The part is a constant value.
     *
     * `string`: The part is a data binding expression with complex binding syntax (for example, as created
     * by {@link #.format format}) and is parsed accordingly to create either a constant value or a binding
     * info object. Proper backslash escaping must be used for constant values with curly braces.
     *
     * `object`: The part is a binding info object if it has a "path" or "parts" property, otherwise it
     * is a constant value.  If a binding info object is not the only part and has a "parts" property itself,
     * then it must have no other properties except "formatter"; this is the case for expression bindings and
     * data binding expressions created by {@link #.format format}.
     *
     * If all parts are constant values, the resulting property setting is also a constant value computed by
     * applying the root formatter function to the constant parts once. If at least one part is a binding info
     * object, the resulting property setting is also a binding info object and the root formatter function
     * will be applied again and again to the current values of all parts, no matter whether constant or variable.
     *
     * Note: The root formatter function should not rely on its `this` value because it depends on how the function
     * is called.
     *
     * Note: A single data binding expression can be given directly to {@link sap.ui.base.ManagedObject#applySettings
     * applySettings}, no need to call this function first.
     *
     * Example:
     * ```javascript
     *
     * function myRootFormatter(oValue1, oValue2, sFullName, sGreeting, iAnswer) {
     *     return ...;
     * }
     *
     * oSupplierContext = oMetaModel.getMetaContext("/ProductSet('HT-1021')/ToSupplier");
     * oValueContext = oMetaModel.createBindingContext("com.sap.vocabularies.UI.v1.DataPoint/Value", oSupplierContext);
     *
     * vPropertySetting =  sap.ui.model.odata.AnnotationHelper.createPropertySetting([
     *     sap.ui.model.odata.AnnotationHelper.format(oValueContext),
     *     "{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}",
     *     "{:= 'Mr. ' + ${/FirstName} + ' ' + ${/LastName}}",
     *     "hello, world!",
     *     42
     * ], myRootFormatter);
     *
     * oControl.applySettings({"someProperty" : vPropertySetting});
     * ```
     *
     *
     * @returns constant value or binding info object for a property as expected by {@link sap.ui.base.ManagedObject#applySettings
     * applySettings}
     */
    createPropertySetting(
      /**
       * array of parts
       */
      aParts: any[],
      /**
       * root formatter function; default: `Array.prototype.join(., " ")` in case of multiple parts, just like
       * {@link sap.ui.model.CompositeBinding#getExternalValue getExternalValue}
       */
      fnRootFormatter?: Function
    ): any | object;
    /**
     * A formatter function to be used in a complex binding inside an XML template view in order to interpret
     * OData V4 annotations. It knows about
     * 	 the "14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float",
     * "edm:Guid", "edm:Int", "edm:TimeOfDay".  the constant "14.4.11 Expression edm:String": This is turned
     * into a fixed text (e.g. `"Width"`) or into a data binding expression (e.g. ` "{/##/dataServices/schema/0/entityType/1/com.sap.vocabularies.UI.v1.FieldGroup#Dimensions/Data/0/Label/String}"
     * `). Data binding expressions are used in case XML template processing has been started with the setting
     * `bindTexts : true`. The purpose is to reference translatable texts from OData V4 annotations, especially
     * for XML template processing at design time. Since 1.31.0, string constants that contain a simple binding
     * `"{@i18n>...}"` to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed
     * text, but kept as a data binding expression; this allows local annotation files to refer to a resource
     * bundle for internationalization.  the dynamic "14.5.1 Comparison and Logical Operators": These are
     * turned into expression bindings to perform the operations at run-time.  the dynamic "14.5.3 Expression
     * edm:Apply":
     * 	 "14.5.3.1.1 Function odata.concat": This is turned into a data binding expression relative to an entity.
     *  "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an expression binding to fill the
     * template at run-time.  "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding
     * to encode the parameter at run-time.  Apply functions may be nested arbitrarily.   the dynamic
     * "14.5.6 Expression edm:If": This is turned into an expression binding to be evaluated at run-time. The
     * expression is a conditional expression like `"{=condition ? expression1 : expression2}"`.  the dynamic
     * "14.5.10 Expression edm:Null": This is turned into a `null` value. In `odata.concat` it is ignored.
     * the dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath": This is turned into
     * a data binding relative to an entity, including type information and constraints as available from metadata,
     * e.g. `"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'255'}}"`.
     * Depending on the used type, some additional constraints of this type are set:
     * 	Edm.DateTime: The "displayFormat" constraint is set to the value of the "sap:display-format" annotation
     * of the referenced property. Edm.Decimal: The "precision" and "scale" constraints are set to the values
     * of the corresponding attributes of the referenced property. The "minimum", "maximum", "minimumExclusive"
     * and "maximumExlusive" constraints are set to the values of the corresponding "Org.OData.Validation.V1"
     * annotation of the referenced property; note that in this case only constant expressions are supported
     * to determine the annotation value. Edm.String: The "maxLength" constraint is set to the value of
     * the corresponding attribute of the referenced property and the "isDigitSequence" constraint is set to
     * the value of the "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced property;
     * note that in this case only constant expressions are supported to determine the annotation value.
     *  Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. Proper
     * escaping is used to make sure that data binding syntax is not corrupted. An error describing the problem
     * is logged to the console in such a case.
     *
     * Example:
     * ```javascript
     *
     * <Text text="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}" />
     * ```
     *
     *
     * @returns the resulting string value to write into the processed XML
     */
    format(
      /**
       * the callback interface related to the current formatter call
       */
      oInterface: IContext | Context,
      /**
       * the raw value from the meta model, which is embedded within an entity set or entity type:
       * 	 - if this function is used as formatter the value is provided by the framework
       * 	 - if this function is called directly, provide the parameter only if it is already calculated
       * 	 - if the parameter is omitted, it is calculated automatically through `oInterface.getObject("")`
       */
      vRawValue?: any
    ): string;
    /**
     * A formatter function to be used in a complex binding inside an XML template view in order to interpret
     * OData V4 annotations. It knows about the following dynamic expressions:
     * 	 - "14.5.2 Expression edm:AnnotationPath"
     * 	 - "14.5.11 Expression edm:NavigationPropertyPath"
     * 	 - "14.5.12 Expression edm:Path"
     * 	 - "14.5.13 Expression edm:PropertyPath"  It returns a binding expression for a navigation path
     * 			in an OData model, starting at an entity. Currently supports navigation properties. Term casts and annotations
     * 			of navigation properties terminate the navigation path.
     *
     * Examples:
     * ```javascript
     *
     * <template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}">
     *     <form:SimpleForm binding="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}" />
     * </template:if>
     * ```
     *
     *
     * @returns the resulting string value to write into the processed XML, e.g. "{ToSupplier}" or "{}" (in
     * case no navigation is needed); returns "" in case the navigation path cannot be determined (this is treated
     * as falsy in `template:if` statements!)
     */
    getNavigationPath(
      /**
       * the callback interface related to the current formatter call
       */
      oInterface: IContext | Context,
      /**
       * the raw value from the meta model, e.g. `{AnnotationPath : "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}`
       * or ` {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}`; embedded within an entity
       * set or entity type;
       * 	 - if this function is used as formatter the value is provided by the framework
       * 	 - if this function is called directly, provide the parameter only if it is already calculated
       * 	 - if the parameter is omitted, it is calculated automatically through `oInterface.getObject("")`
       */
      vRawValue?: any
    ): string;
    /**
     * Helper function for a `template:with` instruction that depending on how it is called goes to the entity
     * set with the given name or to the one determined by the last navigation property. Supports the following
     * dynamic expressions:
     * 	 - "14.5.2 Expression edm:AnnotationPath"
     * 	 - "14.5.11 Expression edm:NavigationPropertyPath"
     * 	 - "14.5.12 Expression edm:Path"
     * 	 - "14.5.13 Expression edm:PropertyPath"
     *
     * Example:
     * ```javascript
     *
     *   <template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
     *   <template:with path="associationSetEnd>entitySet" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
     * ```
     *
     *
     * @returns the path to the entity set, or `undefined` if no such set is found. In this case, a warning
     * is logged to the console.
     */
    gotoEntitySet(
      /**
       * a context which must point to a simple string or to an annotation (or annotation property) of type `Edm.AnnotationPath`,
       * `Edm.NavigationPropertyPath`, `Edm.Path`, or `Edm.PropertyPath` embedded within an entity set or entity
       * type; the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
       */
      oContext: Context
    ): string | undefined;
    /**
     * Helper function for a `template:with` instruction that goes to the entity type with the qualified name
     * which `oContext` points at.
     *
     * Example: Assume that "entitySet" refers to an entity set within an OData meta model; the helper function
     * is then called on the "entityType" property of that entity set (which holds the qualified name of the
     * entity type) and in turn the path of that entity type is assigned to the variable "entityType".
     * ```javascript
     *
     *   <template:with path="entitySet>entityType" helper="sap.ui.model.odata.AnnotationHelper.gotoEntityType" var="entityType">
     * ```
     *
     *
     * @returns the path to the entity type with the given qualified name, or `undefined` if no such type is
     * found. In this case, a warning is logged to the console.
     */
    gotoEntityType(
      /**
       * a context which must point to the qualified name of an entity type; the context's model must be an {@link
       * sap.ui.model.odata.ODataMetaModel}
       */
      oContext: Context
    ): string | undefined;
    /**
     * @SINCE 1.29.1
     *
     * Helper function for a `template:with` instruction that goes to the function import with the name which
     * `oContext` points at.
     *
     * Example: Assume that "dataField" refers to a DataFieldForAction within an OData meta model; the helper
     * function is then called on the "Action" property of that data field (which holds an object with the qualified
     * name of the function import in the `String` property) and in turn the path of that function import is
     * assigned to the variable "function".
     * ```javascript
     *
     *   <template:with path="dataField>Action"
     *   helper="sap.ui.model.odata.AnnotationHelper.gotoFunctionImport" var="function">
     * ```
     *
     *
     * @returns the path to the function import with the given qualified name, or `undefined` if no function
     * import is found. In this case, a warning is logged to the console.
     */
    gotoFunctionImport(
      /**
       * a context which must point to an object with a `String` property, which holds the qualified name of the
       * function import; the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
       */
      oContext: Context
    ): string | undefined;
    /**
     * A formatter function to be used in a complex binding inside an XML template view in order to interpret
     * OData V4 annotations. It knows about the following dynamic expressions:
     * 	 - "14.5.2 Expression edm:AnnotationPath"
     * 	 - "14.5.11 Expression edm:NavigationPropertyPath"
     * 	 - "14.5.12 Expression edm:Path"
     * 	 - "14.5.13 Expression edm:PropertyPath"  It returns the information whether the navigation path
     * 			ends with an association end with multiplicity "*". It throws an error if the navigation path has an
     * 			association end with multiplicity "*" which is not the last one. Currently supports navigation properties.
     * 			Term casts and annotations of navigation properties terminate the navigation path.
     *
     * Examples:
     * ```javascript
     *
     * <template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'}">
     * ```
     *
     *
     * @returns `"true"` if the navigation path ends with an association end with multiplicity "*", `""` in
     * case the navigation path cannot be determined, `"false"` otherwise (the latter are both treated as falsy
     * in `template:if` statements!)
     */
    isMultiple(
      /**
       * the callback interface related to the current formatter call
       */
      oInterface: IContext | Context,
      /**
       * the raw value from the meta model, e.g. `{AnnotationPath : "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}`
       * or ` {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}`; embedded within an entity
       * set or entity type;
       * 	 - if this function is used as formatter the value is provided by the framework
       * 	 - if this function is called directly, provide the parameter only if it is already calculated
       * 	 - if the parameter is omitted, it is calculated automatically through `oInterface.getObject("")`
       */
      vRawValue?: any
    ): string;
    /**
     * Helper function for a `template:with` instruction that resolves a dynamic "14.5.2 Expression edm:AnnotationPath",
     * "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path" or "14.5.13 Expression
     * edm:PropertyPath". Currently supports navigation properties and term casts.
     *
     * Example:
     * ```javascript
     *
     *   <template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target">
     * ```
     *
     *
     * @returns the path to the target, or `undefined` in case the path cannot be resolved. In this case, a
     * warning is logged to the console.
     */
    resolvePath(
      /**
       * a context which must point to an annotation or annotation property of type `Edm.AnnotationPath`, `Edm.NavigationPropertyPath`,
       * `Edm.Path` or `Edm.PropertyPath`, embedded within an entity set or entity type; the context's model must
       * be an {@link sap.ui.model.odata.ODataMetaModel}
       */
      oContext: Context
    ): string | undefined;
    /**
     * Formatter function that is used in a complex binding inside an XML template view. The function is used
     * to interpret OData V4 annotations, supporting the same annotations as {@link #.format format} but with
     * a simplified output aimed at design-time templating with smart controls.
     *
     * In contrast to `format`, "14.5.12 Expression edm:Path" or "14.5.13 Expression edm:PropertyPath" is turned
     * into a simple binding path without type or constraint information. In certain cases, a complex binding
     * is required to allow for proper escaping of the path.
     *
     * Example:
     * ```javascript
     *
     *   <sfi:SmartField value="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/>
     * ```
     *
     *
     * @returns the resulting string value to write into the processed XML
     */
    simplePath(
      /**
       * the callback interface related to the current formatter call
       */
      oInterface: IContext | Context,
      /**
       * the raw value from the meta model, which is embedded within an entity set or entity type:
       * 	 - if this function is used as formatter the value is provided by the framework
       * 	 - if this function is called directly, provide the parameter only if it is already calculated
       * 	 - if the parameter is omitted, it is calculated automatically through `oInterface.getObject("")`
       */
      vRawValue?: any
    ): string;
  }
  const AnnotationHelper: AnnotationHelper;
  export default AnnotationHelper;
}

declare module "sap/ui/model/odata/CountMode" {
  /**
   * Different modes for retrieving the count of collections.
   * See:
   * 	sap.ui.model.ODataModel#bindList
   * 	sap.ui.model.ODataModel#constructor
   * 	sap.ui.model.v2.ODataModel#bindList
   * 	sap.ui.model.v2.ODataModel#constructor
   */
  enum CountMode {
    /**
     * @deprecated (since 1.43) - this shouldn't be used any longer, decide for one of the other modes.
     *
     * Count is retrieved by a separate request upfront and inline with each data request.
     *
     * The only purpose of this mode is to reflect the behavior of the {@link sap.ui.model.odata.ODataModel
     * ODataModel (v1)} before the introduction of the `CountMode`. For compatibility reasons, it is the default
     * for the `ODataModel` (v1) and shouldn't be used otherwise.
     */
    Both = "Both",
    /**
     * Count is retrieved by adding `$inlinecount=allpages` to data requests as long as no count has been determined
     * yet.
     */
    Inline = "Inline",
    /**
     * Count is retrieved by adding `$inlinecount=allpages` to every data request.
     */
    InlineRepeat = "InlineRepeat",
    /**
     * Count is not requested from the server.
     */
    None = "None",
    /**
     * Count is retrieved by sending a separate `$count` request before requesting data.
     *
     * It depends on the concrete model implementation whether and how the `$count` request and the data request
     * are synchronized.
     */
    Request = "Request",
  }
  export default CountMode;
}

declare module "sap/ui/model/odata/Filter" {
  import BaseObject from "sap/ui/base/Object";

  import Filter1 from "sap/ui/model/Filter";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.22) - Please use the {@link sap.ui.model.Filter} instead.
   *
   * Filter for the list binding
   */
  export default class Filter extends BaseObject {
    /**
     * Constructor for Filter
     */
    constructor(
      /**
       * the binding path for this filter
       */
      sPath: string,
      /**
       * Array of FilterOperators and their values: [{operator:"GE",value1:"val1"},{operator:"LE",value1:"val1"},{operator:"BT",value1:"val1",value2:"val2"}]
       */
      aValues: object[],
      /**
       * If true the values from aValues will be ANDed; otherwise ORed
       */
      bAND?: boolean
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.Filter with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Filter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.Filter.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Converts the `sap.ui.model.odata.Filter` into a `sap.ui.model.Filter`.
     *
     * @returns a `sap.ui.model.Filter` object
     */
    convert(): Filter1;
  }
}

declare module "sap/ui/model/odata/MessageScope" {
  /**
   * Different scopes for retrieving messages from a service consumed via a {@link sap.ui.model.odata.v2.ODataModel}.
   * See:
   * 	sap.ui.model.ODataModel#constructor
   */
  enum MessageScope {
    /**
     * Retrieve messages for the requested or changed entities and for all their child entities that belong
     * to the same business object. The service needs to set the OData V2 annotation "message-scope-supported"
     * at the `EntityContainer` to `true`. If the service does set this OData V2 annotation, the OData model
     * falls back to `sap.ui.model.odata.MessageScope.RequestedObjects`.
     */
    BusinessObject = "BusinessObject",
    /**
     * Retrieve messages only for the requested or changed entities.
     */
    RequestedObjects = "RequestedObjects",
  }
  export default MessageScope;
}

declare module "sap/ui/model/odata/ODataAnnotations" {
  import EventProvider from "sap/ui/base/EventProvider";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.66) - please use {@link sap.ui.model.odata.v2.ODataAnnotations} instead.
   *
   * Implementation to access OData Annotations
   */
  export default class ODataAnnotations extends EventProvider {
    constructor(
      /**
       * The annotation-URL or an array of URLs that should be parsed and merged
       */
      aAnnotationURI: string | string[],

      oMetadata: ODataMetadata,

      mParams: object
    );
    /**
     * returns the raw annotation data
     */
    getAnnotationsData: undefined;

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataAnnotations>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataAnnotations.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations
     * data which can be retrieved using the getAnnotations-method.
     *
     * @returns The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
     * least one failed to load. The argument is an object containing the annotations object, success (an array
     * of sucessfully loaded URLs), fail (an array ob of failed URLs).
     */
    addUrl(
      /**
       * Either one URL as string or an array of URL strings
       */
      vUrl: string | string[]
    ): Promise<any>;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataAnnotations`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataAnnotations`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataAnnotations`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataAnnotations`
       * itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataAnnotations`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:failed failed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request ,as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:loaded loaded} to attached listeners.
     *
     * @returns `this` to allow method chaining
     */
    fireLoaded(
      /**
       * Parameters that will be given as parameters to the event handler
       */
      oParameters?: object
    ): this;
    /**
     * Checks whether annotations loading of at least one of the given URLs has already failed. Note: For asynchronous
     * annotations {@link #attachFailed} has to be used.
     *
     * @returns whether annotations request has failed
     */
    isFailed(): boolean;
    /**
     * Checks whether annotations from at least one source are available
     *
     * @returns returns whether annotations is already loaded
     */
    isLoaded(): boolean;
    /**
     * Set custom headers which are provided in a key/value map. These headers are used for all requests. The
     * Accept-Language header cannot be modified and is set using the Core's language setting.
     *
     * To remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this
     * method again all previous custom headers are removed unless they are specified again in the mCustomHeaders
     * parameter.
     */
    setHeaders(
      /**
       * the header name/value map.
       */
      mHeaders: Record<string, string>
    ): void;
    /**
     * Sets an XML document.
     *
     * @returns Whether or not parsing was successful
     */
    setXML(
      /**
       * The XML document to parse for annotations
       */
      oXMLDocument: object,
      /**
       * The XML content as string to parse for annotations
       */
      sXMLContent: string,
      /**
       * Additional options
       */
      mOptions?: {
        /**
         * Success callback gets an objec as argument with the properties "annotations" containing the parsed annotations
         * and "xmlDoc" containing the XML-Document that was returned by the request.
         */
        success?: Function;
        /**
         * Error callback gets an objec as argument with the property "xmlDoc" containing the XML-Document that
         * was returned by the request and could not be correctly parsed.
         */
        error?: Function;
        /**
         * If this option is set to true, events are fired as if the annotations were loaded from a URL
         */
        fireEvents?: boolean;
      }
    ): boolean;
  }
}

declare module "sap/ui/model/odata/ODataContextBinding" {
  import ContextBinding from "sap/ui/model/ContextBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.66) - please use {@link sap.ui.model.odata.v2.ODataContextBinding} instead.
   *
   * The ContextBinding is a specific binding for a setting context for the model
   */
  export default class ODataContextBinding extends ContextBinding {
    /**
     * Constructor for odata.ODataContextBinding
     */
    constructor(
      oModel: Model,

      sPath: string,

      oContext: Context,

      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataContextBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataContextBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/odata/ODataListBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  import ODataModel from "sap/ui/model/odata/ODataModel";

  import Context from "sap/ui/model/Context";

  import CountMode from "sap/ui/model/odata/CountMode";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import Sorter from "sap/ui/model/Sorter";

  /**
   * @deprecated (since 1.66) - please use {@link sap.ui.model.odata.v2.ODataListBinding} instead.
   *
   * List binding implementation for OData format.
   */
  export default class ODataListBinding extends ListBinding {
    constructor(
      /**
       * Model that this list binding belongs to
       */
      oModel: ODataModel,
      /**
       * Path into the model data, relative to the given `oContext`
       */
      sPath: string,
      /**
       * Context that the `sPath` is based on
       */
      oContext: Context,
      /**
       * Initial sort order (can be either a sorter or an array of sorters)
       */
      aSorters?: any[],
      /**
       * Predefined filter/s (can be either a filter or an array of filters)
       */
      aFilters?: any[],
      /**
       * A map which contains additional parameters for the binding
       */
      mParameters?: {
        /**
         * Value for the OData `$expand` query parameter which should be included in the request
         */
        expand?: string;
        /**
         * Value for the OData `$select` query parameter which should be included in the request
         */
        select?: string;
        /**
         * An optional map of custom query parameters. Custom parameters must not start with `$`
         */
        custom?: Record<string, string>;
        /**
         * Defines the count mode of this binding; if not specified, the default count mode of the `oModel` is applied
         */
        countMode?: CountMode | keyof typeof CountMode;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataListBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Filters the list.
     *
     * When using `sap.ui.model.Filter` the filters are first grouped according to their binding path. All filters
     * belonging to a group are combined with OR and after that the results of all groups are combined with
     * AND. Usually this means, all filters applied to a single table column are combined with OR, while filters
     * on different table columns are combined with AND. Please note that a custom filter function is not supported.
     *
     * @returns Returns `this` to facilitate method chaining or the success state
     */
    filter(
      /**
       * Single filter object or an array of filter objects
       */
      aFilters: Filter | Filter[],
      /**
       * Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
       */
      sFilterType: FilterType | keyof typeof FilterType,
      /**
       * Whether to return `true` or `false`, instead of `this`, depending on whether the filtering has been done
       */
      bReturnSuccess?: boolean
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Return contexts for the list
     *
     * @returns The array of contexts for each row of the bound list
     */
    getContexts(
      /**
       * The start index of the requested contexts
       */
      iStartIndex?: int,
      /**
       * The requested amount of contexts
       */
      iLength?: int,
      /**
       * The maximum number of contexts to read before and after the given range; with this, controls can prefetch
       * data that is likely to be needed soon, e.g. when scrolling down in a table
       */
      iThreshold?: int
    ): Context[];
    /**
     * @SINCE 1.24
     *
     * Get a download URL with the specified format considering the sort/filter/custom parameters.
     *
     * @returns URL which can be used for downloading
     */
    getDownloadUrl(
      /**
       * Value for the $format Parameter
       */
      sFormat: string
    ): string;
    /**
     * Initialize binding. Fires a change if data is already available ($expand) or a refresh. If metadata is
     * not yet available, do nothing, method will be called again when metadata is loaded.
     */
    initialize(): void;
    /**
     * Refreshes the binding, checks whether the model data has been changed and fires a change event if this
     * is the case. For server side models this should refetch the data from the server. To update a control,
     * even if no data has been changed, e.g. to reset a control after failed validation, use the parameter
     * `bForceUpdate`.
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean,
      /**
       * A map of changed entities
       */
      mChangedEntities?: object,
      /**
       * A map of entity types
       */
      mEntityTypes?: object
    ): void;
    /**
     * Sorts the list.
     *
     * @returns Returns `this` to facilitate method chaining or the success state
     */
    sort(
      /**
       * The Sorter or an array of sorter objects which define the sort order
       */
      aSorters: Sorter | Sorter[],
      /**
       * Whether to return `true` or `false`, instead of `this`, depending on whether the sorting has been done
       */
      bReturnSuccess?: boolean
    ): this;
  }
}

declare module "sap/ui/model/odata/ODataMessageParser" {
  import MessageParser from "sap/ui/core/message/MessageParser";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the
   * back end.
   */
  export default class ODataMessageParser extends MessageParser {
    /**
     * OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the
     * back end.
     */
    constructor(
      /**
       * Base URI of the service used for the calculation of message targets
       */
      sServiceUrl: string,
      /**
       * The ODataMetadata object
       */
      oMetadata: ODataMetadata,
      /**
       * Whether technical messages should always be treated as persistent, since 1.83.0
       */
      bPersistTechnicalMessages: boolean
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataMessageParser>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataMessageParser.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the name of the header field that is used to parse the server messages
     *
     * @returns The name of the header field
     */
    getHeaderField(): string;
    /**
     * Parses the given response for messages, calculates the delta and fires the messageChange-event on the
     * MessageProcessor if messages are found. Messages of responses to GET requests with status codes 204 or
     * 424 are ignored.
     */
    parse(
      /**
       * The response from the server containing body and headers
       */
      oResponse: object,
      /**
       * The original request that lead to this response
       */
      oRequest: object,
      /**
       * A map with the keys of the entities requested from the back-end mapped to true
       */
      mGetEntities?: object,
      /**
       * A map with the keys of the entities changed in the back-end mapped to true
       */
      mChangeEntities?: object,
      /**
       * Whether the used OData service supports the message scope {@link sap.ui.model.odata.MessageScope.BusinessObject}
       */
      bMessageScopeSupported?: boolean
    ): void;
    /**
     * Sets the header field name that should be used for parsing the JSON messages
     *
     * @returns Instance reference for method chaining
     */
    setHeaderField(
      /**
       * The name of the header field that should be used as source of the message object
       */
      sFieldName: string
    ): this;
  }
}

declare module "sap/ui/model/odata/ODataMetadata" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Implementation to access OData metadata
   */
  export default class ODataMetadata extends EventProvider {
    /**
     * Constructor for a new ODataMetadata.
     */
    constructor(
      /**
       * needs the correct metadata uri including $metadata
       */
      sMetadataURI: string,
      /**
       * optional map of parameters.
       */
      mParams?: {
        /**
         * request is per default async
         */
        async?: boolean;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. UserID for the service.
         */
        user?: string;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. Password for the
         * service.
         */
        password?: string;
        /**
         * (optional) map of custom headers which should be set with the request.
         */
        headers?: object;
        /**
         * (optional) A valid cache key
         */
        cacheKey?: string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataMetadata>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataMetadata.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.ODataMetadata` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataMetadata` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.ODataMetadata` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataMetadata` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.ODataMetadata` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataMetadata` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.ODataMetadata` itself.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataMetadata` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:failed failed} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loaded loaded} event of this `sap.ui.model.odata.ODataMetadata`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:failed failed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request, as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:loaded loaded} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireLoaded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: object
    ): this;
    /**
     * Return the metadata object.
     *
     * @returns Metadata object
     */
    getServiceMetadata(): Object;
    /**
     * Get the use-batch extension value if any
     *
     * @returns true/false
     */
    getUseBatch(): boolean;
    /**
     * Checks whether metadata loading has already failed.
     *
     * @returns Whether metadata request has failed
     */
    isFailed(): boolean;
    /**
     * Checks whether metadata is available.
     *
     * @returns Whether metadata is already loaded
     */
    isLoaded(): boolean;
    /**
     * Returns a promise for the loaded state of the metadata.
     *
     * @returns A promise on metadata loaded state
     */
    loaded(
      /**
       * With `bRejectOnFailure=false` the returned promise is not rejected. In case of failure this promise stays
       * pending. Since 1.79 with `bRejectOnFailure=true` the returned promise is rejected when the initial loading
       * of the metadata fails.
       */
      bRejectOnFailure?: boolean
    ): Promise<any>;
    /**
     * Refreshes the metadata creating a new request to the server.
     *
     * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
     *
     * @returns A promise on metadata loaded state
     */
    refresh(): Promise<any>;
  }
}

declare module "sap/ui/model/odata/ODataMetaModel" {
  import MetaModel from "sap/ui/model/MetaModel";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import ODataAnnotations from "sap/ui/model/odata/ODataAnnotations";

  import ODataModel from "sap/ui/model/odata/v2/ODataModel";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.0
   *
   * Implementation of an OData meta model which offers a unified access to both OData V2 metadata and V4
   * annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges
   * V4 annotations from the existing {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding
   * model element.
   *
   * This model is not prepared to be inherited from.
   *
   * Also, annotations from the "http://www.sap.com/Protocols/SAPData" namespace are lifted up from the `extensions`
   * array and transformed from objects into simple properties with an "sap:" prefix for their name. Note
   * that this happens in addition, thus the following example shows both representations. This way, such
   * annotations can be addressed via a simple relative path instead of searching an array.
   * ```javascript
   *
   * 		{
   * 			"name" : "BusinessPartnerID",
   * 			"extensions" : [{
   * 				"name" : "label",
   * 				"value" : "Bus. Part. ID",
   * 				"namespace" : "http://www.sap.com/Protocols/SAPData"
   * 			}],
   * 			"sap:label" : "Bus. Part. ID"
   * 		}
   * ```
   *
   *
   * As of 1.29.0, the corresponding vocabulary-based annotations for the following "SAP
   * Annotations for OData Version 2.0" are added, if they are not yet defined in the V4 annotations:
   *
   * 	 - `label`;
   * 	 - `schema-version` (since 1.53.0) on schemas;
   * 	 - `creatable`, `deletable`, `deletable-path`, `pageable`, `requires-filter`, `searchable`, `topable`,
   * 			`updatable` and `updatable-path` on entity sets;
   * 	 - `creatable` (since 1.41.0), `creatable-path` (since 1.41.0) and `filterable` (since 1.39.0) on navigation
   * 			properties;
   * 	 - `aggregation-role` ("dimension" and "measure", both since 1.45.0), `creatable`, `display-format`
   * 			("UpperCase" and "NonNegative"), `field-control`, `filterable`, `filter-restriction`, `heading`, `precision`,
   * 			`quickinfo`, `required-in-filter`, `sortable`, `text`, `unit`, `updatable` and `visible` on properties;
   *
   * 	 - `semantics`; the following values are supported:
   * 	"bday", "city", "country", "email" (including support for types, for example "email;type=home,pref"),
   * "familyname", "givenname", "honorific", "middlename", "name", "nickname", "note", "org", "org-unit",
   * "org-role", "photo", "pobox", "region", "street", "suffix", "tel" (including support for types, for example
   * "tel;type=cell,pref"), "title" and "zip" (mapped to V4 annotation `com.sap.vocabularies.Communication.v1.Contact`);
   *
   * 	 - "class", "dtend", "dtstart", "duration", "fbtype", "location", "status", "transp" and "wholeday"
   * 			(mapped to V4 annotation `com.sap.vocabularies.Communication.v1.Event`);
   * 	 - "body", "from", "received", "sender" and "subject" (mapped to V4 annotation `com.sap.vocabularies.Communication.v1.Message`);
   *
   * 	 - "completed", "due", "percent-complete" and "priority" (mapped to V4 annotation `com.sap.vocabularies.Communication.v1.Task`);
   *
   * 	 - "fiscalyear", "fiscalyearperiod" (mapped to the corresponding V4 annotation `com.sap.vocabularies.Common.v1.IsFiscal(Year|YearPeriod)`);
   *
   * 	 - "year", "yearmonth", "yearmonthday", "yearquarter", "yearweek" (mapped to the corresponding V4 annotation
   * 			`com.sap.vocabularies.Common.v1.IsCalendar(Year|YearMonth|Date|YearQuarter|YearWeek)`);
   * 	 - "url" (mapped to V4 annotation `Org.OData.Core.V1.IsURL"`).   For example:
   * ```javascript
   *
   * 		{
   * 			"name" : "BusinessPartnerID",
   * 			...
   * 			"sap:label" : "Bus. Part. ID",
   * 			"com.sap.vocabularies.Common.v1.Label" : {
   * 				"String" : "Bus. Part. ID"
   * 			}
   * 		}
   * ```
   *  **Note:** Annotation terms are not merged, but replaced as a whole ("PUT" semantics). That means, if
   * you have, for example, an OData V2 annotation `sap:sortable=false` at a property `PropA`, the corresponding
   * OData V4 annotation is added to each entity set to which this property belongs:
   * ```javascript
   *
   * 		"Org.OData.Capabilities.V1.SortRestrictions": {
   * 			"NonSortableProperties" : [
   * 				{"PropertyPath" : "BusinessPartnerID"}
   * 			]
   * 		}
   * ```
   *  If the same term `"Org.OData.Capabilities.V1.SortRestrictions"` targeting one of these entity sets is
   * also contained in an annotation file, the complete OData V4 annotation converted from the OData V2 annotation
   * is replaced by the one contained in the annotation file for the specified target. Converted annotations
   * never use a qualifier and are only overwritten by the same annotation term without a qualifier.
   *
   * This model is read-only and thus only supports {@link sap.ui.model.BindingMode.OneTime OneTime} binding
   * mode. No events ({@link sap.ui.model.Model#event:parseError parseError}, {@link sap.ui.model.Model#event:requestCompleted
   * requestCompleted}, {@link sap.ui.model.Model#event:requestFailed requestFailed}, {@link sap.ui.model.Model#event:requestSent
   * requestSent}) are fired!
   *
   * Within the meta model, the objects are arranged in arrays. `/dataServices/schema`, for example, is an
   * array of schemas where each schema has an `entityType` property with an array of entity types, and so
   * on. So, `/dataServices/schema/0/entityType/16` can be the path to the entity type with name "Order" in
   * the schema with namespace "MySchema". However, these paths are not stable: If an entity type with lower
   * index is removed from the schema, the path to `Order` changes to `/dataServices/schema/0/entityType/15`.
   *
   * To avoid problems with changing indexes, {@link sap.ui.model.Model#getObject getObject} and {@link sap.ui.model.Model#getProperty
   * getProperty} support XPath-like queries for the indexes (since 1.29.1). Each index can be replaced by
   * a query in square brackets. You can, for example, address the schema using the path `/dataServices/schema/[${namespace}==='MySchema']`
   * or the entity using `/dataServices/schema/[${namespace}==='MySchema']/entityType/[${name}==='Order']`.
   *
   * The syntax inside the square brackets is the same as in expression binding. The query is executed for
   * each object in the array until the result is true (truthy) for the first time. This object is then chosen.
   *
   * **BEWARE:** Access to this OData meta model will fail before the promise returned by {@link #loaded loaded}
   * has been resolved!
   */
  export default class ODataMetaModel extends MetaModel {
    /**
     * DO NOT CALL this private constructor for a new `ODataMetaModel`, but rather use {@link sap.ui.model.odata.v2.ODataModel#getMetaModel
     * getMetaModel} instead!
     */
    constructor(
      /**
       * the OData model's metadata object
       */
      oMetadata: ODataMetadata,
      /**
       * the OData model's annotations object
       */
      oAnnotations: ODataAnnotations,
      /**
       * the data model instance
       */
      oDataModel: ODataModel
    );
    /**
     * DO NOT CALL this private constructor for a new `ODataMetaModel`, but rather use {@link sap.ui.model.odata.v2.ODataModel#getMetaModel
     * getMetaModel} instead!
     */
    constructor(
      /**
       * the OData model's metadata object
       */
      oMetadata: ODataMetadata,
      /**
       * the data model instance
       */
      oDataModel: ODataModel
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataMetaModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataMetaModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataMetaModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the OData meta model context corresponding to the given OData model path.
     *
     * @returns the context for the corresponding metadata object, i.e. an entity type or its property, or `null`
     * in case no path is given
     */
    getMetaContext(
      /**
       * an absolute path pointing to an entity or property, e.g. "/ProductSet(1)/ToSupplier/BusinessPartnerID";
       * this equals the
       * resource path component of a URI according to OData V2 URI conventions
       */
      sPath?: string
    ): Context | null;
    /**
     * Returns the OData association end corresponding to the given entity type's navigation property of given
     * name.
     *
     * @returns the OData association end or `null` if no such association end is found
     */
    getODataAssociationEnd(
      /**
       * an entity type as returned by {@link #getODataEntityType getODataEntityType}
       */
      oEntityType: object,
      /**
       * the name of a navigation property within this entity type
       */
      sName: string
    ): object | null;
    /**
     * Returns the OData association ***set*** end corresponding to the given entity type's navigation property
     * of given name.
     *
     * @returns the OData association set end or `null` if no such association set end is found
     */
    getODataAssociationSetEnd(
      /**
       * an entity type as returned by {@link #getODataEntityType getODataEntityType}
       */
      oEntityType: object,
      /**
       * the name of a navigation property within this entity type
       */
      sName: string
    ): object | null;
    /**
     * Returns the OData complex type with the given qualified name, either as a path or as an object, as indicated.
     *
     * @returns (the path to) the complex type with the given qualified name; `undefined` (for a path) or `null`
     * (for an object) if no such type is found
     */
    getODataComplexType(
      /**
       * a qualified name, e.g. "ACME.Address"
       */
      sQualifiedName: string,
      /**
       * determines whether the complex type is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * Returns the OData default entity container. If there is only a single schema with a single entity container,
     * the entity container does not need to be marked as default explicitly.
     *
     * @returns (the path to) the default entity container; `undefined` (for a path) or `null` (for an object)
     * if no such container is found
     */
    getODataEntityContainer(
      /**
       * determines whether the entity container is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * Returns the OData entity set with the given simple name from the default entity container.
     *
     * @returns (the path to) the entity set with the given simple name; `undefined` (for a path) or `null`
     * (for an object) if no such set is found
     */
    getODataEntitySet(
      /**
       * a simple name, e.g. "ProductSet"
       */
      sName: string,
      /**
       * determines whether the entity set is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * Returns the OData entity type with the given qualified name, either as a path or as an object, as indicated.
     *
     * @returns (the path to) the entity type with the given qualified name; `undefined` (for a path) or `null`
     * (for an object) if no such type is found
     */
    getODataEntityType(
      /**
       * a qualified name, e.g. "ACME.Product"
       */
      sQualifiedName: string,
      /**
       * determines whether the entity type is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * @SINCE 1.29.0
     *
     * Returns the OData function import with the given simple or qualified name from the default entity container
     * or the respective entity container specified in the qualified name.
     *
     * @returns (the path to) the function import with the given simple name; `undefined` (for a path) or `null`
     * (for an object) if no such function import is found
     */
    getODataFunctionImport(
      /**
       * a simple or qualified name, e.g. "Save" or "MyService.Entities/Save"
       */
      sName: string,
      /**
       * determines whether the function import is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * Returns the given OData type's property (not navigation property!) of given name.
     *
     * If an array is given instead of a single name, it is consumed (via `Array.prototype.shift`) piece by
     * piece. Each element is interpreted as a property name of the current type, and the current type is replaced
     * by that property's type. This is repeated until an element is encountered which cannot be resolved as
     * a property name of the current type anymore; in this case, the last property found is returned and `vName`
     * contains only the remaining names, with `vName[0]` being the one which was not found.
     *
     * Examples:
     * 	 Get address property of business partner:
     * ```javascript
     *
     * var oEntityType = oMetaModel.getODataEntityType("GWSAMPLE_BASIC.BusinessPartner"),
     *     oAddressProperty = oMetaModel.getODataProperty(oEntityType, "Address");
     * oAddressProperty.name === "Address";
     * oAddressProperty.type === "GWSAMPLE_BASIC.CT_Address";
     * ```
     *    Get street property of address type:
     * ```javascript
     *
     * var oComplexType = oMetaModel.getODataComplexType("GWSAMPLE_BASIC.CT_Address"),
     *     oStreetProperty = oMetaModel.getODataProperty(oComplexType, "Street");
     * oStreetProperty.name === "Street";
     * oStreetProperty.type === "Edm.String";
     * ```
     *    Get address' street property directly from business partner:
     * ```javascript
     *
     * var aParts = ["Address", "Street"];
     * oMetaModel.getODataProperty(oEntityType, aParts) === oStreetProperty;
     * aParts.length === 0;
     * ```
     *    Trying to get address' foo property directly from business partner:
     * ```javascript
     *
     * aParts = ["Address", "foo"];
     * oMetaModel.getODataProperty(oEntityType, aParts) === oAddressProperty;
     * aParts.length === 1;
     * aParts[0] === "foo";
     * ```
     *
     *
     * @returns (the path to) the last OData property found; `undefined` (for a path) or `null` (for an object)
     * if no property was found at all
     */
    getODataProperty(
      /**
       * a complex type as returned by {@link #getODataComplexType getODataComplexType}, or an entity type as
       * returned by {@link #getODataEntityType getODataEntityType}
       */
      oType: object,
      /**
       * the name of a property within this type (e.g. "Address"), or an array of such names (e.g. `["Address",
       * "Street"]`) in order to drill-down into complex types; **BEWARE** that this array is modified by removing
       * each part which is understood!
       */
      vName: string | string[],
      /**
       * determines whether the property is returned as a path or as an object
       */
      bAsPath?: boolean
    ): object | string | undefined | null;
    /**
     * @SINCE 1.29.1
     *
     * Returns a `Promise` which is resolved with a map representing the `com.sap.vocabularies.Common.v1.ValueList`
     * annotations of the given property or rejected with an error. The key in the map provided on successful
     * resolution is the qualifier of the annotation or the empty string if no qualifier is defined. The value
     * in the map is the JSON object for the annotation. The map is empty if the property has no `com.sap.vocabularies.Common.v1.ValueList`
     * annotations.
     *
     * @returns a Promise that gets resolved as soon as the value lists as well as the required model elements
     * have been loaded
     */
    getODataValueLists(
      /**
       * a model context for a structural property of an entity type or a complex type, as returned by {@link
       * #getMetaContext getMetaContext}
       */
      oPropertyContext: Context
    ): Promise<any>;
    /**
     * Returns a promise which is fulfilled once the meta model data is loaded and can be used.
     *
     * @returns a Promise
     */
    loaded(): Promise<any>;
    /**
     * Refresh not supported by OData meta model!
     */
    refresh(): void;
    /**
     * @SINCE 1.88.0
     *
     * Requests the currency customizing based on the code list reference given in the entity container's `com.sap.vocabularies.CodeList.v1.CurrencyCodes`
     * annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v2.ODataModel#getHeaders}
     * from this meta model's data model.
     * See:
     * 	{@link #requestUnitsOfMeasure}
     *
     * @returns A promise resolving with the currency customizing, which is a map from the currency key to an
     * object with the following properties:
     * 	`StandardCode`: The language-independent standard code (e.g. ISO) for the currency as referred to via
     * the `com.sap.vocabularies.CodeList.v1.StandardCode` annotation on the currency's key, if present `Text`:
     * The language-dependent text for the currency as referred to via the `com.sap.vocabularies.Common.v1.Text`
     * annotation on the currency's key `UnitSpecificScale`: The decimals for the currency as referred to
     * via the `com.sap.vocabularies.Common.v1.UnitSpecificScale` annotation on the currency's key; entries
     * where this would be `null` are ignored, and an error is logged  It resolves with `null` if no `com.sap.vocabularies.CodeList.v1.CurrencyCodes`
     * annotation is found. It is rejected if the code list URL is not "./$metadata", there is not exactly one
     * code key, or if the customizing cannot be loaded.
     */
    requestCurrencyCodes(): Promise<any>;
    /**
     * @SINCE 1.88.0
     *
     * Requests the unit customizing based on the code list reference given in the entity container's `com.sap.vocabularies.CodeList.v1.UnitOfMeasure`
     * annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v2.ODataModel#getHeaders}
     * from this meta model's data model.
     * See:
     * 	{@link #requestCurrencyCodes}
     *
     * @returns A promise resolving with the unit customizing, which is a map from the unit key to an object
     * with the following properties:
     * 	`StandardCode`: The language-independent standard code (e.g. ISO) for the unit as referred to via the
     * `com.sap.vocabularies.CodeList.v1.StandardCode` annotation on the unit's key, if present `Text`:
     * The language-dependent text for the unit as referred to via the `com.sap.vocabularies.Common.v1.Text`
     * annotation on the unit's key `UnitSpecificScale`: The decimals for the unit as referred to via the
     * `com.sap.vocabularies.Common.v1.UnitSpecificScale` annotation on the unit's key; entries where this would
     * be `null` are ignored, and an error is logged  It resolves with `null` if no `com.sap.vocabularies.CodeList.v1.UnitOfMeasure`
     * annotation is found. It is rejected if the code list URL is not "./$metadata", there is not exactly one
     * code key, or if the customizing cannot be loaded.
     */
    requestUnitsOfMeasure(): Promise<any>;
    /**
     * Legacy syntax not supported by OData meta model!
     */
    setLegacySyntax(
      /**
       * must not be true!
       */
      bLegacySyntax: boolean
    ): void;
  }
}

declare module "sap/ui/model/odata/ODataModel" {
  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import CountMode from "sap/ui/model/odata/CountMode";

  import ListBinding from "sap/ui/model/ListBinding";

  import ODataAnnotations from "sap/ui/model/odata/ODataAnnotations";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import Metadata from "sap/ui/base/Metadata";

  import ODataMetaModel from "sap/ui/model/odata/ODataMetaModel";

  /**
   * @deprecated (since 1.48) - please use {@link sap.ui.model.odata.v2.ODataModel} instead.
   *
   * Model implementation for OData format
   */
  export default class ODataModel extends Model {
    /**
     * Constructor for a new ODataModel.
     */
    constructor(
      /**
       * base uri of the service to request data from; additional URL parameters appended here will be appended
       * to every request can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl
       * is required!
       */
      sServiceUrl?: string,
      /**
       * (optional) a map which contains the following parameter properties:
       */
      mParameters?: {
        /**
         * if set true request payloads will be JSON, XML for false (default = false),
         */
        json?: boolean;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. UserID for the service.
         */
        user?: string;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. Password for the
         * service.
         */
        password?: string;
        /**
         * a map of custom headers like {"myHeader":"myHeaderValue",...},
         */
        headers?: Record<string, string>;
        /**
         * enable/disable XCSRF-Token handling (default = true),
         */
        tokenHandling?: boolean;
        /**
         * experimental - true when user credentials are to be included in a cross-origin request. Please note that
         * this works only if all requests are asynchronous.
         */
        withCredentials?: boolean;
        /**
         * (optional) determined if the service metadata request is sent synchronous or asynchronous. Default is
         * false.
         */
        loadMetadataAsync?: object;
        /**
         * (default = '2.0') please use the following string format e.g. '2.0' or '3.0'. OData version supported
         * by the ODataModel: '2.0',
         */
        maxDataServiceVersion?: undefined;
        /**
         * when true all requests will be sent in batch requests (default = false),
         */
        useBatch?: boolean;
        /**
         * enable/disable automatic refresh after change operations: default = true,
         */
        refreshAfterChange?: boolean;
        /**
         * The URL (or an array of URLs) from which the annotation metadata should be loaded,
         */
        annotationURI?: string | string[];
        /**
         * Whether or not to fire the metadataLoaded-event only after annotations have been loaded as well,
         */
        loadAnnotationsJoined?: boolean;
        /**
         * map of URL parameters - these parameters will be attached to all requests,
         */
        serviceUrlParams?: Record<string, string>;
        /**
         * map of URL parameters for metadata requests - only attached to $metadata request.
         */
        metadataUrlParams?: Record<string, string>;
        /**
         * sets the default count mode for the model. If not set, sap.ui.model.odata.CountMode.Both is used.
         */
        defaultCountMode?: string;
        /**
         * a map of namespaces (name => URI) used for parsing the service metadata.
         */
        metadataNamespaces?: Record<string, string>;
        /**
         * Whether to skip the automated loading of annotations from the metadata document. Loading annotations
         * from metadata does not have any effects (except the lost performance by invoking the parser) if there
         * are not annotations inside the metadata document
         */
        skipMetadataAnnotationParsing?: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataModel with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations
     * object which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed
     * the data will also be merged into the metadata object, which can be reached by calling the getServiceMetadata()
     * method.
     *
     * @returns The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
     * least one fails to load. If this promise resolves it returns the following parameters: annotations: The
     * annotation object entitySets: An array of EntitySet objects containing the newly merged EntitySets from
     * a $metadata requests. the structure is the same as in the metadata object reached by the getServiceMetadata()
     * method. For non $metadata requests the array will be empty.
     */
    addAnnotationUrl(
      /**
       * Either one URL as string or an array or URL strings
       */
      vUrl: string | string[]
    ): Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object
     * which can be retrieved by calling the getServiceAnnotations()-method.
     *
     * @returns The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors
     * occur
     */
    addAnnotationXML(
      /**
       * The string that should be parsed as annotation XML
       */
      sXMLContent: string,
      /**
       * Whether not to fire annotationsLoaded event on the annotationParser
       */
      bSuppressEvents?: boolean
    ): Promise<any>;
    /**
     * Appends the change batch operations to the end of the batch stack. Only `PUTPOST` or `DELETE`
     * batch operations should be included in the specified array. The operations in the array will be included
     * in a single changeset. To embed change operations in different change sets call this method with the
     * corresponding change operations again. If an illegal batch operation is added to the change set nothing
     * will be performed and false will be returned.
     *
     * @returns `false`, if an illegal batch operation is added
     */
    addBatchChangeOperations(
      /**
       * An array of change batch operations created via `createBatchOperation` with parameter `sMethod = "POST"/"PUT"/"MERGE"/"DELETE"`
       */
      aChangeOperations: any[]
    ): false | undefined;
    /**
     * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be
     * included in the specified array. If an illegal batch operation is added to the batch nothing will be
     * performed and false will be returned.
     *
     * @returns `false`, if an illegal batch operation is added
     */
    addBatchReadOperations(
      /**
       * An array of read batch operations created via `createBatchOperation` with `sMethod = "GET"`
       */
      aReadOperations: any[]
    ): false | undefined;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:annotationsFailed annotationsFailed} event of
     * this `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:annotationsFailed annotationsFailed} event of
     * this `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:annotationsLoaded annotationsLoaded} event of
     * this `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:annotationsLoaded annotationsLoaded} event of
     * this `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataLoaded metadataLoaded} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataLoaded metadataLoaded} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Creates a new list binding for this model.
     * See:
     * 	sap.ui.model.Model.prototype.bindList
     *
     * @returns A new list binding object
     */
    bindList(
      /**
       * Binding path, either absolute or relative to a given `oContext`
       */
      sPath: string,
      /**
       * Binding context referring to this model
       */
      oContext?: Context,
      /**
       * Initial sort order, can be either a sorter or an array of sorters
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filter/s, can be either a filter or an array of filters
       */
      aFilters?: Filter | Filter[],
      /**
       * Map which contains additional parameters for the binding
       */
      mParameters?: {
        /**
         * Value for the OData `$expand` query parameter which should be included in the request
         */
        expand?: string;
        /**
         * Value for the OData `$select` query parameter which should be included in the request
         */
        select?: string;
        /**
         * Optional map of custom query parameters (name/value pairs); names of custom parameters must not start
         * with `$`
         */
        custom?: Record<string, string>;
        /**
         * Defines the count mode of the new binding; if not specified, the default count mode of this model will
         * be applied
         */
        countMode?: CountMode | keyof typeof CountMode;
      }
    ): ListBinding;
    /**
     * Trigger a request to the function import odata service that was specified in the model constructor.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    callFunction(
      /**
       * A string containing the name of the function to call. The name is concatenated to the sServiceUrl which
       * was specified in the model constructor.
       */
      sFunctionName: string,
      /**
       * Optional parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * A string containing the type of method to call this function with
         */
        method?: string;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * If specified the sPath has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * a callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: `oData` and `response`.
         */
        success?: Function;
        /**
         * a callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * Whether or not to send the request asynchronously. Default: false In case sMethod is "GET", the request
         * is always asynchronous. Please be advised that this feature is officially unsupported as using asynchronous
         * requests can lead to data inconsistencies if the application does not make sure that the request was
         * completed before continuing to work with the data.
         */
        async?: boolean;
      }
    ): object;
    /**
     * Removes all operations in the current batch.
     */
    clearBatch(): void;
    /**
     * Trigger a POST request to the odata service that was specified in the model constructor. Please note
     * that deep creates are not supported and may not work.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    create(
      /**
       * A string containing the path to the collection where an entry should be created. The path is concatenated
       * to the sServiceUrl which was specified in the model constructor.
       */
      sPath: string,
      /**
       * data of the entry that should be created.
       */
      oData: object,
      /**
       * Optional parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * If specified the sPath has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * a callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: oData and response.
         */
        success?: Function;
        /**
         * a callback function which is called when the request failed. The handler can have the parameter `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * Whether the request should be done asynchronously. Default: false Please be advised that this feature
         * is officially unsupported as using asynchronous requests can lead to data inconsistencies if the application
         * does not make sure that the request was completed before continuing to work with the data.
         */
        async?: boolean;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
      }
    ): object;
    /**
     * Creates a single batch operation (read or change operation) which can be used in a batch request.
     *
     * @returns The created batch operation
     */
    createBatchOperation(
      /**
       * A string containing the path to the collection or entry where the batch operation should be performed;
       * the path is concatenated to the `sServiceUrl` which was specified in the model constructor
       */
      sPath: string,
      /**
       * For the batch operation; possible values are `GET`, `PUT`, `MERGE`, `POST` or `DELETE`
       */
      sMethod: string,
      /**
       * Optional data payload which should be created, updated, deleted in a change batch operation
       */
      oData?: object,
      /**
       * Optional parameter for additional information introduced in SAPUI5 1.9.1
       */
      oParameters?: {
        /**
         * An ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header
         * in the request to the server for this entry.
         */
        sETag?: string;
      }
    ): object;
    /**
     * Creates a new entry object which is described by the metadata of the entity type of the specified sPath
     * Name. A context object is returned which can be used to bind against the newly created object.
     *
     * For each created entry a request is created and stored in a request queue. The request queue can be submitted
     * by calling submitChanges. To delete a created entry from the request queue call deleteCreateEntry.
     *
     * The optional vProperties parameter can be used as follows:
     *
     * - vProperties could be an array containing the property names which should be included in the new entry.
     * 			Other properties defined in the entity type are not included. - vProperties could be an object which
     * 			includes the desired properties and the values which should be used for the created entry.
     *
     * If vProperties is not specified, all properties in the entity type will be included in the created entry.
     *
     * If there are no values specified the properties will have undefined values.
     *
     * Please note that deep creates (including data defined by navigationproperties) are not supported
     *
     * @returns oContext A Context object that point to the new created entry.
     */
    createEntry(
      /**
       * Name of the path to the collection
       */
      sPath: string,
      /**
       * An array that specifies a set of properties or the entry
       */
      vProperties: any[] | object
    ): Context;
    /**
     * Creates the key from the given collection name and property map.
     *
     * @returns The created key
     */
    createKey(
      /**
       * The name of the collection
       */
      sCollection: string,
      /**
       * The object containing at least all the key properties of the entity type
       */
      oKeyProperties: object,
      /**
       * Whether the URI decoding should be applied on the key
       */
      bDecode: boolean
    ): string;
    /**
     * Deletes a created entry from the request queue and the model.
     */
    deleteCreatedEntry(
      /**
       * The context object pointing to the created entry
       */
      oContext: Context
    ): void;
    /**
     * See:
     * 	sap.ui.model.Model.prototype.destroy
     */
    destroy(): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:annotationsFailed annotationsFailed} event
     * of this `sap.ui.model.odata.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAnnotationsFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:annotationsLoaded annotationsLoaded} event
     * of this `sap.ui.model.odata.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAnnotationsLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMetadataFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:metadataLoaded metadataLoaded} event of this
     * `sap.ui.model.odata.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMetadataLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:annotationsFailed annotationsFailed} to attached listeners.
     *
     * @returns `this` to allow method chaining
     */
    fireAnnotationsFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request ,as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:annotationsLoaded annotationsLoaded} to attached listeners.
     *
     * @returns `this` to allow method chaining
     */
    fireAnnotationsLoaded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * the annotations object.
         */
        annotations?: ODataAnnotations;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMetadataFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request ,as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:metadataLoaded metadataLoaded} to attached listeners.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireMetadataLoaded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The metadata object.
         */
        metadata?: ODataMetadata;
      }
    ): this;
    /**
     * @deprecated (since 1.13) - the caching should be controlled by the backend by setting the correct cache
     * control header
     *
     * Force no caching
     */
    forceNoCache(
      /**
       * whether to force no caching
       */
      bForceNoCache?: boolean
    ): void;
    /**
     * @deprecated (since 1.6.0) - please use {@link #getProperty} instead
     *
     * Return requested data as object if the data has already been loaded and stored in the model.
     *
     * @returns oData Object containing the requested data if the path is valid.
     */
    getData(
      /**
       * A string containing the path to the data object that should be returned
       */
      sPath: string,
      /**
       * The optional context which is used with the sPath to retrieve the requested data
       */
      oContext?: object,
      /**
       * This parameter should be set when a URI or custom parameter with a `$expand` System Query Option was
       * used to retrieve associated entries embedded/inline; if true then the `getProperty` function returns
       * a desired property value/entry and includes the associated expand entries (if any); if false the associated/expanded
       * entry properties are removed and not included in the desired entry as properties at all; this is useful
       * for performing updates on the base entry only; note: A copy and not a reference of the entry will be
       * returned.
       */
      bIncludeExpandEntries?: boolean
    ): object;
    /**
     * @SINCE 1.20
     *
     * Returns the default count mode for retrieving the count of collections.
     *
     * @returns The default count mode for retrieving the count of collections
     */
    getDefaultCountMode(): CountMode | keyof typeof CountMode;
    /**
     * Returns all headers and custom headers which are stored in the OData model.
     *
     * @returns the header map
     */
    getHeaders(): object;
    /**
     * Returns the key part from the entry URI or the given context or object.
     *
     * @returns The key part from the entry URI
     */
    getKey(
      /**
       * The context or object
       */
      oObject: object | Context,
      /**
       * Whether the URI decoding should be applied on the key
       */
      bDecode: boolean
    ): string;
    /**
     * Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and
     * V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges
     * V4 annotations from the existing {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding
     * model element.
     *
     * **BEWARE:** Access to this OData meta model will fail before the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded
     * loaded} has been resolved!
     *
     * @returns The meta model for this ODataModel
     */
    getMetaModel(): ODataMetaModel;
    /**
     * Returns the value for the property with the given `sPath`. If the path points to a navigation property
     * which has been loaded via `$expand` then the `bIncludeExpandEntries` parameter determines if the navigation
     * property should be included in the returned value or not. Please note that this currently works for 1..1
     * navigation properties only.
     *
     * @returns The value of the property
     */
    getProperty(
      /**
       * The path/name of the property
       */
      sPath: string,
      /**
       * The context if available to access the property value
       */
      oContext?: object,
      /**
       * This parameter should be set when a URI or custom parameter with a `$expand` System Query Option was
       * used to retrieve associated entries embedded/inline. If true then the getProperty function returns a
       * desired property value/entry and includes the associated expand entries (if any). If false the associated/expanded
       * entry properties are removed and not included in the desired entry as properties at all. This is useful
       * for performing updates on the base entry only. Note: A copy and not a reference of the entry will be
       * returned.
       */
      bIncludeExpandEntries?: boolean
    ): object;
    /**
     * Returns the current security token. If the token has not been requested from the server it will be requested
     * first.
     *
     * @returns the CSRF security token
     */
    getSecurityToken(): string;
    /**
     * Return the annotation object. Please note that when using the model with `bLoadMetadataAsync = true`
     * then this function might return undefined because the metadata has not been loaded yet. In this case
     * attach to the `annotationsLoaded` event to get notified when the annotations are available and then call
     * this function.
     *
     * @returns Metadata object
     */
    getServiceAnnotations(): Object | undefined;
    /**
     * Return the metadata object. Please note that when using the model with `bLoadMetadataAsync = true` then
     * this function might return `undefinedmetadataLoaded` event to get notified when the metadata is available and then call
     * this function.
     *
     * @returns Metadata object
     */
    getServiceMetadata(): Object | undefined;
    /**
     * Checks if there exist pending changes in the model created by the setProperty method.
     *
     * @returns true/false
     */
    hasPendingChanges(): boolean;
    /**
     * @deprecated (since 1.20) - please use {@link #getDefaultCountMode} instead.
     *
     * Returns whether this model supports `$count` on its collections.
     *
     * @returns Whether this model supports `$count` on its collections
     */
    isCountSupported(): boolean;
    /**
     * Trigger a GET request to the odata service that was specified in the model constructor. The data will
     * not be stored in the model. The requested data is returned with the response.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    read(
      /**
       * A string containing the path to the data which should be retrieved. The path is concatenated to the sServiceUrl
       * which was specified in the model constructor.
       */
      sPath: string,
      /**
       * Optional parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * If specified the sPath has to be is relative to the path given with the context.
         */
        context?: object;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * true for asynchronous requests.
         */
        async?: boolean;
        /**
         * an array of sap.ui.model.Filter to be included in the request URL
         */
        filters?: any[];
        /**
         * an array of sap.ui.model.Sorter to be included in the request URL
         */
        sorters?: any[];
        /**
         * a callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: oData and response.
         */
        success?: Function;
        /**
         * a callback function which is called when the request failed. The handler can have the parameter: oError
         * which contains additional error information.
         */
        error?: Function;
      }
    ): object;
    /**
     * Refresh the model.
     *
     * This will check all bindings for updated data and update the controls if data has been changed.
     */
    refresh(
      /**
       * Force update of controls
       */
      bForceUpdate?: boolean,
      /**
       * If set to true then the model data will be removed/cleared. Please note that the data might not be there
       * when calling e.g. getProperty too early before the refresh call returned.
       */
      bRemoveData?: boolean
    ): void;
    /**
     * Refreshes the metadata for model, e.g. in case the first request for metadata has failed.
     */
    refreshMetadata(): void;
    /**
     * refresh XSRF token by performing a GET request against the service root URL.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    refreshSecurityToken(
      /**
       * a callback function which is called when the data has been successfully retrieved.
       */
      fnSuccess?: Function,
      /**
       * a callback function which is called when the request failed. The handler can have the parameter: oError
       * which contains additional error information.
       */
      fnError?: Function,
      /**
       * true for asynchronous requests.
       */
      bAsync?: boolean
    ): object;
    /**
     * Trigger a DELETE request to the odata service that was specified in the model constructor.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    remove(
      /**
       * A string containing the path to the data that should be removed. The path is concatenated to the sServiceUrl
       * which was specified in the model constructor.
       */
      sPath: string,
      /**
       * Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:
       */
      mParameters?: {
        /**
         * If specified the sPath has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * a callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: `oData` and `response`.
         */
        success?: Function;
        /**
         * a callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * If specified, the If-Match-Header will be set to this Etag.
         */
        eTag?: string;
        /**
         * if specified, this optional variable can be used to pass a payload into the delete function, e.g. if
         * the entry which should be deleted has not been bound to any control, but has been retrieved via read,
         * only.
         */
        payload?: object;
        /**
         * Whether the request should be done asynchronously. Please be advised that this feature is officially
         * unsupported as using asynchronous requests can lead to data inconsistencies if the application does not
         * make sure that the request was completed before continuing to work with the data.
         */
        async?: boolean;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
      }
    ): object;
    /**
     * Resets the collected changes by the setProperty method and reloads the data from the server.
     */
    resetChanges(
      /**
       * a callback function which is called when the data has been successfully resetted. The handler can have
       * the following parameters: oData and response.
       */
      fnSuccess?: Function,
      /**
       * a callback function which is called when the request failed
       */
      fnError?: Function
    ): void;
    /**
     * @deprecated (since 1.20) - please use {@link #setDefaultCountMode} instead.
     *
     * Sets whether this OData service supports `$count` on its collections.
     */
    setCountSupported(
      /**
       * Whether this OData service supports `$count` on its collections
       */
      bCountSupported: boolean
    ): void;
    /**
     * @SINCE 1.20
     *
     * Sets the default mode how to retrieve the item count for a collection in this model.
     *
     * The count can be determined in the following ways
     * 	 - by sending a separate `$count` request
     * 	 - by adding parameter `$inlinecount=allpages` to one or all data requests
     * 	 - a combination of the previous two
     * 	 - not at all (questions about the size of the collection can't be answered then)  See {@link sap.ui.model.odata.CountMode}
     * 			for all enumeration values and more details.
     *
     * Note that a call to this method does not modify the count mode for existing list bindings, only bindings
     * that are created afterwards will use the new mode when no mode is defined at their creation.
     *
     * If no default count mode is set for an `ODataModel` (v1), the mode `Both` will be used for compatibility
     * reasons.
     */
    setDefaultCountMode(
      /**
       * The new default count mode for this model
       */
      sCountMode: CountMode | keyof typeof CountMode
    ): void;
    /**
     * Set custom headers which are provided in a key/value map. These headers are used for requests against
     * the OData backend. Private headers which are set in the ODataModel cannot be modified. These private
     * headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
     *
     * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling
     * this method again all previous custom headers are removed unless they are specified again in the mCustomHeaders
     * parameter.
     */
    setHeaders(
      /**
       * the header name/value map.
       */
      mHeaders: object
    ): void;
    /**
     * Sets a new value for the given property `sPropertyName` in the model without triggering a server request.
     * This can be done by the `submitChanges` method.
     *
     * Note: Only one entry of one collection can be updated at once. Otherwise a `fireRejectChange` event is
     * fired.
     *
     * Before updating a different entry the existing changes of the current entry have to be submitted or reset
     * by the corresponding methods: `submitChanges`, `resetChanges`.
     *
     * IMPORTANT: All pending changes are reset in the model if the application triggers any kind of refresh
     * on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes
     * call the `hasPendingChanges` method.
     *
     * @returns Whether the value was set correctly
     */
    setProperty(
      /**
       * Path of the property to set
       */
      sPath: string,
      /**
       * Value to set the property to
       */
      oValue: any,
      /**
       * The context which will be used to set the property
       */
      oContext?: object,
      /**
       * Whether to update other bindings dependent on this property asynchronously
       */
      bAsyncUpdate?: boolean
    ): boolean;
    /**
     * @SINCE 1.16.3
     *
     * Enable/Disable automatic updates of all Bindings after change operations
     */
    setRefreshAfterChange(
      /**
       * Whether automatic updates should be enabled
       */
      bRefreshAfterChange: boolean
    ): void;
    /**
     * Enable/Disable XCSRF-Token handling
     */
    setTokenHandlingEnabled(
      /**
       * whether to use token handling or not
       */
      bTokenHandling?: boolean
    ): void;
    /**
     * Enable/Disable batch for all requests
     */
    setUseBatch(
      /**
       * whether the requests should be encapsulated in a batch request
       */
      bUseBatch?: boolean
    ): void;
    /**
     * Submits the collected changes in the batch which were collected via `addBatchReadOperations` or `addBatchChangeOperations`.
     * The batch will be cleared afterwards. If the batch is empty, no request will be sent and false will be
     * returned.
     *
     * **Note:** No data will be stored in the model as long as `bImportData` is not set.
     *
     * @returns An object which has an `abort` function to abort the current request. Returns false if no request
     * will be performed because the batch is empty.
     */
    submitBatch(
      /**
       * A callback function which is called when the batch request has been successfully sent. Note: Errors that
       * may have come up in the single batch operations can be accessed in the `aErrorResponses` parameter in
       * the callback handler. The handler can have the following parameters: `oData`, `oResponse` and `aErrorResponses`.
       */
      fnSuccess?: Function,
      /**
       * A callback function which is called when the batch request failed. The handler can have the parameter
       * `oError` which contains additional error information.
       */
      fnError?: Function,
      /**
       * true for asynchronous request
       */
      bAsync?: boolean,
      /**
       * Whether response data should be imported into the model
       */
      bImportData?: boolean
    ): object;
    /**
     * Submits the collected changes which were collected by the setProperty method. A MERGE request will be
     * triggered to only update the changed properties. If a URI with a $expand System Query Option was used
     * then the expand entries will be removed from the collected changes. Changes to this entries should be
     * done on the entry itself. So no deep updates are supported.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    submitChanges(
      /**
       * a callback function which is called when the data has been successfully updated. The handler can have
       * the following parameters: oData and response.
       */
      fnSuccess?: Function,
      /**
       * a callback function which is called when the request failed. The handler can have the parameter: oError
       * which contains additional error information
       */
      fnError?: Function,
      /**
       * optional parameter for additional information introduced in SAPUI5 1.9.1
       */
      oParameters?: {
        /**
         * an ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header
         * in the request to the server for this entry.
         */
        sETag?: string;
      }
    ): object;
    /**
     * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please
     * note that deep updates are not supported and may not work. These should be done seperate on the entry
     * directly.
     *
     * @returns an object which has an `abort` function to abort the current request.
     */
    update(
      /**
       * A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl
       * which was specified in the model constructor.
       */
      sPath: string,
      /**
       * data of the entry that should be updated.
       */
      oData: object,
      /**
       * Optional, can contain the following attributes:
       */
      mParameters?: {
        /**
         * If specified the sPath has to be is relative to the path given with the context.
         */
        context?: object;
        /**
         * a callback function which is called when the data has been successfully updated.
         */
        success?: Function;
        /**
         * a callback function which is called when the request failed. The handler can have the parameter `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * trigger a MERGE request instead of a PUT request to perform a differential update
         */
        merge?: boolean;
        /**
         * If specified, the If-Match-Header will be set to this Etag.
         */
        eTag?: string;
        /**
         * Whether the request should be done asynchronously. Please be advised that this feature is officially
         * unsupported as using asynchronous requests can lead to data inconsistencies if the application does not
         * make sure that the request was completed before continuing to work with the data.
         */
        async?: boolean;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
      }
    ): object;
    /**
     * update all bindings
     */
    updateBindings(
      /**
       * If set to false an update will only be done when the value of a binding changed.
       */
      bForceUpdate?: boolean
    ): void;
  }
}

declare module "sap/ui/model/odata/ODataPropertyBinding" {
  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Property binding implementation for OData format
   */
  export default class ODataPropertyBinding extends PropertyBinding {
    /**
     * Do **NOT** call this private constructor, but rather use {@link sap.ui.model.odata.v2.ODataModel#bindProperty}
     * instead!
     */
    constructor(
      oModel: Model,

      sPath: string,

      oContext: Context,

      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataPropertyBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.ODataPropertyBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the current value of the bound target
     *
     * @returns the current value of the bound target
     */
    getValue(): object;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initialize the binding. The message should be called when creating a binding. If metadata is not yet
     * available, do nothing, method will be called again when metadata is loaded.
     */
    initialize(): void;
    /**
     * @SINCE 1.82.0
     *
     * Returns `true`, as this binding supports the feature of not propagating model messages to the control.
     * See:
     * 	sap.ui.model.Binding#getIgnoreMessages
     * 	sap.ui.model.Binding#setIgnoreMessages
     *
     * @returns `true`
     */
    supportsIgnoreMessages(): boolean;
  }
}

declare module "sap/ui/model/odata/ODataUtils" {
  interface ODataUtils {
    /**
     * @SINCE 1.29.1
     *
     * Compares the given OData values based on their type. All date and time types can also be compared with
     * a number. This number is then interpreted as the number of milliseconds that the corresponding date or
     * time object should hold.
     *
     * @returns the result of the compare: `0` if the values are equal, `-1` if the first value is smaller,
     * `1` if the first value is larger, `NaN` if they cannot be compared
     */
    compare(
      /**
       * the first value to compare
       */
      vValue1: any,
      /**
       * the second value to compare
       */
      vValue2: any,
      /**
       * if `true`, the string values `vValue1` and `vValue2` are compared as a decimal number (only sign, integer
       * and fraction digits; no exponential format). Otherwise they are recognized by looking at their types.
       */
      bAsDecimal?: boolean
    ): int;
    /**
     * Formats a JavaScript value according to the given
     * EDM type.
     *
     * @returns The formatted value
     */
    formatValue(
      /**
       * The value to format
       */
      vValue: any,
      /**
       * The EDM type (e.g. Edm.Decimal)
       */
      sType: string,
      /**
       * Whether strings gets compared case sensitive or not
       */
      bCaseSensitive: boolean
    ): string;
    /**
     * @SINCE 1.29.1
     *
     * Returns a comparator function optimized for the given EDM type.
     *
     * @returns the comparator function taking two values of the given type and returning `0` if the values
     * are equal, `-1` if the first value is smaller, `1` if the first value is larger and `NaN` if they cannot
     * be compared (e.g. one value is `null` or `undefined`)
     */
    getComparator(
      /**
       * the EDM type
       */
      sEdmType: string
    ): Function;
    /**
     * @SINCE 1.30.7
     *
     * Adds an origin to the given service URL. If an origin is already present, it will only be replaced if
     * the parameters object contains the flag "force: true". In case the URL already contains URL parameters,
     * these will be kept. As a parameter, a sole alias is sufficient. The parameters vParameters.system and
     * vParameters.client however have to be given in pairs. In case all three origin specifying parameters
     * are given (system/client/alias), the alias has precedence.
     *
     * Examples: setOrigin("/backend/service/url/", "DEMO_123"); - result: /backend/service/url;o=DEMO_123/
     *
     * setOrigin("/backend/service/url;o=OTHERSYS8?myUrlParam=true&x=4", {alias: "DEMO_123", force: true});
     * - result /backend/service/url;o=DEMO_123?myUrlParam=true&x=4
     *
     * setOrigin("/backend/service;o=NOT_TOUCHED/url;v=2;o=OTHERSYS8;srv=XVC", {alias: "DEMO_123", force: true});
     * - result /backend/service;o=NOT_TOUCHED/url;v=2;o=DEMO_123;srv=XVC
     *
     * setOrigin("/backend/service/url/", {system: "DEMO", client: 134}); - result /backend/service/url;o=sid(DEMO.134)/
     *
     * @returns the service URL with the added origin.
     */
    setOrigin(
      /**
       * the URL which will be enriched with an origin
       */
      sServiceURL: string,
      /**
       * if string then it is asumed its the system alias, else if the argument is an object then additional Parameters
       * can be given
       */
      vParameters:
        | {
            /**
             * the system alias which will be used as the origin
             */
            alias: string;
            /**
             * the system id which will be used as the origin
             */
            system: string;
            /**
             * the system's client
             */
            client: string;
            /**
             * setting this flag to `true` overrides the already existing origin
             */
            force: boolean;
          }
        | string
    ): string;
  }
  const ODataUtils: ODataUtils;
  export default ODataUtils;
}

declare module "sap/ui/model/odata/OperationMode" {
  /**
   * Different modes for executing service operations (filtering, sorting)
   */
  enum OperationMode {
    /**
     * @deprecated (since 1.102.0) - because filtering and sorting may lead to different results when executed
     * on the client and on the server, and thus to inconsistent behavior. If it is certain that the collection
     * is completely loaded on the client, use {@link sap.ui.model.odata.OperationMode.Client}; otherwise, use
     * {@link sap.ui.model.odata.OperationMode.Default} or {@link sap.ui.model.odata.OperationMode.Server}.
     *
     * With operation mode `Auto`, operations are either processed on the client or on the server. The exact
     * behavior depends on the configured {@link sap.ui.model.odata.CountMode CountMode}, on the `threshold`
     * and on the size of the data:
     * 	 - Count Modes `Request` and `Both`
     *  Initially the binding will issue a `$count` request without any filters/sorters.  If
     * the count is lower or equal to the threshold, the binding will behave like in operation mode `Client`,
     * and a data request for all entries is issued.
     * 	 - If the count exceeds the threshold, the binding will behave like in operation mode `Server`.
     *
     *
     *
     * 	 - Count Modes `Inline` or `InlineRepeat`
     *  The initial request tries to fetch as many entries as configured with the `threshold` parameter, without
     * specifying any filters/sorters. In addition, the query parameter `$inlinecount` is added. The binding
     * assumes, that the threshold given by the application can be met, but it adapts its behavior depending
     * on the response:  If the response returns fewer (or just as many) entries as the threshold,
     * the binding will behave exactly like when using the operation mode `Client`. Initially configured filters/sorters
     * will be applied afterwards on the client.
     * 	 - If the `$inlinecount` is higher than the threshold, the binding will behave like in operation mode
     * 			`Server`. In this case a new data request containing the initially set filters/sorters will be issued.
     * 			 It is up to the application to chose an appropriate threshold value. Ideally, it should be high
     * 			enough to fetch all data in the most common scenarios (to avoid a fallback to operation mode `Server`,
     * 			requiring an additional request), but it also should be low enough to ensure a fast response in case
     * 			there is much more data than expected.
     * 	 - Count mode `None` is not supported together with operation mode `Auto`
     */
    Auto = "Auto",
    /**
     * Operations are executed on the client. This only works if all entries are loaded on the client. The initial
     * request fetches the complete collection, filtering and sorting does not trigger further requests.
     */
    Client = "Client",
    /**
     * By default, all operations are executed on the server in the OData service request (`Server` mode). Only
     * if the collection is already expanded and all entries are available on the client, all operations are
     * executed on the client (`Client` mode).
     */
    Default = "Default",
    /**
     * Operations are executed on the server in the OData service request, by appending corresponding URL parameters
     * (`$filter`, `$orderby`). Each change in filtering or sorting triggers a new request to the server.
     */
    Server = "Server",
  }
  export default OperationMode;
}

declare module "sap/ui/model/odata/type/Boolean" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Boolean`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `boolean`.
   */
  export default class Boolean1 extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.Boolean`.
     */
    constructor(
      /**
       * format options as defined in the interface of {@link sap.ui.model.SimpleType}; this type ignores them
       * since it does not support any format options
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Boolean with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Boolean1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Boolean.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given boolean value to the given target type.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted
       */
      bValue: boolean,
      /**
       * the target type; may be "any", "boolean", "string", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}. If the target type (or its primitive type) is "string", the result is "Yes" or "No"
       * in the current {@link sap.ui.core.Configuration#getLanguage language}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): boolean | string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value from the given type to a boolean.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed; the empty string and `null` are parsed to `null`
       */
      vValue: boolean | string,
      /**
       * the source type (the expected type of `vValue`); may be "boolean", "string", or a type with one of these
       * types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): boolean;
    /**
     * Validates whether the given value in model representation is valid and meets the given constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      bValue: boolean
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Byte" {
  import Int from "sap/ui/model/odata/type/Int";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.1
   *
   * This class represents the OData primitive type
   * `Edm.Byte`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class Byte extends Int {
    /**
     * Constructor for a primitive type `Edm.Byte`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an error if any constraint
       * is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Byte with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Byte>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Byte.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the type's supported range as object with properties `minimum` and `maximum`.
     *
     * @returns the range
     */
    getRange(): object;
  }
}

declare module "sap/ui/model/odata/type/Currency" {
  import Currency1 from "sap/ui/model/type/Currency";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.63.0
   *
   * This class represents the `Currency` composite type with the parts amount, currency, and currency customizing.
   * The type may only be used for amount and currency parts from a {@link sap.ui.model.odata.v4.ODataModel}
   * or a {@link sap.ui.model.odata.v2.ODataModel}. The amount part is formatted according to the customizing
   * for the currency. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestCurrencyCodes}
   * for OData V4 or by {@link sap.ui.model.odata.ODataMetaModel#requestCurrencyCodes} for OData V2 as currency
   * customizing part. See {@link topic:4d1b9d44941f483f9b7f579873d38685 Currency and Unit Customizing in
   * OData V4} resp. {@link topic:6c47b2b39db9404582994070ec3d57a2#loioaa9024c7c5444822a68daeb21a92bd51 Currency
   * and Unit Customizing in OData V2} for more information. If no currency customizing is available, UI5's
   * default formatting applies.
   */
  export default class Currency extends Currency1 {
    /**
     * Constructor for a `Currency` composite type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getCurrencyInstance}. Format options
       * are immutable, that is, they can only be set once on construction. Format options that are not supported
       * or have a different default are listed below. If the format option `showMeasure` is set to `false`, model
       * messages for the currency code are not propagated to the control if the corresponding binding supports
       * the feature of ignoring messages, see {@link sap.ui.model.Binding#supportsIgnoreMessages}, and the corresponding
       * binding parameter is not set manually.
       */
      oFormatOptions?: {
        /**
         * Not supported; the type derives this from its currency customizing part.
         */
        customCurrencies?: object;
        /**
         * Whether the amount is parsed to a string; set to `false` if the amount's underlying type is represented
         * as a `number`, for example {@link sap.ui.model.odata.type.Int32}
         */
        parseAsString?: boolean;
        /**
         * Whether the amount is parsed if no currency is entered; defaults to `true` if neither `showMeasure` nor
         * `showNumber` is set to a falsy value, otherwise defaults to `false`
         */
        unitOptional?: boolean;
        /**
         * Defines how an empty string is parsed into the amount. With the default value `0` the amount becomes
         * `0` when an empty string is parsed.
         */
        emptyString?: any;
        /**
         * By default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
      },
      /**
       * Only the 'skipDecimalsValidation' constraint is supported. Constraints are immutable, that is, they can
       * only be set once on construction.
       */
      oConstraints?: {
        /**
         * Whether to skip validation of the number of decimals based on the code list customizing; since 1.93.0
         */
        skipDecimalsValidation?: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Currency with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.Currency.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Currency>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Currency.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.63.0
     *
     * Formats the given values of the parts of the `Currency` composite type to the given target type.
     *
     * @returns The formatted output value; `null`, if `aValues` is `undefined` or `null` or if the amount,
     * the currency or the currency customizing contained therein is `undefined`.
     */
    formatValue(
      /**
       * Array of part values to be formatted; contains in the following order: amount, currency, currency customizing.
       * The first call to this method where all parts are set determines the currency customizing; subsequent
       * calls use this customizing, so that the corresponding part may be omitted. Changes to the currency customizing
       * part after this first method call are not considered: The currency customizing for this `Currency` instance
       * remains unchanged.
       */
      aValues: any[],
      /**
       * The target type; must be "string" or a type with "string" as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): string;
    /**
     * @SINCE 1.63.0
     *
     * Returns the type's name.
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.63.0
     *
     * Parses the given string value to an array containing amount and currency.
     * See:
     * 	sap.ui.model.type.Currency#parseValue
     *
     * @returns An array containing amount and currency in this order. Both, amount and currency, are string
     * values unless the format option `parseAsString` is `false`; in this case, the amount is a number.
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: string,
      /**
       * The source type (the expected type of `vValue`); must be "string", or a type with "string" as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sSourceType: string,
      /**
       * Not used
       */
      aCurrentValues?: any[]
    ): any[];
    /**
     * @SINCE 1.63.0
     *
     * Validates whether the given value in model representation as returned by {@link #parseValue} is valid
     * and meets the conditions of this type's currency customizing.
     */
    validateValue(
      /**
       * An array containing amount and currency in this order, see return value of {@link #parseValue}
       */
      aValues: any[]
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Date" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ValidateException from "sap/ui/model/ValidateException";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * @SINCE 1.37.0
   *
   * This class represents the OData V4 primitive type `Edm.Date`.
   *
   * In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a `string` in the format "yyyy-MM-dd".
   *
   * **Note: For an OData V2 service use {@link sap.ui.model.odata.type.DateTime} with the constraint `displayFormat:
   * "Date"` to display only a date.**
   */
  export default class Date1 extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.Date`.
     * See:
     * 	http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.DateFormat.getDateInstance}
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Date with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Date1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Date.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`;
     * `Date` objects are returned for target type "object" and represent the given date with time "00:00:00"
     * in the configured time zone
     */
    formatValue(
      /**
       * the value to be formatted; `string` values are expected in the format "yyyy-MM-dd" used by OData V4;
       * `Date` objects are expected to represent UTC as used by OData V2
       */
      vValue: string | Date,
      /**
       * the target type; may be "any", "object" (since 1.69.0), "string", or a type with one of these types as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}; see {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): string | Date | UI5Date;
    /**
     * @SINCE 1.111.0
     *
     * Gets the model value according to this type's constraints and format options for the given date object
     * representing a date. Validates the resulting value against the constraints of this type instance.
     *
     * @returns The model representation of the date
     */
    getModelValue(
      /**
       * The date object considering the configured time zone. Must be created via {@link module:sap/ui/core/date/UI5Date.getInstance}
       */
      oDate: Date | UI5Date | null
    ): string | null;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value to a date.
     *
     * @returns the parsed value in the format "yyyy-MM-dd" used by OData V4
     */
    parseValue(
      /**
       * the value to be parsed, maps `""` to `null`; `Date` objects are expected to represent local time and
       * are supported if and only if source type is "object"
       */
      vValue: string | Date,
      /**
       * the source type (the expected type of `vValue`); must be "object" (since 1.69.0), "string", or a type
       * with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}; see {@link
       * sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the given constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/DateTime" {
  import DateTimeBase from "sap/ui/model/odata/type/DateTimeBase";

  import Metadata from "sap/ui/base/Metadata";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData V2 primitive type
   * `Edm.DateTime`.
   *
   * If you want to display a date and a time, prefer {@link sap.ui.model.odata.type.DateTimeOffset}, specifically
   * designed for this purpose.
   *
   * Use `DateTime` with the SAP-specific annotation `display-format=Date` (resp. the constraint `displayFormat:
   * "Date"`) to display only a date.
   *
   * In {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a `Date`. With the constraint
   * `displayFormat: "Date"`, the time zone is UTC, and all time related parts (hours, minutes, etc.) are
   * set to zero; otherwise it is a date/time value in local time.
   */
  export default class DateTime extends DateTimeBase {
    /**
     * Constructor for a primitive type `Edm.DateTime`.
     */
    constructor(
      /**
       * format options as defined in {@link sap.ui.core.format.DateFormat}
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue} throws an error
       * if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
        /**
         * may be "Date", in this case only the date part is used, the time part is always 00:00:00 and the time
         * zone is UTC to avoid time-zone-related problems
         */
        displayFormat?: string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.DateTime with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTime>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.DateTime.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.111.0
     *
     * Gets the model value according to this type's constraints and format options for the given date object
     * which represents a timestamp in the configured time zone. Validates the resulting value against the constraints
     * of this type instance.
     * See:
     * 	{@link sap.ui.core.Configuration.getTimezone}
     *
     * @returns The model representation for the given Date
     */
    getModelValue(
      /**
       * The date object considering the configured time zone. Must be created via {@link module:sap/ui/core/date/UI5Date.getInstance}
       */
      oDate: Date | UI5Date | null
    ): Date | UI5Date | null;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
  }
}

declare module "sap/ui/model/odata/type/DateTimeBase" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This is an abstract base class for the OData primitive types `Edm.DateTime` and `Edm.DateTimeOffset`.
   */
  export default class DateTimeBase extends ODataType {
    /**
     * Base constructor for the primitive types `Edm.DateTime` and `Edm.DateTimeOffset`.
     */
    constructor(
      /**
       * Type-specific format options; see subtypes
       */
      oFormatOptions?: object,
      /**
       * Constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * If `true`, only the date part is used, the time part is always 00:00:00 and the time zone is UTC to avoid
         * time-zone-related problems
         */
        isDateOnly?: boolean;
        /**
         * If `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
        /**
         * The number of decimal places allowed in the seconds portion of a valid string value (OData V4 only);
         * only integer values between 0 and 12 are valid (since 1.37.0)
         */
        precision?: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.DateTimeBase with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.DateTimeBase.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.27.0
     *
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * The value to be formatted, which is represented in the model as a `Date` instance (OData V2)
       */
      oValue: Date,
      /**
       * The target type, may be "any", "object" (since 1.69.0), "string", or a type with one of these types as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.27.0
     *
     * Parses the given value to a `Date` instance (OData V2).
     *
     * @returns The parsed value
     */
    parseValue(
      /**
       * The value to be parsed; the empty string and `null` are parsed to `null`
       */
      vValue: string | Date,
      /**
       * The source type (the expected type of `vValue`), must be "object" (since 1.69.0), "string", or a type
       * with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link
       * sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.27.0
     *
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * The value to be validated
       */
      oValue: Date
    ): void;
  }
}

declare module "sap/ui/model/odata/type/DateTimeOffset" {
  import DateTimeBase from "sap/ui/model/odata/type/DateTimeBase";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ValidateException from "sap/ui/model/ValidateException";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.DateTimeOffset`.
   *
   * In {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a `Date` instance in local time.
   * In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a `string` like "1970-12-31T23:59:58Z".
   * See parameter `oConstraints.V4` for more information.
   */
  export default class DateTimeOffset extends DateTimeBase {
    /**
     * Constructor for a primitive type `Edm.DateTimeOffset`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.DateFormat.getDateTimeInstance}
       */
      oFormatOptions?: object,
      /**
       * Constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue} throws an error
       * if any constraint is violated
       */
      oConstraints?: {
        /**
         * If `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
        /**
         * The number of decimal places allowed in the seconds portion of a valid string value (OData V4 only);
         * only integer values between 0 and 12 are valid (since 1.37.0)
         */
        precision?: boolean;
        /**
         * Whether OData V4 semantics apply and the model representation is expected to be a `string` like "1970-12-31T23:59:58Z"
         * (see {@link #parseValue} and {@link #validateValue}); this type automatically adapts itself whenever
         * it is used within an OData V4 model via {@link sap.ui.model.odata.v4.ODataPropertyBinding#setType}.
         */
        V4?: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.DateTimeOffset with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeOffset>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.DateTimeOffset.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.27.0
     *
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * The value to be formatted, which is represented in the model as a `Date` instance (OData V2) or as a
       * string like "1970-12-31T23:59:58Z" (OData V4); both representations are accepted independent of the model's
       * OData version
       */
      vValue: Date | string,
      /**
       * The target type, may be "any", "object" (since 1.69.0), "string", or a type with one of these types as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.27.0
     *
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * The target type, may be "any", "object" (since 1.69.0), "string", or a type with one of these types as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.111.0
     *
     * Gets the model value according to this type's constraints and format options for the given date object
     * which represents a timestamp in the configured time zone. Validates the resulting value against the constraints
     * of this type instance.
     *
     * @returns The model representation for the given Date
     */
    getModelValue(
      /**
       * The date object considering the configured time zone. Must be created via {@link module:sap/ui/core/date/UI5Date.getInstance}
       */
      oDate: Date | UI5Date | null
    ): Date | UI5Date | string | null;
    /**
     * Returns the type's name.
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.27.0
     *
     * Parses the given value to a `Date` instance (OData V2) or a string like "1970-12-31T23:59:58Z" (OData
     * V4), depending on the model's OData version.
     *
     * @returns The parsed value
     */
    parseValue(
      /**
       * The value to be parsed; the empty string and `null` are parsed to `null`; `Date` objects are expected
       * to represent local time and are supported if and only if source type is "object".
       */
      vValue: Date | string,
      /**
       * The source type (the expected type of `vValue`), must be "string", "object" (since 1.69.0), or a type
       * with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link
       * sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.27.0
     *
     * Validates whether the given value in model representation is valid and meets the defined constraints,
     * depending on the model's OData version.
     */
    validateValue(
      /**
       * The value to be validated
       */
      vValue: any
    ): void;
  }
}

declare module "sap/ui/model/odata/type/DateTimeWithTimezone" {
  import CompositeType from "sap/ui/model/CompositeType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * @SINCE 1.99.0
   *
   * This class represents the `DateTimeWithTimezone` composite type which has the parts timestamp and time
   * zone. The type formats the timestamp part using the time zone part. For this, the timestamp part has
   * to be provided in the UTC time zone. When using this type with the {@link sap.ui.model.odata.v2.ODataModel},
   * you need to set the parameter `useUndefinedIfUnresolved` for both parts.
   *
   * For more information and some examples how to use this class, see {@link topic:6c9e61dc157a40c19460660ece8368bc
   * Dates, Times, Timestamps, and Time Zones}.
   */
  export default class DateTimeWithTimezone extends CompositeType {
    /**
     * Constructor for a `DateTimeWithTimezone` composite type.
     * See:
     * 	{sap.ui.model.odata.v2.ODataModel#bindProperty}
     */
    constructor(
      /**
       * Format options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance
       * DateFormat}. The `strictParsing` format option is set to `true` by default and can be overwritten. Format
       * options are immutable, that is, they can only be set once on construction.
       */
      oFormatOptions?: object,
      /**
       * Constraints are not supported
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.DateTimeWithTimezone with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeWithTimezone>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.DateTimeWithTimezone.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given values of the parts of the `DateTimeWithTimezone` composite type to the given target
     * type.
     *
     * @returns The formatted output value; `null`,
     * 	 - if `aValues` is not set, or
     * 	 - if the time zone or timestamp in `aValues` is `undefined`, or
     * 	 - if the timestamp in `aValues` is not set and the `showTimezone` format option is set to `false`
     */
    formatValue(
      /**
       * The array of the part values to be formatted; the first entry has to be a `Date` object for the timestamp,
       * and the second entry has to be a string representing a time zone ID
       */
      aValues: any[],
      /**
       * The target type, must be "object", "string", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}; see {@link sap.ui.model.odata.type} for more information
       */
      sTargetType: string
    ): any;
    /**
     * Returns the type's name.
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * Gets an array of indices that determine which parts of this type shall not propagate their model messages
     * to the attached control. Prerequisite is that the corresponding binding supports this feature, see {@link
     * sap.ui.model.Binding#supportsIgnoreMessages}. If the `showTimezone` format option is set to `false`,
     * the time zone is not shown in the control, and the part for the time zone shall not propagate model messages
     * to the control. Analogously, if the format option `showDate` and `showTime` are both set to `false`,
     * the date and time are not shown in the control, and the parts for the date and time shall not propagate
     * model messages to the control.
     * See:
     * 	sap.ui.model.Binding#supportsIgnoreMessages
     *
     * @returns An array of indices that determine which parts of this type shall not propagate their model
     * messages to the attached control
     */
    getPartsIgnoringMessages(): number[];
    /**
     * Parses the given value.
     *
     * @returns An array with two entries; the first one is a `Date` object for the timestamp and the second
     * one is a string representing a time zone ID; if a part is hidden via the format option `showTimezone`,
     * the corresponding entry in the array is set to `undefined`
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: string | Date,
      /**
       * The source type (the expected type of `vValue`); must be "object", "string", or a type with one of these
       * types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}; see {@link sap.ui.model.odata.type}
       * for more information
       */
      sSourceType: string,
      /**
       * The array of current part values; the first entry has to be a `Date` object for the timestamp, and the
       * second entry has to be a string representing a time zone ID; **Note:** This parameter is required, see
       * definition of this parameter in {@link sap.ui.model.CompositeType#parseValue}
       */
      aCurrentValues?: any[]
    ): any[];
    /**
     * Validates whether the given raw values meet the defined constraints. This method does nothing as no constraints
     * are supported.
     * See:
     * 	sap.ui.model.SimpleType#validateValue
     */
    validateValue(
      /**
       * The set of values to be validated
       */
      aValues: any[]
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Decimal" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Decimal`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `string`. It never uses exponential format ("1e-5").
   */
  export default class Decimal extends ODataType {
    /**
     * Constructor for a primitive type `Edm.Decimal`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getFloatInstance}. In contrast to
       * NumberFormat `groupingEnabled` defaults to `true`. Note that `maxFractionDigits` and `minFractionDigits`
       * are set to the value of the constraint `scale` unless it is "variable". They can however be overwritten.
       */
      oFormatOptions?: {
        /**
         * by default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
      },
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * the maximum value allowed
         */
        maximum?: string;
        /**
         * if `true`, the maximum value itself is not allowed
         */
        maximumExclusive?: boolean;
        /**
         * the minimum value allowed
         */
        minimum?: string;
        /**
         * if `true`, the minimum value itself is not allowed
         */
        minimumExclusive?: boolean;
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
        /**
         * the maximum number of digits allowed
         */
        precision?: int | string;
        /**
         * the maximum number of digits allowed to the right of the decimal point; the number must be less than
         * or equal to `precision` (if given). As a special case, "variable" is supported.
         *
         * The number of digits to the right of the decimal point may vary from zero to `scale`, and the number
         * of digits to the left of the decimal point may vary from one to `precision` minus `scale`. If `scale`
         * is equal to `precision`, a single zero has to precede the decimal point.
         *
         * The number is always displayed with exactly `scale` digits to the right of the decimal point (unless
         * `scale` is "variable").
         */
        scale?: int | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Decimal with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Decimal>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Decimal.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type. When formatting to "string" the type's constraint `scale`
     * is taken into account.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted, which is represented as a string in the model
       */
      sValue: string,
      /**
       * the target type; may be "any", "float", "int", "string", or a type with one of these types as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): number | string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value, which is expected to be of the given type, to a decimal in `string` representation.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed; the empty string and `null` are parsed to `null`
       */
      vValue: string | number,
      /**
       * the source type (the expected type of `vValue`); may be "float", "int", "string", or a type with one
       * of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Double" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Double`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class Double extends ODataType {
    /**
     * Constructor for a primitive type `Edm.Double`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getFloatInstance}. In contrast to
       * NumberFormat `groupingEnabled` defaults to `true`.
       */
      oFormatOptions?: {
        /**
         * by default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
      },
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Double with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Double>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Double.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type. When formatting to "string", very large or very small
     * values are formatted to the exponential format (e.g. "-3.14 E+15").
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted, which is represented as a number in the model
       */
      vValue: number | string,
      /**
       * the target type; may be "any", "float", "int", "string", or a type with one of these types as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): number | string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @SINCE 1.29.0
     *
     * Parses the given value, which is expected to be of the given type, to an Edm.Double in `number` representation.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed; the empty string and `null` are parsed to `null`; note that there is no way to
       * enter `Infinity` or `NaN` values
       */
      vValue: string | number,
      /**
       * the source type (the expected type of `vValue`); may be "float", "int", "string", or a type with one
       * of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): number;
    /**
     * @SINCE 1.29.0
     *
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      fValue: number
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Guid" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Guid`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `string`.
   */
  export default class Guid extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.Guid`.
     */
    constructor(
      /**
       * format options as defined in the interface of {@link sap.ui.model.SimpleType}; this type ignores them
       * since it does not support any format options
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Guid with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Guid>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Guid.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted
       */
      sValue: string,
      /**
       * the target type; may be "any", "string", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value to a GUID.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed, maps `""` to `null`
       */
      sValue: string,
      /**
       * the source type (the expected type of `sValue`); must be "string", or a type with "string" as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the given constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Int" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This is an abstract base class for integer-based
   * OData primitive types like `Edm.Int16` or `Edm.Int32`.
   */
  export default class Int extends ODataType {
    /**
     * Constructor for a new `Int`.
     */
    constructor(
      /**
       * type-specific format options; see subtypes
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Int with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Int>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Int.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type. When formatting to `string` the format options are
     * used.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value in model representation to be formatted
       */
      iValue: number,
      /**
       * the target type; may be "any", "int", "float", "string", or a type with one of these types as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): number | string;
    /**
     * Parses the given value, which is expected to be of the given source type, to an Int in number representation.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed. The empty string and `null` are parsed to `null`.
       */
      vValue: number | string,
      /**
       * the source type (the expected type of `vValue`); may be "float", "int", "string", or a type with one
       * of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): number;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      iValue: number
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Int16" {
  import Int from "sap/ui/model/odata/type/Int";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Int16`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class Int16 extends Int {
    /**
     * Constructor for a primitive type `Edm.Int16`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}. In contrast
       * to NumberFormat `groupingEnabled` defaults to `true`.
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an error if any constraint
       * is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Int16 with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Int16>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Int16.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the type's supported range as object with properties `minimum` and `maximum`.
     *
     * @returns the range
     */
    getRange(): object;
  }
}

declare module "sap/ui/model/odata/type/Int32" {
  import Int from "sap/ui/model/odata/type/Int";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.Int32`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class Int32 extends Int {
    /**
     * Constructor for a primitive type `Edm.Int32`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}. In contrast
       * to NumberFormat `groupingEnabled` defaults to `true`.
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an error if any constraint
       * is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Int32 with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Int32>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Int32.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the type's supported range as object with properties `minimum` and `maximum`.
     *
     * @returns the range
     */
    getRange(): object;
  }
}

declare module "sap/ui/model/odata/type/Int64" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.1
   *
   * This class represents the OData primitive type
   * `Edm.Int64`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `string`.
   */
  export default class Int64 extends ODataType {
    /**
     * Constructor for a primitive type `Edm.Int64`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}. In contrast
       * to NumberFormat `groupingEnabled` defaults to `true`.
       */
      oFormatOptions: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );
    /**
     * Constructor for a primitive type `Edm.Int64`.
     */
    constructor(
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Int64 with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Int64>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Int64.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted, which is represented as a string in the model
       */
      sValue: string,
      /**
       * the target type; may be "any", "float", "int", "string", or a type with one of these types as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): number | string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value, which is expected to be of the given type, to an Int64 in `string` representation.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed; the empty string and `null` are parsed to `null`
       */
      vValue: string | number,
      /**
       * the source type (the expected type of `vValue`); may be "float", "int", "string", or a type with one
       * of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/ODataType" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.0
   *
   * This class is an abstract base class for all OData primitive types (see {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element
   * OData V4 Edm Types} and {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem
   * OData V2 Edm Types}). All subtypes implement the interface of {@link sap.ui.model.SimpleType}. That means
   * they implement next to the constructor:
   * 	 - {@link sap.ui.model.Type#getName getName}
   * 	 - {@link sap.ui.model.SimpleType#formatValue formatValue}
   * 	 - {@link sap.ui.model.SimpleType#parseValue parseValue}
   * 	 - {@link sap.ui.model.SimpleType#validateValue validateValue}
   *
   * All ODataTypes are immutable. All format options and constraints are given to the constructor, they cannot
   * be modified later.
   *
   * All ODataTypes use a locale-specific message when throwing an error caused by invalid user input (e.g.
   * if {@link sap.ui.model.odata.type.Double#parseValue Double.parseValue} cannot parse the given value to
   * a number, or if any type's {@link #validateValue validateValue} gets a `null`, but the constraint `nullable`
   * is `false`).
   */
  export default class ODataType extends SimpleType {
    /**
     * Constructor for a new `ODataType`.
     */
    constructor(
      /**
       * type-specific format options; see subtypes
       */
      oFormatOptions?: object,
      /**
       * type-specific constraints (e.g. `oConstraints.nullable`), see subtypes
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.ODataType with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.ODataType.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/odata/type/Raw" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.37.0
   *
   * This class represents a placeholder for all unsupported OData primitive types. It can only be used to
   * retrieve raw values "as is" (i.e. `formatValue(vValue, "any")`), but not to actually convert to or from
   * any other representation or to validate.
   */
  export default class Raw extends ODataType {
    /**
     * Constructor for a placeholder for all unsupported OData primitive types.
     */
    constructor(
      /**
       * Must be `undefined`
       */
      oFormatOptions?: object,
      /**
       * Must be `undefined`
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Raw with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Raw>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Raw.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.37.0
     *
     * Formats the given value to the given target type.
     * See:
     * 	sap.ui.model.SimpleType#formatValue
     *
     * @returns The raw value "as is"
     */
    formatValue(
      /**
       * The raw value to be retrieved "as is"
       */
      vValue: any,
      /**
       * The target type; must be "any"
       */
      sTargetType: string
    ): any;
    /**
     * @SINCE 1.37.0
     *
     * Returns the type's name.
     * See:
     * 	sap.ui.model.Type#getName
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.SimpleType#parseValue
     */
    parseValue(): void;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.SimpleType#validateValue
     */
    validateValue(): void;
  }
}

declare module "sap/ui/model/odata/type/SByte" {
  import Int from "sap/ui/model/odata/type/Int";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.SByte`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class SByte extends Int {
    /**
     * Constructor for a primitive type `Edm.SByte`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an error if any constraint
       * is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.SByte with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SByte>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.SByte.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the type's supported range as object with properties `minimum` and `maximum`.
     *
     * @returns the range
     */
    getRange(): object;
  }
}

declare module "sap/ui/model/odata/type/Single" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.1
   *
   * This class represents the OData primitive type
   * `Edm.Single`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `number`.
   */
  export default class Single extends ODataType {
    /**
     * Constructor for a primitive type `Edm.Single`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getFloatInstance}. In contrast to
       * NumberFormat `groupingEnabled` defaults to `true`.
       */
      oFormatOptions?: {
        /**
         * by default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
      },
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Single with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Single>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Single.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value to be formatted, which is represented as a number in the model
       */
      vValue: string | number,
      /**
       * the target type; may be "any", "float", "int", "string", or a type with one of these types as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): number | string;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * @SINCE 1.29.0
     *
     * Parses the given value, which is expected to be of the given type, to an Edm.Single in `number` representation.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed; the empty string and `null` are parsed to `null`; note that there is no way to
       * enter `Infinity` or `NaN` values
       */
      vValue: string | number,
      /**
       * the source type (the expected type of `vValue`); may be "float", "int", "string", or a type with one
       * of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): number;
    /**
     * @SINCE 1.29.0
     *
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      fValue: number
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Stream" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.51.0
   *
   * This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element
   * `Edm.Stream`}. The values for stream properties do not appear in the entity payload. Instead, the values
   * are read or written through URLs.
   *
   * This type only supports reading streams. For this purpose bind the stream property to a control property
   * of type `sap.ui.core.URI`. {#formatValue} will then deliver the correct URL to read the stream.
   */
  export default class Stream extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.Stream`.
     */
    constructor(
      /**
       * Must be `undefined`
       */
      oFormatOptions?: object,
      /**
       * constraints; they are only stored for documentation purpose, since no validation can occur
       */
      oConstraints?: {
        /**
         * if `true`, the server accepts the value `null`
         */
        nullable?: boolean;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Stream with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Stream>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Stream.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.51.0
     *
     * Returns the input value unchanged.
     * See:
     * 	sap.ui.model.SimpleType#formatValue
     *
     * @returns The property's read URL
     */
    formatValue(
      /**
       * the read URL
       */
      sValue: string,
      /**
       * The target type; must be "any" or "string"
       */
      sTargetType: string
    ): string;
    /**
     * @SINCE 1.51.0
     *
     * Returns the type's name.
     * See:
     * 	sap.ui.model.Type#getName
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.51.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.SimpleType#parseValue
     */
    parseValue(): void;
    /**
     * @SINCE 1.51.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.SimpleType#validateValue
     */
    validateValue(): void;
  }
}

declare module "sap/ui/model/odata/type/String" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData primitive type
   * `Edm.String`.
   *
   * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type
   * is represented as a `string`.
   */
  export default class String1 extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.String`.
     */
    constructor(
      /**
       * format options as defined in the interface of {@link sap.ui.model.SimpleType}
       */
      oFormatOptions?: {
        /**
         * if `true`, the empty string `""` is parsed to `""` and `nullable=false` does not mean "input is mandatory".
         * Otherwise the empty string `""` is parsed to `null` which might be rejected.
         */
        parseKeepsEmptyString?: boolean;
      },
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value is handled as a sequence of digits; while formatting leading zeros are removed from
         * the value and while parsing the value is enhanced with leading zeros (if a maxLength constraint is given)
         * or leading zeros are removed from the value (if no maxLength constraint is given); this constraint is
         * supported since 1.35.0.
         *
         * To make this type behave as ABAP type NUMC, use `oConstraints.isDigitSequence=true` together with `oConstraints.maxLength`.
         *
         * A type with `isDigitSequence=true` and `nullable=false` does not parse the empty string to `null` or
         * "", but to "0" instead. This overrides `parseKeepsEmptyString` and means that "input is mandatory" does
         * not hold here.
         */
        isDigitSequence?: boolean | string;
        /**
         * the maximal allowed length of the string; unlimited if not defined
         */
        maxLength?: int | string;
        /**
         * if `true`, the value `null` is accepted. The constraint `nullable=false` is interpreted as "input is
         * mandatory"; empty user input is rejected then (see `parseKeepsEmptyString` and `isDigitSequence` for
         * exceptions).
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.String with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, String1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.String.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type. If the `isDigitSequence` constraint of this type is
     * set to `true`, the target type is 'any' or 'string', and the given value contains only digits, the leading
     * zeros are truncated. If the `isDigitSequence` constraint of this type is set to `true` and the `maxLength`
     * constraint is set, this type behaves as an ABAP type NUMC; in this case, the value '0' is formatted to
     * '', provided the target type is 'string'.
     *
     * @returns the formatted output value in the target type; `undefined` is always formatted to `null`; `null`
     * is formatted to "" if the target type is "string".
     */
    formatValue(
      /**
       * the value to be formatted
       */
      sValue: string,
      /**
       * the target type; may be "any", "boolean", "float", "int" or "string". See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sTargetType: string
    ): string | number | boolean;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value which is expected to be of the given type to a string. If `isDigitSequence` constraint
     * of this type is set to `true` and the parsed string is a sequence of digits, then the parsed string is
     * either enhanced with leading zeros, if `maxLength` constraint is given, or leading zeros are removed
     * from parsed string.
     *
     * Note: Depending on the format option `parseKeepsEmptyString`, an empty input string (`""`) is either
     * parsed to `""` or `null`. If the constraint `nullable` is `false`, a `null` value is rejected with a
     * {@link sap.ui.model.ValidateException ValidateException} raised in the {@link #validateValue} method.
     *
     * @returns the parsed value
     */
    parseValue(
      /**
       * the value to be parsed
       */
      vValue: string | number | boolean,
      /**
       * the source type (the expected type of `vValue`). See {@link sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Time" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import ValidateException from "sap/ui/model/ValidateException";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * @SINCE 1.27.0
   *
   * This class represents the OData V2 primitive type
   * `Edm.Time`.
   *
   * In {@link sap.ui.model.odata.v2.ODataModel ODataModel} this type is represented as an object with two
   * properties:
   * 	`__edmType` with the value "Edm.Time" `ms` with the number of milliseconds since midnight
   */
  export default class Time extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.Time`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.DateFormat.getTimeInstance}
       */
      oFormatOptions?: object,
      /**
       * constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * if `true`, the value `null` is accepted; note that {@link #parseValue} maps `""` to `null`
         */
        nullable?: boolean | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Time with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Time>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Time.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type
     *
     * @returns the formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * the value in model representation to be formatted.
       */
      oValue: {
        /**
         * the type has to be "Edm.Time"
         */
        __edmType: string;
        /**
         * the time in milliseconds
         */
        ms: number;
      },
      /**
       * the target type; may be "any", "string", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): string;
    /**
     * @SINCE 1.111.0
     *
     * Gets the model value according to this type's constraints and format options for the given date object
     * representing a time. Validates the resulting value against the constraints of this type instance.
     *
     * @returns The model representation of the time
     */
    getModelValue(
      /**
       * The date object considering the configured time zone. Must be created via {@link module:sap/ui/core/date/UI5Date.getInstance}
       */
      oDate: Date | UI5Date | null
    ): {
      __edmType: string;

      ms: int;
    } | null;
    /**
     * Returns the type's name.
     *
     * @returns the type's name
     */
    getName(): string;
    /**
     * Parses the given value, which is expected to be of the given type, to a time object.
     *
     * @returns the parsed value as described in {@link #formatValue formatValue}
     */
    parseValue(
      /**
       * the value to be parsed, maps `""` to `null`
       */
      sValue: string,
      /**
       * the source type (the expected type of `sValue`); must be "string", or a type with "string" as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): object;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints.
     */
    validateValue(
      /**
       * the value to be validated
       */
      oValue: object
    ): void;
  }
}

declare module "sap/ui/model/odata/type/TimeOfDay" {
  import ODataType from "sap/ui/model/odata/type/ODataType";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ValidateException from "sap/ui/model/ValidateException";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * @SINCE 1.37.0
   *
   * This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element
   * `Edm.TimeOfDay`}. In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a `string`.
   */
  export default class TimeOfDay extends ODataType {
    /**
     * Constructor for an OData primitive type `Edm.TimeOfDay`.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.DateFormat.getTimeInstance}
       */
      oFormatOptions?: object,
      /**
       * Constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * If `true`, the value `null` is accepted
         */
        nullable?: boolean;
        /**
         * The number of decimal places allowed in the seconds portion of a valid value; must be an integer between
         * 0 and 12, otherwise the default value 0 is used.
         */
        precision?: number;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.TimeOfDay with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimeOfDay>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.TimeOfDay.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.37.0
     *
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value in the target type; `undefined` or `null` are formatted to `null`
     */
    formatValue(
      /**
       * The value to be formatted, which is represented as a string in the model
       */
      sValue: string,
      /**
       * The target type, may be "any", "object" (since 1.69.0), "string", or a type with one of these types as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information
       */
      sTargetType: string
    ): Date | UI5Date | string;
    /**
     * @SINCE 1.111.0
     *
     * Gets the model value according to this type's constraints and format options for the given date object
     * representing a time. Validates the resulting value against the constraints of this type instance.
     *
     * @returns The model representation of the time
     */
    getModelValue(
      /**
       * The date object considering the configured time zone. Must be created via {@link module:sap/ui/core/date/UI5Date.getInstance}
       */
      oDate: Date | UI5Date | null
    ): string | null;
    /**
     * @SINCE 1.37.0
     *
     * Returns the type's name.
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.37.0
     *
     * Parses the given value, which is expected to be of the given type, to a string with an OData V4 Edm.TimeOfDay
     * value.
     *
     * @returns The parsed value
     */
    parseValue(
      /**
       * The value to be parsed, maps `""` to `null`; `Date` objects are expected to represent local time and
       * are supported if and only if source type is "object".
       */
      vValue: Date | string,
      /**
       * The source type (the expected type of `sValue`), must be "string", "object" (since 1.69.0) or a type
       * with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link
       * sap.ui.model.odata.type} for more information.
       */
      sSourceType: string
    ): string;
    /**
     * @SINCE 1.37.0
     *
     * Validates the given value in model representation and meets the type's constraints.
     */
    validateValue(
      /**
       * The value to be validated
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/odata/type/Unit" {
  import Unit1 from "sap/ui/model/type/Unit";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * @SINCE 1.63.0
   *
   * This class represents the `Unit` composite type with the parts measure, unit, and unit customizing. The
   * type may only be used for measure and unit parts from a {@link sap.ui.model.odata.v4.ODataModel} or a
   * {@link sap.ui.model.odata.v2.ODataModel}. The measure part is formatted according to the customizing
   * for the unit. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestUnitsOfMeasure}
   * for OData V4 or by {@link sap.ui.model.odata.ODataMetaModel#requestUnitsOfMeasure} for OData V2 as unit
   * customizing part. See {@link topic:4d1b9d44941f483f9b7f579873d38685 Currency and Unit Customizing in
   * OData V4} resp. {@link topic:6c47b2b39db9404582994070ec3d57a2#loioaa9024c7c5444822a68daeb21a92bd51 Currency
   * and Unit Customizing in OData V2} for more information. If no unit customizing is available, UI5's default
   * formatting applies.
   */
  export default class Unit extends Unit1 {
    /**
     * Constructor for a `Unit` composite type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getUnitInstance}. Format options
       * are immutable, that is, they can only be set once on construction. Format options that are not supported
       * or have a different default are listed below. If the format option `showMeasure` is set to `false`, model
       * messages for the unit of measure are not propagated to the control if the corresponding binding supports
       * the feature of ignoring messages, see {@link sap.ui.model.Binding#supportsIgnoreMessages}, and the corresponding
       * binding parameter is not set manually.
       */
      oFormatOptions?: {
        /**
         * Not supported; the type derives this from its unit customizing part.
         */
        customUnits?: object;
        /**
         * Whether the measure is parsed to a string; set to `false` if the measure's underlying type is represented
         * as a `number`, for example {@link sap.ui.model.odata.type.Int32}
         */
        parseAsString?: boolean;
        /**
         * By default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
        /**
         * Whether the measure is parsed if no unit is entered; defaults to `true` if neither `showMeasure` nor
         * `showNumber` is set to a falsy value, otherwise defaults to `false`
         */
        unitOptional?: boolean;
        /**
         * Defines how an empty string is parsed into the measure. With the default value `0` the measure becomes
         * `0` when an empty string is parsed.
         */
        emptyString?: any;
      },
      /**
       * Only the 'skipDecimalsValidation' constraint is supported. Constraints are immutable, that is, they can
       * only be set once on construction.
       */
      oConstraints?: {
        /**
         * Whether to skip validation of the number of decimals based on the code list customizing; since 1.93.0
         */
        skipDecimalsValidation?: boolean;
      },
      /**
       * Not supported
       */
      aDynamicFormatOptionNames?: string[]
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.type.Unit with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.Unit.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Unit>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.type.Unit.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.63.0
     *
     * Formats the given values of the parts of the `Unit` composite type to the given target type.
     *
     * @returns The formatted output value; `null`, if `aValues` is `undefined` or `null` or if the measure,
     * the unit or the unit customizing contained therein is `undefined`.
     */
    formatValue(
      /**
       * Array of part values to be formatted; contains in the following order: measure, unit, unit customizing.
       * The first call to this method where all parts are set determines the unit customizing; subsequent calls
       * use this customizing, so that the corresponding part may be omitted. Changes to the unit customizing
       * part after this first method call are not considered: The unit customizing for this `Unit` instance remains
       * unchanged.
       */
      aValues: any[],
      /**
       * The target type; must be "string" or a type with "string" as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): string;
    /**
     * @SINCE 1.63.0
     *
     * Returns the type's name.
     *
     * @returns The type's name
     */
    getName(): string;
    /**
     * @SINCE 1.63.0
     *
     * Parses the given string value to an array containing measure and unit.
     * See:
     * 	sap.ui.model.type.Unit#parseValue
     *
     * @returns An array containing measure and unit in this order. Both, measure and unit, are string values
     * unless the format option `parseAsString` is `false`; in this case, the measure is a number.
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: string,
      /**
       * The source type (the expected type of `vValue`); must be "string", or a type with "string" as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.
       */
      sSourceType: string,
      /**
       * Not used
       */
      aCurrentValues?: any[]
    ): any[];
    /**
     * @SINCE 1.63.0
     *
     * Validates whether the given value in model representation as returned by {@link #parseValue} is valid
     * and meets the conditions of this type's unit customizing.
     */
    validateValue(
      /**
       * An array containing measure and unit in this order, see return value of {@link #parseValue}
       */
      aValues: any[]
    ): void;
  }
}

declare module "sap/ui/model/odata/UpdateMethod" {
  /**
   * Different methods for update operations.
   */
  enum UpdateMethod {
    /**
     * Update requests will be send with HTTP method `MERGE`.
     */
    Merge = "MERGE",
    /**
     * Update requests will be send with HTTP method `PUT`.
     */
    Put = "PUT",
  }
  export default UpdateMethod;
}

declare module "sap/ui/model/odata/v2/BatchMode" {
  /**
   * @deprecated (since 1.74.0) - Use {@link sap.ui.model.odata.CountMode} to specify how the count of collections
   * is retrieved. Use the `useBatch` parameter of the {@link sap.ui.model.odata.v2.ODataModel} constructor
   * to specify whether requests are sent in $batch.
   *
   * Different modes for retrieving the count of collections.
   */
  enum BatchMode {
    /**
     * Batch grouping enabled
     */
    Group = "Group",
    /**
     * No batch requests
     */
    None = "None",
  }
  export default BatchMode;
}

declare module "sap/ui/model/odata/v2/Context" {
  import Context1 from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.93.0
   *
   * Implementation of an OData V2 model's context.
   *
   * The context is a pointer to model data. A context for a context binding points to the complete query
   * result. A context for a list binding points to one specific entry in the binding's collection.
   *
   * A context for the OData V2 model cannot be created at will, it has to be retrieved via:
   * 	 - an OData binding
   * 	 - a view element
   * 	 - {@link sap.ui.model.odata.v2.ODataListBinding#create}
   * 	 - {@link sap.ui.model.odata.v2.ODataModel#callFunction}
   * 	 - {@link sap.ui.model.odata.v2.ODataModel#createBindingContext}
   * 	 - {@link sap.ui.model.odata.v2.ODataModel#createEntry}
   */
  export default class Context extends Context1 {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.Context with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Context>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.Context.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.96.0
     *
     * Returns a promise on the creation state of this context if it has been created via {@link sap.ui.model.odata.v2.ODataModel#createEntry}
     * or {@link sap.ui.model.odata.v2.ODataListBinding#create}; otherwise returns `undefined`.
     *
     * As long as the promise is not yet resolved or rejected, the entity represented by this context is transient.
     *
     * Once the promise is resolved, the entity for this context is stored in the back end and {@link #getPath}
     * returns a path including the key predicate of the new entity.
     *
     * If the context has been created via {@link sap.ui.model.odata.v2.ODataListBinding#create} and the entity
     * for this context has been stored in the back end, {@link #created} returns `undefined` after the data
     * has been re-read from the back end and inserted at the right position based on the list binding's filters
     * and sorters. If the context has been created via {@link sap.ui.model.odata.v2.ODataModel#createEntry}
     * and the entity for this context has been stored in the back end, {@link #created} returns `undefined`.
     *
     * @returns A promise for a context which has been created via {@link sap.ui.model.odata.v2.ODataModel#createEntry}
     * or {@link sap.ui.model.odata.v2.ODataListBinding#create}, otherwise `undefined`.
     *
     * When the entity represented by this context has been persisted in the back end, the promise resolves
     * without data.
     *
     * When the entity is deleted before it has been persisted in the back end via {@link sap.ui.model.odata.v2.ODataModel#resetChanges}
     * with the `bDeleteCreatedEntities` parameter set to `true`, the promise rejects with an object `oError`
     * containing the error information, where `oError.aborted === true`.
     */
    created(): Promise<any | undefined> | undefined;
    /**
     * @SINCE 1.101
     *
     * Deletes the OData entity this context points to. Persisted contexts are only removed from the UI after
     * their successful deletion in the back end. In this case, the `Promise` returned by this method is only
     * resolved when the back-end request has been successful. **Example:** A persisted entry in a table control
     * is deleted by this method. It remains visible on the UI and only disappears upon successful deletion
     * in the back end. **Note:** The context must not be used anymore after successful deletion.
     *
     * @returns A promise resolving with `undefined` in case of successful deletion or rejecting with an error
     * in case the deletion failed
     */
    delete(
      /**
       * For a persistent context, a map of parameters as specified for {@link sap.ui.model.odata.v2.ODataModel#remove},
       * except that the `groupId` and `changeSetId` parameters default to the values set via {@link sap.ui.model.odata.v2.ODataModel#setChangeGroups}
       * for the type of the entity to be deleted.
       */
      mParameters?: {
        /**
         * ID of a request group; requests belonging to the same group will be bundled in one batch request. If
         * not provided, the `groupId` defined for the type of the entity to be deleted is used.
         */
        groupId?: string;
        /**
         * ID of the `ChangeSet` that this request should belong to. If not provided, the `changeSetId` defined
         * for the type of the entity to be deleted is used.
         */
        changeSetId?: string;
        /**
         * Defines whether to update all bindings after submitting this change operation, see {@link #setRefreshAfterChange}.
         * If given, this overrules the model-wide `refreshAfterChange` flag for this operation only.
         */
        refreshAfterChange?: boolean;
      }
    ): Promise<undefined>;
    /**
     * @SINCE 1.98.0
     *
     * Returns whether this context is inactive. An inactive context will not be sent to the server until it
     * is activated. From then on it behaves like any other created context. The result of this function can
     * also be accessed via the "@$ui5.context.isInactive" instance annotation at the entity, see {@link sap.ui.model.odata.v2.ODataModel#getProperty}
     * for details.
     * See:
     * 	sap.ui.model.odata.v2.ODataListBinding#create
     * 	sap.ui.model.odata.v2.ODataModel#createEntry
     *
     * @returns Whether this context is inactive
     */
    isInactive(): boolean;
    /**
     * @SINCE 1.94.0
     *
     * For a context created using {@link sap.ui.model.odata.v2.ODataModel#createEntry} or {@link sap.ui.model.odata.v2.ODataListBinding#create},
     * the method returns `true` if the context is transient or `false` if the context is not transient. A transient
     * context represents an entity created on the client which has not been persisted in the back end. The
     * result of this function can also be accessed via the "@$ui5.context.isTransient" instance annotation
     * at the entity, see {@link sap.ui.model.odata.v2.ODataModel#getProperty} for details.
     *
     * @returns
     * 	 - `true`: if the context has been created via {@link sap.ui.model.odata.v2.ODataModel#createEntry}
     * 			or {@link sap.ui.model.odata.v2.ODataListBinding#create} and is not yet persisted in the back end,
     * 	 - `false`: if the context has been created via {@link sap.ui.model.odata.v2.ODataListBinding#create},
     * 			data has been successfully persisted in the back end and the data is still displayed in the area of the
     * 			inline creation rows, and
     * 	 - `undefined`: otherwise
     */
    isTransient(): boolean | undefined;
  }
}

declare module "sap/ui/model/odata/v2/ODataAnnotations" {
  import EventProvider from "sap/ui/base/EventProvider";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.37.0
   *
   * Annotation loader for OData V2 services
   */
  export default class ODataAnnotations extends EventProvider {
    /**
     * Creates a new instance of the ODataAnnotations annotation loader.
     */
    constructor(
      /**
       * Metadata object with the metadata information needed to parse the annotations
       */
      oMetadata: ODataMetadata,
      /**
       * Obligatory options
       */
      mOptions: {
        /**
         * One or several annotation sources; see {@link #addSource} for more details
         */
        source:
          | string
          | Record<string, any>
          | string[]
          | Array<Record<string, any>>;
        /**
         * A map of headers to be sent with every request; see {@link #setHeaders} for more details
         */
        headers: Record<string, string>;
        /**
         * Whether the metadata document will not be parsed for annotations
         */
        skipMetadata: boolean;
        /**
         * A valid cache key
         */
        cacheKey?: string;
      }
    );
    /**
     * @deprecated (since 1.37.0) - only kept for compatibility with V1 API, use {@link #getData} instead.
     *
     * Returns the parsed and merged annotation data object.
     */
    getAnnotationsData: undefined;

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.ODataAnnotations with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataAnnotations>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.ODataAnnotations.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Adds one or several sources to the annotation loader. Sources will be loaded instantly but merged only
     * after the previously added source has either been successfully merged or failed.
     *
     * @returns The promise to (load,) parse and merge the given source(s). The Promise resolves with an array
     * of maps containing the properties `source` and `data`; see the parameters of the `success` event for
     * more details. In case at least one source could not be (loaded,) parsed or merged, the promise fails
     * with an array of objects containing Errors and/or Success objects.
     */
    addSource(
      /**
       * One or several Annotation source or array of annotation sources; an annotation source is either a string
       * containing a URL or an object of type {@link sap.ui.model.odata.v2.ODataAnnotations.Source}.
       */
      vSource: string | string[] | Source | Source[]
    ): Promise<any>;
    /**
     * Attaches the given callback to the `allFailed` event.
     *
     * This event exists for compatibility with the old Annotation loader. It is fired when no annotation from
     * a group of sources was successfully (loaded,) parsed and merged. The parameter `result` will be set on
     * the event argument and contains an array of Errors in the order in which the sources had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachAllFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the `allFailed` event.
     *
     * This event exists for compatibility with the old Annotation loader. It is fired when no annotation from
     * a group of sources was successfully (loaded,) parsed and merged. The parameter `result` will be set on
     * the event argument and contains an array of Errors in the order in which the sources had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachAllFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:error error} event, which is fired whenever a source
     * cannot be loaded, parsed or merged into the annotation data.
     *
     * The following parameters will be set on the event object that is given to the callback function: `source`
     * - A map containing the properties `type` - containing either "url" or "xml" - and `data` containing the
     * data given as source, either a URL or an XML string depending on how the source was added. `error` -
     * An Error object describing the problem that occurred
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:error error} event, which is fired whenever a source
     * cannot be loaded, parsed or merged into the annotation data.
     *
     * The following parameters will be set on the event object that is given to the callback function: `source`
     * - A map containing the properties `type` - containing either "url" or "xml" - and `data` containing the
     * data given as source, either a URL or an XML string depending on how the source was added. `error` -
     * An Error object describing the problem that occurred
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:failed failed} event.
     *
     * This event is fired when at least one annotation from a group of sources was not successfully (loaded,)
     * parsed or merged. The parameter `result` will be set on the event argument and contains an array of Errors
     * in the order in which the sources had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:failed failed} event.
     *
     * This event is fired when at least one annotation from a group of sources was not successfully (loaded,)
     * parsed or merged. The parameter `result` will be set on the event argument and contains an array of Errors
     * in the order in which the sources had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:loaded loaded} event.
     *
     * This event is fired when all annotations from a group of sources was successfully (loaded,) parsed and
     * merged. The parameter `result` will be set on the event argument and contains an array of all loaded
     * sources as well as Errors in the order in which they had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:loaded loaded} event.
     *
     * This event is fired when all annotations from a group of sources was successfully (loaded,) parsed and
     * merged. The parameter `result` will be set on the event argument and contains an array of all loaded
     * sources as well as Errors in the order in which they had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the `someLoaded` event.
     *
     * This event exists for compatibility with the old annotation loader. It is fired when at least one annotation
     * from a group of sources was successfully (loaded,) parsed and merged. The parameter `result` will be
     * set on the event argument and contains an array of all loaded sources as well as Errors in the order
     * in which they had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachSomeLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the `someLoaded` event.
     *
     * This event exists for compatibility with the old annotation loader. It is fired when at least one annotation
     * from a group of sources was successfully (loaded,) parsed and merged. The parameter `result` will be
     * set on the event argument and contains an array of all loaded sources as well as Errors in the order
     * in which they had been added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachSomeLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:success success} event, which is fired whenever a source
     * has been successfully (loaded,) parsed and merged into the annotation data.
     *
     * The following parameters are set on the event object that is given to the callback function: `source`
     * - A map containing the properties `type` - containing either "url" or "xml" - and `data` containing the
     * data given as source, either a URL or an XML string depending on how the source was added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachSuccess(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches the given callback to the {@link #event:success success} event, which is fired whenever a source
     * has been successfully (loaded,) parsed and merged into the annotation data.
     *
     * The following parameters are set on the event object that is given to the callback function: `source`
     * - A map containing the properties `type` - containing either "url" or "xml" - and `data` containing the
     * data given as source, either a URL or an XML string depending on how the source was added.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.odata.v2.ODataAnnotations` itself.
     *
     * @returns Reference to `this` to allow method chaining
     */
    attachSuccess(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `ODataAnnotations` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `allFailed` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachAllFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `error` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `failed` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `loaded` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `someLoaded` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachSomeLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the given callback from the `success` event.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` to allow method chaining
     */
    detachSuccess(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Returns the parsed and merged annotation data object.
     *
     * @returns The annotation data
     */
    getData(): object;
    /**
     * Returns a map of custom headers that are sent with every request to an annotation URL.
     *
     * @returns A map of all custom headers.
     */
    getHeaders(): Record<string, string>;
    /**
     * Returns a promise that resolves when the added annotation sources were successfully processed.
     *
     * @returns A promise that resolves after the last added sources have been processed
     */
    loaded(): Promise<any>;
    /**
     * Set custom headers which are provided in a key/value map. These headers are used for all requests. The
     * "Accept-Language" header cannot be modified and is set using the core's language setting.
     *
     * To remove these headers, simply set the `mHeaders` parameter to `{}`. Note that when calling this method
     * again, all previous custom headers are removed, unless they are specified again in the `mCustomHeaders`
     * parameter.
     */
    setHeaders(
      /**
       * the header name/value map.
       */
      mHeaders: Record<string, string>
    ): void;
  }
  /**
   * Parameters of the `error` event.
   */
  export type errorParameters = {
    /**
     * The error that occurred. Also contains the properties from {@link sap.ui.model.odata.v2.ODataAnnotations.Source}
     * that could be filled up to that point
     */
    result: Error;
  };

  /**
   * Parameters of the `failed` event.
   */
  export type failedParameters = {
    /**
     * An array of Errors (@see sap.ui.model.v2.ODataAnnotations#error) that occurred while loading a group
     * of annotations
     */
    result: Error[];
  };

  /**
   * Parameters of the `loaded` event.
   */
  export type loadedParameters = {
    /**
     * An array of results and Errors (see {@link sap.ui.model.v2.ODataAnnotations#success} and {@link sap.ui.model.v2.ODataAnnotations#error})
     * that occurred while loading a group of annotations
     */
    result: Source[] | Error[] | any;
  };

  /**
   * An annotation source, containing either a URL to be loaded or an XML string to be parsed.
   */
  export type Source = {
    /**
     * The source type. Either "url" or "xml".
     */
    type: string;
    /**
     * The data or a Promise that resolves with the data. In case the type is set to "url" the data must be
     * a URL, in case it is set to "xml" the data must be an XML string.
     */
    data: string | Promise<any>;
    /**
     * (Set internally, available in event-callback) The XML string of the annotation source
     */
    xml?: string;
    /**
     * (Set internally, available in event-callback) The parsed XML document of the annotation source
     */
    document?: Document;
    /**
     * (Set internally, available in event-callback) The parsed Annotations object of the annotation source
     */
    annotations?: Object;
  };

  /**
   * Parameters of the `success` event
   */
  export type successParameters = {
    /**
     * The source type. Either "url" or "xml".
     */
    result: Source;
  };
}

declare module "sap/ui/model/odata/v2/ODataContextBinding" {
  import ContextBinding from "sap/ui/model/ContextBinding";

  import ODataModel from "sap/ui/model/odata/v2/ODataModel";

  import Context from "sap/ui/model/Context";

  import Context1 from "sap/ui/model/odata/v2/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Context binding for an OData V2 model.
   */
  export default class ODataContextBinding extends ContextBinding {
    constructor(
      /**
       * The OData V2 model
       */
      oModel: ODataModel,
      /**
       * The binding path in the model
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path.
       */
      oContext?: Context,
      /**
       * A map which contains additional parameters for the binding.
       */
      mParameters?: {
        /**
         * Whether a preliminary context is created
         */
        createPreliminaryContext?: boolean;
        /**
         * An optional map of custom query parameters. Custom parameters must not start with `$`.
         */
        custom?: Record<string, string>;
        /**
         * Value for the OData `$expand` query option parameter which is included in the request after URL encoding
         * of the given value.
         */
        expand?: string;
        /**
         * The group id to be used for requests originating from the binding
         */
        groupId?: string;
        /**
         * Value for the OData `$select` query option parameter which is included in the request after URL encoding
         * of the given value.
         */
        select?: string;
        /**
         * Whether a preliminary context is used. When set to `true`, the model can bundle the OData calls for dependent
         * bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}.
         */
        usePreliminaryContext?: boolean;
        /**
         * **Deprecated**, use `groupId` instead. Sets the batch group id to be used for requests originating from
         * the binding.
         */
        batchGroupId?: string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataContextBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.ODataContextBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the bound context.
     *
     * @returns The context object used by this context binding or `null`
     */
    getBoundContext(): Context1 | null;
    /**
     * See:
     * 	sap.ui.model.ContextBinding.prototype.refresh
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean,
      /**
       * The group Id for the refresh
       */
      sGroupId?: string
    ): void;
    /**
     * See:
     * 	sap.ui.model.ContextBinding.prototype.refresh
     */
    refresh(
      /**
       * The group Id for the refresh
       */
      sGroupId?: string
    ): void;
  }
}

declare module "sap/ui/model/odata/v2/ODataListBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  import ODataModel from "sap/ui/model/odata/v2/ODataModel";

  import Context from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import CountMode from "sap/ui/model/odata/CountMode";

  import OperationMode from "sap/ui/model/odata/OperationMode";

  import Context1 from "sap/ui/model/odata/v2/Context";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import Message from "sap/ui/core/message/Message";

  /**
   * List binding for an OData V2 model.
   */
  export default class ODataListBinding extends ListBinding {
    constructor(
      /**
       * The OData V2 model
       */
      oModel: ODataModel,
      /**
       * The binding path in the model
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path.
       */
      oContext?: Context,
      /**
       * Initial sort order, can be either a sorter or an array of sorters.
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filters, can be either a filter or an array of filters.
       */
      aFilters?: Filter | Filter[],
      /**
       * A map which contains additional parameters for the binding.
       */
      mParameters?: {
        /**
         * Defines the count mode of the binding; if not specified, the default count mode of the `oModel` is applied.
         */
        countMode?: CountMode | keyof typeof CountMode;
        /**
         * A key used in combination with the resolved path of the binding to identify the entities created by the
         * binding's {@link #create} method.
         *
         * **Note:** Different controls or control aggregation bindings to the same collection must have different
         * `createdEntitiesKey` values.
         */
        createdEntitiesKey?: string;
        /**
         * An optional map of custom query parameters. Custom parameters must not start with `$`.
         */
        custom?: Record<string, string>;
        /**
         * Value for the OData `$expand` query option parameter which is included in the data request after URL
         * encoding of the given value.
         */
        expand?: string;
        /**
         * Turns on the fault tolerance mode, data is not reset if a back-end request returns an error.
         */
        faultTolerant?: boolean;
        /**
         * The group id to be used for requests originating from the binding
         */
        groupId?: string;
        /**
         * The operation mode of the binding
         */
        operationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Value for the OData `$select` query option parameter which is included in the data request after URL
         * encoding of the given value.
         */
        select?: string;
        /**
         * Whether the list binding only requests transition messages from the back end. If messages for entities
         * of this collection need to be updated, use {@link sap.ui.model.odata.v2.ODataModel#read} on the parent
         * entity corresponding to the list binding's context, with the parameter `updateAggregatedMessages` set
         * to `true`.
         */
        transitionMessagesOnly?: boolean;
        /**
         * Whether a preliminary context is used. When set to `true`, the model can bundle the OData calls for dependent
         * bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}.
         */
        usePreliminaryContext?: boolean;
        /**
         * **Deprecated**, use `groupId` instead. Sets the batch group id to be used for requests originating from
         * the binding.
         */
        batchGroupId?: string;
        /**
         * Deprecated since 1.102.0, as {@link sap.ui.model.odata.OperationMode.Auto} is deprecated; the threshold
         * that defines how many entries should be fetched at least by the binding if `operationMode` is set to
         * `Auto`.
         */
        threshold?: int;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.ODataListBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.98.0
     *
     * Attach event handler `fnFunction` to the 'createActivate' event of this binding.
     */
    attachCreateActivate(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * @SINCE 1.98.0
     *
     * Creates a new entity for this binding's collection via {@link sap.ui.model.odata.v2.ODataModel#createEntry}
     * using the parameters given in `mParameters` and inserts it at the list position specified by the `bAtEnd`
     * parameter. See {@link topic:6c47b2b39db9404582994070ec3d57a2#loio4c4cd99af9b14e08bb72470cc7cabff4 Creating
     * Entities documentation} for comprehensive information on the topic.
     *
     * Note: This method requires that the model metadata has been loaded; see {@link sap.ui.model.odata.v2.ODataModel#metadataLoaded}.
     *
     * Since 1.108.0, this method supports deep create, which means it may be called if this binding's context
     * is transient. The restrictions specified for {@link sap.ui.model.odata.v2.ODataModel#createEntry} regarding
     * deep create apply.
     *
     * @returns The context representing the created entity
     */
    create(
      /**
       * The initial data for the created entity; see the `mParameters.properties` parameter of {@link sap.ui.model.odata.v2.ODataModel#createEntry}
       */
      oInitialData?: object,
      /**
       * Whether the entity is inserted at the end of the list. The first insertion determines the overall position
       * of created contexts within the list. Every succeeding insertion is relative to the created contexts within
       * this list. Note: the order of created contexts in the binding does not necessarily correspond to the
       * order of the resulting back end creation requests.
       */
      bAtEnd?: boolean,
      /**
       * A map of parameters as specified for {@link sap.ui.model.odata.v2.ODataModel#createEntry}, where only
       * the subset given below is supported. In case of deep create, **none** of the parameters in `mParameters`
       * must be set.
       */
      mParameters?: {
        /**
         * The ID of the `ChangeSet` that this request should belong to
         */
        changeSetId?: string;
        /**
         * The error callback function
         */
        error?: Function;
        /**
         * A comma-separated list of navigation properties to be expanded for the newly created entity; see {@link
         * sap.ui.model.odata.v2.ODataModel#createEntry}; **Note:** if no expand parameter is given, the expand
         * parameter of this binding is used; see {@link sap.ui.model.odata.v2.ODataModel#bindList}
         */
        expand?: string;
        /**
         * The ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * Whether the created context is inactive. An inactive context will only be sent to the server after the
         * first property update. From then on it behaves like any other created context.
         */
        inactive?: boolean;
        /**
         * The success callback function
         */
        success?: Function;
      }
    ): Context1;
    /**
     * @SINCE 1.98.0
     *
     * Detach event handler `fnFunction` from the 'createActivate' event of this binding.
     */
    detachCreateActivate(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): void;
    /**
     * Filters the list.
     *
     * When using `sap.ui.model.Filter` the filters are first grouped according to their binding path. All filters
     * belonging to the same group are combined with OR and after that the results of all groups are combined
     * with AND. Usually this means, all filters applied to a single table column are combined with OR, while
     * filters on different table columns are combined with AND. Please note that a custom filter function is
     * only supported with operation mode `sap.ui.model.odata.OperationMode.Client`.
     *
     * Entities that have been created via {@link #create} and saved in the back end are removed from the creation
     * rows area and inserted at the right position based on the current filters and sorters.
     *
     * @returns Reference to `this` to facilitate method chaining or a boolean success indicator
     */
    filter(
      /**
       * Single filter or array of filter objects
       */
      aFilters?: Filter | Filter[],
      /**
       * Type of the filter which should be adjusted. If it is not given, type `Control` is assumed
       */
      sFilterType?: FilterType | keyof typeof FilterType,
      /**
       * Whether the success indicator should be returned instead of `this`
       */
      bReturnSuccess?: boolean
    ): this;
    /**
     * @SINCE 1.98.0
     *
     * Returns all current contexts of this list binding in no special order. Just like {@link #getCurrentContexts},
     * this method does not request any data from a back end and does not change the binding's state. In contrast
     * to {@link #getCurrentContexts}, it does not only return those contexts that were last requested by a
     * control, but all contexts that are currently available in the binding.
     *
     * @returns All current contexts of this list binding, in no special order
     */
    getAllCurrentContexts(): Context1[];
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Return contexts for the list.
     *
     * @returns The array of already available contexts with the first entry containing the context for `iStartIndex`
     */
    getContexts(
      /**
       * The index where to start the retrieval of contexts
       */
      iStartIndex?: int,
      /**
       * The number of contexts to retrieve beginning from the start index; defaults to the model's size limit,
       * see {@link sap.ui.model.Model#setSizeLimit}, or to the binding's final length
       */
      iLength?: int,
      /**
       * The maximum number of contexts to read before and after the given range; with this, controls can prefetch
       * data that is likely to be needed soon, e.g. when scrolling down in a table
       */
      iMaximumPrefetchSize?: int,
      /**
       * Whether this call keeps the result of {@link #getCurrentContexts} untouched; since 1.102.0.
       */
      bKeepCurrent?: boolean
    ): Context1[];
    /**
     * @SINCE 1.98.0
     *
     * Returns the count of active entries in the list if the list length is final, otherwise `undefined`. Contrary
     * to {#getLength}, this method does not consider inactive entries which are created via {#create}.
     * See:
     * 	#create
     * 	#getLength
     * 	#isLengthFinal
     * 	sap.ui.model.odata.v2.Context#isInactive
     *
     * @returns The count of entries
     */
    getCount(): number | undefined;
    /**
     * @SINCE 1.24
     *
     * Get a download URL with the specified format considering the sort/filter/custom parameters.
     *
     * @returns URL which can be used for downloading
     */
    getDownloadUrl(
      /**
       * Value for the $format Parameter
       */
      sFormat: string
    ): string;
    /**
     * Return the length of the list.
     *
     * In case the final length is unknown (e.g. when searching on a large dataset), this will return an estimated
     * length.
     *
     * @returns The length
     */
    getLength(): int;
    /**
     * Initialize binding.
     *
     * Fires a change if data is already available ($expand) or a refresh. If metadata is not yet available,
     * do nothing, method will be called again when metadata is loaded.
     *
     * @returns oBinding The binding instance
     */
    initialize(): ODataListBinding;
    /**
     * @SINCE 1.98.0
     *
     * Returns whether the overall position of created entries is at the end of the list; this is determined
     * by the first call to {@link sap.ui.model.odata.v2.ODataListBinding#create}.
     *
     * @returns Whether the overall position of created contexts is at the end, or `undefined` if there are
     * no created contexts
     */
    isFirstCreateAtEnd(): boolean | undefined;
    /**
     * Refreshes the binding, check whether the model data has been changed and fire change event if this is
     * the case. For server side models this should refetch the data from the server. To update a control, even
     * if no data has been changed, e.g. to reset a control after failed validation, use the parameter `bForceUpdate`.
     *
     * Entities that have been created via {@link #create} and saved in the back end are removed from the creation
     * rows area and inserted at the right position based on the current filters and sorters.
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean,
      /**
       * The group Id for the refresh
       */
      sGroupId?: string
    ): void;
    /**
     * Refreshes the binding, check whether the model data has been changed and fire change event if this is
     * the case. For server side models this should refetch the data from the server. To update a control, even
     * if no data has been changed, e.g. to reset a control after failed validation, use the parameter `bForceUpdate`.
     *
     * Entities that have been created via {@link #create} and saved in the back end are removed from the creation
     * rows area and inserted at the right position based on the current filters and sorters.
     */
    refresh(
      /**
       * The group Id for the refresh
       */
      sGroupId?: string
    ): void;
    /**
     * @SINCE 1.77.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Requests a {@link sap.ui.model.Filter} object which can be used to filter the list binding by entries
     * with model messages. With the filter callback, you can define if a message is considered when creating
     * the filter for entries with messages.
     *
     * The resulting filter does not consider application or control filters specified for this list binding
     * in its constructor or in its {@link #filter} method; add filters which you want to keep with the "and"
     * conjunction to the resulting filter before calling {@link #filter}.
     *
     * @returns A Promise that resolves with a {@link sap.ui.model.Filter} representing the entries with messages;
     * it resolves with `null` if the binding is not resolved or if there is no message for any entry
     */
    requestFilterForMessages(
      /**
       * A callback function to filter only relevant messages. The callback returns whether the given {@link sap.ui.core.message.Message}
       * is considered. If no callback function is given, all messages are considered.
       */
      fnFilter?: (p1: Message) => boolean
    ): Promise<Filter | null>;
    /**
     * Sorts the list.
     *
     * Entities that have been created via {@link #create} and saved in the back end are removed from the creation
     * rows area and inserted at the right position based on the current filters and sorters.
     *
     * @returns Reference to `this` to facilitate method chaining or the success indicator
     */
    sort(
      /**
       * A new sorter or an array of sorters which define the sort order
       */
      aSorters: Sorter | Sorter[],
      /**
       * Whether the success indicator should be returned instead of `this`
       */
      bReturnSuccess?: boolean
    ): this;
  }
}

declare module "sap/ui/model/odata/v2/ODataModel" {
  import Model from "sap/ui/model/Model";

  import BindingMode from "sap/ui/model/BindingMode";

  import CountMode from "sap/ui/model/odata/CountMode";

  import OperationMode from "sap/ui/model/odata/OperationMode";

  import UpdateMethod from "sap/ui/model/odata/UpdateMethod";

  import Context from "sap/ui/model/Context";

  import ODataContextBinding from "sap/ui/model/odata/v2/ODataContextBinding";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import ODataListBinding from "sap/ui/model/odata/v2/ODataListBinding";

  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import ODataTreeBinding from "sap/ui/model/odata/v2/ODataTreeBinding";

  import Context1 from "sap/ui/model/odata/v2/Context";

  import ODataAnnotations from "sap/ui/model/odata/v2/ODataAnnotations";

  import ODataMetadata from "sap/ui/model/odata/ODataMetadata";

  import MessageScope from "sap/ui/model/odata/MessageScope";

  import Metadata from "sap/ui/base/Metadata";

  import ODataMetaModel from "sap/ui/model/odata/ODataMetaModel";

  /**
   * @SINCE 1.24.0
   *
   * Model implementation based on the OData protocol.
   *
   * See chapter {@link topic:6c47b2b39db9404582994070ec3d57a2 OData V2 Model} for a general introduction.
   *
   * This model is not prepared to be inherited from.
   */
  export default class ODataModel extends Model {
    /**
     * Constructor for a new ODataModel.
     */
    constructor(
      /**
       * Base URI of the service to request data from; additional URL parameters appended here will be appended
       * to every request. If you pass an object, it will be interpreted as the parameter object (second parameter).
       * Then `mParameters.serviceUrl` becomes a mandatory parameter.
       */
      vServiceUrl: string | object,
      /**
       * Map which contains the following parameter properties:
       */
      mParameters?: {
        /**
         * The URL (or an array of URLs) from which the annotation metadata should be loaded
         */
        annotationURI?: string | string[];
        /**
         * Set this array to make custom response headers bindable via the entity's "__metadata/headers" property
         */
        bindableResponseHeaders?: string[];
        /**
         * Whether the model tries to calculate canonical URLs to request the data.
         *
         * **For example:** An application displays the details of a sales order in a form with an absolute binding
         * path `/SalesOrderSet("1")`. The form embeds a table for the sales order line items with a relative binding
         * path `ToLineItems`. If the user selects a sales order line item (e.g. Item "10"), the details of this
         * sales order line item are displayed in another form, which also contains a table for the sales order
         * line item's schedules with a relative binding path `ToSchedules`.
         *
         * If the `canonicalRequests` parameter has the default value `false`, then the OData model would request
         * the data for the sales order line item's details form with the following requests:
         * ```javascript
         *
         *   GET /<serviceUrl>/SalesOrderSet("1")/ToLineItems(SalesOrderID="1",ItemPosition="10")
         *   GET /<serviceUrl>/SalesOrderSet("1")/ToLineItems(SalesOrderID="1",ItemPosition="10")/ToSchedules```
         *
         *
         * Some back-end implementations do not support more than one navigation property in the resource URL. In
         * this case, set the `canonicalRequests` parameter to `true`. The OData model then converts the long resource
         * URLs to canonical URLs and requests the data for the sales order line item's details form with the following
         * requests:
         * ```javascript
         *
         *   GET /<serviceUrl>/SalesOrderLineItemsSet(SalesOrderID="1",ItemPosition="10")
         *   GET /<serviceUrl>/SalesOrderLineItemsSet(SalesOrderID="1",ItemPosition="10")/ToSchedules```
         */
        canonicalRequests?: boolean;
        /**
         * Sets the default binding mode for the model
         */
        defaultBindingMode?: BindingMode | keyof typeof BindingMode;
        /**
         * Sets the default count mode for the model
         */
        defaultCountMode?: CountMode | keyof typeof CountMode;
        /**
         * Sets the default operation mode for the model
         */
        defaultOperationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Default update method which is used for all update requests
         */
        defaultUpdateMethod?: UpdateMethod;
        /**
         * Set this flag to `true` if your service does not support `HEAD` requests for fetching the service document
         * (and thus the security token) to avoid sending a `HEAD`-request before falling back to `GET`
         */
        disableHeadRequestForToken?: boolean;
        /**
         * Set this flag to `true` if you don´t want to start a new soft state session with context ID (`SID`) through
         * header mechanism. This is useful if you want to share a `SID` between different browser windows
         */
        disableSoftStateHeader?: boolean;
        /**
         * Whether the security token is requested at the earliest convenience, if parameter `tokenHandling` is
         * `true`; supported since 1.79.0.
         */
        earlyTokenRequest?: boolean;
        /**
         * Map of custom headers (name/value pairs) like {"myHeader":"myHeaderValue",...}
         */
        headers?: Record<string, string>;
        /**
         * **Experimental** as of version 1.112.0; may change behavior or be removed in future versions. Whether
         * to ignore all annotations from service metadata, so that they are not available as V4 annotations in
         * this model's metamodel; see {@link #getMetaModel}. Only annotations from annotation files are loaded;
         * see the `annotationURI` parameter.
         */
        ignoreAnnotationsFromMetadata?: boolean;
        /**
         * If set to `true`, request payloads will be JSON, XML for `false`
         */
        json?: boolean;
        /**
         * Whether the `metadataLoaded` event will be fired only after all annotations have been loaded as well
         */
        loadAnnotationsJoined?: boolean;
        /**
         * Please use the following string format e.g. '2.0' or '3.0'. OData version supported by the ODataModel:
         * '2.0'
         */
        maxDataServiceVersion?: string;
        /**
         * Map of namespace aliases (alias => URI) that can be used in metadata binding paths; each alias is mapped
         * to a corresponding namespace URI; when an alias is used in a metadata binding path, it addresses a metadata
         * extension that belongs to the corresponding namespace URI; if `metadataNamespaces` is not given, the
         * following default mappings will be used:
         * 	 - `"sap": "sap:"http://www.sap.com/Protocols/SAPData"`
         * 	 - `"m": "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"`
         * 	 - `"": "http://schemas.microsoft.com/ado/2007/06/edmx`
         */
        metadataNamespaces?: Record<string, string>;
        /**
         * Map of URL parameters for metadata requests - only attached to a `$metadata` request
         */
        metadataUrlParams?: Record<string, string>;
        /**
         * Whether technical messages should always be treated as persistent, since 1.83.0
         */
        persistTechnicalMessages?: boolean;
        /**
         * Whether a preliminary context will be created/used by a binding. When set to `true`, the model can bundle
         * the OData calls for dependent bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}
         */
        preliminaryContext?: boolean;
        /**
         * Enable/disable automatic refresh after change operations
         */
        refreshAfterChange?: boolean;
        /**
         * Whether to sequentialize all requests, needed in case the service cannot handle parallel requests
         */
        sequentializeRequests?: boolean;
        /**
         * Base URI of the service to request data from; this property is mandatory when the first method parameter
         * `serviceUrl` is omitted, but ignored otherwise
         */
        serviceUrl?: string;
        /**
         * Map of URL parameters (name/value pairs) - these parameters will be attached to all requests, except
         * for the `$metadata` request
         */
        serviceUrlParams?: Record<string, string>;
        /**
         * Enable/disable security token handling
         */
        tokenHandling?: boolean;
        /**
         * Send security token for GET requests in case read access logging is activated for the OData Service in
         * the backend.
         */
        tokenHandlingForGet?: boolean;
        /**
         * Whether all requests should be sent in batch requests
         */
        useBatch?: boolean;
        /**
         * Experimental - `true` when user credentials are to be included in a cross-origin request; please note
         * that this only works if all requests are asynchronous
         */
        withCredentials?: boolean;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. Password for the
         * service.
         */
        password?: string;
        /**
         * **Deprecated** This parameter does not prevent creation of annotations from the metadata document in
         * this model's metamodel. Whether to skip the automated loading of annotations from the metadata document.
         * Loading annotations from metadata does not have any effects (except the lost performance by invoking
         * the parser) if there are no annotations inside the metadata document
         */
        skipMetadataAnnotationParsing?: boolean;
        /**
         * **Deprecated** for security reasons. Use strong server side authentication instead. UserID for the service.
         */
        user?: string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.ODataModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds (a) new URL(s) whose content should be parsed as OData annotations, which are then merged into the
     * annotations object which can be retrieved by calling the {@link #getServiceAnnotations}-method. If a
     * `$metadata` URL is passed, the data will also be merged into the metadata object, which can be reached
     * by calling the {@link #getServiceMetadata} method.
     *
     * @returns The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
     * least one fails to load. If this promise resolves it returns an object with the following properties:
     * `annotations`: The annotation object `entitySets`: An array of EntitySet objects containing the newly
     * merged EntitySets from a `$metadata` requests. The structure is the same as in the metadata object reached
     * by the `getServiceMetadata()` method. For non-`$metadata` requests the array will be empty.
     */
    addAnnotationUrl(
      /**
       * Either one URL as string or an array of URL strings
       */
      vUrl: string | string[]
    ): Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adds new XML content to be parsed for OData annotations, which are then merged into the annotations object
     * which can be retrieved by calling the {@link #getServiceAnnotations}-method.
     *
     * @returns The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors
     * occur
     */
    addAnnotationXML(
      /**
       * The string that should be parsed as annotation XML
       */
      sXMLContent: string,
      /**
       * Whether not to fire annotationsLoaded event on the annotationParser
       */
      bSuppressEvents?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.42
     *
     * Returns a promise that resolves with an array containing information about the initially loaded annotations.
     *
     * **Important**: This covers the annotations that were given to the model constructor, not the ones that
     * might have been added later on using the protected API method {@link #addAnnotationUrl}. In order to
     * get information about those, the event `annotationsLoaded` can be used.
     *
     * @returns A promise that resolves with an array containing information about the initially loaded annotations
     */
    annotationsLoaded(): Promise<any>;
    /**
     * Attaches event handler `fnFunction` to the `annotationsFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `annotationsFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `annotationsLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `annotationsLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachAnnotationsLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestCompleted batchRequestCompleted}
     * event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestCompleted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestCompleted batchRequestCompleted}
     * event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestCompleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestFailed batchRequestFailed} event
     * of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestFailed batchRequestFailed} event
     * of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestSent batchRequestSent} event of
     * this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestSent(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:batchRequestSent batchRequestSent} event of
     * this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachBatchRequestSent(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `metadataFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `metadataFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `metadataLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the `metadataLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachMetadataLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.ui.model.odata.v2.ODataModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Creates a context binding for this model.
     * See:
     * 	sap.ui.model.Model.prototype.bindContext
     *
     * @returns The new context binding
     */
    bindContext(
      /**
       * The binding path in the model
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path.
       */
      oContext?: Context,
      /**
       * A map which contains additional parameters for the binding.
       */
      mParameters?: {
        /**
         * Whether a preliminary context is created
         */
        createPreliminaryContext?: boolean;
        /**
         * An optional map of custom query parameters. Custom parameters must not start with `$`.
         */
        custom?: Record<string, string>;
        /**
         * Value for the OData `$expand` query option parameter which is included in the request after URL encoding
         * of the given value.
         */
        expand?: string;
        /**
         * The group id to be used for requests originating from the binding
         */
        groupId?: string;
        /**
         * Value for the OData `$select` query option parameter which is included in the request after URL encoding
         * of the given value.
         */
        select?: string;
        /**
         * Whether a preliminary context is used. When set to `true`, the model can bundle the OData calls for dependent
         * bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}.
         */
        usePreliminaryContext?: boolean;
        /**
         * **Deprecated**, use `groupId` instead. Sets the batch group id to be used for requests originating from
         * the binding.
         */
        batchGroupId?: string;
      }
    ): ODataContextBinding;
    /**
     * Creates a new list binding for this model.
     * See:
     * 	sap.ui.model.Model.prototype.bindList
     *
     * @returns The new list binding
     */
    bindList(
      /**
       * The binding path in the model
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path.
       */
      oContext?: Context,
      /**
       * Initial sort order, can be either a sorter or an array of sorters.
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Predefined filters, can be either a filter or an array of filters.
       */
      aFilters?: Filter | Filter[],
      /**
       * A map which contains additional parameters for the binding.
       */
      mParameters?: {
        /**
         * Defines the count mode of the binding; if not specified, the default count mode of the `oModel` is applied.
         */
        countMode?: CountMode | keyof typeof CountMode;
        /**
         * A key used in combination with the resolved path of the binding to identify the entities created by the
         * binding's {@link #create} method.
         *
         * **Note:** Different controls or control aggregation bindings to the same collection must have different
         * `createdEntitiesKey` values.
         */
        createdEntitiesKey?: string;
        /**
         * An optional map of custom query parameters. Custom parameters must not start with `$`.
         */
        custom?: Record<string, string>;
        /**
         * Value for the OData `$expand` query option parameter which is included in the data request after URL
         * encoding of the given value.
         */
        expand?: string;
        /**
         * Turns on the fault tolerance mode, data is not reset if a back-end request returns an error.
         */
        faultTolerant?: boolean;
        /**
         * The group id to be used for requests originating from the binding
         */
        groupId?: string;
        /**
         * The operation mode of the binding
         */
        operationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Value for the OData `$select` query option parameter which is included in the data request after URL
         * encoding of the given value.
         */
        select?: string;
        /**
         * Whether the list binding only requests transition messages from the back end. If messages for entities
         * of this collection need to be updated, use {@link sap.ui.model.odata.v2.ODataModel#read} on the parent
         * entity corresponding to the list binding's context, with the parameter `updateAggregatedMessages` set
         * to `true`.
         */
        transitionMessagesOnly?: boolean;
        /**
         * Whether a preliminary context is used. When set to `true`, the model can bundle the OData calls for dependent
         * bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}.
         */
        usePreliminaryContext?: boolean;
        /**
         * **Deprecated**, use `groupId` instead. Sets the batch group id to be used for requests originating from
         * the binding.
         */
        batchGroupId?: string;
        /**
         * Deprecated since 1.102.0, as {@link sap.ui.model.odata.OperationMode.Auto} is deprecated; the threshold
         * that defines how many entries should be fetched at least by the binding if `operationMode` is set to
         * `Auto`.
         */
        threshold?: int;
      }
    ): ODataListBinding;
    /**
     * Creates a new property binding for this model.
     * See:
     * 	sap.ui.model.Model#bindProperty
     * 	#getProperty
     *
     * @returns The new property binding
     */
    bindProperty(
      /**
       * Path pointing to the property that should be bound; either an absolute path or a path relative to a given
       * `oContext`
       */
      sPath: string,
      /**
       * A context object for the new binding
       */
      oContext?: object,
      /**
       * Map of optional parameters for the binding
       */
      mParameters?: {
        /**
         * Whether this binding does not propagate model messages to the control; supported since 1.82.0. Some composite
         * types like {@link sap.ui.model.type.Currency} automatically ignore model messages for some of their parts
         * depending on their format options; setting this parameter to `true` or `false` overrules the automatism
         * of the type
         *
         * For example, a binding for a currency code is used in a composite binding for rendering the proper number
         * of decimals, but the currency code is not displayed in the attached control. In that case, messages for
         * the currency code shall not be displayed at that control, only messages for the amount
         */
        ignoreMessages?: boolean;
        /**
         * Whether the value of the created property binding is `undefined` if it is unresolved; if not set, its
         * value is `null`. Supported since 1.100.0
         */
        useUndefinedIfUnresolved?: boolean;
      }
    ): PropertyBinding;
    /**
     * Creates a new tree binding for this model.
     *
     * Hierarchy Annotations: To use the v2.ODataTreeBinding with an OData service which exposes hierarchy annotations,
     * see the **"SAP Annotations for OData Version 2.0"** specification. The required property annotations
     * as well as accepted / default values are documented in this specification.
     *
     * Services which include the `hierarchy-node-descendant-count-for` annotation and expose the data points
     * sorted in a depth-first, pre-order manner, can use an optimized auto-expand feature by specifying the
     * `numberOfExpandedLevels` in the binding parameters. This will pre-expand the hierarchy to the given number
     * of levels, with only a single initial OData request.
     *
     * For services without the `hierarchy-node-descendant-count-for` annotation, the `numberOfExpandedLevels`
     * property is not supported and deprecated.
     *
     * Operation Modes: For a full definition and explanation of all OData binding operation modes, see {@link
     * sap.ui.model.odata.OperationMode}.
     *
     * OperationMode.Server: Filtering on the `ODataTreeBinding` is only supported with {@link sap.ui.model.FilterType.Application
     * application filters}. Be aware that this applies only to filters which do not prevent the creation of
     * a hierarchy. So filtering on a property (e.g. a "Customer") is fine, as long as the application ensures
     * that the responses from the back end are sufficient to create a valid hierarchy on the client. Subsequent
     * paging requests for sibling and child nodes must also return responses, since the filters are sent with
     * every request. Using control-defined filters (see {@link sap.ui.model.FilterType.Control}) via the {@link
     * #filter} function is not supported for the operation mode `Server`.
     *
     * OperationMode.Client and OperationMode.Auto: The ODataTreeBinding supports control-defined filters only
     * in operation modes `Client` and `Auto`. With these operation modes, the filters and sorters are applied
     * on the client, like for the {@link sap.ui.model.odata.v2.ODataListBinding}.
     *
     * The operation modes `Client` and `Auto` are only supported for services which expose the hierarchy annotations
     * mentioned above, but do **not** expose the `hierarchy-node-descendant-count-for` annotation. Services
     * with hierarchy annotations including the `hierarchy-node-descendant-count-for` annotation, do **not**
     * support the operation modes `Client` and `Auto`. **Note:** {@link sap.ui.model.odata.OperationMode.Auto}
     * is deprecated since 1.102.0.
     * See:
     * 	{@link http://www.sap.com/protocols/SAPData
     *   "SAP Annotations for OData Version 2.0" Specification}
     *
     * @returns The new tree binding
     */
    bindTree(
      /**
       * The binding path, either absolute or relative to a given `oContext`
       */
      sPath: string,
      /**
       * The parent context which is required as base for a relative path
       */
      oContext?: Context,
      /**
       * The application filters to be used initially; depending on the operation mode, there are restrictions
       * for using filters, see above
       */
      vFilters?: Filter | Filter[],
      /**
       * Map of binding parameters
       */
      mParameters?: {
        /**
         * The mapping between data properties and the hierarchy used to visualize the tree, if not provided by
         * the service's metadata. For the correct metadata annotations, check the "SAP Annotations for OData Version
         * 2.0" specification
         */
        treeAnnotationProperties?: {
          /**
           * The property name in the same type holding the hierarchy level information; the type of the referenced
           * property has to be an integer type
           */
          hierarchyLevelFor?: string;
          /**
           * The property name in the same type holding the hierarchy node id
           */
          hierarchyNodeFor?: string;
          /**
           * The property name in the same type holding the parent node id
           */
          hierarchyParentNodeFor?: string;
          /**
           * The property name in the same type holding the drill state for the node; the referenced property may
           * have the values "collapsed", "expanded" or "leaf"
           */
          hierarchyDrillStateFor?: string;
          /**
           * The property name in the same type holding the descendant count for the node; the type of the referenced
           * property has to be an integer type
           */
          hierarchyNodeDescendantCountFor?: string;
        };
        /**
         * The number of levels that are auto-expanded initially. Setting this property might lead to multiple back-end
         * requests. The auto-expand feature is **deprecated for services without the `hierarchy-node-descendant-count-for`
         * annotation**
         */
        numberOfExpandedLevels?: number;
        /**
         * The level of the topmost tree nodes
         */
        rootLevel?: number;
        /**
         * The group id to be used for requests originating from this binding
         */
        groupId?: string;
        /**
         * The operation mode for this binding; defaults to the model's default operation mode if not specified.
         * {@link sap.ui.model.odata.OperationMode.Auto OperationMode.Auto} is only supported for services which
         * expose the hierarchy annotations, yet do **NOT** expose the `hierarchy-node-descendant-count-for` annotation.
         * **Note:** {@link sap.ui.model.odata.OperationMode.Auto} is deprecated since 1.102.0.
         */
        operationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Deprecated since 1.102.0, as {@link sap.ui.model.odata.OperationMode.Auto} is deprecated; the threshold
         * that defines how many entries should be fetched at least by the binding if `operationMode` is set to
         * `Auto`
         */
        threshold?: number;
        /**
         * Deprecated since 1.102.0, as {@link sap.ui.model.odata.OperationMode.Auto} is deprecated; whether `$filter`
         * statements should be used for the `$count` / `$inlinecount` requests and for the data request if the
         * operation mode is {@link sap.ui.model.odata.OperationMode.Auto OperationMode.Auto}. Use this feature
         * only if your back end supports pre-filtering the tree and is capable of responding with a complete tree
         * hierarchy, including all inner nodes. To construct the hierarchy on the client, it is mandatory that
         * all filter matches include their complete parent chain up to the root level. If {@link sap.ui.model.odata.OperationMode.Client
         * OperationMode.Client} is used, the complete collection without filters is requested; filters are applied
         * on the client side.
         */
        useServersideApplicationFilters?: boolean;
        /**
         * A tree state handle can be given to the `ODataTreeBinding` when two conditions are met:
         * 	 - The binding is running in {@link sap.ui.model.odata.OperationMode.Client OperationMode.Client}, and
         *
         * 	 - the {@link sap.ui.table.TreeTable} is used.  The feature is only available when using the `ODataTreeBindingAdapter`,
         * 			which is automatically applied when using the `sap.ui.table.TreeTable`. The tree state handle will contain
         * 			all necessary information to expand the tree to the given state.
         *
         * This feature is not supported if {@link sap.ui.model.odata.OperationMode.Server OperationMode.Server}
         * or {@link sap.ui.model.odata.OperationMode.Auto OperationMode.Auto} is used. See also {@link sap.ui.model.odata.ODataTreeBindingAdapter#getCurrentTreeState}
         */
        treeState?: any;
        /**
         * Defines the count mode of this binding; if not specified, the default count mode of the binding's model
         * is applied. The resulting count mode must not be {@link sap.ui.model.odata.CountMode.None}.
         */
        countMode?: CountMode | keyof typeof CountMode;
        /**
         * Whether a preliminary context is used; defaults to the value of the parameter `preliminaryContext` given
         * on construction of the binding's model, see {@link sap.ui.model.odata.v2.ODataModel}
         */
        usePreliminaryContext?: boolean;
        /**
         * **Deprecated**, use `groupId` instead. Sets the batch group id to be used for requests originating from
         * this binding
         */
        batchGroupId?: string;
        /**
         * A map describing the navigation properties between entity sets, which is used for constructing and paging
         * the tree. Keys in this object are entity names, whereas the values name the navigation properties.
         *
         * **Deprecated: since 1.44** The use of navigation properties to build up the hierarchy structure is deprecated.
         * It is recommended to use the hierarchy annotations mentioned above instead.
         */
        navigation?: object;
      },
      /**
       * The dynamic sorters to be used initially
       */
      vSorters?: Sorter | Sorter[]
    ): ODataTreeBinding;
    /**
     * Triggers a request for the given function import.
     *
     * If the return type of the function import is either an entity type or a collection of an entity type,
     * then this OData model's cache is updated with the values of the returned entities. Otherwise they are
     * ignored, and the `response` can be processed in the `success` callback.
     *
     * @returns An object which has a `contextCreated` function that returns a `Promise`. This resolves with
     * the created {@link sap.ui.model.Context}. In addition it has an `abort` function to abort the current
     * request. The Promise returned by `contextCreated` is rejected if the function name cannot be found in
     * the metadata or if the parameter `expand` is used and the function does not return a single entity.
     */
    callFunction(
      /**
       * The name of the function import starting with a slash, for example `/Activate`.
       */
      sFunctionName: string,
      /**
       * The parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * Defines a callback function to adjust the deep path for the resulting entity of the function import call;
         * since 1.82. The deep path of an entity is the resolved path relative to the parent contexts of the binding
         * in the UI hierarchy. For example, for a `ToBusinessPartner` relative context binding with a `/SalesOrder('42')`
         * parent context, the resulting deep path for the `BusinessPartner` is `/SalesOrder('42')/ToBusinessPartner`.
         * This deep path is used to properly assign messages and show them correctly on the UI.
         *
         * The callback function returns a `string` with the deep path for the entity returned by the function import
         * and gets the parameter map `mParameters` containing the following properties:
         * 	 - `{string} mParameters.deepPath`: The deep path of the resulting entity, as far as the framework is
         * 			able to determine from the metadata and the OData response
         * 	 - `{object} mParameters.response`: A copy of the OData response object
         */
        adjustDeepPath?: Function;
        /**
         * ID of the `ChangeSet` that this request belongs to
         */
        changeSetId?: string;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * If the function import changes an entity, the ETag for this entity can be passed with this parameter
         */
        eTag?: string;
        /**
         * A comma-separated list of navigation properties to be expanded for the entity returned by the function
         * import; since 1.83.0. The navigation properties are requested with an additional GET request in
         * the same `$batch` request as the POST request for the function import. The given `mParameters.headers`
         * are not considered in the GET request. **Note:** The following prerequisites must be fulfilled:
         *
         * 	 - batch mode must be enabled; see constructor parameter `useBatch`,
         * 	 - the HTTP method used for the function import is "POST",
         * 	 - the function import returns a single entity,
         * 	 - the back-end service must support the "Content-ID" header,
         * 	 - the back end must allow GET requests relative to this content ID outside the changeset within the
         * 			`$batch` request.  The success and error callback functions are called only once, even if there
         * 			are two requests in the `$batch` related to a single call of {@link #callFunction}.
         * 	 - If both requests succeed, the success callback is called with the merged data of the POST and the
         * 			GET request and with the response of the POST request.
         * 	 - If the POST request fails, the GET request also fails. In that case the error callback is called
         * 			with the error response of the POST request.
         * 	 - If the POST request succeeds but the GET request for the navigation properties fails, the success
         * 			callback is called with the data and the response of the POST request. The response object of the success
         * 			callback call and the response parameter of the corresponding `requestFailed` and `requestCompleted`
         * 			events have an additional property `expandAfterFunctionCallFailed` set to `true`.
         */
        expand?: string;
        /**
         * ID of a request group; requests belonging to the same group are bundled in one batch request
         */
        groupId?: string;
        /**
         * A map of headers for this request
         */
        headers?: Record<string, string>;
        /**
         * The HTTP method used for the function import call as specified in the metadata definition of the function
         * import
         */
        method?: string;
        /**
         * Defines whether to update all bindings after submitting this change operation; since 1.46. See {@link
         * #setRefreshAfterChange}. If given, this overrules the model-wide `refreshAfterChange` flag for this operation
         * only.
         */
        refreshAfterChange?: boolean;
        /**
         * A callback function which is called when the data has been successfully retrieved; the handler can have
         * the following parameters: `oData` and `response`.
         */
        success?: Function;
        /**
         * Maps the function import parameter name as specified in the function import's metadata to its value;
         * the value is formatted based on the parameter's type as specified in the metadata
         */
        urlParameters?: Record<string, any>;
        /**
         * **Deprecated - use `groupId` instead**
         */
        batchGroupId?: string;
      }
    ): object;
    /**
     * Whether the canonical requests calculation is switched on, see the `canonicalRequests` parameter of the
     * model constructor.
     *
     * @returns Whether the canonical requests calculation is switched on
     */
    canonicalRequestsEnabled(): boolean;
    /**
     * Trigger a `POST` request to the OData service that was specified in the model constructor; see {@link
     * topic:6c47b2b39db9404582994070ec3d57a2#loio4c4cd99af9b14e08bb72470cc7cabff4 Creating Entities documentation}
     * for comprehensive information on the topic.
     *
     * **Note:** This function does not support a "deep create" scenario. Use {@link #createEntry} or {@link
     * sap.ui.model.odata.v2.ODataListBinding#create} instead.
     *
     * @returns An object which has an `abort` function to abort the current request.
     */
    create(
      /**
       * A string containing the path to the collection where an entry should be created. The path is concatenated
       * to the service URL which was specified in the model constructor.
       */
      sPath: string,
      /**
       * Data of the entry that should be created.
       */
      oData: object,
      /**
       * Optional parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * If specified , `sPath` has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * A callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: `oData` and `response`. The `oData` parameter contains the data of the newly
         * created entry if it is provided by the backend. The `response` parameter contains information about the
         * response of the request.
         */
        success?: Function;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * A map of headers for this request
         */
        headers?: Record<string, string>;
        /**
         * Deprecated - use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * ID of the `ChangeSet` that this request should belong to
         */
        changeSetId?: string;
        /**
         * Since 1.46; defines whether to update all bindings after submitting this change operation. See {@link
         * #setRefreshAfterChange} If given, this overrules the model-wide `refreshAfterChange` flag for this operation
         * only.
         */
        refreshAfterChange?: boolean;
      }
    ): object;
    /**
     * Creates a binding context for the given path.
     *
     * If the data of the context is not yet available, it can not be created, but first the entity needs to
     * be fetched from the server asynchronously. In case no callback function is provided, the request will
     * not be triggered.
     *
     * If a callback function is given, the created binding context for a fetched entity is passed as argument
     * to the given callback function.
     * See:
     * 	sap.ui.model.Model.prototype.createBindingContext
     *
     * @returns The created binding context, only if the data is already available and the binding context could
     * be created synchronously; `undefined` otherwise
     */
    createBindingContext(
      /**
       * Binding path
       */
      sPath: string,
      /**
       * Binding context
       */
      oContext?: object,
      /**
       * Map which contains additional parameters for the binding
       */
      mParameters?: {
        /**
         * Value for the OData `$expand` query parameter which should be included in the request
         */
        expand?: string;
        /**
         * Value for the OData `$select` query parameter which should be included in the request
         */
        select?: string;
        /**
         * Whether a preliminary context will be created. When set to `true`, the model can bundle the OData calls
         * for dependent bindings into fewer $batch requests. For more information, see {@link topic:6c47b2b39db9404582994070ec3d57a2#loio62149734b5c24507868e722fe87a75db
         * Optimizing Dependent Bindings}
         */
        createPreliminaryContext?: boolean;
        /**
         * Optional map of custom query parameters, names of custom parameters must not start with `$`.
         */
        custom?: Record<string, string>;
      },
      /**
       * The function to be called when the context has been created. The parameter of the callback function is
       * the newly created binding context, an instance of {@link sap.ui.model.odata.v2.Context}.
       */
      fnCallBack?: Function,
      /**
       * Whether to reload data
       */
      bReload?: boolean
    ): Context1 | undefined;
    /**
     * Creates a new entry object which is described by the metadata of the entity type of the specified `sPath`
     * Name. A context object is returned which can be used to bind against the newly created object. See {@link
     * topic:6c47b2b39db9404582994070ec3d57a2#loio4c4cd99af9b14e08bb72470cc7cabff4 Creating Entities documentation}
     * for comprehensive information on the topic.
     *
     * For each created entry a request is created and stored in a request queue. The request queue can be submitted
     * by calling {@link #submitChanges}. As long as the context is transient (see {@link sap.ui.model.odata.v2.Context#isTransient}),
     * {@link sap.ui.model.odata.v2.ODataModel#resetChanges} with the `bDeleteCreatedEntities` parameter set
     * to `true` can be used to delete the created entity again.
     *
     * If the creation of the entity on the server failed, it is repeated automatically.
     *
     * The optional parameter `mParameters.properties` can be used as follows:
     * 	 - `properties` could be an array containing the property names which should be included in the new
     * 			entry. Other properties defined in the entity type won't be included.
     * 	 - `properties` could be an object which includes the desired properties and the corresponding values
     * 			which should be used for the created entry.   If `properties` is not specified, all properties in
     * 			the entity type will be included in the created entry.
     *
     * If there are no values specified, the properties will have `undefined` values.
     *
     * The `properties` can be modified via property bindings relative to the returned context instance.
     *
     * The parameter `expand` is supported since 1.78.0. If this parameter is set, the given navigation properties
     * are expanded automatically with the same $batch request in which the POST request for the creation is
     * contained. Ensure that the batch mode is used and the back-end service supports GET requests relative
     * to a content ID outside the changeset. The success and error callback functions are called only once,
     * even if there are two requests in the `$batch` related to a single call of {@link #createEntry}:
     *
     * 	 - a POST request for creating an entity,
     * 	 - a GET request for requesting the navigation properties for the just created entity.   The following
     * 			outcomes are possible:
     * 	 - If both requests succeed, the success handler is called with the merged data of the POST and the
     * 			GET request and with the response of the POST request.
     * 	 - If the POST request fails, the GET request also fails. In that case the error callback handler is
     * 			called with the error response of the POST request.
     * 	 - If the POST request succeeds but the GET request for the navigation properties fails, the success
     * 			handler is called with the data and the response of the POST request. The response object of the success
     * 			handler call and the response parameter of the corresponding `requestFailed` and `requestCompleted` events
     * 			have an additional property `expandAfterCreateFailed` set to `true`.
     *
     * Note: If a server requires a property in the request, you must supply this property in the initial data,
     * for example if the server requires a unit for an amount. This also applies if this property has a default
     * value.
     *
     * Note: Deep create is only supported since 1.108.0, where "deep create" means creation of a sub-entity
     * for a navigation property of a transient, not yet persisted root entity. Before 1.108.0, the sub-entity
     * had to be created after the transient entity had been saved successfully in the back-end system. Since
     * 1.108.0, a deep create is triggered when the `sPath` parameter is a navigation property for the entity
     * type associated with the transient context given in `mParameters.context`. The payload of the OData request
     * to create the root entity then contains its sub-entities. On creation of a sub-entity, only the `sPath`,
     * `mParameters.context` and `mParameters.properties` method parameters are allowed; the context given in
     * `mParameters.context` must not be inactive.
     *
     * @returns An OData V2 context object that points to the newly created entry; or `undefined` if the service
     * metadata are not yet loaded or if a `created` callback parameter is given
     */
    createEntry(
      /**
       * The path to the EntitySet
       */
      sPath: string,
      /**
       * A map of the following parameters:
       */
      mParameters: {
        /**
         * Deprecated - use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * The ID of the `ChangeSet` that this request should belong to
         */
        changeSetId?: string;
        /**
         * The binding context
         */
        context?: Context;
        /**
         * The callback function that is called after the metadata of the service is loaded and the {@link sap.ui.model.odata.v2.Context}
         * instance for the newly created entry is available; The {@link sap.ui.model.odata.v2.Context} instance
         * for the newly created entry is passed as the first and only parameter.
         */
        created?: Function;
        /**
         * The error callback function
         */
        error?: Function;
        /**
         * A comma-separated list of navigation properties to be expanded for the newly created entity; since 1.78.0. The navigation properties are requested with an additional GET request in the same `$batch` request
         * as the POST request for the entity creation; the given `mParameters.headers` are not considered in the
         * GET request. **Note:** The following prerequisites must be fulfilled:
         * 	 - batch mode must be enabled; see constructor parameter `useBatch`,
         * 	 - the back-end service must support the "Content-ID" header,
         * 	 - the back end must allow GET requests relative to this content ID outside the changeset within the
         * 			`$batch` request.
         */
        expand?: string;
        /**
         * The ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * A map of headers
         */
        headers?: Record<string, string>;
        /**
         * Whether the created context is inactive. An inactive context will only be sent to the server after the
         * first property update. From then on it behaves like any other created context. Supported since 1.98.0
         */
        inactive?: boolean;
        /**
         * An array that specifies a set of properties or the entry
         */
        properties?: any[] | object;
        /**
         * Whether to update all bindings after submitting this change operation, see {@link #setRefreshAfterChange};
         * if given, this overrules the model-wide `refreshAfterChange` flag for this operation only; since 1.46
         */
        refreshAfterChange?: boolean;
        /**
         * The success callback function
         */
        success?: Function;
        /**
         * A map of URL parameters
         */
        urlParameters?: Record<string, string>;
      }
    ): Context1 | undefined;
    /**
     * Creates the key from the given collection name and property map.
     *
     * Please make sure that the metadata document is loaded before using this function.
     *
     * @returns Key of the entry
     */
    createKey(
      /**
       * Name of the collection
       */
      sCollection: string,
      /**
       * Object containing at least all the key properties of the entity type
       */
      oKeyProperties: object
    ): string;
    /**
     * @deprecated (since 1.95.0) - use {@link #resetChanges} instead
     *
     * Deletes a created entry from the request queue and from the model.
     *
     * **Note:** Controls are not updated. Use {@link #resetChanges} instead to update also the controls, for
     * example: `oModel.resetChanges([oContext.getPath()], undefined, true);`
     */
    deleteCreatedEntry(
      /**
       * The context object pointing to the created entry
       */
      oContext: Context
    ): void;
    /**
     * See:
     * 	sap.ui.model.Model.prototype.destroy
     */
    destroy(): void;
    /**
     * Detaches event handler `fnFunction` from the `annotationsFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAnnotationsFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the `annotationsLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachAnnotationsLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:batchRequestCompleted batchRequestCompleted}
     * event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBatchRequestCompleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:batchRequestFailed batchRequestFailed} event
     * of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBatchRequestFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:batchRequestSent batchRequestSent} event of
     * this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachBatchRequestSent(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the `metadataFailed` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMetadataFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the `metadataLoaded` event of this `sap.ui.model.odata.v2.ODataModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachMetadataLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:annotationsFailed annotationsFailed} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireAnnotationsFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request, as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:annotationsLoaded annotationsLoaded} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireAnnotationsLoaded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The annotations object
         */
        annotations?: ODataAnnotations;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:batchRequestCompleted batchRequestCompleted} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireBatchRequestCompleted(
      /**
       * parameters to add to the fired event
       */
      oParameters: {
        /**
         * The request ID
         */
        ID: string;
        /**
         * The URL which is sent to the backend
         */
        url: string;
        /**
         * The HTTP method
         */
        method: string;
        /**
         * The request headers
         */
        headers: Record<string, string>;
        /**
         * Request was successful or not
         */
        success: boolean;
        /**
         * If the request is synchronous or asynchronous (if available)
         */
        async: boolean;
        /**
         * Array of embedded requests ($batch) - empty array for non batch requests. Each request object within
         * the array contains the following properties: url, method, headers, response object
         */
        requests: any[];
        /**
         * The response object - empty object if no response: The response object contains the following properties:
         * message, success, headers, statusCode, statusText, responseText
         */
        response: object;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:batchRequestFailed batchRequestFailed} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireBatchRequestFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters: {
        /**
         * The request ID
         */
        ID: string;
        /**
         * The URL which is sent to the backend
         */
        url: string;
        /**
         * The HTTP method
         */
        method: string;
        /**
         * The request headers
         */
        headers: Record<string, string>;
        /**
         * If the request is synchronous or asynchronous (if available)
         */
        async: boolean;
        /**
         * Request was successful or not
         */
        success: boolean;
        /**
         * The response object - empty object if no response The response object contains the following properties:
         * message, success, headers, statusCode, statusText, responseText
         */
        response: object;
        /**
         * Array of embedded requests ($batch) Each request object within the array contains the following properties:
         * URL, method, headers, response object
         */
        requests: any[];
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:batchRequestSent batchRequestSent} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireBatchRequestSent(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * The URL which is sent to the backend.
         */
        url?: string;
        /**
         * The type of the request (if available)
         */
        type?: string;
        /**
         * If the request is synchronous or asynchronous (if available)
         */
        async?: boolean;
        /**
         * Array of embedded requests ($batch) Each request object within the array contains the following properties:
         * url, method, headers
         */
        requests: any[];
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireMetadataFailed(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * A text that describes the failure.
         */
        message?: string;
        /**
         * HTTP status code returned by the request (if available)
         */
        statusCode?: string;
        /**
         * The status as a text, details not specified, intended only for diagnosis output
         */
        statusText?: string;
        /**
         * Response that has been received for the request ,as a text string
         */
        responseText?: string;
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:metadataLoaded metadataLoaded} to attached listeners.
     *
     * @returns Reference to `this` to allow method chaining
     */
    fireMetadataLoaded(
      /**
       * Parameters to pass along with the event
       */
      oParameters?: {
        /**
         * the metadata object.
         */
        metadata?: ODataMetadata;
      }
    ): this;
    /**
     * Force the update on the server of an entity by setting its ETag to '*'.
     *
     * ETag handling must be active so the force update will work.
     */
    forceEntityUpdate(
      /**
       * The key to an Entity e.g.: Customer(4711)
       */
      sKey: string
    ): void;
    /**
     * @deprecated (since 1.36) - use {@link #getChangeGroups} instead
     *
     * Returns the definition of batch groups per entity type for two-way binding changes.
     *
     * @returns Definition of batch groups for two-way binding changes, keyed by entity names.
     */
    getChangeBatchGroups(): Record<string, ChangeGroupDefinition>;
    /**
     * Returns the definition of groups per entity type for two-way binding changes
     *
     * @returns Definition of groups for two-way binding changes, keyed by entity names.
     */
    getChangeGroups(): Record<string, ChangeGroupDefinition>;
    /**
     * @deprecated (since 1.24) - please use {@link #getProperty} instead
     *
     * Return requested data as object if the data has already been loaded and stored in the model.
     *
     * @returns Object containing the requested data if the path is valid.
     */
    getData(
      /**
       * A string containing the path to the data object that should be returned.
       */
      sPath: string,
      /**
       * The optional context which is used with the `sPath` to retrieve the requested data.
       */
      oContext?: object,
      /**
       * This parameter should be set when a URI or custom parameter with a `$expand` system query option was
       * used to retrieve associated entries embedded. If set to `true` then the `getProperty` function returns
       * a desired property value or entry and includes the associated expand entries (if any). If set to `false`
       * the associated/expanded entry properties are removed and not included in the desired entry as properties
       * at all. This is useful for performing updates on the base entry only. Note: A copy, not a reference of
       * the entry will be returned.
       */
      bIncludeExpandEntries?: boolean
    ): object;
    /**
     * @SINCE 1.20
     *
     * Returns the default count mode for retrieving the count of collections
     *
     * @returns Returns the default count mode for this model
     */
    getDefaultCountMode(): CountMode | keyof typeof CountMode;
    /**
     * @deprecated (since 1.32) - use {@link #getDeferredGroups} instead
     *
     * Returns the array of batch group IDs that are set as deferred
     *
     * @returns aGroupIds The array of deferred batch group IDs
     */
    getDeferredBatchGroups(): any[];
    /**
     * Returns the array of group IDs that are set as deferred.
     *
     * @returns aGroupIds The array of deferred group IDs
     */
    getDeferredGroups(): any[];
    /**
     * Returns the ETag for a given binding path/context or data object.
     *
     * @returns The found ETag (or `null` if none could be found)
     */
    getETag(
      /**
       * The binding path
       */
      sPath?: string,
      /**
       * The binding context
       */
      oContext?: Context,
      /**
       * The entity data
       */
      oEntity?: object
    ): string | null;
    /**
     * Returns all headers and custom headers which are stored in this OData model.
     *
     * @returns The header map
     */
    getHeaders(): object;
    /**
     * Returns the key part for the given the canonical entry URI, model context or data object or `undefined`
     * when the `vValue` can't be interpreted.
     *
     * @returns Key of the entry or `undefined`
     */
    getKey(
      /**
       * The canonical entry URI, the context or entry object
       */
      vValue: string | object | Context
    ): string | undefined;
    /**
     * @SINCE 1.76.0
     *
     * Returns this model's message scope.
     * See:
     * 	sap.ui.model.odata.MessageScope
     *
     * @returns The message scope
     */
    getMessageScope(): MessageScope | keyof typeof MessageScope;
    /**
     * Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and
     * V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges
     * V4 annotations from the existing {@link sap.ui.model.odata.v2.ODataAnnotations} directly into the corresponding
     * model element.
     *
     * **BEWARE:** Access to this OData meta model will fail before the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded
     * loaded} has been resolved!
     *
     * @returns The meta model for this `ODataModel`
     */
    getMetaModel(): ODataMetaModel;
    /**
     * Returns a JSON object that is a copy of the entity data referenced by the given `sPath` and `oContext`.
     * It does not load any data and may not return all requested data if it is not available.
     *
     * With the `mParameters.select` parameter it is possible to specify comma-separated property or navigation
     * property names which should be included in the result object. This works like the OData `$select` URL
     * parameter. With the `mParameters.expand` parameter it is possible to specify comma-separated navigation
     * property names which should be included inline in the result object. This works like the OData `$expand`
     * parameter.
     *
     * **Note:** `mParameters.expand` can only be used if the corresponding navigation properties have been
     * read via {@link sap.ui.model.odata.v2.ODataModel#read} using the OData `$expand` URL parameter. If a
     * navigation property has not been read via the OData `$expand` URL parameter, it is left out in the result.
     * Keep in mind that navigation properties referencing a collection are usually not loaded via the OData
     * `$expand` URL parameter but directly via its navigation property.
     *
     * **Note:** If `mParameters.select` is not specified, the returned object may contain model-internal attributes.
     * This may lead to problems when submitting this data to the service for an update or create operation.
     * To get a copy of the entity without internal attributes, use `{select: "*"}` instead.
     *
     * **Note:** If `mParameters.select` is given and not all selected properties are available, this method
     * returns `undefined` instead of incomplete data.
     *
     * **Note:** If `mParameters.select` is not given, all properties and navigation properties available on
     * the client are returned.
     *
     * Example:
     *  With `mParameters` given as `{select: "Products/ProductName, Products", expand:"Products"}` no properties
     * of the entity itself are returned, but only the `ProductName` property of the `Products` navigation property.
     * If `Products/ProductName` has not been loaded before, `undefined` is returned.
     *
     * @returns The value for the given path and context or `undefined` if data or entity type cannot be found
     * or if not all selected properties are available
     */
    getObject(
      /**
       * The path referencing the object
       */
      sPath: string,
      /**
       * The optional context which is used with the `sPath` to reference the object.
       */
      oContext?: Context,
      /**
       * Map of parameters
       */
      mParameters?: {
        /**
         * Comma-separated list of properties or paths to properties to select
         */
        select?: string;
        /**
         * Comma-separated list of navigation properties or paths to navigation properties to expand
         */
        expand?: string;
      }
    ): any | undefined;
    /**
     * Returns a JSON object that is a copy of the entity data referenced by the given `sPath` and `oContext`.
     * It does not load any data and may not return all requested data if it is not available.
     *
     * With the `mParameters.select` parameter it is possible to specify comma-separated property or navigation
     * property names which should be included in the result object. This works like the OData `$select` URL
     * parameter. With the `mParameters.expand` parameter it is possible to specify comma-separated navigation
     * property names which should be included inline in the result object. This works like the OData `$expand`
     * parameter.
     *
     * **Note:** `mParameters.expand` can only be used if the corresponding navigation properties have been
     * read via {@link sap.ui.model.odata.v2.ODataModel#read} using the OData `$expand` URL parameter. If a
     * navigation property has not been read via the OData `$expand` URL parameter, it is left out in the result.
     * Keep in mind that navigation properties referencing a collection are usually not loaded via the OData
     * `$expand` URL parameter but directly via its navigation property.
     *
     * **Note:** If `mParameters.select` is not specified, the returned object may contain model-internal attributes.
     * This may lead to problems when submitting this data to the service for an update or create operation.
     * To get a copy of the entity without internal attributes, use `{select: "*"}` instead.
     *
     * **Note:** If `mParameters.select` is given and not all selected properties are available, this method
     * returns `undefined` instead of incomplete data.
     *
     * **Note:** If `mParameters.select` is not given, all properties and navigation properties available on
     * the client are returned.
     *
     * Example:
     *  With `mParameters` given as `{select: "Products/ProductName, Products", expand:"Products"}` no properties
     * of the entity itself are returned, but only the `ProductName` property of the `Products` navigation property.
     * If `Products/ProductName` has not been loaded before, `undefined` is returned.
     *
     * @returns The value for the given path and context or `undefined` if data or entity type cannot be found
     * or if not all selected properties are available
     */
    getObject(
      /**
       * The path referencing the object
       */
      sPath: string,
      /**
       * Map of parameters
       */
      mParameters?: {
        /**
         * Comma-separated list of properties or paths to properties to select
         */
        select?: string;
        /**
         * Comma-separated list of navigation properties or paths to navigation properties to expand
         */
        expand?: string;
      }
    ): any | undefined;
    /**
     * Returns the original value for the property with the given path and context. The original value is the
     * value that was last responded by the server.
     *
     * @returns the value of the property
     */
    getOriginalProperty(
      /**
       * The path/name of the property
       */
      sPath: string,
      /**
       * The context if available to access the property value
       */
      oContext?: object
    ): any;
    /**
     * Returns the changed properties of all changed entities in a map which are still pending. The key is the
     * string name of the entity, and the value is an object which contains the changed properties. The tree
     * hierarchy changes for removed nodes are represented via an empty object.
     *
     * In contrast to the two related functions {@link #hasPendingChanges} and {@link #resetChanges}, only client
     * data changes are supported.
     *
     * @returns the pending changes in a map
     */
    getPendingChanges(): Record<string, object>;
    /**
     * Returns the value for the property with the given `sPath`. Since 1.100, a path starting with "@$ui5."
     * which represents an instance annotation is supported. The following instance annotations are allowed;
     * they return information on the given oContext, which must be set and be an {@link sap.ui.model.odata.v2.Context}:
     *
     * 	 - `@$ui5.context.isInactive`: The return value of {@link sap.ui.model.odata.v2.Context#isInactive}
     *
     * 	 - `@$ui5.context.isTransient`: The return value of {@link sap.ui.model.odata.v2.Context#isTransient}
     *
     *
     * @returns Value of the property
     */
    getProperty(
      /**
       * Path/name of the property
       */
      sPath: string,
      /**
       * Context if available to access the property value
       */
      oContext?: object,
      /**
       * Deprecated, use {@link #getObject} function with 'select' and 'expand' parameters instead. Whether entities
       * for navigation properties of this property which have been read via `$expand` are part of the return
       * value.
       */
      bIncludeExpandEntries?: boolean
    ): any;
    /**
     * @SINCE 1.46.0
     *
     * Whether all affected bindings are refreshed after a change operation.
     *
     * This flag can be overruled on request level by providing the `refreshAfterChange` parameter to the corresponding
     * function (for example {@link #update}).
     *
     * @returns Whether to automatically refresh after changes
     */
    getRefreshAfterChange(): boolean;
    /**
     * Returns the current security token.
     *
     * If the token has not been requested from the server it will be requested first (synchronously).
     *
     * @returns The security token
     */
    getSecurityToken(): string;
    /**
     * Return the annotation object. Please note that the metadata is loaded asynchronously and this function
     * might return undefined because the metadata has not been loaded yet. In this case attach to the `annotationsLoaded`
     * event to get notified when the annotations are available and then call this function.
     *
     * @returns Metadata object
     */
    getServiceAnnotations(): object;
    /**
     * Return the parsed XML metadata as a Javascript object.
     *
     * Please note that the metadata is loaded asynchronously and this function might return `undefined` because
     * the metadata has not been loaded yet. In this case attach to the `metadataLoaded` event to get notified
     * when the metadata is available and then call this function.
     *
     * @returns Metadata object
     */
    getServiceMetadata(): Object | undefined;
    /**
     * Checks if there exist pending changes in the model.
     *
     * By default, only client data changes triggered through {@link #createEntry} or {@link #setProperty},
     * and tree hierarchy changes are taken into account.
     *
     * If `bAll` is set to `true`, also deferred requests triggered through {@link #create}, {@link #update},
     * and {@link #remove} are taken into account.
     *
     * @returns `true` if there are pending changes, `false` otherwise.
     */
    hasPendingChanges(
      /**
       * If set to true, deferred requests are also taken into account.
       */
      bAll?: boolean
    ): boolean;
    /**
     * Checks if there are pending requests, either ongoing or sequential.
     *
     * @returns Whether there are pending requests
     */
    hasPendingRequests(): boolean;
    /**
     * @SINCE 1.52.1
     *
     * Invalidate the model data.
     *
     * Mark all entries in the model cache as invalid. Next time a context or list is bound (binding), the respective
     * entries will be detected as invalid and will be refreshed from the server.
     *
     * To refresh all model data use {@link sap.ui.model.odata.v2.ODataModel#refresh}
     */
    invalidate(
      /**
       * A function which can be used to restrict invalidation to specific entries, gets the entity key and object
       * as parameters and should return true for entities to invalidate.
       */
      fnCheckEntry?: Function
    ): void;
    /**
     * @SINCE 1.52.1
     *
     * Invalidate all entries of the given entity type in the model data.
     *
     * Mark entries of the provided entity type in the model cache as invalid. Next time a context binding or
     * list binding is done, the entry will be detected as invalid and will be refreshed from the server.
     */
    invalidateEntityType(
      /**
       * The qualified name of the entity type. A qualified name consists of two parts separated by a dot. The
       * first part is the namespace of the schema in which the entity type is defined, such as "NorthwindModel".
       * The second part is the entity type name such as "Customer". This results in a qualified name such as
       * "NorthwindModel.Customer". The qualified name can be found in the data sent from the server in JSON format
       * under `__metadata.type` or in XML format in the `term` attribute of the entity's `category` tag.
       */
      sEntityType: string
    ): void;
    /**
     * @SINCE 1.52.1
     *
     * Invalidate a single entry in the model data.
     *
     * Mark the selected entry in the model cache as invalid. Next time a context binding or list binding is
     * done, the entry will be detected as invalid and will be refreshed from the server.
     */
    invalidateEntry(
      /**
       * the reference to the entry, either by key, absolute path or context object
       */
      vEntry: string | Context
    ): void;
    /**
     * @SINCE 1.38
     *
     * Checks whether metadata loading has failed in the past.
     *
     * @returns Whether metadata request has failed
     */
    isMetadataLoadingFailed(): boolean;
    /**
     * @SINCE 1.76.0
     *
     * Checks whether the service has set the OData V2 annotation "message-scope-supported" on the `EntityContainer`
     * with the value `true`. This is a a precondition for the setting of {@link sap.ui.model.odata.MessageScope.BusinessObject}
     * via {@link #setMessageScope}.
     * See:
     * 	sap.ui.model.odata.MessageScope
     *
     * @returns A promise resolving with `true` if the OData V2 annotation "message-scope-supported" on the
     * `EntityContainer` is set to `true`
     */
    messageScopeSupported(): Promise<any>;
    /**
     * @SINCE 1.30
     *
     * Returns a promise for the loaded state of the metadata.
     *
     * The metadata needs to be loaded prior to performing OData calls. Chaining to the returned promise ensures
     * that all required parameters have been loaded, e.g. the security token, see {@link #getSecurityToken}.
     *
     * The returned promise depends on the optional parameter `bRejectOnFailure`.
     *
     * `bRejectOnFailure=false`: The promise won't get rejected in case the metadata or annotation loading failed
     * but is only resolved if
     * 	 - the metadata are loaded successfully,
     * 	 - the annotations are processed, provided the model parameter `loadAnnotationsJoined` has been set.
     * 			 Use this promise for delaying OData calls until all required information is available, i.e. this
     * 			promise is resolved.
     *
     * `bRejectOnFailure=true`: Since 1.79, the parameter `bRejectOnFailure` allows to request a promise that
     * is rejected when one of the following fails:
     * 	 - the loading of the metadata,
     * 	 - the loading of the annotations, provided the model parameter `loadAnnotationsJoined` has been set.
     * 			 The promise is fulfilled upon successful loading of both. This promise can be used to start processing
     * 			OData calls when it is fulfilled and to display an error message when it is rejected. See also the example
     * 			below.
     *
     * If the method `refreshMetadata` is called after the returned promise is already resolved or rejected,
     * you should use the promise returned by `refreshMetadata` to get information about the refreshed state.
     *
     * @returns A promise on metadata loaded state
     */
    metadataLoaded(
      /**
       * Determines since 1.79 whether the returned promise is rejected when the initial loading of the metadata
       * fails. In case the model parameter `loadAnnotationsJoined` is set, the returned promise fails also if
       * loading the annotations fails.
       */
      bRejectOnFailure?: boolean
    ): Promise<any>;
    /**
     * Trigger a `GET` request to the OData service that was specified in the model constructor.
     *
     * The data will be stored in the model. The requested data is returned with the response.
     *
     * @returns An object which has an `abort` function to abort the current request.
     */
    read(
      /**
       * An absolute path or a path relative to the context given in `mParameters.context`; if the path contains
       * a query string, the query string is ignored, use `mParameters.urlParameters` instead
       */
      sPath: string,
      /**
       * Optional parameter map containing any of the following properties:
       */
      mParameters?: {
        /**
         * If specified, `sPath` has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * An array of filters to be included in the request URL
         */
        filters?: Filter[];
        /**
         * An array of sorters to be included in the request URL
         */
        sorters?: Sorter[];
        /**
         * A callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: `oData` and `response`. The `oData` parameter contains the data of the retrieved
         * data. The `response` parameter contains further information about the response of the request.
         */
        success?: Function;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * Deprecated - use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * Whether messages for child entities belonging to the same business object as the requested or changed
         * resources are updated. It is considered only if {@link sap.ui.model.odata.MessageScope.BusinessObject}
         * is set using {@link #setMessageScope} and if the OData service supports message scope.
         */
        updateAggregatedMessages?: boolean;
      }
    ): object;
    /**
     * Refresh the model.
     *
     * This will reload all data stored in the model. This will check all bindings for updated data and update
     * the controls if data has been changed.
     *
     * Note: In contrast to an individual Binding refresh, the model refresh ignores Binding-specific parameters/queries.
     */
    refresh(
      /**
       * Force update of controls
       */
      bForceUpdate?: boolean,
      /**
       * If set to `true` then the model data will be removed/cleared. Please note that the data might not be
       * there when calling e.g. `getProperty` too early before the refresh call returned.
       */
      bRemoveData?: boolean,
      /**
       * ID of a request group; requests belonging to the same group will be bundled in one batch request
       */
      sGroupId?: string
    ): void;
    /**
     * @deprecated (since 1.42)
     *
     * Refreshes the metadata for this model, for example when the request for metadata has failed.
     *
     * **Note**: Do not use `refreshMetadata` if the metadata is outdated or should be updated. This will lead
     * to inconsistent data in the application.
     *
     * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
     *
     * @returns A promise on metadata loaded state or `undefined` if metadata is not initialized or currently
     * refreshed
     */
    refreshMetadata(): Promise<any> | undefined;
    /**
     * Refresh XSRF token by performing a GET request against the service root URL.
     *
     * @returns An object which has an `abort` function to abort the current request.
     */
    refreshSecurityToken(
      /**
       * Callback function which is called when the data has been successfully retrieved.
       */
      fnSuccess?: Function,
      /**
       * Callback function which is called when the request failed. The handler can have the parameter: oError
       * which contains additional error information.
       */
      fnError?: Function,
      /**
       * Whether the request should be sent asynchronously
       */
      bAsync?: boolean
    ): object;
    /**
     * Trigger a `DELETE` request to the OData service that was specified in the model constructor.
     *
     * @returns An object which has an `abort` function to abort the current request.
     */
    remove(
      /**
       * A string containing the path to the data that should be removed. The path is concatenated to the service
       * URL which was specified in the model constructor.
       */
      sPath: string,
      /**
       * Optional, can contain the following attributes:
       */
      mParameters?: {
        /**
         * If specified, `sPath` has to be relative to the path given with the context.
         */
        context?: object;
        /**
         * A callback function which is called when the data has been successfully retrieved. The handler can have
         * the following parameters: `oData` and `response`.
         */
        success?: Function;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * If specified, the `If-Match` header will be set to this ETag.
         */
        eTag?: string;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * A map of headers for this request
         */
        headers?: Record<string, string>;
        /**
         * Deprecated - use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * ID of the `ChangeSet` that this request should belong to
         */
        changeSetId?: string;
        /**
         * Since 1.46; defines whether to update all bindings after submitting this change operation, see {@link
         * #setRefreshAfterChange}. If given, this overrules the model-wide `refreshAfterChange` flag for this operation
         * only.
         */
        refreshAfterChange?: boolean;
      }
    ): object;
    /**
     * Resets pending changes and aborts corresponding requests.
     *
     * By default, only changes triggered through {@link #createEntry} or {@link #setProperty} are taken into
     * account. If `bAll` is set, also deferred requests triggered through {@link #create}, {@link #update}
     * or {@link #remove} are taken into account.
     *
     * With a given `aPath` only specified entities are reset. Note that tree hierarchy changes are only affected
     * if a given path is equal to the tree binding's resolved binding path.
     *
     * If `bDeleteCreatedEntities` is set, the entity is completely removed, provided it has been created by
     * one of the following methods:
     * 	 - {@link #createEntry}, provided it is not yet persisted in the back end and is active (see {@link
     * 			sap.ui.model.odata.v2.Context#isInactive}),
     * 	 - {@link #callFunction}.
     *
     * @returns Resolves when all regarded changes have been reset.
     */
    resetChanges(
      /**
       * Paths to be reset; if no array is passed, all changes are reset
       */
      aPath?: any[],
      /**
       * Whether also deferred requests are taken into account
       */
      bAll?: boolean,
      /**
       * Whether to delete the entities created via {@link #createEntry} or {@link #callFunction}; since 1.95.0
       */
      bDeleteCreatedEntities?: boolean
    ): Promise<any>;
    /**
     * Returns a promise, which will resolve with the security token as soon as it is available.
     *
     * @returns A promise on the security token
     */
    securityTokenAvailable(): Promise<any>;
    /**
     * @deprecated (since 1.32) - Use {@link #setChangeGroups} instead
     *
     * Definition of batch groups per entity type for two-way binding changes.
     */
    setChangeBatchGroups(
      /**
       * A map containing the definition of batch groups for two-way binding changes. The map has the following
       * format:
       * ```javascript
       *
       * {
       *   "EntityTypeName": {
       *     batchGroupId: "ID",
       *     [changeSetId: "ID",]
       *     [single: true/false,]
       *   }
       * }
       * ```
       *
       * 	 - `batchGroupId`: Defines the batch group for changes of the defined EntityTypeName
       * 	 - `changeSetId`: ID of a `ChangeSet` which bundles the changes for the entity type.
       * 	 - `single`: Defines if every change will get an own change set (defaults to `true`)
       */
      mGroups: Record<string, ChangeGroupDefinition>
    ): void;
    /**
     * Definition of groups per entity type for two-way binding changes.
     */
    setChangeGroups(
      /**
       * A map containing the definition of batch groups for two-way binding changes, keyed by entity names. The
       * map has the following format:
       * ```javascript
       *
       * {
       *   "EntityTypeName": {
       *     groupId: "ID",
       *     [changeSetId: "ID",]
       *     [single: true/false,]
       *   }
       * }
       * ```
       *
       * 	 - `groupId`: Defines the group for changes of the defined EntityTypeName
       * 	 - `changeSetId`: ID of a `ChangeSet` which bundles the changes for the entity type.
       * 	 - `single`: Defines if every change will get an own change set (defaults to `true`)
       */
      mGroups: Record<string, ChangeGroupDefinition>
    ): void;
    /**
     * @SINCE 1.20
     *
     * Sets the default mode how to retrieve the item count for a collection in this model.
     *
     * The count can be determined in the following ways
     * 	 - by sending a separate `$count` request
     * 	 - by adding parameter `$inlinecount=allpages` to one or all data requests
     * 	 - a combination of the previous two
     * 	 - not at all (questions about the size of the collection can't be answered then)  See {@link sap.ui.model.odata.CountMode}
     * 			for all enumeration values and more details.
     *
     * Note that a call to this method does not modify the count mode for existing list bindings, only bindings
     * that are created afterwards will use the new mode when no mode is defined at their creation.
     *
     * If no default count mode is set for an `ODataModel` (v2), the mode `Request` will be used.
     */
    setDefaultCountMode(
      /**
       * The new default count mode for this model
       */
      sCountMode: CountMode | keyof typeof CountMode
    ): void;
    /**
     * @deprecated (since 1.32) - use {@link #setDeferredGroups} instead
     *
     * Setting batch groups as deferred.
     *
     * Requests that belong to a deferred batch group have to be sent by explicitly calling {@link #submitChanges}.
     */
    setDeferredBatchGroups(
      /**
       * Array of batch group IDs that should be set as deferred
       */
      aGroupIds: any[]
    ): void;
    /**
     * Setting request groups as deferred. **Note:** This will overwrite existing deferred groups, including
     * the default group "changes".
     *
     * Requests that belong to a deferred group will be sent by explicitly calling {@link #submitChanges}.
     */
    setDeferredGroups(
      /**
       * Array of group IDs that should be set as deferred
       */
      aGroupIds: any[]
    ): void;
    /**
     * Set custom headers which are provided in a key/value map.
     *
     * These headers are used for requests against the OData backend. Private headers which are set in the ODataModel
     * cannot be modified. These private headers are: `accept, accept-language, x-csrf-token, MaxDataServiceVersion,
     * DataServiceVersion`.
     *
     * To remove these custom headers simply set the `mHeaders` parameter to null. Please also note that when
     * calling this method again, all previous custom headers are removed unless they are specified again in
     * the `mHeaders` parameter.
     */
    setHeaders(
      /**
       * The header name/value map.
       */
      mHeaders: object
    ): void;
    /**
     * @SINCE 1.76.0
     *
     * Sets this model's message scope.
     * See:
     * 	sap.ui.model.odata.MessageScope
     */
    setMessageScope(
      /**
       * The message scope
       */
      sMessageScope: MessageScope | keyof typeof MessageScope
    ): void;
    /**
     * Sets a new value for the given property `sPath` in the model.
     *
     * If the `changeBatchGroup` for the changed entity type is set to {@link #setDeferredGroups deferred},
     * changes could be submitted with {@link #submitChanges}. Otherwise the change will be submitted directly.
     *
     * @returns `true` if the value was set correctly and `false` if errors occurred like the entry was not
     * found or another entry was already updated.
     */
    setProperty(
      /**
       * Path of the property to set
       */
      sPath: string,
      /**
       * Value to set the property to
       */
      oValue: any,
      /**
       * The context which will be used to set the property
       */
      oContext?: Context,
      /**
       * Whether to update other bindings dependent on this property asynchronously
       */
      bAsyncUpdate?: boolean
    ): boolean;
    /**
     * @SINCE 1.16.3
     *
     * Defines whether all affected bindings are refreshed after a change operation.
     *
     * This flag can be overruled on request level by providing the `refreshAfterChange` parameter to the corresponding
     * function (for example {@link #update}).
     */
    setRefreshAfterChange(
      /**
       * Whether to automatically refresh after changes
       */
      bRefreshAfterChange: boolean
    ): void;
    /**
     * Enable/Disable security token handling.
     */
    setTokenHandlingEnabled(
      /**
       * Whether to use token handling or not
       */
      bTokenHandling?: boolean
    ): void;
    /**
     * Enable or disable batch mode for future requests.
     */
    setUseBatch(
      /**
       * Whether the requests should be encapsulated in a batch request
       */
      bUseBatch?: boolean
    ): void;
    /**
     * Submits the collected changes which were collected by the {@link #setProperty} method and other deferred
     * requests.
     *
     * The update method is defined by the global `defaultUpdateMethod` parameter which is `sap.ui.model.odata.UpdateMethod.Merge`
     * by default. In case of a `sap.ui.model.odata.UpdateMethod.Merge` request only the changed properties
     * will be updated. If a URI with a `$expand` query option was used then the expand entries will be removed
     * from the collected changes. Changes to this entries should be done on the entry itself. So no deep updates
     * are supported.
     *
     * **Important**: The success/error handler will only be called if batch support is enabled. If multiple
     * batch groups are submitted the handlers will be called for every batch group. If there are no changes/requests
     * or all contained requests are aborted before a batch request returns, the success handler will be called
     * with an empty response object. If the abort method on the return object is called, all contained batch
     * requests will be aborted and the error handler will be called for each of them.
     *
     * @returns An object which has an `abort` function to abort the current request or requests
     */
    submitChanges(
      /**
       * A map which contains the following parameter properties:
       */
      mParameters?: {
        /**
         * Defines the group that should be submitted. If not specified, all deferred groups will be submitted.
         * Requests belonging to the same group will be bundled in one batch request.
         */
        groupId?: string;
        /**
         * A callback function which is called when the data has been successfully updated. The handler can have
         * the following parameters: `oData`. `oData` contains the parsed response data as a Javascript object.
         * The batch response is in the `__batchResponses` property which may contain further `__changeResponses`
         * in an array depending on the amount of changes and change sets of the actual batch request which was
         * sent to the backend. The changeResponses contain the actual response of that change set in the `response`
         * property. For each change set there is also a `__changeResponse` property.
         */
        success?: Function;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter: `oError`
         * which contains additional error information
         */
        error?: Function;
        /**
         * **Deprecated**, use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * **Deprecated** since 1.38.0; use the `defaultUpdateMethod` constructor parameter instead. If unset, the
         * update method is determined from the `defaultUpdateMethod` constructor parameter. If `true`, `sap.ui.model.odata.UpdateMethod.Merge`
         * is used for update operations; if set to `false`, `sap.ui.model.odata.UpdateMethod.Put` is used.
         */
        merge?: boolean;
      }
    ): object;
    /**
     * Trigger a `PUT/MERGE` request to the OData service that was specified in the model constructor.
     *
     * The update method used is defined by the global `defaultUpdateMethod` parameter which is `sap.ui.model.odata.UpdateMethod.Merge`
     * by default. Please note that deep updates are not supported and may not work. These should be done separately
     * and directly on the corresponding entry.
     *
     * @returns An object which has an `abort` function to abort the current request.
     */
    update(
      /**
       * A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl
       * which was specified in the model constructor.
       */
      sPath: string,
      /**
       * Data of the entry that should be updated.
       */
      oData: object,
      /**
       * Optional, can contain the following attributes:
       */
      mParameters?: {
        /**
         * If specified the sPath has to be is relative to the path given with the context.
         */
        context?: object;
        /**
         * A callback function which is called when the data has been successfully updated.
         */
        success?: Function;
        /**
         * A callback function which is called when the request failed. The handler can have the parameter `oError`
         * which contains additional error information.
         */
        error?: Function;
        /**
         * If specified, the `If-Match` header will be set to this ETag. Caution: This feature in not officially
         * supported as using asynchronous requests can lead to data inconsistencies. If you decide to use this
         * feature nevertheless, you have to make sure that the request is completed before the data is processed
         * any further.
         */
        eTag?: string;
        /**
         * A map containing the parameters that will be passed as query strings
         */
        urlParameters?: Record<string, string>;
        /**
         * A map of headers for this request
         */
        headers?: Record<string, string>;
        /**
         * Deprecated - use `groupId` instead
         */
        batchGroupId?: string;
        /**
         * ID of a request group; requests belonging to the same group will be bundled in one batch request
         */
        groupId?: string;
        /**
         * ID of the `ChangeSet` that this request should belong to
         */
        changeSetId?: string;
        /**
         * Since 1.46; defines whether to update all bindings after submitting this change operation. See {@link
         * #setRefreshAfterChange} If given, this overrules the model-wide `refreshAfterChange` flag for this operation
         * only.
         */
        refreshAfterChange?: boolean;
      }
    ): object;
    /**
     * Update all bindings.
     */
    updateBindings(
      /**
       * If set to `false`, an update will only be done when the value of a binding changed.
       */
      bForceUpdate?: boolean
    ): void;
  }
  /**
   * Definition of a change group.
   */
  export type ChangeGroupDefinition = {
    /**
     * Id of the batch group
     */
    groupId: string;
    /**
     * ID of a `ChangeSet` which bundles the changes for the entity type.
     */
    changeSetId?: string;
    /**
     * Defines if every change will get an own change set
     */
    single?: boolean;
  };
}

declare module "sap/ui/model/odata/v2/ODataTreeBinding" {
  import TreeBinding from "sap/ui/model/TreeBinding";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import Context from "sap/ui/model/Context";

  import Context1 from "sap/ui/model/odata/v2/Context";

  import Sorter from "sap/ui/model/Sorter";

  /**
   * Tree binding implementation for the {@link sap.ui.model.odata.v2.ODataModel}. Use {@link sap.ui.model.odata.v2.ODataModel#bindTree}
   * for creating an instance.
   */
  export default class ODataTreeBinding extends TreeBinding {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataTreeBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v2.ODataTreeBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.58
     *
     * Expand a nodes subtree to a given level.
     *
     * This API is only supported in `OperationMode.Server` and if the OData service implements the full specification
     * of the "hierarchy-node-for" annotation.
     *
     * @returns A promise resolving once the expansion process has been completed
     */
    expandNodeToLevel(
      /**
       * Absolute row index
       */
      iIndex: int,
      /**
       * Level to which the data should be expanded
       */
      iLevel: int,
      /**
       * If set to true, no change event will be fired
       */
      bSuppressChange: boolean
    ): Promise<any>;
    /**
     * Applies the given filters to the ODataTreeBinding.
     *
     * Please note that filters of type `FilterType.Control` are not supported for `OperationMode.Server`, here
     * only filters of type `FilterType.Application` are allowed. Filters given via {@link sap.ui.model.odata.v2.ODataModel#bindTree}
     * are always of type `Application` and will be sent with every back-end request. For more information,
     * see {@link sap.ui.model.odata.v2.ODataModel#bindTree}.
     *
     * Since 1.34.0, complete client-side filtering is supported for `OperationMode.Client` and also in `OperationMode.Auto`
     * if the back-end count is lower than the threshold. In this case, all types of filters will be applied
     * on the client. See also: {@link sap.ui.model.odata.OperationMode.Auto} and {@link sap.ui.model.FilterType}.
     *
     * For the `OperationMode.Client` and `OperationMode.Auto`, you may also specify the `useServersideApplicationFilters`
     * binding parameter when creating an instance. If it is set, the filters of type `Application` will always
     * be applied on the back end and trigger an OData request. For more information, see {@link sap.ui.model.odata.v2.ODataModel#bindTree}.
     * **Note:** {@link sap.ui.model.odata.OperationMode.Auto} is deprecated since 1.102.0.
     * See:
     * 	sap.ui.model.TreeBinding.prototype.filter
     *
     * @returns Returns `this` to facilitate method chaining
     */
    filter(
      /**
       * Filter or array of filters to apply
       */
      aFilters: Filter[] | Filter,
      /**
       * Type of the filter which should be adjusted. If it is not given, the type `FilterType.Control` is assumed
       */
      sFilterType: FilterType | keyof typeof FilterType,
      /**
       * Whether to return `true` or `false`, instead of `this`, depending on whether the filtering has been done
       */
      bReturnSuccess?: boolean
    ): this;
    /**
     * Returns the number of child nodes. This function is not available when the annotation "hierarchy-node-descendant-count-for"
     * is exposed on the service.
     *
     * @returns the number of children
     */
    getChildCount(
      /**
       * the context element of the node
       */
      oContext: Object
    ): int;
    /**
     * @SINCE 1.28
     *
     * Get a download URL with the specified format considering the sort/filter/custom parameters.
     *
     * @returns URL which can be used for downloading
     */
    getDownloadUrl(
      /**
       * Value for the $format Parameter
       */
      sFormat: string
    ): string;
    /**
     * Returns the contexts of the child nodes for the given context. This function is not available when the
     * annotation "hierarchy-node-descendant-count-for" is exposed on the service.
     *
     * @returns The contexts of the child nodes for the given context
     */
    getNodeContexts(
      /**
       * The context for which the child nodes should be retrieved
       */
      oContext: Context,
      /**
       * The start index of the requested contexts
       */
      iStartIndex: int,
      /**
       * The requested amount of contexts
       */
      iLength: int,
      /**
       * The maximum number of contexts to read before and after the given range; with this, controls can prefetch
       * data that is likely to be needed soon, e.g. when scrolling down in a table.
       */
      iThreshold?: int
    ): Context1[];
    /**
     * Returns root contexts for the tree. You can specify the start index and the length for paging requests.
     * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on
     * the service.
     *
     * @returns The root contexts for the tree
     */
    getRootContexts(
      /**
       * The start index of the requested contexts
       */
      iStartIndex?: int,
      /**
       * The requested amount of contexts. If none given, the default value is the size limit of the underlying
       * sap.ui.model.odata.v2.ODataModel instance.
       */
      iLength?: int,
      /**
       * The number of entities which should be retrieved in addition to the given length. A higher threshold
       * reduces the number of backend requests, yet these request blow up in size, since more data is loaded.
       */
      iThreshold?: int
    ): Context1[];
    /**
     * Returns the rootLevel
     *
     * @returns The root level
     */
    getRootLevel(): int;
    /**
     * Returns if the node has child nodes. If the ODataTreeBinding is running with hierarchy annotations, a
     * context with the property values "expanded" or "collapsed" for the drilldown state property, returns
     * true. Entities with drilldown state "leaf" return false.
     *
     * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on
     * the service.
     *
     * @returns true if node has children
     */
    hasChildren(
      /**
       * the context element of the node
       */
      oContext: Context
    ): boolean;
    /**
     * Initializes the binding. Fires a refresh event once initialization is completed in case the binding is
     * resolved, or immediately in case it is unresolved.
     *
     * @returns The binding instance
     */
    initialize(): ODataTreeBinding;
    /**
     * Refreshes the binding, check whether the model data has been changed and fire change event if this is
     * the case. For server side models this should refetch the data from the server. To update a control, even
     * if no data has been changed, e.g. to reset a control after failed validation, use the parameter `bForceUpdate`.
     */
    refresh(
      /**
       * Update the bound control even if no data has been changed
       */
      bForceUpdate?: boolean,
      /**
       * The group Id for the refresh
       */
      sGroupId?: string
    ): void;
    /**
     * Sets the `rootLevel`. The root level is the level of the topmost tree nodes that will be used as an entry
     * point for OData services. This is only possible (and necessary) for OData services implementing the hierarchy
     * annotation specification, or when providing the annotation information locally as a binding parameter.
     * For more information, see {@link sap.ui.model.odata.v2.ODataModel#bindTree}.
     */
    setRootLevel(
      /**
       * The new `rootLevel`
       */
      iRootLevel: int
    ): void;
    /**
     * Sorts the Tree according to the given Sorter(s). In `OperationMode.Client` or `OperationMode.Auto` (if
     * the given threshold is satisfied), the sorters are applied locally on the client. **Note:** {@link sap.ui.model.odata.OperationMode.Auto}
     * is deprecated since 1.102.0.
     *
     * @returns returns `this` to facilitate method chaining
     */
    sort(
      /**
       * The Sorter or an Array of sap.ui.model.Sorter instances
       */
      aSorters: Sorter[] | Sorter,
      /**
       * Whether to return `true` or `false`, instead of `this`, depending on whether the sorting has been done
       */
      bReturnSuccess?: boolean
    ): this;
  }
}

declare module "sap/ui/model/odata/v4/AnnotationHelper" {
  import Context from "sap/ui/model/Context";

  import ValueListType from "sap/ui/model/odata/v4/ValueListType";

  /**
   * @SINCE 1.43.0
   *
   * A collection of methods which help to consume OData V4 annotations in XML template views. Every context argument must belong to an {@link sap.ui.model.odata.v4.ODataMetaModel}
   * instance.
   */
  interface AnnotationHelper {
    /**
     * @SINCE 1.63.0
     *
     * A function that helps to interpret OData V4 annotations.
     *
     * Unsupported or incorrect values are turned into a string nevertheless, but are indicated as such. In
     * such a case, an error describing the problem is logged to the console. Proper escaping is used to make
     * sure that data binding syntax is not corrupted.
     *
     * Example:
     * ```javascript
     *
     * <Text text="{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
     * ```
     *
     *
     * Supported Expressions:
     * 	 "14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float",
     * "edm:Guid", "edm:Int", "edm:TimeOfDay".  constant "14.4.11 Expression edm:String": This is turned
     * into a fixed text (for example `"Width"`). String constants that contain a simple binding `"{@i18n>...}"`
     * to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed text, but kept as
     * a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization.
     *  dynamic "14.5.1 Comparison and Logical Operators": These are turned into expression bindings to
     * perform the operations at runtime.  dynamic "14.5.3 Expression edm:Apply":
     * 	 "14.5.3.1.1 Function odata.concat": This is turned into a data binding expression relative to an entity.
     *  "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an expression binding to fill the
     * template at runtime.  "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding
     * to encode the parameter at runtime.  Apply functions may be nested arbitrarily.   dynamic
     * "14.5.5 Expression edm:Collection": This is turned into an expression binding to be evaluated at runtime.
     * Elements can be conditionally added to the collection when using dynamic "14.5.6 Expression edm:If" as
     * a direct child.  dynamic "14.5.6 Expression edm:If": This is turned into an expression binding to
     * be evaluated at runtime. The expression is a conditional expression like `"{=condition ? expression1
     * : expression2}"`.  dynamic "14.5.10 Expression edm:Null": This is turned into a `null` value. It
     * is ignored in `odata.concat`.  dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath":
     * These are turned into data bindings relative to an entity, including type information and constraints
     * as available from metadata, for example `"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints
     * : {'maxLength' : 255}, formatOptions : {'parseKeepsEmptyString' : true}}"`. Depending on the used type,
     * some additional constraints and format options of this type are set:
     * 	 Edm.DateTime: The "displayFormat" constraint is set to the value of the "sap:display-format" annotation
     * of the referenced property.  Edm.Decimal: The "precision" and "scale" constraints are set to the
     * values of the corresponding attributes of the referenced property. The "minimum", "maximum", "minimumExclusive",
     * and "maximumExclusive" constraints are set to the values of the corresponding "Org.OData.Validation.V1"
     * annotation of the referenced property; note that in this case only constant expressions are supported
     * to determine the annotation value.  Edm.String: The "maxLength" constraint is set to the value of
     * the corresponding attribute of the referenced property, and the "isDigitSequence" constraint is set to
     * the value of the "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced property;
     * note that in this case only constant expressions are supported to determine the annotation value. The
     * "parseKeepsEmptyString" format option is set.  Since 1.78.0, both "edm:Path" and "edm:PropertyPath"
     * are also supported if `vRawValue` is the path itself, and not the object wrapping it.
     *
     * $AnnotationPath and $Path: If `oDetails.context.getPath()` contains a single "$AnnotationPath" or "$Path"
     * segment, the value corresponding to that segment is considered as a data binding path prefix whenever
     * a dynamic "14.5.12 Expression edm:Path" or "14.5.13 Expression edm:PropertyPath" is turned into a data
     * binding. Use {@link sap.ui.model.odata.v4.AnnotationHelper.resolve$Path} to avoid these prefixes in cases
     * where they are not applicable.
     *
     * $AnnotationPath: Example for "$AnnotationPath" in the context's path:
     * ```javascript
     *
     * <Annotations Target="com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT">
     *   <Annotation Term="com.sap.vocabularies.UI.v1.Facets">
     *     <Collection>
     *       <Record Type="com.sap.vocabularies.UI.v1.ReferenceFacet">
     *         <PropertyValue Property="Target" AnnotationPath="EQUIPMENT_2_PRODUCT/@com.sap.vocabularies.Common.v1.QuickInfo" />
     *       </Record>
     *     </Collection>
     *   </Annotation>
     * </Annotations>
     * <Annotations Target="com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product">
     *   <Annotation Term="com.sap.vocabularies.Common.v1.QuickInfo" Path="Name" />
     * </Annotations>
     * ```
     *
     * ```javascript
     *
     * <Text text="{meta>/Equipments/@com.sap.vocabularies.UI.v1.Facets/0/Target/$AnnotationPath/@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
     * ```
     *  `format` returns a binding with path "EQUIPMENT_2_PRODUCT/Name".
     *
     * $Path: Example for "$Path" in the context's path:
     * ```javascript
     *
     * <Annotations Target="com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT">
     *   <Annotation Term="com.sap.vocabularies.UI.v1.LineItem">
     *     <Collection>
     *       <Record Type="com.sap.vocabularies.UI.v1.DataField">
     *         <PropertyValue Property="Value" Path="EQUIPMENT_2_PRODUCT/Name" />
     *       </Record>
     *     </Collection>
     *   </Annotation>
     * </Annotations>
     * <Annotations Target="com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product/Name">
     *   <Annotation Term="com.sap.vocabularies.Common.v1.QuickInfo" Path="PRODUCT_2_SUPPLIER/Supplier_Name" />
     * </Annotations>
     * ```
     *
     * ```javascript
     *
     * <Text text="{meta>/Equipments/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path@com.sap.vocabularies.Common.v1.QuickInfo@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
     * ```
     *  `format` returns a binding with path "EQUIPMENT_2_PRODUCT/PRODUCT_2_SUPPLIER/Supplier_Name".
     *
     * Annotations on an Operation or a Parameter: Since 1.71.0, for annotations on an operation or a parameter,
     * the binding parameter's name is stripped off any dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression
     * edm:PropertyPath" where it might be used as a first segment. Since 1.76.0 this does not apply to annotations
     * on a parameter. In the former case, we assume that the resulting data binding is relative to the parent
     * context of the operation binding, that is, to the context representing the binding parameter itself.
     * In the latter case, we assume that the resulting data binding is relative to the parameter context of
     * the operation binding (see {@link sap.ui.model.odata.v4.ODataContextBinding#getParameterContext}).
     *
     * Example:
     * ```javascript
     *
     *    <Action Name="ShipProduct" EntitySetPath="_it" IsBound="true" >
     *        <Parameter Name="_it" Type="name.space.Product" Nullable="false"/>
     *        <Parameter Name="City" Type="Edm.String"/>
     *    </Action>
     * ```
     *  For the operation `ShipProduct` mentioned above, the following annotation targets an operation parameter
     * and refers back to the binding parameter.
     * ```javascript
     *
     *     <Annotations Target="name.space.ShipProduct(name.space.Product)/City">
     *        <Annotation Term="com.sap.vocabularies.Common.v1.Text" Path="_it/SupplierIdentifier"/>
     *     </Annotations>
     * ```
     *
     *
     * Using `AnnotationHelper.format` like
     * ```javascript
     *
     * <Text text="{meta>/Products/name.space.ShipProduct/$Parameter/City@com.sap.vocabularies.Common.v1.Text@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
     * ```
     *  results in
     * ```javascript
     *
     * <Text text="{path:'_it/SupplierIdentifier',type:'sap.ui.model.odata.type.Int32'}" />
     * ```
     *  and the data binding evaluates to the `SupplierIdentifier` property of the entity the operation is called
     * on.
     *
     * Operation Parameters: Since 1.73.0, this function can be used on action or function parameters and results
     * in a relative data binding, just like a "14.5.12 Expression edm:Path".
     *
     * Assume we have the following metadata for an unbound action "AcChangeTeamBudgetByID":
     * ```javascript
     *
     *    <Action Name="AcChangeTeamBudgetByID">
     *        <Parameter Name="TeamID" Type="Edm.String" Nullable="false" MaxLength="10"/>
     *        <Parameter Name="Budget" Type="Edm.Decimal" Nullable="false" Precision="16" Scale="variable"/>
     *    </Action>
     * ```
     *
     *
     * Let `ChangeTeamBudgetByID` be the action import of this action. Using `AnnotationHelper.format` for the
     * `TeamID` like
     * ```javascript
     *
     * <Text text="{meta>/ChangeTeamBudgetByID/TeamID@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
     * ```
     *  results in
     * ```javascript
     *
     * <Text text="{path:'TeamID',type:'sap.ui.model.odata.type.String',constraints:{'maxLength':10,'nullable':false},formatOptions:{'parseKeepsEmptyString':true}}" />
     * ```
     *
     *
     * Binding Parameters and Format Options: Since 1.77.0, binding parameters and format options can be given.
     * The usage
     * ```javascript
     *
     * <Input value="{meta>/ChangeTeamBudgetByID/Budget@@sap.ui.model.odata.v4.AnnotationHelper.format($($$noPatch : true$), $(groupingEnabled : false$))}" />
     * ```
     *  results in a data binding with the given binding parameters and format options. Note how, for an object
     * notation, curly brackets must be replaced by `$(` and `$)` respectively. Use `null`, not `undefined`,
     * in case no binding parameters are needed.
     *
     * Structural Properties: Since 1.78.0, this function can be used on a structural property and results in
     * a relative data binding, just like a "14.5.12 Expression edm:Path". The usage
     * ```javascript
     *
     * <Input value="{meta>/Department/Name@@sap.ui.model.odata.v4.AnnotationHelper.format}"/>
     * ```
     *  results in
     * ```javascript
     *
     * < Input value="{path:'Name',type:'sap.ui.model.odata.type.String',constraints:{'maxLength':40,'nullable':false},formatOptions:{'parseKeepsEmptyString':true}}"/>
     * ```
     *
     * See:
     * 	sap.ui.model.odata.v4.AnnotationHelper.resolve$Path
     * 	sap.ui.model.odata.v4.AnnotationHelper.value
     *
     * @returns A data binding, or a fixed text, or a sequence thereof, or a `Promise` resolving with that string,
     * for example if not all type information is already available
     */
    format(
      /**
       * The raw value from the meta model
       */
      vRawValue: any,
      /**
       * The details object
       */
      oDetails: {
        /**
         * Optional arguments: first an optional map of binding parameters, then an optional map of format options;
         * both will be added to each resulting data binding
         */
        arguments?: any[];
        /**
         * Points to the given raw value, that is `oDetails.context.getProperty("") === vRawValue`
         */
        context: Context;
        /**
         * The single operation overload that was targeted by annotations on an operation or a parameter; needed
         * to strip off the binding parameter's name from any dynamic "14.5.12 Expression edm:Path" and "14.5.13
         * Expression edm:PropertyPath" where it might be used as a first segment (since 1.71.0). This does not
         * apply to annotations on a parameter (since 1.76.0).
         */
        overload?: object;
      }
    ): string | Promise<any>;
    /**
     * @SINCE 1.43.0
     *
     * Returns a data binding according to the result of {@link sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath}.
     *
     * @returns A data binding according to the result of {@link sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath},
     * for example "{ToSupplier}" or ""
     */
    getNavigationBinding(
      /**
       * The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"
       * or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
       */
      sPath: string
    ): string;
    /**
     * @SINCE 1.43.0
     *
     * A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value
     * used by the following dynamic expressions:
     * 	 "14.5.2 Expression edm:AnnotationPath"  "14.5.11 Expression edm:NavigationPropertyPath"  "14.5.12
     * Expression edm:Path"  "14.5.13 Expression edm:PropertyPath"  It returns the path of structural
     * and navigation properties from the given path value, but removes "$count", types casts, term casts, and
     * annotations on navigation properties.
     *
     * @returns The path of structural and navigation properties, for example "ToSupplier" or ""
     */
    getNavigationPath(
      /**
       * The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"
       * or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
       */
      sPath: string
    ): string;
    /**
     * @SINCE 1.47.0
     *
     * Determines which type of value list exists for the given property.
     *
     * @returns The type of the value list or a `Promise` resolving with the type of the value list or rejected,
     * if the property cannot be found in the metadata
     */
    getValueListType(
      /**
       * The raw value from the meta model; must be either a property or a path pointing to a property (relative
       * to `oDetails.schemaChildName`)
       */
      vRawValue: any,
      /**
       * The details object
       */
      oDetails: {
        /**
         * Whether a `Promise` may be returned if the needed metadata is not yet loaded (since 1.57.0)
         */
        $$valueAsPromise?: boolean;
        /**
         * Points to the given path, that is `oDetails.context.getProperty("") === vRawValue`
         */
        context: Context;
        /**
         * The qualified name of the schema child where the computed annotation has been found, for example "name.space.EntityType"
         */
        schemaChildName: string;
      }
    ): (ValueListType | keyof typeof ValueListType) | Promise<any>;
    /**
     * @SINCE 1.43.0
     *
     * A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value
     * used by the following dynamic expressions:
     * 	 "14.5.2 Expression edm:AnnotationPath"  "14.5.11 Expression edm:NavigationPropertyPath"  "14.5.12
     * Expression edm:Path"  "14.5.13 Expression edm:PropertyPath"  It returns the information whether
     * the given path ends with "$count" or with a multi-valued structural or navigation property. Term casts
     * and annotations on navigation properties are ignored.
     *
     * Example:
     * ```javascript
     *
     * <template:if test="{facet>Target/$AnnotationPath@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple}">
     * ```
     *
     *
     * @returns `true` if the given path ends with "$count" or with a multi-valued structural or navigation
     * property, `false` otherwise. If `oDetails.$$valueAsPromise` is `true` a `Promise` may be returned resolving
     * with the boolean value.
     */
    isMultiple(
      /**
       * The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"
       * or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
       */
      sPath: string,
      /**
       * The details object
       */
      oDetails: {
        /**
         * Whether a `Promise` may be returned if the needed metadata is not yet loaded (since 1.57.0)
         */
        $$valueAsPromise?: boolean;
        /**
         * Points to the given path, that is `oDetails.context.getProperty("") === sPath`
         */
        context: Context;
        /**
         * The qualified name of the schema child where the computed annotation has been found, for example "name.space.EntityType"
         */
        schemaChildName: string;
      }
    ): boolean | Promise<any>;
    /**
     * @SINCE 1.49.0
     *
     * Returns the value for the label of a `com.sap.vocabularies.UI.v1.DataFieldAbstract` from the meta model.
     * If no `Label` property is available, but the data field has a `Value` property with an `edm:Path` expression
     * as value, the label will be taken from the `com.sap.vocabularies.Common.v1.Label` annotation of the path's
     * target property.
     *
     * Example:
     * ```javascript
     *
     * <Label text="{meta>@@sap.ui.model.odata.v4.AnnotationHelper.label}" />
     * ```
     *
     *
     * @returns A data binding or a fixed text or a sequence thereof or `undefined`. If `oDetails.$$valueAsPromise`
     * is `true` a `Promise` may be returned resolving with the value for the label.
     */
    label(
      /**
       * The raw value from the meta model
       */
      vRawValue: any,
      /**
       * The details object
       */
      oDetails: {
        /**
         * Whether a `Promise` may be returned if the needed metadata is not yet loaded (since 1.57.0)
         */
        $$valueAsPromise?: boolean;
        /**
         * Points to the given raw value, that is `oDetails.context.getProperty("") === vRawValue`
         */
        context: Context;
      }
    ): string | Promise<any> | undefined;
    /**
     * @SINCE 1.63.0
     *
     * Helper function for a `template:with` instruction that returns an equivalent to the given context's path,
     * without "$AnnotationPath", "$NavigationPropertyPath", "$Path", and "$PropertyPath" segments.
     * See:
     * 	sap.ui.model.odata.v4.AnnotationHelper.format
     *
     * @returns An equivalent to the given context's path, without the mentioned segments
     */
    resolve$Path(
      /**
       * A context which belongs to an {@link sap.ui.model.odata.v4.ODataMetaModel}
       */
      oContext: Context
    ): string;
    /**
     * @SINCE 1.43.0
     *
     * A function that helps to interpret OData V4 annotations.
     *
     * Unsupported or incorrect values are turned into a string nevertheless, but are indicated as such. In
     * such a case, an error describing the problem is logged to the console.
     *
     * Example:
     * ```javascript
     *
     * <Text text="{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.value}" />
     * ```
     *
     *
     * Supported Expressions:
     * 	 "14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float",
     * "edm:Guid", "edm:Int", "edm:TimeOfDay".  constant "14.4.11 Expression edm:String": This is turned
     * into a fixed text (for example `"Width"`). String constants that contain a simple binding `"{@i18n>...}"`
     * to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed text, but kept as
     * a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization.
     *  dynamic "14.5.1 Comparison and Logical Operators": These are turned into expression bindings to
     * perform the operations at runtime.  dynamic "14.5.3 Expression edm:Apply":
     * 	 "14.5.3.1.1 Function odata.concat": This is turned into a data binding expression.  "14.5.3.1.2
     * Function odata.fillUriTemplate": This is turned into an expression binding to fill the template at runtime.
     *  "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding to encode the parameter
     * at runtime.  Apply functions may be nested arbitrarily.   dynamic "14.5.5 Expression edm:Collection":
     * This is turned into an expression binding to be evaluated at runtime. Elements can be conditionally added
     * to the collection when using dynamic "14.5.6 Expression edm:If" as a direct child.  dynamic "14.5.6
     * Expression edm:If": This is turned into an expression binding to be evaluated at runtime. The expression
     * is a conditional expression like `"{=condition ? expression1 : expression2}"`.  dynamic "14.5.10
     * Expression edm:Null": This is turned into a `null` value. It is ignored in `odata.concat`.  dynamic
     * "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath": These are turned into simple
     * data bindings, for example `"{Name}"`. Since 1.78.0, both are also supported if `vRawValue` is the path
     * itself, and not the object wrapping it.
     *
     * Annotations on an Operation or a Parameter: Since 1.71.0, for annotations on an operation or a parameter,
     * the binding parameter's name is stripped off any dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression
     * edm:PropertyPath" where it might be used as a first segment. Since 1.76.0 this does not apply to annotations
     * on a parameter. In the former case, we assume that the resulting data binding is relative to the parent
     * context of the operation binding, that is, to the context representing the binding parameter itself.
     * In the latter case, we assume that the resulting data binding is relative to the parameter context of
     * the operation binding (see {@link sap.ui.model.odata.v4.ODataContextBinding#getParameterContext}).
     *
     * Example:
     * ```javascript
     *
     *    <Action Name="ShipProduct" EntitySetPath="_it" IsBound="true" >
     *        <Parameter Name="_it" Type="name.space.Product" Nullable="false"/>
     *        <Parameter Name="City" Type="Edm.String"/>
     *    </Action>
     * ```
     *  For the operation `ShipProduct` mentioned above, the following annotation targets an operation parameter
     * and refers back to the binding parameter.
     * ```javascript
     *
     *     <Annotations Target="name.space.ShipProduct(name.space.Product)/City">
     *        <Annotation Term="com.sap.vocabularies.Common.v1.Text" Path="_it/SupplierIdentifier"/>
     *     </Annotations>
     * ```
     *
     *
     * Using `AnnotationHelper.value` like
     * ```javascript
     *
     * <Text text="{meta>/Products/name.space.ShipProduct/$Parameter/City@com.sap.vocabularies.Common.v1.Text@@sap.ui.model.odata.v4.AnnotationHelper.value}" />
     * ```
     *  results in
     * ```javascript
     *
     * <Text text="{_it/SupplierIdentifier}" />
     * ```
     *  and the data binding evaluates to the `SupplierIdentifier` property of the entity the operation is called
     * on.
     *
     * Operation Parameters: Since 1.73.0, this function can be used on action or function parameters and results
     * in a relative data binding, just like a "14.5.12 Expression edm:Path".
     *
     * Assume we have the following metadata for an unbound action "AcChangeTeamBudgetByID":
     * ```javascript
     *
     *    <Action Name="AcChangeTeamBudgetByID">
     *        <Parameter Name="TeamID" Type="Edm.String" Nullable="false" MaxLength="10"/>
     *        <Parameter Name="Budget" Type="Edm.Decimal" Nullable="false" Precision="16" Scale="variable"/>
     *    </Action>
     * ```
     *
     *
     * Let `ChangeTeamBudgetByID` be the action import of this action. Using `AnnotationHelper.value` for the
     * `TeamID` like
     * ```javascript
     *
     * <Text text="{meta>/ChangeTeamBudgetByID/TeamID@@sap.ui.model.odata.v4.AnnotationHelper.value}" />
     * ```
     *  results in
     * ```javascript
     *
     * <Text text="{TeamID}" />
     * ```
     *
     *
     * Binding Parameters: Since 1.77.0, binding parameters can be given. The usage
     * ```javascript
     *
     * <Input value="{meta>/ChangeTeamBudgetByID/Budget@@sap.ui.model.odata.v4.AnnotationHelper.value($($$noPatch : true$))}" />
     * ```
     *  results in a data binding with the given binding parameters. Note how, for an object notation, curly
     * brackets must be replaced by `$(` and `$)` respectively.
     *
     * Structural Properties: Since 1.78.0, this function can be used on a structural property and results in
     * a relative data binding, just like a "14.5.12 Expression edm:Path". The usage
     * ```javascript
     *
     * <Input value="{meta>/Department/Name@@sap.ui.model.odata.v4.AnnotationHelper.value}"/>
     * ```
     *  results in
     * ```javascript
     *
     * < Input value="{Name}"/>
     * ```
     *
     * See:
     * 	sap.ui.model.odata.v4.AnnotationHelper.format
     *
     * @returns A data binding or a fixed text or a sequence thereof
     */
    value(
      /**
       * The raw value from the meta model
       */
      vRawValue: any,
      /**
       * The details object
       */
      oDetails: {
        /**
         * Optional arguments: an optional map of binding parameters; this will be added to each resulting data
         * binding
         */
        arguments?: any[];
        /**
         * Points to the given raw value, that is `oDetails.context.getProperty("") === vRawValue`
         */
        context: Context;
        /**
         * The single operation overload that was targeted by annotations on an operation or a parameter; needed
         * to strip off the binding parameter's name from any dynamic "14.5.12 Expression edm:Path" and "14.5.13
         * Expression edm:PropertyPath" where it might be used as a first segment (since 1.72.0). This does not
         * apply to annotations on a parameter (since 1.76.0).
         */
        overload?: object;
      }
    ): string;
  }
  const AnnotationHelper: AnnotationHelper;
  export default AnnotationHelper;
}

declare module "sap/ui/model/odata/v4/Context" {
  import Context1 from "sap/ui/model/Context";

  import ODataContextBinding from "sap/ui/model/odata/v4/ODataContextBinding";

  import ODataListBinding from "sap/ui/model/odata/v4/ODataListBinding";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.39.0
   *
   * Implementation of an OData V4 model's context.
   *
   * The context is a pointer to model data as returned by a query from an {@link sap.ui.model.odata.v4.ODataContextBinding}
   * or an {@link sap.ui.model.odata.v4.ODataListBinding}. Contexts are always and only created by such bindings.
   * A context for a context binding points to the complete query result. A context for a list binding points
   * to one specific entry in the binding's collection. A property binding does not have a context, you can
   * access its value via {@link sap.ui.model.odata.v4.ODataPropertyBinding#getValue}.
   *
   * Applications can access model data only via a context, either synchronously with the risk that the values
   * are not available yet ({@link #getProperty} and {@link #getObject}) or asynchronously ({@link #requestProperty}
   * and {@link #requestObject}).
   *
   * Context instances are immutable except for their indexes.
   */
  export default class Context extends Context1 {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.Context with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Context>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.Context.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.83.0
     *
     * Collapses the group node that this context points to.
     * See:
     * 	#expand
     * 	#isExpanded
     */
    collapse(): void;
    /**
     * @SINCE 1.43.0
     *
     * Returns a promise that is resolved without data when the entity represented by this context has been
     * created in the back end and all selected properties of this entity are available. Expanded navigation
     * properties are only available if the context's binding is refreshable. {@link sap.ui.model.odata.v4.ODataContextBinding#refresh}
     * and {@link sap.ui.model.odata.v4.ODataListBinding#refresh} describe which bindings are refreshable.
     *
     * As long as the promise is not yet resolved or rejected, the entity represented by this context is transient.
     *
     * Once the promise is resolved, {@link #getPath} returns a path including the key predicate of the new
     * entity. This requires that all key properties are available.
     *
     * @returns A promise that is resolved without data when the entity represented by this context has been
     * created in the back end. It is rejected with an `Error` instance where `oError.canceled === true` if
     * the transient entity is deleted before it is created in the back end, for example via {@link sap.ui.model.odata.v4.Context#delete},
     * {@link sap.ui.model.odata.v4.ODataListBinding#resetChanges} or {@link sap.ui.model.odata.v4.ODataModel#resetChanges}.
     * It is rejected with an `Error` instance without `oError.canceled` if loading of $metadata fails. Returns
     * `undefined` if the context has not been created using {@link sap.ui.model.odata.v4.ODataListBinding#create}.
     */
    created(): Promise<void> | undefined;
    /**
     * @SINCE 1.41.0
     *
     * Deletes the OData entity this context points to. The context is removed from the binding immediately,
     * even if {@link sap.ui.model.odata.v4.SubmitMode.API} is used, and the request is only sent later when
     * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} is called. As soon as the context is deleted on
     * the client, {@link #isDeleted} returns `true` and the context must not be used anymore (except for status
     * APIs like {@link #isDeleted}, {@link #isKeepAlive}, {@link #hasPendingChanges}, {@link #resetChanges}),
     * especially not as a binding context.
     *
     * Since 1.105 such a pending deletion is a pending change. It causes `hasPendingChanges` to return `true`
     * for the context, the binding containing it, and the model. The `resetChanges` method called on the context
     * (since 1.109.0), the binding, or the model cancels the deletion and restores the context.
     *
     * If the DELETE request succeeds, the context is destroyed and must not be used anymore. If it fails or
     * is canceled, the context is restored, reinserted into the list, and fully functional again.
     *
     * If the deleted context is used as binding context of a control or view, the application is advised to
     * unbind it via `{@link sap.ui.base.ManagedObject#setBindingContext setBindingContext(null)}` before calling
     * `delete`, and to possibly rebind it after reset or failure. The model itself ensures that all bindings
     * depending on this context become unresolved, but no attempt is made to restore these bindings in case
     * of reset or failure.
     * See:
     * 	#hasPendingChanges
     * 	#resetChanges
     * 	sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges
     * 	sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges
     * 	sap.ui.model.odata.v4.ODataModel#hasPendingChanges
     * 	sap.ui.model.odata.v4.ODataContextBinding#resetChanges
     * 	sap.ui.model.odata.v4.ODataListBinding#resetChanges
     * 	sap.ui.model.odata.v4.ODataModel#resetChanges
     *
     * @returns A promise which is resolved without a result in case of success, or rejected with an instance
     * of `Error` in case of failure, for example if:
     * 	 the given context does not point to an entity,  the deletion on the server fails,  the deletion
     * is canceled via `resetChanges` (in this case the error instance has the property `canceled` with value
     * `true`).  The error instance has the property `isConcurrentModification` with value `true` in case
     * a concurrent modification (e.g. by another user) of the entity between loading and deletion has been
     * detected; this should be shown to the user who needs to decide whether to try deletion again. If the
     * entity does not exist, we assume it has already been deleted by someone else and report success.
     */
    delete(
      /**
       * The group ID to be used for the DELETE request; if not specified, the update group ID for the context's
       * binding is used, see {@link #getUpdateGroupId}. Since 1.81, if this context is transient (see {@link
       * #isTransient}), no group ID needs to be specified. Since 1.98.0, you can use `null` to prevent the DELETE
       * request in case of a kept-alive context that is not in the collection and of which you know that it does
       * not exist on the server anymore (for example, a draft after activation). Since 1.108.0 the usage of a
       * group ID with {@link sap.ui.model.odata.v4.SubmitMode.API} is possible.
       */
      sGroupId?: string,
      /**
       * Whether not to request the new count from the server; useful in case of {@link #replaceWith} where it
       * is known that the count remains unchanged (since 1.97.0). Since 1.98.0, this is implied if a `null` group
       * ID is used.
       */
      bDoNotRequestCount?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.41.0
     *
     * Destroys this context, that is, it removes this context from all dependent bindings and drops references
     * to binding and model, so that the context cannot be used anymore; it keeps path and index for debugging
     * purposes.
     *
     * **BEWARE:** Do not call this function! The lifetime of an OData V4 context is completely controlled by
     * its binding.
     * See:
     * 	sap.ui.base.Object#destroy
     */
    destroy(): void;
    /**
     * @SINCE 1.77.0
     *
     * Expands the group node that this context points to.
     * See:
     * 	#collapse
     * 	#isExpanded
     */
    expand(): void;
    /**
     * @SINCE 1.39.0
     *
     * Returns the binding this context belongs to.
     *
     * @returns The context's binding
     */
    getBinding(): ODataContextBinding | ODataListBinding;
    /**
     * @SINCE 1.39.0
     *
     * Returns the "canonical path" of the entity for this context. According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL Conventions", this is
     * the "name of the entity set associated with the entity followed by the key predicate identifying the
     * entity within the collection". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create
     * an element binding.
     *
     * Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all key properties
     * are available within the initial data.
     *
     * @returns The canonical path (e.g. "/SalesOrderList('0500000000')")
     */
    getCanonicalPath(): string;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the context's binding that is used for read requests. See {@link sap.ui.model.odata.v4.ODataListBinding#getGroupId}
     * and {@link sap.ui.model.odata.v4.ODataContextBinding#getGroupId}.
     *
     * @returns The group ID
     */
    getGroupId(): string;
    /**
     * @SINCE 1.39.0
     *
     * Returns the context's index within the binding's collection. The return value changes when a new entity
     * is added via {@link sap.ui.model.odata.v4.ODataListBinding#create} without `bAtEnd`, and when a context
     * representing a created entity is deleted again.
     *
     * @returns The context's index within the binding's collection. It is `undefined` if
     * 	 it does not belong to a list binding,  it is {@link #isKeepAlive kept alive}, but not in the collection
     * currently.
     */
    getIndex(): number | undefined;
    /**
     * @SINCE 1.39.0
     *
     * Returns the value for the given path relative to this context. The function allows access to the complete
     * data the context points to (if `sPath` is "") or any part thereof. The data is a JSON structure as described
     * in "OData
     * JSON Format Version 4.0". Note that the function clones the result. Modify values via {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.
     *
     * Returns `undefined` if the data is not (yet) available; no request is triggered. Use {@link #requestObject}
     * for asynchronous access.
     *
     * The header context of a list binding only delivers `$count` (wrapped in an object if `sPath` is "").
     * See:
     * 	sap.ui.model.Context#getObject
     *
     * @returns The requested value
     */
    getObject(
      /**
       * A path relative to this context
       */
      sPath?: string
    ): any;
    /**
     * @SINCE 1.39.0
     *
     * Returns the property value for the given path relative to this context. The path is expected to point
     * to a structural property with primitive type. Returns `undefined` if the data is not (yet) available;
     * no request is triggered. Use {@link #requestProperty} for asynchronous access.
     * See:
     * 	sap.ui.model.Context#getProperty
     * 	sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type
     *
     * @returns The requested property value
     */
    getProperty(
      /**
       * A path relative to this context
       */
      sPath: string,
      /**
       * If `true`, the value is returned in external format using a UI5 type for the given property path that
       * formats corresponding to the property's EDM type and constraints. If the type is not yet available, `undefined`
       * is returned.
       */
      bExternalFormat?: boolean
    ): any;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the context's binding that is used for update requests. See {@link sap.ui.model.odata.v4.ODataListBinding#getUpdateGroupId}
     * and {@link sap.ui.model.odata.v4.ODataContextBinding#getUpdateGroupId}.
     *
     * @returns The update group ID
     */
    getUpdateGroupId(): string;
    /**
     * @SINCE 1.53.0
     *
     * Returns whether there are pending changes for bindings dependent on this context, or for unresolved bindings
     * (see {@link sap.ui.model.Binding#isResolved}) which were dependent on this context at the time the pending
     * change was created. This includes the context itself being {@link #isTransient transient} or {@link #delete
     * deleted} on the client, but not yet on the server. Since 1.98.0, {@link #isInactive inactive} contexts
     * are ignored, unless their {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate activation}
     * has been prevented and therefore {@link #isInactive} returns `1`.
     *
     * @returns Whether there are pending changes
     */
    hasPendingChanges(): boolean;
    /**
     * @SINCE 1.105.0
     *
     * Returns whether this context is deleted. It becomes `true` immediately after calling {@link #delete},
     * even while the request is waiting for {@link sap.ui.model.odata.v4.ODataModel#submitBatch submitBatch}
     * or is in process. It becomes `false` again when the DELETE request fails or is canceled. The result of
     * this function can also be accessed via the "@$ui5.context.isDeleted" instance annotation at the entity.
     * See:
     * 	#delete
     *
     * @returns `true` if this context is deleted
     */
    isDeleted(): boolean;
    /**
     * @SINCE 1.77.0
     *
     * Tells whether the group node that this context points to is expanded.
     * See:
     * 	#collapse
     * 	#expand
     *
     * @returns Whether the group node that this context points to is expanded, or `undefined` if the node is
     * not expandable
     */
    isExpanded(): boolean | undefined;
    /**
     * @SINCE 1.98.0
     *
     * Returns whether this context is inactive. The result of this function can also be accessed via instance
     * annotation "@$ui5.context.isInactive" at the entity.
     *
     * Since 1.110.0, `1` is returned in case {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate
     * activation} has been prevented. Note that
     * 	 it is truthy: `!!1 === true`,  it is almost like `true`: `1 == true`,  but it can easily be
     * distinguished: `1 !== true`,  and `if (oContext.isInactive()) {...}` treats inactive contexts the
     * same, no matter whether activation has been prevented or not.
     * See:
     * 	#isTransient
     * 	sap.ui.model.odata.v4.ODataListBinding#create
     *
     * @returns `true` if this context is inactive, `false` if it was created in an inactive state and has been
     * activated, `1` in case activation has been prevented (since 1.110.0), and `undefined` otherwise.
     */
    isInactive(): boolean | number | undefined;
    /**
     * @SINCE 1.81.0
     *
     * Returns whether this context is kept alive even when it is removed from its binding's collection, for
     * example if a filter is applied and the entity represented by this context does not match the filter criteria.
     * See:
     * 	#setKeepAlive
     *
     * @returns `true` if this context is kept alive
     */
    isKeepAlive(): boolean;
    /**
     * @EXPERIMENTAL (since 1.111.0)
     *
     * Tells whether this context is currently selected.
     * See:
     * 	#setSelected
     *
     * @returns Whether this context is currently selected
     */
    isSelected(): boolean;
    /**
     * @SINCE 1.43.0
     *
     * For a context created using {@link sap.ui.model.odata.v4.ODataListBinding#create}, the method returns
     * `true` if the context is transient, meaning that the promise returned by {@link #created} is not yet
     * resolved or rejected, and returns `false` if the context is not transient. The result of this function
     * can also be accessed via instance annotation "@$ui5.context.isTransient" at the entity.
     * See:
     * 	#isInactive
     *
     * @returns Whether this context is transient if it is created using {@link sap.ui.model.odata.v4.ODataListBinding#create};
     * `undefined` if it is not created using {@link sap.ui.model.odata.v4.ODataListBinding#create}
     */
    isTransient(): boolean | undefined;
    /**
     * @SINCE 1.53.0
     *
     * Refreshes the single entity represented by this context. Use {@link #requestRefresh} if you want to wait
     * for the refresh.
     */
    refresh(
      /**
       * The group ID to be used for the refresh; if not specified, the group ID for the context's binding is
       * used, see {@link #getGroupId}.
       */
      sGroupId?: string,
      /**
       * If the context belongs to a list binding, the parameter allows the list binding to remove the context
       * from the list binding's collection because the entity does not match the binding's filter anymore, see
       * {@link sap.ui.model.odata.v4.ODataListBinding#filter}; a removed context is destroyed, see {@link #destroy}.
       * If the context belongs to a context binding, the parameter must not be used. Supported since 1.55.0
       *
       * Since 1.84.0, if this context is {@link #isKeepAlive kept alive}, it is only destroyed if the corresponding
       * entity does no longer exist in the back end. In this case, the `fnOnBeforeDestroy` callback passed with
       * {@link #setKeepAlive}) is called.
       */
      bAllowRemoval?: boolean
    ): void;
    /**
     * @SINCE 1.97.0
     *
     * Replaces this context with the given other context "in situ", that is, at the index it currently has
     * in its list binding's collection. You probably want to delete this context afterwards without requesting
     * the new count from the server, see the `bDoNotRequestCount` parameter of {@link #delete}.
     */
    replaceWith(
      /**
       * The other context
       */
      oOtherContext: Context
    ): void;
    /**
     * @SINCE 1.39.0
     *
     * Returns a promise for the "canonical path" of the entity for this context. According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL Conventions", this is
     * the "name of the entity set associated with the entity followed by the key predicate identifying the
     * entity within the collection". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create
     * an element binding.
     *
     * Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all key properties
     * are available within the initial data.
     *
     * @returns A promise which is resolved with the canonical path (e.g. "/SalesOrderList('0500000000')") in
     * case of success, or rejected with an instance of `Error` in case of failure, e.g. if the given context
     * does not point to an entity
     */
    requestCanonicalPath(): Promise<any>;
    /**
     * @SINCE 1.39.0
     *
     * Returns a promise on the value for the given path relative to this context. The function allows access
     * to the complete data the context points to (if `sPath` is "") or any part thereof. The data is a JSON
     * structure as described in "OData JSON Format Version 4.0". Note that the function clones the result. Modify values via {@link
     * sap.ui.model.odata.v4.Context#setProperty}.
     *
     * The header context of a list binding only delivers `$count` (wrapped in an object if `sPath` is "").
     *
     * If you want {@link #requestObject} to read fresh data, call {@link #refresh} first.
     * See:
     * 	#getBinding
     * 	sap.ui.model.odata.v4.ODataContextBinding#refresh
     * 	sap.ui.model.odata.v4.ODataListBinding#refresh
     *
     * @returns A promise on the requested value; it is rejected if the context is a header context and the
     * path is neither empty nor "$count".
     */
    requestObject(
      /**
       * A path relative to this context
       */
      sPath?: string
    ): Promise<any>;
    /**
     * @SINCE 1.39.0
     *
     * Returns a promise on the property value for the given path relative to this context. The path is expected
     * to point to a structural property with primitive type. Since 1.81.1 it is possible to request more than
     * one property. Property values that are not cached yet are requested from the back end.
     * See:
     * 	sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type
     *
     * @returns A promise on the requested value or values; it is rejected if a value is not primitive or if
     * the context is a header context and a path is not "$count"
     */
    requestProperty(
      /**
       * One or multiple paths relative to this context
       */
      vPath?: string | string[],
      /**
       * If `true`, the values are returned in external format using UI5 types for the given property paths that
       * format corresponding to the properties' EDM types and constraints
       */
      bExternalFormat?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.87.0
     *
     * Refreshes the single entity represented by this context and returns a promise to wait for it. See {@link
     * #refresh} for details. Use {@link #refresh} if you do not need the promise.
     *
     * @returns A promise which resolves without a defined result when the refresh is finished and rejects with
     * an instance of `Error` if the refresh failed
     */
    requestRefresh(
      /**
       * The group ID to be used
       */
      sGroupId?: string,
      /**
       * Allows to remove the context
       */
      bAllowRemoval?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.61.0
     *
     * Loads side effects for this context using the given "14.5.11 Expression edm:NavigationPropertyPath" or
     * "14.5.13 Expression edm:PropertyPath" objects. Use this method to explicitly load side effects in case
     * implicit loading is switched off via the binding-specific parameter `$$patchWithoutSideEffects`. The
     * method can be called on
     * 	 the bound context of a context binding,  the return value context of an operation binding,
     * a context of a list binding representing a single entity,  the header context of a list binding;
     * side effects are loaded for the whole binding in this case.  Key predicates must be available in
     * this context's path. Avoid navigation properties as part of a binding's $select system query option as
     * they may trigger pointless requests. There must be only context bindings between this context and its
     * first ancestor binding which uses own data service requests.
     *
     * If the first ancestor binding has an empty path, it is a context binding. In this case, we look for the
     * farthest ancestor binding with the following characteristics: It uses own data service requests, it can
     * be reached via a sequence of only empty paths, and it is actually being used. This way, side effects
     * are loaded also for siblings of that first ancestor binding which show the same data, but useless requests
     * are avoided.
     *
     * By default, the request uses the update group ID for this context's binding; this way, it can easily
     * be part of the same batch request as the corresponding update. **Caution:** If a dependent binding uses
     * a different update group ID, it may lose its pending changes. The same will happen if a different group
     * ID is provided, and the side effects affect properties for which there are pending changes.
     *
     * All failed updates or creates for the group ID are repeated within the same batch request. If the group
     * ID has submit mode {@link sap.ui.model.odata.v4.SubmitMode.Auto} and there are currently running updates
     * or creates this method first waits for them to be processed.
     *
     * The events 'dataRequested' and 'dataReceived' are not fired. Whatever should happen in the event handler
     * attached to...
     * 	 'dataRequested', can instead be done before calling {@link #requestSideEffects}.  'dataReceived',
     * can instead be done once the `oPromise` returned by {@link #requestSideEffects} fulfills or rejects (using
     * `oPromise.then(function () {...}, function () {...})`).
     * See:
     * 	sap.ui.model.odata.v4.ODataContextBinding#execute
     * 	sap.ui.model.odata.v4.ODataContextBinding#getBoundContext
     * 	sap.ui.model.odata.v4.ODataListBinding#getHeaderContext
     * 	sap.ui.model.odata.v4.ODataModel#bindContext
     *
     * @returns Promise resolved with `undefined`, or rejected with an error if loading of side effects fails.
     * Use it to set fields affected by side effects to read-only before {@link #requestSideEffects} and make
     * them editable again when the promise resolves; in the error handler, you can repeat the loading of side
     * effects.
     *  The promise is rejected if the call wants to refresh a whole list binding (via header context or an
     * absolute path), but the deletion of a row context (see {@link #delete}) is pending with a different group
     * ID.
     */
    requestSideEffects(
      /**
       * The "14.5.11 Expression edm:NavigationPropertyPath" or "14.5.13 Expression edm:PropertyPath" objects
       * describing which properties need to be loaded because they may have changed due to side effects of a
       * previous update, for example `[{$PropertyPath : "TEAM_ID"}, {$NavigationPropertyPath : "EMPLOYEE_2_MANAGER"},
       * {$PropertyPath : "EMPLOYEE_2_TEAM/Team_Id"}]`. An empty navigation property path means that the whole
       * entity may have changed, including its navigation properties. Since 1.75, a property path may end with
       * a "*" segment to indicate that all structural properties may have changed, but no navigation properties
       * (unless listed explicitly), for example `[{$PropertyPath : "*"}, {$NavigationPropertyPath : "EMPLOYEE_2_MANAGER"}]`
       * or `[{$PropertyPath : "EMPLOYEE_2_MANAGER/*"}]`.
       *
       * Since 1.82.0 absolute paths are supported. Absolute paths must start with the entity container (example
       * "/com.sap.gateway.default.iwbep.tea_busi.v0001.Container/TEAMS") of the service. All (navigation) properties
       * in the complete model matching such an absolute path are updated. Since 1.85.0, "14.4.11 Expression edm:String"
       * is accepted as well.
       *
       * Since 1.108.8, a property path matching the "com.sap.vocabularies.Common.v1.Messages" annotation of a
       * list binding's entity type is treated specially for a row context of a list binding: It is loaded even
       * if it has not yet been requested by that list binding. This way, exactly the messages for a single row
       * can be updated. Same for a "*" segment or an empty navigation property path.
       */
      aPathExpressions: object[] | string[],
      /**
       * The group ID to be used (since 1.69.0); if not specified, the update group ID for the context's binding
       * is used, see {@link #getUpdateGroupId}. If a different group ID is specified, make sure that {@link #requestSideEffects}
       * is called after the corresponding updates have been successfully processed by the server and that there
       * are no pending changes for the affected properties.
       */
      sGroupId?: string
    ): Promise<undefined>;
    /**
     * @SINCE 1.113.0
     *
     * Resets all property changes, created entities, and entity deletions of this context. Resets also invalid
     * user input and inactive contexts which had their activation prevented (see {@link sap.ui.model.odata.v4.Context#isInactive}).
     * This function does not reset the execution of OData operations (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}).
     * For a context which is currently {@link #delete deleted} on the client, but not yet on the server, this
     * method cancels the deletion and restores the context.
     * See:
     * 	#hasPendingChanges
     *
     * @returns A promise which is resolved without a defined result as soon as all changes in the context and
     * its current dependent bindings are canceled
     */
    resetChanges(): Promise<any>;
    /**
     * @SINCE 1.81.0
     *
     * Sets this context's `keepAlive` attribute. If `true` the context is kept alive even when it is removed
     * from its binding's collection, for example if a filter is applied and the entity represented by this
     * context does not match the filter criteria.
     *
     * Normally, a context's lifecycle is managed implicitly. It is created once it is needed and destroyed
     * if it is not needed anymore, for example, because it is no longer part of its list binding's collection.
     * It is thus unsafe to keep a reference to a context instance which is not explicitly kept alive. Once
     * a context is not kept alive anymore, the implicit lifecycle management again takes control and destroys
     * the context if it is no longer needed.
     *
     * Note: This is only supported if the model uses the `autoExpandSelect` parameter.
     * See:
     * 	#isKeepAlive
     */
    setKeepAlive(
      /**
       * Whether to keep the context alive
       */
      bKeepAlive: boolean,
      /**
       * Callback function that is executed once for a kept-alive context just before it is destroyed, see {@link
       * #destroy}. Supported since 1.84.0
       */
      fnOnBeforeDestroy?: Function,
      /**
       * Whether to request messages for this entity. Only used if `bKeepAlive` is `true`. Determines the messages
       * property from the annotation "com.sap.vocabularies.Common.v1.Messages" at the entity type. If found,
       * the binding keeps requesting messages until it is destroyed. Otherwise an error is logged in the console
       * and no messages are requested. Supported since 1.92.0
       */
      bRequestMessages?: boolean
    ): void;
    /**
     * @SINCE 1.67.0
     *
     * Sets a new value for the property identified by the given path. The path is relative to this context
     * and is expected to point to a structural property with primitive type or, since 1.85.0, to an instance
     * annotation.
     * See:
     * 	#getProperty
     * 	sap.ui.model.odata.v4.ODataContextBinding#event:patchSent
     * 	sap.ui.model.odata.v4.ODataContextBinding#event:patchCompleted
     * 	sap.ui.model.odata.v4.ODataListBinding#event:patchSent
     * 	sap.ui.model.odata.v4.ODataListBinding#event:patchCompleted
     *
     * @returns A promise which is resolved without a result in case of success, or rejected with an instance
     * of `Error` in case of failure, for example if the annotation belongs to the read-only namespace "@$ui5.*".
     * With `bRetry` it is only rejected with an `Error` instance where `oError.canceled === true` when the
     * entity has been deleted while the request was pending or the property has been reset via the methods
     *
     * 	 {@link sap.ui.model.odata.v4.ODataModel#resetChanges}  {@link sap.ui.model.odata.v4.ODataContextBinding#resetChanges}
     * or  {@link sap.ui.model.odata.v4.ODataListBinding#resetChanges}.
     */
    setProperty(
      /**
       * A path relative to this context
       */
      sPath: string,
      /**
       * The new value which must be primitive
       */
      vValue: any,
      /**
       * The group ID to be used for the PATCH request; if not specified, the update group ID for the context's
       * binding is used, see {@link #getUpdateGroupId}. Since 1.74.0, you can use `null` to prevent the PATCH
       * request.
       */
      sGroupId?: string,
      /**
       * Since 1.85.0, if `true` the property is not reset if the PATCH request failed. It contributes to the
       * pending changes instead (see {@link sap.ui.model.odata.v4.ODataModel#hasPendingChanges}, {@link sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges}
       * and {@link sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges}) and can be reset via the corresponding
       * `resetChanges` methods.
       *
       * The PATCH is automatically repeated with the next call of {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
       * if the group ID has {@link sap.ui.model.odata.v4.SubmitMode.API}. Otherwise it is repeated when the property
       * is modified again.
       *
       * Each time the PATCH request is sent to the server, a 'patchSent' event is fired on the binding sending
       * the request. When the response for this request is received, a 'patchCompleted' with a boolean parameter
       * 'success' is fired.
       */
      bRetry?: boolean
    ): Promise<any>;
    /**
     * @EXPERIMENTAL (since 1.111.0)
     *
     * Determines whether this context is currently selected.
     * See:
     * 	#isSelected
     */
    setSelected(
      /**
       * Whether this context is currently selected
       */
      bSelected: boolean
    ): void;
    /**
     * @SINCE 1.39.0
     *
     * Returns a string representation of this object including the following information:
     * 	 {@link #getPath Binding path},  {@link #getIndex Index},  State (see also "Context states"
     * of {@link topic:c9723f8265f644af91c0ed941e114d46 Creating an Entity}), including whether this context
     * is {@link #isSelected selected}.
     * See:
     * 	#destroy
     * 	#isDeleted
     * 	#isInactive
     * 	#isTransient
     *
     * @returns A string description of this binding
     */
    toString(): string;
  }
}

declare module "sap/ui/model/odata/v4/ODataContextBinding" {
  import ContextBinding from "sap/ui/model/ContextBinding";

  import Context from "sap/ui/model/odata/v4/Context";

  import Metadata from "sap/ui/base/Metadata";

  import ODataListBinding from "sap/ui/model/odata/v4/ODataListBinding";

  import ODataPropertyBinding from "sap/ui/model/odata/v4/ODataPropertyBinding";

  /**
   * @SINCE 1.37.0
   *
   * Context binding for an OData V4 model. An event handler can only be attached to this binding for the
   * following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', 'DataStateChange',
   * 'patchCompleted', and 'patchSent'. For other events, an error is thrown.
   *
   * A context binding can also be used as an operation binding to support bound actions, action imports,
   * bound functions and function imports. If you want to control the execution time of an operation, for
   * example a function import named "GetNumberOfAvailableItems", create a context binding for the path "/GetNumberOfAvailableItems(...)"
   * (as specified here, including the three dots). Such an operation binding is deferred, meaning
   * that it does not request automatically, but only when you call {@link #execute}. {@link #refresh} is
   * always ignored for actions and action imports. For bound functions and function imports, it is ignored
   * if {@link #execute} has not yet been called. Afterwards it results in another call of the function with
   * the parameter values of the last execute.
   *
   * The binding parameter for bound actions or bound functions may be given in the binding path, for example
   * "/SalesOrderList('42')/name.space.SalesOrder_Confirm". This can be used if the exact entity for the binding
   * parameter is known in advance. If you use a relative binding instead, the operation path is a concatenation
   * of the parent context's canonical path and the deferred binding's path.
   *
   * **Example**: You have a table with a list binding to "/SalesOrderList". In each row you have a button
   * to confirm the sales order, with the relative binding "name.space.SalesOrder_Confirm(...)". Then the
   * parent context for such a button refers to an entity in "SalesOrderList", so its canonical path is "/SalesOrderList('SalesOrderID')"
   * and the resulting path for the action is "/SalesOrderList('SalesOrderID')/name.space.SalesOrder_Confirm".
   *
   * This also works if the relative path of the deferred operation binding starts with a navigation property.
   * Then this navigation property will be part of the operation's resource path, which is still valid.
   *
   * A deferred operation binding is not allowed to have another deferred operation binding as parent.
   */
  export default class ODataContextBinding extends ContextBinding {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataContextBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.ODataContextBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.37.0
     *
     * See {@link sap.ui.base.EventProvider#attachEvent}
     * See:
     * 	sap.ui.base.EventProvider#attachEvent
     *
     * @returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,

      _oData?: object,

      _fnFunction?: Function,

      _oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Attach event handler `fnFunction` to the 'patchCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachPatchCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Attach event handler `fnFunction` to the 'patchSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachPatchSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.45.0
     *
     * Changes this binding's parameters and refreshes the binding. Since 1.111.0, a list binding's header context
     * is deselected.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #changeParameters}.
     *
     * The parameters are changed according to the given map of parameters: Parameters with an `undefined` value
     * are removed, the other parameters are set, and missing parameters remain unchanged.
     */
    changeParameters(
      /**
       * Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}
       */
      mParameters: object
    ): void;
    /**
     * @SINCE 1.40.1
     *
     * Destroys the object. The object must not be used anymore after this function was called.
     * See:
     * 	sap.ui.model.Binding#destroy
     */
    destroy(): void;
    /**
     * @SINCE 1.59.0
     *
     * Detach event handler `fnFunction` from the 'patchCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachPatchCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Detach event handler `fnFunction` from the 'patchSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachPatchSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * Calls the OData operation that corresponds to this operation binding.
     *
     * Parameters for the operation must be set via {@link #setParameter} beforehand.
     *
     * The value of this binding is the result of the operation. To access a result of primitive type, bind
     * a control to the path "value", for example `<Text text="{value}"/>`. If the result has a complex or
     * entity type, you can bind properties as usual, for example `<Text text="{street}"/>`.
     *
     * Since 1.98.0, a single-valued navigation property can be treated like a function if
     * 	 it has the same type as the operation binding's parent context,  that parent context is in a list
     * binding for a top-level entity set,  there is a navigation property binding which points to that
     * same entity set,  no operation parameters have been set,  the `bReplaceWithRVC` parameter is
     * used.
     *
     * @returns A promise that is resolved without data or with a return value context when the operation call
     * succeeded, or rejected with an `Error` instance `oError` in case of failure, for instance if the operation
     * metadata is not found, if overloading is not supported, if a collection-valued function parameter is
     * encountered, or if `bIgnoreETag` is used for an operation other than a bound action. It is also rejected
     * if `fnOnStrictHandlingFailed` is supplied and
     * 	 is used for an operation other than an action,  another request that applies the preference "handling=strict"
     * exists in a different change set of the same $batch request,  it does not return a `Promise`,
     * returns a `Promise` that resolves with `false`. In this case `oError.canceled === true`.  It is
     * also rejected if `bReplaceWithRVC` is supplied, and there is no return value context at all or the existing
     * context as described above is currently part of the list's collection (that is, has an index).
     *  A return value context is an {@link sap.ui.model.odata.v4.Context} which represents a bound operation
     * response. It is created only if the operation is bound and has a single entity return value from the
     * same entity set as the operation's binding parameter and has a parent context which is an {@link sap.ui.model.odata.v4.Context}
     * and points to an entity from an entity set. It is destroyed the next time this operation binding is executed
     * again!
     *  If a return value context is created, it must be used instead of `this.getBoundContext()`. All bound
     * messages will be related to the return value context only. Such a message can only be connected to a
     * corresponding control if the control's property bindings use the return value context as binding context.
     */
    execute(
      /**
       * The group ID to be used for the request; if not specified, the group ID for this binding is used, see
       * {@link sap.ui.model.odata.v4.ODataContextBinding#constructor} and {@link #getGroupId}. To use the update
       * group ID, see {@link #getUpdateGroupId}, it needs to be specified explicitly. Valid values are `undefined`,
       * '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string,
      /**
       * Whether the entity's ETag should be actively ignored (If-Match:*); supported for bound actions only,
       * since 1.90.0. Ignored if there is no ETag (since 1.93.0).
       */
      bIgnoreETag?: boolean,
      /**
       * If this callback is given for an action, the preference "handling=strict" is applied. If the service
       * responds with the HTTP status code 412 and a "Preference-applied: handling=strict" header, the details
       * from the OData error response are extracted and passed to the callback as an array of {@link sap.ui.core.message.Message}
       * items. The callback has to return a `Promise` resolving with a `boolean` value in order to indicate whether
       * the bound action should either be repeated **without** applying the preference or rejected with an `Error`
       * instance `oError` where `oError.canceled === true`. Since 1.92.0.
       */
      fnOnStrictHandlingFailed?: Function,
      /**
       * Whether this operation binding's parent context, which must belong to a list binding, is replaced with
       * the operation's return value context (see below) and that list context is returned instead. That list
       * context may be a newly created context or an existing context. A newly created context has the same `keepAlive`
       * attribute and `fnOnBeforeDestroy` function as the parent context, see {@link sap.ui.model.odata.v4.Context#setKeepAlive};
       * `fnOnBeforeDestroy` will be called with the new context instance as the only argument in this case. An
       * existing context does not change its `keepAlive` attribute. In any case, the resulting context takes
       * the place (index, position) of the parent context (see {@link sap.ui.model.odata.v4.Context#getIndex}),
       * which need not be in the collection currently if it is {@link sap.ui.model.odata.v4.Context#isKeepAlive
       * kept alive}. If the parent context has requested messages when it was kept alive, they will be inherited
       * if the $$inheritExpandSelect binding parameter is set to `true`. Since 1.97.0.
       */
      bReplaceWithRVC?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.39.0
     *
     * Returns the bound context.
     *
     * @returns The bound context
     */
    getBoundContext(): Context;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for read requests. The group ID of the binding is alternatively
     * defined by
     * 	 the `groupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$groupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link
     * sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The group ID
     */
    getGroupId(): string;
    /**
     * @SINCE 1.73.0
     *
     * Returns the context pointing to the parameters of a deferred operation binding.
     *
     * @returns The parameter context
     */
    getParameterContext(): Context;
    /**
     * @SINCE 1.53.0
     *
     * Returns the root binding of this binding's hierarchy, see {@link topic:fccfb2eb41414f0792c165e69a878717
     * Initialization and Read Requests}.
     *
     * @returns The root binding or `undefined` if this binding is unresolved (see {@link sap.ui.model.Binding#isResolved}).
     */
    getRootBinding():
      | ODataContextBinding
      | ODataListBinding
      | ODataPropertyBinding
      | undefined;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for update requests. The update group ID of the binding
     * is alternatively defined by
     * 	 the `updateGroupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$updateGroupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and
     * {@link sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The update group ID
     */
    getUpdateGroupId(): string;
    /**
     * @SINCE 1.39.0
     *
     * Returns `true` if this binding or its dependent bindings have property changes, created entities, or
     * entity deletions which have not been sent successfully to the server. This function does not take the
     * execution of OData operations (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}) into account.
     * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isInactive inactive} contexts are ignored, unless
     * (since 1.100.0) their {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate activation}
     * has been prevented and {@link sap.ui.model.odata.v4.Context#isInactive} therefore returns `1`.
     *
     * Note: If this binding is relative, its data is cached separately for each parent context path. This method
     * returns `true` if there are pending changes for the current parent context path of this binding. If this
     * binding is unresolved (see {@link sap.ui.model.Binding#isResolved}), it returns `false`.
     *
     * @returns `true` if the binding is resolved and has pending changes
     */
    hasPendingChanges(
      /**
       * Whether to ignore changes which will not be lost by APIs like {@link sap.ui.model.odata.v4.ODataListBinding#changeParameters
       * changeParameters}, {@link sap.ui.model.odata.v4.ODataListBinding#filter filter}, {@link sap.ui.model.odata.v4.ODataListBinding#refresh
       * refresh} (since 1.100.0), {@link sap.ui.model.odata.v4.ODataListBinding#sort sort}, or {@link sap.ui.model.odata.v4.ODataListBinding#suspend
       * suspend} because they relate to a {@link sap.ui.model.odata.v4.Context#isKeepAlive kept-alive} (since
       * 1.97.0) or {@link sap.ui.model.odata.v4.Context#delete deleted} (since 1.108.0) context of this binding.
       * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isTransient transient} contexts of a {@link #getRootBinding
       * root binding} are treated as kept-alive by this flag. Since 1.99.0, the same happens for bindings using
       * the `$$ownRequest` parameter (see {@link sap.ui.model.odata.v4.ODataModel#bindList}).
       */
      bIgnoreKeptAlive?: boolean
    ): boolean;
    /**
     * @SINCE 1.37.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initializes the OData context binding: Fires a 'change' event in case the binding has a resolved path
     * and its root binding is not suspended.
     * See:
     * 	#getRootBinding
     */
    initialize(): void;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    isInitial(): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and
     * notifies the control that new data is available.
     *
     * Refresh is supported for bindings which are not relative to an {@link sap.ui.model.odata.v4.Context}.
     *
     * Note: When calling {@link #refresh} multiple times, the result of the request triggered by the last call
     * determines the binding's data; it is **independent** of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * with the given group ID.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #refresh}.
     *
     * Use {@link #requestRefresh} if you want to wait for the refresh.
     * See:
     * 	sap.ui.model.Binding#refresh
     * 	#getRootBinding
     * 	#suspend
     */
    refresh(
      /**
       * The group ID to be used for refresh; if not specified, the binding's group ID is used, see {@link #getGroupId}.
       * For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's
       * group ID. A value of type boolean is not accepted and an error will be thrown (a forced refresh is not
       * supported).
       *
       * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
       * {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string | boolean
    ): void;
    /**
     * @SINCE 1.69.0
     *
     * Returns a promise on the value for the given path relative to this binding. The function allows access
     * to the complete data the binding points to (if `sPath` is "") or any part thereof. The data is a JSON
     * structure as described in "OData JSON Format Version 4.0". Note that the function clones the result. Modify values via {@link
     * sap.ui.model.odata.v4.Context#setProperty}.
     *
     * If you want {@link #requestObject} to read fresh data, call `oBinding.refresh()` first.
     * See:
     * 	sap.ui.model.odata.v4.Context#requestObject
     *
     * @returns A promise on the requested value; in case there is no bound context this promise resolves with
     * `undefined`
     */
    requestObject(
      /**
       * A path relative to this context binding
       */
      sPath?: string
    ): Promise<any | undefined>;
    /**
     * @SINCE 1.87.0
     *
     * Refreshes the binding and returns a promise to wait for it. See {@link #refresh} for details. Use {@link
     * #refresh} if you do not need the promise.
     *
     * @returns A promise which resolves without a defined result when the refresh is finished and rejects with
     * an instance of `Error` if the refresh failed
     */
    requestRefresh(
      /**
       * The group ID to be used
       */
      sGroupId?: string
    ): Promise<any>;
    /**
     * @SINCE 1.40.1
     *
     * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user
     * input.
     *
     * @returns A promise which is resolved without a defined result as soon as all changes in the binding itself
     * and all dependent bindings are canceled (since 1.72.0)
     */
    resetChanges(): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Resumes this binding. The binding can then again fire change events and trigger data service requests.
     * Before 1.53.0, this method was not supported and threw an error.
     * See:
     * 	{@link topic:b0f5c531e5034a27952cc748954cbe39 Suspend and Resume}
     * 	sap.ui.model.Binding#resume
     * 	#suspend
     */
    resume(): void;
    /**
     * @SINCE 1.37.0
     *
     * Sets a parameter for an operation call.
     *
     * @returns `this` to enable method chaining
     */
    setParameter(
      /**
       * The parameter name
       */
      sParameterName: string,
      /**
       * The parameter value
       */
      vValue: any
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * Suspends this binding. A suspended binding does not fire change events nor does it trigger data service
     * requests. Call {@link #resume} to resume the binding. Before 1.53.0, this method was not supported and
     * threw an error. Since 1.97.0, pending changes are ignored if they relate to a {@link sap.ui.model.odata.v4.Context#isKeepAlive
     * kept-alive} context of this binding. Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isTransient transient}
     * contexts of a {@link #getRootBinding root binding} do not count as pending changes. Since 1.108.0 {@link
     * sap.ui.model.odata.v4.Context#delete deleted} contexts do not count as pending changes.
     * See:
     * 	{@link topic:b0f5c531e5034a27952cc748954cbe39 Suspend and Resume}
     * 	sap.ui.model.Binding#suspend
     * 	sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges
     * 	sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges
     * 	#resume
     */
    suspend(): void;
    /**
     * @SINCE 1.37.0
     *
     * Returns a string representation of this object including the binding path. If the binding is relative,
     * the parent path is also given, separated by a '|'.
     *
     * @returns A string description of this binding
     */
    toString(): string;
  }
}

declare module "sap/ui/model/odata/v4/ODataListBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  import Context from "sap/ui/model/odata/v4/Context";

  import Filter from "sap/ui/model/Filter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import ODataContextBinding from "sap/ui/model/odata/v4/ODataContextBinding";

  import ODataPropertyBinding from "sap/ui/model/odata/v4/ODataPropertyBinding";

  import Message from "sap/ui/core/message/Message";

  import Sorter from "sap/ui/model/Sorter";

  /**
   * @SINCE 1.37.0
   *
   * List binding for an OData V4 model. An event handler can only be attached to this binding for the following
   * events: 'AggregatedDataStateChange', 'change', 'createActivate', 'createCompleted', 'createSent', 'dataReceived',
   * 'dataRequested', 'DataStateChange', 'patchCompleted', 'patchSent', and 'refresh'. For other events, an
   * error is thrown.
   */
  export default class ODataListBinding extends ListBinding {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.ODataListBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.98.0
     *
     * Attach event handler `fnFunction` to the 'createActivate' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachCreateActivate(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Attach event handler `fnFunction` to the 'createCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachCreateCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Attach event handler `fnFunction` to the 'createSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachCreateSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * See {@link sap.ui.base.EventProvider#attachEvent}
     * See:
     * 	sap.ui.base.EventProvider#attachEvent
     *
     * @returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,

      _oData?: object,

      _fnFunction?: Function,

      _oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Attach event handler `fnFunction` to the 'patchCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachPatchCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Attach event handler `fnFunction` to the 'patchSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachPatchSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.45.0
     *
     * Changes this binding's parameters and refreshes the binding. Since 1.111.0, a list binding's header context
     * is deselected.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #changeParameters}.
     *
     * The parameters are changed according to the given map of parameters: Parameters with an `undefined` value
     * are removed, the other parameters are set, and missing parameters remain unchanged.
     */
    changeParameters(
      /**
       * Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}
       */
      mParameters: object
    ): void;
    /**
     * @SINCE 1.43.0
     *
     * Creates a new entity and inserts it at the start or the end of the list.
     *
     * For creating the new entity, the binding's update group ID is used, see {@link #getUpdateGroupId}.
     *
     * You can call {@link sap.ui.model.odata.v4.Context#delete} to delete the created context again. As long
     * as the context is {@link sap.ui.model.odata.v4.Context#isTransient transient} and {@link sap.ui.model.odata.v4.Context#isInactive
     * active}, {@link #resetChanges} and a call to {@link sap.ui.model.odata.v4.ODataModel#resetChanges} with
     * the update group ID as parameter also delete the created context together with other changes.
     *
     * If the creation of the entity on the server failed, the creation is repeated automatically. If the binding's
     * update group ID has {@link sap.ui.model.odata.v4.SubmitMode.API}, it is repeated with the next call of
     * {@link sap.ui.model.odata.v4.ODataModel#submitBatch}. Otherwise it is repeated with the next update for
     * the entity. Since 1.67.0, {@link sap.ui.model.odata.v4.ODataModel#submitBatch} can also be used for group
     * IDs with {@link sap.ui.model.odata.v4.SubmitMode.Auto} in order to repeat the creation even if there
     * is no update for the entity.
     *
     * Each time the data for the created entity is sent to the server, a {@link #event:createSent 'createSent'}
     * event is fired and each time the client receives a response for the creation, a {@link #event:createCompleted
     * 'createCompleted'} event is fired, independent of whether the creation was successful or not.
     *
     * The initial data for the created entity can be supplied via the parameter `oInitialData` and modified
     * via property bindings. Properties that are not part of the initial data show the default value from the
     * service metadata on the UI, but they are not sent to the server. If there is no default value, `null`
     * is used instead, even if the property is not `Nullable`. The initial data may contain instance annotations.
     *
     * Note: If a server requires a property in the request, you must supply this property in the initial data,
     * for example if the server requires a unit for an amount. This also applies if this property has a default
     * value.
     *
     * Note: After creation, the created entity is refreshed to ensure that the data specified in this list
     * binding's $expand is available. This refresh is done via the group ID of the binding, unless the group
     * ID has {@link sap.ui.model.odata.v4.SubmitMode.API}, in which case '$auto' is used. To skip this refresh,
     * set `bSkipRefresh` to `true`. To avoid errors you must skip this refresh when using {@link sap.ui.model.odata.v4.Context#requestSideEffects}
     * in the same $batch to refresh the complete collection containing the newly created entity.
     *
     * Since 1.112.0 it is possible to create nested entities in a collection-valued navigation property together
     * with the entity (so-called "deep create"), for example a list of items for an order. For this purpose,
     * bind the list relative to a transient context. Calling this method then adds a transient entity to the
     * parent's navigation property, which is sent with the payload of the parent entity. Such a nested context
     * also has a {@link sap.ui.model.odata.v4.Context#created created} promise, which resolves when the deep
     * create resolves. **Beware:** After a succesful creation of the main entity the context returned for a
     * nested entity is no longer valid. New contexts are created for the nested collection because it is not
     * possible to reliably assign the response entities to those of the request, especially if the count differs.
     *
     * Deep create requires the autoExpandSelect parameter at the {@link sap.ui.model.odata.v4.ODataModel#constructor
     * model}. The refresh after a deep create is optimized. Only the (navigation) properties missing from the
     * POST response are actually requested. If the POST response contains all required properties, no request
     * is sent at all.
     *
     * Deep create is an **experimental** API.
     *
     * Note: Creating at the end is only allowed if the final length of the binding is known (see {@link #isLengthFinal}),
     * so that there is a clear position to place this entity at. This is the case if the complete collection
     * has been read or if the system query option `$count` is `true` and the binding has processed at least
     * one request.
     *
     * @returns The context object for the created entity; its method {@link sap.ui.model.odata.v4.Context#created}
     * returns a promise that is resolved when the creation is finished
     */
    create(
      /**
       * The initial data for the created entity
       */
      oInitialData?: object,
      /**
       * Whether an automatic refresh of the created entity will be skipped; ignored within a deep create (when
       * the binding's parent context is transient)
       */
      bSkipRefresh?: boolean,
      /**
       * Whether the entity is inserted at the end of the list. Supported since 1.66.0. Since 1.99.0 the first
       * insertion determines the overall position of created contexts within the binding's context list. Every
       * succeeding insertion is relative to the created contexts within this list.
       */
      bAtEnd?: boolean,
      /**
       * Create an inactive context. Such a context will only be sent to the server after the first property update.
       * From then on it behaves like any other created context. Supported since 1.97.0
       *  Since 1.98.0, when the first property updates happens, the context is no longer {@link sap.ui.model.odata.v4.Context#isInactive
       * inactive} and the {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate 'createActivate'}
       * event is fired. While inactive, it does not count as a {@link #hasPendingChanges pending change} and
       * does not contribute to the {@link #getCount count}.
       */
      bInactive?: boolean
    ): Context;
    /**
     * @SINCE 1.40.1
     *
     * Destroys the object. The object must not be used anymore after this function was called.
     * See:
     * 	sap.ui.model.Binding#destroy
     */
    destroy(): void;
    /**
     * @SINCE 1.98.0
     *
     * Detach event handler `fnFunction` from the 'createActivate' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachCreateActivate(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Detach event handler `fnFunction` from the 'createCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachCreateCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Detach event handler `fnFunction` from the 'createSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachCreateSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Detach event handler `fnFunction` from the 'patchCompleted' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachPatchCompleted(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.59.0
     *
     * Detach event handler `fnFunction` from the 'patchSent' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    detachPatchSent(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.39.0
     *
     * Filters the list with the given filters. Since 1.97.0, if filters are unchanged, no request is sent,
     * regardless of pending changes. Since 1.111.0, the header context is deselected.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #filter}.
     *
     * Filters are case sensitive unless the property `caseSensitive` is set to `false`. This property has to
     * be set on each filter, it is not inherited from a multi-filter.
     *
     * Application and Control Filters: Each list binding maintains two separate lists of filters, one for filters
     * defined by the control that owns the binding, and another list for filters that an application can define
     * in addition. When executing the filter operation, both sets of filters are combined.
     *
     * By using the `sFilterType` parameter of the `filter` method, the caller can control which set of filters
     * is modified.
     *
     * Auto-Grouping of Filters: Filters are first grouped according to their binding path. All filters belonging
     * to the same path are ORed, and after that the results of all paths are ANDed. Usually this means that
     * all filters applied to the same property are ORed, while filters on different properties are ANDed. Please
     * use either the automatic grouping of filters (where applicable) or explicit AND/OR filters, as a mixture
     * of both is not supported.
     * See:
     * 	sap.ui.model.ListBinding#filter
     * 	#setAggregation
     *
     * @returns `this` to facilitate method chaining
     */
    filter(
      /**
       * The dynamic filters to be used; replaces the dynamic filters given in {@link sap.ui.model.odata.v4.ODataModel#bindList}.
       * The filter executed on the list is created from the following parts, which are combined with a logical
       * 'and':
       * 	 Dynamic filters of type {@link sap.ui.model.FilterType.Application}  Dynamic filters of type {@link
       * sap.ui.model.FilterType.Control}  The static filters, as defined in the '$filter' binding parameter
       */
      vFilters?: Filter | Filter[],
      /**
       * The filter type to be used
       */
      sFilterType?: FilterType | keyof typeof FilterType
    ): this;
    /**
     * @SINCE 1.109.0
     *
     * Returns the current object holding the information needed for data aggregation, see {@link #setAggregation}.
     *
     * @returns The current data aggregation object, incl. some default values, or `undefined` if there is no
     * data aggregation
     */
    getAggregation(
      /**
       * Whether to additionally return the "$"-prefixed values described below which obviously cannot be given
       * back to the setter (@experimental as of version 1.111.0). They are retrieved from the pair of "Org.OData.Aggregation.V1.RecursiveHierarchy"
       * and "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy" annotations at this binding's entity type,
       * identified via the `hierarchyQualifier` given to {@link #setAggregation}.
       * 	 "$DistanceFromRootProperty" holds the path to the property which provides the raw value for "@$ui5.node.level"
       * (minus one) and should be used only to interpret the response retrieved via {@link #getDownloadUrl}.
       *  "$NodeProperty" holds the path to the property which provides the hierarchy node value. That property
       * is always $select'ed automatically and can be accessed as usual.
       */
      bVerbose?: boolean
    ): object | undefined;
    /**
     * @SINCE 1.98.0
     *
     * Returns all current contexts of this list binding in no special order. Just like {@link #getCurrentContexts},
     * this method does not request any data from a back end and does not change the binding's state. In contrast
     * to {@link #getCurrentContexts}, it does not only return those contexts that were last requested by a
     * control, but all contexts that are currently available in the binding, including {@link sap.ui.model.odata.v4.Context#isKeepAlive
     * kept-alive} contexts. To filter out kept-alive contexts that are not part of the list, you could check
     * whether the index is `undefined`, as described in {@link sap.ui.model.odata.v4.Context#getIndex}.
     *
     * @returns All current contexts of this list binding, in no special order
     */
    getAllCurrentContexts(): Context[];
    /**
     * @SINCE 1.37.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns already created binding contexts for all entities in this list binding for the range determined
     * by the given start index `iStart` and `iLength`. If at least one of the entities in the given range has
     * not yet been loaded, fires a {@link #event:change 'change'} event on this list binding once these entities
     * have been loaded **asynchronously**. A further call to this method in the 'change' event handler with
     * the same index range then yields the updated array of contexts.
     *
     * @returns The array of already created contexts with the first entry containing the context for `iStart`
     */
    getContexts(
      /**
       * The index where to start the retrieval of contexts
       */
      iStart?: number,
      /**
       * The number of contexts to retrieve beginning from the start index; defaults to the model's size limit,
       * see {@link sap.ui.model.Model#setSizeLimit}; `Infinity` may be used since 1.53.0 to retrieve all data
       */
      iLength?: number,
      /**
       * The maximum number of contexts to read before and after the given range; with this, controls can prefetch
       * data that is likely to be needed soon, e.g. when scrolling down in a table. Negative values will be treated
       * as 0. Supported since 1.39.0; `Infinity` may be used since 1.53.0 to prefetch all data and thus disable
       * paging.
       */
      iMaximumPrefetchSize?: number,
      /**
       * Whether this call keeps the result of {@link #getCurrentContexts} untouched; since 1.86.0.
       */
      bKeepCurrent?: boolean
    ): Context[];
    /**
     * @SINCE 1.91.0
     *
     * Returns the count of elements.
     *
     * If known, the value represents the sum of the element count of the collection on the server and the number
     * of {@link sap.ui.model.odata.v4.Context#isInactive active} {@link sap.ui.model.odata.v4.Context#isTransient
     * transient} entities created on the client, minus the {@link #sap.ui.model.data.v4.Context#delete deleted}
     * entities. Otherwise, it is `undefined`. The value is a number of type `Edm.Int64`. Since 1.91.0, in case
     * of data aggregation with group levels, the count is the leaf count on the server; it is only determined
     * if the `$count` system query option is given. Since 1.110.0, in case of a recursive hierarchy, the count
     * is the number of nodes matching the current filter and search criteria (if any) or the number of all
     * nodes; it is only determined if the `$count` system query option is given.
     *
     * The count is known to the binding in the following situations:
     * 	 The server-side count has been requested via the `$count` system query option.  A "short read"
     * in a paged collection (the server delivered less elements than requested) indicated that the server has
     * no more unread elements.  It has been read completely in one request, for example an embedded collection
     * via `$expand`.
     *
     * The `$count` is unknown if the binding is relative but has no context.
     *
     * The count is bindable via the header context (see {@link #getHeaderContext}) and path `$count`.
     *
     * Use `getHeaderContext().requestProperty("$count")` if you want to wait for the value.
     *
     * @returns The count of elements (leaves, nodes) or `undefined` if the count or the header context is not
     * available.
     */
    getCount(): number | undefined;
    /**
     * @SINCE 1.39.0
     *
     * Returns the contexts that were requested by a control last time. Does not trigger a data request. In
     * the time between the {@link #event:dataRequested 'dataRequested'} event and the {@link #event:dataReceived
     * 'dataReceived'} event, the resulting array contains `undefined` at those indexes where the data is not
     * yet available or has been deleted.
     * See:
     * 	sap.ui.model.ListBinding#getCurrentContexts
     * 	#getAllCurrentContexts
     *
     * @returns The contexts
     */
    getCurrentContexts(): Context[];
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.ListBinding#getDistinctValues
     */
    getDistinctValues(_sPath?: string): any[];
    /**
     * @SINCE 1.74.0
     *
     * Returns a URL by which the complete content of the list can be downloaded in JSON format. The request
     * delivers all entities considering the binding's query options (such as filters or sorters).
     *
     * The returned URL does not specify `$skip` and `$top` and leaves it up to the server how many rows it
     * delivers. Many servers tend to choose a small limit without `$skip` and `$top`, so it might be wise to
     * add an appropriate value for `$top` at least.
     *
     * Additionally, you must be aware of server-driven paging and be ready to send a follow-up request if the
     * response contains `@odata.nextlink`.
     * See:
     * 	#requestDownloadUrl
     *
     * @returns The download URL
     */
    getDownloadUrl(): string;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for read requests. The group ID of the binding is alternatively
     * defined by
     * 	 the `groupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$groupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link
     * sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The group ID
     */
    getGroupId(): string;
    /**
     * @SINCE 1.45.0
     *
     * Returns the header context which allows binding to `$count`.
     * See:
     * 	#getCount
     *
     * @returns The header context or `null` if the binding is relative and has no context
     */
    getHeaderContext(): Context | null;
    /**
     * @SINCE 1.99.0
     *
     * Calls {@link sap.ui.model.odata.v4.Context#setKeepAlive} at the context for the given path and returns
     * it. Since 1.100.0 the function always returns such a context. If none exists yet, it is created without
     * data and a request for its entity is sent.
     * See:
     * 	sap.ui.model.odata.v4.Model#getKeepAliveContext
     *
     * @returns The kept-alive context
     */
    getKeepAliveContext(
      /**
       * The path of the context to be kept alive
       */
      sPath: string,
      /**
       * Whether to request messages for the context's entity
       */
      bRequestMessages?: boolean,
      /**
       * The group ID used for read requests for the context's entity or its properties. If not given, the binding's
       * {@link #getGroupId group ID} is used. Supported since 1.100.0
       */
      sGroupId?: string
    ): Context;
    /**
     * @SINCE 1.37.0
     *
     * Returns the number of entries in the list. As long as the client does not know the size on the server,
     * an estimated length is returned.
     * See:
     * 	sap.ui.model.ListBinding#getLength
     *
     * @returns The number of entries in the list
     */
    getLength(): number;
    /**
     * @SINCE 1.66.0
     *
     * Returns the query options of the binding.
     *
     * @returns mQueryOptions The object with the query options. Query options can be provided with {@link sap.ui.model.odata.v4.ODataModel#bindList},
     * {@link sap.ui.model.odata.v4.ODataModel#bindContext}, {@link sap.ui.model.odata.v4.ODataListBinding#changeParameters},
     * and {@link sap.ui.model.odata.v4.ODataContextBinding#changeParameters}. System query options can also
     * be calculated, e.g. `$filter` can be calculated based on provided filter objects.
     */
    getQueryOptions(
      /**
       * Whether system query options should be returned as well. The parameter value `true` is not supported.
       */
      bWithSystemQueryOptions?: boolean
    ): object;
    /**
     * @SINCE 1.53.0
     *
     * Returns the root binding of this binding's hierarchy, see {@link topic:fccfb2eb41414f0792c165e69a878717
     * Initialization and Read Requests}.
     *
     * @returns The root binding or `undefined` if this binding is unresolved (see {@link sap.ui.model.Binding#isResolved}).
     */
    getRootBinding():
      | ODataContextBinding
      | ODataListBinding
      | ODataPropertyBinding
      | undefined;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for update requests. The update group ID of the binding
     * is alternatively defined by
     * 	 the `updateGroupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$updateGroupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and
     * {@link sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The update group ID
     */
    getUpdateGroupId(): string;
    /**
     * @SINCE 1.39.0
     *
     * Returns `true` if this binding or its dependent bindings have property changes, created entities, or
     * entity deletions which have not been sent successfully to the server. This function does not take the
     * execution of OData operations (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}) into account.
     * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isInactive inactive} contexts are ignored, unless
     * (since 1.100.0) their {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate activation}
     * has been prevented and {@link sap.ui.model.odata.v4.Context#isInactive} therefore returns `1`.
     *
     * Note: If this binding is relative, its data is cached separately for each parent context path. This method
     * returns `true` if there are pending changes for the current parent context path of this binding. If this
     * binding is unresolved (see {@link sap.ui.model.Binding#isResolved}), it returns `false`.
     *
     * @returns `true` if the binding is resolved and has pending changes
     */
    hasPendingChanges(
      /**
       * Whether to ignore changes which will not be lost by APIs like {@link sap.ui.model.odata.v4.ODataListBinding#changeParameters
       * changeParameters}, {@link sap.ui.model.odata.v4.ODataListBinding#filter filter}, {@link sap.ui.model.odata.v4.ODataListBinding#refresh
       * refresh} (since 1.100.0), {@link sap.ui.model.odata.v4.ODataListBinding#sort sort}, or {@link sap.ui.model.odata.v4.ODataListBinding#suspend
       * suspend} because they relate to a {@link sap.ui.model.odata.v4.Context#isKeepAlive kept-alive} (since
       * 1.97.0) or {@link sap.ui.model.odata.v4.Context#delete deleted} (since 1.108.0) context of this binding.
       * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isTransient transient} contexts of a {@link #getRootBinding
       * root binding} are treated as kept-alive by this flag. Since 1.99.0, the same happens for bindings using
       * the `$$ownRequest` parameter (see {@link sap.ui.model.odata.v4.ODataModel#bindList}).
       */
      bIgnoreKeptAlive?: boolean
    ): boolean;
    /**
     * @SINCE 1.37.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Initializes the OData list binding: Fires an event in case the binding has a resolved path and its root
     * binding is not suspended. If the model's parameter `autoExpandSelect` is used (see {@link sap.ui.model.odata.v4.ODataModel#constructor}),
     * it fires a 'change' event, else it fires a 'refresh' event (since 1.67.0).
     * See:
     * 	#getRootBinding
     */
    initialize(): void;
    /**
     * @SINCE 1.99.0
     *
     * Returns whether the overall position of created entries is at the end of the list; this is determined
     * by the first call to {@link #create}.
     *
     * @returns Whether the overall position of created contexts is at the end, or `undefined` if there are
     * no created contexts
     */
    isFirstCreateAtEnd(): boolean | undefined;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    isInitial(): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Returns `true` if the length has been determined by the data returned from server. If the length is a
     * client side estimation `false` is returned.
     * See:
     * 	sap.ui.model.ListBinding#isLengthFinal
     *
     * @returns If `true` the length is determined by server side data
     */
    isLengthFinal(): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and
     * notifies the control that new data is available.
     *
     * Refresh is supported for bindings which are not relative to an {@link sap.ui.model.odata.v4.Context}.
     *
     * Note: When calling {@link #refresh} multiple times, the result of the request triggered by the last call
     * determines the binding's data; it is **independent** of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * with the given group ID.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #refresh}.
     *
     * Use {@link #requestRefresh} if you want to wait for the refresh.
     * See:
     * 	sap.ui.model.Binding#refresh
     * 	#getRootBinding
     * 	#suspend
     */
    refresh(
      /**
       * The group ID to be used for refresh; if not specified, the binding's group ID is used, see {@link #getGroupId}.
       * For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's
       * group ID. A value of type boolean is not accepted and an error will be thrown (a forced refresh is not
       * supported).
       *
       * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
       * {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string | boolean
    ): void;
    /**
     * @SINCE 1.70.0
     *
     * Requests the entities for the given index range of the binding's collection and resolves with the corresponding
     * contexts.
     *
     * @returns A promise which is resolved with the array of the contexts, the first entry containing the context
     * for `iStart`; it is rejected if `iStart` or `iLength` are less than 0 or when requesting the data fails
     */
    requestContexts(
      /**
       * The index where to start the retrieval of contexts; must be greater than or equal to 0
       */
      iStart?: number,
      /**
       * The number of contexts to retrieve beginning from the start index; defaults to the model's size limit,
       * see {@link sap.ui.model.Model#setSizeLimit}; must be greater than 0, `Infinity` may be used to retrieve
       * all data
       */
      iLength?: number,
      /**
       * The group ID to be used for the request; if not specified, the group ID for this binding is used, see
       * {@link #getGroupId}. Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group
       * IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string
    ): Promise<Context[]>;
    /**
     * @SINCE 1.74.0
     *
     * Returns a URL by which the complete content of the list can be downloaded in JSON format. The request
     * delivers all entities considering the binding's query options (such as filters or sorters).
     *
     * The returned URL does not specify `$skip` and `$top` and leaves it up to the server how many rows it
     * delivers. Many servers tend to choose a small limit without `$skip` and `$top`, so it might be wise to
     * add an appropriate value for `$top` at least.
     *
     * Additionally, you must be aware of server-driven paging and be ready to send a follow-up request if the
     * response contains `@odata.nextlink`.
     * See:
     * 	#getDownloadUrl
     *
     * @returns A promise that is resolved with the download URL
     */
    requestDownloadUrl(): Promise<string>;
    /**
     * @SINCE 1.86.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Requests an {@link sap.ui.model.Filter} object which can be used to filter the list binding by entries
     * with model messages. With the filter callback, you can define if a message is considered when creating
     * the filter for entries with messages.
     *
     * The resulting filter does not consider application or control filters specified for this list binding
     * in its constructor or in its {@link #filter} method; add filters which you want to keep with the "and"
     * conjunction to the resulting filter before calling {@link #filter}.
     * See:
     * 	sap.ui.model.ListBinding#requestFilterForMessages
     *
     * @returns A Promise that resolves with an {@link sap.ui.model.Filter} representing the entries with messages;
     * it resolves with `null` if the binding is not resolved or if there is no message for any entry
     */
    requestFilterForMessages(
      /**
       * A callback function to filter only relevant messages. The callback returns whether the given {@link sap.ui.core.message.Message}
       * is considered. If no callback function is given, all messages are considered.
       */
      fnFilter?: (p1: Message) => boolean
    ): Promise<Filter | null>;
    /**
     * @SINCE 1.87.0
     *
     * Refreshes the binding and returns a promise to wait for it. See {@link #refresh} for details. Use {@link
     * #refresh} if you do not need the promise.
     *
     * @returns A promise which resolves without a defined result when the refresh is finished and rejects with
     * an instance of `Error` if the refresh failed
     */
    requestRefresh(
      /**
       * The group ID to be used
       */
      sGroupId?: string
    ): Promise<any>;
    /**
     * @SINCE 1.40.1
     *
     * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user
     * input.
     *
     * @returns A promise which is resolved without a defined result as soon as all changes in the binding itself
     * and all dependent bindings are canceled (since 1.72.0)
     */
    resetChanges(): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Resumes this binding. The binding can then again fire change events and trigger data service requests.
     * Before 1.53.0, this method was not supported and threw an error.
     * See:
     * 	{@link topic:b0f5c531e5034a27952cc748954cbe39 Suspend and Resume}
     * 	sap.ui.model.Binding#resume
     * 	#suspend
     */
    resume(): void;
    /**
     * @SINCE 1.55.0
     *
     * Sets a new data aggregation object and derives the system query option `$apply` implicitly from it.
     * See:
     * 	#getAggregation
     */
    setAggregation(
      /**
       * An object holding the information needed for data aggregation; see also OData
       * Extension for Data Aggregation Version 4.0. Since 1.76.0, `undefined` can be used to remove the data
       * aggregation object, which allows to set `$apply` explicitly afterwards. `null` is not supported.
       *  Since 1.89.0, the deprecated property `"grandTotal like 1.84" : true` can be used to turn on the handling
       * of grand totals like in 1.84.0, using aggregates of aggregates and thus allowing to filter by aggregated
       * properties while grand totals are needed. Beware that methods like "average" or "countdistinct" are not
       * compatible with this approach, and it cannot be combined with group levels.
       *  Since 1.105.0, either a recursive hierarchy or pure data aggregation is supported, but no mix; `hierarchyQualifier`
       * is the leading property that decides between those two use cases - this is an **experimental API** and
       * is only supported if the model uses the `autoExpandSelect` parameter!
       */
      oAggregation?: {
        /**
         * A map from aggregatable property names or aliases to objects containing the following details:
         * 	 `grandTotal`: An optional boolean that tells whether a grand total for this aggregatable property is
         * needed (since 1.59.0); not supported in this case are:
         * 	 filtering by any aggregatable property (since 1.89.0),  "$search" (since 1.93.0),  the `vGroup`
         * parameter of {@link sap.ui.model.Sorter} (since 1.107.0),  shared requests (since 1.108.0).
         *  `subtotals`: An optional boolean that tells whether subtotals for this aggregatable property are
         * needed  `with`: An optional string that provides the name of the method (for example "sum") used
         * for aggregation of this aggregatable property; see "3.1.2 Keyword with".  `name`: An optional string
         * that provides the original aggregatable property name in case a different alias is chosen as the name
         * of the dynamic property used for aggregation of this aggregatable property; see "3.1.1 Keyword as"
         * `unit`: An optional string that provides the name of the custom aggregate for a currency or unit of measure
         * corresponding to this aggregatable property (since 1.86.0). The custom aggregate must return the single
         * value of that unit in case there is only one, or `null` otherwise ("multi-unit situation"). (SQL suggestion:
         * `CASE WHEN MIN(Unit) = MAX(Unit) THEN MIN(Unit) END`)
         */
        aggregate?: object;
        /**
         * The number (as a positive integer) of different levels initially available without calling {@link sap.ui.model.odata.v4.Context#expand}
         * (@experimental as of version 1.105.0), supported only if a `hierarchyQualifier` is given. Root nodes
         * are on the first level. By default, only root nodes are available; they are not yet expanded.
         */
        expandTo?: number;
        /**
         * Tells whether the grand totals for aggregatable properties are displayed at the bottom only (since 1.86.0);
         * `true` for bottom only, `false` for top and bottom, the default is top only
         */
        grandTotalAtBottomOnly?: boolean;
        /**
         * A map from groupable property names to objects containing the following details:
         * 	 `additionally`: An optional list of strings that provides the paths to properties (like texts or attributes)
         * related to this groupable property in a 1:1 relation (since 1.87.0). They are requested additionally
         * via `groupby and must not change the actual grouping; a unit` for an aggregatable property
         * must not be repeated here.
         */
        group?: object;
        /**
         * A list of groupable property names used to determine group levels. They may, but don't need to, be repeated
         * in `oAggregation.group`. Group levels cannot be combined with:
         * 	 filtering for aggregated properties,  "$search" (since 1.93.0),  the `vGroup` parameter of
         * {@link sap.ui.model.Sorter} (since 1.107.0),  shared requests (since 1.108.0).
         */
        groupLevels?: string[];
        /**
         * The qualifier for the pair of "Org.OData.Aggregation.V1.RecursiveHierarchy" and "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy"
         * annotations at this binding's entity type (@experimental as of version 1.105.0). If present, a recursive
         * hierarchy without data aggregation is defined, and the only other supported properties are `expandTo`
         * and `search`. A recursive hierarchy cannot be combined with:
         * 	 "$search",  the `vGroup` parameter of {@link sap.ui.model.Sorter} (since 1.107.0),  shared
         * requests (since 1.108.0).
         */
        hierarchyQualifier?: string;
        /**
         * Like the "5.1.7 System Query Option $search", but applied before data aggregation (since 1.93.0). Note that
         * certain content will break the syntax of the system query option `$apply` and result in an invalid request.
         * If the OData service supports the proposal ODATA-1452,
         * then `ODataUtils.formatLiteral(sSearch, "Edm.String");` should be used to encapsulate the whole search
         * string beforehand (see {@link sap.ui.model.odata.v4.ODataUtils.formatLiteral}).
         */
        search?: string;
        /**
         * Tells whether subtotals for aggregatable properties are displayed at the bottom only, as a separate row
         * after all children, when a group level node is expanded (since 1.86.0); `true` for bottom only, `false`
         * for top and bottom, the default is top only (that is, as part of the group level node)
         */
        subtotalsAtBottomOnly?: boolean;
      }
    ): void;
    /**
     * @SINCE 1.39.0
     *
     * Sort the entries represented by this list binding according to the given sorters. The sorters are stored
     * at this list binding and they are used for each following data request. Since 1.97.0, if sorters are
     * unchanged, no request is sent, regardless of pending changes.
     *
     * **Note:** To allow proper detection whether sorters are unchanged, care must be taken if a sorter uses
     * a function (for example via the `vGroup` parameter): it must be the exact same function instance which
     * was given before, and not a newly created one, for example because `Function.prototype.bind` is called
     * repeatedly.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #sort}.
     * See:
     * 	sap.ui.model.ListBinding#sort
     *
     * @returns `this` to facilitate method chaining
     */
    sort(
      /**
       * The dynamic sorters to be used; they replace the dynamic sorters given in {@link sap.ui.model.odata.v4.ODataModel#bindList}.
       * Static sorters, as defined in the '$orderby' binding parameter, are always executed after the dynamic
       * sorters.
       */
      vSorters?: Sorter | Sorter[]
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * Suspends this binding. A suspended binding does not fire change events nor does it trigger data service
     * requests. Call {@link #resume} to resume the binding. Before 1.53.0, this method was not supported and
     * threw an error. Since 1.97.0, pending changes are ignored if they relate to a {@link sap.ui.model.odata.v4.Context#isKeepAlive
     * kept-alive} context of this binding. Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isTransient transient}
     * contexts of a {@link #getRootBinding root binding} do not count as pending changes. Since 1.108.0 {@link
     * sap.ui.model.odata.v4.Context#delete deleted} contexts do not count as pending changes.
     * See:
     * 	{@link topic:b0f5c531e5034a27952cc748954cbe39 Suspend and Resume}
     * 	sap.ui.model.Binding#suspend
     * 	sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges
     * 	sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges
     * 	#resume
     */
    suspend(): void;
    /**
     * @SINCE 1.37.0
     *
     * Returns a string representation of this object including the binding path. If the binding is relative,
     * the parent path is also given, separated by a '|'.
     *
     * @returns A string description of this binding
     */
    toString(): string;
    /**
     * @SINCE 1.53.0
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Updates the binding's system query option `$apply` based on the given data aggregation information. Its
     * value is "groupby((<dimension_1,...,dimension_N,unit_or_text_1,...,unit_or_text_K>), aggregate(<measure>
     * with <method> as <alias>, ...))" where the "aggregate" part is only present if measures are given
     * and both "with" and "as" are optional. Since 1.93.0, a previous "search before data aggregation" is considered
     * (see the `oAggregation.search` parameter of {@link #setAggregation}).
     * See:
     * 	sap.ui.model.analytics.AnalyticalBinding#updateAnalyticalInfo
     * 	#changeParameters
     * 	#setAggregation
     *
     * @returns The return object contains a property `measureRangePromise` if and only if at least one measure
     * has requested a minimum or maximum value; its value is a promise which resolves with the measure range
     * map as soon as data has been received; the measure range map contains measure names as keys and objects
     * as values which have a `min` and `max` property as requested above. In case of multiple calls to this
     * method while the binding's root binding is suspended, only the last call's promise will resolve with
     * the right result; the other calls just get the same result as the last call, which may or may not fit
     * to their `aAggregation` argument. `undefined` is returned instead of an empty object.
     */
    updateAnalyticalInfo(
      /**
       * An array with objects holding the information needed for data aggregation; see also OData
       * Extension for Data Aggregation Version 4.0
       */
      aAggregation: Array<{
        /**
         * The name of an OData property. A property which is neither a dimension nor a measure, but for instance
         * a text property or in some cases a unit property, has no further details.
         */
        name: string;
        /**
         * Its presence is used to detect a dimension; the dimension is ignored unless at least one of `inResult`
         * and `visible` is `true`
         */
        grouped?: boolean;
        /**
         * Dimensions only: see above
         */
        inResult?: boolean;
        /**
         * Dimensions only: see above
         */
        visible?: boolean;
        /**
         * Its presence is used to detect a measure
         */
        total?: boolean;
        /**
         * Measures only: Whether the maximum value (ignoring currencies or units of measure) for this measure is
         * needed (since 1.55.0); filtering and sorting is supported in this case (since 1.58.0), but shared requests
         * are not (since 1.108.0)
         */
        max?: boolean;
        /**
         * Measures only: Whether the minimum value (ignoring currencies or units of measure) for this measure is
         * needed (since 1.55.0); filtering and sorting is supported in this case (since 1.58.0), but shared requests
         * are not (since 1.108.0)
         */
        min?: boolean;
        /**
         * Measures only: The name of the method (for example "sum") used for aggregation of this measure; see "3.1.2
         * Keyword with" (since 1.55.0)
         */
        with?: string;
        /**
         * Measures only: The alias, that is the name of the dynamic property used for aggregation of this measure;
         * see "3.1.1 Keyword as" (since 1.55.0)
         */
        as?: string;
      }>
    ): object | undefined;
  }
}

declare module "sap/ui/model/odata/v4/ODataMetaModel" {
  import MetaModel from "sap/ui/model/MetaModel";

  import Context from "sap/ui/model/Context";

  import ContextBinding from "sap/ui/model/ContextBinding";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import ListBinding from "sap/ui/model/ListBinding";

  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import TreeBinding from "sap/ui/model/TreeBinding";

  import Metadata from "sap/ui/base/Metadata";

  import ODataType from "sap/ui/model/odata/type/ODataType";

  import ValueListType from "sap/ui/model/odata/v4/ValueListType";

  import Context1 from "sap/ui/model/odata/v4/Context";

  /**
   * @SINCE 1.37.0
   *
   * Implementation of an OData metadata model which offers access to OData V4 metadata. The meta model does
   * not support any public events; attaching an event handler leads to an error.
   *
   * This model is read-only.
   *
   * This model is not prepared to be inherited from.
   */
  export default class ODataMetaModel extends MetaModel {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataMetaModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.ODataMetaModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.37.0
     *
     * See {@link sap.ui.base.EventProvider#attachEvent}
     * See:
     * 	sap.ui.base.EventProvider#attachEvent
     *
     * @returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,

      _oData?: object,

      _fnFunction?: Function,

      _oListener?: object
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * See `sap.ui.model.Model#bindContext`
     * See:
     * 	sap.ui.model.Model#bindContext
     */
    bindContext(
      sPath: string,

      oContext?: Context
    ): ContextBinding;
    /**
     * @SINCE 1.37.0
     *
     * Creates a list binding for this metadata model which iterates content from the given path (relative to
     * the given context), sorted and filtered as indicated.
     *
     * By default, OData names are iterated and a trailing slash is implicitly added to the path (see {@link
     * #requestObject} for the effects this has); technical properties and inline annotations are filtered out.
     *
     * A path which ends with an "@" segment can be used to iterate all inline or external targeting annotations;
     * no trailing slash is added implicitly; technical properties and OData names are filtered out.
     * See:
     * 	sap.ui.model.Model#bindList
     * 	#requestObject
     * 	sap.ui.model.FilterOperator
     *
     * @returns A list binding for this metadata model
     */
    bindList(
      /**
       * A relative or absolute path within the metadata model, for example "/EMPLOYEES"
       */
      sPath: string,
      /**
       * The context to be used as a starting point in case of a relative path
       */
      oContext?: Context,
      /**
       * Initial sort order, see {@link sap.ui.model.ListBinding#sort}
       */
      aSorters?: Sorter | Sorter[],
      /**
       * Initial application filter(s), see {@link sap.ui.model.ListBinding#filter}; filters with filter operators
       * "All" or "Any" are not supported
       */
      aFilters?: Filter | Filter[]
    ): ListBinding;
    /**
     * @SINCE 1.37.0
     *
     * Creates a property binding for this metadata model which refers to the content from the given path (relative
     * to the given context).
     * See:
     * 	sap.ui.model.Model#bindProperty
     *
     * @returns A property binding for this metadata model
     */
    bindProperty(
      /**
       * A relative or absolute path within the metadata model, for example "/EMPLOYEES/ENTRYDATE"
       */
      sPath: string,
      /**
       * The context to be used as a starting point in case of a relative path
       */
      oContext?: Context,
      /**
       * Optional binding parameters that are passed to {@link #getObject} to compute the binding's value; if
       * they are given, `oContext` cannot be omitted
       */
      mParameters?: {
        /**
         * Whether {@link sap.ui.model.PropertyBinding#getValue} may return a `Promise` resolving with the value
         * (since 1.57.0)
         */
        $$valueAsPromise?: boolean;
        /**
         * Optional scope for lookup of aliases for computed annotations (since 1.43.0)
         */
        scope?: object;
      }
    ): PropertyBinding;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Model#bindTree
     */
    bindTree(
      _sPath: string,

      _oContext?: Context,

      _aFilters?: Filter[],

      _mParameters?: object,

      _aSorters?: Sorter[]
    ): TreeBinding;
    /**
     * @SINCE 1.59.0
     *
     * Returns a snapshot of each $metadata or annotation file loaded so far, combined into a single "JSON"
     * object according to the streamlined OData V4 Metadata JSON Format.
     * See:
     * 	#requestData
     *
     * @returns The OData metadata as a "JSON" object, if it is already available, or `undefined`.
     */
    getData(): object | undefined;
    /**
     * @SINCE 1.51.0
     *
     * Returns a map of entity tags for each $metadata or annotation file loaded so far.
     *
     * @returns A map which contains one entry for each $metadata or annotation file loaded so far: the key
     * is the file's URL as a `string` and the value is the `string` value of the "ETag" response header for
     * that file. Initially, the map is empty. If no "ETag" response header was sent for a file, the `Date`
     * value of the "Last-Modified" response header is used instead. The value `null` is used in case no such
     * header is sent at all. Note that this map may change due to load-on-demand of "cross-service references"
     * (see parameter `supportReferences` of {@link sap.ui.model.odata.v4.ODataModel#constructor}).
     */
    getETags(): Record<string, string | null>;
    /**
     * @SINCE 1.47.0
     * @deprecated (since 1.51.0) - use {@link #getETags} instead because modifications to old files may be
     * shadowed by a new file in certain scenarios.
     *
     * Returns the maximum value of all "Last-Modified" response headers seen so far.
     *
     * @returns The maximum value of all "Last-Modified" (or, as a fallback, "Date") response headers seen so
     * far when loading $metadata or annotation files. It is `new Date(0)` initially as long as no such files
     * have been loaded. It becomes `new Date()` as soon as a file without such a header is loaded. Note that
     * this value may change due to load-on-demand of "cross-service references" (see parameter `supportReferences`
     * of {@link sap.ui.model.odata.v4.ODataModel#constructor}).
     */
    getLastModified(): Date;
    /**
     * @SINCE 1.37.0
     *
     * Returns the OData metadata model context corresponding to the given OData data model path.
     *
     * @returns The corresponding metadata context within the OData metadata model, for example with metadata
     * path "/EMPLOYEES/ENTRYDATE"
     */
    getMetaContext(
      /**
       * An absolute data path within the OData data model, for example "/EMPLOYEES/0/ENTRYDATE"
       */
      sPath: string
    ): Context;
    /**
     * @SINCE 1.81.0
     *
     * Returns the OData metadata model path corresponding to the given OData data model path.
     *
     * @returns The corresponding metadata path within the OData metadata model, for example "/EMPLOYEES/ENTRYDATE"
     */
    getMetaPath(
      /**
       * An absolute data path within the OData data model, for example "/EMPLOYEES/0/ENTRYDATE" or "/EMPLOYEES('42')/ENTRYDATE
       */
      sPath: string
    ): string;
    /**
     * @SINCE 1.37.0
     *
     * Returns the metadata object for the given path relative to the given context. Returns `undefined` in
     * case the metadata is not (yet) available. Use {@link #requestObject} for asynchronous access.
     * See:
     * 	sap.ui.model.Model#getObject
     * 	#requestObject
     *
     * @returns The requested metadata object if it is already available, or `undefined`
     */
    getObject(
      /**
       * A relative or absolute path within the metadata model
       */
      sPath: string,
      /**
       * The context to be used as a starting point in case of a relative path
       */
      oContext?: Context,
      /**
       * Optional (binding) parameters; if they are given, `oContext` cannot be omitted
       */
      mParameters?: {
        /**
         * Optional scope for lookup of aliases for computed annotations (since 1.43.0)
         */
        scope?: object;
      }
    ): any | undefined;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    getOriginalProperty(): void;
    /**
     * @SINCE 1.37.0
     *
     * Use {@link #getObject}.
     * See:
     * 	sap.ui.model.Model#getProperty
     */
    getProperty(): void;
    /**
     * @SINCE 1.37.0
     *
     * Returns the UI5 type for the given property path that formats and parses corresponding to the property's
     * EDM type and constraints. The property's type must be a primitive type. Use {@link #requestUI5Type} for
     * asynchronous access.
     * See:
     * 	#requestUI5Type
     *
     * @returns The corresponding UI5 type from {@link sap.ui.model.odata.type}, if all required metadata to
     * calculate this type is already available; if no specific type can be determined, a warning is logged
     * and {@link sap.ui.model.odata.type.Raw} is used
     */
    getUI5Type(
      /**
       * An absolute path to an OData property within the OData data model
       */
      sPath: string,
      /**
       * Type-specific format options, since 1.81.0. The boolean format option "parseKeepsEmptyString" applies
       * to {@link sap.ui.model.odata.type.String} only and is ignored for all other types. All other format options
       * are passed "as is".
       */
      mFormatOptions?: object
    ): ODataType;
    /**
     * @SINCE 1.45.0
     *
     * Determines which type of value list exists for the given property.
     * See:
     * 	#requestValueListType
     *
     * @returns The type of the value list
     */
    getValueListType(
      /**
       * An absolute path to an OData property within the OData data model
       */
      sPropertyPath: string
    ): ValueListType | keyof typeof ValueListType;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Model#refresh
     */
    refresh(): void;
    /**
     * @SINCE 1.63.0
     *
     * Request currency customizing based on the code list reference given in the entity container's `com.sap.vocabularies.CodeList.v1.CurrencyCodes`
     * annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v4.ODataModel#getHttpHeaders}
     * from this meta model's data model.
     * See:
     * 	#requestUnitsOfMeasure
     *
     * @returns A promise resolving with the currency customizing which is a map from currency key to an object
     * with the following properties:
     * 	 StandardCode: The language-independent standard code (e.g. ISO) for the currency as referred to via
     * the `com.sap.vocabularies.CodeList.v1.StandardCode` annotation on the currency's key, if present
     * Text: The language-dependent text for the currency as referred to via the `com.sap.vocabularies.Common.v1.Text`
     * annotation on the currency's key  UnitSpecificScale: The decimals for the currency as referred to
     * via the `com.sap.vocabularies.Common.v1.UnitSpecificScale` annotation on the currency's key; entries
     * where this would be `null` are ignored, and an error is logged  It resolves with `null`, if no `com.sap.vocabularies.CodeList.v1.CurrencyCodes`
     * annotation is found. It is rejected, if there is not exactly one currency key, or if the currency customizing
     * cannot be loaded.
     */
    requestCurrencyCodes(
      /**
       * If present, it must be this meta model's root entity container
       */
      vRawValue?: any,
      /**
       * The details object
       */
      oDetails?: {
        /**
         * If present, it must point to this meta model's root entity container, that is, `oDetails.context.getModel()
         * === this` and `oDetails.context.getPath() === "/"`
         */
        context?: Context;
      }
    ): Promise<Record<
      string,
      {
        StandardCode: string;

        Text: string;

        UnitSpecificScale: string;
      }
    > | null>;
    /**
     * @SINCE 1.59.0
     *
     * Requests a snapshot of each $metadata or annotation file loaded so far, combined into a single "JSON"
     * object according to the streamlined OData V4 Metadata JSON Format. It is a map from all currently known
     * qualified names to their values, with the special key "$EntityContainer" mapped to the root entity container's
     * qualified name as a starting point. See {@link topic:87aac894a40640f89920d7b2a414499b OData V4 Metadata
     * JSON Format}.
     *
     * Note that this snapshot may change due to load-on-demand of "cross-service references" (see parameter
     * `supportReferences` of {@link sap.ui.model.odata.v4.ODataModel#constructor}).
     * See:
     * 	#getData
     *
     * @returns A promise which is resolved with the OData metadata as a "JSON" object as soon as it is available.
     */
    requestData(): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Requests the metadata value for the given path relative to the given context. Returns a `Promise` which
     * is resolved with the requested metadata value or rejected with an error (only in case metadata cannot
     * be loaded). An invalid path leads to an `undefined` result and a warning is logged. Use {@link #getObject}
     * for synchronous access.
     *
     * A relative path is appended to the context's path separated by a forward slash("/"). A relative path
     * starting with "@" (that is, an annotation) is appended without a separator. Use "./" as a prefix for
     * such a relative path to enforce a separator.
     *
     * Example:
     * ```javascript
     *
     * <template:with path="/EMPLOYEES/ENTRYDATE" var="property">
     *   <!-- /EMPLOYEES/ENTRYDATE/$Type -->
     *   "{property>$Type}"
     *
     *   <!-- /EMPLOYEES/ENTRYDATE@com.sap.vocabularies.Common.v1.Text -->
     *   "{property>@com.sap.vocabularies.Common.v1.Text}"
     *
     *   <!-- /EMPLOYEES/ENTRYDATE/@com.sap.vocabularies.Common.v1.Text -->
     *   "{property>./@com.sap.vocabularies.Common.v1.Text}"
     * </template:with>
     * ```
     *
     *
     * The basic idea is that every path described in "14.2.1 Attribute Target" in specification "OData Version 4.0 Part 3: Common Schema Definition Language"
     * is a valid absolute path within the metadata model if a leading slash is added; for example "/" + "MySchema.MyEntityContainer/MyEntitySet/MyComplexProperty/MyNavigationProperty".
     * Also, every path described in "14.5.2 Expression edm:AnnotationPath", "14.5.11 Expression edm:NavigationPropertyPath",
     * "14.5.12 Expression edm:Path", and "14.5.13 Expression edm:PropertyPath" is a valid relative path within
     * the metadata model if a suitable prefix is added which addresses an entity container, entity set, singleton,
     * complex type, entity type, or property; for example "/MySchema.MyEntityType/MyProperty" + "@vCard.Address#work/FullName".
     *
     * The absolute path is split into segments and followed step-by-step, starting at the global scope of all
     * known qualified OData names. There are two technical properties there: "$Version" (typically "4.0") and
     * "$EntityContainer" with the name of the single entity container for this metadata model's service.
     *
     * An empty segment in between is invalid, except to force return type lookup for operation overloads (see
     * below). An empty segment at the end caused by a trailing slash differentiates between a name and the
     * object it refers to. This way, "/$EntityContainer" refers to the name of the single entity container
     * and "/$EntityContainer/" refers to the single entity container as an object.
     *
     * The segment "@sapui.name" refers back to the last OData name (simple identifier or qualified name) or
     * annotation name encountered during path traversal immediately before "@sapui.name":
     * 	 "/EMPLOYEES@sapui.name" results in "EMPLOYEES" and "/EMPLOYEES/@sapui.name" results in the same as
     * "/EMPLOYEES/$Type", that is, the qualified name of the entity set's type (see below how "$Type" is inserted
     * implicitly). Note how the separating slash again makes a difference here.  "/EMPLOYEES/@com.sap.vocabularies.Common.v1.Label@sapui.name"
     * results in "@com.sap.vocabularies.Common.v1.Label" and a slash does not make any difference as long as
     * the annotation does not have a "$Type" property.  A technical property (that is, a numerical segment
     * or one starting with a "$") immediately before "@sapui.name" is invalid, for example "/$EntityContainer@sapui.name".
     *  The path must not continue after "@sapui.name".
     *
     * If the current object is a string value, that string value is treated as a relative path and followed
     * step-by-step before the next segment is processed. Except for this, a path must not continue if it comes
     * across a non-object value. Such a string value can be a qualified name (example path "/$EntityContainer/..."),
     * a simple identifier (example path "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...") including
     * the special name "$ReturnType" (since 1.71.0), or even a path according to "14.5.12 Expression edm:Path"
     * etc. (example path "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/...".
     *
     * Segments starting with an "@" character, for example "@com.sap.vocabularies.Common.v1.Label", address
     * annotations at the current object. As the first segment, they refer to the single entity container. For
     * objects which can only be annotated inline (see "14.3 Element edm:Annotation" minus "14.2.1 Attribute
     * Target"), the object already contains the annotations as a property. For objects which can (only or also)
     * be annotated via external targeting, the object does not contain any annotation as a property. Such annotations
     * MUST be accessed via a path. Such objects include operations (that is, actions and functions) and their
     * parameters, which can be annotated for a single overload or for all overloads at the same time.
     *
     * Segments starting with an OData name followed by an "@" character, for example "/TEAMS@Org.OData.Capabilities.V1.TopSupported",
     * address annotations at an entity set, singleton, or property, not at the corresponding type. In contrast,
     * "/TEAMS/@com.sap.vocabularies.Common.v1.Deletable" (note the separating slash) addresses an annotation
     * at the entity set's type. This is in line with the special rule of "14.5.12 Expression edm:Path" regarding
     * annotations at a navigation property itself.
     *
     * "@" can be used as a segment to address a map of all annotations of the current object. This is useful
     * for iteration, for example via `<template:repeat list="{entityType>@}" ...>`.
     *
     * Annotations of an annotation are addressed not by two separate segments, but by a single segment like
     * "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.Common.v1.TextArrangement". Each annotation
     * can have a qualifier, for example "@first#foo@second#bar". Note: If the first annotation's value is a
     * record, a separate segment addresses an annotation of that record, not an annotation of the first annotation
     * itself. In a similar way, annotations of "7.2 Element edm:ReferentialConstraint", "7.3 Element edm:OnDelete",
     * "10.2 Element edm:Member" and "14.5.14.2 Element edm:PropertyValue" are addressed by segments like "<7.2.1
     * Attribute Property>@...", "$OnDelete@...", "<10.2.1 Attribute Name>@..." and "<14.5.14.2.1 Attribute
     * Property>@..." (where angle brackets denote a variable part and sections refer to specification "OData Version 4.0 Part 3:
     * Common Schema Definition Language").
     *
     * Annotations starting with "@@", for example "@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple" or
     * "@@.AH.isMultiple" or "@@.isMultiple", represent computed annotations. Their name without the "@@" prefix
     * must refer to a function in `mParameters.scope` in case of a relative name starting with a dot, which
     * is stripped before lookup; see the `<template:alias>` instruction for XML Templating. In case of an
     * absolute name, it is searched in `mParameters.scope` first and then in the global namespace. The names
     * "requestCurrencyCodes" and "requestUnitsOfMeasure" default to {@link #requestCurrencyCodes} and {@link
     * #requestUnitsOfMeasure} resp. if not present in `mParameters.scope`. This function is called with the
     * current object (or primitive value) and additional details and returns the result of this {@link #requestObject}
     * call. The additional details are given as an object with the following properties:
     * 	 `{boolean} $$valueAsPromise` Whether the computed annotation may return a `Promise` resolving with
     * its value (since 1.57.0)  `{@link sap.ui.model.Context} context` Points to the current object
     * `{object} overload` In case of annotations of an operation or a parameter, if filtering by binding parameter
     * determines a single operation overload, that overload is passed (since 1.71.0), else `undefined`
     * `{string} schemaChildName` The qualified name of the schema child where the computed annotation has been
     * found  Computed annotations cannot be iterated by "@". The path must not continue after a computed
     * annotation. Since 1.77.0, arguments can be given to a computed annotation much like a JavaScript function
     * call. The left parenthesis must immediately follow the name and no whitespace must follow the right parenthesis.
     * In between, a comma separated list of JSON values may be given (see `JSON.parse`); string literals may
     * be enclosed in single or double quotes; property names in object literals need not be quoted; curly brackets
     * must be replaced by `$(` and `$)` respectively, no matter where they appear, and there is no escaping
     * for `$(` and `$)` to prevent replacement back to curly brackets before parsing; as usual, `null` is supported
     * while `undefined` is not. Example: "@@AH.format($(style : 'short'$)))" or "@@AH.format(null, $($$noPatch
     * : true$)))".
     *
     * A segment which represents an OData qualified name is looked up in the global scope ("scope lookup")
     * and thus determines a schema child which is used later on. Unknown qualified names are invalid. This
     * way, "/acme.DefaultContainer/EMPLOYEES" addresses the "EMPLOYEES" child of the schema child named "acme.DefaultContainer".
     * This also works indirectly ("/$EntityContainer/EMPLOYEES") and implicitly ("/EMPLOYEES", see below).
     *
     * A segment which represents an OData simple identifier (or the special names "$ReturnType", since 1.71.0,
     * or "$Parameter", since 1.73.0) needs special preparations. The same applies to the empty segment after
     * a trailing slash.   If the current object has a "$Action", "$Function" or "$Type" property, it
     * is used for scope lookup first. This way, "/EMPLOYEES/ENTRYDATE" addresses the same object as "/EMPLOYEES/$Type/ENTRYDATE",
     * namely the "ENTRYDATE" child of the entity type corresponding to the "EMPLOYEES" child of the entity
     * container. The other cases jump from an operation import to the corresponding operation overloads.
     * Else if the segment is the first one within its path, the last schema child addressed via scope lookup
     * is used instead of the current object. This can only happen indirectly as in "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/..."
     * where the schema child is the entity container and the navigation property binding can contain the simple
     * identifier of another entity set within the same container.
     *
     * If the segment is the first one overall, "$EntityContainer" is inserted into the path implicitly. In
     * other words, the entity container is used as the initial schema child. This way, "/EMPLOYEES" addresses
     * the same object as "/$EntityContainer/EMPLOYEES", namely the "EMPLOYEES" child of the entity container.
     *  Afterwards, if the current object is an array, it represents overloads for an operation. Annotations
     * of an operation (since 1.71.0) or a parameter (since 1.66.0) can be immediately addressed, no matter
     * if they apply for a single overload or for all overloads at the same time, for example "/TEAMS/acme.NewAction@"
     * or "/TEAMS/acme.NewAction/Team_ID@". Annotations of an unbound operation overload can be addressed like
     * "/OperationImport/@$ui5.overload@", while "/OperationImport/@" addresses annotations of the operation
     * import itself. The special name "$ReturnType" can be used (since 1.71.0) like a parameter to address
     * annotations of the return type instead, for example "/TEAMS/acme.NewAction/$ReturnType@".
     *
     * Operation overloads are then filtered by binding parameter; multiple overloads after filtering are invalid
     * except if addressing all overloads via the segment "@$ui5.overload", for example "/acme.NewAction/@$ui5.overload".
     *
     * Once a single overload has been determined, its parameters can be immediately addressed, for example
     * "/TEAMS/acme.NewAction/Team_ID", or the special name "$Parameter" can be used (since 1.73.0), for example
     * "/TEAMS/acme.NewAction/$Parameter/Team_ID". The special name "$ReturnType" can be used (since 1.71.0)
     * like a parameter to address the return type instead, for example "/TEAMS/acme.NewAction/$ReturnType".
     * For all other names, the overload's "$ReturnType/$Type" is used for scope lookup. This way, "/GetOldestWorker/AGE"
     * addresses the same object as "/GetOldestWorker/$ReturnType/AGE" or "/GetOldestWorker/$Function/0/$ReturnType/$Type/AGE",
     * and "/TEAMS/acme.NewAction/MemberCount" (assuming "MemberCount" is not a parameter in this example) addresses
     * the same object as "/TEAMS/acme.NewAction/$ReturnType/MemberCount" or "/TEAMS/acme.NewAction/@$ui5.overload/0/$ReturnType/$Type/MemberCount".
     * In case a name can refer both to a parameter and to a property of the return type, an empty segment can
     * be used instead of "@$ui5.overload/0/$ReturnType/$Type" or "$ReturnType" to force return type lookup,
     * for example "/TEAMS/acme.NewAction//Team_ID".
     *
     * For primitive return types, the special segment "value" can be used to refer to the return type itself
     * (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}). This way, "/GetOldestAge/value" addresses
     * the same object as "/GetOldestAge/$ReturnType" or "/GetOldestAge/$Function/0/$ReturnType" or "/GetOldestAge/@$ui5.overload/0/$ReturnType"
     * (which is needed for automatic type determination, see {@link #requestUI5Type}).
     *
     * A trailing slash can be used to continue a path and thus force scope lookup or OData simple identifier
     * preparations, but then stay at the current object. This way, "/EMPLOYEES/$Type/" addresses the entity
     * type itself corresponding to the "EMPLOYEES" child of the entity container. Although the empty segment
     * is not an OData simple identifier, it can be used as a placeholder for one. In this way, "/EMPLOYEES/"
     * addresses the same entity type as "/EMPLOYEES/$Type/". That entity type in turn is a map of all its OData
     * children (that is, structural and navigation properties) and determines the set of possible child names
     * that might be used after the trailing slash.
     *
     * "$" can be used as the last segment to continue a path and thus force scope lookup, but no OData simple
     * identifier preparations. In this way, it serves as a placeholder for a technical property. The path must
     * not continue after "$", except for a computed annotation. Example: "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/$"
     * addresses the referenced property itself, not the corresponding type like "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/"
     * does. "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Target/$NavigationPropertyPath/$@@.isMultiple" calls
     * a computed annotation on the navigation property itself, not on the corresponding type.
     *
     * Any other segment, including an OData simple identifier, is looked up as a property of the current object.
     * Segments which themselves represent a path, such as the keys for the "$ReferentialConstraint" and "$NavigationPropertyBinding"
     * maps, need to use URL encoding for the slash character ("%2F"), for example "/TEAMS/$NavigationPropertyBinding/Address%2FCountries/...".
     * See:
     * 	#getObject
     *
     * @returns A promise which is resolved with the requested metadata value as soon as it is available; it
     * is rejected if the requested metadata cannot be loaded
     */
    requestObject(
      /**
       * A relative or absolute path within the metadata model
       */
      sPath: string,
      /**
       * The context to be used as a starting point in case of a relative path
       */
      oContext?: Context,
      /**
       * Optional (binding) parameters; if they are given, `oContext` cannot be omitted
       */
      mParameters?: {
        /**
         * Optional scope for lookup of aliases for computed annotations (since 1.43.0)
         */
        scope?: object;
      }
    ): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Requests the UI5 type for the given property path that formats and parses corresponding to the property's
     * EDM type and constraints. The property's type must be a primitive type. Use {@link #getUI5Type} for synchronous
     * access.
     * See:
     * 	#getUI5Type
     *
     * @returns A promise that gets resolved with the corresponding UI5 type from {@link sap.ui.model.odata.type};
     * if no specific type can be determined, a warning is logged and {@link sap.ui.model.odata.type.Raw} is
     * used
     */
    requestUI5Type(
      /**
       * An absolute path to an OData property within the OData data model
       */
      sPath: string,
      /**
       * Type-specific format options, since 1.81.0. The boolean format option "parseKeepsEmptyString" applies
       * to {@link sap.ui.model.odata.type.String} only and is ignored for all other types. All other format options
       * are passed "as is".
       */
      mFormatOptions?: object
    ): Promise<any>;
    /**
     * @SINCE 1.63.0
     *
     * Request unit customizing based on the code list reference given in the entity container's `com.sap.vocabularies.CodeList.v1.UnitOfMeasure`
     * annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v4.ODataModel#getHttpHeaders}
     * from this meta model's data model.
     * See:
     * 	#requestCurrencyCodes
     *
     * @returns A promise resolving with the unit customizing which is a map from unit key to an object with
     * the following properties:
     * 	 StandardCode: The language-independent standard code (e.g. ISO) for the unit as referred to via the
     * `com.sap.vocabularies.CodeList.v1.StandardCode` annotation on the unit's key, if present  Text: The
     * language-dependent text for the unit as referred to via the `com.sap.vocabularies.Common.v1.Text` annotation
     * on the unit's key  UnitSpecificScale: The decimals for the unit as referred to via the `com.sap.vocabularies.Common.v1.UnitSpecificScale`
     * annotation on the unit's key; entries where this would be `null` are ignored, and an error is logged
     *  It resolves with `null`, if no `com.sap.vocabularies.CodeList.v1.UnitOfMeasure` annotation is found.
     * It is rejected, if there is not exactly one unit key, or if the unit customizing cannot be loaded.
     */
    requestUnitsOfMeasure(
      /**
       * If present, it must be this meta model's root entity container
       */
      vRawValue?: any,
      /**
       * The details object
       */
      oDetails?: {
        /**
         * If present, it must point to this meta model's root entity container, that is, `oDetails.context.getModel()
         * === this` and `oDetails.context.getPath() === "/"`
         */
        context?: Context;
      }
    ): Promise<Record<
      string,
      {
        StandardCode: string;

        Text: string;

        UnitSpecificScale: string;
      }
    > | null>;
    /**
     * @SINCE 1.45.0
     *
     * Requests information to retrieve a value list for the property given by `sPropertyPath`.
     *
     * @returns A promise which is resolved with a map of qualifier to value list mapping objects structured
     * as defined by `com.sap.vocabularies.Common.v1.ValueListType`; the map entry with key "" represents the
     * mapping without qualifier. Each entry has an additional property "$model" which is the {@link sap.ui.model.odata.v4.ODataModel}
     * instance to read value list data via this mapping; that model is constructed with the HTTP headers obtained
     * via {@link sap.ui.model.odata.v4.ODataModel#getHttpHeaders} from this meta model's data model. Since
     * 1.80.0, that model's parameter "sharedRequests" is set automatically (see {@link sap.ui.model.odata.v4.ODataModel#constructor}).
     * If the value list model is the data model associated with this meta model, use the binding-specific parameter
     * "$$sharedRequest" instead, see {@link sap.ui.model.odata.v4.ODataModel#bindList}.
     *
     * For fixed values, only one mapping is expected and the qualifier is ignored. The mapping is available
     * with key "" and has an additional property "$qualifier" which is the original qualifier (useful in case
     * of "ValueListRelevantQualifiers" annotation).
     *
     * The promise is rejected with an error if there is no value list information available for the given property
     * path. Use {@link #getValueListType} to determine if value list information exists. It is also rejected
     * with an error if the value list metadata is inconsistent.
     *
     * Since 1.99.0, the `com.sap.vocabularies.Common.v1.ValueListWithFixedValues` annotation wins, even if
     * a `com.sap.vocabularies.Common.v1.ValueList` annotation in the service itself has the `SearchSupported`
     * property.
     *
     * An inconsistency can result from one of the following reasons:
     * 	 There is a reference, but the referenced service does not contain mappings for the property.  The
     * referenced service contains annotation targets in the namespace of the data service that are not mappings
     * for the property.  Two different referenced services contain a mapping using the same qualifier.
     *  A service is referenced twice.  There are multiple mappings for a fixed value list.  A `com.sap.vocabularies.Common.v1.ValueList`
     * annotation in a referenced service has the property `CollectionRoot` or `SearchSupported`.
     */
    requestValueListInfo(
      /**
       * An absolute path to an OData property within the OData data model or a (meta) path to an operation parameter,
       * for example "/TEAMS(1)/acme.NewAction/Team_ID"
       */
      sPropertyPath: string,
      /**
       * The value of the parameter `autoExpandSelect` for value list models created by this method. If the value
       * list model is the data model associated with this meta model, this flag has no effect. Supported since
       * 1.68.0
       */
      bAutoExpandSelect?: boolean,
      /**
       * Context to resolve "14.5.12 Expression edm:Path" references contained in a "com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"
       * annotation. Supported since 1.84.0
       */
      oContext?: Context1
    ): Promise<any>;
    /**
     * @SINCE 1.47.0
     *
     * Determines which type of value list exists for the given property.
     * See:
     * 	#getValueListType
     *
     * @returns A promise that is resolved with the type of the value list, a constant of the enumeration {@link
     * sap.ui.model.odata.v4.ValueListType}. The promise is rejected if the property cannot be found in the
     * metadata.
     */
    requestValueListType(
      /**
       * An absolute path to an OData property within the OData data model
       */
      sPropertyPath: string
    ): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    setLegacySyntax(): void;
    /**
     * @SINCE 1.37.0
     *
     * Returns a string representation of this object including the URL to the $metadata document of the service.
     *
     * @returns A string description of this model
     */
    toString(): string;
  }
}

declare module "sap/ui/model/odata/v4/ODataModel" {
  import Model from "sap/ui/model/Model";

  import OperationMode from "sap/ui/model/odata/OperationMode";

  import Context from "sap/ui/model/odata/v4/Context";

  import ODataContextBinding from "sap/ui/model/odata/v4/ODataContextBinding";

  import Context1 from "sap/ui/model/Context";

  import Sorter from "sap/ui/model/Sorter";

  import Filter from "sap/ui/model/Filter";

  import ODataListBinding from "sap/ui/model/odata/v4/ODataListBinding";

  import ODataPropertyBinding from "sap/ui/model/odata/v4/ODataPropertyBinding";

  import TreeBinding from "sap/ui/model/TreeBinding";

  import Binding from "sap/ui/model/Binding";

  import Message from "sap/ui/core/message/Message";

  import Metadata from "sap/ui/base/Metadata";

  import ODataMetaModel from "sap/ui/model/odata/v4/ODataMetaModel";

  /**
   * @SINCE 1.37.0
   *
   * Model implementation for OData V4.
   *
   * This model is not prepared to be inherited from.
   *
   * Every resource path (relative to the service root URL, no query options) according to "4 Resource Path" in specification "OData Version 4.0 Part 2: URL Conventions" is a valid data binding
   * path within this model if a leading slash is added; for example "/" + "SalesOrderList('A%2FB%26C')" to
   * access an entity instance with key "A/B&C". Note that appropriate URI encoding is necessary, see the
   * example of {@link sap.ui.model.odata.v4.ODataUtils.formatLiteral}. "4.5.1 Addressing Actions" needs an
   * operation binding, see {@link sap.ui.model.odata.v4.ODataContextBinding}.
   *
   * Note that the OData V4 model has its own {@link sap.ui.model.odata.v4.Context} class. Bindings which
   * are relative to such a V4 context depend on their corresponding parent binding and do not access data
   * with their own service requests unless parameters are provided.
   *
   * **Group IDs** control the model's use of batch requests. Valid group IDs are:
   * 	 **$auto** and **$auto.***: Bundles requests from the model in a batch request which is sent automatically
   * before rendering. You can use different '$auto.*' group IDs to use different batch requests. The suffix
   * may be any non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including
   * the underscore. The submit mode for these group IDs is always {@link sap.ui.model.odata.v4.SubmitMode#Auto}.
   *  **$direct**: Sends requests directly without batch. The submit mode for this group ID is always
   * {@link sap.ui.model.odata.v4.SubmitMode#Direct}.  An application group ID, which is a non-empty string
   * consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. By default,
   * an application group has the submit mode {@link sap.ui.model.odata.v4.SubmitMode#API}. It is possible
   * to use a different submit mode; for details see `mParameters.groupProperties`.
   */
  export default class ODataModel extends Model {
    /**
     * Constructor for a new ODataModel.
     */
    constructor(
      /**
       * The parameters
       */
      mParameters: {
        /**
         * The URL (or an array of URLs) from which the annotation metadata are loaded. The annotation files are
         * merged into the service metadata in the given order (last one wins). The same annotations are overwritten;
         * if an annotation file contains other elements (like a type definition) that are already merged, an error
         * is thrown. Supported since 1.41.0
         */
        annotationURI?: string | string[];
        /**
         * Whether the OData model's bindings automatically generate $select and $expand system query options from
         * the binding hierarchy. Note: Dynamic changes to the binding hierarchy are not supported. This parameter
         * is supported since 1.47.0, and since 1.75.0 it also enables property paths containing navigation properties
         * in `$select`.
         */
        autoExpandSelect?: boolean;
        /**
         * Whether the following is requested at the earliest convenience:
         * 	 root $metadata document and annotation files;  the security token.  Note: The root $metadata
         * document and annotation files are just requested but not yet converted from XML to JSON unless really
         * needed. Supported since 1.53.0. **BEWARE:** The default value may change to `true` in later releases.
         * You may also set {@link topic:26ba6a5c1e5c417f8b21cce1411dba2c Manifest Model Preload} in order to further
         * speed up the start of a UI5 component.
         */
        earlyRequests?: boolean;
        /**
         * Controls the model's use of batch requests: '$auto' bundles requests from the model in a batch request
         * which is sent automatically before rendering; '$direct' sends requests directly without batch; other
         * values result in an error
         */
        groupId?: string;
        /**
         * Controls the use of batch requests for application groups. A map of application group IDs having an object
         * with exactly one property `submit`. Valid values are 'API', 'Auto', 'Direct' see {@link sap.ui.model.odata.v4.SubmitMode}.
         * Supported since 1.51.0
         */
        groupProperties?: object;
        /**
         * Map of HTTP header names to their values, see {@link #changeHttpHeaders}
         */
        httpHeaders?: object;
        /**
         * Whether to ignore all annotations from service metadata and "cross-service references"; only the value
         * `true` is allowed. Only annotations from annotation files (see parameter "annotationURI") are loaded.
         * This parameter is not inherited by value list models. @experimental as of version 1.111.0
         */
        ignoreAnnotationsFromMetadata?: boolean;
        /**
         * Additional map of URL parameters used specifically for $metadata requests. Note that "sap-context-token"
         * applies only to the service's root $metadata, but not to "cross-service references". Supported since
         * 1.81.0
         */
        metadataUrlParams?: object;
        /**
         * The version of the OData service. Supported values are "2.0" and "4.0".
         */
        odataVersion?: string;
        /**
         * The operation mode for filtering and sorting. Since 1.39.0, the operation mode {@link sap.ui.model.odata.OperationMode.Server}
         * is supported. All other operation modes including `undefined` lead to an error if 'vFilters' or 'vSorters'
         * are given or if {@link sap.ui.model.odata.v4.ODataListBinding#filter} or {@link sap.ui.model.odata.v4.ODataListBinding#sort}
         * is called.
         */
        operationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Root URL of the service to request data from. The path part of the URL must end with a forward slash
         * according to OData V4 specification ABNF, rule "serviceRoot". You may append OData custom query options
         * to the service root URL separated with a "?", for example "/MyService/?custom=foo". See specification
         * "OData Version 4.0 Part 2: URL Conventions", "5.2 Custom Query Options". OData system query options
         * and OData parameter aliases lead to an error.
         */
        serviceUrl: string;
        /**
         * Whether all list bindings for the same resource path share their data, so that it is requested only once;
         * only the value `true` is allowed; see parameter "$$sharedRequest" of {@link #bindList}. Additionally,
         * {@link sap.ui.model.BindingMode.OneWay} becomes the default binding mode and {@link sap.ui.model.BindingMode.TwoWay}
         * is forbidden. Note: This makes all bindings read-only, so it may be especially useful for value list
         * models. Supported since 1.80.0
         */
        sharedRequests?: boolean;
        /**
         * Whether `<edmx:Reference>` and `<edmx:Include>` directives are supported in order to load schemas
         * on demand from other $metadata documents and include them into the current service ("cross-service references").
         */
        supportReferences?: boolean;
        /**
         * (Controls synchronization between different bindings which refer to the same data for the case data changes
         * in one binding. Must be set to 'None' which means bindings are not synchronized at all; all other values
         * are not supported and lead to an error.) **deprecated:** As of version 1.110.0, this parameter is optional;
         * see also {@link topic:648e360fa22d46248ca783dc6eb44531 Data Reuse}
         */
        synchronizationMode?: string;
        /**
         * The group ID that is used for update requests. If no update group ID is specified, `mParameters.groupId`
         * is used. Valid update group IDs are `undefined`, '$auto', '$direct' or an application group ID.
         */
        updateGroupId?: string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.ODataModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.ODataModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.106.0
     *
     * Attach event handler `fnFunction` to the 'dataReceived' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachDataReceived(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.106.0
     *
     * Attach event handler `fnFunction` to the 'dataRequested' event of this binding.
     *
     * @returns `this` to allow method chaining
     */
    attachDataRequested(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * See {@link sap.ui.base.EventProvider#attachEvent}
     * See:
     * 	sap.ui.base.EventProvider#attachEvent
     *
     * @returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,

      _oData?: object,

      _fnFunction?: Function,

      _oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Attach event handler `fnFunction` to the 'sessionTimeout' event of this model.
     *
     * @returns `this` to allow method chaining
     */
    attachSessionTimeout(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.37.0
     *
     * Creates a new context binding for the given path, context and parameters.
     * See:
     * 	sap.ui.model.Model#bindContext
     *
     * @returns The context binding
     */
    bindContext(
      /**
       * The binding path in the model; must not end with a slash
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path
       */
      oContext?: Context,
      /**
       * Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters as specified below.
       * Note: The binding creates its own data service request if it is absolute or if it has any parameters
       * or if it is relative and has a context created via {@link #createBindingContext}. The following OData
       * query options are allowed:
       * 	 All "5.2 Custom Query Options" except for those with a name starting with "sap-" (unless starting with
       * "sap-valid-")  The $count, $expand, $filter, $levels, $orderby, $search and $select "5.1 System Query
       * Options"; OData V4 only allows $count, $filter, $levels, $orderby and $search inside resource paths that
       * identify a collection. In our case here, this means you can only use them inside $expand.  All other
       * query options lead to an error. Query options specified for the binding overwrite model query options.
       */
      mParameters?: {
        /**
         * The value for the "5.1.2 System Query Option $expand" or an object which determines that value. The object
         * is a map from expand path to expand options, where the options are again maps of system query options,
         * typically with string values. $count can also be given as a `boolean` value, $expand can recursively
         * be given as a map, $levels can also be given as a `number` value, and $select can also be given as an
         * array (but without navigation paths). An empty map can also be given as `null` or `true`. See also {@link
         * topic:1ab4f62de6ab467096a2a98b363a1373 Parameters}.
         */
        $expand?: string | object;
        /**
         * A comma separated list or an array of items which determine the value for the "5.1.3 System Query Option
         * $select". Since 1.75.0, when using the "autoExpandSelect" model parameter (see {@link sap.ui.model.odata.v4.ODataModel#constructor}),
         * paths with navigation properties can be included and will contribute to the "5.1.2 System Query Option
         * $expand".
         */
        $select?: string | string[];
        /**
         * Whether a binding relative to an {@link sap.ui.model.odata.v4.Context} uses the canonical path computed
         * from its context's path for data service requests; only the value `true` is allowed.
         */
        $$canonicalPath?: boolean;
        /**
         * The group ID to be used for **read** requests triggered by this binding; if not specified, either the
         * parent binding's group ID (if the binding is relative) or the model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
         * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
         * {@link sap.ui.model.odata.v4.ODataModel}.
         */
        $$groupId?: string;
        /**
         * For operation bindings only: Whether $expand and $select from the parent binding are used in the request
         * sent on {@link #execute}. If set to `true`, the binding must not set the $expand itself, the operation
         * must be bound, and the return value and the binding parameter must belong to the same entity set.
         */
        $$inheritExpandSelect?: boolean;
        /**
         * Whether the binding always uses an own service request to read its data; only the value `true` is allowed.
         */
        $$ownRequest?: boolean;
        /**
         * Whether implicit loading of side effects via PATCH requests is switched off; only the value `true` is
         * allowed. This sets the preference "return=minimal" and requires the service to return an ETag header
         * for "204 No Content" responses. If not specified, the value of the parent binding is used.
         */
        $$patchWithoutSideEffects?: boolean;
        /**
         * The group ID to be used for **update** requests triggered by this binding; if not specified, either the
         * parent binding's update group ID (if the binding is relative) or the model's update group ID is used,
         * see {@link sap.ui.model.odata.v4.ODataModel#constructor}. For valid values, see parameter "$$groupId".
         */
        $$updateGroupId?: string;
      }
    ): ODataContextBinding;
    /**
     * @SINCE 1.37.0
     *
     * Creates a new list binding for the given path and optional context which must resolve to an absolute
     * OData path for an entity set.
     * See:
     * 	sap.ui.model.Model#bindList
     *
     * @returns The list binding
     */
    bindList(
      /**
       * The binding path in the model; must not end with a slash
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path
       */
      oContext?: Context1,
      /**
       * The dynamic sorters to be used initially. Call {@link sap.ui.model.odata.v4.ODataListBinding#sort} to
       * replace them. Static sorters, as defined in the '$orderby' binding parameter, are always executed after
       * the dynamic sorters. Supported since 1.39.0.
       */
      vSorters?: Sorter | Sorter[],
      /**
       * The dynamic application filters to be used initially. Call {@link sap.ui.model.odata.v4.ODataListBinding#filter}
       * to replace them. Static filters, as defined in the '$filter' binding parameter, are always combined with
       * the dynamic filters using a logical `AND`. Supported since 1.39.0.
       */
      vFilters?: Filter | Filter[],
      /**
       * Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or binding-specific parameters as specified below. Note:
       * The binding creates its own data service request if it is absolute or if it has any parameters or if
       * it is relative and has a context created via {@link #createBindingContext} or if it has sorters or filters.
       * The following OData query options are allowed:
       * 	 All "5.2 Custom Query Options" except for those with a name starting with "sap-" (unless starting with
       * "sap-valid-")  The $apply, $count, $expand, $filter, $levels, $orderby, $search, and $select "5.1
       * System Query Options"; OData V4 only allows $levels inside $expand.  All other query options lead
       * to an error. Query options specified for the binding overwrite model query options.
       */
      mParameters?: {
        /**
         * The value for the "3 System Query Option $apply" (see also OData
         * Extension for Data Aggregation Version 4.0) as an alternative to `$$aggregation`
         */
        $apply?: string;
        /**
         * The value for the "5.1.6 System Query Option $count", useful for creation at the end and {@link sap.ui.model.odata.v4.ODataListBinding#getCount}
         */
        $count?: string | boolean;
        /**
         * The value for the "5.1.2 System Query Option $expand" or an object which determines that value. The object
         * is a map from expand path to expand options, where the options are again maps of system query options,
         * typically with string values. $count can also be given as a `boolean` value, $expand can recursively
         * be given as a map, $levels can also be given as a `number` value, and $select can also be given as an
         * array (but without navigation paths). An empty map can also be given as `null` or `true`. See also {@link
         * topic:1ab4f62de6ab467096a2a98b363a1373 Parameters}.
         */
        $expand?: string | object;
        /**
         * The value for the "5.1.1 System Query Option $filter" used in addition to `vFilters`
         */
        $filter?: string;
        /**
         * The value for the "5.1.4 System Query Option $orderby" used in addition to `vSorters`
         */
        $orderby?: string | number;
        /**
         * The value for the "5.1.7 System Query Option $search"; see also `oAggregation.search` at {@link sap.ui.model.odata.v4.ODataListBinding#setAggregation}
         * and the note there!
         */
        $search?: string;
        /**
         * A comma separated list or an array of items which determine the value for the "5.1.3 System Query Option
         * $select". Since 1.75.0, when using the "autoExpandSelect" model parameter (see {@link sap.ui.model.odata.v4.ODataModel#constructor}),
         * paths with navigation properties can be included and will contribute to the "5.1.2 System Query Option
         * $expand".
         */
        $select?: string | string[];
        /**
         * An object holding the information needed for data aggregation, see {@link sap.ui.model.odata.v4.ODataListBinding#setAggregation}
         * for details.
         */
        $$aggregation?: object;
        /**
         * Whether a binding relative to an {@link sap.ui.model.odata.v4.Context} uses the canonical path computed
         * from its context's path for data service requests; only the value `true` is allowed.
         */
        $$canonicalPath?: boolean;
        /**
         * Whether this binding is considered for a match when {@link #getKeepAliveContext} is called; only the
         * value `true` is allowed. Must not be combined with `$apply`, `$$aggregation`, `$$canonicalPath`, or `$$sharedRequest`.
         * If the binding is relative, `$$ownRequest` must be set as well. Supported since 1.99.0; since 1.113.0
         * it can be combined with `$$aggregation` for a recursive hierarchy.
         */
        $$getKeepAliveContext?: boolean;
        /**
         * The group ID to be used for **read** requests triggered by this binding; if not specified, either the
         * parent binding's group ID (if the binding is relative) or the model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
         * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
         * {@link sap.ui.model.odata.v4.ODataModel}.
         */
        $$groupId?: string;
        /**
         * The operation mode for filtering and sorting with the model's operation mode as default. Since 1.39.0,
         * the operation mode {@link sap.ui.model.odata.OperationMode.Server} is supported. All other operation
         * modes including `undefined` lead to an error if 'vFilters' or 'vSorters' are given or if {@link sap.ui.model.odata.v4.ODataListBinding#filter}
         * or {@link sap.ui.model.odata.v4.ODataListBinding#sort} is called.
         */
        $$operationMode?: OperationMode | keyof typeof OperationMode;
        /**
         * Whether implicit loading of side effects via PATCH requests is switched off; only the value `true` is
         * allowed. This sets the preference "return=minimal" and requires the service to return an ETag header
         * for "204 No Content" responses. If not specified, the value of the parent binding is used.
         */
        $$patchWithoutSideEffects?: boolean;
        /**
         * Whether the binding always uses an own service request to read its data; only the value `true` is allowed.
         */
        $$ownRequest?: boolean;
        /**
         * Whether multiple bindings for the same resource path share the data, so that it is requested only once.
         * This parameter can be inherited from the model's parameter "sharedRequests", see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
         * Supported since 1.80.0 **Note:** These bindings are read-only, so they may be especially useful for value
         * lists; state messages (since 1.108.0) and the following APIs are **not** allowed
         * 	 for the list binding itself:
         * 	 {@link sap.ui.model.odata.v4.ODataListBinding#create}  {@link sap.ui.model.odata.v4.ODataListBinding#getKeepAliveContext}
         * or {@link #getKeepAliveContext} as far as it affects such a list binding  {@link sap.ui.model.odata.v4.ODataListBinding#resetChanges}
         *   for the {@link sap.ui.model.odata.v4.ODataListBinding#getHeaderContext header context} of
         * a list binding:
         * 	 {@link sap.ui.model.odata.v4.Context#requestSideEffects}   for the context of a list binding
         * representing a single entity:
         * 	 {@link sap.ui.model.odata.v4.Context#delete}  {@link sap.ui.model.odata.v4.Context#refresh}
         * {@link sap.ui.model.odata.v4.Context#replaceWith}  {@link sap.ui.model.odata.v4.Context#requestSideEffects}
         *  {@link sap.ui.model.odata.v4.Context#setKeepAlive}  {@link sap.ui.model.odata.v4.Context#setProperty}
         *  executing a bound operation using `bReplaceWithRVC`, see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}
         *   for a dependent property binding of the list binding:
         * 	 {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}
         */
        $$sharedRequest?: boolean;
        /**
         * The group ID to be used for **update** requests triggered by this binding; if not specified, either the
         * parent binding's update group ID (if the binding is relative) or the model's update group ID is used,
         * see {@link sap.ui.model.odata.v4.ODataModel#constructor}. For valid values, see parameter "$$groupId".
         */
        $$updateGroupId?: string;
      }
    ): ODataListBinding;
    /**
     * @SINCE 1.37.0
     *
     * Creates a new property binding for the given path. This binding is inactive and will not know the property
     * value initially. You have to call {@link sap.ui.model.Binding#initialize} to get it updated asynchronously
     * and register a change listener at the binding to be informed when the value is available.
     *
     * It is possible to create a property binding pointing to metadata. A '##' in the binding's path is recognized
     * as a separator and splits it into two parts. The part before the separator is resolved with the binding's
     * context and the result is transformed into a metadata context (see {@link sap.ui.model.odata.v4.ODataMetaModel#getMetaContext}).
     * The part following the separator is then interpreted relative to this metadata context, even if it starts
     * with a '/'; see {@link sap.ui.model.odata.v4.ODataMetaModel#requestObject} for more details.
     *
     * If the target type specified in the corresponding control property's binding info is "any" and the binding
     * is relative or points to metadata, the binding may have an object value; in this case and unless the
     * binding refers to an action advertisement the binding's mode must be {@link sap.ui.model.BindingMode.OneTime}.
     * See:
     * 	sap.ui.base.ManagedObject#bindProperty
     * 	sap.ui.model.Model#bindProperty
     * 	sap.ui.model.PropertyBinding#setType
     *
     * @returns The property binding
     */
    bindProperty(
      /**
       * The binding path in the model; must not end with a slash
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path
       */
      oContext?: Context1,
      /**
       * Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters as specified below.
       * The following OData query options are allowed:
       * 	 All "5.2 Custom Query Options" except for those with a name starting with "sap-" (unless starting with
       * "sap-valid-")  The $apply, $filter, and $search "5.1 System Query Options" if the path ends with
       * a "$count" segment.  All other query options lead to an error. Query options specified for the binding
       * overwrite model query options. Note: The binding only creates its own data service request if it is absolute
       * or if it is relative to a context created via {@link #createBindingContext}. The binding parameters are
       * ignored in case the binding creates no own data service request or in case the binding points to metadata.
       */
      mParameters?: {
        /**
         * The value for the "3 System Query Option $apply" (see also OData
         * Extension for Data Aggregation Version 4.0), if the path ends with a "$count" segment
         */
        $apply?: string;
        /**
         * The value for the "5.1.1 System Query Option $filter", if the path ends with a "$count" segment
         */
        $filter?: string;
        /**
         * The value for the "5.1.7 System Query Option $search", if the path ends with a "$count" segment
         */
        $search?: string;
        /**
         * The group ID to be used for **read** requests triggered by this binding; if not specified, either the
         * parent binding's group ID (if the binding is relative) or the model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
         * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
         * {@link sap.ui.model.odata.v4.ODataModel}.
         */
        $$groupId?: string;
        /**
         * Whether this binding does not propagate model messages to the control; supported since 1.82.0. Some composite
         * types like {@link sap.ui.model.odata.type.Currency} or {@link sap.ui.model.odata.type.Unit} automatically
         * ignore messages for some of their parts depending on their format options; setting this parameter to
         * `true` or `false` overrules the automatism of the type.
         *
         * For example, a binding for a currency code is used in a composite binding for rendering the proper number
         * of decimals, but the currency code is not displayed in the attached control. In that case, messages for
         * the currency code shall not be displayed at that control, only messages for the amount.
         */
        $$ignoreMessages?: boolean;
        /**
         * Whether changing the value of this property binding is not causing a PATCH request; only the value `true`
         * is allowed.
         */
        $$noPatch?: boolean;
      }
    ): ODataPropertyBinding;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Model#bindTree
     */
    bindTree(
      _sPath: string,

      _oContext?: Context1,

      _aFilters?: Filter[],

      _mParameters?: object,

      _aSorters?: Sorter[]
    ): TreeBinding;
    /**
     * @SINCE 1.71.0
     *
     * Changes the HTTP headers used for data and metadata requests sent by this model.
     *
     * If batch requests are used, the headers will be set for the batch itself, as well as for the individual
     * requests within the batch. The headers are changed according to the given map of headers: Headers with
     * an `undefined` value are removed, the other headers are set, and missing headers remain unchanged. The
     * following headers must not be used:
     * 	 OData V4 requests headers as specified in "8.1 Common Headers" and "8.2 Request Headers" of the specification "OData Version 4.0 Part 1: Protocol"
     *  OData V2 request headers as specified in "2.2.5 HTTP Header Fields" of the specification "OData
     * Version 2 v10.1"  The headers "Content-Id" and "Content-Transfer-Encoding"  The header "SAP-ContextId"
     *  Note: The "X-CSRF-Token" header will not be used for metadata requests.
     *
     * If not `undefined`, a header value must conform to the following rules:
     * 	 It must be a non-empty string.  It must be completely in the US-ASCII character set.  It must
     * not contain control characters.
     * See:
     * 	#getHttpHeaders
     */
    changeHttpHeaders(
      /**
       * Map of HTTP header names to their values
       */
      mHeaders?: object
    ): void;
    /**
     * @SINCE 1.37.0
     *
     * Creates a binding context for the given path. A relative path can only be resolved if a context is provided.
     * Note: The parameters `mParameters`, `fnCallBack`, and `bReload` from {@link sap.ui.model.Model#createBindingContext}
     * are not supported.
     *
     * It is possible to create binding contexts pointing to metadata. A '##' is recognized as separator in
     * the resolved path and splits it into two parts; note that '#' may also be used as separator but is deprecated
     * since 1.51. The part before the separator is transformed into a metadata context (see {@link sap.ui.model.odata.v4.ODataMetaModel#getMetaContext}).
     * The part following the separator is then interpreted relative to this metadata context, even if it starts
     * with a '/'; a trailing '/' is allowed here, see {@link sap.ui.model.odata.v4.ODataMetaModel#requestObject}
     * for the effect it has.
     *
     * A binding path may also point to an operation advertisement which is addressed with '#.'
     * and is part of the data payload, not the metadata. The metadata of an operation can be addressed via
     * '##' as described above.
     *
     * Examples:
     * 	 `/Products('42')/Name##@com.sap.vocabularies.Common.v1.Label` points to the "Label" annotation of the
     * "Name" property of the entity set "Products".  `/##Products/Name@com.sap.vocabularies.Common.v1.Label`
     * has no data path part and thus starts at the metadata root. It also points to the "Label" annotation
     * of the "Name" property of the entity set "Products".  `/Products##/` points to the entity type (note
     * the trailing '/') of the entity set "Products".  `/EMPLOYEES('1')/##com.sap.Action` points to the
     * metadata of an action bound to the entity set "EMPLOYEES".  `/EMPLOYEES('1')/#com.sap.Action` does
     * not point to metadata, but to the action advertisement.
     * See:
     * 	sap.ui.model.Model#createBindingContext
     *
     * @returns The binding context with the resolved path and the model instance
     */
    createBindingContext(
      /**
       * The binding path, may be relative to the provided context
       */
      sPath: string,
      /**
       * The context which is required as base for a relative path
       */
      oContext?: Context1
    ): Context1;
    /**
     * @SINCE 1.103.0
     *
     * Deletes the entity with the given canonical path on the server and in all bindings. Pending changes in
     * contexts for this entity or in dependents thereof are canceled.
     *
     * Deleting in the bindings is only possible if the given path is a canonical path, and all paths follow
     * these rules in addition to the OData 4.0 specification:
     * 	 Key properties are ordered just as in the metadata,  for single key properties, the name of the
     * key is omitted,  for collection-valued navigation properties, all keys are present,  the key-value
     * pairs are encoded via encodeURIComponent.
     *
     * @returns A promise resolving when the delete succeeded, and rejecting with an instance of Error otherwise.
     * In the latter case the HTTP status code of the response is given in the error's property `status`.
     */
    delete(
      /**
       * The canonical path of the entity to delete, starting with a '/'
       */
      sCanonicalPath: string,
      /**
       * The group ID that is used for the DELETE request; if not specified, the model's {@link #getUpdateGroupId
       * update group ID} is used; the resulting group ID must not have {@link sap.ui.model.odata.v4.SubmitMode.API}
       */
      sGroupId?: string,
      /**
       * If `true`, deletion fails if the entity does not exist (HTTP status code 404 or 412 due to the `If-Match:
       * *` header); otherwise we assume that it has already been deleted by someone else and report success
       */
      bRejectIfNotFound?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.38.0
     *
     * Destroys this model, its requestor and its meta model.
     * See:
     * 	sap.ui.model.Model#destroy
     */
    destroy(): void;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    destroyBindingContext(): void;
    /**
     * @SINCE 1.106.0
     *
     * Detach event handler `fnFunction` from the 'dataReceived' event of this model.
     *
     * @returns `this` to allow method chaining
     */
    detachDataReceived(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.106.0
     *
     * Detach event handler `fnFunction` from the 'dataRequested' event of this model.
     *
     * @returns `this` to allow method chaining
     */
    detachDataRequested(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Detach event handler `fnFunction` from the 'sessionTimeout' event of this model.
     *
     * @returns `this` to allow method chaining
     */
    detachSessionTimeout(
      /**
       * The function to call when the event occurs
       */
      fnFunction: Function,
      /**
       * Object on which to call the given function
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.73.0
     *
     * Returns the model's bindings.
     *
     * @returns A copy of an array with all bindings, or an empty array if there are no bindings
     */
    getAllBindings(): Binding[];
    /**
     * @SINCE 1.41.0
     *
     * Returns the model's group ID.
     * See:
     * 	sap.ui.model.odata.v4.ODataModel#constructor
     *
     * @returns The group ID
     */
    getGroupId(): string;
    /**
     * @SINCE 1.71
     *
     * Returns a map of HTTP headers used for data and metadata requests. While the "X-CSRF-Token" header is
     * not used for metadata requests, it is still included here if available. The "SAP-ContextId" header is
     * only included if requested explicitly (@since 1.86.0).
     * See:
     * 	#changeHttpHeaders
     *
     * @returns The map of HTTP headers
     */
    getHttpHeaders(
      /**
       * Whether to include the "SAP-ContextId" header (@since 1.86.0)
       */
      bIncludeContextId?: boolean
    ): object;
    /**
     * @SINCE 1.99.0
     *
     * Returns a context with the given path belonging to a matching list binding that has been marked with
     * `$$getKeepAliveContext` (see {@link #bindList}). If such a matching binding can be found, a context is
     * returned and kept alive (see {@link sap.ui.model.odata.v4.ODataListBinding#getKeepAliveContext}). Since
     * 1.100.0 a temporary binding is used if no such binding could be found. If such a binding is created or
     * resolved later, the context and its data are transferred to it, and the temporary binding is destroyed
     * again.
     *
     * A `$$getKeepAliveContext` binding matches if its resolved binding path is the collection path of the
     * context. If the context is created using a temporary binding and the parameters of the `$$getKeepAliveContext`
     * binding differ from the given `mParameters` (except `$$groupId` which is especially used for the context),
     * that binding later runs into an error when trying to read data.
     *
     * **Note**: The context received by this function may change its {@link sap.ui.model.odata.v4.Context#getBinding
     * binding} during its lifetime.
     *
     * @returns The kept-alive context
     */
    getKeepAliveContext(
      /**
       * A list context path to an entity, see also {@link #requestKeyPredicate}
       */
      sPath: string,
      /**
       * Whether to request messages for the context's entity
       */
      bRequestMessages?: boolean,
      /**
       * Parameters for the context or the temporary binding; supported since 1.100.0. All custom query options
       * and the following binding-specific parameters for a list binding may be given (see {@link #bindList}
       * for details).
       */
      mParameters?: {
        /**
         * The group ID used for read requests for the context's entity or its properties. If not given, the model's
         * {@link #getGroupId group ID} is used
         */
        $$groupId?: string;
        /**
         * Whether implicit loading of side effects via PATCH requests is switched off
         */
        $$patchWithoutSideEffects?: boolean;
        /**
         * The group ID to be used for **update** requests triggered by the context's binding
         */
        $$updateGroupId?: string;
      }
    ): Context;
    /**
     * @SINCE 1.107.0
     *
     * Takes the metadata for the given meta path and calculates the key predicate by taking the key properties
     * from the given entity instance.
     * See:
     * 	#requestKeyPredicate
     *
     * @returns The proper URI-encoded key predicate, for example "(Sector='A%2FB%26C',ID='42')" or "('42')",
     * or `undefined` if at least one key property is undefined.
     */
    getKeyPredicate(
      /**
       * An absolute metadata path to an entity set
       */
      sMetaPath: string,
      /**
       * The entity instance with the key property values
       */
      oEntity: object
    ): string | undefined;
    /**
     * @SINCE 1.85.0
     *
     * Returns messages of this model associated with the given context, that is messages belonging to the object
     * referred to by this context or a child object of that object. The messages are sorted by their {@link
     * sap.ui.core.message.Message#getType type} according to the type's severity in a way that messages with
     * highest severity come first.
     * See:
     * 	sap.ui.model.Model#getMessages
     *
     * @returns The messages associated with this context sorted by severity; empty array in case no messages
     * exist
     */
    getMessages(
      /**
       * The context to retrieve messages for
       */
      oContext: Context1
    ): Message[];
    /**
     * @SINCE 1.37.0
     *
     * Returns the meta model for this ODataModel.
     *
     * @returns The meta model for this ODataModel
     */
    getMetaModel(): ODataMetaModel;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    getObject(): void;
    /**
     * @SINCE 1.49.0
     *
     * Returns the version of the OData service.
     *
     * @returns The version of the OData service
     */
    getODataVersion(): string;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    getOriginalProperty(): void;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Model#getProperty
     */
    getProperty(): void;
    /**
     * @SINCE 1.107.0
     *
     * Returns this model's root URL of the service to request data from (as defined by the "serviceUrl" model
     * parameter, see {@link sap.ui.model.odata.v4.ODataModel#constructor}), without query options.
     *
     * @returns The service URL
     */
    getServiceUrl(): string;
    /**
     * @SINCE 1.41.0
     *
     * Returns the model's update group ID.
     * See:
     * 	sap.ui.model.odata.v4.ODataModel#constructor
     *
     * @returns The update group ID
     */
    getUpdateGroupId(): string;
    /**
     * @SINCE 1.39.0
     *
     * Returns `true` if there are pending changes, which can be updates, created entities (see {@link sap.ui.model.odata.v4.ODataListBinding#create})
     * or entity deletions (see {@link sap.ui.model.odata.v4.Context#delete}) that have not yet been successfully
     * sent to the server. Those changes can be either sent via {@link #submitBatch} or reset via {@link #resetChanges}.
     * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isInactive inactive} contexts are ignored, even when
     * their {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate activation} has been prevented.
     *
     * @returns `true` if there are pending changes
     */
    hasPendingChanges(
      /**
       * A group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}, except group IDs having {@link sap.ui.model.odata.v4.SubmitMode.Direct};
       * if specified, only pending changes related to that group ID are considered (since 1.70.0)
       */
      sGroupId?: string
    ): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Refreshes the model by calling refresh on all bindings which have a change event handler attached.
     *
     * Note: When calling {@link #refresh} multiple times, the result of the request triggered by the last call
     * determines the model's data; it is **independent** of the order of calls to {@link #submitBatch} with
     * the given group ID.
     *
     * If there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if there are
     * pending changes. If there are changes, call {@link #submitBatch} to submit the changes or {@link #resetChanges}
     * to reset the changes before calling {@link #refresh}.
     * See:
     * 	sap.ui.model.Model#refresh
     * 	sap.ui.model.odata.v4.ODataContextBinding#refresh
     * 	sap.ui.model.odata.v4.ODataListBinding#refresh
     * 	sap.ui.model.odata.v4.ODataPropertyBinding#refresh
     */
    refresh(
      /**
       * The group ID to be used for refresh; valid values are `undefined`, '$auto', '$auto.*', '$direct' or application
       * group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}. It is ignored for suspended bindings,
       * because resume uses the binding's group ID. A value of type boolean is not accepted and an error will
       * be thrown (a forced refresh is not supported).
       */
      sGroupId?: string | boolean
    ): void;
    /**
     * @SINCE 1.37.0
     * @deprecated (since 1.39.0) - Use {@link sap.ui.model.odata.v4.Context#requestCanonicalPath} instead.
     *
     * Returns a promise for the "canonical path" of the entity for the given context. According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL Conventions", this is
     * the "name of the entity set associated with the entity followed by the key predicate identifying the
     * entity within the collection". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create
     * an element binding.
     *
     * @returns A promise which is resolved with the canonical path (e.g. "/SalesOrderList('0500000000')") in
     * case of success, or rejected with an instance of `Error` in case of failure, e.g. when the given context
     * does not point to an entity
     */
    requestCanonicalPath(
      /**
       * A context in this model which must point to a non-contained OData entity
       */
      oEntityContext: Context
    ): Promise<any>;
    /**
     * @SINCE 1.107.0
     *
     * Requests the metadata for the given meta path and calculates the key predicate by taking the key properties
     * from the given entity instance.
     * See:
     * 	#getKeyPredicate
     *
     * @returns A promise that gets resolved with the proper URI-encoded key predicate, for example "(Sector='A%2FB%26C',ID='42')"
     * or "('42')", or `undefined` if at least one key property is undefined. It gets rejected if the metadata
     * cannot be fetched, or in case the entity has no key properties according to the metadata.
     */
    requestKeyPredicate(
      /**
       * An absolute metadata path to the entity set
       */
      sMetaPath: string,
      /**
       * The entity instance with the key property values
       */
      oEntity: object
    ): Promise<string | undefined>;
    /**
     * @SINCE 1.39.0
     *
     * Resets all property changes, created entities, and entity deletions associated with the given group ID
     * which have not been successfully submitted via {@link #submitBatch}. Resets also invalid user input for
     * the same group ID and (since 1.111.0) inactive contexts which had their activation prevented (see {@link
     * sap.ui.model.odata.v4.Context#isInactive}). This function does not reset the execution of OData operations
     * (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}).
     * See:
     * 	sap.ui.model.odata.v4.ODataModel#constructor
     * 	#hasPendingChanges
     */
    resetChanges(
      /**
       * A valid group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}. If it is `undefined`, the
       * model's `updateGroupId` is used. Note that the default `updateGroupId` is '$auto', which is valid here
       * since 1.67.0.
       */
      sGroupId?: string
    ): void;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    setLegacySyntax(): void;
    /**
     * @SINCE 1.37.0
     *
     * Submits the requests associated with the given group ID in one batch request. Requests from subsequent
     * calls to this method for the same group ID may be combined in one batch request using separate change
     * sets. For group IDs with {@link sap.ui.model.odata.v4.SubmitMode.Auto}, only a single change set is used;
     * this method is useful to repeat failed updates or creates (see {@link sap.ui.model.odata.v4.ODataListBinding#create})
     * together with all other requests for the given group ID in one batch request.
     *
     * {@link #resetChanges} can be used to reset all pending changes instead. After that, or when the promise
     * returned by this method is fulfilled, {@link #hasPendingChanges} will not report pending changes anymore.
     *
     * @returns A promise on the outcome of the HTTP request resolving with `undefined`; it is rejected with
     * an error if the batch request itself fails
     */
    submitBatch(
      /**
       * A valid group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId: string
    ): Promise<undefined>;
    /**
     * @SINCE 1.37.0
     *
     * Returns a string representation of this object including the service URL.
     *
     * @returns A string description of this model
     */
    toString(): string;
  }
}

declare module "sap/ui/model/odata/v4/ODataPropertyBinding" {
  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import Metadata from "sap/ui/base/Metadata";

  import ODataContextBinding from "sap/ui/model/odata/v4/ODataContextBinding";

  import ODataListBinding from "sap/ui/model/odata/v4/ODataListBinding";

  import ValueListType from "sap/ui/model/odata/v4/ValueListType";

  import Type from "sap/ui/model/Type";

  /**
   * @SINCE 1.37.0
   *
   * Property binding for an OData V4 model. An event handler can only be attached to this binding for the
   * following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested' and 'DataStateChange'.
   * For unsupported events, an error is thrown.
   */
  export default class ODataPropertyBinding extends PropertyBinding {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.odata.v4.ODataPropertyBinding with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ODataPropertyBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.odata.v4.ODataPropertyBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @SINCE 1.37.0
     *
     * See {@link sap.ui.base.EventProvider#attachEvent}
     * See:
     * 	sap.ui.base.EventProvider#attachEvent
     *
     * @returns `this` to allow method chaining
     */
    attachEvent(
      /**
       * The identifier of the event to listen for
       */
      sEventId: string,

      _oData?: object,

      _fnFunction?: Function,

      _oListener?: object
    ): this;
    /**
     * @SINCE 1.39.0
     *
     * Destroys the object. The object must not be used anymore after this function was called.
     * See:
     * 	sap.ui.model.Binding#destroy
     */
    destroy(): void;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for read requests. The group ID of the binding is alternatively
     * defined by
     * 	 the `groupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$groupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link
     * sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The group ID
     */
    getGroupId(): string;
    /**
     * @SINCE 1.53.0
     *
     * Returns the root binding of this binding's hierarchy, see {@link topic:fccfb2eb41414f0792c165e69a878717
     * Initialization and Read Requests}.
     *
     * @returns The root binding or `undefined` if this binding is unresolved (see {@link sap.ui.model.Binding#isResolved}).
     */
    getRootBinding():
      | ODataContextBinding
      | ODataListBinding
      | ODataPropertyBinding
      | undefined;
    /**
     * @SINCE 1.81.0
     *
     * Returns the group ID of the binding that is used for update requests. The update group ID of the binding
     * is alternatively defined by
     * 	 the `updateGroupId` parameter of the OData model; see {@link sap.ui.model.odata.v4.ODataModel#constructor},
     *  the `$$updateGroupId` binding parameter; see {@link sap.ui.model.odata.v4.ODataModel#bindList} and
     * {@link sap.ui.model.odata.v4.ODataModel#bindContext}.
     *
     * @returns The update group ID
     */
    getUpdateGroupId(): string;
    /**
     * @SINCE 1.37.0
     *
     * Returns the current value.
     * See:
     * 	sap.ui.model.PropertyBinding#getValue
     *
     * @returns The current value
     */
    getValue(): any;
    /**
     * @SINCE 1.45.0
     *
     * Determines which type of value list exists for this property.
     *
     * @returns The value list type
     */
    getValueListType(): ValueListType | keyof typeof ValueListType;
    /**
     * @SINCE 1.39.0
     *
     * Returns `true` if this binding or its dependent bindings have property changes, created entities, or
     * entity deletions which have not been sent successfully to the server. This function does not take the
     * execution of OData operations (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}) into account.
     * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isInactive inactive} contexts are ignored, unless
     * (since 1.100.0) their {@link sap.ui.model.odata.v4.ODataListBinding#event:createActivate activation}
     * has been prevented and {@link sap.ui.model.odata.v4.Context#isInactive} therefore returns `1`.
     *
     * Note: If this binding is relative, its data is cached separately for each parent context path. This method
     * returns `true` if there are pending changes for the current parent context path of this binding. If this
     * binding is unresolved (see {@link sap.ui.model.Binding#isResolved}), it returns `false`.
     *
     * @returns `true` if the binding is resolved and has pending changes
     */
    hasPendingChanges(
      /**
       * Whether to ignore changes which will not be lost by APIs like {@link sap.ui.model.odata.v4.ODataListBinding#changeParameters
       * changeParameters}, {@link sap.ui.model.odata.v4.ODataListBinding#filter filter}, {@link sap.ui.model.odata.v4.ODataListBinding#refresh
       * refresh} (since 1.100.0), {@link sap.ui.model.odata.v4.ODataListBinding#sort sort}, or {@link sap.ui.model.odata.v4.ODataListBinding#suspend
       * suspend} because they relate to a {@link sap.ui.model.odata.v4.Context#isKeepAlive kept-alive} (since
       * 1.97.0) or {@link sap.ui.model.odata.v4.Context#delete deleted} (since 1.108.0) context of this binding.
       * Since 1.98.0, {@link sap.ui.model.odata.v4.Context#isTransient transient} contexts of a {@link #getRootBinding
       * root binding} are treated as kept-alive by this flag. Since 1.99.0, the same happens for bindings using
       * the `$$ownRequest` parameter (see {@link sap.ui.model.odata.v4.ODataModel#bindList}).
       */
      bIgnoreKeptAlive?: boolean
    ): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     */
    isInitial(): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and
     * notifies the control that new data is available.
     *
     * Refresh is supported for bindings which are not relative to an {@link sap.ui.model.odata.v4.Context}.
     *
     * Note: When calling {@link #refresh} multiple times, the result of the request triggered by the last call
     * determines the binding's data; it is **independent** of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * with the given group ID.
     *
     * If there are pending changes that cannot be ignored, an error is thrown. Use {@link #hasPendingChanges}
     * to check if there are such pending changes. If there are, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch}
     * to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before
     * calling {@link #refresh}.
     *
     * Use {@link #requestRefresh} if you want to wait for the refresh.
     * See:
     * 	sap.ui.model.Binding#refresh
     * 	#getRootBinding
     * 	#suspend
     */
    refresh(
      /**
       * The group ID to be used for refresh; if not specified, the binding's group ID is used, see {@link #getGroupId}.
       * For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's
       * group ID. A value of type boolean is not accepted and an error will be thrown (a forced refresh is not
       * supported).
       *
       * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in
       * {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string | boolean
    ): void;
    /**
     * @SINCE 1.87.0
     *
     * Refreshes the binding and returns a promise to wait for it. See {@link #refresh} for details. Use {@link
     * #refresh} if you do not need the promise.
     *
     * @returns A promise which resolves without a defined result when the refresh is finished and rejects with
     * an instance of `Error` if the refresh failed
     */
    requestRefresh(
      /**
       * The group ID to be used
       */
      sGroupId?: string
    ): Promise<any>;
    /**
     * @SINCE 1.69
     *
     * Requests the value of the property binding.
     *
     * @returns A promise resolving with the resulting value or `undefined` if it could not be determined, or
     * rejecting in case of an error
     */
    requestValue(): Promise<any | undefined>;
    /**
     * @SINCE 1.45.0
     *
     * Requests information to retrieve a value list for this property.
     *
     * @returns See {@link sap.ui.model.odata.v4.ODataMetaModel#requestValueListInfo}
     */
    requestValueListInfo(
      /**
       * The value of the parameter `autoExpandSelect` for value list models created by this method. If the value
       * list model is this binding's model, this flag has no effect. Supported since 1.68.0
       */
      bAutoExpandSelect?: boolean
    ): Promise<any>;
    /**
     * @SINCE 1.47.0
     *
     * Determines which type of value list exists for this property.
     *
     * @returns A promise that is resolved with the type of the value list. It is rejected if the property cannot
     * be found in the metadata.
     */
    requestValueListType(): Promise<any>;
    /**
     * @SINCE 1.40.1
     *
     * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user
     * input.
     *
     * @returns A promise which is resolved without a defined result as soon as all changes in the binding itself
     * and all dependent bindings are canceled (since 1.72.0)
     */
    resetChanges(): Promise<any>;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Binding#resume
     */
    resume(): void;
    /**
     * @SINCE 1.43.0
     *
     * Sets the optional type and internal type for this binding; used for formatting and parsing. Fires a change
     * event if the type has changed.
     * See:
     * 	sap.ui.model.PropertyBinding#setType
     */
    setType(
      /**
       * The type for this binding
       */
      oType: Type,
      /**
       * The internal type of the element property which owns this binding, for example "any", "boolean", "float",
       * "int", "string"; see {@link sap.ui.model.odata.type} for more information
       */
      _sInternalType: string
    ): void;
    /**
     * @SINCE 1.37.0
     *
     * Sets the new current value and updates the cache. If the value cannot be accepted or cannot be updated
     * on the server, an error is logged to the console and added to the message manager as a technical message.
     * Unless preconditions fail synchronously, a {@link sap.ui.model.odata.v4.ODataModel#event:propertyChange
     * 'propertyChange'} event is fired and provides a promise on the outcome of the asynchronous operation.
     * See:
     * 	sap.ui.model.PropertyBinding#setValue
     */
    setValue(
      /**
       * The new value which must be primitive
       */
      vValue: any,
      /**
       * The group ID to be used for this update call; if not specified, the update group ID for this binding
       * (or its relevant parent binding) is used, see {@link #getUpdateGroupId}. Valid values are `undefined`,
       * '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}.
       */
      sGroupId?: string
    ): void;
    /**
     * @SINCE 1.82.0
     *
     * Returns `true`, as this binding supports the feature of not propagating model messages to the control.
     * See:
     * 	sap.ui.model.Binding#getIgnoreMessages
     * 	sap.ui.model.Binding#setIgnoreMessages
     *
     * @returns `true`
     */
    supportsIgnoreMessages(): boolean;
    /**
     * @SINCE 1.37.0
     *
     * Method not supported
     * See:
     * 	sap.ui.model.Binding#suspend
     */
    suspend(): void;
    /**
     * @SINCE 1.37.0
     *
     * Returns a string representation of this object including the binding path. If the binding is relative,
     * the parent path is also given, separated by a '|'.
     *
     * @returns A string description of this binding
     */
    toString(): string;
  }
}

declare module "sap/ui/model/odata/v4/ODataUtils" {
  /**
   * @SINCE 1.43.0
   *
   * A collection of methods which help to consume OData V4 services.
   */
  interface ODataUtils {
    /**
     * @SINCE 1.43.0
     *
     * Compares the given OData values.
     *
     * @returns The result of the comparison: `0` if the values are equal, `1` if the first value is larger,
     * `-1` if the second value is larger, `NaN` if they cannot be compared
     */
    compare(
      /**
       * The first value to compare
       */
      vValue1: any,
      /**
       * The second value to compare
       */
      vValue2: any,
      /**
       * If `true` or "Decimal", the string values `vValue1` and `vValue2` are assumed to be valid "Edm.Decimal"
       * or "Edm.Int64" values and are compared as a decimal number (only sign, integer and fraction digits; no
       * exponential format). If "DateTime", the string values `vValue1` and `vValue2` are assumed to be valid
       * "Edm.DateTimeOffset" values and are compared based on the corresponding number of milliseconds since
       * 1 January, 1970 UTC. Otherwise the values are compared with the JavaScript operators `===` and `>`.
       */
      vEdmType?: boolean | string
    ): number;
    /**
     * @SINCE 1.64.0
     *
     * Formats the given OData value into a literal suitable for usage in data binding paths and URLs.
     *
     * @returns The literal according to "OData Version 4.0 Part 2: URL Conventions" section "5.1.1.11.1 Primitive Literals"
     */
    formatLiteral(
      /**
       * The value according to "OData JSON Format Version 4.0" section "7.1 Primitive Value"
       */
      vValue: any,
      /**
       * The OData primitive type, for example "Edm.String"
       */
      sType: string
    ): string;
    /**
     * @SINCE 1.43.0
     *
     * Parses an "Edm.Date" value and returns the corresponding JavaScript `Date` value (UTC with a time value
     * of "00:00:00").
     *
     * @returns The JavaScript `Date` value
     */
    parseDate(
      /**
       * The "Edm.Date" value to parse
       */
      sDate: string
    ): Date;
    /**
     * @SINCE 1.43.0
     *
     * Parses an "Edm.DateTimeOffset" value and returns the corresponding JavaScript `Date` value.
     *
     * @returns The JavaScript `Date` value
     */
    parseDateTimeOffset(
      /**
       * The "Edm.DateTimeOffset" value to parse
       */
      sDateTimeOffset: string
    ): Date;
    /**
     * @SINCE 1.43.0
     *
     * Parses an "Edm.TimeOfDay" value and returns the corresponding JavaScript `Date` value (UTC with a date
     * value of "1970-01-01").
     *
     * @returns The JavaScript `Date` value
     */
    parseTimeOfDay(
      /**
       * The "Edm.TimeOfDay" value to parse
       */
      sTimeOfDay: string
    ): Date;
  }
  const ODataUtils: ODataUtils;
  export default ODataUtils;
}

declare module "sap/ui/model/odata/v4/SubmitMode" {
  /**
   * Modes to control the use of batch requests for a group ID.
   */
  enum SubmitMode {
    /**
     * Requests associated with the group ID are sent in a batch request via {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
     */
    API = "API",
    /**
     * Requests associated with the group ID are sent in a batch request which is triggered automatically before
     * rendering.
     */
    Auto = "Auto",
    /**
     * Requests associated with the group ID are sent directly without batch.
     */
    Direct = "Direct",
  }
  export default SubmitMode;
}

declare module "sap/ui/model/odata/v4/ValueListType" {
  /**
   * @SINCE 1.45.0
   *
   * Specifies the value list type of a property.
   * See:
   * 	sap.ui.model.odata.v4.ODataMetaModel#getValueListType
   */
  enum ValueListType {
    /**
     * @SINCE 1.45.0
     *
     * There is one enumeration of fixed values.
     */
    Fixed = "Fixed",
    /**
     * @SINCE 1.45.0
     *
     * There is no value list.
     */
    None = "None",
    /**
     * @SINCE 1.45.0
     *
     * There is a dynamic value list with multiple queries including selection criteria.
     */
    Standard = "Standard",
  }
  export default ValueListType;
}

declare module "sap/ui/model/ParseException" {
  /**
   * Instances of this exception are thrown when converting a string value to its model representation fails.
   */
  export default class ParseException {
    /**
     * Creates a new ParseException.
     * See:
     * 	sap.ui.model.SimpleType#formatValue
     */
    constructor(
      /**
       * A message explaining why the parsing of a value failed; this message is language dependent as it may
       * be displayed on the UI
       */
      message: string
    );
  }
}

declare module "sap/ui/model/PropertyBinding" {
  import Binding from "sap/ui/model/Binding";

  import Model from "sap/ui/model/Model";

  import Context from "sap/ui/model/Context";

  import BindingMode from "sap/ui/model/BindingMode";

  import Metadata from "sap/ui/base/Metadata";

  import Type from "sap/ui/model/Type";

  /**
   * The PropertyBinding is used to access single data values in the data model.
   */
  export default class PropertyBinding extends Binding {
    /**
     * Constructor for PropertyBinding
     */
    constructor(
      oModel: Model,

      sPath: string,

      oContext: Context,

      mParameters?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.PropertyBinding with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PropertyBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.PropertyBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the binding mode.
     *
     * @returns The binding mode
     */
    getBindingMode(): BindingMode | keyof typeof BindingMode;
    /**
     * Returns the current external value of the bound target which is formatted via a type or formatter function.
     *
     * @returns the current value of the bound target
     */
    getExternalValue(): any;
    /**
     * Returns the formatter function.
     *
     * @returns The formatter function
     */
    getFormatter(): Function;
    /**
     * Returns the related JavaScript primitive value of the bound target which is parsed by the {@link sap.ui.model.SimpleType#getModelFormat
     * model format} of this binding's type. If this binding doesn't have a type, the original value which is
     * stored in the model is returned.
     *
     * This method will be used when targetType is set to "internal" or when it's included in a {@link sap.ui.model.CompositeBinding
     * CompositeBinding} and the CompositeBinding needs to have the related JavaScript primitive values for
     * its type or formatter.
     *
     * @returns The value which is parsed by the model format of the bound target, or the original value in
     * case of no type.
     */
    getInternalValue(): any;
    /**
     * Returns the raw model value, as it exists in the model dataset.
     *
     * This method will be used when targetType of a binding is set to "raw" or when it's include in a {@link
     * sap.ui.model.CompositeBinding CompositeBinding} and the CompositeBinding needs to have the related JavaScript
     * primitive values for its type or formatter.
     *
     * @returns The value which is parsed by the model format of the bound target, or the original value in
     * case of no type.
     */
    getRawValue(): any;
    /**
     * Returns the type (if any) for the binding.
     *
     * @returns The binding type
     */
    getType(): Type;
    /**
     * Returns the current value of the bound target
     *
     * @returns the current value of the bound target
     */
    getValue(): any;
    /**
     * Resumes the binding update. Change events will be fired again.
     *
     * When the binding is resumed and the control value was changed in the meantime, the control value will
     * be set to the current value from the model and a change event will be fired.
     */
    resume(): void;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Sets the binding mode.
     */
    setBindingMode(
      /**
       * The binding mode
       */
      sBindingMode: BindingMode | keyof typeof BindingMode
    ): void;
    /**
     * Sets the value for this binding. The value is parsed and validated against its type and then set to the
     * binding. A model implementation should check if the current default binding mode permits setting the
     * binding value, and if so, set the new value in the model, too.
     *
     * @returns A promise in case of asynchronous type parsing or validation
     */
    setExternalValue(
      /**
       * The value to set for this binding
       */
      vValue: any
    ): undefined | Promise<any>;
    /**
     * Sets the optional formatter function for the binding.
     */
    setFormatter(
      /**
       * The formatter function for the binding
       */
      fnFormatter: Function
    ): void;
    /**
     * Sets the value for this binding with the related JavaScript primitive type. The value is formatted with
     * the {@link sap.ui.model.SimpleType#getModelFormat model format} and validated against its type and then
     * set to the model.
     *
     * @returns A promise to set the value; `undefined` if the binding has no type
     */
    setInternalValue(
      /**
       * The value to set for this binding
       */
      vValue: any
    ): Promise<any> | undefined;
    /**
     * Sets the value for this binding with the raw model value. This setter will perform type validation, in
     * case a type is defined on the binding.
     *
     * @returns A promise to set the value; `undefined` if the binding has no type
     */
    setRawValue(
      /**
       * The value to set for this binding
       */
      vValue: any
    ): Promise<any> | undefined;
    /**
     * Sets the optional type and internal type for the binding. The type and internal type are used to do the
     * parsing/formatting correctly. The internal type is the property type of the element which the value is
     * formatted to.
     */
    setType(
      /**
       * The type for the binding
       */
      oType: Type,
      /**
       * The internal type of the element property which this binding is bound against.
       */
      sInternalType: string
    ): void;
    /**
     * Sets the value for this binding. A model implementation should check if the current default binding mode
     * permits setting the binding value, and if so, set the new value in the model, too.
     */
    setValue(
      /**
       * the value to set for this binding
       */
      vValue: any
    ): void;
  }
}

declare module "sap/ui/model/resource/ResourceModel" {
  import Model from "sap/ui/model/Model";

  import {
    default as ResourceBundle,
    Configuration,
    TerminologyConfiguration,
  } from "sap/base/i18n/ResourceBundle";

  import BindingMode from "sap/ui/model/BindingMode";

  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Model implementation for resource bundles.
   *
   * This model is not prepared to be inherited from.
   *
   * This model allows to bind control properties against translatable texts. Its data is taken from a {@link
   * module:sap/base/i18n/ResourceBundle} and it only supports property bindings.
   *
   * In contrast to most other models, binding paths for a `ResourceModel` must not start with a slash; they
   * are absolute by default, and there's no further structure. Each key in the underlying resource bundle
   * is a valid binding path.
   *
   * In extensibility scenarios, the texts of the resource bundle can be {@link #enhance enhanced} with additional
   * resource bundles. These additional bundles can define new texts for existing keys, texts for new keys,
   * or both. When texts for existing keys are replaced, the latest enhancement wins.
   *
   * This model supports the binding modes `OneWay` and `OneTime`, but not `TwoWay`. When the recommended
   * asynchronous loading of the bundle is used, binding mode `OneTime` can't be used.
   */
  export default class ResourceModel extends Model {
    /**
     * Constructor for a new ResourceModel.
     *
     * Declarative Usage: The ResourceModel can be created using configuration objects instead of `ResourceBundle`
     * instances. This is the recommended way and enables:
     * 	 - use of terminologies in the bundle and in the enhancements
     * 	 - a guaranteed order of resolution
     *
     * Programmatic Usage: The ResourceModel can be created in a programmatic manner which means that `ResourceBundle`
     * instances are used instead of configurations. Existing ResourceBundles can either be used in the `bundle`
     * parameter or in the `enhanceWith` array. Runtime errors are thrown when `ResourceBundle` instances are
     * used with `terminologies`. Also when using `ResourceModel#enhance` with `terminologies`.
     */
    constructor(
      /**
       * Parameters used to initialize the `ResourceModel`; at least one of `bundle`, `bundleName` or `bundleUrl`
       * must be set; if more than one property is set, they are evaluated in the mentioned order
       */
      oData: {
        /**
         * The list of active terminologies, e.g. `["oil", "retail"]`. This parameter is passed to the underlying
         * ResourceBundle (see {@link module:sap/base/i18n/ResourceBundle.create}). This parameter is ignored when
         * `bundle` is set. Will cause an error if `enhanceWith` contains instances of `ResourceBundle`. Supported
         * since 1.77.0.
         */
        activeTerminologies?: string[];
        /**
         * Whether the language bundle should be loaded asynchronously
         */
        async?: boolean;
        /**
         * A resource bundle instance; when given, this bundle is used instead of creating a bundle from the provided
         * `bundleUrl`, `bundleName` and `bundleLocale` properties. However, to support reloading the bundle when
         * the current session locale changes, the corresponding `bundleName` or `bundleUrl` should be specified
         * if known. Otherwise, the bundle is not updated on locale changes. Note: This parameter should not be
         * used when using enhancements. Terminologies require enhancements with `bundleUrl`, `bundleName` and `bundleLocale`
         * in combination with `enhanceWith` which contains a list of `ResourceBundle.Configurations`. Terminologies
         * must be defined in a declarative way, with configurations and not with instances of `ResourceBundle`.
         */
        bundle?: ResourceBundle;
        /**
         * A locale in "BCP-47 language tag" notation specifying the locale in which to load the bundle; when not
         * given, the current session locale of UI5 is used (recommended)
         */
        bundleLocale?: string;
        /**
         * UI5 module name in dot notation referring to the base ".properties" file; this name is resolved to a
         * path just as for normal UI5 modules, to which ".properties" is then appended (e.g. a name like "myapp.i18n.myBundle"
         * can be given); relative module names are not supported
         */
        bundleName?: string;
        /**
         * URL pointing to the base ".properties" file of a bundle (".properties" file without any locale information,
         * e.g. "../../i18n/mybundle.properties"); relative URLs are evaluated relative to the document.baseURI
         */
        bundleUrl?: string;
        /**
         * The default binding mode to use; it can be `OneWay` or `OneTime` (only when synchronous loading is used);
         * the `TwoWay` mode is not supported
         */
        defaultBindingMode?: BindingMode | keyof typeof BindingMode;
        /**
         * A list of resource bundles or resource bundle configurations that enhance the texts from the main bundle;
         * intended for extensibility scenarios; see also the class documentation. ResourceBundles use the ResourceModel's
         * enhance mechanism and `ResourceBundle.Configurations` get passed to the underlying ResourceBundle (see
         * {@link module:sap/base/i18n/ResourceBundle.create}). Supported since 1.77.0.
         */
        enhanceWith?: ResourceBundle[] | Configuration[];
        /**
         * A fallback locale to be used after all locales derived from `bundleLocale` have been tried, but before
         * the 'raw' bundle is used. Can either be a BCP47 language tag or a JDK compatible locale string (e.g.
         * "en-GB", "en_GB" or "en").
         *
         * To prevent a generic fallback, use the empty string (`""`). E.g. by providing `fallbackLocale: ""` and
         * `supportedLocales: ["en"]`, only the bundle "en" is requested without any fallback. This parameter is
         * passed to the underlying ResourceBundle (see {@link module:sap/base/i18n/ResourceBundle.create}). Supported
         * since 1.77.0.
         */
        fallbackLocale?: string;
        /**
         * List of supported locales (aka 'language tags') to restrict the fallback chain. Each entry in the array
         * can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB", "en_GB" or "en").
         * An empty string (`""`) represents the 'raw' bundle.
         *
         * **Note:** The given language tags can use modern or legacy ISO639 language codes. Whatever language code
         * is used in the list of supported locales will also be used when requesting a file from the server. If
         * the `bundleLocale` contains a legacy language code like "sh" and the `supportedLocales` contains [...,"sr",...],
         * "sr" will be used in the URL. This mapping works in both directions. This parameter is passed to the
         * underlying ResourceBundle (see {@link module:sap/base/i18n/ResourceBundle.create}). Supported since 1.77.0.
         */
        supportedLocales?: string[];
        /**
         * An object, mapping a terminology identifier (e.g. "oil") to a `ResourceBundle.TerminologyConfiguration`.
         * A terminology is a resource bundle configuration for a specific use case (e.g. "oil"). It does neither
         * have a `fallbackLocale` nor can it be enhanced with `enhanceWith`. This parameter is passed to the underlying
         * ResourceBundle (see {@link module:sap/base/i18n/ResourceBundle.create}). This parameter is ignored when
         * `bundle` is set. Will cause an error if `enhanceWith` contains instances of `ResourceBundle`. Supported
         * since 1.77.0.
         */
        terminologies?: Record<string, TerminologyConfiguration>;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResourceModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.resource.ResourceModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Gets a property binding for the given path in the resource model. Only `sPath` from {@link sap.ui.model.Model#bindProperty}
     * is supported; other parameters are ignored.
     *
     * @returns The property binding for the given path
     */
    bindProperty(
      /**
       * The path pointing to the property that should be bound; in contrast to most other models, the binding
       * path for a `ResourceModel` must not start with a slash, it is absolute by default and there's no further
       * structure. Each key in the underlying resource bundle is a valid binding path.
       */
      sPath: string
    ): PropertyBinding;
    /**
     * @SINCE 1.16.1
     *
     * Enhances the resource model with a custom resource bundle.
     *
     * The custom bundle can define new texts for keys existing in the main bundle, texts for new keys, or both.
     * A resource model can be enhanced with multiple resource bundles by calling this method multiple times.
     * Each call appends to the list of enhancements, but no bundle can be removed from the list.
     *
     * When looking up a text for a key, the enhancements are processed in reverse order. Texts from the last
     * added resource bundle are preferred over texts from previously added bundles or texts from the main bundle.
     *
     * @returns A Promise resolving when the enhancement is finished or `null` if the `ResourceModel` is configured
     * to act synchronously
     */
    enhance(
      /**
       * Either an already loaded bundle instance, or a configuration object with parameters to load a new resource
       * bundle. When a configuration object is given, at least one of `bundleUrl` or `bundleName` must be set;
       * if both are set, `bundleName` wins
       */
      oData:
        | ResourceBundle
        | {
            /**
             * A locale in "BCP-47 language tag" notation specifying the locale in which to load the bundle; when not
             * given, the current session locale of UI5 is used (recommended)
             */
            bundleLocale?: string;
            /**
             * UI5 module name in dot notation, referring to the base ".properties" file; this name is resolved to a
             * path like the paths of normal UI5 modules, and ".properties" is then appended (e.g. a name like "myapp.i18n.myBundle"
             * can be given); relative module names are not supported
             */
            bundleName?: string;
            /**
             * URL pointing to the base ".properties" file of a bundle (".properties" file without any locale information,
             * e.g. "../../i18n/mybundle.properties"); relative URLs are evaluated relative to the document.baseURI
             */
            bundleUrl?: string;
          }
    ): Promise<any> | null;
    /**
     * Returns the value for the property with the given path.
     *
     * @returns The value of the property in the resource bundle or `null` if resource bundle is not available
     */
    getProperty(
      /**
       * The path to the property
       */
      sPath: string
    ): string | null;
    /**
     * Gets the resource bundle of this model.
     *
     * @returns The loaded resource bundle or a Promise resolving with it in asynchronous case
     */
    getResourceBundle(): ResourceBundle | Promise<ResourceBundle>;
  }
}

declare module "sap/ui/model/SelectionModel" {
  import EventProvider from "sap/ui/base/EventProvider";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This artefact is used by the table controls for handling selections. It is not associated with the model
   * layer of UI5.
   */
  export default class SelectionModel extends EventProvider {
    /**
     * Constructs an instance of an sap.ui.model.SelectionModel.
     */
    constructor(
      /**
       * `sap.ui.model.SelectionModel.SINGLE_SELECTION` or `sap.ui.model.SelectionModel.MULTI_SELECTION`
       */
      iSelectionMode: int
    );
    /**
     * SelectionMode: Multi Selection
     */
    static MULTI_SELECTION: int;

    /**
     * SelectionMode: Single Selection
     */
    static SINGLE_SELECTION: int;

    /**
     * Creates a new subclass of class sap.ui.model.SelectionModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectionModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.SelectionModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Changes the selection to be the union of the current selection and the range between `iFromIndex` and
     * `iToIndex` inclusive. If `iFromIndex` is smaller than `iToIndex`, both parameters are swapped.
     *
     * In `SINGLE_SELECTION` selection mode, this is equivalent to calling `setSelectionInterval`, and only
     * the second index is used.
     *
     * If this call results in a change to the current selection or lead selection, then a `SelectionChanged`
     * event is fired.
     *
     * @returns `this` to allow method chaining
     */
    addSelectionInterval(
      /**
       * one end of the interval.
       */
      iFromIndex: int,
      /**
       * other end of the interval
       */
      iToIndex: int
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.SelectionModel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.SelectionModel` itself.
     *
     * @returns `this` to allow method chaining
     */
    attachSelectionChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `SelectionModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.SelectionModel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.SelectionModel` itself.
     *
     * @returns `this` to allow method chaining
     */
    attachSelectionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `SelectionModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Change the selection to the empty set and clears the lead selection.
     *
     * If this call results in a change to the current selection or lead selection, then a `SelectionChanged`
     * event is fired.
     *
     * @returns `this` to allow method chaining
     */
    clearSelection(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.SelectionModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
     *
     * Expects following event parameters:
     * 	 - 'leadIndex' of type `int` Lead selection index.
     * 	 - 'rowIndices' of type `int[]` Other selected indices (if available)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectionChanged(
      /**
       * Parameters to pass along with the event.
       */
      oParameters: {
        /**
         * Lead selection index
         */
        leadIndex: int;
        /**
         * Other selected indices (if available)
         */
        rowIndices?: int[];
      }
    ): this;
    /**
     * Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval()
     * or removeSelectionInterval().
     *
     * @returns lead selected index
     */
    getLeadSelectedIndex(): int;
    /**
     * Returns the selected indices as array.
     *
     * @returns array of selected indices
     */
    getSelectedIndices(): int[];
    /**
     * Returns the current selection mode.
     *
     * @returns the current selection mode
     */
    getSelectionMode(): int;
    /**
     * Returns true if the specified index is selected.
     *
     * @returns true if the specified index is selected.
     */
    isSelectedIndex(iIndex: int): boolean;
    /**
     * Moves all selected indices starting at the position `iStartIndex` `iMove` items.
     *
     * This can be used if new items are inserted to the item set and you want to keep the selection. To handle
     * a deletion of items use `sliceSelectionInterval`.
     *
     * If this call results in a change to the current selection or lead selection, then a `SelectionChanged`
     * event is fired.
     *
     * @returns `this` to allow method chaining
     */
    moveSelectionInterval(
      /**
       * start at this position
       */
      iStartIndex: int,

      iMove: int
    ): this;
    /**
     * Changes the selection to be the set difference of the current selection and the indices between `iFromIndex`
     * and `iToIndex` inclusive. If `iFromIndex` is smaller than `iToIndex`, both parameters are swapped.
     *
     * If the range of removed selection indices includes the current lead selection, then the lead selection
     * will be unset (set to -1).
     *
     * If this call results in a change to the current selection or lead selection, then a `SelectionChanged`
     * event is fired.
     *
     * @returns `this` to allow method chaining
     */
    removeSelectionInterval(
      /**
       * one end of the interval.
       */
      iFromIndex: int,
      /**
       * other end of the interval
       */
      iToIndex: int
    ): this;
    /**
     * Selects all rows up to the `iToIndex`.
     *
     * If this call results in a change to the current selection, then a `SelectionChanged` event is fired.
     *
     * @returns `this` to allow method chaining
     */
    selectAll(
      /**
       * end of the interval
       */
      iToIndex: int
    ): this;
    /**
     * Changes the selection to be equal to the range `iFromIndex` and `iToIndex` inclusive. If `iFromIndex`
     * is smaller than `iToIndex`, both parameters are swapped.
     *
     * In `SINGLE_SELECTION` selection mode, only `iToIndex` is used.
     *
     * If this call results in a change to the current selection, then a `SelectionChanged` event is fired.
     *
     * @returns `this` to allow method chaining
     */
    setSelectionInterval(
      /**
       * one end of the interval.
       */
      iFromIndex: int,
      /**
       * other end of the interval
       */
      iToIndex: int
    ): this;
    /**
     * Sets the selection mode. The following list describes the accepted selection modes:
     * 	`sap.ui.model.SelectionModel.SINGLE_SELECTION` - Only one list index can be selected at a time. In this
     * mode, `setSelectionInterval` and `addSelectionInterval` are equivalent, both replacing the current selection
     * with the index represented by the second argument (the "lead"). `sap.ui.model.SelectionModel.MULTI_SELECTION`
     * - In this mode, there's no restriction on what can be selected.
     */
    setSelectionMode(
      /**
       * selection mode
       */
      iSelectionMode: int
    ): void;
    /**
     * Slices a the indices between the two indices from the selection. If `iFromIndex` is smaller than `iToIndex`,
     * both parameters are swapped.
     *
     * If the range of removed selection indices includes the current lead selection, then the lead selection
     * will be unset (set to -1).
     *
     * If this call results in a change to the current selection or lead selection, then a `SelectionChanged`
     * event is fired.
     *
     * @returns `this` to allow method chaining
     */
    sliceSelectionInterval(
      /**
       * one end of the interval.
       */
      iFromIndex: int,
      /**
       * other end of the interval
       */
      iToIndex: int
    ): this;
  }
}

declare module "sap/ui/model/SimpleType" {
  import Type from "sap/ui/model/Type";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * This is an abstract base class for simple types. A simple type can format a raw model value based on
   * the given format options, parse an external value based on the given format options and validate the
   * raw model value based on the given constraints. An implementation of a simple type needs to implement
   * {@link #formatValue}, {@link #parseValue} and {@link #validateValue}. If the raw value, which is the
   * value in model representation, isn't already a JavaScript primitive type, subclasses must override {@link
   * #getModelFormat}.
   */
  export default class SimpleType extends Type {
    /**
     * Constructor for a new SimpleType.
     */
    constructor(
      /**
       * Format options as defined by concrete subclasses
       */
      oFormatOptions?: object,
      /**
       * Constraints as defined by concrete subclasses
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.SimpleType with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SimpleType>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.SimpleType.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given raw value to an output value of the given target type. This happens according to the
     * format options if the target type is `string`. If `vValue` is not defined or `null`, `null` is returned.
     *
     * @returns The formatted output value or a `Promise` resolving with the formatted value
     */
    formatValue(
      /**
       * The value to be formatted
       */
      vValue: any,
      /**
       * The target type; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}
       */
      sTargetType: string
    ): any | Promise<any>;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns an object with `format` and `parse` methods. `format` converts the internal value which has a
     * JavaScript primitive type or is a built-in object such as Date which can be used by a control to the
     * raw value, and `parse` converts the raw value to the internal value.
     *
     * You may return an instance of {@link sap.ui.core.format.DateFormat DateFormat} or {@link sap.ui.core.format.NumberFormat
     * NumberFormat}.
     *
     * The default implementation of the `format` and `parse` methods simply returns the given parameter. Subclasses
     * of {@link sap.ui.model.SimpleType#constructor SimpleType} should override this method if the raw value
     * isn't already a JavaScript primitive type. The overwritten method must return an object which has the
     * `format` and `parse` methods implemented.
     *
     * Example:
     *  If the type is related to a JavaScript `Date` object, but the raw value isn't, this method should return
     * an instance of {@link sap.ui.core.format.DateFormat DateFormat}, which is able to convert between the
     * raw value and a JavaScript `Date` object.
     *
     * @returns A conversion object
     */
    getModelFormat(): object;
    /**
     * Parses an external value of the given source type to the corresponding value in model representation.
     *
     * @returns The raw value or a `Promise` resolving with the raw value
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: any,
      /**
       * The type of the given value; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}
       */
      sSourceType: string
    ): any | Promise<any>;
    /**
     * Validates whether a given raw value meets the defined constraints. This method does nothing if no constraints
     * are defined.
     *
     * @returns `undefined` or a `Promise` resolving with an undefined value
     */
    validateValue(
      /**
       * The value to be validated
       */
      vValue: any
    ): void | Promise<undefined>;
  }
}

declare module "sap/ui/model/Sorter" {
  import BaseObject from "sap/ui/base/Object";

  import Context from "sap/ui/model/Context";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Sorter for list bindings.
   *
   * Instances of this class define the sort order for a list binding.
   */
  export default class Sorter extends BaseObject {
    /**
     * Constructor for Sorter.
     */
    constructor(
      /**
       * the binding path used for sorting
       */
      sPath: string,
      /**
       * whether the sort order should be descending
       */
      bDescending?: boolean,
      /**
       * configure grouping of the content, can either be true to enable grouping based on the raw model property
       * value, or a function which calculates the group value out of the context (e.g. oContext.getProperty("date").getYear()
       * for year grouping). The control needs to implement the grouping behaviour for the aggregation which you
       * want to group. In case a function is provided it must either return a primitive type value as the group
       * key or an object containing a "key" property and additional properties needed for group visualization.
       * This object or the object with the primitive type return value as "key" property is passed to the `groupHeaderFactory`
       * function that has been specified to create the group header for the control aggregation; see {@link sap.ui.base.ManagedObject#bindAggregation}.
       * **Note:** Grouping via `vGroup=true` is only possible (and only makes sense) for the primary sort property.
       * A more complicated grouping is possible by providing a grouping function. The sort order needs to fit
       * to the grouping also in this case. See also {@link topic:ec79a5d5918f4f7f9cbc2150e66778cc Sorting, Grouping,
       * and Filtering for List Binding}.
       */
      vGroup?: boolean | Function,
      /**
       * A custom comparator function, which is used for client-side sorting instead of the default comparator
       * method. Information about parameters and expected return values of such a method can be found in the
       * {@link #.defaultComparator default comparator} documentation. **Note:** Custom comparator functions are
       * meant to be used on the client. Models that implement sorting in the backend usually don't support custom
       * comparator functions. Consult the documentation of the specific model implementation.
       */
      fnComparator?: Function
    );

    /**
     * Compares two values
     *
     * This is the default comparator function used for clientside sorting, if no custom comparator is given
     * in the constructor. It does compare just by using equal/less than/greater than with automatic type casting,
     * except for null values, which are last in ascending order, and string values where localeCompare is used.
     *
     * The comparator method returns -1, 0 or 1, depending on the order of the two items and is suitable to
     * be used as a comparator method for Array.sort.
     *
     * @returns -1, 0 or 1 depending on the compare result
     */
    static defaultComparator(
      /**
       * the first value to compare
       */
      a: any,
      /**
       * the second value to compare
       */
      b: any
    ): int;
    /**
     * Creates a new subclass of class sap.ui.model.Sorter with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Sorter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Sorter.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns a group object, at least containing a "key" property for group detection. May contain additional
     * properties as provided by a custom group function.
     *
     * @returns An object containing a key property and optional custom properties
     */
    getGroup(
      /**
       * the binding context
       */
      oContext: Context
    ): Record<string, any>;
    /**
     * Returns the group function of this Sorter. If grouping is not enabled on this Sorter, it will return
     * undefined, if no explicit group function has been defined the default group function is returned. The
     * returned function is bound to its Sorter, so it will group according to its own property path, even if
     * it is used in the context of another Sorter.
     *
     * @returns The group function
     */
    getGroupFunction(): Function;
  }
}

declare module "sap/ui/model/StaticBinding" {
  import PropertyBinding from "sap/ui/model/PropertyBinding";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * The `StaticBinding` allows to define static values within a {@link sap.ui.model.CompositeBinding}. It
   * behaves like a property binding but always returns the value that is stored in the binding itself. The
   * binding does not have a {@link sap.ui.model.Context}, a {@link sap.ui.model.Model} or a path.
   */
  export default class StaticBinding extends PropertyBinding {
    /**
     * Constructor for StaticBinding
     */
    constructor(
      /**
       * The static value of this binding
       */
      vValue: any
    );

    /**
     * Creates a new subclass of class sap.ui.model.StaticBinding with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StaticBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.StaticBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/TreeAutoExpandMode" {
  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Different modes for setting the auto expand mode on tree or analytical bindings.
   */
  enum TreeAutoExpandMode {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * If supported by a backend provider with analytical capabilities, the requests needed for an automatic
     * node expansion are bundled.
     */
    Bundled = "Bundled",
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Tree nodes will be expanded in sequence, level by level (Single requests are sent).
     */
    Sequential = "Sequential",
  }
  export default TreeAutoExpandMode;
}

declare module "sap/ui/model/TreeBinding" {
  import Binding from "sap/ui/model/Binding";

  import Model from "sap/ui/model/Model";

  import Filter from "sap/ui/model/Filter";

  import Sorter from "sap/ui/model/Sorter";

  import FilterType from "sap/ui/model/FilterType";

  import Metadata from "sap/ui/base/Metadata";

  import Context from "sap/ui/model/Context";

  /**
   * The TreeBinding is a specific binding for trees in the model, which can be used to populate Trees.
   */
  export default class TreeBinding extends Binding {
    /**
     * Constructor for TreeBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.ui.model.Model#bindTree Model#bindTree} on the corresponding
     * model instead.
     */
    constructor(
      /**
       * Model instance that this binding is created for and that it belongs to
       */
      oModel: Model,
      /**
       * Path pointing to the tree / array that should be bound
       */
      sPath: string,
      /**
       * Context object for this binding (optional)
       */
      oContext?: object,
      /**
       * Predefined filter or an array of filters (optional)
       */
      aFilters?: Filter | Filter[],
      /**
       * Additional model specific parameters (optional)
       */
      mParameters?: string,
      /**
       * Predefined sorter or an array of sorters (optional)
       */
      aSorters?: Sorter | Sorter[]
    );

    /**
     * Creates a new subclass of class sap.ui.model.TreeBinding with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TreeBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.TreeBinding.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @deprecated (since 1.11) - use the `change` event. It now contains a parameter `(reason : "filter")`
     * when a filter event is fired.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Attaches event handler `fnFunction` to the {@link #event:_filter _filter} event of this `sap.ui.model.TreeBinding`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.TreeBinding` itself.
     */
    attachFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with, defaults to this `TreeBinding` itself
       */
      oListener?: object
    ): void;
    /**
     * @deprecated (since 1.11) - use the `change` event.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Detaches event handler `fnFunction` from the {@link #event:_filter _filter} event of this `sap.ui.model.TreeBinding`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): void;
    /**
     * Filters the tree according to the filter definitions.
     */
    filter(
      /**
       * Single sap.ui.model.Filter object or an array of filter objects
       */
      aFilters: Filter | Filter[],
      /**
       * Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
       */
      sFilterType: FilterType | keyof typeof FilterType
    ): void;
    /**
     * Returns the number of child nodes of a specific context
     *
     * @returns the number of children
     */
    getChildCount(
      /**
       * the context element of the node
       */
      oContext: Object
    ): int;
    /**
     * @SINCE 1.108.0
     *
     * Returns the count of entries in the tree, or `undefined` if it is unknown. If the tree is filtered, the
     * count of all entries matching the filter conditions is returned. The entries required only for the tree
     * structure are not counted.
     *
     * **Note:** The default implementation returns `undefined` and has to be overwritten by subclasses.
     *
     * @returns The count of entries in the tree, or `undefined` if it is unknown, for example because the binding
     * is not resolved or because this feature is not supported.
     */
    getCount(): number | undefined;
    /**
     * Returns the current value of the bound target
     *
     * @returns the array of child contexts for the given node
     */
    getNodeContexts(
      /**
       * the context element of the node
       */
      oContext: Context,
      /**
       * the startIndex where to start the retrieval of contexts
       */
      iStartIndex: int,
      /**
       * determines how many contexts to retrieve beginning from the start index.
       */
      iLength: int
    ): Context[];
    /**
     * Returns the current value of the bound target
     *
     * @returns the array of child contexts for the root node
     */
    getRootContexts(
      /**
       * the startIndex where to start the retrieval of contexts
       */
      iStartIndex: int,
      /**
       * determines how many contexts to retrieve beginning from the start index.
       */
      iLength: int
    ): any[];
    /**
     * Returns if the node has child nodes
     *
     * @returns true if node has children
     */
    hasChildren(
      /**
       * the context element of the node
       */
      oContext: Object
    ): boolean;
    /**
     * Sorts the tree according to the sorter definitions.
     */
    sort(
      /**
       * Array of sap.ui.model.Sorter objects
       */
      aSorters: Sorter[]
    ): void;
  }
}

declare module "sap/ui/model/TreeBindingAdapter" {
  import Context from "sap/ui/model/Context";

  export default class TreeBindingAdapter {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
     * controls.
     */
    constructor();

    /**
     * @deprecated (since 1.52) - This method is marked as 'protected' which was meant to be overwritten by
     * its subclasses. It may be renamed or deleted and should only be called from this class or its subclasses.
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Calculate the request length based on the given information.
     *
     * @returns The calculated request length
     */
    _calculateRequestLength(
      /**
       * The maximum group size
       */
      iMaxGroupSize: number,
      /**
       * The information of the current section
       */
      oSection: object
    ): number;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.TreeBindingAdapter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.TreeBindingAdapter` itself.
     *
     * Event is fired if the selection of tree nodes is changed in any way.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectionChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `TreeBindingAdapter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.TreeBindingAdapter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.ui.model.TreeBindingAdapter` itself.
     *
     * Event is fired if the selection of tree nodes is changed in any way.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    attachSelectionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `TreeBindingAdapter` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.ui.model.TreeBindingAdapter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    detachSelectionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
     *
     * Expects following event parameters:
     * 	 - 'leadIndex' of type `int` Lead selection index.
     * 	 - 'rowIndices' of type `int[]` Other selected indices (if available)
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    fireSelectionChanged(
      /**
       * Parameters to pass along with the event.
       */
      oParameters: {
        /**
         * Lead selection index
         */
        leadIndex: int;
        /**
         * Other selected indices (if available)
         */
        rowIndices?: int[];
      }
    ): this;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Gets an array of contexts for the requested part of the tree.
     *
     * @returns The requested tree contexts
     */
    getContexts(
      /**
       * The index of the first requested context
       */
      iStartIndex?: number,
      /**
       * The maximum number of returned contexts; if not given the model's size limit is used; see {@link sap.ui.model.Model#setSizeLimit}
       */
      iLength?: number,
      /**
       * The maximum number of contexts to read to read additionally as buffer
       */
      iThreshold?: number
    ): Context[];
    /**
     * Returns the number of entries in the tree.
     *
     * @returns Returns the number of entries in the tree
     */
    getLength(): number;
  }
}

declare module "sap/ui/model/TreeBindingCompatibilityAdapter" {
  import TreeBinding from "sap/ui/model/TreeBinding";

  /**
   * @deprecated (since 1.96.0) - use {@link sap.ui.model.TreeBindingAdapter} instead
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   */
  export default class TreeBindingCompatibilityAdapter {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based
     * controls.
     *
     * This module is only for experimental and internal use!
     */
    constructor(
      /**
       * The binding to add ListBinding functionality to
       */
      oBinding: TreeBinding,
      /**
       * The tree or tree table control using the given binding; the control is used for selection handling
       */
      oControl: object
    );
  }
}

declare module "sap/ui/model/TreeBindingUtils" {
  interface TreeBindingUtils {
    /**
     * Merges together oNewSection into a set of other sections (aSections) The array/objects are not modified,
     * the function returns a new section array.
     *
     * @returns a new array containing all sections from aSections merged with oNewSection
     */
    mergeSections(
      /**
       * the sections into which oNewSection will be merged
       */
      aSections: object[],
      /**
       * the section which should be merged into aNewSections
       */
      oNewSection: object
    ): object[];
  }
  const TreeBindingUtils: TreeBindingUtils;
  export default TreeBindingUtils;
}

declare module "sap/ui/model/Type" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This is an abstract base class for type objects.
   */
  export default class Type extends BaseObject {
    /**
     * Constructor for a new Type.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.model.Type with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Type>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.Type.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Types don't have a facade and therefore return themselves as their interface.
     *
     * @returns `this` as there's no facade for types
     */
    getInterface(): this;
    /**
     * Returns the name of this type.
     *
     * @returns The name of this type
     */
    getName(): string;
    /**
     * Returns a simple string representation of this type. Mainly useful for tracing purposes.
     *
     * @returns A string description of this type
     */
    toString(): string;
  }
}

declare module "sap/ui/model/type/Boolean" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents boolean simple types.
   */
  export default class Boolean1 extends SimpleType {
    /**
     * Constructor for a Boolean type.
     */
    constructor(
      /**
       * Format options as defined in the interface of {@link sap.ui.model.SimpleType}; this type ignores them,
       * since it does not support any format options
       */
      oFormatOptions?: object,
      /**
       * Constraints as defined in the interface of {@link sap.ui.model.SimpleType}; this type ignores them, since
       * it does not support any constraints
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Boolean with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Boolean1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Boolean.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/Currency" {
  import CompositeType from "sap/ui/model/CompositeType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * This class represents the composite type `Currency`, which consists of the parts "amount" (of type `number`
   * or `string`) and "currency" (of type `string`). In case the amount is a `string`, it must be the JavaScript
   * representation of the corresponding number. If the `source` format option is given, the composite type
   * has only one part of type `string`, holding both amount and currency in the source format.
   */
  export default class Currency extends CompositeType {
    /**
     * Constructor for a `Currency` type.
     */
    constructor(
      /**
       * Format options; for a list of all available options, see {@link sap.ui.core.format.NumberFormat.getCurrencyInstance}.
       * If the format options `showMeasure` or since 1.89.0 `showNumber` are set to `false`, model messages for
       * the respective parts are not propagated to the control, provided the corresponding binding supports the
       * feature of ignoring model messages, see {@link sap.ui.model.Binding#supportsIgnoreMessages}, and the
       * corresponding binding parameter is not set manually.
       */
      oFormatOptions?: {
        /**
         * By default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
        /**
         * A set of format options as defined for {@link sap.ui.core.format.NumberFormat.getCurrencyInstance} which
         * describes the format of amount and currency in the model in case the model holds this in one property
         * of type `string`, e.g. as "EUR 22". If an empty object is given, grouping is disabled, the
         * decimal separator is a dot and the grouping separator is a comma.
         */
        source?: object;
      },
      /**
       * Constraints for the value part
       */
      oConstraints?: {
        /**
         * Smallest amount allowed excluding the minimum value itself
         */
        minimum?: number;
        /**
         * Largest amount allowed excluding the maximum value itself
         */
        maximum?: number;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Currency with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Currency>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Currency.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value; the values `undefined` or `null` or an amount `undefined` or `null`
     * are formatted to `null`
     */
    formatValue(
      /**
       * The array containing amount and currency code in case the `source` format option is not given; otherwise,
       * a string representation of the value which is parsed using the source format
       */
      vValue: any[] | string,
      /**
       * The target type; must be "string", or a type with "string" as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}
       */
      sTargetType: string
    ): string | null;
    /**
     * @SINCE 1.82.0
     *
     * Gets an array of indices that determine which parts of this type shall not propagate their model messages
     * to the attached control. Prerequisite is that the corresponding binding supports this feature, see {@link
     * sap.ui.model.Binding#supportsIgnoreMessages}. If the format option `showMeasure` is set to `false` and
     * the currency value is not shown in the control, the part for the currency code shall not propagate model
     * messages to the control. Analogously, since 1.89.0, if the format option `showNumber` is set to `false`,
     * the amount is not shown in the control and the part for the amount shall not propagate model messages
     * to the control.
     * See:
     * 	sap.ui.model.Binding#supportsIgnoreMessages
     *
     * @returns An array of indices that determine which parts of this type shall not propagate their model
     * messages to the attached control
     */
    getPartsIgnoringMessages(): number[];
    /**
     * Parses a string value.
     *
     * @returns If the `source` format option is not set, the method returns an array containing amount and
     * currency: the amount is a `string` if the format option `parseAsString` is set and a `number` otherwise,
     * the currency is always a `string`. If the `source` format option is set, the method returns a string
     * representation of amount and currency in the given source format.
     */
    parseValue(
      /**
       * The value to be parsed
       */
      sValue: string,
      /**
       * The source type (the expected type of `sValue`); must be "string", or a type with "string" as its {@link
       * sap.ui.base.DataType#getPrimitiveType primitive type}.
       */
      sSourceType: string,
      /**
       * Not used
       */
      aCurrentValues?: any[]
    ): any[] | string;
  }
}

declare module "sap/ui/model/type/Date" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents date simple types.
   */
  export default class Date1 extends SimpleType {
    /**
     * Constructor for a Date type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getDateInstance
       * DateFormat}.
       */
      oFormatOptions?: {
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert from
         * a model `string` to `Date` before converting the `Date` to `string` with the primary format object. Vice
         * versa, this 'source' format is also used to format an already parsed external value (e.g. user input)
         * into the string format that is expected by the data source. For a list of all available options, see
         * {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat}. In case an empty object is given, the
         * default is the ISO date notation (yyyy-MM-dd).
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        minimum?: Date | string;
        /**
         * Largest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        maximum?: Date | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Date with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Date1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Date.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Returns the output pattern.
     * See:
     * 	sap.ui.core.format.DateFormat.getDateInstance
     *
     * @returns The output pattern
     */
    getOutputPattern(): string;
  }
}

declare module "sap/ui/model/type/DateInterval" {
  import CompositeType from "sap/ui/model/CompositeType";

  import UI5Date from "sap/ui/core/date/UI5Date";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * This class represents the date interval composite type.
   */
  export default class DateInterval extends CompositeType {
    /**
     * Constructor for a date interval type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.DateFormat.getDateInstance}
       */
      oFormatOptions?: {
        /**
         * This format option cannot be overwritten and is always `true`
         */
        interval?: boolean;
        /**
         * Whether the end value of the interval can be omitted
         */
        singleIntervalValue?: boolean;
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert both
         * interval parts from a model `string` to `Date` before converting both of the `Date`(s) to `string` with
         * the primary format object. Vice versa, this 'source' format is also used to format the already parsed
         * external value (e.g. user input) into the string format that is expected by the data source. For a list
         * of all available options, see {@link sap.ui.core.format.DateFormat.getDateInstance}. If an empty object
         * is given, the default is the ISO date notation (yyyy-MM-dd).
         */
        source?: {
          /**
           * A data pattern in LDML format; additionally, `"timestamp"` is supported, which means that the source
           * values are timestamps in milliseconds based on the UNIX epoch.
           */
          pattern?: string;
        };
        /**
         * Whether the date is formatted and parsed as UTC instead of the configured time zone
         */
        UTC?: boolean;
      },
      /**
       * Value constraints; {@link #validateValue validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type; values for constraints must use the same type as configured via
         * `oFormatOptions.source`. Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances
         */
        minimum?: Date | UI5Date | string;
        /**
         * Largest value allowed for this type; values for constraints must use the same type as configured via
         * `oFormatOptions.source`. Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances
         */
        maximum?: Date | UI5Date | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.DateInterval with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateInterval>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.DateInterval.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given array containing the start and the end date of the interval to a string. If a source
     * format has been defined, an array with string values as input is also accepted. These strings are parsed
     * into an array of `Date`s using the source format.
     *
     * @returns The formatted date interval, or an empty string if the start date is falsy or if the end date
     * is falsy and `singleIntervalValue` is not set to `false`
     */
    formatValue(
      /**
       * The start and the end date of the interval. It contains:
       * 	 - Two `Date` or `module:sap/ui/core/date/UI5Date` objects, or
       * 	 - Two strings as formatted start and end dates based on the `source` format option, or
       * 	 - Two numbers, representing the milliseconds of the timestamps based on the UNIX epoch if the `source`
       * 			format option is used and `source.pattern` is `"timestamp"`.  If the `singleIntervalValue` format
       * 			option is used, either an array with only one entry or an array with two entries, the second of which
       * 			is `null`, are allowed.
       */
      aValues: Array<Date | UI5Date | int | string | null>,
      /**
       * The target type; may be "any" or "string", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType
       * primitive type}; see {@link sap.ui.model.odata.type} for more information.
       */
      sTargetType: string
    ): string;
    /**
     * Parses the given value to an array of two values representing the start date and the end date of the
     * interval, where the time part of the start date is 0 and the time part of end date is the end of day
     * (23:59:59.999). If the `singleIntervalValue` format option is used, the second entry is `null` if no
     * end date is given.
     *
     * @returns The start and the end date of the interval. The resulting values in the array are:
     * 	 - Two `Date` or `module:sap/ui/core/date/UI5Date` objects, or
     * 	 - Two strings as formatted start and end dates based on the `source` format option, or
     * 	 - Two numbers, representing the milliseconds of the timestamps based on the UNIX epoch if the `source`
     * 			format option is used and `source.pattern` is `"timestamp"`.
     */
    parseValue(
      /**
       * The value to be parsed; the empty string is parsed to `[null, null]`
       */
      sValue: string,
      /**
       * The source type (the expected type of `sValue`); it must be either "string" or a type with "string" as
       * its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type}
       * for more information.
       */
      sSourceType: string
    ): Array<Date | UI5Date | int | string | null>;
    /**
     * Validates whether the given date interval values are valid and meet the given constraints.
     */
    validateValue(
      /**
       * The start and the end date of the interval to be validated as retrieved by {@link #parseValue}
       */
      aValues: Array<Date | UI5Date | int | string | null>
    ): void;
  }
}

declare module "sap/ui/model/type/DateTime" {
  import Date1 from "sap/ui/model/type/Date";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents datetime simple types.
   */
  export default class DateTime extends Date1 {
    /**
     * Constructor for a DateTime type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getDateTimeInstance
       * DateFormat}.
       */
      oFormatOptions?: {
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert from
         * a model `string` to `Date` before converting the `Date` to `string` with the primary format object. Vice
         * versa, this 'source' format is also used to format an already parsed external value (e.g. user input)
         * into the string format that is expected by the data source. For a list of all available options, see
         * {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat}.
         */
        source?: object;
      },
      /**
       * Value constraints. Supports the same kind of constraints as its base type Date, but note the different
       * format options (Date vs. DateTime).
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.DateTime with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTime>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.DateTime.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/DateTimeInterval" {
  import DateInterval from "sap/ui/model/type/DateInterval";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents the DateTime interval composite type.
   */
  export default class DateTimeInterval extends DateInterval {
    /**
     * Constructor for a DateTime interval type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getDateTimeInstance
       * DateFormat}.
       */
      oFormatOptions?: {
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert both
         * of the interval parts from a model `string` to `Date` before converting both of the `Date`(s) to `string`
         * with the primary format object. Vice versa, this 'source' format is also used to format the already parsed
         * external value (e.g. user input) into the string format that is expected by the data source. For a list
         * of all available options, see {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat}.
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        minimum?: Date | string;
        /**
         * Largest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        maximum?: Date | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.DateTimeInterval with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeInterval>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.DateTimeInterval.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/FileSize" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents file size simple types.
   */
  export default class FileSize extends SimpleType {
    /**
     * Constructor for a FileSize type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.FileSizeFormat.getInstance}
       */
      oFormatOptions?: {
        /**
         * additional set of options used to create a second FileSizeFormat object for conversions between string
         * values in the data source (e.g. model) and a numeric byte representation. This second format object is
         * used to convert from a model string to numeric bytes before converting to string with the primary format
         * object. Vice versa, this 'source' format is also used to format an already parsed external value (e.g.
         * user input) into the string format expected by the data source. Supports the same set of options as {@link
         * sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}.
         */
        source?: object;
      },
      /**
       * value constraints.
       */
      oConstraints?: {
        /**
         * smallest value allowed for this type
         */
        minimum?: float;
        /**
         * largest value allowed for this type
         */
        maximum?: float;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.FileSize with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FileSize>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.FileSize.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/Float" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents float simple types.
   */
  export default class Float extends SimpleType {
    /**
     * Constructor for a Float type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getFloatInstance}
       */
      oFormatOptions?: {
        /**
         * By default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
        /**
         * Additional set of format options to be used if the property in the model is not of type string and needs
         * formatting as well. If an empty object is given, the grouping is disabled and a dot is used as decimal
         * separator.
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type
         */
        minimum?: float;
        /**
         * Largest value allowed for this type
         */
        maximum?: float;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Float with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Float>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Float.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/Integer" {
  import SimpleType from "sap/ui/model/SimpleType";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents integer simple types.
   */
  export default class Integer extends SimpleType {
    /**
     * Constructor for an Integer type.
     */
    constructor(
      /**
       * Format options as defined in {@link sap.ui.core.format.NumberFormat.getIntegerInstance}
       */
      oFormatOptions?: {
        /**
         * Additional set of format options to be used if the property in the model is not of type string and needs
         * formatting as well. If an empty object is given, the grouping is disabled and a dot is used as decimal
         * separator.
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type
         */
        minimum?: int;
        /**
         * Largest value allowed for this type
         */
        maximum?: int;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Integer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Integer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Integer.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/String" {
  import SimpleType from "sap/ui/model/SimpleType";

  import FormatException from "sap/ui/model/FormatException";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  import ValidateException from "sap/ui/model/ValidateException";

  /**
   * This class represents the string simple type.
   */
  export default class String1 extends SimpleType {
    /**
     * Constructor for a `String` type.
     */
    constructor(
      /**
       * Format options; this type ignores them, since it does not support any format options
       */
      oFormatOptions?: object,
      /**
       * Constraints; {@link #validateValue} throws an error if any constraint is violated
       */
      oConstraints?: {
        /**
         * The maximal allowed length of the string; unlimited if not defined
         */
        maxLength?: int;
        /**
         * The minimal allowed length of the string
         */
        minLength?: int;
        /**
         * A prefix that any valid value must start with
         */
        startsWith?: string;
        /**
         * A prefix that any valid value must start with, ignoring case
         */
        startsWithIgnoreCase?: string;
        /**
         * A suffix that any valid value must end with
         */
        endsWith?: string;
        /**
         * A suffix that any valid value must end with, ignoring case
         */
        endsWithIgnoreCase?: string;
        /**
         * An infix that must be contained in any valid value
         */
        contains?: string;
        /**
         * The only value that is allowed
         */
        equals?: string;
        /**
         * A regular expression, or a string defining a regular expression, that the value must match
         */
        search?: RegExp | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.String with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, String1>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.String.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Formats the given value to the given target type.
     *
     * @returns The formatted output value in the target type; `undefined` and `null` are always formatted to
     * `null`
     */
    formatValue(
      /**
       * The value to be formatted
       */
      sValue: string,
      /**
       * The target type; may be "any", "boolean", "float", "int" or "string", or a type with "any", "boolean",
       * "float", "int" or "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}
       */
      sTargetType: string
    ): string | number | boolean | null;
    /**
     * Parses the given value, which is expected to be of the given type, to a string.
     *
     * @returns The parsed value
     */
    parseValue(
      /**
       * The value to be parsed
       */
      vValue: string | number | boolean,
      /**
       * The source type (the expected type of `vValue`); may be "boolean", "float", "int" or "string", or a type
       * with "boolean", "float", "int" or "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive
       * type}
       */
      sSourceType: string
    ): string;
    /**
     * Validates whether the given value in model representation is valid and meets the defined constraints,
     * see {@link #constructor}.
     */
    validateValue(
      /**
       * The value to be validated; `null` is treated like an empty string
       */
      sValue: string
    ): void;
  }
}

declare module "sap/ui/model/type/Time" {
  import Date1 from "sap/ui/model/type/Date";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents time simple types.
   */
  export default class Time extends Date1 {
    /**
     * Constructor for a Time type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getTimeInstance
       * DateFormat}.
       */
      oFormatOptions?: {
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert from
         * a model `string` to `Date` before converting the `Date` to `string` with the primary format object. Vice
         * versa, this 'source' format is also used to format an already parsed external value (e.g. user input)
         * into the string format that is expected by the data source. For a list of all available options, see
         * {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat}. In case an empty object is given, the
         * default is the ISO date notation (yyyy-MM-dd).
         */
        source?: object;
      },
      /**
       * Value constraints. Supports the same kind of constraints as its base type Date, but note the different
       * format options (Date vs. Time).
       */
      oConstraints?: object
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Time with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Time>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Time.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/TimeInterval" {
  import DateInterval from "sap/ui/model/type/DateInterval";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * This class represents the Time interval composite type.
   */
  export default class TimeInterval extends DateInterval {
    /**
     * Constructor for a Time interval type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat.getTimeInstance
       * DateFormat}.
       */
      oFormatOptions?: {
        /**
         * Additional set of options used to create a second `DateFormat` object for conversions between string
         * values in the data source (e.g. model) and `Date`. This second format object is used to convert both
         * of the interval parts from a model `string` to `Date` before converting both of the `Date`(s) to `string`
         * with the primary format object. Vice versa, this 'source' format is also used to format the already parsed
         * external value (e.g. user input) into the string format that is expected by the data source. For a list
         * of all available options, see {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat}.
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        minimum?: Date | string;
        /**
         * Largest value allowed for this type. Values for constraints must use the same type as configured via
         * `oFormatOptions.source`.
         */
        maximum?: Date | string;
      }
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.TimeInterval with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimeInterval>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.TimeInterval.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/model/type/Unit" {
  import CompositeType from "sap/ui/model/CompositeType";

  import Metadata from "sap/ui/base/Metadata";

  import ParseException from "sap/ui/model/ParseException";

  /**
   * This class represents the Unit composite type.
   */
  export default class Unit extends CompositeType {
    /**
     * Constructor for a Unit type.
     */
    constructor(
      /**
       * Formatting options. For a list of all available options, see {@link sap.ui.core.format.NumberFormat.getUnitInstance
       * NumberFormat}. If the format options `showMeasure` or `showNumber` are set to `false`, model messages
       * for the respective parts are not propagated to the control, provided the corresponding binding supports
       * the feature of ignoring model messages, see {@link sap.ui.model.Binding#supportsIgnoreMessages}, and
       * the corresponding binding parameter is not set manually.
       */
      oFormatOptions?: {
        /**
         * By default decimals are preserved, unless `oFormatOptions.style` is given as "short" or "long"; since
         * 1.89.0
         */
        preserveDecimals?: boolean;
        /**
         * Additional set of format options to be used if the property in the model is not of type `string` and
         * needs formatting as well. If an empty object is given, the grouping is disabled and a dot is used as
         * decimal separator.
         */
        source?: object;
      },
      /**
       * Value constraints
       */
      oConstraints?: {
        /**
         * Smallest value allowed for this type
         */
        minimum?: float;
        /**
         * Largest value allowed for this type
         */
        maximum?: float;
        /**
         * Largest number of decimals allowed for this type
         */
        decimals?: float;
      },
      /**
       * keys for dynamic format options which are used to map additional binding values, e.g. `["decimals"]`
       */
      aDynamicFormatOptionNames?: any[]
    );

    /**
     * Creates a new subclass of class sap.ui.model.type.Unit with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Unit>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.type.Unit.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Format the given array containing measure and unit code to an output value of type string. Other internal
     * types than 'string' are not supported by the Unit type. If a source format has been defined for this
     * type, the formatValue does also accept a string value as input, which will be parsed into an array using
     * the source format. If vValues is not defined or null, null will be returned.
     *
     * @returns the formatted output value
     */
    formatValue(
      /**
       * the array of values or string value to be formatted. If an array is given, index 0 is the number value,
       * and index 1 is the Unit code (CLDR or custom). Indices 2+ are the bound values for the dynamic format
       * options.
       */
      vValue: any[] | string,
      /**
       * the target type
       */
      sInternalType: string
    ): any;
    /**
     * @SINCE 1.89.0
     *
     * Gets an array of indices that determine which parts of this type shall not propagate their model messages
     * to the attached control. Prerequisite is that the corresponding binding supports this feature, see {@link
     * sap.ui.model.Binding#supportsIgnoreMessages}. If the format option `showMeasure` is set to `false` and
     * the unit value is not shown in the control, the part for the unit code shall not propagate model messages
     * to the control. Analogously, if the format option `showNumber` is set to `false`, the measure is not
     * shown in the control and the part for the measure shall not propagate model messages to the control.
     * See:
     * 	sap.ui.model.Binding#supportsIgnoreMessages
     *
     * @returns An array of indices that determine which parts of this type shall not propagate their model
     * messages to the attached control
     */
    getPartsIgnoringMessages(): number[];
    /**
     * Parse a string value to an array containing measure and unit. Parsing of other internal types than 'string'
     * is not supported by the Unit type. In case a source format has been defined, after parsing the Unit is
     * formatted using the source format and a string value is returned instead.
     *
     * @returns the parse result array
     */
    parseValue(
      /**
       * the value to be parsed
       */
      vValue: any,
      /**
       * the source type
       */
      sInternalType: string,
      /**
       * Not used
       */
      aCurrentValues?: any[]
    ): any[] | string;
  }
}

declare module "sap/ui/model/ValidateException" {
  /**
   * Instances of this exception are thrown when constraints of a type are violated.
   */
  export default class ValidateException {
    /**
     * Creates a new ValidateException.
     * See:
     * 	sap.ui.model.SimpleType#validateValue
     */
    constructor(
      /**
       * A message explaining why the validation failed; this message is language dependent as it may be displayed
       * on the UI
       */
      message: string,
      /**
       * Names of the constraints that are violated; the names should be the same as documented in the type's
       * constructor
       */
      violatedConstraints?: string[]
    );
  }
}

declare module "sap/ui/model/xml/XMLModel" {
  import ClientModel from "sap/ui/model/ClientModel";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Model implementation for the XML format.
   *
   * This model is not prepared to be inherited from.
   */
  export default class XMLModel extends ClientModel {
    /**
     * Constructor for a new XMLModel.
     */
    constructor(
      /**
       * Either the URL where to load the XML from or an XML document
       */
      oData: XMLDocument | string
    );

    /**
     * Creates a new subclass of class sap.ui.model.xml.XMLModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, XMLModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.model.xml.XMLModel.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Returns the object for the given path and context.
     *
     * @returns The object
     */
    getObject(
      /**
       * The path to the object
       */
      sPath: string,
      /**
       * The context which will be used to retrieve the object
       */
      oContext?: object
    ): object;
    /**
     * Returns the value for the property with the given `sPropertyName`.
     *
     * @returns The value of the property
     */
    getProperty(
      /**
       * The path to the property
       */
      sPath: string,
      /**
       * The context which will be used to retrieve the property
       */
      oContext?: object
    ): string;
    /**
     * Serializes the current XML data of the model into a string.
     *
     * @returns The XML document serialized as string
     */
    getXML(): string;
    /**
     * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the
     * model. Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin
     * policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.
     */
    loadData(
      /**
       * A string containing the URL to which the request is sent
       */
      sURL: string,
      /**
       * A map of parameters or a single parameter string that is sent to the server with the request
       */
      oParameters?: object | string,
      /**
       * **Deprecated as of Version 1.107**; always use asynchronous loading for performance reasons. By default,
       * all requests are sent asynchronously. Synchronous requests may temporarily lock the browser, disabling
       * any actions while the request is active. Cross-domain requests do not support synchronous operations.
       */
      bAsync?: boolean,
      /**
       * HTTP method of request
       */
      sType?: string,
      /**
       * **Deprecated as of Version 1.107**; always use the cache headers from the back-end system for performance
       * reasons. Disables caching if set to `false`.
       */
      bCache?: string,
      /**
       * An object of additional header key/value pairs to send along with the request
       */
      mHeaders?: object
    ): void;
    /**
     * Sets the provided XML encoded data object to the model
     */
    setData(
      /**
       * the data to set to the model
       */
      oData: object
    ): void;
    /**
     * Sets an XML namespace to use in the binding path
     */
    setNameSpace(
      /**
       * The namespace URI
       */
      sNameSpace: string,
      /**
       * The prefix for the namespace
       */
      sPrefix?: string
    ): void;
    /**
     * Sets a new value for the given property `sPropertyName` in the model. If the model value changed all
     * interested parties are informed.
     *
     * @returns Whether the value was set correctly
     */
    setProperty(
      /**
       * Path of the property to set
       */
      sPath: string,
      /**
       * Value to set the property to
       */
      oValue: any,
      /**
       * The context which will be used to set the property
       */
      oContext?: object,
      /**
       * Whether to update other bindings dependent on this property asynchronously
       */
      bAsyncUpdate?: boolean
    ): boolean;
    /**
     * Sets the specified XML formatted string text to the model
     */
    setXML(
      /**
       * the XML data as string
       */
      sXMLText: string
    ): void;
  }
}

declare module "sap/ui/model/xml/XMLTreeBinding" {
  import ClientTreeBinding from "sap/ui/model/ClientTreeBinding";

  import XMLModel from "sap/ui/model/xml/XMLModel";

  import Context from "sap/ui/model/Context";

  /**
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Tree binding implementation for XML format
   */
  export default class XMLTreeBinding extends ClientTreeBinding {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor(
      oModel: XMLModel,
      /**
       * pointing to the tree or array that should be bound
       */
      Path: string,
      /**
       * Context object for this binding
       */
      oContext?: object,
      /**
       * Predefined filters contained in an array
       */
      aFilters?: any[],
      /**
       * Additional model-specific parameters
       */
      mParameters?: object
    );
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor(
      /**
       * pointing to the tree or array that should be bound
       */
      Path: string,
      /**
       * Context object for this binding
       */
      oContext?: object,
      /**
       * Predefined filters contained in an array
       */
      aFilters?: any[],
      /**
       * Additional model-specific parameters
       */
      mParameters?: object
    );

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Return node contexts for the tree
     *
     * @returns the contexts array
     */
    getNodeContexts(
      /**
       * to use for retrieving the node contexts
       */
      oContext: Context,
      /**
       * the startIndex where to start the retrieval of contexts
       */
      iStartIndex: int,
      /**
       * determines how many contexts to retrieve beginning from the start index.
       */
      iLength: int
    ): Context[];
  }
}

declare module "sap/ui/test/actions/Action" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Control from "sap/ui/core/Control";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.34
   *
   * Actions for Opa5 - needs to implement an executeOn function that should simulate a user interaction on
   * a control
   */
  export default class Action extends ManagedObject {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.actions.Action with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Action>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.Action.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter Should be
     * overwritten by subclasses
     */
    executeOn(
      /**
       * the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on
       */
      element: Control
    ): void;
    /**
     * @SINCE 1.38
     *
     * Gets current value of property {@link #getIdSuffix idSuffix}.
     *
     * Use this only if the target property or the default of the action does not work for your control. The
     * id suffix of the DOM Element the press action will be executed on. For most of the controls you do not
     * have to specify this, since the Control Adapters will find the correct DOM Element. But some controls
     * have multiple DOM elements that could be target of your Action. Then you should set this property. For
     * a detailed documentation of the suffix see {@link sap.ui.core.Element#$}
     *
     * @returns Value of property `idSuffix`
     */
    getIdSuffix(): string;
    /**
     * @SINCE 1.38
     *
     * Sets a new value for property {@link #getIdSuffix idSuffix}.
     *
     * Use this only if the target property or the default of the action does not work for your control. The
     * id suffix of the DOM Element the press action will be executed on. For most of the controls you do not
     * have to specify this, since the Control Adapters will find the correct DOM Element. But some controls
     * have multiple DOM elements that could be target of your Action. Then you should set this property. For
     * a detailed documentation of the suffix see {@link sap.ui.core.Element#$}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setIdSuffix(
      /**
       * New value for property `idSuffix`
       */
      sIdSuffix: string
    ): this;
  }

  export interface $ActionSettings extends $ManagedObjectSettings {
    /**
     * @SINCE 1.38
     *
     * Use this only if the target property or the default of the action does not work for your control. The
     * id suffix of the DOM Element the press action will be executed on. For most of the controls you do not
     * have to specify this, since the Control Adapters will find the correct DOM Element. But some controls
     * have multiple DOM elements that could be target of your Action. Then you should set this property. For
     * a detailed documentation of the suffix see {@link sap.ui.core.Element#$}
     */
    idSuffix?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/test/actions/Drag" {
  import {
    default as Action,
    $ActionSettings,
  } from "sap/ui/test/actions/Action";

  import Control from "sap/ui/core/Control";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.76
   *
   * The `Drag` action is used to simulate a drag interaction with a control. The control should be draggable,
   * as defined by its dnd aggregation configuration. The drop location will be defined by a consequtive {@link
   * sap.ui.test.actions.Drop} action.
   *
   * The `Drag` action targets the DOM focus reference of the control.
   */
  export default class Drag extends Action {
    constructor(
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $DragSettings
    );

    constructor(
      /**
       * Optional ID for the new instance; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $DragSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.actions.Drag with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Drag>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.Drag.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Starts a drag event sequence for this control. To finish the drag, and drop the control on a specified
     * target, trigger a {@link sap.ui.test.actions.Drop} action on the target. Logs an error if control is
     * not visible (i.e. has no DOM representation)
     */
    executeOn(
      /**
       * the control on which the drag events are triggered
       */
      oControl: Control
    ): void;
  }

  export interface $DragSettings extends $ActionSettings {}
}

declare module "sap/ui/test/actions/Drop" {
  import {
    default as Action,
    $ActionSettings,
  } from "sap/ui/test/actions/Action";

  import Control from "sap/ui/core/Control";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.76
   *
   * The `Drop` action is used to simulate drop on a control. The control should be droppable, as defined
   * by its dnd aggregation configuration. The dropped control should be defined in a preceding {@link sap.ui.test.actions.Drag}
   * action.
   *
   * The `Drop` action targets a special DOM element representing the control. This DOM element can be customized.
   *
   * For most most controls, the target will be the DOM focus reference. You can choose a different DOM element
   * by specifying its ID suffix. You can do this by directly passing the ID suffix to the Drop constructor,
   * or by defining a control adapter function. You can also set the traget to be the root DOM element of
   * a given aggregation, by specifying the aggregation name in the Drop constructor.
   */
  export default class Drop extends Action {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $DropSettings
    );
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new instance; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $DropSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.actions.Drop with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Drop>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.Drop.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Starts a drop event sequence for this control, such that a predefined source will be dropped on the control.
     * To start a drag sequence ad define the dragged source, trigger a {@link sap.ui.test.actions.Drag} action
     * on the source. Logs an error if control is not visible (i.e. has no DOM representation)
     */
    executeOn(
      /**
       * the control on which the drop events are triggered
       */
      oControl: Control
    ): void;
    /**
     * Gets current value of property {@link #getAfter after}.
     *
     * Set `after` to true, to drop the source immediately before the target element.
     *
     * @returns Value of property `after`
     */
    getAfter(): boolean;
    /**
     * Gets current value of property {@link #getAggregationName aggregationName}.
     *
     * name of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls,
     * where this root DOM element is droppable.
     *
     * @returns Value of property `aggregationName`
     */
    getAggregationName(): string;
    /**
     * Gets current value of property {@link #getBefore before}.
     *
     * specify a position for the drop event, relative to the position of the control's representative DOM element.
     * This makes sense only for the case when dropping right on top of the DOM element makes no sense, and
     * instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position
     * is "center", meaning the drop will be directly on the element. Set `before` to true, to drop the source
     * immediately before the target element.
     *
     * @returns Value of property `before`
     */
    getBefore(): boolean;
    /**
     * Sets a new value for property {@link #getAfter after}.
     *
     * Set `after` to true, to drop the source immediately before the target element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAfter(
      /**
       * New value for property `after`
       */
      bAfter: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAggregationName aggregationName}.
     *
     * name of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls,
     * where this root DOM element is droppable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAggregationName(
      /**
       * New value for property `aggregationName`
       */
      sAggregationName: string
    ): this;
    /**
     * Sets a new value for property {@link #getBefore before}.
     *
     * specify a position for the drop event, relative to the position of the control's representative DOM element.
     * This makes sense only for the case when dropping right on top of the DOM element makes no sense, and
     * instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position
     * is "center", meaning the drop will be directly on the element. Set `before` to true, to drop the source
     * immediately before the target element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setBefore(
      /**
       * New value for property `before`
       */
      bBefore: boolean
    ): this;
  }

  export interface $DropSettings extends $ActionSettings {
    /**
     * name of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls,
     * where this root DOM element is droppable.
     */
    aggregationName?: string | PropertyBindingInfo;

    /**
     * specify a position for the drop event, relative to the position of the control's representative DOM element.
     * This makes sense only for the case when dropping right on top of the DOM element makes no sense, and
     * instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position
     * is "center", meaning the drop will be directly on the element. Set `before` to true, to drop the source
     * immediately before the target element.
     */
    before?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * Set `after` to true, to drop the source immediately before the target element.
     */
    after?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/actions/EnterText" {
  import {
    default as Action,
    $ActionSettings,
  } from "sap/ui/test/actions/Action";

  import Control from "sap/ui/core/Control";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * The `EnterText` action is used to simulate a user entering texts to inputs. `EnterText` will be executed
   * on a control's focus dom ref. Supported controls are (for other controls this action still might work):
   *
   * 	 - `sap.m.Input`
   * 	 - `sap.m.SearchField`
   * 	 - `sap.m.TextArea`
   */
  export default class EnterText extends Action {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $EnterTextSettings
    );
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new instance; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $EnterTextSettings
    );
    /**
     * @SINCE 1.70
     *
     * A map of ID suffixes for controls that require a special DOM reference for `EnterText` interaction.
     *
     * You can specify an ID suffix for specific controls in this map. The enter text action will be triggered
     * on the DOM element with the specified suffix.
     *
     * Here is a sublist of supported controls and their `EnterText` control adapter:
     * 	 - sap.m.StepInput - internal Input
     */
    static controlAdapters: Record<string, string | ((p1: Control) => string)>;

    /**
     * Creates a new subclass of class sap.ui.test.actions.EnterText with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EnterText>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.EnterText.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Sets focus on given control and triggers Multiple keyboard events on it, one event for every character
     * in the text. Logs an error if control has no focusable dom ref or is not visible.
     */
    executeOn(
      /**
       * the control on which the text event should be entered in.
       */
      oControl: Control
    ): void;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getClearTextFirst clearTextFirst}.
     *
     * If it is set to `false`, the current text of the control will be preserved. By default, the current text
     * of the control will be cleared. When the text is going to be cleared, a delete character event will be
     * fired and then the value of the input is emptied. This will trigger a `liveChange` event on the input
     * with an empty value.
     *
     * Default value is `true`.
     *
     * @returns Value of property `clearTextFirst`
     */
    getClearTextFirst(): boolean;
    /**
     * Gets current value of property {@link #getKeepFocus keepFocus}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `keepFocus`
     */
    getKeepFocus(): boolean;
    /**
     * Gets current value of property {@link #getPressEnterKey pressEnterKey}.
     *
     * Default value is `false`.
     *
     * @returns Value of property `pressEnterKey`
     */
    getPressEnterKey(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The Text that is going to be typed to the control. If you are entering an empty string, the value will
     * be cleared.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getClearTextFirst clearTextFirst}.
     *
     * If it is set to `false`, the current text of the control will be preserved. By default, the current text
     * of the control will be cleared. When the text is going to be cleared, a delete character event will be
     * fired and then the value of the input is emptied. This will trigger a `liveChange` event on the input
     * with an empty value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setClearTextFirst(
      /**
       * New value for property `clearTextFirst`
       */
      bClearTextFirst?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKeepFocus keepFocus}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKeepFocus(
      /**
       * New value for property `keepFocus`
       */
      bKeepFocus?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPressEnterKey pressEnterKey}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPressEnterKey(
      /**
       * New value for property `pressEnterKey`
       */
      bPressEnterKey?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The Text that is going to be typed to the control. If you are entering an empty string, the value will
     * be cleared.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText: string
    ): this;
  }

  export interface $EnterTextSettings extends $ActionSettings {
    /**
     * The Text that is going to be typed to the control. If you are entering an empty string, the value will
     * be cleared.
     */
    text?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * If it is set to `false`, the current text of the control will be preserved. By default, the current text
     * of the control will be cleared. When the text is going to be cleared, a delete character event will be
     * fired and then the value of the input is emptied. This will trigger a `liveChange` event on the input
     * with an empty value.
     */
    clearTextFirst?: boolean | PropertyBindingInfo | `{${string}}`;

    keepFocus?: boolean | PropertyBindingInfo | `{${string}}`;

    pressEnterKey?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/actions/Press" {
  import {
    default as Action,
    $ActionSettings,
  } from "sap/ui/test/actions/Action";

  import Control from "sap/ui/core/Control";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * The `Press` action is used to simulate a press interaction with a control. Most controls are supported,
   * for example buttons, links, list items, tables, filters, and form controls.
   *
   * The `Press` action targets a special DOM element representing the control. This DOM element can be customized.
   *
   * For most most controls (even custom ones), the DOM focus reference is an appropriate choice. You can
   * choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID
   * suffix to the Press constructor, or by defining a control adapter.
   *
   * There are some basic controls for which OPA5 has defined `Press` control adapters. For more information,
   * see `controlAdapters` at {@link sap.ui.test.actions.Press}.
   */
  export default class Press extends Action {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $PressSettings
    );
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new instance; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $PressSettings
    );
    /**
     * @SINCE 1.63
     *
     * A map of ID suffixes for controls that require a special DOM reference for `Press` interaction.
     *
     * You can specify an ID suffix for specific controls in this map. The press action will be triggered on
     * the DOM element with the specified suffix.
     *
     * Here is a sublist of supported controls and their `Press` control adapter:
     * 	 - sap.m.ComboBox - Arrow button
     * 	 - sap.m.SearchField - Search Button
     * 	 - sap.m.Input - Value help
     * 	 - sap.m.List - More Button
     * 	 - sap.m.Table - More Button
     * 	 - sap.m.ObjectIdentifier - Title
     * 	 - sap.m.ObjectAttribute - Text
     * 	 - sap.m.Page - Back Button
     * 	 - sap.m.semantic.FullscreenPage - Back Button
     * 	 - sap.m.semantic.DetailPage - Back Button
     * 	 - sap.ui.comp.smartfilterbar.SmartFilterBar - Go Button
     */
    static controlAdapters: Record<string, string | ((p1: Control) => string)>;

    /**
     * Creates a new subclass of class sap.ui.test.actions.Press with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Press>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.Press.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Sets focus on given control and triggers a 'tap' event on it (which is internally translated into a 'press'
     * event). Logs an error if control is not visible (i.e. has no dom representation)
     */
    executeOn(
      /**
       * the control on which the 'press' event is triggered
       */
      oControl: Control
    ): void;
    /**
     * @SINCE 1.97
     *
     * Gets current value of property {@link #getAltKey altKey}.
     *
     * If it is set to `true`, the Alt Key modifier will be used
     *
     * @returns Value of property `altKey`
     */
    getAltKey(): boolean;
    /**
     * @SINCE 1.97
     *
     * Gets current value of property {@link #getCtrlKey ctrlKey}.
     *
     * If it is set to `true`, the Control Key modifier will be used
     *
     * @returns Value of property `ctrlKey`
     */
    getCtrlKey(): boolean;
    /**
     * @SINCE 1.97
     *
     * Gets current value of property {@link #getShiftKey shiftKey}.
     *
     * If it is set to `true`, the Shift Key modifier will be used
     *
     * @returns Value of property `shiftKey`
     */
    getShiftKey(): boolean;
    /**
     * @SINCE 1.98
     *
     * Gets current value of property {@link #getXPercentage xPercentage}.
     *
     * Provide percent value for the X coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     *
     * @returns Value of property `xPercentage`
     */
    getXPercentage(): float;
    /**
     * @SINCE 1.98
     *
     * Gets current value of property {@link #getYPercentage yPercentage}.
     *
     * Provide percent value for the Y coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     *
     * @returns Value of property `yPercentage`
     */
    getYPercentage(): float;
    /**
     * @SINCE 1.97
     *
     * Sets a new value for property {@link #getAltKey altKey}.
     *
     * If it is set to `true`, the Alt Key modifier will be used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAltKey(
      /**
       * New value for property `altKey`
       */
      bAltKey: boolean
    ): this;
    /**
     * @SINCE 1.97
     *
     * Sets a new value for property {@link #getCtrlKey ctrlKey}.
     *
     * If it is set to `true`, the Control Key modifier will be used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setCtrlKey(
      /**
       * New value for property `ctrlKey`
       */
      bCtrlKey: boolean
    ): this;
    /**
     * @SINCE 1.97
     *
     * Sets a new value for property {@link #getShiftKey shiftKey}.
     *
     * If it is set to `true`, the Shift Key modifier will be used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setShiftKey(
      /**
       * New value for property `shiftKey`
       */
      bShiftKey: boolean
    ): this;
    /**
     * @SINCE 1.98
     *
     * Sets a new value for property {@link #getXPercentage xPercentage}.
     *
     * Provide percent value for the X coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setXPercentage(
      /**
       * New value for property `xPercentage`
       */
      fXPercentage: float
    ): this;
    /**
     * @SINCE 1.98
     *
     * Sets a new value for property {@link #getYPercentage yPercentage}.
     *
     * Provide percent value for the Y coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setYPercentage(
      /**
       * New value for property `yPercentage`
       */
      fYPercentage: float
    ): this;
  }

  export interface $PressSettings extends $ActionSettings {
    /**
     * @SINCE 1.97
     *
     * If it is set to `true`, the Alt Key modifier will be used
     */
    altKey?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.97
     *
     * If it is set to `true`, the Shift Key modifier will be used
     */
    shiftKey?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.97
     *
     * If it is set to `true`, the Control Key modifier will be used
     */
    ctrlKey?: boolean | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.98
     *
     * Provide percent value for the X coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     */
    xPercentage?: float | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.98
     *
     * Provide percent value for the Y coordinate axis to calculate the position of the click event. The value
     * must be in the range [0 - 100]
     */
    yPercentage?: float | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/actions/Scroll" {
  import {
    default as Action,
    $ActionSettings,
  } from "sap/ui/test/actions/Action";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.90
   *
   * The `Scroll` action is used to simulate a scroll interaction with a control. The control should be scrollable
   * and use a {@link sap.ui.core.delegate.ScrollEnablement} delegate. Supported controls include: sap.uxap.ObjectPageLayout,
   * sap.m.Dialog, sap.m.Page, sap.f.DynamicPage
   */
  export default class Scroll extends Action {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $ScrollSettings
    );
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional ID for the new instance; generated automatically if no non-empty ID is given. Note: this can
       * be omitted, no matter whether `mSettings` are given or not!
       */
      sId?: string,
      /**
       * Optional object with initial settings for the new instance
       */
      mSettings?: $ScrollSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.actions.Scroll with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Scroll>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.actions.Scroll.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getX x}.
     *
     * Default value is `0`.
     *
     * @returns Value of property `x`
     */
    getX(): int;
    /**
     * Gets current value of property {@link #getY y}.
     *
     * Default value is `0`.
     *
     * @returns Value of property `y`
     */
    getY(): int;
    /**
     * Sets a new value for property {@link #getX x}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setX(
      /**
       * New value for property `x`
       */
      iX?: int
    ): this;
    /**
     * Sets a new value for property {@link #getY y}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setY(
      /**
       * New value for property `y`
       */
      iY?: int
    ): this;
  }

  export interface $ScrollSettings extends $ActionSettings {
    x?: int | PropertyBindingInfo | `{${string}}`;

    y?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/gherkin/dataTableUtils" {
  /**
   * @SINCE 1.40
   *
   * Provides utility functions for formatting 2D arrays of strings (such as the raw data loaded from a Gherkin
   * feature file) into a more useful format such as an array of objects or a single object. Also handles
   * normalization of the raw strings.
   */
  interface dataTableUtils {
    /**
     * Takes the inputed 2D array "aData" and returns an equivalent object. Each row of data is expected to
     * be a property-value pair. To create nested objects, add extra columns to the data. E.g.
     * ```javascript
     *
     *  [
     *    ["Name", "Alice"],
     *    ["Mass", "135 lbs"],
     *    ["Telephone Number", "Home", "123-456-7890"],
     *    ["Telephone Number", "Work", "123-456-0987"]
     *  ]
     * ```
     *  For each data row, the right-most element becomes a property value, and everything else is a property
     * name. The property names get normalized according to the strategy defined by the parameter "vNorm". E.g.
     * using camelCase strategy
     * ```javascript
     *
     *   {
     *     name: "Alice",
     *     mass: "135 lbs",
     *     telephoneNumber: {
     *       home: "123-456-7890",
     *       work: "123-456-0987"
     *     }
     *   }
     * ```
     *
     *
     * @returns - an object equivalent to the input data, with property names normalized
     */
    toObject(
      /**
       * the 2D array of strings to be converted
       */
      aData: string[],
      /**
       * the normalization function to use to normalize property names. Can also be a string with values "titleCase",
       * "pascalCase", "camelCase", "hyphenated" or "none".
       */
      vNorm?: string | Function
    ): object;
    /**
     * Takes the inputed 2D array "aData" and returns an equivalent array of objects. The data is expected to
     * have a header row, with each subsequent row being an entity, and each column being a property of that
     * entity. E.g.
     * ```javascript
     *
     *   [
     *     ["Their Name",  "Their Age"],
     *     ["Alice",       "16"],
     *     ["Bob",         "22"]
     *   ]
     * ```
     *
     *
     * The data's column headers become the returned objects' property names. The property names get normalized
     * according to the strategy defined by the parameter "vNorm". E.g. using hyphenation strategy this is returned:
     *
     * ```javascript
     *
     *   [
     *     {their-name: "Alice", their-age: "16"},
     *     {their-name: "Bob", their-age: "22"}
     *   ]
     * ```
     *
     *
     * @returns - an array of objects equivalent to the input data, with property names normalized
     */
    toTable(
      /**
       * the 2D array of strings to be converted, with a header row
       */
      aData: string[],
      /**
       * the normalization function to use to normalize property names. Can also be a String with values "titleCase",
       * "pascalCase", "camelCase", "hyphenated" or "none".
       */
      vNorm?: string | Function
    ): object[];
  }
  const dataTableUtils: dataTableUtils;
  export default dataTableUtils;

  /**
   * A simple object containing a series of normalization functions that change a string according to a particular
   * strategy. All strategies do the following normalization as a minimum:
   *
   *
   * 	 - Trim spaces off the string on both sides. For example: `" hello "` becomes `"hello"`.
   * 	 - Assume that dashes and underscores are analogs for a space. For example: `"sold-to party"` and `"sold
   * 			to party"` are equivalent, and would both convert to the camelCase `"soldToParty"`.
   * 	 - Trim multiple spaces between words. For example: `"hello____world"` becomes `"hello world"`.
   * 	 - Remove any characters that are not alphanumeric or whitespace. For example: `"(hello)"` becomes `"hello"`.
   */
  export interface normalization {
    /**
     * For example: "First Name" -> "firstName"
     *
     * @returns the normalized input string with all words after the first capitalized and all spaces removed
     */
    camelCase(
      /**
       * the string to normalize
       */
      sString: string
    ): string;
    /**
     * For example: "First Name" -> "first-name"
     *
     * @returns the normalized input string changed to lower case and with space between words replaced by a
     * hyphen ("-")
     */
    hyphenated(
      /**
       * the string to normalize
       */
      sString: string
    ): string;
    /**
     * For example: "First Name" -> "First Name"
     *
     * @returns the original unchanged input string
     */
    none(
      /**
       * the string to normalize
       */
      sString: string
    ): string;
    /**
     * For example: "first name" -> "FirstName"
     *
     * @returns the normalized input string with all words capitalized and all spaces removed
     */
    pascalCase(
      /**
       * the string to normalize
       */
      sString: string
    ): string;
    /**
     * For example: "first name" -> "First Name"
     *
     * @returns the normalized input string with all words capitalized
     */
    titleCase(
      /**
       * the string to normalize
       */
      sString: string
    ): string;
  }
  export const normalization: normalization;
}

declare module "sap/ui/test/gherkin/opa5TestHarness" {
  /**
   * @SINCE 1.40
   *
   * Dynamically generates and executes Opa5 tests based on a Gherkin feature file and step definitions.
   *
   * Logs activity to Opa5, and some debug information to the console with the prefix "[GHERKIN]"
   */
  interface opa5TestHarness {
    /**
     * Dynamically generates Opa5 tests
     *
     * If a test step is missing and args.generateMissingSteps is true then the Gherkin step will be converted
     * into Opa Page Object code and executed. The text will be converted to camelCase and have any non-alphanumeric
     * character removed. Here are two pertinent examples:
     *
     * (1) The simple step "Given I start my app" will be converted into the call "Given.iStartMyApp();"
     *
     * (2) The step "Then on page 1: I should see the page 1 text" will become the call "Then.onPage1.iShouldSeeThePage1Text();"
     *
     * Chaining function calls, such as "Then.iStartMyApp().and.iCloseMyApp()" is not possible at this time.
     */
    test(
      /**
       * the arguments to the function
       */
      args: {
        /**
         * the path to the Gherkin feature file to parse, as an SAPUI5 module path. The ".feature" extension is
         * assumed and should not be included. See {@link jQuery.sap.registerModulePath}
         */
        featurePath: string;
        /**
         * the constructor function of type {@link sap.ui.test.gherkin.StepDefinitions}. If this parameter is ommitted
         * then args.generateMissingSteps must be explicitly set to true.
         */
        steps?: Function;
        /**
         * When true: if a Gherkin step cannot be matched to a step definition then it will be assumed that the
         * user wants to convert the step into an Opa Page Object call.
         */
        generateMissingSteps?: boolean;
      }
    ): void;
  }
  const opa5TestHarness: opa5TestHarness;
  export default opa5TestHarness;
}

declare module "sap/ui/test/gherkin/qUnitTestHarness" {
  /**
   * @SINCE 1.40
   *
   * Dynamically generates and executes QUnit tests based on a Gherkin feature file and step definitions
   *
   * Logs activity to QUnit, and some debug information to the console with the prefix "[GHERKIN]"
   */
  interface qUnitTestHarness {
    /**
     * Dynamically generates and executes QUnit tests
     */
    test(
      /**
       * the arguments to the function
       */
      args: {
        /**
         * the path to the Gherkin feature file to parse, as an SAPUI5 module path. The ".feature" extension is
         * assumed and should not be included. See {@link jQuery.sap.registerModulePath}
         */
        featurePath: string;
        /**
         * the constructor function of type {@link sap.ui.test.gherkin.StepDefinitions}
         */
        steps: Function;
      }
    ): void;
  }
  const qUnitTestHarness: qUnitTestHarness;
  export default qUnitTestHarness;
}

declare module "sap/ui/test/gherkin/StepDefinitions" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.40
   *
   * Provides the interface between human and machine since a Gherkin feature file is human-readable and the
   * computer does not know how to execute its steps.
   *
   * It defines what each step in the Gherkin feature file will actually do when it is executed.
   */
  export default class StepDefinitions extends BaseObject {
    /**
     * Meant to be implemented/overridden by a child object. Specifically, the functions "init" and "closeApplication"
     * need to be overridden.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.gherkin.StepDefinitions with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StepDefinitions>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.gherkin.StepDefinitions.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Closes the application and cleans up any mess made by the tests. To avoid erroneous exceptions during
     * test execution, make sure that it is safe to run this method even if the application was never started.
     */
    closeApplication(): void;
    /**
     * Registers the step definitions by calling the method "register".
     * See:
     * 	#register
     */
    init(): void;
    /**
     * Registers a step definition.
     */
    register(
      /**
       * the regular expression that matches the feature file step (with leading "Given", "When", "Then", "But"
       * or "*" removed). E.g. if the feature file has the step "Then I should be served a coffee" it will be
       * truncated to "I should be served a coffee" and tested against "rRegex" to check for a match. The simple
       * regular expression /^I should be served a coffee$/i would match this text. The regular expression can
       * specify capturing groups, which will be passed as parameters to "fnFunc".
       */
      rRegex: RegExp,
      /**
       * the function to execute in the event that the regular expression matches. Receives regular expression
       * capturing groups as parameters in the same order that they are specified in the regular expression. If
       * a data table is specified for the step, it will be passed as an additional final parameter. At execution
       * time, all functions within a particular scenario will execute within the same "this" context.
       */
      fnFunc: Function
    ): void;
  }
}

declare module "sap/ui/test/matchers/AggregationContainsPropertyEqual" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.23
   *
   * Checks if an aggregation contains at least one item that has a property set to a certain value.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     aggregationContainsPropertyEqual: {
   *         aggregationName: "string",
   *         propertyName: "string",
   *         propertyValue: "string"
   *     }
   * }
   * ```
   */
  export default class AggregationContainsPropertyEqual extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher
       */
      mSettings?: $AggregationContainsPropertyEqualSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.AggregationContainsPropertyEqual with name `sClassName`
     * and enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AggregationContainsPropertyEqual>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.AggregationContainsPropertyEqual.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getAggregationName aggregationName}.
     *
     * The Name of the aggregation that is used for matching.
     *
     * @returns Value of property `aggregationName`
     */
    getAggregationName(): string;
    /**
     * Gets current value of property {@link #getPropertyName propertyName}.
     *
     * The Name of the property that is used for matching.
     *
     * @returns Value of property `propertyName`
     */
    getPropertyName(): string;
    /**
     * Gets current value of property {@link #getPropertyValue propertyValue}.
     *
     * The value of the Property that is used for matching.
     *
     * @returns Value of property `propertyValue`
     */
    getPropertyValue(): any;
    /**
     * Checks if the control has a filled aggregation with at least one control that have a property equaling
     * propertyName/Value.
     *
     * @returns true if the Aggregation set in the property aggregationName is filled, false if it is not.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getAggregationName aggregationName}.
     *
     * The Name of the aggregation that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setAggregationName(
      /**
       * New value for property `aggregationName`
       */
      sAggregationName: string
    ): this;
    /**
     * Sets a new value for property {@link #getPropertyName propertyName}.
     *
     * The Name of the property that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropertyName(
      /**
       * New value for property `propertyName`
       */
      sPropertyName: string
    ): this;
    /**
     * Sets a new value for property {@link #getPropertyValue propertyValue}.
     *
     * The value of the Property that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropertyValue(
      /**
       * New value for property `propertyValue`
       */
      oPropertyValue: any
    ): this;
  }

  export interface $AggregationContainsPropertyEqualSettings
    extends $MatcherSettings {
    /**
     * The Name of the aggregation that is used for matching.
     */
    aggregationName?: string | PropertyBindingInfo;

    /**
     * The Name of the property that is used for matching.
     */
    propertyName?: string | PropertyBindingInfo;

    /**
     * The value of the Property that is used for matching.
     */
    propertyValue?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/matchers/AggregationEmpty" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Checks if an aggregation is empty.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax: {
   *     aggregationEmpty: {
   *         name: "string"
   *     }
   * }
   */
  export default class AggregationEmpty extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new AggregationEmptyMatcher
       */
      mSettings?: $AggregationEmptySettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.AggregationEmpty with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AggregationEmpty>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.AggregationEmpty.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Checks if the control has an empty aggregation.
     *
     * @returns true if the Aggregation set in the property aggregationName is empty, false if it is not.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName: string
    ): this;
  }

  export interface $AggregationEmptySettings extends $MatcherSettings {
    /**
     * The name of the aggregation that is used for matching.
     */
    name?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/test/matchers/AggregationFilled" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.23
   *
   * Checks if an aggregation contains at least one entry.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     aggregationFilled: {
   *         name: "string"
   *     }
   * }
   * ```
   */
  export default class AggregationFilled extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new AggregationFilledMatcher
       */
      mSettings?: $AggregationFilledSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.AggregationFilled with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AggregationFilled>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.AggregationFilled.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Checks if the control has a filled aggregation.
     *
     * @returns true if the Aggregation set in the property aggregationName is filled, false if it is not.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName: string
    ): this;
  }

  export interface $AggregationFilledSettings extends $MatcherSettings {
    /**
     * The name of the aggregation that is used for matching.
     */
    name?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/test/matchers/AggregationLengthEquals" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.23
   *
   * Checks if an aggregation contains a specified number of entries.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     aggregationLengthEquals: {
   *         name: "string",
   *         length: "integer"
   *     }
   * }
   * ```
   */
  export default class AggregationLengthEquals extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new AggregationLengthEqualsMatcher
       */
      mSettings?: $AggregationLengthEqualsSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.AggregationLengthEquals with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AggregationLengthEquals>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.AggregationLengthEquals.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getLength length}.
     *
     * The length that aggregation `name` should have.
     *
     * @returns Value of property `length`
     */
    getLength(): int;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Checks if the control's aggregation `name` has length `length`.
     *
     * @returns true if the length of aggregation `name` is the same as `length`, false if it is not.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getLength length}.
     *
     * The length that aggregation `name` should have.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setLength(
      /**
       * New value for property `length`
       */
      iLength: int
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name of the aggregation that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName: string
    ): this;
  }

  export interface $AggregationLengthEqualsSettings extends $MatcherSettings {
    /**
     * The name of the aggregation that is used for matching.
     */
    name?: string | PropertyBindingInfo;

    /**
     * The length that aggregation `name` should have.
     */
    length?: int | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/matchers/Ancestor" {
  /**
   * @SINCE 1.27
   *
   * Checks if a control has a defined ancestor.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     ancestor: "object" // where "object" is a declarative matcher for the ancestor
   * }
   * ```
   *  The declarative matcher for Ancestor does not support the **bDirect** parameter.
   */
  export default class Ancestor {
    constructor(
      /**
       * the ancestor control to check, if undefined, validates every control to true. Can be a control or a control
       * ID
       */
      vAncestor: object | string,
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    );
  }
}

declare module "sap/ui/test/OpaBuilder" {
  import {
    default as Opa5,
    SingleControlSelector,
    MultiControlSelector,
    Matcher,
    Action,
    Chain,
  } from "sap/ui/test/Opa5";

  import UI5Element from "sap/ui/core/Element";

  import EnterText from "sap/ui/test/actions/EnterText";

  import Press from "sap/ui/test/actions/Press";

  import Control from "sap/ui/core/Control";

  import ManagedObject from "sap/ui/base/ManagedObject";

  /**
   * a declarative matcher definition for {@link sap.ui.test.matchers.Ancestor}
   */
  export type AncestorDefinition = Array<object | string | boolean>;

  /**
   * a declarative matcher definition for {@link sap.ui.test.matchers.Descendant}
   */
  export type DescendantDefinition = Array<object | string | boolean>;

  /**
   * a declarative matcher definition for {@link sap.ui.test.matchers.I18NText}
   */
  export type I18NTextDefinition = {
    propertyName: string;

    modelName: string;

    key: string;

    parameters?: string[];
  };

  /**
   * a declarative matcher definition for {@link sap.ui.test.matchers.LabelFor}
   */
  export type LabelForDefinition = {
    propertyName: string;

    text?: string;

    modelName?: string;

    key?: string;

    parameters?: any[];
  };

  /**
   * Builder pattern for {@link sap.ui.test.Opa5#waitFor} options object - a function driven API supporting
   * easy test definition and execution.
   *
   * Sample usage:
   * ```javascript
   *
   * // {
   * //    id: "myButton",
   * //    press: new Press()
   * // }
   * OpaBuilder.create()
   *     .hasId("myButton")
   *     .doPress()
   *     .build();
   * ```
   *
   *
   * Replace `this.waitFor` call completely:
   * ```javascript
   *
   * // return this.waitFor({
   * //    controlType: "sap.m.StandardListItem",
   * //    matchers: [
   * //       {
   * //           properties: { text: "my test text" }
   * //       }
   * //    ],
   * //    press: new Press(),
   * //    success: function () {
   * //        Opa5.assert.ok(true, "Item selected - OK");
   * //    },
   * //    errorMessage: "Item selected - FAILURE"
   * // });
   * return OpaBuilder.create(this)
   *     .hasType("sap.m.StandardListItem")
   *     .hasProperties({ text: "my test text" })
   *     .doPress()
   *     .description("Item selected")
   *     .execute();
   * ```
   */
  export default class OpaBuilder {
    /**
     * Constructor for a new OpaBuilder.
     */
    constructor(
      /**
       * the Opa5 instance to operate on
       */
      oOpaInstance?: Opa5,
      /**
       * the initial {@link sap.ui.test.Opa5#waitFor} options
       */
      oOptions?: SingleControlSelector | MultiControlSelector
    );

    /**
     * Convenience creation and initialization of a new OpaBuilder.
     *
     * @returns a new OpaBuilder instance
     */
    static create(
      /**
       * the Opa5 instance to operate on
       */
      oOpaInstance?: Opa5,
      /**
       * the id of the target control(s)
       */
      vId?: string | RegExp,
      /**
       * the type of the target control(s)
       */
      sControlType?: string,
      /**
       * if true, only popover and dialogs are searched for
       */
      bDialogElement?: boolean,
      /**
       * additional matchers to filter target control(s)
       */
      vMatchers?: Matcher | Matcher[],
      /**
       * the actions to be performed on target control(s)
       */
      vActions?: Action | Action[],
      /**
       * oOptions the {@link sap.ui.test.Opa5#waitFor} options to apply
       */
      oOptions?: SingleControlSelector | MultiControlSelector
    ): OpaBuilder;
    /**
     * Set or get the default options to be used as the builder base. If no options are provided, the current
     * default options are returned.
     *
     * @returns the default {@link sap.ui.test.Opa5#waitFor} options
     */
    static defaultOptions(
      /**
       * the new default options to be used
       */
      oOptions?: SingleControlSelector | MultiControlSelector
    ): SingleControlSelector | MultiControlSelector;
    /**
     * Build the final {@link sap.ui.test.Opa5#waitFor} options object and returns it.
     *
     * @returns the final options object
     */
    build(): SingleControlSelector | MultiControlSelector;
    /**
     * Add a check function. If another check function already exists, the functions are chained.
     *
     * @returns this OpaBuilder instance
     */
    check(
      /**
       * the check that is executed on matched controls
       */
      fnCheck: (p1: UI5Element | UI5Element[]) => boolean,
      /**
       * true to replace all previous defined matchers, false to add it (default)
       */
      bReplace?: boolean
    ): this;
    /**
     * Adds a check for the expected number of matching controls.
     *
     * @returns this OpaBuilder instance
     */
    checkNumberOfMatches(
      /**
       * the number of expected matching controls
       */
      iExpectedNumber: number
    ): this;
    /**
     * Sets the `debugTimeout` parameter.
     *
     * @returns this OpaBuilder instance
     */
    debugTimeout(
      /**
       * the debug timeout in seconds
       */
      iDebugTimeout: int
    ): this;
    /**
     * Set a output text that will be used as success and error message base message.
     *
     * @returns this OpaBuilder instance
     */
    description(
      /**
       * a descriptive text
       */
      sDescription: string
    ): this;
    /**
     * Add an action to be performed on all matched controls.
     *
     * @returns this OpaBuilder instance
     */
    do(
      /**
       * the action(s) to be performed on matched controls
       */
      vActions: Action | Action[],
      /**
       * true to replace all previous defined actions, false to add it (default)
       */
      bReplace?: boolean
    ): this;
    /**
     * Add an action that is only performed if target control fulfills the conditions. It is internally using
     * {@link sap.ui.test.OpaBuilder.Actions.conditional}.
     *
     * @returns this OpaBuilder instance
     */
    doConditional(
      /**
       * target control is checked against these given conditions
       */
      vConditions: Matcher | Matcher[] | boolean,
      /**
       * the actions to be performed when conditions are fulfilled
       */
      vSuccessActions: Action | Action[],
      /**
       * the action(s) to be performed when conditions are not fulfilled
       */
      vElseActions?: Action | Action[]
    ): this;
    /**
     * Performs a {@link sap.ui.test.actions.EnterText} on target control(s).
     *
     * @returns this OpaBuilder instance
     */
    doEnterText(
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setText} setting
       */
      sText: string,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setClearTextFirst} setting
       */
      bClearTextFirst?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setKeepFocus} setting
       */
      bKeepFocus?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setPressEnterKey} setting
       */
      bPressEnterKey?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.Action#setIdSuffix} setting
       */
      sIdSuffix?: string
    ): this;
    /**
     * Performs given actions on all items of an aggregation fulfilling the matchers.
     *
     * @returns this OpaBuilder instance
     */
    doOnAggregation(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * the matchers to filter aggregation items
       */
      vMatchers: Matcher | Matcher[],
      /**
       * the actions to be performed on matching aggregation items
       */
      vActions: Action | Action[]
    ): this;
    /**
     * Performs given actions on all items of an aggregation fulfilling the matchers.
     *
     * @returns this OpaBuilder instance
     */
    doOnAggregation(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * the actions to be performed on matching aggregation items
       */
      vActions: Action | Action[]
    ): this;
    /**
     * Executes a builder with matching controls being descendants of matching target control(s). Children are
     * any controls in the control tree beneath this target control(s).
     *
     * @returns this OpaBuilder instance
     */
    doOnChildren(
      /**
       * the child builder or child matcher
       */
      vChildBuilderOrMatcher?: Matcher | Matcher[] | OpaBuilder,
      /**
       * the actions to be performed on matching child items
       */
      vActions?: Action | Action[],
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    ): this;
    /**
     * Executes a {@link sap.ui.test.actions.Press} action on target control(s).
     *
     * @returns this OpaBuilder instance
     */
    doPress(
      /**
       * the id suffix of the DOM Element the press action will be executed on
       */
      sIdSuffix?: string
    ): this;
    /**
     * Adds an error message or function.
     *
     * @returns this OpaBuilder instance
     */
    error(
      /**
       * the message to be shown (or function executed) on failure
       */
      vErrorMessage: string | Function,
      /**
       * true to replace all previous defined error functions, false to add it (default)
       */
      bReplace?: boolean
    ): this;
    /**
     * Executes the definition on the given or previously defined Opa5 instance.
     *
     * @returns an object extending a jQuery promise, corresponding to the result of {@link sap.ui.test.Opa5#waitFor}
     */
    execute(
      /**
       * the Opa5 instance to call {@link sap.ui.test.Opa5#waitFor} on
       */
      oOpaInstance?: Opa5
    ): Chain;
    /**
     * Sets the `fragmentId` parameter.
     *
     * @returns this OpaBuilder instance
     */
    fragmentId(
      /**
       * the fragment id
       */
      sFragmentId: string
    ): this;
    /**
     * Get the Opa5 instance that will be used for {@link sap.ui.test.OpaBuilder#execute}. If no {sap.ui.test.Opa5}
     * instance was set before, this function creates a new one lazily.
     *
     * @returns the Opa5 instance
     */
    getOpaInstance(): Opa5;
    /**
     * Defines additional matchers for the target control(s).
     *
     * @returns this OpaBuilder instance
     */
    has(
      /**
       * additional matchers to filter target control(s)
       */
      vMatchers: Matcher | Matcher[],
      /**
       * true to replace all previous defined matchers, false to add it (default)
       */
      bReplace?: boolean
    ): this;
    /**
     * Adds matchers to aggregation items, that at least one aggregation item must match.
     *
     * @returns this OpaBuilder instance
     */
    hasAggregation(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * matchers to filter aggregation items
       */
      vMatchers?: Matcher | Matcher[]
    ): this;
    /**
     * Adds a matcher that checks for a certain number of aggregation items.
     *
     * @returns this OpaBuilder instance
     */
    hasAggregationLength(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * length to check against
       */
      iNumber: int
    ): this;
    /**
     * Adds a matcher to aggregation items checking for certain properties. At least one item must match the
     * properties.
     *
     * @returns this OpaBuilder instance
     */
    hasAggregationProperties(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * map of properties that aggregation item must match
       */
      oProperties: Record<string, any>
    ): this;
    /**
     * Adds a matcher that checks whether at least one child fulfilling given matcher(s).
     *
     * @returns this OpaBuilder instance
     */
    hasChildren(
      /**
       * the matchers to filter child items
       */
      vBuilderOrMatcher?: Matcher | Matcher[] | OpaBuilder,
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    ): this;
    /**
     * Adds a matcher that checks states for given conditions. It is internally using {@link sap.ui.test.OpaBuilder.Matchers.conditional}.
     *
     * @returns this OpaBuilder instance
     */
    hasConditional(
      /**
       * conditions to pre-check
       */
      vConditions: Matcher | Matcher[] | boolean,
      /**
       * actual matcher that is executed if conditions are met
       */
      vSuccessMatcher: Matcher | Matcher[] | Object,
      /**
       * actual matcher that is executed if conditions are not met
       */
      vElseMatcher?: Matcher | Matcher[] | Object
    ): this;
    /**
     * Adds a matcher for given properties.
     *
     * @returns this OpaBuilder instance
     */
    hasI18NText(
      /**
       * the name of the property to check for i18n text
       */
      sPropertyName: string,
      /**
       * the path to the I18N text. If model is omitted, `i18n` is used as model name.
       */
      sModelTokenPath: string,
      /**
       * the values to be used instead of the placeholders
       */
      aParameters?: any[]
    ): this;
    /**
     * Defines the id of the target control(s).
     *
     * @returns this OpaBuilder instance
     */
    hasId(
      /**
       * the id of the target control(s)
       */
      vId: string | RegExp
    ): this;
    /**
     * Adds a matcher for given properties.
     *
     * @returns this OpaBuilder instance
     */
    hasProperties(
      /**
       * map of properties that target control(s) must match
       */
      oProperties: Record<string, any>
    ): this;
    /**
     * Adds a group of matchers that requires only one of them to actually match. It is internally using {@link
     * sap.ui.test.OpaBuilder.Matchers.some}.
     *
     * @returns this OpaBuilder instance
     */
    hasSome(
      /**
       * aMatchers list of matchers where one must be met
       */
      aMatchers?: Matcher | Matcher[]
    ): this;
    /**
     * Defines the control type of the target control(s).
     *
     * @returns this OpaBuilder instance
     */
    hasType(
      /**
       * the type of the target control(s)
       */
      sControlType: string
    ): this;
    /**
     * Defines whether target control is part of a popover or dialog (sets `searchOpenDialogs` property).
     *
     * @returns this OpaBuilder instance
     */
    isDialogElement(
      /**
       * can be set to false to disable `searchOpenDialogs`, set to true if omitted
       */
      bDialog?: boolean
    ): this;
    /**
     * Sets the `enabled` parameter.
     *
     * @returns this OpaBuilder instance
     */
    mustBeEnabled(
      /**
       * can be set to false to prevent `enabled` check, set to true if omitted
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets the `autoWait` parameter.
     *
     * @returns this OpaBuilder instance
     */
    mustBeReady(
      /**
       * can be set to false to prevent `autoWait`, set to true if omitted
       */
      bReady?: boolean
    ): this;
    /**
     * Sets the `visible` parameter.
     *
     * @returns this OpaBuilder instance
     */
    mustBeVisible(
      /**
       * can be set to false to prevent `visible` check, set to true if omitted
       */
      bVisible?: boolean
    ): this;
    /**
     * Apply custom options. The options might override previously defined options of the OpaBuilder.
     *
     * @returns this OpaBuilder instance
     */
    options(
      /**
       * the {@link sap.ui.test.Opa5#waitFor} options to apply
       */
      oOptions?: SingleControlSelector | MultiControlSelector
    ): this;
    /**
     * Sets the `pollingInterval` parameter.
     *
     * @returns this OpaBuilder instance
     */
    pollingInterval(
      /**
       * the polling interval in milliseconds
       */
      iPollingInterval: int
    ): this;
    /**
     * Set the Opa5 instance to be used for {@link sap.ui.test.OpaBuilder#execute}. Please note that this function
     * does not return the OpaBuilder instance and can therefore not be chained. Use the `oOpaInstance` argument
     * of {@link sap.ui.test.OpaBuilder.create}, {@link sap.ui.test.OpaBuilder#constructor} or {@link sap.ui.test.OpaBuilder#execute}
     * to provide the Opa5 instance within the builder chain.
     */
    setOpaInstance(
      /**
       * the Opa5 instance to operate on
       */
      oOpaInstance?: Opa5
    ): void;
    /**
     * Adds a success message or function. When providing an OpaBuilder, the action will execute it.
     *
     * @returns this OpaBuilder instance
     */
    success(
      /**
       * the message that will be shown (or function executed) on success
       */
      vSuccess: string | Function | OpaBuilder,
      /**
       * true to replace all previous defined success functions, false to add it (default)
       */
      bReplace?: boolean
    ): this;
    /**
     * Sets the `timeout` parameter.
     *
     * @returns this OpaBuilder instance
     */
    timeout(
      /**
       * the timeout in seconds
       */
      iTimeout: int
    ): this;
    /**
     * Sets the `viewId` parameter.
     *
     * @returns this OpaBuilder instance
     */
    viewId(
      /**
       * the viewId
       */
      sViewId: string
    ): this;
    /**
     * Sets the `viewName` parameter.
     *
     * @returns this OpaBuilder instance
     */
    viewName(
      /**
       * the viewName
       */
      sViewName: string
    ): this;
    /**
     * Sets the `viewNamespace` parameter.
     *
     * @returns this OpaBuilder instance
     */
    viewNamespace(
      /**
       * the viewNamespace
       */
      sViewNamespace: string
    ): this;
  }
  /**
   * A collection of predefined actions. See also {@link sap.ui.test.actions}.
   */
  export interface Actions {
    /**
     * Creates an action that is only performed if target control fulfills the conditions.
     *
     * @returns an action function
     */
    conditional(
      /**
       * target control is checked against these given conditions
       */
      vConditions: Matcher | Matcher[] | boolean,
      /**
       * the actions to be performed when conditions are fulfilled
       */
      vSuccessBuilderOrOptions: Action | Action[] | OpaBuilder,
      /**
       * the action(s) to be performed when conditions are not fulfilled
       */
      vElseBuilderOptions?: Action | Action[] | OpaBuilder
    ): (p1: UI5Element) => void;
    /**
     * Creates a {@link sap.ui.test.actions.EnterText} action.
     *
     * @returns an instance of the {@link sap.ui.test.actions.EnterText} action
     */
    enterText(
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setText} setting
       */
      sText: string,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setClearTextFirst} setting
       */
      bClearTextFirst?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setKeepFocus} setting
       */
      bKeepFocus?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.EnterText#setPressEnterKey} setting
       */
      bPressEnterKey?: boolean,
      /**
       * defines the {@link sap.ui.test.actions.Action#setIdSuffix} setting
       */
      sIdSuffix?: string
    ): EnterText;
    /**
     * Creates an action function that executes all given actions on a single or an array of controls. This
     * method can be used as a helper for handling the different kinds of action definitions and inputs.
     *
     * @returns an action function
     */
    executor(
      /**
       * the actions to be executed
       */
      vActions: Action | Action[]
    ): (p1: UI5Element | UI5Element[]) => void;
    /**
     * Creates a {@link sap.ui.test.actions.Press} action.
     *
     * @returns an instance of the {@link sap.ui.test.actions.Press} action
     */
    press(
      /**
       * the id suffix of the DOM Element the press action will be executed on
       */
      sIdSuffix?: string
    ): Press;
  }
  export const Actions: Actions;

  /**
   * A collection of predefined matchers. See also {@link sap.ui.test.matchers}
   */
  export interface Matchers {
    /**
     * A matcher function that always returns `false`.
     *
     * `
     * ```javascript
     * var fnFalsyMatcher = OpaBuilder.Matchers.FALSE;```
     *  `
     */
    FALSE: () => boolean;

    /**
     * A matcher function that always returns `true`.
     *
     * `
     * ```javascript
     * var fnTruthyMatcher = OpaBuilder.Matchers.TRUE;```
     *  `
     */
    TRUE: () => boolean;

    /**
     * Creates a matcher function that returns all aggregation items fulfilling given matcher(s). The result
     * will always be an array, even if it is a non-multiple aggregation.
     *
     * @returns matcher function returning all matching aggregation items
     */
    aggregation(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * the matchers to filter aggregation items
       */
      vMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element) => UI5Element[];
    /**
     * Creates a matcher function that returns an aggregation element of a control at a given index.
     *
     * @returns the matcher function returns the item at a certain index in the aggregation or `undefined` if
     * index not in range
     */
    aggregationAtIndex(
      /**
       * the name of the aggregation that is used for matching
       */
      sAggregationName: string,
      /**
       * the index within the aggregation
       */
      iIndex: int
    ): (p1: Control) => ManagedObject;
    /**
     * Creates a {@link sap.ui.test.matchers.AggregationLengthEquals} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.AggregationLengthEquals}
     */
    aggregationLength(
      /**
       * the name of the aggregation that is used for matching
       */
      sAggregationName: string,
      /**
       * the length that aggregation name should have
       */
      iLength: int
    ): {
      aggregationLengthEquals: {
        name: string;

        length: int;
      };
    };
    /**
     * Checks whether at least one aggregation item fulfills given matcher(s).
     *
     * @returns matcher function
     */
    aggregationMatcher(
      /**
       * the aggregation name
       */
      sAggregationName: string,
      /**
       * the matchers to filter aggregation items
       */
      vMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a declarative matcher definition for {@link sap.ui.test.matchers.Ancestor}.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.Ancestor}
     */
    ancestor(
      /**
       * the ancestor control to check, if undefined, validates every control to true. Can be a control or a control
       * ID
       */
      vAncestor: object | string,
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    ): {
      ancestor: AncestorDefinition[];
    };
    /**
     * Creates a {@link sap.ui.test.matchers.BindingPath} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.BindingPath}
     */
    bindingPath(
      /**
       * the binding context path (including the model name) that is used for matching
       */
      sModelPropertyPath: string,
      /**
       * the binding property path that is used for matching. If (context) path is also set, propertyPath will
       * be assumed to be relative to the binding context path
       */
      sPropertyPath: string
    ): {
      bindingPath: {
        modelName: string;

        path: any;

        propertyPath: any;
      };
    };
    /**
     * Creates a matcher that checks whether the bound context or model has the given properties.
     *
     * @returns the matcher function checks all path in the properties object against the binding context
     */
    bindingProperties(
      /**
       * the name of the model to get the binding context for
       */
      sModelName: string,
      /**
       * the property-path map with expected values
       */
      oProperties: Record<string, any>
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a matcher that checks whether the bound context or model has the given properties.
     *
     * @returns the matcher function checks all path in the properties object against the binding context
     */
    bindingProperties(
      /**
       * the property-path map with expected values
       */
      oProperties: Record<string, any>
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a matcher function that returns all children fulfilling given matcher(s). The result will always
     * be an array, even if only one child was found.
     *
     * @returns matcher function returning all matching children
     */
    children(
      /**
       * the matchers to filter child items
       */
      vBuilderOrMatcher?: Matcher | Matcher[] | OpaBuilder,
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    ): (p1: UI5Element) => UI5Element[];
    /**
     * Creates a matcher function that checks whether one children fulfilling given matcher(s).
     *
     * @returns matcher function
     */
    childrenMatcher(
      /**
       * the matchers to filter child items
       */
      vBuilderOrMatcher?: Matcher | Matcher[] | OpaBuilder,
      /**
       * specifies if the ancestor should be a direct ancestor (parent)
       */
      bDirect?: boolean
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a matcher that checks states for given conditions.
     *
     * @returns a matcher function
     */
    conditional(
      /**
       * conditions to pre-check
       */
      vConditions: Matcher | Matcher[] | boolean,
      /**
       * actual matcher that is executed if conditions are met
       */
      vSuccessMatcher: Matcher | Matcher[],
      /**
       * actual matcher that is executed if conditions are not met
       */
      vElseMatcher?: Matcher | Matcher[]
    ): (p1: UI5Element) => void;
    /**
     * Creates a matcher that checks whether a control has all given custom data.
     *
     * @returns the matcher function checks for defined custom data
     */
    customData(
      /**
       * the map of custom data keys and their values to check against
       */
      oCustomData?: Record<string, any>
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a declarative matcher definition for {@link sap.ui.test.matchers.Descendant}.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.Descendant}
     */
    descendant(
      /**
       * the descendant control to check. If undefined, it validates every control to true. Can be a control or
       * a control ID
       */
      vDescendent: object | string,
      /**
       * specifies if the descendant should be a direct child
       */
      bDirect?: boolean
    ): {
      descendant: DescendantDefinition[];
    };
    /**
     * Creates a matcher that checks all inputs against given matchers. The input can be an array or a single
     * element. The result will always be an array. If the input is a single element, the result will be an
     * array containing the given element (or empty if not matching the matchers).
     *
     * @returns the matcher function returns an array with all matching items
     */
    filter(
      /**
       * the matchers to check all items against
       */
      vMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element | UI5Element[]) => UI5Element[];
    /**
     * Creates a matcher that checks whether a control has the focus.
     *
     * @returns a matcher function
     */
    focused(
      /**
       * set true to check additionally for the focus on any child element
       */
      bCheckChildren?: boolean
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a {@link sap.ui.test.matchers.I18NText} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.I18NText}
     */
    i18n(
      /**
       * the name of the control property to match the I18N text with
       */
      sPropertyName: string,
      /**
       * the path to the I18N text. If model is omitted, `i18n` is used as model name.
       */
      sModelTokenPath: string,
      /**
       * the values to be used instead of the placeholders
       */
      aParameters?: string[]
    ): {
      i18NText: I18NTextDefinition;
    };
    /**
     * Creates a {@link sap.ui.test.matchers.LabelFor} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.LabelFor}
     */
    labelFor(
      /**
       * the name of the control property to match the I18N text with
       */
      sPropertyName: string,
      /**
       * define whether check is against plain text
       */
      bText: boolean,
      /**
       * the path to the I18N text containing the model name. If `bText` set true, contains the plain text to
       * check against
       */
      sModelTokenPathOrText: string,
      /**
       * the values to be used instead of the placeholders in case of I18N texts
       */
      aParameters?: any[]
    ): {
      labelFor: LabelForDefinition;
    };
    /**
     * Creates a {@link sap.ui.test.matchers.LabelFor} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.LabelFor}
     */
    labelFor(
      /**
       * the name of the control property to match the I18N text with
       */
      sPropertyName: string,
      /**
       * the path to the I18N text containing the model name. If `bText` set true, contains the plain text to
       * check against
       */
      sModelTokenPathOrText: string,
      /**
       * the values to be used instead of the placeholders in case of I18N texts
       */
      aParameters?: any[]
    ): {
      labelFor: LabelForDefinition;
    };
    /**
     * Creates a matcher that checks a single input against all defined matchers.
     *
     * @returns the matcher function returns the result of the matcher chain
     */
    match(
      /**
       * the matchers to check all items against
       */
      vMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element | UI5Element[]) => boolean;
    /**
     * Creates a matcher function which is negating the result of provided matchers. The matcher function returns
     * a boolean value but never a control.
     *
     * Example usage for only matching controls without a certain text:
     * ```javascript
     * new OpaBuilder().hasType("sap.m.Text").has(
     *              OpaBuilder.Matchers.not(
     *                  OpaBuilder.Matchers.properties({ text: "Ignore controls with this text"})
     *             )
     *         );
     *     ```
     *
     *
     * @returns the matcher function returns the negated result of the matcher chain
     */
    not(
      /**
       * the matchers that will actually be executed
       */
      vMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element) => boolean;
    /**
     * Creates a {@link sap.ui.test.matchers.Properties} matcher.
     *
     * @returns a declarative matcher definition for {@link sap.ui.test.matchers.Properties}
     */
    properties(
      /**
       * the object with the properties to be checked
       */
      oProperties: Record<string, any>
    ): {
      properties: Record<string, any>;
    };
    /**
     * Creates a matcher that validates the given property against a token text of a library message bundle.
     *
     * @returns a matcher function
     */
    resourceBundle(
      /**
       * the name of the control property to match the I18N text with
       */
      sPropertyName: string,
      /**
       * the name of the library to retrieve the resource bundle from
       */
      sLibrary: string,
      /**
       * the text token to validate against
       */
      sToken: string,
      /**
       * the values to be used instead of the placeholders
       */
      aParameters?: string[]
    ): (p1: UI5Element) => void;
    /**
     * Creates a matcher that checks for at least one successful match from a group of matchers.
     *
     * @returns a matcher function
     */
    some(
      /**
       * aMatchers list of matchers were one must be met
       */
      aMatchers?: Matcher | Matcher[]
    ): (p1: UI5Element) => boolean | any;
  }
  export const Matchers: Matchers;
}

declare module "sap/ui/test/matchers/BindingPath" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.32
   *
   * Checks if a control has a binding context with the exact same binding path.
   *
   * As of version 1.60, comparison is strict and can include one or more binding criteria:
   * 	 - context path (matches children of bound controls, eg: items in a table)
   * 	 - property path (matches controls with no context and a single bound property, eg: Text with binding
   * 			for property text)
   * 	 - context path + property path (matches children of bound controls, where the child has a binding for
   * 			a certain property within the context)
   * 	 - as of version 1.86, static value is also accepted. Use this only for {@link sap.ui.model.StaticBinding}
   *
   *
   * **Note:** Before version 1.60, the only available criteria is binding context path.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     bindingPath: {
   *         path: "string",
   *         modelName: "string",
   *         propertyPath: "string"
   *     }
   * }
   * ```
   *  As of version 1.81, you can use regular expressions in declarative syntax:
   * ```javascript
   * {
   *     bindingPath: {
   *         path: {
   *             regex: {
   *                 source: "binding.*PathValue$",
   *                 flags: "ig"
   *             }
   *         }
   *     }
   * }
   * ```
   */
  export default class BindingPath extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Map/JSON-object with initial settings for the new BindingPath.
       */
      mSettings?: $BindingPathSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.BindingPath with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BindingPath>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.BindingPath.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getModelName modelName}.
     *
     * The name of the binding model that is used for matching.
     *
     * @returns Value of property `modelName`
     */
    getModelName(): string;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * The value of the binding context path that is used for matching. As of version 1.81, it can also be a
     * regular expression.
     *
     * @returns Value of property `path`
     */
    getPath(): any;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getPropertyPath propertyPath}.
     *
     * The value of the binding property path that is used for matching. If (context) path is also set, propertyPath
     * will be assumed to be relative to the binding context path As of version 1.81, it can also be a regular
     * expression.
     *
     * @returns Value of property `propertyPath`
     */
    getPropertyPath(): any;
    /**
     * @SINCE 1.86
     *
     * Gets current value of property {@link #getValue value}.
     *
     * value of a static binding property. Use this only for {@link sap.ui.model.StaticBinding}
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * Checks if the control has a binding with matching path
     *
     * @returns true if the binding values match strictly
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getModelName modelName}.
     *
     * The name of the binding model that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setModelName(
      /**
       * New value for property `modelName`
       */
      sModelName: string
    ): this;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * The value of the binding context path that is used for matching. As of version 1.81, it can also be a
     * regular expression.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPath(
      /**
       * New value for property `path`
       */
      oPath: any
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getPropertyPath propertyPath}.
     *
     * The value of the binding property path that is used for matching. If (context) path is also set, propertyPath
     * will be assumed to be relative to the binding context path As of version 1.81, it can also be a regular
     * expression.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropertyPath(
      /**
       * New value for property `propertyPath`
       */
      oPropertyPath: any
    ): this;
    /**
     * @SINCE 1.86
     *
     * Sets a new value for property {@link #getValue value}.
     *
     * value of a static binding property. Use this only for {@link sap.ui.model.StaticBinding}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue: any
    ): this;
  }

  export interface $BindingPathSettings extends $MatcherSettings {
    /**
     * The value of the binding context path that is used for matching. As of version 1.81, it can also be a
     * regular expression.
     */
    path?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * The name of the binding model that is used for matching.
     */
    modelName?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * The value of the binding property path that is used for matching. If (context) path is also set, propertyPath
     * will be assumed to be relative to the binding context path As of version 1.81, it can also be a regular
     * expression.
     */
    propertyPath?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * @SINCE 1.86
     *
     * value of a static binding property. Use this only for {@link sap.ui.model.StaticBinding}
     */
    value?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/matchers/Descendant" {
  /**
   * @SINCE 1.66
   *
   * Checks if a control has a given descendant.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     descendant: "object" // where "object" is a declarative matcher for the descendant
   * }
   * ```
   *  The declarative matcher for Descendant does not support the **bDirect** parameter.
   */
  export default class Descendant {
    constructor(
      /**
       * The descendant control to check. If undefined, it validates every control to true. Can be a control or
       * a control ID
       */
      vDescendantControl: object | string,
      /**
       * specifies if the descendant should be a direct child
       */
      bDirect?: boolean
    );
  }
}

declare module "sap/ui/test/matchers/I18NText" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.42
   *
   * The I18NText matcher checks if a control property has the same value as a text from an I18N file.
   *
   * The matcher automatically:
   * 	 -  retrieves the text from the assigned 'i18n' model (name can be changed) or library resource bundle
   *
   * 	 -  checks that the I18N key does actually exist in the file
   * 	 -  checks if asynchronously loaded I18N have actually been loaded
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     i18NText: {
   *         propertyName: "string",
   *         key: "string",
   *         parameters: "any",
   *         modelName: "string"
   *     }
   * }
   * ```
   *
   *
   * As of version 1.95 if the `useLibraryBundle` flag is set to `true`, the library resource bundle of the
   * control is used to resolve the i18n key.
   */
  export default class I18NText extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new I18NText
       */
      mSettings?: $I18NTextSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.I18NText with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, I18NText>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.I18NText.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getModelName modelName}.
     *
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     *
     * Default value is `"i18n"`.
     *
     * @returns Value of property `modelName`
     */
    getModelName(): string;
    /**
     * Gets current value of property {@link #getParameters parameters}.
     *
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     *
     * @returns Value of property `parameters`
     */
    getParameters(): any;
    /**
     * Gets current value of property {@link #getPropertyName propertyName}.
     *
     * The name of the control property to match the I18N text with.
     *
     * @returns Value of property `propertyName`
     */
    getPropertyName(): string;
    /**
     * Gets current value of property {@link #getUseLibraryBundle useLibraryBundle}.
     *
     * The boolean flag to indicate whether to utiliize the library bundle of the control
     *
     * @returns Value of property `useLibraryBundle`
     */
    getUseLibraryBundle(): boolean;
    /**
     * Checks if the control has a property that matches the I18N text
     *
     * @returns true if the property has a strictly matching value.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey: string
    ): this;
    /**
     * Sets a new value for property {@link #getModelName modelName}.
     *
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"i18n"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setModelName(
      /**
       * New value for property `modelName`
       */
      sModelName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getParameters parameters}.
     *
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setParameters(
      /**
       * New value for property `parameters`
       */
      oParameters: any
    ): this;
    /**
     * Sets a new value for property {@link #getPropertyName propertyName}.
     *
     * The name of the control property to match the I18N text with.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropertyName(
      /**
       * New value for property `propertyName`
       */
      sPropertyName: string
    ): this;
    /**
     * Sets a new value for property {@link #getUseLibraryBundle useLibraryBundle}.
     *
     * The boolean flag to indicate whether to utiliize the library bundle of the control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setUseLibraryBundle(
      /**
       * New value for property `useLibraryBundle`
       */
      bUseLibraryBundle: boolean
    ): this;
  }

  export interface $I18NTextSettings extends $MatcherSettings {
    /**
     * The name of the control property to match the I18N text with.
     */
    propertyName?: string | PropertyBindingInfo;

    /**
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     */
    key?: string | PropertyBindingInfo;

    /**
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     */
    parameters?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     */
    modelName?: string | PropertyBindingInfo;

    /**
     * The boolean flag to indicate whether to utiliize the library bundle of the control
     */
    useLibraryBundle?: boolean | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/matchers/Interactable" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.34
   *
   * Checks if a control is currently able to take user interactions. OPA5 will automatically apply this matcher
   * if you specify actions in {@link sap.ui.test.Opa5#waitFor}. A control will be filtered out by this matcher
   * when:
   * 	 -  The control is invisible
   * 	 -  The control or its parents are busy
   * 	 -  The control is hidden behind a dialog
   * 	 -  The UIArea of the control needs new rendering
   * 	 -  As of version 1.53, the Interactable matcher no longer uses internal autoWait functionality.
   * 	 -  Interactable matcher might be made private in the near future.
   * 	 -  It is recommended to enable autoWait OPA option instead of using the Interactable matcher directly.
   *
   * 	 -  The Interactable matcher doesn't check if a control is enabled or editable. One way to check for
   * 			these properties is with matchers such as the {@link sap.ui.test.matchers.PropertyStrictEquals} and {@link
   * 			sap.ui.test.matchers.Properties} matchers. Another way is to use the `enabled` and `editable` properties
   * 			of {@link sap.ui.test.Opa5#waitFor}. Note that `enabled` is available as of version 1.66, and `editable`
   * 			is available as of version 1.80.
   */
  export default class Interactable extends Matcher {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.matchers.Interactable with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Interactable>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.Interactable.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
  }

  export interface $InteractableSettings extends $MatcherSettings {}
}

declare module "sap/ui/test/matchers/LabelFor" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.46
   *
   * The LabelFor matcher checks if a given control has a label associated with it. For every Label on the
   * page, the matcher checks if:
   * 	 -  its labelFor association is to the given control
   * 	 -  its properties match a condition   Labels can be matched by:
   * 	 -  text
   * 	 -  i18n key, modelName, parameters or propertyName. See {@link sap.ui.test.matchers.I18NText}
   * 	 -  combination of text and key is not possible   Some control types cannot be in a labelFor association:
   *
   * 	 -  sap.ui.comp.navpopover.SmartLink
   * 	 -  sap.m.Link
   * 	 -  sap.m.Label
   * 	 -  sap.m.Text
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     labelFor: {
   *         text: "string",
   *         modelName: "string",
   *         key: "string",
   *         parameters: "any",
   *         propertyName: "string"
   *     }
   * }
   * ```
   */
  export default class LabelFor extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new LabelFor
       */
      mSettings?: $LabelForSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.LabelFor with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LabelFor>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.LabelFor.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     *
     * @returns Value of property `key`
     */
    getKey(): string;
    /**
     * Gets current value of property {@link #getModelName modelName}.
     *
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     *
     * Default value is `"i18n"`.
     *
     * @returns Value of property `modelName`
     */
    getModelName(): string;
    /**
     * Gets current value of property {@link #getParameters parameters}.
     *
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     *
     * @returns Value of property `parameters`
     */
    getParameters(): any;
    /**
     * Gets current value of property {@link #getPropertyName propertyName}.
     *
     * The name of the control property to match the I18N text with.
     *
     * Default value is `"text"`.
     *
     * @returns Value of property `propertyName`
     */
    getPropertyName(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text of the {@link sap.m.Label} which have the labelFor property.
     *
     * @returns Value of property `text`
     */
    getText(): string;
    /**
     * Checks for control with labelFor property annotating other control
     *
     * @returns true if the Control has a label that matches the criteria
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey: string
    ): this;
    /**
     * Sets a new value for property {@link #getModelName modelName}.
     *
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"i18n"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setModelName(
      /**
       * New value for property `modelName`
       */
      sModelName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getParameters parameters}.
     *
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setParameters(
      /**
       * New value for property `parameters`
       */
      oParameters: any
    ): this;
    /**
     * Sets a new value for property {@link #getPropertyName propertyName}.
     *
     * The name of the control property to match the I18N text with.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"text"`.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setPropertyName(
      /**
       * New value for property `propertyName`
       */
      sPropertyName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text of the {@link sap.m.Label} which have the labelFor property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setText(
      /**
       * New value for property `text`
       */
      sText: string
    ): this;
  }

  export interface $LabelForSettings extends $MatcherSettings {
    /**
     * The text of the {@link sap.m.Label} which have the labelFor property.
     */
    text?: string | PropertyBindingInfo;

    /**
     * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
     */
    modelName?: string | PropertyBindingInfo;

    /**
     * The key of the I18N text in the containing {@link module:sap/base/i18n/ResourceBundle}.
     */
    key?: string | PropertyBindingInfo;

    /**
     * The parameters for replacing the placeholders of the I18N text. See {@link module:sap/base/i18n/ResourceBundle#getText}.
     */
    parameters?: any | PropertyBindingInfo | `{${string}}`;

    /**
     * The name of the control property to match the I18N text with.
     */
    propertyName?: string | PropertyBindingInfo;
  }
}

declare module "sap/ui/test/matchers/Matcher" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.23
   *
   * Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control
   * instance as parameter
   */
  export default class Matcher extends ManagedObject {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor
     * sap.ui.base.ManagedObject} can be used.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.matchers.Matcher with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Matcher>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.Matcher.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter.
     *
     * Should be overwritten by subclasses
     *
     * @returns true if the Control is matching the condition of the matcher
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
  }

  export interface $MatcherSettings extends $ManagedObjectSettings {}
}

declare module "sap/ui/test/matchers/Properties" {
  /**
   * @SINCE 1.27
   *
   * Checks if a control's properties have the provided values - all properties have to match their values.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     properties: {
   *         propertyName: "propertyValue"
   *     }
   * }
   * ```
   *  As of version 1.74, you can use regular expressions in declarative syntax:
   * ```javascript
   * {
   *     properties: {
   *         propertyName: {
   *             regex: {
   *                 source: "propertyValue$",
   *                 flags: "ig"
   *             }
   *         }
   *     }
   * }
   * ```
   */
  export default class Properties {
    constructor(
      /**
       * the object with the properties to be checked. Example:
       * ```javascript
       *
       * // Would filter for an enabled control with the text "Accept".
       * new Properties({
       *     // The property text has the exact value "Accept"
       *     text: "Accept",
       *     // The property enabled also has to be true
       *     enabled: true
       * })
       * ```
       *  If the value is a RegExp, it tests the RegExp with the value. RegExp only works with string properties.
       */
      oProperties: object
    );
  }
}

declare module "sap/ui/test/matchers/PropertyStrictEquals" {
  import {
    default as Matcher,
    $MatcherSettings,
  } from "sap/ui/test/matchers/Matcher";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Control from "sap/ui/core/Control";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.23
   *
   * Checks if a property has the exact same value.
   *
   * As of version 1.72, it is available as a declarative matcher with the following syntax:
   * ```javascript
   * {
   *     propertyStrictEquals: {
   *         name: "string",
   *         value: "any"
   *     }
   * }
   * ```
   */
  export default class PropertyStrictEquals extends Matcher {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new PropertyStrictEquals
       */
      mSettings?: $PropertyStrictEqualsSettings
    );

    /**
     * Creates a new subclass of class sap.ui.test.matchers.PropertyStrictEquals with name `sClassName` and
     * enriches it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PropertyStrictEquals>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.matchers.PropertyStrictEquals.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The Name of the property that is used for matching.
     *
     * @returns Value of property `name`
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The value of the property that is used for matching.
     *
     * @returns Value of property `value`
     */
    getValue(): any;
    /**
     * Checks if the control has a property that matches the value
     *
     * @returns true if the property has a strictly matching value.
     */
    isMatching(
      /**
       * the control that is checked by the matcher
       */
      oControl: Control
    ): boolean;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The Name of the property that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setName(
      /**
       * New value for property `name`
       */
      sName: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The value of the property that is used for matching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * @returns Reference to `this` in order to allow method chaining
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue: any
    ): this;
  }

  export interface $PropertyStrictEqualsSettings extends $MatcherSettings {
    /**
     * The Name of the property that is used for matching.
     */
    name?: string | PropertyBindingInfo;

    /**
     * The value of the property that is used for matching.
     */
    value?: any | PropertyBindingInfo | `{${string}}`;
  }
}

declare module "sap/ui/test/matchers/Sibling" {
  /**
   * @SINCE 1.91
   *
   * Checks if a control has a defined sibling. Available as a declarative matcher with the following syntax:
   *
   * ```javascript
   * {
   *     sibling: "object" // where "object" is a declarative matcher for the sibling
   * }
   * ```
   *  The declarative matcher for Sibling does not support **oOptions** parameters.
   */
  export default class Sibling {
    constructor(
      /**
       * the sibling control to check. Can be a control or a control ID. If undefined, the result will always
       * be true.
       */
      vSibling: object | string,
      /**
       * specifies how to match
       */
      oOptions?: {
        /**
         * whether to match by relationships of the DOM references. false by default
         */
        useDom: boolean;
        /**
         * match only if control's DOM reference is before the sibling's in the DOM tree
         */
        prev: boolean;
        /**
         * match only if control's DOM reference is after the sibling's in the DOM tree,
         */
        next: boolean;
        /**
         * how many levels of ancestors to search
         */
        level: boolean;
      }
    );
  }
}

declare module "sap/ui/test/Opa" {
  /**
   * @SINCE 1.22
   *
   * One Page Acceptance testing.
   */
  export default class Opa {
    /**
     * This class will help you write acceptance tests in one page or single page applications. You can wait
     * for certain conditions to be met.
     */
    constructor(
      /**
       * An object containing properties and functions. The newly created Opa will be extended by these properties
       * and functions using jQuery.extend.
       */
      extensionObject?: object
    );
    /**
     * A map of QUnit-style assertions to be used in an opaTest. Contains all methods available on QUnit.assert
     * for the running QUnit version. Available assertions are: ok, equal, propEqual, deepEqual, strictEqual
     * and their negative counterparts.
     *
     * For more information, see {@link module:sap/ui/test/opaQunit}.
     */
    static assert: QUnit.Assert;

    /**
     * The global configuration of Opa. The subset of the global values defined in {@link sap.ui.test.Opa.BaseParameters}.can
     * be overwritten in an individual `waitFor` call. The default values for the global configuration are:
     *
     * 	 - arrangements: A new Opa instance
     * 	 - actions: A new Opa instance
     * 	 - assertions: A new Opa instance
     * 	 - timeout : 15 seconds, 0 for infinite timeout
     * 	 - pollingInterval: 400 milliseconds
     * 	 - debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running
     * 			in debug mode.
     * 	 - asyncPolling: false  You can either directly manipulate the config, or extend it using {@link
     * 			sap.ui.test.Opa.extendConfig}.
     */
    static config: Config;

    /**
     * Waits until all waitFor calls are done.
     *
     * @returns If the waiting was successful, the promise will be resolved. If not it will be rejected
     */
    static emptyQueue(): jQuery.Promise;
    /**
     * @SINCE 1.48
     *
     * Extends and overwrites default values of the {@link sap.ui.test.Opa sap.ui.test.Opa.config} field. Sample
     * usage:
     * ```javascript
     *
     *
     *         var oOpa = new Opa();
     *
     *         // this statement will time out after 15 seconds and poll every 400ms
     *         // those two values come from the defaults of sap.ui.test.Opa.config
     *         oOpa.waitFor({
     *         });
     *
     *         // All wait for statements added after this will take other defaults
     *         Opa.extendConfig({
     *             timeout: 10,
     *             pollingInterval: 100
     *         });
     *
     *         // this statement will time out after 10 seconds and poll every 100 ms
     *         oOpa.waitFor({
     *         });
     *
     *         // this statement will time out after 20 seconds and poll every 100 ms
     *         oOpa.waitFor({
     *             timeout: 20;
     *         });
     *
     * ```
     */
    static extendConfig(
      /**
       * The values to be added to the existing config
       */
      options: Config
    ): void;
    /**
     * @SINCE 1.29.0
     *
     * Gives access to a singleton object you can save values in. Same as {@link sap.ui.test.Opa#getContext}
     *
     * @returns the context object
     */
    static getContext(): Record<string, any>;
    /**
     * @SINCE 1.25
     *
     * Reset Opa.config to its default values. All of the global values can be overwritten in an individual
     * waitFor call.
     *
     * The default values are:
     * 	 - arrangements: A new Opa instance
     * 	 - actions: A new Opa instance
     * 	 - assertions: A new Opa instance
     * 	 - timeout : 15 seconds, 0 for infinite timeout
     * 	 - pollingInterval: 400 milliseconds
     * 	 - debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running
     * 			in debug mode.
     * 	 -  executionDelay: 0 or 50 (depending on the browser). The value is a number representing milliseconds.
     * 			The executionDelay will slow down the execution of every single waitFor statement to be delayed by the
     * 			number of milliseconds. This does not effect the polling interval it just adds an initial pause. Use
     * 			this parameter to slow down OPA when you want to watch your test during development or checking the UI
     * 			of your app. It is not recommended to use this parameter in any automated test executions.
     * 	 - asyncPolling: false
     */
    static resetConfig(): void;
    /**
     * @SINCE 1.40.1
     *
     * Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements
     * registered by {@link sap.ui.test.Opa#waitFor} will not be invoked anymore and the promise returned by
     * {@link sap.ui.test.Opa.emptyQueue} will be rejected When it is called inside of a check in {@link sap.ui.test.Opa#waitFor}
     * the success function of this waitFor will not be called.
     */
    static stopQueue(): void;
    /**
     * Calls the static emptyQueue function in the Opa namespace {@link sap.ui.test.Opa.emptyQueue}
     */
    emptyQueue(): void;
    /**
     * Calls the static extendConfig function in the Opa namespace {@link sap.ui.test.Opa.extendConfig}
     */
    extendConfig(): void;
    /**
     * Gives access to a singleton object you can save values in. This object will only be created once and
     * it will never be destroyed. That means you can use it to save values you need in multiple separated tests.
     *
     * @returns the context object
     */
    getContext(): object;
    /**
     * Schedule a promise on the OPA queue.The promise will be executed in order with all waitFors - any subsequent
     * waitFor will be executed after the promise is done. The promise is not directly chained, but instead
     * its result is awaited in a new waitFor statement. This means that any "thenable" should be acceptable.
     *
     * @returns promise which is the result of a {@link sap.ui.test.Opa#waitFor}
     */
    iWaitForPromise(
      /**
       * promise to schedule on the OPA queue
       */
      oPromise: jQuery.Promise | Promise<any>
    ): jQuery.Promise;
    /**
     * Queues up a waitFor command for Opa. The Queue will not be emptied until {@link sap.ui.test.Opa.emptyQueue}
     * is called. If you are using {@link module:sap/ui/test/opaQunit}, emptyQueue will be called by the wrapped
     * tests.
     *
     * If you are using Opa5, waitFor takes additional parameters. They can be found here: {@link sap.ui.test.Opa5#waitFor}.
     * Waits for a check condition to return true, in which case a success function will be called. If the timeout
     * is reached before the check returns true, an error function will be called.
     *
     * @returns an object extending a jQuery promise. The object is essentially a jQuery promise with an additional
     * "and" method that can be used for chaining waitFor statements. The promise is resolved when the waitFor
     * completes successfully. The promise is rejected with the options object, if an error occurs. In this
     * case, options.errorMessage will contain a detailed error message containing the stack trace and Opa logs.
     */
    waitFor(
      /**
       * configuration options
       */
      options: WaitForOptions
    ): Chain;
  }
  /**
   * Configuration parameters for Opa.
   */
  export type BaseParameters = {
    /**
     * (seconds) Specifies how long the waitFor function polls before it fails. The default value is 15 seconds,
     * 0 means it will wait forever.
     */
    timeout?: int;
    /**
     * (seconds) @since 1.47 Specifies how long the waitFor function polls before it fails in debug mode. 0
     * means it will wait forever.
     */
    debugTimeout?: int;
    /**
     * (milliseconds) Specifies how often the waitFor function polls. The default is 400ms.
     */
    pollingInterval?: int;
    /**
     * @since 1.55 Enable asynchronous polling after success() call. This allows more stable autoWaiter synchronization
     * with event flows originating from within success(). Especially useful to stabilize synchronization with
     * overflow toolbars. False by default.
     */
    asyncPolling?: boolean;
  };

  /**
   * Used as return value of the {@link sap.ui.test.Opa#waitFor} to assist chaining
   */
  export type Chain = Opa & {
    /**
     * A reference to the same `sap.ui.test.Opa` instance that can be used for chaining statements
     */
    and: Opa;
  };

  /**
   * The global configuration of Opa.
   */
  export type Config = BaseParameters & {
    /**
     * A new Opa instance
     */
    arrangements?: Opa;
    /**
     * A new Opa instance
     */
    actions?: Opa;
    /**
     * A new Opa instance
     */
    assertions?: Opa;
    /**
     * The value is a number representing milliseconds. The default values are 0 or 50 (depending on the browser).
     * The executionDelay will slow down the execution of every single waitFor statement to be delayed by the
     * number of milliseconds. This does not effect the polling interval it just adds an initial pause. Use
     * this parameter to slow down OPA when you want to watch your test during development or checking the UI
     * of your app. It is not recommended to use this parameter in any automated test executions.
     */
    executionDelay?: int;
  };

  /**
   * Configuration parameters for an individual {@link sap.ui.test.Opa#waitFor} call.
   */
  export type WaitForOptions = BaseParameters & {
    /**
     * Will get invoked in every polling interval. If it returns true, the check is successful and the polling
     * will stop. The first parameter passed into the function is the same value that gets passed to the success
     * function. Returning something other than boolean in the check will not change the first parameter of
     * success.
     */
    check?: (p1: any) => boolean;
    /**
     * Will get invoked after the check function returns true. If there is no check function defined, it will
     * be directly invoked. waitFor statements added in the success handler will be executed before previously
     * added waitFor statements.
     */
    success?: Function;
    /**
     * Will be displayed as an errorMessage depending on your unit test framework. Currently the only adapter
     * for Opa is QUnit. This message is displayed there if Opa has reached its timeout but QUnit has not yet
     * reached it.
     */
    errorMessage?: string;
  };
}

declare module "sap/ui/test/Opa5" {
  import BaseObject from "sap/ui/base/Object";

  import HashChanger from "sap/ui/core/routing/HashChanger";

  import OpaPlugin from "sap/ui/test/OpaPlugin";

  import UI5Element from "sap/ui/core/Element";

  import Action1 from "sap/ui/test/actions/Action";

  import { BaseParameters as BaseParameters1 } from "sap/ui/test/Opa";

  import Matcher1 from "sap/ui/test/matchers/Matcher";

  /**
   * @SINCE 1.22
   *
   * UI5 extension of the OPA framework.
   *
   * Helps you when writing tests for UI5 apps. Provides convenience to wait and retrieve for UI5 controls
   * without relying on global IDs. Makes it easy to wait until your UI is in the state you need for testing,
   * for example waiting for back-end data.
   */
  export default class Opa5 extends BaseObject {
    /**
     * See:
     * 	{@link topic:2696ab50faad458f9b4027ec2f9b884d Opa5}
     */
    constructor();
    /**
     * A map of QUnit-style assertions to be used in an opaTest.
     *
     * Contains all methods available on `QUnit.assert` for the running QUnit version. Available assertions
     * are: `ok`, `equal`, `propEqual`, `deepEqual`, `strictEqual` and their negative counterparts. You can
     * define custom OPA5 assertions in the extensions section of {@link sap.ui.test.Opa5.extendConfig}.
     *
     * Example usage:
     * ```javascript
     *
     *   oOpa5.waitFor({
     *     success: function () {
     *       Opa5.assert.ok(true, "Should be true");
     *     }
     *   });
     * ```
     *
     *
     * For more information, see {@link module:sap/ui/test/opaQunit}.
     */
    static assert: QUnit.Assert;

    /**
     * @SINCE 1.25
     *
     * Creates a set of page objects, each consisting of actions and assertions and adds them to the Opa configuration.
     *
     * Use page objects to structure your actions and assertions based on parts of the screen. This helps to
     * avoid name clashes and to structure your tests.
     *
     * @returns The created page object. It will look like this:
     * ```javascript
     *
     *     {
     *       <your-page-object-name> : {
     *         actions: // an instance of baseClass or Opa5 with all the actions defined above
     *         assertions: // an instance of baseClass or Opa5 with all the assertions defined above
     *       }
     *     }
     *   ```
     */
    static createPageObjects(
      /**
       * Multiple page objects are possible, provide at least actions or assertions
       */
      mPageObjects: Record<string, PageObjectDefinition>
    ): Record<string, Object>;
    /**
     * Waits until all waitFor calls are done See {@link sap.ui.test.Opa.emptyQueue} for the description
     *
     * @returns If the waiting was successful, the promise will be resolved. If not it will be rejected
     */
    static emptyQueue(): jQuery.Promise;
    /**
     * @SINCE 1.49
     *
     * Extends and overwrites default values of the {@link sap.ui.test.Opa.Config}. Most frequent usecase:
     * ```javascript
     *
     *
     *         // Every waitFor will append this namespace in front of your viewName
     *         Opa5.extendConfig({
     *            viewNamespace: "namespace.of.my.views."
     *         });
     *
     *         var oOpa = new Opa5();
     *
     *         // Looks for a control with the id "myButton" in a View with the name "namespace.of.my.views.Detail"
     *         oOpa.waitFor({
     *              id: "myButton",
     *              viewName: "Detail"
     *         });
     *
     *         // Looks for a control with the id "myList" in a View with the name "namespace.of.my.views.Master"
     *         oOpa.waitFor({
     *              id: "myList",
     *              viewName: "Master"
     *         });
     *
     * ```
     *
     *
     * Sample usage:
     * ```javascript
     *
     *
     *         var oOpa = new Opa5();
     *
     *         // this statement will  will time out after 15 seconds and poll every 400ms.
     *         // those two values come from the defaults of {@link sap.ui.test.Opa.config}.
     *         oOpa.waitFor({
     *         });
     *
     *         // All wait for statements added after this will take other defaults
     *         Opa5.extendConfig({
     *             timeout: 10,
     *             pollingInterval: 100
     *         });
     *
     *         // this statement will time out after 10 seconds and poll every 100 ms
     *         oOpa.waitFor({
     *         });
     *
     *         // this statement will time out after 20 seconds and poll every 100 ms
     *         oOpa.waitFor({
     *             timeout: 20;
     *         });
     *
     * ```
     */
    static extendConfig(
      /**
       * The values to be added to the existing config
       */
      options: Config
    ): void;
    /**
     * @SINCE 1.29.0
     *
     * Gives access to a singleton object you can save values in. See {@link sap.ui.test.Opa.getContext} for
     * the description
     *
     * @returns the context object
     */
    static getContext(): Record<string, any>;
    /**
     * Returns the HashChanger object in the current context. If an iframe is launched, it will return the iframe's
     * HashChanger.
     *
     * @returns The HashChanger instance
     */
    static getHashChanger(): HashChanger;
    /**
     * Returns the jQuery object in the current context. If an iframe is launched, it will return the iframe's
     * jQuery object.
     *
     * @returns The jQuery object
     */
    static getJQuery(): jQuery;
    /**
     * Returns the Opa plugin used for retrieving controls. If an iframe is launched, it will return the iframe's
     * plugin.
     *
     * @returns The plugin instance
     */
    static getPlugin(): OpaPlugin;
    /**
     * @SINCE 1.49
     *
     * Return particular test lib config object. This method is intended to be used by test libraries to access
     * their configuration provided by the test in the testLibs section in {@link sap.ui.test.Opa5.extendConfig}
     *
     * @returns this test library config object or empty object if configuration is not provided
     */
    static getTestLibConfig(
      /**
       * test library name
       */
      sTestLibName: string
    ): Record<string, string | null>;
    /**
     * Returns the QUnit utils object in the current context. If an iframe is launched, it will return the iframe's
     * QUnit utils.
     *
     * @returns The QUnit utils
     */
    static getUtils(): /* was: sap.ui.test.qunit.QUnitUtils */ any;
    /**
     * Returns the window object in the current context. If an iframe is launched, it will return the iframe's
     * window.
     *
     * @returns The window of the iframe
     */
    static getWindow(): Window;
    /**
     * @SINCE 1.48
     *
     * Starts an app in an iframe. Only works reliably if running on the same server.
     *
     * @returns A promise that gets resolved on success
     */
    static iStartMyAppInAFrame(
      /**
       * The source URL of the iframe or, since 1.53, you can provide a startup configuration object as the only
       * parameter.
       */
      vSourceOrOptions:
        | string
        | {
            /**
             * The source of the iframe
             */
            source: string;
            /**
             * The timeout for loading the iframe in seconds - default is 80
             */
            timeout?: number;
            /**
             * Since 1.53, activates autoWait while the application is starting up. This allows more time for application
             * startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless
             * of the global autoWait value, to prevent issues in existing tests.
             */
            autoWait?: boolean;
            /**
             * Since 1.57, sets a fixed width for the iframe.
             */
            width?: string | number;
            /**
             * Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive
             * applications on screens of varying sizes. Since 1.65, by default, the iframe dimensions are 60% of the
             * default screen size, considered to be 1280x1024.
             */
            height?: string | number;
          },
      /**
       * The timeout for loading the iframe in seconds - default is 80.
       */
      iTimeout?: number,
      /**
       * Since 1.53, activates autoWait while the application is starting up. This allows more time for application
       * startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless
       * of the global autoWait value, to prevent issues in existing tests.
       */
      autoWait?: boolean,
      /**
       * Since 1.57, sets a fixed width for the iframe.
       */
      width?: string | number,
      /**
       * Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive
       * applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window
       * dimensions.
       */
      height?: string | number
    ): jQuery.Promise;
    /**
     * Removes the iframe from the DOM and removes all the references to its objects. Use {@link sap.ui.test.Opa5#hasAppStartedInAFrame}
     * to ensure that an iframe has been started and teardown can be safely performed.
     *
     * @returns A promise that gets resolved on success. If no iframe has been created or an error occurs, the
     * promise is rejected with the options object. A detailed error message containing the stack trace and
     * Opa logs is available in options.errorMessage.
     */
    static iTeardownMyAppFrame(): jQuery.Promise;
    /**
     * @SINCE 1.25
     *
     * Resets Opa.config to its default values. See {@link sap.ui.test.Opa5#waitFor} for the description Default
     * values for OPA5 are:
     * 	 - viewNamespace: empty string
     * 	 - arrangements: instance of OPA5
     * 	 - actions: instance of OPA5
     * 	 - assertions: instance of OPA5
     * 	 - visible: true
     * 	 - enabled: false
     * 	 - editable: false
     * 	 - timeout : 15 seconds, 0 for infinite timeout
     * 	 - pollingInterval: 400 milliseconds
     * 	 - debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running
     * 			in debug mode.
     * 	 - autoWait: false - since 1.42
     * 	 - appParams: object with URI parameters for the tested app - since 1.48
     */
    static resetConfig(): void;
    /**
     * Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements
     * registered by {@link sap.ui.test.Opa5#waitFor} will not be invoked anymore and the promise returned by
     * {@link sap.ui.test.Opa5.emptyQueue} will be rejected. When its called inside of a check in {@link sap.ui.test.Opa5#waitFor}
     * the success function of this waitFor will not be called.
     */
    static stopQueue(): void;
    /**
     * Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyAppInAFrame} or {@link
     * sap.ui.test.Opa5#iStartMyUIComponent}
     *
     * @returns A boolean indicating whether the application has been started regardless of how it was started
     */
    hasAppStarted(): boolean;
    /**
     * Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyAppInAFrame}
     *
     * @returns A boolean indicating whether the application has been started in an iframe
     */
    hasAppStartedInAFrame(): boolean;
    /**
     * Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyUIComponent}
     *
     * @returns A boolean indicating whether the application has been started as a UIComponent
     */
    hasUIComponentStarted(): boolean;
    /**
     * @SINCE 1.48
     *
     * Starts an app in an iframe. Only works reliably if running on the same server.
     *
     * @returns A promise that gets resolved on success
     */
    iStartMyAppInAFrame(
      /**
       * The source URL of the iframe or, since 1.53, you can provide a startup configuration object as the only
       * parameter.
       */
      vSourceOrOptions:
        | string
        | {
            /**
             * The source of the iframe
             */
            source: string;
            /**
             * The timeout for loading the iframe in seconds - default is 80
             */
            timeout?: number;
            /**
             * Since 1.53, activates autoWait while the application is starting up. This allows more time for application
             * startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless
             * of the global autoWait value, to prevent issues in existing tests.
             */
            autoWait?: boolean;
            /**
             * Since 1.57, sets a fixed width for the iframe.
             */
            width?: string | number;
            /**
             * Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive
             * applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window
             * dimensions.
             */
            height?: string | number;
          },
      /**
       * The timeout for loading the iframe in seconds - default is 80
       */
      iTimeout?: number,
      /**
       * Since 1.53, activates autoWait while the application is starting up. This allows more time for application
       * startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless
       * of the global autoWait value, to prevent issues in existing tests.
       */
      autoWait?: boolean,
      /**
       * Since 1.57, sets a fixed width for the iframe.
       */
      width?: string | number,
      /**
       * Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive
       * applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window
       * dimensions.
       */
      height?: string | number
    ): jQuery.Promise;
    /**
     * @SINCE 1.48
     *
     * Starts a UIComponent.
     *
     * @returns A promise that gets resolved on success.
     */
    iStartMyUIComponent(
      /**
       * An Object that contains the configuration for starting up a UIComponent.
       */
      oOptions: {
        /**
         * Will be passed to {@link sap.ui.core.UIComponent UIComponent}, please read the respective documentation.
         */
        componentConfig: object;
        /**
         * Sets the hash {@link sap.ui.core.routing.HashChanger#setHash} to the given value. If this parameter is
         * omitted, the hash will always be reset to the empty hash - "".
         */
        hash?: string;
        /**
         * The timeout for loading the UIComponent in seconds - {@link sap.ui.test.Opa5#waitFor}.
         */
        timeout?: number;
        /**
         * Since 1.53, activates autoWait while the application is starting up. This allows more time for application
         * startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless
         * of the global autoWait value, to prevent issues in existing tests.
         */
        autoWait?: boolean;
      }
    ): jQuery.Promise;
    /**
     * Tears down the started application regardless of how it was started. Removes the iframe launched by {@link
     * sap.ui.test.Opa5#iStartMyAppInAFrame} or destroys the UIComponent launched by {@link sap.ui.test.Opa5#iStartMyUIComponent}.
     * This function is designed to make the test's teardown independent of the startup. Use {@link sap.ui.test.Opa5#hasAppStarted}
     * to ensure that the application has been started and teardown can be safely performed.
     *
     * @returns A promise that gets resolved on success. If nothing has been started or an error occurs, the
     * promise is rejected with the options object. A detailed error message containing the stack trace and
     * Opa logs is available in options.errorMessage.
     */
    iTeardownMyApp(): jQuery.Promise;
    /**
     * Removes the iframe from the DOM and removes all the references to its objects Use {@link sap.ui.test.Opa5#hasAppStartedInAFrame}
     * to ensure that an iframe has been started and teardown can be safely performed.
     *
     * @returns A promise that gets resolved on success. If no iframe has been created or an error occurs, the
     * promise is rejected with the options object. A detailed error message containing the stack trace and
     * Opa logs is available in options.errorMessage.
     */
    iTeardownMyAppFrame(): jQuery.Promise;
    /**
     * @SINCE 1.48
     *
     * Destroys the UIComponent and removes the div from the dom like all the references on its objects. Use
     * {@link sap.ui.test.Opa5#hasUIComponentStarted} to ensure that a UIComponent has been started and teardown
     * can be safely performed.
     *
     * @returns a promise that gets resolved on success. If no UIComponent has been started or an error occurs,
     * the promise is rejected with the options object. A detailed error message containing the stack trace
     * and Opa logs is available in options.errorMessage.
     */
    iTeardownMyUIComponent(): jQuery.Promise;
    /**
     * Schedule a promise on the OPA5 queue.The promise will be executed in order with all waitFors - any subsequent
     * waitFor will be executed after the promise is done. The promise is not directly chained, but instead
     * its result is awaited in a new waitFor statement. This means that any "thenable" should be acceptable.
     *
     * @returns promise which is the result of a {@link sap.ui.test.Opa5#waitFor}
     */
    iWaitForPromise(
      /**
       * promise to schedule on the Opa5 queue
       */
      oPromise: jQuery.Promise | Promise<any>
    ): jQuery.Promise;
    /**
     *
     * @returns an object extending a jQuery promise. The object is essentially a jQuery promise with an additional
     * "and" method that can be used for chaining waitFor statements. The promise is resolved when the waitFor
     * completes successfully. The promise is rejected with the options object, if an error occurs. In this
     * case, options.errorMessage will contain a detailed error message containing the stack trace and Opa logs.
     */
    waitFor(
      /**
       * a superset of the parameters of {@link sap.ui.test.Opa#waitFor}
       */
      options: SingleControlSelector | MultiControlSelector
    ): Chain;
  }
  /**
   * An action simulates user interaction on a control
   */
  export type Action = ((p1: UI5Element | null) => void) | Action1;

  /**
   * @SINCE 1.53
   *
   * Configuration parameters for Opa5.
   */
  export type BaseParameters = BaseParameters1 & {
    /**
     * viewName prefix. Recommended to be set in {@link sap.ui.test.Opa5.extendConfig} instead.
     */
    viewNamespace?: string;
    /**
     * If set to false, Opa5 will also look for unrendered and invisible controls.
     */
    visible?: boolean;
    /**
     * @since 1.66 If set to false, Opa5 will look for both enabled and disabled controls. Note that this option's
     * default value is related to the autoWait mechanism:
     * 	 -  When autoWait is enabled globally or in the current waitFor, the default value for options.enabled
     * 			is true.
     * 	 -  When autoWait is not used, the default value for options.enabled is false.  This means that
     * 			if you use autoWait and you want to find a disabled control, you need to explicitly set options.enabled
     * 			to false.
     */
    enabled?: boolean;
    /**
     * @since 1.80 If set to true, Opa5 will match only editable controls. If set to false, Opa5 will match
     * both editable and non-editable controls.
     */
    editable?: boolean;
    /**
     * @since 1.42 Only has an effect if set to true. Since 1.53 it can also be a plain object. When autoWait
     * is true, the waitFor statement will not execute success callbacks as long as there is pending asynchronous
     * work such as for example: open XMLHTTPRequests (requests to a server), scheduled delayed work and promises,
     * unfinished UI navigation. In addition, the control state will be checked with the {@link sap.ui.test.matchers.Interactable}
     * matcher, and the control will have to be enabled. So when autoWait is enabled, success behaves like an
     * action in terms of waiting. It is recommended to set this value to true for all your waitFor statements
     * using:
     * ```javascript
     *
     *     Opa5.extendConfig({
     *         autoWait: true
     *     });
     * ```
     *  Why it is recommended: When writing a huge set of tests and executing them frequently you might face
     * tests that are sometimes successful but sometimes they are not. Setting the autoWait to true should stabilize
     * most of those tests. The default "false" could not be changed since it causes existing tests to fail.
     * There are cases where you do not want to wait for controls to be "Interactable": For example when you
     * are testing the Busy indication of your UI during the sending of a request. But these cases are the exception
     * so it is better to explicitly adding autoWait: false to this waitFor.
     * ```javascript
     *
     *     this.waitFor({
     *         id: "myButton",
     *         autoWait: false,
     *         success: function (oButton) {
     *              Opa5.assert.ok(oButton.getBusy(), "My Button was busy");
     *         }
     *     });
     * ```
     *  This is also the easiest way of migrating existing tests. First extend the config, then see which waitFors
     * will time out and finally disable autoWait in these tests.
     */
    autoWait?: boolean;
  };

  /**
   * Used as return value of the {@link sap.ui.test.Opa5#waitFor} to assist chaining
   */
  export type Chain = Opa5 & {
    /**
     * A reference to the same `sap.ui.test.Opa5` instance that can be used for chaining statements
     */
    and: Opa5;
  };

  /**
   * The global configuration of Opa5.
   */
  export type Config = BaseParameters & {
    /**
     * A new Opa5 instance
     */
    arrangements?: Opa5;
    /**
     * A new Opa5 instance
     */
    actions?: Opa5;
    /**
     * A new Opa5 instance
     */
    assertions?: Opa5;
    /**
     * The value is a number representing milliseconds. The default values are 0 or 50 (depending on the browser).
     * The executionDelay will slow down the execution of every single waitFor statement to be delayed by the
     * number of milliseconds. This does not effect the polling interval it just adds an initial pause. Use
     * this parameter to slow down OPA when you want to watch your test during development or checking the UI
     * of your app. It is not recommended to use this parameter in any automated test executions.
     */
    executionDelay?: int;
    /**
     * object with URI parameters for the tested app - since 1.48
     */
    appParams?: Record<string, string>;
  };

  /**
   * Configuration parameters for an individual {@link sap.ui.test.Opa5#waitFor} call.
   */
  export type ControlsBaseSelector = BaseParameters & {
    /**
     * The name of a view. If viewName is set, controls will be searched only inside this view. If control ID
     * is given, it will be considered to be relative to the view.
     */
    viewName?: string;
    /**
     * @since 1.62 The ID of a view. Can be used alone or in combination with viewName and viewNamespace. *
     * Always set view ID if there are multiple views with the same name.
     */
    viewId?: string;
    /**
     * @since 1.63 The ID of a fragment. If set, controls will match only if their IDs contain the fragment
     * ID prefix.
     */
    fragmentId?: string;
    /**
     * Matchers used to filter controls. Could be a function, a single matcher instance, an array of matcher
     * instances, or, since version 1.72, a plain object to specify matchers declaratively. For a full list
     * of built-in matchers, see {@link sap.ui.test.matchers}.
     *
     * Matchers are applied to each control found by the `waitFor` function. The matchers are a pipeline: the
     * first matcher gets a control as an input parameter, each subsequent matcher gets the same input as the
     * previous one, if the previous output is `true`.
     *
     * If the previous output is a truthy value, the next matcher will receive this value as an input parameter.
     * If there is a matcher that does not match a control (for example, returns a falsy value), then the control
     * is filtered out.
     *
     * Check function is only called if the matchers matched at least one control, for example, it is not called
     * if matchers filter out all controls/values. Check and success are be called with all matching controls
     * as an input parameter. A matcher inline function has one parameter - an array of controls, and returns
     * an array of the filtered controls.
     *
     * A matcher instance could extend `sap.ui.test.matchers.Matcher` and must have a method with name `isMatching`,
     * that accepts an array of controls and returns an array of the filtered controls.
     *
     * A declarative matcher object is a set of key-value pairs created by the object literal notation, such
     * that:
     * 	Every key is a name of an OPA5 built-in matcher, starting with a lower case letter. The following example
     * declares an `sap.ui.test.matchers.Properties` matcher:
     * ```javascript
     *             matchers: {
     *                 properties: {<...>}
     *             }
     * ```
     *   Every value is an object or an array or objects. Each object represents the properties that
     * will be fed to one instance of the declared matcher. The following example declares one `sap.ui.test.matchers.Properties`
     * matcher for property "text" and value "hello":
     * ```javascript
     *             matchers: {
     *                 properties: {text: "hello"}
     *             }
     * ```
     *
     *
     * The following example declares two `sap.ui.test.matchers.Properties` matchers (the `text` property with
     * value `hello` and the `number` property with value `0`):
     * ```javascript
     *             matchers: {
     *                 properties: [
     *                     {text: "hello"},
     *                     {number: 0}
     *             ]}
     * ```
     */
    matchers?: Matcher | Matcher[];
    /**
     * Selects all control by their type. It is usually combined with a viewName or searchOpenDialogs. If no
     * control is matching the type, an empty array will be returned. Here are some samples:
     * ```javascript
     *
     *         this.waitFor({
     *             controlType: "sap.m.Button",
     *             success: function (aButtons) {
     *                 // aButtons is an array of all visible buttons
     *             }
     *         });
     *
     *         // control type will also return controls that extend the control type
     *         // this will return an array of visible sap.m.List and sap.m.Table since both extend List base
     *         this.waitFor({
     *             controlType: "sap.m.ListBase",
     *             success: function (aLists) {
     *                 // aLists is an array of all visible Tables and Lists
     *             }
     *         });
     *
     *         // control type is often combined with viewName - only controls that are inside of the view
     *         // and have the correct type will be returned
     *         this.waitFor({
     *             viewName: "my.View"
     *             controlType: "sap.m.Input",
     *             success: function (aInputs) {
     *                 // aInputs are all sap.m.Inputs inside of a view called 'my.View'
     *             }
     *         });
     *     ```
     */
    controlType?: string;
    /**
     * If set to true, Opa5 will only look in open dialogs. All the other values except control type will be
     * ignored
     */
    searchOpenDialogs?: boolean;
    /**
     * @since 1.80 If set to true, the {@link sap.ui.test.matchers.Interactable} matcher will be applied. If
     * autoWait is true, this option has no effect and interactable will always be true. If autoWait is false,
     * which is the default state, the value of the interactable property will have an effect. When interactable
     * is true, enabled will also be set to true, unless declared otherwise.
     */
    interactable?: boolean;
    /**
     * Invoked when the timeout is reached and the check never returned true.
     */
    error?: Function;
    /**
     * Will be displayed as an errorMessage depending on your unit test framework. Currently the only adapter
     * for Opa5 is QUnit. This message is displayed if Opa5 has reached its timeout before QUnit has reached
     * it.
     */
    errorMessage?: string;
    /**
     * Available since 1.34.0. An array of functions or Actions or a mixture of both. An action has an 'executeOn'
     * function that will receive a single control as a parameter. If there are multiple actions defined all
     * of them will be executed (first in first out) on each control of, similar to the matchers. Here is one
     * of the most common usages: ` function (sButtonId) { // executes a Press on a button with a specific id
     * new Opa5().waitFor({ id: sButtonId, actions: new Press() }); }; ` But actions will only be executed once
     * and only after the check function returned true. Before actions are executed the {@link sap.ui.test.matchers.Interactable}
     * matcher and the internal autoWait logic will check if the Control is currently able to perform actions
     * if it is not, Opa5 will try again after the 'pollingInterval'. That means actions will only be executed
     * if:
     * 	 -  Controls and their parents are visible, not busy and not hidden behind a blocking layer
     * 	 -  The controls are not hidden behind static elements such as dialogs
     * 	 -  There is no pending asynchronous work performed by the application   If there are multiple
     * 			controls in Opa5's result set the action will be executed on all of them. The actions will be invoked
     * 			directly before success is called. In the documentation of the success parameter there is a list of conditions
     * 			that have to be fulfilled. They also apply for the actions. There are some predefined actions in the
     * 			{@link sap.ui.test.actions} namespace. since 1.42 an Action may add other waitFors. The next action or
     * 			the success handler will not be executed until the waitFor of the action has finished. An example:
     * ```javascript
     *
     *     this.waitFor({
     *         id: "myButton",
     *         actions: function (oButton) {
     *            // this action is executed first
     *            this.waitFor({
     *              id: "anotherButton",
     *              actions: function () {
     *                // This is the second function that will be executed
     *                // Opa will also wait until anotherButton is Interactable before executing this function
     *              },
     *              success: function () {
     *                // This is the third function that will be executed
     *              }
     *            })
     *         },
     *         success: function () {
     *             // This is the fourth function that will be executed
     *         }
     *     });
     *     ```
     *  Executing multiple actions will not wait between actions for a control to become "Interactable" again.
     * If you need waiting between actions you need to split the actions into multiple 'waitFor' statements.
     */
    actions?: Action | Action[];
  };

  /**
   * Matchers used to filter controls.
   */
  export type Matcher =
    | ((p1: UI5Element) => void)
    | Record<string, object>
    | Matcher1;

  /**
   * Configuration parameters for an individual {@link sap.ui.test.Opa5#waitFor} call. Contain criteria for
   * selecting one or multiple controls.
   */
  export type MultiControlSelector = ControlsBaseSelector & {
    /**
     * Regex for matching either the ID of a control, or the ID of a control inside a view.
     *
     * If both a regex and a viewName are provided, Opa5 only looks for controls in the view with a matching
     * ID.
     *
     * Example of a waitFor:
     * ```javascript
     *
     *
     *         this.waitFor({
     *             id: /my/,
     *             viewName: "myView"
     *         });
     *
     * ```
     *  The view that is searched in:
     * ```javascript
     *
     *
     *         <mvc:View xmlns:mvc="sap.ui.core.mvc" xmlns="sap.m">
     *             <Button id="myButton">
     *             </Button>
     *             <Button id="bar">
     *             </Button>
     *             <Button id="baz">
     *             </Button>
     *             <Image id="myImage"></Image>
     *         </mvc:View>
     *
     * ```
     *
     *
     * Will result in matching two controls, the image with the effective ID myView--myImage and the button
     * myView--myButton. Although the IDs of the controls myView--bar and myView--baz contain a my, they will
     * not be matched since only the part you really write in your views will be matched.
     */
    id?: RegExp;
    /**
     * Will get invoked in every polling interval. If it returns true, the check is successful and the polling
     * will stop. The first parameter passed into the function is the same value that gets passed to the success
     * function. Returning something other than boolean in check will not change the first parameter of success.
     */
    check?: (p1: UI5Element[]) => boolean;
    /**
     * Will get invoked after the following conditions are met:
     * 	 -  One or multiple controls were found using controlType, Id, viewName. If visible is true (it is by
     * 			default), the controls also need to be rendered.
     * 	 -  The whole matcher pipeline returned true for at least one control, or there are no matchers
     * 	 -  The check function returned true, or there is no check function   The first parameter passed
     * 			into the function is an array of controls (viewName, controlType, multiple ID's, regex ID's) that matched
     * 			all matchers. Matchers can alter the array to something different. Please read the documentation of waitFor's
     * 			matcher parameter.
     */
    success?: (p1: UI5Element[]) => void;
  };

  /**
   * Configuration parameters for an individual {@link sap.ui.test.Opa5#waitFor} call.
   */
  export type SingleControlSelector = ControlsBaseSelector & {
    /**
     * The global ID of a control, or the ID of a control inside a view.
     */
    id: string;
    /**
     * Will get invoked in every polling interval. If it returns true, the check is successful and the polling
     * will stop. The first parameter passed into the function is the same value that gets passed to the success
     * function. Returning something other than boolean in check will not change the first parameter of success.
     */
    check?: (p1: UI5Element) => boolean;
    /**
     * Will get invoked if the following conditions are met:
     * 	 -  A control was found using viewName and Id that maches any addiotnally specified criteria e.g. controlType,
     * 			matchers. If visible is true (it is by default), the control also needs to be rendered.
     * 	 -  The check function returned true, or there is no check function
     */
    success?: (p1: UI5Element) => void;
  };

  /**
   * @SINCE 1.25
   *
   * Settings for a new page object, consisting of actions and assertions.
   */
  export type PageObjectDefinition = {
    /**
     * When a `viewName` is given, all `waitFor` calls inside of the page object will get a `viewName` parameter.
     *
     * Example:
     * ```javascript
     *
     *     Opa5.createPageObjects({
     *       viewName: "myView",
     *       onMyPageWithViewName: {
     *         assertions: {
     *           iWaitForAButtonInMyView: function () {
     *             this.waitFor({
     *               id: "myButton",
     *               success: function (oButton) {
     *                 // the button is defined in the view myView
     *               }
     *             });
     *           }
     *         }
     *       }
     *     });
     *   ```
     *  This saves you repeating the `viewName` in every `waitFor` statement of the page object. It is possible
     * to overwrite the `viewName` of the page object in a specific `waitFor` call. So if you have specified
     * a `viewName: "myView"` in your page object and you want to look for a control with a global ID, you may
     * use `viewName: ""` in a `waitFor` to overwrite the `viewName` of the page object.
     *
     * Example:
     * ```javascript
     *
     *     // waits for a button with the global id "myButton"
     *     this.waitFor({
     *       id: "myButton",
     *       viewName: "",
     *       success: function (oButton) {
     *         // act when button is found
     *       }
     *     });
     *   ```
     */
    viewName?: string;
    /**
     * When a `viewId` is given, all `waitFor` calls inside of the page object will get a `viewId` parameter.
     * Use when there are multiple views with the same viewName.
     */
    viewId?: string;
    /**
     * Base class for the page object's actions and assertions
     */
    baseClass?: Function;
    /**
     * Namespace prefix for the page object's actions and assertions. Use it if you use page objects from multiple
     * projects in the same test build.
     */
    namespace?: string;
    /**
     * A map of functions that can be used as arrangement or action in Opa tests. Only the test decides whether
     * a function is used as arrangement or action. Each function typically contains one or multiple `waitFor`
     * statements.
     */
    actions?: Record<string, Function>;
    /**
     * A map of functions that can be used as assertions in Opa tests.
     */
    assertions?: Record<string, Function>;
  };
}

declare module "sap/ui/test/OpaExtension" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.48
   *
   * OPA extension interface.
   */
  export default class OpaExtension extends BaseObject {
    /**
     * OPA extension interface.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.OpaExtension with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OpaExtension>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.OpaExtension.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/ui/test/OpaPlugin" {
  import BaseObject from "sap/ui/base/Object";

  import UI5Element from "sap/ui/core/Element";

  import Metadata from "sap/ui/base/Metadata";

  import View from "sap/ui/core/mvc/View";

  /**
   * @SINCE 1.22
   *
   * A Plugin to search UI5 controls.
   */
  export default class OpaPlugin extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.OpaPlugin with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OpaPlugin>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.ui.test.OpaPlugin.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Gets all the controls or elements of a certain type that are currently instantiated. If the type is omitted,
     * all controls and elements are returned.
     *
     * @returns an array of the found controls (can be empty)
     */
    getAllControls(
      /**
       * the control type, e.g: sap.m.CheckBox
       */
      fnConstructorType?: Function,
      /**
       * optional control type name, e.g: "sap.m.CheckBox"
       */
      sControlType?: string
    ): UI5Element[];
    /**
     * Find a control by its global ID.
     *
     * @returns all matching controls
     * 	 - if a oOptions.id is a string, will return the single matching control or null if no controls match
     *
     * 	 - otherwise, will return an array of matching controls, or an empty array, if no controls match
     */
    getControlByGlobalId(
      /**
       * a map of match conditions. Must contain an id property
       */
      oOptions: {
        /**
         * required - ID to match. Can be string, regex or array
         */
        id?: string | string[];
        /**
         * optional - control type to match
         */
        controlType?: string | Function;
      }
    ): UI5Element | UI5Element[] | null;
    /**
     * Gets the constructor function of a certain controlType
     *
     * @returns When the type is loaded, the contstructor is returned, if it is a lazy stub or not yet loaded,
     * null will be returned and there will be a log entry.
     */
    getControlConstructor(
      /**
       * the name of the type eg: "sap.m.Button"
       */
      sControlType: string
    ): null | Function;
    /**
     * Gets a control inside the view (same as calling oView.byId) Returns all matching controls inside a view
     * (also nested views and their children).
     *  The view can be specified by viewName, viewNamespace, viewId, and any combination of three. eg : { id
     * : "foo" } will search globally for a control with the ID foo
     *  eg : { id : "foo" , viewName : "bar" } will search for a control with the ID foo inside the view with
     * the name bar
     *  eg : { viewName : "bar" } will return all the controls inside the view with the name bar
     *  eg : { viewName : "bar", controlType : sap.m.Button } will return all the Buttons inside a view with
     * the name bar
     *  eg : { viewName : "bar", viewNamespace : "baz." } will return all the Controls in the view with the
     * name baz.bar
     *  eg : { viewId : "viewBar" } will return all the controls inside the view with the ID viewBar
     *
     *
     * @returns If oOptions.id is a string, will return the control with such an ID or null.
     *  If the view is not found or no control matches the given criteria, will return an empty array
     *  Otherwise, will return an array of matching controls
     */
    getControlInView(
      /**
       * can contain a viewName, viewNamespace, viewId, fragmentId, id and controlType properties.
       */
      options: {
        viewName?: string;

        viewNamespace?: string;

        viewId?: string;

        fragmentId?: string;

        id?: string | RegExp | Array<string | RegExp>;

        controlType?: Function;
      }
    ): UI5Element | UI5Element[] | null;
    /**
     * Find a control matching the provided options
     *
     * @returns
     * 	 - if a oOptions.id is a string, will return the single matching control or null if no controls match
     *
     * 	 - otherwise, will return an array of matching controls, or an empty array, if no controls match
     */
    getMatchingControls(
      /**
       * a map of options used to describe the control you are looking for.
       */
      oOptions?: {
        /**
         * Controls will only be searched inside this view (ie: the view (as a control) has to be an ancestor of
         * the control) If a control ID is given, the control will be found using the byId function of the view.
         */
        viewName?: string;
        /**
         * @since 1.62 Controls will only be searched inside this view (ie: the view (as a control) has to be an
         * ancestor of the control) If a control ID is given, the control will be found using the byId function
         * of the view.
         */
        viewId?: string;
        /**
         * The ID of one or multiple controls. This can be a global ID or an ID used together with viewName. See
         * the documentation of this parameter.
         */
        id?: string | string[];
        /**
         * should the control have a visible DOM reference
         */
        visible?: boolean;
        /**
         * @since 1.34 should the control be interactable and enabled. When true, only interactable and enabled
         * controls will be matched. For details, see the {@link sap.ui.test.matchers.Interactable} matcher.
         */
        interactable?: boolean;
        /**
         * @since 1.66 should the control be enabled. If interactable is true, enabled will also be true, unless
         * declared otherwise.
         */
        enabled?: boolean;
        /**
         * @since 1.80 should the control be editable.
         */
        editable?: boolean;
        /**
         * Only controls in the static UI area of UI5 are searched.
         */
        searchOpenDialogs?: boolean;
        /**
         * @since 1.40 match all controls of a certain type It is usually combined with viewName or searchOpenDialogs.
         * If no control matches the type, an empty array will be returned. Examples:
         * ```javascript
         *
         *         // will return an array of all visible buttons
         *         new OpaPlugin().getMatchingControls({
         *             controlType: "sap.m.Button"
         *         });
         *
         *         // control type will also return controls that extend the control type
         *         // this will return an array of visible sap.m.List and sap.m.Table since both extend List base
         *         new OpaPlugin().getMatchingControls({
         *             controlType: "sap.m.ListBase"
         *         });
         *
         *         // control type is often combined with viewName - only controls that are inside of the view
         *         // and have the correct type will be returned
         *         // here all sap.m.Inputs inside of a view called 'my.View' will be returned
         *         new OpaPlugin().getMatchingControls({
         *             viewName: "my.View"
         *             controlType: "sap.m.Input"
         *         });
         * ```
         */
        controlType?: string | Function;
      }
    ): UI5Element | UI5Element[] | null;
    /**
     * Returns the view with a specific name. The result should be a unique view. If there are multiple visible
     * views with that name, none will be returned.
     *
     * @returns Unique view or `undefined`
     */
    getView(
      /**
       * Name of the view
       */
      sViewName: string
    ): View | undefined;
  }
}

declare module "sap/ui/test/PageObjectFactory" {
  import BaseObject from "sap/ui/base/Object";

  import { PageObjectDefinition, default as Opa5 } from "sap/ui/test/Opa5";

  /**
   * @SINCE 1.26
   * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
   *
   * Page Object Factory.
   */
  export default class PageObjectFactory extends BaseObject {
    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     */
    constructor();

    /**
     * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
     *
     * Creates a set of page objects, each consisting of actions and assertions, and adds them to the Opa configuration.
     *
     * Use page objects to structure your actions and assertions based on parts of the screen. This helps to
     * avoid name clashes and to structure your tests.
     * See:
     * 	sap.ui.test.Opa5.createPageObjects
     *
     * @returns Map of created page objects
     */
    static create(
      /**
       * Definitions of 1 or more page objects
       */
      mPageDefinitions: Record<string, PageObjectDefinition>,
      /**
       * Opa5 class, provided as parameter to avoid a circular dependency
       */
      Opa5: Opa5
    ): Record<string, Object>;
  }
}

declare module "sap/ui/test/RecordReplay" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.60
   *
   * Record-and-replay implementation for OPA5.
   */
  export default class RecordReplay extends BaseObject {
    constructor();

    /**
     * Creates a new subclass of class sap.ui.test.RecordReplay with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     *
     * @returns Created class / constructor function
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RecordReplay>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Find DOM element representations of all controls specified by a selector object. Useful when the selector
     * matches multiple controls and you want all the results.
     *
     * @returns Promise to be resolved with an array of DOM elements or rejected with Error when no suitable
     * DOM elements are found
     */
    static findAllDOMElementsByControlSelector(
      /**
       * Options for the search
       */
      oOptions: {
        /**
         * Control selector for this control Could be the result of {@link sap.ui.test.RecordReplay.findControlSelectorByDOMElement}
         * If the selector matches multiple controls, all of their representations will be included in the result.
         * If the selector contains ID suffix for a DOM element, the result will include the first DOM element with
         * a matching ID (one DOM element per control). Otherwise, the result will include the first DOM element
         * with ID matching the control's ID, or the DOM element that usually receives focus events (one DOM element
         * per control).
         */
        selector: ControlSelector;
      }
    ): Promise<any[] | Error>;
    /**
     * Find the best control selector for a DOM element. A selector uniquely represents a single element. The
     * 'best' selector is the one with which it is most likely to uniquely identify a control with the least
     * possible inspection of the control tree.
     *
     * @returns Promise for control selector or error
     */
    static findControlSelectorByDOMElement(
      /**
       * Options to influence the generation of the selector
       */
      oOptions: {
        /**
         * DOM element that was pointed out by the user
         */
        domElement: Element;
        /**
         * preferences for the selector e.g. which is the most prefered strategy
         */
        settings: {
          /**
           * true if selectors with view ID should have higher priority than selectors with global ID. Default value
           * is false. If one selector is requested, and there are two valid selectors - with view ID and global ID,
           * the one with view ID should be returned.
           */
          preferViewId: boolean;
        };
      }
    ): Promise<ControlSelector | Error>;
    /**
     * Find DOM element representation of a control specified by a selector object.
     *
     * @returns Promise to be resolved with DOM element or rejected with Error when no suitable representation
     * can be found
     */
    static findDOMElementByControlSelector(
      /**
       * Options for the search
       */
      oOptions: {
        /**
         * Control selector for this control Could be the result of {@link sap.ui.test.RecordReplay.findControlSelectorByDOMElement}
         * If the selector matches multiple controls, only the first one will be used If the selector contains ID
         * suffix for a DOM element, the 'first' relevant DOM element will be located Otherwise, the result will
         * be the 'first' DOM element with ID matching the control's or the one that usually receives focus events
         */
        selector: ControlSelector;
      }
    ): Promise<Element | Error>;
    /**
     * Returns a metadata object for class sap.ui.test.RecordReplay.
     *
     * @returns Metadata object describing this class
     */
    static getMetadata(): Metadata;
    /**
     * Interact with specific control.
     *
     * @returns Promise to be resolved when the interaction is done or rejected if interaction is not possible
     */
    static interactWithControl(
      /**
       * Options for the interaction
       */
      oOptions: {
        /**
         * control selector for the control to interact with The returned promise will be rejected if the control
         * is not specified or does not have a DOM reference
         */
        selector: Object;
        /**
         * Interaction type; Currently supported interaction types are {@link sap.ui.test.RecordReplay.InteractionType}
         * To see the interaction details and options, see {@link sap.ui.test.actions}
         */
        interactionType: InteractionType;
        /**
         * Text for the EnterText interaction
         */
        enterText: string;
        /**
         * Clear existing text before interaction
         */
        clearTextFirst?: string;
        /**
         * If ENTER key will be entered after the text
         */
        pressEnterKey: boolean;
        /**
         * If the input will remain focused after text is entered
         */
        keepFocus: boolean;
      }
    ): Promise<undefined | Error>;
    /**
     * Wait for UI5 to complete processing, poll until all asynchronous work is finished, or timeout.
     *
     * @returns Promise to be resolved when UI5 is awaited, or rejected if timeout is reached The promise will
     * be rejected with an error containing a stringified list of pending work.
     */
    static waitForUI5(
      /**
       * Override default wait options like polling timeout and interval
       */
      oOptions: {
        /**
         * Time in milliseconds to wait until processing is complete
         */
        timeout?: int;
        /**
         * Time in milliseconds to wait between checks
         */
        interval?: int;
      }
    ): Promise<undefined | Error>;
  }
  /**
   * Control selector plain object description.
   *
   * All matchers are combined when used in a single selector Listed in descending order of preference
   */
  export type ControlSelector = {
    /**
     * ID of a control (global or within viewName, if viewName is defined)
     */
    id: string | RegExp;
    /**
     * Name of the control's view parent
     */
    viewName: string;
    /**
     * Fully qualified control class name in dot notation, eg: "sap.m.ObjectHeader"
     */
    controlType: string;
    /**
     * Binding path matcher, {@link sap.ui.test.matchers.BindingPath}
     */
    bindingPath: Object;
    /**
     * I18N Text matcher, {@link sap.ui.test.matchers.I18NText}
     */
    I18NText: Object;
    /**
     * Label matcher, {@link sap.ui.test.matchers.LabelFor}
     */
    labelFor: Object;
    /**
     * Properties matcher, {@link sap.ui.test.matchers.Properties}
     */
    properties: Object;
  };

  /**
   * Interaction types.
   *
   * Values correspond to OPA5 built-in actions {@link sap.ui.test.actions}.
   */
  export enum InteractionType {
    EnterText = "ENTER_TEXT",

    Press = "PRESS",
  }
}
/**
 * Root namespace for JavaScript functionality provided by SAP SE.
 *
 * The `sap` namespace is automatically registered with the OpenAjax hub if it exists.
 */
declare namespace sap {
  /**
   * The `sap.ui` namespace is the central OpenAjax compliant entry point for UI related JavaScript functionality
   * provided by SAP.
   */
  namespace ui {
    /**
     * @SINCE 1.15.0
     * @deprecated (since 1.56) - use {@link sap.ui.core.Component.get Component.get} or {@link sap.ui.core.Component.create
     * Component.create} instead. Note: {@link sap.ui.core.Component.create Component.create} does not support
     * synchronous loading or the deprecated options ***manifestFirst*** and ***manifestUrl***.
     *
     * Creates a new instance of a `Component` or returns the instance of an existing `Component`.
     *
     * If you want to look up an existing `Component` you can call this function with a Component ID as parameter:
     *
     * ```javascript
     *
     *   var oComponent = sap.ui.component(sComponentId);
     * ```
     *
     *
     * To create a new instance of a component you pass a component configuration object into this function:
     *
     * ```javascript
     *
     *   var oComponent = sap.ui.component({
     *     name: "my.Component",
     *     url: "my/component/location",
     *     id: "myCompId1"
     *   });
     * ```
     *
     *
     * @returns the Component instance or a Promise in case of asynchronous loading
     */
    function component(
      /**
       * ID of an existing Component or the configuration object to create the Component
       */
      vConfig:
        | string
        | {
            /**
             * Name of the Component to load, as a dot-separated name; Even when an alternative location is specified
             * from which the manifest should be loaded (e.g. `vConfig.manifest` is set to a non-empty string), then
             * the name specified in that manifest will be ignored and this name will be used instead to determine the
             * module to be loaded.
             */
            name: string;
            /**
             * Alternative location from where to load the Component. If a `manifestUrl` is given, this URL specifies
             * the location of the final component defined via that manifest, otherwise it specifies the location of
             * the component defined via its name `vConfig.name`.
             */
            url?: string;
            /**
             * Initial data of the Component (@see sap.ui.core.Component#getComponentData)
             */
            componentData?: object;
            /**
             * sId of the new Component
             */
            id?: string;
            /**
             * Settings of the new Component
             */
            settings?: object;
            /**
             * List of active terminologies. The order of the given active terminologies is significant. The {@link
             * module:sap/base/i18n/ResourceBundle ResourceBundle} API documentation describes the processing behavior
             * in more detail. Please also have a look at this dev-guide chapter for general usage instructions: {@link
             * topic:eba8d25a31ef416ead876e091e67824e Text Verticalization}.
             */
            activeTerminologies?: string[];
            /**
             * Indicates whether the Component creation should be done asynchronously; defaults to true when using the
             * manifest property with a truthy value otherwise the default is false (experimental setting)
             */
            async?: boolean;
            /**
             * @since 1.27.0 Hints for the asynchronous loading. **Beware:** This parameter is only used internally
             * by the UI5 framework and compatibility cannot be guaranteed. The parameter must not be used in productive
             * code, except in code delivered by the UI5 teams.
             */
            asyncHints?: {
              /**
               * Libraries that should be (pre-)loaded before the Component (experimental setting)
               */
              libs?: string[];
              /**
               * Components that should be (pre-)loaded before the Component (experimental setting)
               */
              components?: string[];
              /**
               * @since 1.37.0 a `Promise` or and array of `Promise`s for which the Component instantiation should wait
               * (experimental setting)
               */
              waitFor?: Promise<any> | Array<Promise<any>>;
            };
            /**
             * @since 1.49.0 Controls when and from where to load the manifest for the Component. When set to any truthy
             * value, the manifest will be loaded asynchronously by default and evaluated before the Component controller,
             * if it is set to a falsy value other than `undefined`, the manifest will be loaded after the controller.
             * A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null
             * object value will be interpreted as manifest content. Setting this property to a value other than `undefined`,
             * completely deactivates the properties `manifestUrl` and `manifestFirst`, no matter what their values
             * are.
             */
            manifest?: boolean | string | object;
            /**
             * @since 1.33.0 Specifies the URL from where the manifest should be loaded from Using this property implies
             * `vConfig.manifestFirst=true`.
             * **DEPRECATED since 1.49.0, use `vConfig.manifest=url` instead!**. Note that this property is ignored
             * when `vConfig.manifest` has a value other than `undefined`.
             */
            manifestUrl?: string;
            /**
             * @since 1.33.0 defines whether the manifest is loaded before or after the Component controller. Defaults
             * to `sap.ui.getCore().getConfiguration().getManifestFirst()`
             * **DEPRECATED since 1.49.0, use `vConfig.manifest=true|false` instead!** Note that this property is ignored
             * when `vConfig.manifest` has a value other than `undefined`.
             */
            manifestFirst?: boolean;
            /**
             * If set to `true` validation of the component is handled by the `MessageManager`
             */
            handleValidation?: string;
          }
    ): import("sap/ui/core/Component").default | Promise<any>;
    /**
     * @deprecated (since 1.56) - use {@link sap.ui.core.mvc.Controller.extend Controller.extend} to define
     * the controller class and {@link sap.ui.core.mvc.Controller.create Controller.create} to create controller
     * instances. For further information, see {@link sap.ui.core.mvc.Controller}.
     *
     * Defines a controller class or creates an instance of an already defined controller class.
     *
     * When a name and a controller implementation object is given, a new controller class of the given name
     * is created. The members of the implementation object will be copied into each new instance of that controller
     * class (shallow copy). **Note**: as the members are shallow copied, controller instances will share all
     * object values. This might or might not be what applications expect.
     *
     * If only a name is given, a new instance of the named controller class is returned.
     *
     * @returns void, the new controller instance or a Promise resolving with the controller in async case
     */
    function controller(
      /**
       * The controller name
       */
      sName: string,
      /**
       * An object literal defining the methods and properties of the controller
       */
      oControllerImpl?: object,
      /**
       * Decides whether the controller gets loaded asynchronously or not
       */
      bAsync?: boolean
    ): void | import("sap/ui/core/mvc/Controller").default | Promise<any>;
    /**
     * @SINCE 1.27.0
     *
     * Defines a JavaScript module with its ID, its dependencies and a module export value or factory.
     *
     * The typical and only suggested usage of this method is to have one single, top level call to `sap.ui.define`
     * in one JavaScript resource (file). When a module is requested by its module ID for the first time, the
     * corresponding resource is determined from the ID and the current {@link sap.ui.loader.config configuration}.
     * The resource will be loaded and executed which in turn will execute the top level `sap.ui.define` call.
     *
     * If the module ID was omitted from that call, it will be substituted by the ID that was used to request
     * the module. As a preparation step, the dependencies as well as their transitive dependencies, will be
     * loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was
     * given as `vFactory`, that value will be the module value. If a function was given, that function will
     * be called (providing the module exports of the declared dependencies as parameters to the function) and
     * its return value will be used as module export value. The framework internally associates the resulting
     * value with the module ID and provides it to the original requester of the module. Whenever the module
     * is requested again, the same export value will be returned (modules are executed only once).
     *
     * Example:
     *  The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js',
     * it can be requested with the ID 'sap/mylib/SomeClass'.
     * ```javascript
     *
     *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
     *
     *     // create a new class
     *     var SomeClass = function() {};
     *
     *     // add methods to its prototype
     *     SomeClass.prototype.foo = function() {
     *
     *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
     *         var mSettings = Helper.foo();
     *
     *         // create and return an sap.m.Bar (using its local name 'Bar')
     *         return new Bar(mSettings);
     *
     *     }
     *
     *     // return the class as module value
     *     return SomeClass;
     *
     *   });
     * ```
     *
     *
     * In another module or in an application HTML page, the {@link sap.ui.require} API can be used to load
     * the sap/mylib/Something module and to work with it:
     *
     *
     * ```javascript
     *
     * sap.ui.require(['sap/mylib/Something'], function(Something) {
     *
     *   // instantiate a Something and call foo() on it
     *   new Something().foo();
     *
     * });
     * ```
     *
     *
     * Module Name Syntax:
     *
     * `sap.ui.define` uses a simplified variant of the {@link jQuery.sap.getResourcePath unified resource name}
     * syntax for the module's own name as well as for its dependencies. The only difference to that syntax
     * is, that for `sap.ui.define` and `sap.ui.require`, the extension (which always would be '.js') has to
     * be omitted. Both methods always add this extension internally.
     *
     * As a convenience, the name of a dependency can start with the segment './' which will be replaced by
     * the name of the package that contains the currently defined module (relative name).
     *
     * It is best practice to omit the name of the defined module (first parameter) and to use relative names
     * for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming
     * of packages and allows to map them to a different namespace.
     *
     * Dependency to Modules:
     *
     * If a dependencies array is given, each entry represents the name of another module that the currently
     * defined module depends on. All dependency modules are loaded before the export of the currently defined
     * module is determined. The module export of each dependency module will be provided as a parameter to
     * a factory function, the order of the parameters will match the order of the modules in the dependencies
     * array.
     *
     * **Note:** The order in which the dependency modules are executed is **not** defined by the order
     * in the dependencies array! The execution order is affected by dependencies between the dependency
     * modules as well as by their current state (whether a module already has been loaded or not). Neither
     * module implementations nor dependents that require a module set must make any assumption about the execution
     * order (other than expressed by their dependencies).
     *
     * **Note:** A static module export (a literal provided to `sap.ui.define`) cannot depend on the module
     * exports of the dependency modules as it has to be calculated before the dependencies are resolved. As
     * an alternative, modules can define a factory function, calculate a static export value in that function,
     * potentially based on the dependencies, and return the result as module export value. The same approach
     * must be taken when the module export is supposed to be a function.
     *
     * Asynchronous Contract:
     *
     * `sap.ui.define` is designed to support real Asynchronous Module Definitions (AMD) in future, although
     * it internally still might use synchronous module loading, depending on configuration and context. However,
     * callers of `sap.ui.define` must never rely on any synchronous behavior that they might observe in a specific
     * test scenario.
     *
     * For example, callers of `sap.ui.define` must not use the module export value immediately after invoking
     * `sap.ui.define`:
     *
     *
     * ```javascript
     *
     *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
     *
     *   // define a class Something as AMD module
     *   sap.ui.define('Something', [], function() {
     *     var Something = function() {};
     *     return Something;
     *   });
     *
     *   // DON'T DO THAT!
     *   // accessing the class _synchronously_ after sap.ui.define was called
     *   new Something();
     *
     * ```
     *
     *
     * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
     * **MUST** use the deprecated legacy APIs {@link jQuery.sap.declare} and {@link jQuery.sap.require}.
     *
     * (No) Global References:
     *
     * To be in line with AMD best practices, modules defined with `sap.ui.define` should not make any use of
     * global variables if those variables are also available as module exports. Instead, they should add dependencies
     * to those modules and use the corresponding parameter of the factory function to access the module exports.
     *
     * As the current programming model and the documentation of UI5 heavily rely on global names, there will
     * be a transition phase where UI5 enables AMD modules and local references to module exports in parallel
     * to the old global names. The fourth parameter of `sap.ui.define` has been added to support that transition
     * phase. When this parameter is set to true, the framework provides two additional features
     *
     *
     * 	 - Before the factory function is called, the existence of the global parent namespace for the current
     * 			module is ensured
     * 	 - The module export returned by the module's factory function will be automatically exported under
     * 			the global name which is derived from the ID of the module
     *
     * The parameter lets the framework know whether any of those two operations is needed or not. In future
     * versions of UI5, a central configuration option is planned to suppress those 'exports'.
     *
     * Third Party Modules: Although third party modules don't use UI5 APIs, they still can be listed as dependencies
     * in a `sap.ui.define` call. They will be requested and executed like UI5 modules, but to make their exports
     * available, so called ***shims*** have to be defined.
     *
     * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known
     * to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now
     * it is necessary to fully support UI5 applications that rely on global names for such modules.
     *
     * For third-party modules that UI5 delivers (e.g. those in namespace `sap/ui/thirdparty/`), the necessary
     * shims are defined by UI5 itself by executing the private module `ui5loader-autoconfig.js` during bootstrap.
     *
     * Example:
     * ```javascript
     *
     *   // module 'Something' wants to use third party library 'URI.js'
     *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
     *   // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value
     *   // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js
     *   sap.ui.loader.config({
     *     shim: {
     *       'sap/ui/thirdparty/URI': {
     *          amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders
     *          exports: 'URI' // name of the global variable under which URI.js exports its module value
     *       }
     *     }
     *   });
     *
     *   // now the module can be retrieved like other modules
     *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
     *
     *     new URIModuleValue(...); // same as the global 'URI' name: new URI(...)
     *
     *     ...
     *   });
     * ```
     *
     *
     * Differences to Standard AMD:
     *
     * The current implementation of `sap.ui.define` differs from the AMD specification (https://github.com/amdjs/amdjs-api)
     * or from concrete AMD loaders like `requireJS` in several aspects:
     * 	 - The name `sap.ui.define` is different from the plain `define`. This has two reasons: first, it avoids
     * 			the impression that `sap.ui.define` is an exact implementation of an AMD loader. And second, it allows
     * 			the coexistence of an AMD loader (e.g. requireJS) and `sap.ui.define` in one application as long as UI5
     * 			or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference
     * 			of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect
     * 			methods `define` and `require` to be available. Modules that use Unified Module Definition (UMD) syntax,
     * 			can be loaded, but only when no AMD loader is present or when they expose their export also to the global
     * 			namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them
     * 			using the `amd:true` flag (see example above)
     * 	 - Depending on configuration and the current context, `sap.ui.define` loads the dependencies of a module
     * 			either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading
     * 			is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce
     * 			synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications
     * 			that need to ensure synchronous loading of dependencies **MUST** use the deprecated legacy APIs like
     * 			{@link jQuery.sap.require}.
     * 	 - `sap.ui.define` does not support plugins to use other file types, formats or protocols. It is not
     * 			planned to support this in future
     * 	 - `sap.ui.define` does not support absolute URLs as module names (dependencies) nor does it allow module
     * 			names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered
     * 			that points to that URL (or to a prefix of it).
     * 	 - `sap.ui.define` does **not** support the 'sugar' of requireJS where CommonJS style dependency declarations
     * 			using `sap.ui.require("something")` are automagically converted into `sap.ui.define` dependencies before
     * 			executing the factory function.
     *
     * Restrictions, Design Considerations:
     * 	 - **Restriction**: as dependency management is not supported for Non-UI5 modules, the only way to ensure
     * 			proper execution order for such modules currently is to rely on the order in the dependency array. Obviously,
     * 			this only works as long as `sap.ui.define` uses synchronous loading. It will be enhanced when asynchronous
     * 			loading is implemented.
     * 	 - It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout
     * 			of 0). But this would have invalidated the current migration scenario where a sync `jQuery.sap.require`
     * 			call can load a `sap.ui.define`'ed module. If the module definition would not execute synchronously,
     * 			the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)
     *
     * 	 - A single file must not contain multiple calls to `sap.ui.define`. Multiple calls currently are only
     * 			supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of
     * 			how this works might be changed in future implementations and are not part of the API contract
     * See:
     * 	https://github.com/amdjs/amdjs-api
     */
    function define(
      /**
       * ID of the module in simplified resource name syntax. When omitted, the loader determines the ID from
       * the request.
       */
      sModuleName: string,
      /**
       * List of dependencies of the module
       */
      aDependencies: Array<
        keyof IUI5DefineDependencyNames | (string & { IGNORE_ME?: never })
      >,
      /**
       * The module export value or a function that calculates that value
       */
      vFactory: Function | any,
      /**
       * Whether an export to global names is required - should be used by SAP-owned code only
       */
      bExport?: boolean
    ): void;
    /**
     * @SINCE 1.27.0
     *
     * Defines a JavaScript module with its ID, its dependencies and a module export value or factory.
     *
     * The typical and only suggested usage of this method is to have one single, top level call to `sap.ui.define`
     * in one JavaScript resource (file). When a module is requested by its module ID for the first time, the
     * corresponding resource is determined from the ID and the current {@link sap.ui.loader.config configuration}.
     * The resource will be loaded and executed which in turn will execute the top level `sap.ui.define` call.
     *
     * If the module ID was omitted from that call, it will be substituted by the ID that was used to request
     * the module. As a preparation step, the dependencies as well as their transitive dependencies, will be
     * loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was
     * given as `vFactory`, that value will be the module value. If a function was given, that function will
     * be called (providing the module exports of the declared dependencies as parameters to the function) and
     * its return value will be used as module export value. The framework internally associates the resulting
     * value with the module ID and provides it to the original requester of the module. Whenever the module
     * is requested again, the same export value will be returned (modules are executed only once).
     *
     * Example:
     *  The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js',
     * it can be requested with the ID 'sap/mylib/SomeClass'.
     * ```javascript
     *
     *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
     *
     *     // create a new class
     *     var SomeClass = function() {};
     *
     *     // add methods to its prototype
     *     SomeClass.prototype.foo = function() {
     *
     *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
     *         var mSettings = Helper.foo();
     *
     *         // create and return an sap.m.Bar (using its local name 'Bar')
     *         return new Bar(mSettings);
     *
     *     }
     *
     *     // return the class as module value
     *     return SomeClass;
     *
     *   });
     * ```
     *
     *
     * In another module or in an application HTML page, the {@link sap.ui.require} API can be used to load
     * the sap/mylib/Something module and to work with it:
     *
     *
     * ```javascript
     *
     * sap.ui.require(['sap/mylib/Something'], function(Something) {
     *
     *   // instantiate a Something and call foo() on it
     *   new Something().foo();
     *
     * });
     * ```
     *
     *
     * Module Name Syntax:
     *
     * `sap.ui.define` uses a simplified variant of the {@link jQuery.sap.getResourcePath unified resource name}
     * syntax for the module's own name as well as for its dependencies. The only difference to that syntax
     * is, that for `sap.ui.define` and `sap.ui.require`, the extension (which always would be '.js') has to
     * be omitted. Both methods always add this extension internally.
     *
     * As a convenience, the name of a dependency can start with the segment './' which will be replaced by
     * the name of the package that contains the currently defined module (relative name).
     *
     * It is best practice to omit the name of the defined module (first parameter) and to use relative names
     * for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming
     * of packages and allows to map them to a different namespace.
     *
     * Dependency to Modules:
     *
     * If a dependencies array is given, each entry represents the name of another module that the currently
     * defined module depends on. All dependency modules are loaded before the export of the currently defined
     * module is determined. The module export of each dependency module will be provided as a parameter to
     * a factory function, the order of the parameters will match the order of the modules in the dependencies
     * array.
     *
     * **Note:** The order in which the dependency modules are executed is **not** defined by the order
     * in the dependencies array! The execution order is affected by dependencies between the dependency
     * modules as well as by their current state (whether a module already has been loaded or not). Neither
     * module implementations nor dependents that require a module set must make any assumption about the execution
     * order (other than expressed by their dependencies).
     *
     * **Note:** A static module export (a literal provided to `sap.ui.define`) cannot depend on the module
     * exports of the dependency modules as it has to be calculated before the dependencies are resolved. As
     * an alternative, modules can define a factory function, calculate a static export value in that function,
     * potentially based on the dependencies, and return the result as module export value. The same approach
     * must be taken when the module export is supposed to be a function.
     *
     * Asynchronous Contract:
     *
     * `sap.ui.define` is designed to support real Asynchronous Module Definitions (AMD) in future, although
     * it internally still might use synchronous module loading, depending on configuration and context. However,
     * callers of `sap.ui.define` must never rely on any synchronous behavior that they might observe in a specific
     * test scenario.
     *
     * For example, callers of `sap.ui.define` must not use the module export value immediately after invoking
     * `sap.ui.define`:
     *
     *
     * ```javascript
     *
     *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
     *
     *   // define a class Something as AMD module
     *   sap.ui.define('Something', [], function() {
     *     var Something = function() {};
     *     return Something;
     *   });
     *
     *   // DON'T DO THAT!
     *   // accessing the class _synchronously_ after sap.ui.define was called
     *   new Something();
     *
     * ```
     *
     *
     * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
     * **MUST** use the deprecated legacy APIs {@link jQuery.sap.declare} and {@link jQuery.sap.require}.
     *
     * (No) Global References:
     *
     * To be in line with AMD best practices, modules defined with `sap.ui.define` should not make any use of
     * global variables if those variables are also available as module exports. Instead, they should add dependencies
     * to those modules and use the corresponding parameter of the factory function to access the module exports.
     *
     * As the current programming model and the documentation of UI5 heavily rely on global names, there will
     * be a transition phase where UI5 enables AMD modules and local references to module exports in parallel
     * to the old global names. The fourth parameter of `sap.ui.define` has been added to support that transition
     * phase. When this parameter is set to true, the framework provides two additional features
     *
     *
     * 	 - Before the factory function is called, the existence of the global parent namespace for the current
     * 			module is ensured
     * 	 - The module export returned by the module's factory function will be automatically exported under
     * 			the global name which is derived from the ID of the module
     *
     * The parameter lets the framework know whether any of those two operations is needed or not. In future
     * versions of UI5, a central configuration option is planned to suppress those 'exports'.
     *
     * Third Party Modules: Although third party modules don't use UI5 APIs, they still can be listed as dependencies
     * in a `sap.ui.define` call. They will be requested and executed like UI5 modules, but to make their exports
     * available, so called ***shims*** have to be defined.
     *
     * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known
     * to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now
     * it is necessary to fully support UI5 applications that rely on global names for such modules.
     *
     * For third-party modules that UI5 delivers (e.g. those in namespace `sap/ui/thirdparty/`), the necessary
     * shims are defined by UI5 itself by executing the private module `ui5loader-autoconfig.js` during bootstrap.
     *
     * Example:
     * ```javascript
     *
     *   // module 'Something' wants to use third party library 'URI.js'
     *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
     *   // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value
     *   // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js
     *   sap.ui.loader.config({
     *     shim: {
     *       'sap/ui/thirdparty/URI': {
     *          amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders
     *          exports: 'URI' // name of the global variable under which URI.js exports its module value
     *       }
     *     }
     *   });
     *
     *   // now the module can be retrieved like other modules
     *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
     *
     *     new URIModuleValue(...); // same as the global 'URI' name: new URI(...)
     *
     *     ...
     *   });
     * ```
     *
     *
     * Differences to Standard AMD:
     *
     * The current implementation of `sap.ui.define` differs from the AMD specification (https://github.com/amdjs/amdjs-api)
     * or from concrete AMD loaders like `requireJS` in several aspects:
     * 	 - The name `sap.ui.define` is different from the plain `define`. This has two reasons: first, it avoids
     * 			the impression that `sap.ui.define` is an exact implementation of an AMD loader. And second, it allows
     * 			the coexistence of an AMD loader (e.g. requireJS) and `sap.ui.define` in one application as long as UI5
     * 			or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference
     * 			of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect
     * 			methods `define` and `require` to be available. Modules that use Unified Module Definition (UMD) syntax,
     * 			can be loaded, but only when no AMD loader is present or when they expose their export also to the global
     * 			namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them
     * 			using the `amd:true` flag (see example above)
     * 	 - Depending on configuration and the current context, `sap.ui.define` loads the dependencies of a module
     * 			either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading
     * 			is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce
     * 			synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications
     * 			that need to ensure synchronous loading of dependencies **MUST** use the deprecated legacy APIs like
     * 			{@link jQuery.sap.require}.
     * 	 - `sap.ui.define` does not support plugins to use other file types, formats or protocols. It is not
     * 			planned to support this in future
     * 	 - `sap.ui.define` does not support absolute URLs as module names (dependencies) nor does it allow module
     * 			names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered
     * 			that points to that URL (or to a prefix of it).
     * 	 - `sap.ui.define` does **not** support the 'sugar' of requireJS where CommonJS style dependency declarations
     * 			using `sap.ui.require("something")` are automagically converted into `sap.ui.define` dependencies before
     * 			executing the factory function.
     *
     * Restrictions, Design Considerations:
     * 	 - **Restriction**: as dependency management is not supported for Non-UI5 modules, the only way to ensure
     * 			proper execution order for such modules currently is to rely on the order in the dependency array. Obviously,
     * 			this only works as long as `sap.ui.define` uses synchronous loading. It will be enhanced when asynchronous
     * 			loading is implemented.
     * 	 - It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout
     * 			of 0). But this would have invalidated the current migration scenario where a sync `jQuery.sap.require`
     * 			call can load a `sap.ui.define`'ed module. If the module definition would not execute synchronously,
     * 			the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)
     *
     * 	 - A single file must not contain multiple calls to `sap.ui.define`. Multiple calls currently are only
     * 			supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of
     * 			how this works might be changed in future implementations and are not part of the API contract
     * See:
     * 	https://github.com/amdjs/amdjs-api
     */
    function define(
      /**
       * ID of the module in simplified resource name syntax. When omitted, the loader determines the ID from
       * the request.
       */
      sModuleName: string,
      /**
       * The module export value or a function that calculates that value
       */
      vFactory: Function | any,
      /**
       * Whether an export to global names is required - should be used by SAP-owned code only
       */
      bExport?: boolean
    ): void;
    /**
     * @SINCE 1.27.0
     *
     * Defines a JavaScript module with its ID, its dependencies and a module export value or factory.
     *
     * The typical and only suggested usage of this method is to have one single, top level call to `sap.ui.define`
     * in one JavaScript resource (file). When a module is requested by its module ID for the first time, the
     * corresponding resource is determined from the ID and the current {@link sap.ui.loader.config configuration}.
     * The resource will be loaded and executed which in turn will execute the top level `sap.ui.define` call.
     *
     * If the module ID was omitted from that call, it will be substituted by the ID that was used to request
     * the module. As a preparation step, the dependencies as well as their transitive dependencies, will be
     * loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was
     * given as `vFactory`, that value will be the module value. If a function was given, that function will
     * be called (providing the module exports of the declared dependencies as parameters to the function) and
     * its return value will be used as module export value. The framework internally associates the resulting
     * value with the module ID and provides it to the original requester of the module. Whenever the module
     * is requested again, the same export value will be returned (modules are executed only once).
     *
     * Example:
     *  The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js',
     * it can be requested with the ID 'sap/mylib/SomeClass'.
     * ```javascript
     *
     *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
     *
     *     // create a new class
     *     var SomeClass = function() {};
     *
     *     // add methods to its prototype
     *     SomeClass.prototype.foo = function() {
     *
     *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
     *         var mSettings = Helper.foo();
     *
     *         // create and return an sap.m.Bar (using its local name 'Bar')
     *         return new Bar(mSettings);
     *
     *     }
     *
     *     // return the class as module value
     *     return SomeClass;
     *
     *   });
     * ```
     *
     *
     * In another module or in an application HTML page, the {@link sap.ui.require} API can be used to load
     * the sap/mylib/Something module and to work with it:
     *
     *
     * ```javascript
     *
     * sap.ui.require(['sap/mylib/Something'], function(Something) {
     *
     *   // instantiate a Something and call foo() on it
     *   new Something().foo();
     *
     * });
     * ```
     *
     *
     * Module Name Syntax:
     *
     * `sap.ui.define` uses a simplified variant of the {@link jQuery.sap.getResourcePath unified resource name}
     * syntax for the module's own name as well as for its dependencies. The only difference to that syntax
     * is, that for `sap.ui.define` and `sap.ui.require`, the extension (which always would be '.js') has to
     * be omitted. Both methods always add this extension internally.
     *
     * As a convenience, the name of a dependency can start with the segment './' which will be replaced by
     * the name of the package that contains the currently defined module (relative name).
     *
     * It is best practice to omit the name of the defined module (first parameter) and to use relative names
     * for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming
     * of packages and allows to map them to a different namespace.
     *
     * Dependency to Modules:
     *
     * If a dependencies array is given, each entry represents the name of another module that the currently
     * defined module depends on. All dependency modules are loaded before the export of the currently defined
     * module is determined. The module export of each dependency module will be provided as a parameter to
     * a factory function, the order of the parameters will match the order of the modules in the dependencies
     * array.
     *
     * **Note:** The order in which the dependency modules are executed is **not** defined by the order
     * in the dependencies array! The execution order is affected by dependencies between the dependency
     * modules as well as by their current state (whether a module already has been loaded or not). Neither
     * module implementations nor dependents that require a module set must make any assumption about the execution
     * order (other than expressed by their dependencies).
     *
     * **Note:** A static module export (a literal provided to `sap.ui.define`) cannot depend on the module
     * exports of the dependency modules as it has to be calculated before the dependencies are resolved. As
     * an alternative, modules can define a factory function, calculate a static export value in that function,
     * potentially based on the dependencies, and return the result as module export value. The same approach
     * must be taken when the module export is supposed to be a function.
     *
     * Asynchronous Contract:
     *
     * `sap.ui.define` is designed to support real Asynchronous Module Definitions (AMD) in future, although
     * it internally still might use synchronous module loading, depending on configuration and context. However,
     * callers of `sap.ui.define` must never rely on any synchronous behavior that they might observe in a specific
     * test scenario.
     *
     * For example, callers of `sap.ui.define` must not use the module export value immediately after invoking
     * `sap.ui.define`:
     *
     *
     * ```javascript
     *
     *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
     *
     *   // define a class Something as AMD module
     *   sap.ui.define('Something', [], function() {
     *     var Something = function() {};
     *     return Something;
     *   });
     *
     *   // DON'T DO THAT!
     *   // accessing the class _synchronously_ after sap.ui.define was called
     *   new Something();
     *
     * ```
     *
     *
     * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
     * **MUST** use the deprecated legacy APIs {@link jQuery.sap.declare} and {@link jQuery.sap.require}.
     *
     * (No) Global References:
     *
     * To be in line with AMD best practices, modules defined with `sap.ui.define` should not make any use of
     * global variables if those variables are also available as module exports. Instead, they should add dependencies
     * to those modules and use the corresponding parameter of the factory function to access the module exports.
     *
     * As the current programming model and the documentation of UI5 heavily rely on global names, there will
     * be a transition phase where UI5 enables AMD modules and local references to module exports in parallel
     * to the old global names. The fourth parameter of `sap.ui.define` has been added to support that transition
     * phase. When this parameter is set to true, the framework provides two additional features
     *
     *
     * 	 - Before the factory function is called, the existence of the global parent namespace for the current
     * 			module is ensured
     * 	 - The module export returned by the module's factory function will be automatically exported under
     * 			the global name which is derived from the ID of the module
     *
     * The parameter lets the framework know whether any of those two operations is needed or not. In future
     * versions of UI5, a central configuration option is planned to suppress those 'exports'.
     *
     * Third Party Modules: Although third party modules don't use UI5 APIs, they still can be listed as dependencies
     * in a `sap.ui.define` call. They will be requested and executed like UI5 modules, but to make their exports
     * available, so called ***shims*** have to be defined.
     *
     * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known
     * to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now
     * it is necessary to fully support UI5 applications that rely on global names for such modules.
     *
     * For third-party modules that UI5 delivers (e.g. those in namespace `sap/ui/thirdparty/`), the necessary
     * shims are defined by UI5 itself by executing the private module `ui5loader-autoconfig.js` during bootstrap.
     *
     * Example:
     * ```javascript
     *
     *   // module 'Something' wants to use third party library 'URI.js'
     *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
     *   // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value
     *   // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js
     *   sap.ui.loader.config({
     *     shim: {
     *       'sap/ui/thirdparty/URI': {
     *          amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders
     *          exports: 'URI' // name of the global variable under which URI.js exports its module value
     *       }
     *     }
     *   });
     *
     *   // now the module can be retrieved like other modules
     *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
     *
     *     new URIModuleValue(...); // same as the global 'URI' name: new URI(...)
     *
     *     ...
     *   });
     * ```
     *
     *
     * Differences to Standard AMD:
     *
     * The current implementation of `sap.ui.define` differs from the AMD specification (https://github.com/amdjs/amdjs-api)
     * or from concrete AMD loaders like `requireJS` in several aspects:
     * 	 - The name `sap.ui.define` is different from the plain `define`. This has two reasons: first, it avoids
     * 			the impression that `sap.ui.define` is an exact implementation of an AMD loader. And second, it allows
     * 			the coexistence of an AMD loader (e.g. requireJS) and `sap.ui.define` in one application as long as UI5
     * 			or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference
     * 			of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect
     * 			methods `define` and `require` to be available. Modules that use Unified Module Definition (UMD) syntax,
     * 			can be loaded, but only when no AMD loader is present or when they expose their export also to the global
     * 			namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them
     * 			using the `amd:true` flag (see example above)
     * 	 - Depending on configuration and the current context, `sap.ui.define` loads the dependencies of a module
     * 			either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading
     * 			is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce
     * 			synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications
     * 			that need to ensure synchronous loading of dependencies **MUST** use the deprecated legacy APIs like
     * 			{@link jQuery.sap.require}.
     * 	 - `sap.ui.define` does not support plugins to use other file types, formats or protocols. It is not
     * 			planned to support this in future
     * 	 - `sap.ui.define` does not support absolute URLs as module names (dependencies) nor does it allow module
     * 			names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered
     * 			that points to that URL (or to a prefix of it).
     * 	 - `sap.ui.define` does **not** support the 'sugar' of requireJS where CommonJS style dependency declarations
     * 			using `sap.ui.require("something")` are automagically converted into `sap.ui.define` dependencies before
     * 			executing the factory function.
     *
     * Restrictions, Design Considerations:
     * 	 - **Restriction**: as dependency management is not supported for Non-UI5 modules, the only way to ensure
     * 			proper execution order for such modules currently is to rely on the order in the dependency array. Obviously,
     * 			this only works as long as `sap.ui.define` uses synchronous loading. It will be enhanced when asynchronous
     * 			loading is implemented.
     * 	 - It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout
     * 			of 0). But this would have invalidated the current migration scenario where a sync `jQuery.sap.require`
     * 			call can load a `sap.ui.define`'ed module. If the module definition would not execute synchronously,
     * 			the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)
     *
     * 	 - A single file must not contain multiple calls to `sap.ui.define`. Multiple calls currently are only
     * 			supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of
     * 			how this works might be changed in future implementations and are not part of the API contract
     * See:
     * 	https://github.com/amdjs/amdjs-api
     */
    function define(
      /**
       * List of dependencies of the module
       */
      aDependencies: Array<
        keyof IUI5DefineDependencyNames | (string & { IGNORE_ME?: never })
      >,
      /**
       * The module export value or a function that calculates that value
       */
      vFactory: Function | any,
      /**
       * Whether an export to global names is required - should be used by SAP-owned code only
       */
      bExport?: boolean
    ): void;
    /**
     * @SINCE 1.27.0
     *
     * Defines a JavaScript module with its ID, its dependencies and a module export value or factory.
     *
     * The typical and only suggested usage of this method is to have one single, top level call to `sap.ui.define`
     * in one JavaScript resource (file). When a module is requested by its module ID for the first time, the
     * corresponding resource is determined from the ID and the current {@link sap.ui.loader.config configuration}.
     * The resource will be loaded and executed which in turn will execute the top level `sap.ui.define` call.
     *
     * If the module ID was omitted from that call, it will be substituted by the ID that was used to request
     * the module. As a preparation step, the dependencies as well as their transitive dependencies, will be
     * loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was
     * given as `vFactory`, that value will be the module value. If a function was given, that function will
     * be called (providing the module exports of the declared dependencies as parameters to the function) and
     * its return value will be used as module export value. The framework internally associates the resulting
     * value with the module ID and provides it to the original requester of the module. Whenever the module
     * is requested again, the same export value will be returned (modules are executed only once).
     *
     * Example:
     *  The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js',
     * it can be requested with the ID 'sap/mylib/SomeClass'.
     * ```javascript
     *
     *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
     *
     *     // create a new class
     *     var SomeClass = function() {};
     *
     *     // add methods to its prototype
     *     SomeClass.prototype.foo = function() {
     *
     *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
     *         var mSettings = Helper.foo();
     *
     *         // create and return an sap.m.Bar (using its local name 'Bar')
     *         return new Bar(mSettings);
     *
     *     }
     *
     *     // return the class as module value
     *     return SomeClass;
     *
     *   });
     * ```
     *
     *
     * In another module or in an application HTML page, the {@link sap.ui.require} API can be used to load
     * the sap/mylib/Something module and to work with it:
     *
     *
     * ```javascript
     *
     * sap.ui.require(['sap/mylib/Something'], function(Something) {
     *
     *   // instantiate a Something and call foo() on it
     *   new Something().foo();
     *
     * });
     * ```
     *
     *
     * Module Name Syntax:
     *
     * `sap.ui.define` uses a simplified variant of the {@link jQuery.sap.getResourcePath unified resource name}
     * syntax for the module's own name as well as for its dependencies. The only difference to that syntax
     * is, that for `sap.ui.define` and `sap.ui.require`, the extension (which always would be '.js') has to
     * be omitted. Both methods always add this extension internally.
     *
     * As a convenience, the name of a dependency can start with the segment './' which will be replaced by
     * the name of the package that contains the currently defined module (relative name).
     *
     * It is best practice to omit the name of the defined module (first parameter) and to use relative names
     * for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming
     * of packages and allows to map them to a different namespace.
     *
     * Dependency to Modules:
     *
     * If a dependencies array is given, each entry represents the name of another module that the currently
     * defined module depends on. All dependency modules are loaded before the export of the currently defined
     * module is determined. The module export of each dependency module will be provided as a parameter to
     * a factory function, the order of the parameters will match the order of the modules in the dependencies
     * array.
     *
     * **Note:** The order in which the dependency modules are executed is **not** defined by the order
     * in the dependencies array! The execution order is affected by dependencies between the dependency
     * modules as well as by their current state (whether a module already has been loaded or not). Neither
     * module implementations nor dependents that require a module set must make any assumption about the execution
     * order (other than expressed by their dependencies).
     *
     * **Note:** A static module export (a literal provided to `sap.ui.define`) cannot depend on the module
     * exports of the dependency modules as it has to be calculated before the dependencies are resolved. As
     * an alternative, modules can define a factory function, calculate a static export value in that function,
     * potentially based on the dependencies, and return the result as module export value. The same approach
     * must be taken when the module export is supposed to be a function.
     *
     * Asynchronous Contract:
     *
     * `sap.ui.define` is designed to support real Asynchronous Module Definitions (AMD) in future, although
     * it internally still might use synchronous module loading, depending on configuration and context. However,
     * callers of `sap.ui.define` must never rely on any synchronous behavior that they might observe in a specific
     * test scenario.
     *
     * For example, callers of `sap.ui.define` must not use the module export value immediately after invoking
     * `sap.ui.define`:
     *
     *
     * ```javascript
     *
     *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
     *
     *   // define a class Something as AMD module
     *   sap.ui.define('Something', [], function() {
     *     var Something = function() {};
     *     return Something;
     *   });
     *
     *   // DON'T DO THAT!
     *   // accessing the class _synchronously_ after sap.ui.define was called
     *   new Something();
     *
     * ```
     *
     *
     * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
     * **MUST** use the deprecated legacy APIs {@link jQuery.sap.declare} and {@link jQuery.sap.require}.
     *
     * (No) Global References:
     *
     * To be in line with AMD best practices, modules defined with `sap.ui.define` should not make any use of
     * global variables if those variables are also available as module exports. Instead, they should add dependencies
     * to those modules and use the corresponding parameter of the factory function to access the module exports.
     *
     * As the current programming model and the documentation of UI5 heavily rely on global names, there will
     * be a transition phase where UI5 enables AMD modules and local references to module exports in parallel
     * to the old global names. The fourth parameter of `sap.ui.define` has been added to support that transition
     * phase. When this parameter is set to true, the framework provides two additional features
     *
     *
     * 	 - Before the factory function is called, the existence of the global parent namespace for the current
     * 			module is ensured
     * 	 - The module export returned by the module's factory function will be automatically exported under
     * 			the global name which is derived from the ID of the module
     *
     * The parameter lets the framework know whether any of those two operations is needed or not. In future
     * versions of UI5, a central configuration option is planned to suppress those 'exports'.
     *
     * Third Party Modules: Although third party modules don't use UI5 APIs, they still can be listed as dependencies
     * in a `sap.ui.define` call. They will be requested and executed like UI5 modules, but to make their exports
     * available, so called ***shims*** have to be defined.
     *
     * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known
     * to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now
     * it is necessary to fully support UI5 applications that rely on global names for such modules.
     *
     * For third-party modules that UI5 delivers (e.g. those in namespace `sap/ui/thirdparty/`), the necessary
     * shims are defined by UI5 itself by executing the private module `ui5loader-autoconfig.js` during bootstrap.
     *
     * Example:
     * ```javascript
     *
     *   // module 'Something' wants to use third party library 'URI.js'
     *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
     *   // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value
     *   // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js
     *   sap.ui.loader.config({
     *     shim: {
     *       'sap/ui/thirdparty/URI': {
     *          amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders
     *          exports: 'URI' // name of the global variable under which URI.js exports its module value
     *       }
     *     }
     *   });
     *
     *   // now the module can be retrieved like other modules
     *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
     *
     *     new URIModuleValue(...); // same as the global 'URI' name: new URI(...)
     *
     *     ...
     *   });
     * ```
     *
     *
     * Differences to Standard AMD:
     *
     * The current implementation of `sap.ui.define` differs from the AMD specification (https://github.com/amdjs/amdjs-api)
     * or from concrete AMD loaders like `requireJS` in several aspects:
     * 	 - The name `sap.ui.define` is different from the plain `define`. This has two reasons: first, it avoids
     * 			the impression that `sap.ui.define` is an exact implementation of an AMD loader. And second, it allows
     * 			the coexistence of an AMD loader (e.g. requireJS) and `sap.ui.define` in one application as long as UI5
     * 			or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference
     * 			of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect
     * 			methods `define` and `require` to be available. Modules that use Unified Module Definition (UMD) syntax,
     * 			can be loaded, but only when no AMD loader is present or when they expose their export also to the global
     * 			namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them
     * 			using the `amd:true` flag (see example above)
     * 	 - Depending on configuration and the current context, `sap.ui.define` loads the dependencies of a module
     * 			either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading
     * 			is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce
     * 			synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications
     * 			that need to ensure synchronous loading of dependencies **MUST** use the deprecated legacy APIs like
     * 			{@link jQuery.sap.require}.
     * 	 - `sap.ui.define` does not support plugins to use other file types, formats or protocols. It is not
     * 			planned to support this in future
     * 	 - `sap.ui.define` does not support absolute URLs as module names (dependencies) nor does it allow module
     * 			names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered
     * 			that points to that URL (or to a prefix of it).
     * 	 - `sap.ui.define` does **not** support the 'sugar' of requireJS where CommonJS style dependency declarations
     * 			using `sap.ui.require("something")` are automagically converted into `sap.ui.define` dependencies before
     * 			executing the factory function.
     *
     * Restrictions, Design Considerations:
     * 	 - **Restriction**: as dependency management is not supported for Non-UI5 modules, the only way to ensure
     * 			proper execution order for such modules currently is to rely on the order in the dependency array. Obviously,
     * 			this only works as long as `sap.ui.define` uses synchronous loading. It will be enhanced when asynchronous
     * 			loading is implemented.
     * 	 - It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout
     * 			of 0). But this would have invalidated the current migration scenario where a sync `jQuery.sap.require`
     * 			call can load a `sap.ui.define`'ed module. If the module definition would not execute synchronously,
     * 			the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)
     *
     * 	 - A single file must not contain multiple calls to `sap.ui.define`. Multiple calls currently are only
     * 			supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of
     * 			how this works might be changed in future implementations and are not part of the API contract
     * See:
     * 	https://github.com/amdjs/amdjs-api
     */
    function define(
      /**
       * The module export value or a function that calculates that value
       */
      vFactory: Function | any,
      /**
       * Whether an export to global names is required - should be used by SAP-owned code only
       */
      bExport?: boolean
    ): void;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.ExtensionPoint.load} instead
     *
     * Creates 0..n UI5 controls from an `ExtensionPoint`.
     *
     * One control if the `ExtensionPoint` is e.g. filled with a `View`, zero for extension points without configured
     * extension and n controls for multi-root `Fragments` as extension.
     *
     * In `JSViews`, this function allows both JSON notation in aggregation content as well as adding an extension
     * point to an aggregation after the target control has already been instantiated. In the latter case the
     * optional parameters oTargetControls and oTargetAggregation need to be specified.
     *
     * @returns An array with 0..n controls created from an ExtensionPoint or if fnCreateDefaultContent is called
     * and returns a Promise, a Promise with the controls is returned instead
     */
    function extensionpoint(
      /**
       * The view or fragment containing the extension point
       */
      oContainer:
        | import("sap/ui/core/mvc/View").default
        | import("sap/ui/core/Fragment").default,
      /**
       * The extensionName used to identify the extension point in the customizing
       */
      sExtName: string,
      /**
       * Optional callback function creating default content, returning an array of controls. It is executed when
       * there's no customizing, if not provided, no default content will be rendered. `fnCreateDefaultContent`
       * might also return a Promise, which resolves with an array of controls.
       */
      fnCreateDefaultContent?: Function,
      /**
       * Optional - use this parameter to attach the extension point to a particular aggregation
       */
      oTargetControl?: import("sap/ui/core/Control").default,
      /**
       * Optional - if provided along with `oTargetControl`, the extension point content is added to this particular
       * aggregation at oTargetControl, if not given, but an oTargetControl is still present, the function will
       * attempt to add the extension point to the default aggregation of oTargetControl. If no oTargetControl
       * is provided, sAggregationName will also be ignored.
       */
      sAggregationName?: string
    ):
      | Array<import("sap/ui/core/Control").default>
      | Promise<Array<import("sap/ui/core/Control").default>>;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content.
     * The Fragment object itself is not an entity which has further significance beyond this constructor.
     *
     * To instantiate an existing Fragment, call this method as: sap.ui.fragment(sName, sType, [oController]);
     * The sName must correspond to a Fragment module which can be loaded via the module system (fragmentName
     * + suffix ".fragment.[typeextension]") and which defines the Fragment content. If oController is given,
     * the (event handler) methods referenced in the Fragment will be called on this controller. Note that Fragments
     * may require a Controller to be given and certain methods to be available.
     *
     * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be
     * implemented and added using the sap.ui.core.Fragment.registerType() function.
     *
     * Advanced usage: To instantiate a Fragment and give further configuration options, call this method as:
     * sap.ui.fragment(oFragmentConfig, [oController]); The oFragmentConfig object can have the following properties:
     * - "fragmentName": the name of the Fragment, as above - "fragmentContent": the definition of the Fragment
     * content itself. When this property is given, any given name is ignored. The type of this property depends
     * on the Fragment type, e.g. it could be a string for XML Fragments. - "type": the type of the Fragment,
     * as above (mandatory) - "id": the ID of the Fragment (optional) Further properties may be supported by
     * future or custom Fragment types. Any given properties will be forwarded to the Fragment implementation.
     *
     * If you want to give a fixed ID for the Fragment, please use the advanced version of this method call
     * with the configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...).
     * Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID
     * of all contained controls.
     *
     * @returns the root Control(s) of the Fragment content
     */
    function fragment(
      /**
       * the Fragment name
       */
      sName: string | Object,
      /**
       * the Fragment type, e.g. "XML", "JS", or "HTML"
       */
      sType: string,
      /**
       * the Controller or Object which should be used by the controls in the Fragment. Note that some Fragments
       * may not need a Controller and other may need one - and even rely on certain methods implemented in the
       * Controller.
       */
      oController?: import("sap/ui/core/mvc/Controller").default | Object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
     *
     * @returns the API of the current SAPUI5 Core instance.
     */
    function getCore(): import("sap/ui/core/Core").default;
    /**
     * @deprecated (since 1.56) - Use {@link module:sap/ui/VersionInfo.load} instead
     *
     * Loads the version info file (resources/sap-ui-version.json) and returns it or if a library name is specified
     * then the version info of the individual library will be returned.
     *
     * In case of the version info file is not available an error will occur when calling this function.
     *
     * @returns the full version info, the library specific one, undefined (if library is not listed or there
     * was an error and "failOnError" is set to "false") or a Promise which resolves with one of them
     */
    function getVersionInfo(
      /**
       * name of the library (e.g. "sap.ui.core") or an object map (see below)
       */
      mOptions?:
        | string
        | {
            /**
             * name of the library (e.g. "sap.ui.core")
             */
            library?: boolean;
            /**
             * whether "sap-ui-version.json" should be loaded asynchronously
             */
            async?: boolean;
            /**
             * whether to propagate load errors or not (not relevant for async loading)
             */
            failOnError?: boolean;
          }
    ): object | undefined | Promise<any>;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Instantiates an HTML-based Fragment.
     *
     * To instantiate a fragment, call:
     * ```javascript
     *
     *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
     * ```
     *  The fragment instance ID is optional and will be used as prefix for the ID of all contained controls.
     * If no ID is passed, controls will not be prefixed. The `sFragmentName` must correspond to an HTML fragment
     * which can be loaded via the module system (fragmentName + ".fragment.html") and which defines the fragment.
     * If `oController` is given, the methods referenced in the fragment will be called on this controller.
     * Note that fragments may require a controller to be given and certain methods to be available.
     *
     * Advanced usage:: To instantiate a fragment and optionally directly give the HTML definition instead of
     * loading it from a file, call:
     * ```javascript
     *
     *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
     * ```
     *  The `oFragmentConfig` object can either have a `fragmentName` or a `fragmentContent` property, but not
     * both of them. `fragmentContent` can hold the fragment definition as XML string; if not given, `fragmentName`
     * must be given and the fragment content definition is loaded by the module system. Again, if `oController`
     * is given, any methods referenced in the fragment will be called on this controller.
     *
     * @returns Root control or controls of the created fragment instance
     */
    function htmlfragment(
      /**
       * ID of the newly created fragment
       */
      sId: string,
      /**
       * Resource name of the fragment, a module name in dot notation without the '.fragment.html' suffix. Alternatively,
       * a configuration object can be given with the properties described below. In this case, no `sId` may be
       * given as first parameter, but as property `id` in the configuration object.
       */
      vFragment:
        | string
        | {
            /**
             * ID of the newly created fragment; will be used as a prefix to all contained control IDs
             */
            id?: string;
            /**
             * Resource name of the Fragment; a module name in dot notation without the '.fragment.html' suffix
             */
            fragmentName?: string;
            /**
             * Definition of the fragment as an HTML string
             */
            fragmentContent?: string;
          },
      /**
       * A controller to be used for event handlers in the fragment; can either be the controller of an enclosing
       * view, a new controller instance, or a simple object with the necessary methods attached. Note that a
       * fragment has no runtime representation besides its contained controls. There's therefore no API to retrieve
       * the controller after creating a fragment
       */
      oController?: import("sap/ui/core/mvc/Controller").default | object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Instantiates an HTML-based Fragment.
     *
     * To instantiate a fragment, call:
     * ```javascript
     *
     *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
     * ```
     *  The fragment instance ID is optional and will be used as prefix for the ID of all contained controls.
     * If no ID is passed, controls will not be prefixed. The `sFragmentName` must correspond to an HTML fragment
     * which can be loaded via the module system (fragmentName + ".fragment.html") and which defines the fragment.
     * If `oController` is given, the methods referenced in the fragment will be called on this controller.
     * Note that fragments may require a controller to be given and certain methods to be available.
     *
     * Advanced usage:: To instantiate a fragment and optionally directly give the HTML definition instead of
     * loading it from a file, call:
     * ```javascript
     *
     *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
     * ```
     *  The `oFragmentConfig` object can either have a `fragmentName` or a `fragmentContent` property, but not
     * both of them. `fragmentContent` can hold the fragment definition as XML string; if not given, `fragmentName`
     * must be given and the fragment content definition is loaded by the module system. Again, if `oController`
     * is given, any methods referenced in the fragment will be called on this controller.
     *
     * @returns Root control or controls of the created fragment instance
     */
    function htmlfragment(
      /**
       * Resource name of the fragment, a module name in dot notation without the '.fragment.html' suffix. Alternatively,
       * a configuration object can be given with the properties described below. In this case, no `sId` may be
       * given as first parameter, but as property `id` in the configuration object.
       */
      vFragment:
        | string
        | {
            /**
             * ID of the newly created fragment; will be used as a prefix to all contained control IDs
             */
            id?: string;
            /**
             * Resource name of the Fragment; a module name in dot notation without the '.fragment.html' suffix
             */
            fragmentName?: string;
            /**
             * Definition of the fragment as an HTML string
             */
            fragmentContent?: string;
          },
      /**
       * A controller to be used for event handlers in the fragment; can either be the controller of an enclosing
       * view, a new controller instance, or a simple object with the necessary methods attached. Note that a
       * fragment has no runtime representation besides its contained controls. There's therefore no API to retrieve
       * the controller after creating a fragment
       */
      oController?: import("sap/ui/core/mvc/Controller").default | object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.HTMLView.create HTMLView.create} to create view
     * instances
     *
     * Defines or creates an instance of a declarative HTML view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     *
     * 	 - View Definition `sap.ui.htmlview(sId, vView)`: Defines a view of the given name with the given implementation.
     * 			sId must be the views name, vView must be an object and can contain implementations for any of the hooks
     * 			provided by HTMLView
     * 	 - View Instantiation `sap.ui.htmlview(sId?, vView)`: Creates an instance of the view with the given
     * 			name (and id).
     *
     * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an
     * id will be created automatically.
     *
     * @returns the created HTMLView instance in the creation case, otherwise undefined
     */
    function htmlview(
      /**
       * id of the newly created view, only allowed for instance creation
       */
      sId: string,
      /**
       * name or implementation of the view.
       */
      vView:
        | string
        | {
            /**
             * whether the view source is loaded asynchronously
             */
            async?: boolean;
          }
    ): import("sap/ui/core/mvc/HTMLView").default | undefined;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.HTMLView.create HTMLView.create} to create view
     * instances
     *
     * Defines or creates an instance of a declarative HTML view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     *
     * 	 - View Definition `sap.ui.htmlview(sId, vView)`: Defines a view of the given name with the given implementation.
     * 			sId must be the views name, vView must be an object and can contain implementations for any of the hooks
     * 			provided by HTMLView
     * 	 - View Instantiation `sap.ui.htmlview(sId?, vView)`: Creates an instance of the view with the given
     * 			name (and id).
     *
     * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an
     * id will be created automatically.
     *
     * @returns the created HTMLView instance in the creation case, otherwise undefined
     */
    function htmlview(
      /**
       * name or implementation of the view.
       */
      vView:
        | string
        | {
            /**
             * whether the view source is loaded asynchronously
             */
            async?: boolean;
          }
    ): import("sap/ui/core/mvc/HTMLView").default | undefined;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Defines OR instantiates an HTML-based fragment.
     *
     * To define a JS fragment, call:
     * ```javascript
     *
     *    sap.ui.jsfragment(sName, oFragmentDefinition)
     * ```
     *  where:
     * 	 - `sName` is the name by which this fragment later can be found and instantiated. If defined in its
     * 			own file, in order to be found by the module loading system, the file location and name must correspond
     * 			to `sName` (path + file name must be: fragmentName + ".fragment.js").
     * 	 - `oFragmentDefinition` is an object at least holding the `createContent(oController)` method which
     * 			defines the fragment content. If given during instantiation, the `createContent` method receives a controller
     * 			instance (otherwise, parameter `oController` will be undefined) and the return value must be one `sap.ui.core.Control`
     * 			(which could have any number of children).
     *
     * To instantiate a JS fragment, call:
     * ```javascript
     *
     *    sap.ui.jsfragment([sId], sFragmentName, [oController]);
     * ```
     *  The fragment ID is optional (generated if not given) and the fragment implementation can use
     * it to make contained controls unique (this depends on the implementation: some JS fragments may choose
     * not to support multiple instances within one application and not use the ID prefixing). The `sFragmentName`
     * must correspond to a JS fragment which can be loaded via the module system (`sFragmentName` converted
     * to a path + ".fragment.js" suffix) and which defines the fragment. Or it can be a name that has been
     * used earlier to define a fragment of that name. If `oController` is given, the methods referenced in
     * the fragment will be called on this controller. Note that fragments may require a controller to be given
     * and certain methods to be available.
     *
     * @returns The root control(s) of the created fragment instance
     */
    function jsfragment(
      /**
       * Name of the fragment when defining a fragment; ID or name or configuration object when instantiating
       * a fragment
       */
      vName:
        | string
        | {
            /**
             * ID of the newly created fragment; will be used as a prefix to all contained control IDs
             */
            id?: string;
            /**
             * Name of the fragment. When no fragment has been defined with that name, the name will be converted to
             * a path by replacing dots with slashes and appending '.fragment.js'. The corresponding resource will be
             * loaded and is expected to define a fragment with the `fragmentName`
             */
            fragmentName?: string;
          },
      /**
       * When defining a fragment, this parameter must be a factory object that will be used to create new instances
       * of the fragment; it must at least contain a `createContent` method. When creating an instance of a fragment
       * and when `vName` was an ID, this parameter must be the name of the fragment. When the first parameter
       * was a name, this parameter must be omitted.
       */
      vFragmentDefinition?: object | string,
      /**
       * A controller to be used for event handlers in the fragment; can either be the controller of an enclosing
       * view, a new controller instance, or a simple object with the necessary methods attached. Note that a
       * fragment has no runtime representation besides its contained controls. There's therefore no API to retrieve
       * the controller after creating a fragment
       */
      oController?: import("sap/ui/core/mvc/Controller").default | object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.JSONView.create JSONView.create} to create view
     * instances
     *
     * Creates a JSON view of the given name and id.
     *
     * The `viewName` must either correspond to a JSON module that can be loaded via the module system (viewName
     * + suffix ".view.json") and which defines the view or it must be a configuration object for a view. The
     * configuration object can have a viewName, viewContent and a controller property. The viewName behaves
     * as described above, viewContent can hold the view description as JSON string or as object literal.
     *
     * **Note**: when an object literal is given, it might be modified during view construction.
     *
     * The controller property can hold a controller instance. If a controller instance is given, it overrides
     * the controller defined in the view.
     *
     * When property `async` is set to true, the view definition and the controller class (and its dependencies)
     * will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending
     * on the view configuration. Even when the view definition is provided as string or object tree, controller
     * or controls might be loaded asynchronously. In any case, a view instance will be returned synchronously
     * by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.
     *
     * Like with any other control, an id is optional and will be created when missing.
     *
     * @returns the created JSONView instance
     */
    function jsonview(
      /**
       * id of the newly created view
       */
      sId: string,
      /**
       * name of a view resource or view configuration as described above.
       */
      vView:
        | string
        | {
            /**
             * name of a view resource in module name notation (without suffix)
             */
            viewName?: string;
            /**
             * view definition as a JSON string or an object literal
             */
            viewContent?: string | object;
            /**
             * defines how the view source is loaded and rendered later on
             */
            async?: boolean;
            /**
             * controller to be used for this view instance
             */
            controller?: import("sap/ui/core/mvc/Controller").default;
          }
    ): import("sap/ui/core/mvc/JSONView").default;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.JSONView.create JSONView.create} to create view
     * instances
     *
     * Creates a JSON view of the given name and id.
     *
     * The `viewName` must either correspond to a JSON module that can be loaded via the module system (viewName
     * + suffix ".view.json") and which defines the view or it must be a configuration object for a view. The
     * configuration object can have a viewName, viewContent and a controller property. The viewName behaves
     * as described above, viewContent can hold the view description as JSON string or as object literal.
     *
     * **Note**: when an object literal is given, it might be modified during view construction.
     *
     * The controller property can hold a controller instance. If a controller instance is given, it overrides
     * the controller defined in the view.
     *
     * When property `async` is set to true, the view definition and the controller class (and its dependencies)
     * will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending
     * on the view configuration. Even when the view definition is provided as string or object tree, controller
     * or controls might be loaded asynchronously. In any case, a view instance will be returned synchronously
     * by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.
     *
     * Like with any other control, an id is optional and will be created when missing.
     *
     * @returns the created JSONView instance
     */
    function jsonview(
      /**
       * name of a view resource or view configuration as described above.
       */
      vView:
        | string
        | {
            /**
             * name of a view resource in module name notation (without suffix)
             */
            viewName?: string;
            /**
             * view definition as a JSON string or an object literal
             */
            viewContent?: string | object;
            /**
             * defines how the view source is loaded and rendered later on
             */
            async?: boolean;
            /**
             * controller to be used for this view instance
             */
            controller?: import("sap/ui/core/mvc/Controller").default;
          }
    ): import("sap/ui/core/mvc/JSONView").default;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.View.extend View.extend} to define the view class
     * and {@link sap.ui.core.mvc.View.create View.create} to create view instances
     *
     * Defines or creates an instance of a JavaScript view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     * View Definition:
     * ```javascript
     *
     *   sap.ui.jsview(sId, vView);
     * ```
     *  Defines a view of the given name with the given implementation. `sId` must be the view's name, `vView`
     * must be an object and can contain implementations for any of the hooks provided by JSView.
     *
     * View Instantiation (deprecated):
     * ```javascript
     *
     *   var oView = sap.ui.jsview(vView);
     *   var oView = sap.ui.jsview(vView, bASync);
     *   var oView = sap.ui.jsview(sId, vView);
     *   var oView = sap.ui.jsview(sId, vView, bAsync);
     * ```
     *  Creates an instance of the view with the given name (and id). If no view implementation has been defined
     * for that view name, a JavaScript module with the same qualified name and with suffix `.view.js` will
     * be loaded (required) and executed. The module should register a view definition on execution (1st. variant
     * above).
     *
     * If `sId` is omitted, an ID will be created automatically.
     *
     * When `bAsync` has a truthy value, the view definition will be read asynchronously, if needed, but the
     * (incomplete) view instance will be returned immediately.
     *
     * **Note:** Any other call signature will lead to a runtime error.
     *
     * @returns the created JSView instance in the creation case, otherwise undefined
     */
    function jsview(
      /**
       * ID of the newly created view, only allowed for instance creation
       */
      sId: string,
      /**
       * name or implementation of the view.
       */
      vView: string | object,
      /**
       * whether the view source is loaded asynchronously
       */
      bAsync?: boolean
    ): import("sap/ui/core/mvc/JSView").default | undefined;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.View.extend View.extend} to define the view class
     * and {@link sap.ui.core.mvc.View.create View.create} to create view instances
     *
     * Defines or creates an instance of a JavaScript view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     * View Definition:
     * ```javascript
     *
     *   sap.ui.jsview(sId, vView);
     * ```
     *  Defines a view of the given name with the given implementation. `sId` must be the view's name, `vView`
     * must be an object and can contain implementations for any of the hooks provided by JSView.
     *
     * View Instantiation (deprecated):
     * ```javascript
     *
     *   var oView = sap.ui.jsview(vView);
     *   var oView = sap.ui.jsview(vView, bASync);
     *   var oView = sap.ui.jsview(sId, vView);
     *   var oView = sap.ui.jsview(sId, vView, bAsync);
     * ```
     *  Creates an instance of the view with the given name (and id). If no view implementation has been defined
     * for that view name, a JavaScript module with the same qualified name and with suffix `.view.js` will
     * be loaded (required) and executed. The module should register a view definition on execution (1st. variant
     * above).
     *
     * If `sId` is omitted, an ID will be created automatically.
     *
     * When `bAsync` has a truthy value, the view definition will be read asynchronously, if needed, but the
     * (incomplete) view instance will be returned immediately.
     *
     * **Note:** Any other call signature will lead to a runtime error.
     *
     * @returns the created JSView instance in the creation case, otherwise undefined
     */
    function jsview(
      /**
       * name or implementation of the view.
       */
      vView: string | object,
      /**
       * whether the view source is loaded asynchronously
       */
      bAsync?: boolean
    ): import("sap/ui/core/mvc/JSView").default | undefined;
    /**
     * @deprecated (since 1.56) - Lazy loading enforces synchronous requests and therefore has been deprecated
     * without a replacement. Instead of loading classes via lazy stubs, they should be required as dependencies
     * of an AMD module (using {@link sap.ui.define}) or on demand with a call to {@link sap.ui.require}.
     *
     * Creates a lazy loading stub for a given class `sClassName`.
     *
     * If the class has been loaded already, nothing is done. Otherwise a stub object or constructor and - optionally
     * - a set of stub methods are created. All created stubs will load the corresponding module on execution
     * and then delegate to their counterpart in the loaded module.
     *
     * When no methods are given or when the list of methods contains the special name "new" (which is an operator
     * can't be used as method name in JavaScript), then a stub **constructor** for class `sClassName` is created.
     * Otherwise, a plain object is created.
     *
     * **Note**: Accessing any stub as a plain object without executing it (no matter whether it is a function
     * or an object) won't load the module and therefore most likely won't work as expected. This is a fundamental
     * restriction of the lazy loader approach.
     *
     * **Note**: As a side effect of this method, the namespace containing the given class is created **immediately**.
     */
    function lazyRequire(
      /**
       * Fully qualified name (dot notation) of the class that should be prepared
       */
      sClassName: string,
      /**
       * Space separated list of additional (static) methods that should be created as stubs
       */
      sMethods?: string,
      /**
       * Name of the module to load, defaults to the class name
       */
      sModuleName?: string
    ): void;
    /**
     * @deprecated (since 1.56) - use `sap.ui.loader.config` instead.
     *
     * Redirects access to resources that are part of the given namespace to a location relative to the assumed
     * **application root folder**.
     *
     * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.) whose resource
     * name starts with `sNamespace`, will be loaded from an equally named subfolder of the **application root
     * folder**. If the resource name consists of multiple segments (separated by a dot), each segment is assumed
     * to represent an individual folder. In other words: when a resource name is converted to a URL, any dots
     * ('.') are converted to slashes ('/').
     *
     * **Note:** The **application root folder** is assumed to be the same as the folder where the current page
     * resides in.
     *
     * Usage sample:
     * ```javascript
     *
     *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
     *   // should be loaded from the URL location "./com/mycompany/myapp"
     *   sap.ui.localResources("com.mycompany.myapp");
     *
     *   // The following call implicitly will use the mapping done by the previous line
     *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
     *   View.create({ viewName : "com.mycompany.myapp.views.Main", type : ViewType.XML}).then(function(oView) {
     *       // do stuff
     *   });
     * ```
     *
     *
     * When applications need a more flexible mapping between resource names and their location, they can use
     * {@link sap.ui.loader.config} with option `paths`.
     */
    function localResources(
      /**
       * Namespace prefix for which to load resources relative to the application root folder
       */
      sNamespace: string
    ): void;
    /**
     * @deprecated (since 1.1) - see {@link topic:c78c07c094e04ccfaab659378a1707c7 Creating Control and Class
     * Modules}.
     *
     * Ensures that a given a namespace or hierarchy of nested namespaces exists in the current `window`.
     *
     * @returns the innermost namespace of the hierarchy
     */
    function namespace(sNamespace: string): object;
    /**
     * Resolves one or more module dependencies.
     *
     * Synchronous Retrieval of a Single Module Export Value (Probing):
     *
     * When called with a single string, that string is assumed to be the ID of an already loaded module and
     * the export of that module is returned. If the module has not been loaded yet, or if it is a Non-UI5 module
     * (e.g. third-party module) without a shim, `undefined` is returned.
     *
     * This signature variant allows synchronous access to module exports without initiating module loading.
     *
     * Sample:
     * ```javascript
     *
     *   var JSONModel = sap.ui.require("sap/ui/model/json/JSONModel");
     * ```
     *
     *
     * For modules that are known to be UI5 modules, this signature variant can be used to check whether the
     * module has been loaded.
     *
     * Asynchronous Loading of Multiple Modules:
     *
     * If an array of strings is given and (optionally) a callback function, then the strings are interpreted
     * as module IDs and the corresponding modules (and their transitive dependencies) are loaded. Then the
     * callback function will be called asynchronously. The module exports of the specified modules will be
     * provided as parameters to the callback function in the same order in which they appeared in the dependencies
     * array.
     *
     * The return value for the asynchronous use case is `undefined`.
     *
     *
     * ```javascript
     *
     *   sap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel,UIComponent) {
     *
     *     var MyComponent = UIComponent.extend('MyComponent', {
     *       ...
     *     });
     *     ...
     *
     *   });
     * ```
     *
     *
     * This method uses the same variation of the {@link jQuery.sap.getResourcePath unified resource name} syntax
     * that {@link sap.ui.define} uses: module names are specified without the implicit extension '.js'. Relative
     * module names are not supported.
     *
     * @returns A single module export value (sync probing variant) or `undefined` (async loading variant)
     */
    function require(
      /**
       * Dependency (dependencies) to resolve
       */
      vDependencies:
        | string
        | Array<
            keyof IUI5DefineDependencyNames | (string & { IGNORE_ME?: never })
          >,
      /**
       * Callback function to execute after resolving an array of dependencies
       */
      fnCallback?: Function,
      /**
       * Callback function to execute if an error was detected while loading the dependencies or executing the
       * factory function. Note that due to browser restrictions not all errors will be reported via this callback.
       * In general, module loading is designed for the non-error case. Error handling is not complete.
       */
      fnErrback?: Function
    ): any | undefined;
    /**
     * @deprecated (since 1.56.0) - use `sap.ui.require.toUrl` instead.
     *
     * Returns the URL of a resource that belongs to the given library and has the given relative location within
     * the library. This is mainly meant for static resources like images that are inside the library. It is
     * NOT meant for access to JavaScript modules or anything for which a different URL has been registered
     * with sap.ui.loader.config({paths:...}). For these cases use sap.ui.require.toUrl(). It DOES work, however,
     * when the given sResourcePath starts with "themes/" (= when it is a theme-dependent resource). Even when
     * for this theme a different location outside the normal library location is configured.
     *
     * @returns the URL of the requested resource
     */
    function resource(
      /**
       * the name of a library, like "sap.ui.layout"
       */
      sLibraryName: string,
      /**
       * the relative path of a resource inside this library, like "img/mypic.png" or "themes/my_theme/img/mypic.png"
       */
      sResourcePath: string
    ): string;
    /**
     * @deprecated (since 1.1) - use {@link sap.ui.core.Control#placeAt Control#placeAt} instead.
     *
     * Displays the control tree with the given root inside the area of the given DOM reference (or inside the
     * DOM node with the given ID) or in the given Control.
     *
     * Example:
     * ```javascript
     *
     *   <div id="SAPUI5UiArea"></div>
     *   <script>
     *     var oRoot = new sap.m.Label();
     *     oRoot.setText("Hello world!");
     *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
     *   </script>
     * ```
     *
     *
     * This is a shortcut for `sap.ui.getCore().setRoot()`.
     *
     * Internally, if a string is given that does not identify a UIArea or a control then implicitly a new `UIArea`
     * is created for the given DOM reference and the given control is added.
     */
    function setRoot(
      /**
       * a DOM Element or Id String of the UIArea
       */
      oDomRef: string | Element | import("sap/ui/core/Control").default,
      /**
       * the Control that should be added to the `UIArea`.
       */
      oControl:
        | import("sap/ui/base/Interface").default
        | import("sap/ui/core/Control").default
    ): void;
    /**
     * @deprecated (since 1.56) - use an {@link sap.ui.core.mvc.XMLView XMLView} or {@link sap.ui.core.mvc.JSView
     * JSView} instead.
     *
     * Creates a Template for the given ID, DOM reference or a configuration object.
     *
     * If no parameter is defined, this function makes a lookup of DOM elements which are specifying a type
     * attribute. If the value of this type attribute matches a registered type then the content of this DOM
     * element will be used to create a new `Template` instance.
     *
     * If you want to lookup all kind of existing and known templates and parse them directly you can simply
     * call:
     * ```javascript
     *
     *   sap.ui.template();
     * ```
     *
     *
     * To parse a concrete DOM element you can do so by using this function in the following way:
     * ```javascript
     *
     *   sap.ui.template("theTemplateId");
     * ```
     *
     *
     * Or you can pass the reference to a DOM element and use this DOM element as a source for the template:
     *
     * ```javascript
     *
     *   sap.ui.template(oDomRef);
     * ```
     *
     *
     * The last option to use this function is to pass the information via a configuration object. This configuration
     * object can be used to pass a context for the templating framework when compiling the template:
     * ```javascript
     *
     *   var oTemplateById = sap.ui.template({
     *     id: "theTemplateId",
     *     context: { ... }
     *   });
     *
     *   var oTemplateByDomRef = sap.ui.template({
     *     domref: oDomRef,
     *     context: { ... }
     *   });
     * ```
     *
     *
     * It can also be used to load a template from another file:
     * ```javascript
     *
     *   var oTemplate = sap.ui.template({
     *     id: "myTemplate",
     *     src: "myTemplate.tmpl"
     *   });
     *
     *   var oTemplateWithContext = sap.ui.template({
     *     id: "myTemplate",
     *     src: "myTemplate.tmpl",
     *     context: { ... }
     *   });
     * ```
     *
     *
     * @returns the created Template instance or in case of usage without parameters any array of templates
     * is returned
     */
    function template(
      /**
       * the ID or the DOM reference to the template to lookup or a configuration object containing the src, type
       * and eventually the ID of the Template.
       */
      oTemplate?:
        | string
        | Element
        | {
            /**
             * the ID of the Template / the ID of the DOM element containing the source of the Template
             */
            id: string;
            /**
             * the DOM element containing the source of the Template
             */
            domref: Element;
            /**
             * the type of the Template
             */
            type?: string;
            /**
             * the context for the renderer/templating
             */
            context?: object;
            /**
             * the URL to lookup the template (experimental!)
             */
            src?: string;
            /**
             * the fully qualified name of the control to declare (experimental!)
             */
            control: string;
          }
    ):
      | import("sap/ui/core/tmpl/Template").default
      | Array<import("sap/ui/core/tmpl/Template").default>;
    /**
     * @deprecated (since 1.56) - use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b
     * XML Templating} instead
     *
     * Defines or creates an instance of a template view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     *
     * 	 - View Definition `sap.ui.templateview(sId, vView)`: Defines a view of the given name with the given
     * 			implementation. sId must be the views name, vView must be an object and can contain implementations for
     * 			any of the hooks provided by templateview
     * 	 - View Instantiation `sap.ui.templateview(sId?, vView)`: Creates an instance of the view with the given
     * 			name (and id).
     *
     * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an
     * id will be created automatically.
     *
     * @returns the created TemplateView instance in the creation case, otherwise undefined
     */
    function templateview(
      /**
       * id of the newly created view, only allowed for instance creation
       */
      sId: string,
      /**
       * name or implementation of the view.
       */
      vView: string | object
    ): import("sap/ui/core/mvc/TemplateView").default | undefined;
    /**
     * @deprecated (since 1.56) - use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b
     * XML Templating} instead
     *
     * Defines or creates an instance of a template view.
     *
     * The behavior of this method depends on the signature of the call and on the current context.
     *
     *
     * 	 - View Definition `sap.ui.templateview(sId, vView)`: Defines a view of the given name with the given
     * 			implementation. sId must be the views name, vView must be an object and can contain implementations for
     * 			any of the hooks provided by templateview
     * 	 - View Instantiation `sap.ui.templateview(sId?, vView)`: Creates an instance of the view with the given
     * 			name (and id).
     *
     * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an
     * id will be created automatically.
     *
     * @returns the created TemplateView instance in the creation case, otherwise undefined
     */
    function templateview(
      /**
       * name or implementation of the view.
       */
      vView: string | object
    ): import("sap/ui/core/mvc/TemplateView").default | undefined;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.View.extend View.extend} to define the view class
     * and {@link sap.ui.core.mvc.View.create View.create} to create view instances
     *
     * Creates a view of the given type, name and with the given ID.
     *
     * @returns the created View instance
     */
    function view(
      /**
       * The ID of the newly created view, only allowed for instance creation. If no ID is given, an ID will be
       * generated. For view definition, skip this parameter and use `vView` as the first parameter.
       */
      sId?: string,
      /**
       * The view name or view configuration object.
       */
      vView?:
        | string
        | {
            /**
             * Specifies an ID for the view instance. If no ID is given, an ID will be generated.
             */
            id?: object;
            /**
             * Corresponds to an XML module that can be loaded via the module system (vView.viewName + suffix ".view.xml").
             */
            viewName?: object;
            /**
             * The controller instance must be a valid controller implementation. The given controller instance overrides
             * the controller defined in the view definition.
             */
            controller?: import("sap/ui/core/mvc/Controller").default;
            /**
             * Whether the view source is loaded asynchronously. In asynchronous mode, the view is returned empty, and
             * the view content is loaded asynchronously.
             */
            async?: boolean;
            /**
             * Specifies what kind of view will be instantiated. All valid view types are listed in the enumeration
             * {@link sap.ui.core.mvc.ViewType}.
             */
            type?: import("sap/ui/core/mvc/ViewType").default;
            /**
             * Holds application specific data. This data is available during the whole lifecycle of the view and the
             * controller, for example in the constructor and in the {@link sap.ui.core.mvc.Controller.onInit onInit}
             * hook.
             */
            viewData?: object;
            /**
             * Holds a map from the specified preprocessor type (e.g. "xml") to an array of preprocessor configurations.
             * Each configuration consists of a `preprocessor` property (optional when registered as on-demand preprocessor)
             * and may contain further preprocessor-specific settings.
             */
            preprocessors?: Map<string, object[]>;
          }
    ): import("sap/ui/core/mvc/View").default;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Instantiates an XML-based Fragment.
     *
     * To instantiate a fragment, call:
     * ```javascript
     *
     *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
     * ```
     *  The fragment instance ID is optional and will be used as prefix for the ID of all contained controls.
     * If no ID is passed, controls will not be prefixed. The `sFragmentName` must correspond to an XML fragment
     * which can be loaded via the module system (fragmentName + ".fragment.xml") and which defines the fragment.
     * If `oController` is given, the methods referenced in the fragment will be called on this controller.
     *
     * Note that fragments may require a controller to be given and certain methods to be available.
     *
     * Advanced usage:: To instantiate a fragment and optionally directly give the XML definition instead of
     * loading it from a file, call:
     * ```javascript
     *
     *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
     * ```
     *  The `oFragmentConfig` object can either have a `fragmentName` or a `fragmentContent` property, but not
     * both. `fragmentContent` can hold the fragment definition as XML string; if not given, `fragmentName`
     * must be given and the fragment content definition is loaded via the module system. Again, if `oController`
     * is given, the methods referenced in the fragment will be called on this controller.
     *
     * @returns the root Control(s) of the created fragment instance
     */
    function xmlfragment(
      /**
       * ID of the newly created fragment
       */
      sId: string,
      /**
       * Resource name of the fragment; a module name in dot notation without the '.fragment.xml' suffix. Alternatively,
       * a configuration object can be given with the properties described below. In this case, no `sId` may be
       * given as first parameter, but as property `id` in the configuration object.
       */
      vFragment:
        | string
        | {
            /**
             * ID of the newly created fragment; will be used as a prefix to all contained control IDs
             */
            id?: string;
            /**
             * Resource name of the fragment; a module name in dot notation without the '.fragment.html' suffix
             */
            fragmentName?: string;
            /**
             * Definition of the fragment as an XML string
             */
            fragmentContent?: string;
          },
      /**
       * A controller to be used for event handlers in the fragment; can either be the controller of an enclosing
       * view, a new controller instance, or a simple object with the necessary methods attached. Note that a
       * fragment has no runtime representation besides its contained controls. There's therefore no API to retrieve
       * the controller after creating a fragment
       */
      oController?: import("sap/ui/core/mvc/Controller").default | object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * @deprecated (since 1.58) - use {@link sap.ui.core.Fragment.load} instead
     *
     * Instantiates an XML-based Fragment.
     *
     * To instantiate a fragment, call:
     * ```javascript
     *
     *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
     * ```
     *  The fragment instance ID is optional and will be used as prefix for the ID of all contained controls.
     * If no ID is passed, controls will not be prefixed. The `sFragmentName` must correspond to an XML fragment
     * which can be loaded via the module system (fragmentName + ".fragment.xml") and which defines the fragment.
     * If `oController` is given, the methods referenced in the fragment will be called on this controller.
     *
     * Note that fragments may require a controller to be given and certain methods to be available.
     *
     * Advanced usage:: To instantiate a fragment and optionally directly give the XML definition instead of
     * loading it from a file, call:
     * ```javascript
     *
     *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
     * ```
     *  The `oFragmentConfig` object can either have a `fragmentName` or a `fragmentContent` property, but not
     * both. `fragmentContent` can hold the fragment definition as XML string; if not given, `fragmentName`
     * must be given and the fragment content definition is loaded via the module system. Again, if `oController`
     * is given, the methods referenced in the fragment will be called on this controller.
     *
     * @returns the root Control(s) of the created fragment instance
     */
    function xmlfragment(
      /**
       * Resource name of the fragment; a module name in dot notation without the '.fragment.xml' suffix. Alternatively,
       * a configuration object can be given with the properties described below. In this case, no `sId` may be
       * given as first parameter, but as property `id` in the configuration object.
       */
      vFragment:
        | string
        | {
            /**
             * ID of the newly created fragment; will be used as a prefix to all contained control IDs
             */
            id?: string;
            /**
             * Resource name of the fragment; a module name in dot notation without the '.fragment.html' suffix
             */
            fragmentName?: string;
            /**
             * Definition of the fragment as an XML string
             */
            fragmentContent?: string;
          },
      /**
       * A controller to be used for event handlers in the fragment; can either be the controller of an enclosing
       * view, a new controller instance, or a simple object with the necessary methods attached. Note that a
       * fragment has no runtime representation besides its contained controls. There's therefore no API to retrieve
       * the controller after creating a fragment
       */
      oController?: import("sap/ui/core/mvc/Controller").default | object
    ):
      | import("sap/ui/core/Control").default
      | Array<import("sap/ui/core/Control").default>;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.XMLView.create XMLView.create} to create view instances
     *
     * Instantiates an XMLView of the given name and with the given ID.
     *
     * The `vView` can either be the name of the module that contains the view definition or it can be a configuration
     * object with properties `viewName`, `viewContent` and a `controller` property (more properties are described
     * in the parameters section below).
     *
     * If a `viewName` is given, it behaves the same as when `vView` is a string: the named resource will be
     * loaded and parsed as XML. Alternatively, an already loaded view definition can be provided as `viewContent`,
     * either as XML string or as an already parsed XML document. Exactly one of `viewName` and `viewContent`
     * must be given, if none or both are given, an error will be reported. The `controller` property is optional
     * and can hold a controller instance. When given, it overrides the controller class defined in the view
     * definition.
     *
     * When property `async` is set to true, the view definition and the controller class (and its dependencies)
     * will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending
     * on the processingMode. Even when the view definition is provided as string or XML Document, controller
     * or controls might be loaded asynchronously. In any case a view instance will be returned synchronously
     * by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.
     *
     * **Note**: If an XML document is given, it might be modified during view construction.
     *
     * **Note**: On root level, you can only define content for the default aggregation, e.g. without adding
     * the `<content>` tag. If you want to specify content for another aggregation of a view like `dependents`,
     * place it in a child control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
     *
     * **Note**: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation
     * takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still
     * an experimental feature and may experience slight changes of the invalidation parameters or the cache
     * key format.
     *
     * Like with any other control, `sId` is optional and an ID will be created automatically.
     *
     * @returns the created XMLView instance
     */
    function xmlview(
      /**
       * ID of the newly created view
       */
      sId: string,
      /**
       * Name of the view or a view configuration object as described above
       */
      vView:
        | string
        | {
            /**
             * Name of the view resource in module name notation (without suffix)
             */
            viewName?: string;
            /**
             * XML string or XML document that defines the view
             */
            viewContent?: string | Document;
            /**
             * whether the view source is loaded asynchronously
             */
            async?: boolean;
            /**
             * Cache configuration, only for `async` views; caching gets active when this object is provided with vView.cache.keys
             * array; keys are used to store data in the cache and for invalidation of the cache
             */
            cache?: {
              /**
               * Array with strings or Promises resolving with strings
               */
              keys?: Array<string | Promise<string>>;
            };
            /**
             * Preprocessors configuration, see {@link sap.ui.core.mvc.View}
             */
            preprocessors?: object;
            /**
             * Controller instance to be used for this view
             */
            controller?: import("sap/ui/core/mvc/Controller").default;
          }
    ): import("sap/ui/core/mvc/XMLView").default;
    /**
     * @deprecated (since 1.56) - Use {@link sap.ui.core.mvc.XMLView.create XMLView.create} to create view instances
     *
     * Instantiates an XMLView of the given name and with the given ID.
     *
     * The `vView` can either be the name of the module that contains the view definition or it can be a configuration
     * object with properties `viewName`, `viewContent` and a `controller` property (more properties are described
     * in the parameters section below).
     *
     * If a `viewName` is given, it behaves the same as when `vView` is a string: the named resource will be
     * loaded and parsed as XML. Alternatively, an already loaded view definition can be provided as `viewContent`,
     * either as XML string or as an already parsed XML document. Exactly one of `viewName` and `viewContent`
     * must be given, if none or both are given, an error will be reported. The `controller` property is optional
     * and can hold a controller instance. When given, it overrides the controller class defined in the view
     * definition.
     *
     * When property `async` is set to true, the view definition and the controller class (and its dependencies)
     * will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending
     * on the processingMode. Even when the view definition is provided as string or XML Document, controller
     * or controls might be loaded asynchronously. In any case a view instance will be returned synchronously
     * by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.
     *
     * **Note**: If an XML document is given, it might be modified during view construction.
     *
     * **Note**: On root level, you can only define content for the default aggregation, e.g. without adding
     * the `<content>` tag. If you want to specify content for another aggregation of a view like `dependents`,
     * place it in a child control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
     *
     * **Note**: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation
     * takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still
     * an experimental feature and may experience slight changes of the invalidation parameters or the cache
     * key format.
     *
     * Like with any other control, `sId` is optional and an ID will be created automatically.
     *
     * @returns the created XMLView instance
     */
    function xmlview(
      /**
       * Name of the view or a view configuration object as described above
       */
      vView:
        | string
        | {
            /**
             * Name of the view resource in module name notation (without suffix)
             */
            viewName?: string;
            /**
             * XML string or XML document that defines the view
             */
            viewContent?: string | Document;
            /**
             * whether the view source is loaded asynchronously
             */
            async?: boolean;
            /**
             * Cache configuration, only for `async` views; caching gets active when this object is provided with vView.cache.keys
             * array; keys are used to store data in the cache and for invalidation of the cache
             */
            cache?: {
              /**
               * Array with strings or Promises resolving with strings
               */
              keys?: Array<string | Promise<string>>;
            };
            /**
             * Preprocessors configuration, see {@link sap.ui.core.mvc.View}
             */
            preprocessors?: object;
            /**
             * Controller instance to be used for this view
             */
            controller?: import("sap/ui/core/mvc/Controller").default;
          }
    ): import("sap/ui/core/mvc/XMLView").default;
    /**
     * Provides access to UI5 loader configuration.
     *
     * The configuration is used by {@link sap.ui.require} and {@link sap.ui.define}.
     */
    namespace loader {
      /**
       * @SINCE 1.56.0
       *
       * Sets the configuration for the UI5 loader. The configuration can be updated multiple times. Later changes
       * do not impact modules that have been loaded before.
       *
       * If no parameter is given, a partial copy of UI5 loader configuration in use is returned.
       *
       * The configuration options are aligned with the "Common Config" draft of the AMD spec (https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md).
       *
       * The following code shows an example of what a UI5 loader configuration might look like:
       * ```javascript
       *
       *
       *   sap.ui.loader.config({
       *
       *     // location from where to load all modules by default
       *     baseUrl: '../../resources/',
       *
       *     paths: {
       *       // load modules whose ID equals to or starts with 'my/module' from example.com
       *       'my/module': 'https://example.com/resources/my/module'
       *     },
       *
       *     map: {
       *       // if any module requires 'sinon', load module 'sap/ui/thirdparty/sinon-4'
       *       '*': {
       *         'sinon': 'sap/ui/thirdparty/sinon-4'
       *       },
       *       // but if a module whose ID equals to or starts with 'app' requires 'sinon'
       *       // then load a legacy version instead
       *       "app": {
       *         'sinon': 'sap/ui/legacy/sinon'
       *       }
       *     },
       *
       *     // define two bundles that consists of JS modules only
       *     bundles: {
       *       bundle1: ['module1', 'module2'],
       *       bundle2: ['moduleX', 'moduleY']
       *     },
       *
       *     // define a bundle that also contains non-JS resources
       *     bundlesUI5: {
       *       'all.js': ['Component.js', 'manifest.json',
       *                  'App.controller.js', 'App.view.xml']
       *     },
       *
       *     // activate real async loading and module definitions
       *     async: true,
       *
       *     // provide dependency and export metadata for non-UI5 modules
       *     shim: {
       *       'sap/ui/thirdparty/blanket': {
       *         amd: true,
       *         exports: 'blanket'
       *       }
       *     }
       *
       *   });
       *
       * ```
       *
       *
       * @returns UI5 loader configuration in use.
       */
      function config(
        /**
         * The provided configuration gets merged with the UI5 loader configuration in use. If `cfg` is omitted
         * or `undefined`, a copy of the current configuration gets returned, containing at least the properties
         * `amd` and `async`.
         */
        cfg?: {
          /**
           * Default location to load modules from. If none of the configured `paths` prefixes matches a module ID,
           * the module will be loaded from the concatenation of the `baseUrl` and the module ID.
           *
           * If the `baseUrl` itself is a relative URL, it is evaluated relative to `document.baseURI`.
           */
          baseUrl?: string;
          /**
           * A map of resource locations keyed by a corresponding module ID prefix. When a module is to be loaded,
           * the longest key in `paths` is searched that is a prefix of the module ID. The module will be loaded from
           * the concatenation of the corresponding value in `paths` and the remainder of the module ID (after the
           * prefix). If no entry in `paths` matches, then the module will be loaded from the `baseUrl`.
           *
           * The prefixes (keys) must not contain relative segments (./ or ../), a trailing slash will be removed,
           * and only full name segment matches are considered a match (prefix 'sap/m' does not match a module ID
           * 'sap/main').
           *
           * **Note**: In contrast to the "Common Config" of the AMD spec, the paths (values in the map) are interpreted
           * relative to `document.baseURI`, not relative to `cfg.baseUrl`.
           */
          paths?: Record<string, string>;
          /**
           * A map of maps that defines how to map module IDs to other module IDs (inner maps) in the context of a
           * specific set of modules (keys of outer map).
           *
           * Each key of the outer map represents a module ID prefix that describes the context for which its value
           * (inner map) has to be used. The special key `*` describes the default context which applies for any module.
           * Only the most specific matching context will be taken into account.
           *
           * Each inner map maps a module ID or module ID prefix to another module ID or module ID prefix. Again,
           * only the most specific match is taken into account and only one mapping is evaluated (the evaluation
           * of the mappings is not done recursively).
           *
           * Matches are always complete matches, a prefix 'a/b/c' does not match the module ID 'a/b/com'.
           */
          map?: Record<string, Record<string, string>>;
          /**
           * Defines additional metadata for modules for which the normal behavior of the AMD APIs is not sufficient.
           *
           * A typical example are scripts that don't use `define` or `sap.ui.define`, but export to a global name.
           * With the `exports` property, one or more export names can be specified, and the loader can retrieve the
           * exported value after executing the corresponding module. If such a module has dependencies, they can
           * be specified in the `deps` array and are loaded and executed before executing the module.
           *
           * The `amd` flag of a shim is a ui5loader-specific extension of the standard AMD shims. If set, the ui5loader
           * hides a currently active AMD loader before executing the module and restores it afterwards. Otherwise,
           * it might miss the export of third party modules that check for an AMD loader and register with it instead
           * of exporting to a global name. A future version of the ui5loader might ignore this flag when it acts
           * as an AMD loader by itself.
           *
           * **Note:** The ui5loader does not support the `init` option described by the "Common Config" section of
           * the AMD spec.
           */
          shim?: Record<
            string,
            {
              amd: boolean;

              deps: string[];

              exports: string | string[];
            }
          >;
          /**
           * A map of arrays that each define the modules contained in a bundle.
           *
           * Each key of the map represents the module ID of a bundle file. The array value represents the set of
           * JavaScript modules (their module IDs) that are contained in the bundle.
           *
           * When a module is required that has not been loaded yet, and for which a containing bundle is known, that
           * bundle will be required first. Only then the original module will be required again and usually be taken
           * from the just loaded bundle.
           *
           * A bundle will be loaded asynchronously only when the loader is in asynchronous mode and when the request
           * for the contained module originates from an asynchronous API. In all other cases, the bundle has to be
           * loaded synchronously to fulfill API contracts.
           *
           * **Note:** The loader only supports one containing bundle per module. If a module is declared to be part
           * of multiple bundles, only the last one will be taken into account.
           *
           * This configuration option is basically provided to be compatible with requireJS or SystemJS configuration.
           */
          bundles?: Record<string, string[]>;
          /**
           * A map of arrays that each define the resources contained in a bundle.
           *
           * This is similar to `bundles`, but all strings are unified resource names including a file type extension,
           * not only module IDs. This allows to represent more than just JavaScript modules.
           *
           * Each key of the map represents the resource name (in unified resource name syntax) of a bundle file.
           * The array value represents the set of resources (also in unified resource name syntax) that are contained
           * in the bundle. The array can contain JavaScript as well as other textual resource types (e.g. *.xml or
           * *.json resources).
           *
           * When a module is required that has not been loaded yet, and for which a containing bundle is known, that
           * bundle will be required first. Only then the original module will be required again and usually be taken
           * from the just loaded bundle.
           *
           * A bundle will be loaded asynchronously only when the loader is in asynchronous mode and when the request
           * for the contained module originates from an asynchronous API. In all other cases, the bundle has to be
           * loaded synchronously to fulfill API contracts.
           *
           * **Note:** The loader only supports one containing bundle per module. If a module is declared to be part
           * of multiple bundles, only the last one will be taken into account.
           *
           * **Note:** Although non-JS resources can be declared to be part of a bundle, only requests for JavaScript
           * modules will currently trigger the loading of a bundle.
           */
          bundlesUI5?: Record<string, string[]>;
          /**
           * When set to true, `sap.ui.require` loads modules asynchronously via script tags and `sap.ui.define` executes
           * asynchronously. To enable this feature, it is recommended to set the attribute `data-sap-ui-async="true"`
           * on the application bootstrap tag.
           *
           * **Note:** Switching back from async to sync is not supported and trying to do so will throw an `Error`
           */
          async?: boolean;
          /**
           * When set to true, the ui5loader will overwrite the global properties `define` and `require` with its
           * own implementations. Any previously active AMD loader will be remembered internally and can be restored
           * by setting `amd` to false again.
           *
           * **Note:** Switching to the `amd` mode, the ui5loader will set `async` to true implicitly for activating
           * asynchronous loading. Once the loading behaviour has been defined to be asynchronous, it can not be changed
           * to synchronous behaviour again, also not via setting `amd` to false.
           */
          amd?: boolean;
        }
      ): object | undefined;
    }
    /**
     * The SAPUI5 Data Binding API.
     *
     * The default binding mode for model implementations (if not implemented otherwise) is two-way and the
     * supported binding modes by the model are one-way, two-way and one-time. The default binding mode can
     * be changed by the application for each model instance. A model implementation should specify its supported
     * binding modes and set the default binding mode accordingly (e.g. if the model supports only one-way binding
     * the default binding mode should also be set to one-way).
     *
     * The default size limit for models is 100. The size limit determines the number of entries used for the
     * list bindings.
     */
    namespace model {
      /**
       * Analytical Adapter for ODataModels
       */
      namespace analytics {
        /**
         * @EXPERIMENTAL - This module is only for experimental use!
         * @PROTECTED - DO NOT USE IN APPLICATIONS (only for related classes in the framework)
         *
         * If called on an instance of an (v1/v2) ODataModel it will enrich it with analytics capabilities.
         */
        function ODataModelAdapter(): void;
      }
    }

    namespace component {
      /**
       * @SINCE 1.16.3
       * @deprecated (since 1.56) - use {@link sap.ui.core.Component.load}
       *
       * Load a component without instantiating it.
       *
       * Provides support for loading components asynchronously by setting `oConfig.async` to true. In that case,
       * the method returns a JavaScript 6 Promise that will be fulfilled with the component class after loading.
       *
       * Using `async = true` doesn't necessarily mean that no more synchronous loading occurs. Both the framework
       * as well as component implementations might still execute synchronous requests. The contract for `async
       * = true` just allows to use async calls.
       *
       * When a manifest.json is referenced in oConfig this manifest is not used for the derived instances of
       * the Component class. The manifest/manifest url must be provided for every instance explicitly.
       *
       * Since 1.27.0, when asynchronous loading is used, additional `asyncHints` can be provided. This parameter
       * is only used internally by the UI5 framework and compatibility cannot be guaranteed. The parameter must
       * not be used in productive code, except in code delivered by the UI5 teams.
       *
       *
       * 	 - `oConfig.asyncHints.components : string[]`a list of components needed by the current component and
       * 			its subcomponents The framework will try to preload these components (their Component-preload.js) asynchronously,
       * 			errors will be ignored. Please note that the framework has no knowledge about whether a Component provides
       * 			a preload file or whether it is bundled in some library preload. If Components are listed in the hints
       * 			section, they will be preloaded.
       * 	 - `oConfig.asyncHints.libs : string[]`libraries needed by the Component and its subcomponents. The
       * 			framework will asynchronously load those libraries, if they're not loaded yet.
       * 	 - `oConfig.asyncHints.preloadBundles : string[]`a list of additional preload bundles The framework
       * 			will try to load these bundles asynchronously before requiring the Component, errors will be ignored.
       * 			The named modules must only represent preload bundles. If they are normal modules, their dependencies
       * 			will be loaded with the normal synchronous request mechanism and performance might degrade. `oConfig.asyncHints.preloadOnly
       * 			: boolean (default: false)` whether only the preloads should be done, but not the loading of the Component
       * 			controller class itself.
       *
       * If Components and/or libraries are listed in the hints section, all the corresponding preload files will
       * be requested in parallel. The constructor class will only be required after all of them are rejected
       * or resolved. Instead of specifying just the name of a component or library in the hints, an object might
       * be given that contains a mandatory `name` property and, optionally, an `url` that will be used for a
       * `registerModulePath` and/or a `lazy` property. When `lazy` is set to a truthy value, only a necessary
       * `registerModulePath` will be executed, but the corresponding component or lib won't be preloaded. For
       * preload bundles, also an object might be given instead of a simple name, but there only the `url` property
       * is supported, not the `lazy` property.
       *
       * Note: so far, only the requests for the preload files (library and/or component) are executed asynchronously.
       * If a preload is deactivated by configuration (e.g. debug mode), then remaining requests still might be
       * synchronous.
       *
       * @returns Constructor of the component class or a Promise that will be fulfilled with the same
       */
      function load(
        /**
         * Configuration object describing the Component to be loaded. See {@link sap.ui.component} for more information.
         */
        oConfig: object
      ): Function | Promise<any>;
    }

    namespace require {
      /**
       * Calculates a URL from the provided resource name.
       *
       * The calculation takes any configured ID mappings or resource paths into account (see {@link sap.ui.loader.config
       * config options map and paths}. It also supports relative segments such as `./` and `../` within the path,
       * but not at its beginning. If relative navigation would cross the root namespace (e.g. `sap.ui.require.toUrl("../")`)
       * or when the resource name starts with a slash or with a relative segment, an error is thrown.
       *
       * **Note:** `toUrl` does not resolve the returned URL; whether it is an absolute URL or a relative URL
       * depends on the configured `baseUrl` and `paths`.
       * See:
       * 	https://github.com/amdjs/amdjs-api/wiki/require#requiretourlstring-
       *
       * @returns Path to the resource, e.g. `'/home/app/data.json'`
       */
      function toUrl(
        /**
         * Name of a resource e.g. `'app/data.json'`
         */
        sName: string
      ): string;
    }
  }

  interface IUI5DefineDependencyNames {
    "jquery.sap.act": undefined;

    "jquery.sap.events": undefined;

    "jquery.sap.global": undefined;

    "jquery.sap.history": undefined;

    "jquery.sap.keycodes": undefined;

    "jquery.sap.mobile": undefined;

    "jquery.sap.properties": undefined;

    "jquery.sap.resources": undefined;

    "jquery.sap.script": undefined;

    "jquery.sap.storage": undefined;

    "jquery.sap.trace": undefined;

    "sap/base/assert": undefined;

    "sap/base/i18n/ResourceBundle": undefined;

    "sap/base/Log": undefined;

    "sap/base/security/encodeCSS": undefined;

    "sap/base/security/encodeJS": undefined;

    "sap/base/security/encodeURL": undefined;

    "sap/base/security/encodeURLParameters": undefined;

    "sap/base/security/encodeXML": undefined;

    "sap/base/security/URLListValidator": undefined;

    "sap/base/security/URLWhitelist": undefined;

    "sap/base/strings/camelize": undefined;

    "sap/base/strings/capitalize": undefined;

    "sap/base/strings/escapeRegExp": undefined;

    "sap/base/strings/formatMessage": undefined;

    "sap/base/strings/hyphenate": undefined;

    "sap/base/strings/whitespaceReplacer": undefined;

    "sap/base/util/array/diff": undefined;

    "sap/base/util/array/uniqueSort": undefined;

    "sap/base/util/deepClone": undefined;

    "sap/base/util/deepEqual": undefined;

    "sap/base/util/deepExtend": undefined;

    "sap/base/util/Deferred": undefined;

    "sap/base/util/defineCoupledProperty": undefined;

    "sap/base/util/defineLazyProperty": undefined;

    "sap/base/util/each": undefined;

    "sap/base/util/extend": undefined;

    "sap/base/util/fetch": undefined;

    "sap/base/util/includes": undefined;

    "sap/base/util/isEmptyObject": undefined;

    "sap/base/util/isPlainObject": undefined;

    "sap/base/util/JSTokenizer": undefined;

    "sap/base/util/LoaderExtensions": undefined;

    "sap/base/util/merge": undefined;

    "sap/base/util/mixedFetch": undefined;

    "sap/base/util/now": undefined;

    "sap/base/util/ObjectPath": undefined;

    "sap/base/util/Properties": undefined;

    "sap/base/util/resolveReference": undefined;

    "sap/base/util/syncFetch": undefined;

    "sap/base/util/uid": undefined;

    "sap/base/util/UriParameters": undefined;

    "sap/base/util/values": undefined;

    "sap/base/util/Version": undefined;

    "sap/ui/app/Application": undefined;

    "sap/ui/app/MockServer": undefined;

    "sap/ui/base/BindingInfo": undefined;

    "sap/ui/base/DataType": undefined;

    "sap/ui/base/Event": undefined;

    "sap/ui/base/EventProvider": undefined;

    "sap/ui/base/Interface": undefined;

    "sap/ui/base/ManagedObject": undefined;

    "sap/ui/base/ManagedObjectMetadata": undefined;

    "sap/ui/base/ManagedObjectObserver": undefined;

    "sap/ui/base/Metadata": undefined;

    "sap/ui/base/Object": undefined;

    "sap/ui/base/ObjectPool": undefined;

    "sap/ui/base/SyncPromise": undefined;

    "sap/ui/core/_UrlResolver": undefined;

    "sap/ui/core/AppCacheBuster": undefined;

    "sap/ui/core/BusyIndicator": undefined;

    "sap/ui/core/BusyIndicatorUtils": undefined;

    "sap/ui/core/cache/CacheManager": undefined;

    "sap/ui/core/cache/LRUPersistentCache": undefined;

    "sap/ui/core/CalendarType": undefined;

    "sap/ui/core/CommandExecution": undefined;

    "sap/ui/core/Component": undefined;

    "sap/ui/core/ComponentContainer": undefined;

    "sap/ui/core/ComponentMetadata": undefined;

    "sap/ui/core/ComponentSupport": undefined;

    "sap/ui/core/Configuration": undefined;

    "sap/ui/core/Control": undefined;

    "sap/ui/core/Core": undefined;

    "sap/ui/core/CustomData": undefined;

    "sap/ui/core/date/CalendarUtils": undefined;

    "sap/ui/core/date/CalendarWeekNumbering": undefined;

    "sap/ui/core/date/UI5Date": undefined;

    "sap/ui/core/date/UniversalDate": undefined;

    "sap/ui/core/date/UniversalDateUtils": undefined;

    "sap/ui/core/DeclarativeSupport": undefined;

    "sap/ui/core/delegate/ItemNavigation": undefined;

    "sap/ui/core/delegate/ScrollEnablement": undefined;

    "sap/ui/core/dnd/DragAndDrop": undefined;

    "sap/ui/core/dnd/DragDropBase": undefined;

    "sap/ui/core/dnd/DragDropInfo": undefined;

    "sap/ui/core/dnd/DragInfo": undefined;

    "sap/ui/core/dnd/DropInfo": undefined;

    "sap/ui/core/Element": undefined;

    "sap/ui/core/ElementMetadata": undefined;

    "sap/ui/core/EnabledPropagator": undefined;

    "sap/ui/core/EventBus": undefined;

    "sap/ui/core/ExtensionPoint": undefined;

    "sap/ui/core/format/DateFormat": undefined;

    "sap/ui/core/format/DateFormatTimezoneDisplay": undefined;

    "sap/ui/core/format/FileSizeFormat": undefined;

    "sap/ui/core/format/ListFormat": undefined;

    "sap/ui/core/format/NumberFormat": undefined;

    "sap/ui/core/format/TimezoneUtil": undefined;

    "sap/ui/core/Fragment": undefined;

    "sap/ui/core/History": undefined;

    "sap/ui/core/HTML": undefined;

    "sap/ui/core/hyphenation/Hyphenation": undefined;

    "sap/ui/core/Icon": undefined;

    "sap/ui/core/IconPool": undefined;

    "sap/ui/core/IndicationColorSupport": undefined;

    "sap/ui/core/IntervalTrigger": undefined;

    "sap/ui/core/InvisibleMessage": undefined;

    "sap/ui/core/InvisibleRenderer": undefined;

    "sap/ui/core/InvisibleText": undefined;

    "sap/ui/core/Item": undefined;

    "sap/ui/core/LabelEnablement": undefined;

    "sap/ui/core/LayoutData": undefined;

    "sap/ui/core/library": undefined;

    "sap/ui/core/ListItem": undefined;

    "sap/ui/core/LocalBusyIndicator": undefined;

    "sap/ui/core/Locale": undefined;

    "sap/ui/core/LocaleData": undefined;

    "sap/ui/core/Manifest": undefined;

    "sap/ui/core/Message": undefined;

    "sap/ui/core/message/ControlMessageProcessor": undefined;

    "sap/ui/core/message/Message": undefined;

    "sap/ui/core/message/MessageManager": undefined;

    "sap/ui/core/message/MessageParser": undefined;

    "sap/ui/core/message/MessageProcessor": undefined;

    "sap/ui/core/mvc/Controller": undefined;

    "sap/ui/core/mvc/ControllerExtension": undefined;

    "sap/ui/core/mvc/ControllerExtensionProvider": undefined;

    "sap/ui/core/mvc/HTMLView": undefined;

    "sap/ui/core/mvc/JSONView": undefined;

    "sap/ui/core/mvc/JSView": undefined;

    "sap/ui/core/mvc/OverrideExecution": undefined;

    "sap/ui/core/mvc/TemplateView": undefined;

    "sap/ui/core/mvc/View": undefined;

    "sap/ui/core/mvc/ViewType": undefined;

    "sap/ui/core/mvc/XMLView": undefined;

    "sap/ui/core/Patcher": undefined;

    "sap/ui/core/Placeholder": undefined;

    "sap/ui/core/Popup": undefined;

    "sap/ui/core/postmessage/Bus": undefined;

    "sap/ui/core/Renderer": undefined;

    "sap/ui/core/RenderManager": undefined;

    "sap/ui/core/ResizeHandler": undefined;

    "sap/ui/core/routing/HashChanger": undefined;

    "sap/ui/core/routing/HashChangerBase": undefined;

    "sap/ui/core/routing/History": undefined;

    "sap/ui/core/routing/Route": undefined;

    "sap/ui/core/routing/Router": undefined;

    "sap/ui/core/routing/RouterHashChanger": undefined;

    "sap/ui/core/routing/Target": undefined;

    "sap/ui/core/routing/Targets": undefined;

    "sap/ui/core/routing/Views": undefined;

    "sap/ui/core/ScrollBar": undefined;

    "sap/ui/core/search/OpenSearchProvider": undefined;

    "sap/ui/core/search/SearchProvider": undefined;

    "sap/ui/core/SeparatorItem": undefined;

    "sap/ui/core/service/Service": undefined;

    "sap/ui/core/service/ServiceFactory": undefined;

    "sap/ui/core/support/Hotkeys": undefined;

    "sap/ui/core/support/Plugin": undefined;

    "sap/ui/core/support/RuleEngineOpaExtension": undefined;

    "sap/ui/core/support/usage/EventBroadcaster": undefined;

    "sap/ui/core/syncStyleClass": undefined;

    "sap/ui/core/theming/Parameters": undefined;

    "sap/ui/core/theming/ThemeHelper": undefined;

    "sap/ui/core/Title": undefined;

    "sap/ui/core/tmpl/DOMAttribute": undefined;

    "sap/ui/core/tmpl/DOMElement": undefined;

    "sap/ui/core/tmpl/HandlebarsTemplate": undefined;

    "sap/ui/core/tmpl/Template": undefined;

    "sap/ui/core/tmpl/TemplateControl": undefined;

    "sap/ui/core/TooltipBase": undefined;

    "sap/ui/core/UIArea": undefined;

    "sap/ui/core/UIComponent": undefined;

    "sap/ui/core/util/Export": undefined;

    "sap/ui/core/util/ExportCell": undefined;

    "sap/ui/core/util/ExportColumn": undefined;

    "sap/ui/core/util/ExportRow": undefined;

    "sap/ui/core/util/ExportType": undefined;

    "sap/ui/core/util/ExportTypeCSV": undefined;

    "sap/ui/core/util/File": undefined;

    "sap/ui/core/util/MockServer": undefined;

    "sap/ui/core/util/PasteHelper": undefined;

    "sap/ui/core/util/reflection/BaseTreeModifier": undefined;

    "sap/ui/core/util/reflection/JsControlTreeModifier": undefined;

    "sap/ui/core/util/reflection/XmlTreeModifier": undefined;

    "sap/ui/core/util/serializer/delegate/Delegate": undefined;

    "sap/ui/core/util/serializer/delegate/HTML": undefined;

    "sap/ui/core/util/serializer/delegate/XML": undefined;

    "sap/ui/core/util/serializer/HTMLViewSerializer": undefined;

    "sap/ui/core/util/serializer/Serializer": undefined;

    "sap/ui/core/util/serializer/ViewSerializer": undefined;

    "sap/ui/core/util/serializer/XMLViewSerializer": undefined;

    "sap/ui/core/util/XMLPreprocessor": undefined;

    "sap/ui/core/ValueStateSupport": undefined;

    "sap/ui/core/VariantLayoutData": undefined;

    "sap/ui/core/ws/ReadyState": undefined;

    "sap/ui/core/ws/SapPcpWebSocket": undefined;

    "sap/ui/core/ws/WebSocket": undefined;

    "sap/ui/core/XMLComposite": undefined;

    "sap/ui/Device": undefined;

    "sap/ui/dom/containsOrEquals": undefined;

    "sap/ui/dom/denormalizeScrollBeginRTL": undefined;

    "sap/ui/dom/denormalizeScrollLeftRTL": undefined;

    "sap/ui/dom/getOwnerWindow": undefined;

    "sap/ui/dom/getScrollbarSize": undefined;

    "sap/ui/dom/includeScript": undefined;

    "sap/ui/dom/includeStylesheet": undefined;

    "sap/ui/dom/isHidden": undefined;

    "sap/ui/dom/jquery/Aria": undefined;

    "sap/ui/dom/jquery/control": undefined;

    "sap/ui/dom/jquery/cursorPos": undefined;

    "sap/ui/dom/jquery/Focusable": undefined;

    "sap/ui/dom/jquery/getSelectedText": undefined;

    "sap/ui/dom/jquery/hasTabIndex": undefined;

    "sap/ui/dom/jquery/parentByAttribute": undefined;

    "sap/ui/dom/jquery/rect": undefined;

    "sap/ui/dom/jquery/rectContains": undefined;

    "sap/ui/dom/jquery/scrollLeftRTL": undefined;

    "sap/ui/dom/jquery/scrollRightRTL": undefined;

    "sap/ui/dom/jquery/Selection": undefined;

    "sap/ui/dom/jquery/Selectors": undefined;

    "sap/ui/dom/jquery/selectText": undefined;

    "sap/ui/dom/jquery/zIndex": undefined;

    "sap/ui/dom/units/Rem": undefined;

    "sap/ui/events/checkMouseEnterOrLeave": undefined;

    "sap/ui/events/ControlEvents": undefined;

    "sap/ui/events/F6Navigation": undefined;

    "sap/ui/events/isMouseEventDelayed": undefined;

    "sap/ui/events/isSpecialKey": undefined;

    "sap/ui/events/jquery/EventExtension": undefined;

    "sap/ui/events/jquery/EventSimulation": undefined;

    "sap/ui/events/KeyCodes": undefined;

    "sap/ui/events/PseudoEvents": undefined;

    "sap/ui/events/TouchToMouseMapping": undefined;

    "sap/ui/model/analytics/AnalyticalBinding": undefined;

    "sap/ui/model/analytics/AnalyticalTreeBindingAdapter": undefined;

    "sap/ui/model/analytics/BatchResponseCollector": undefined;

    "sap/ui/model/analytics/odata4analytics": undefined;

    "sap/ui/model/base/ManagedObjectModel": undefined;

    "sap/ui/model/Binding": undefined;

    "sap/ui/model/BindingMode": undefined;

    "sap/ui/model/ChangeReason": undefined;

    "sap/ui/model/ClientContextBinding": undefined;

    "sap/ui/model/ClientListBinding": undefined;

    "sap/ui/model/ClientModel": undefined;

    "sap/ui/model/ClientPropertyBinding": undefined;

    "sap/ui/model/ClientTreeBinding": undefined;

    "sap/ui/model/ClientTreeBindingAdapter": undefined;

    "sap/ui/model/CompositeBinding": undefined;

    "sap/ui/model/CompositeDataState": undefined;

    "sap/ui/model/CompositeType": undefined;

    "sap/ui/model/Context": undefined;

    "sap/ui/model/ContextBinding": undefined;

    "sap/ui/model/DataState": undefined;

    "sap/ui/model/Filter": undefined;

    "sap/ui/model/FilterOperator": undefined;

    "sap/ui/model/FilterProcessor": undefined;

    "sap/ui/model/FilterType": undefined;

    "sap/ui/model/FormatException": undefined;

    "sap/ui/model/json/JSONListBinding": undefined;

    "sap/ui/model/json/JSONModel": undefined;

    "sap/ui/model/json/JSONPropertyBinding": undefined;

    "sap/ui/model/json/JSONTreeBinding": undefined;

    "sap/ui/model/ListBinding": undefined;

    "sap/ui/model/message/MessageModel": undefined;

    "sap/ui/model/MetaModel": undefined;

    "sap/ui/model/Model": undefined;

    "sap/ui/model/odata/AnnotationHelper": undefined;

    "sap/ui/model/odata/CountMode": undefined;

    "sap/ui/model/odata/Filter": undefined;

    "sap/ui/model/odata/MessageScope": undefined;

    "sap/ui/model/odata/ODataAnnotations": undefined;

    "sap/ui/model/odata/ODataContextBinding": undefined;

    "sap/ui/model/odata/ODataListBinding": undefined;

    "sap/ui/model/odata/ODataMessageParser": undefined;

    "sap/ui/model/odata/ODataMetadata": undefined;

    "sap/ui/model/odata/ODataMetaModel": undefined;

    "sap/ui/model/odata/ODataModel": undefined;

    "sap/ui/model/odata/ODataPropertyBinding": undefined;

    "sap/ui/model/odata/ODataUtils": undefined;

    "sap/ui/model/odata/OperationMode": undefined;

    "sap/ui/model/odata/type/Boolean": undefined;

    "sap/ui/model/odata/type/Byte": undefined;

    "sap/ui/model/odata/type/Currency": undefined;

    "sap/ui/model/odata/type/Date": undefined;

    "sap/ui/model/odata/type/DateTime": undefined;

    "sap/ui/model/odata/type/DateTimeBase": undefined;

    "sap/ui/model/odata/type/DateTimeOffset": undefined;

    "sap/ui/model/odata/type/DateTimeWithTimezone": undefined;

    "sap/ui/model/odata/type/Decimal": undefined;

    "sap/ui/model/odata/type/Double": undefined;

    "sap/ui/model/odata/type/Guid": undefined;

    "sap/ui/model/odata/type/Int": undefined;

    "sap/ui/model/odata/type/Int16": undefined;

    "sap/ui/model/odata/type/Int32": undefined;

    "sap/ui/model/odata/type/Int64": undefined;

    "sap/ui/model/odata/type/ODataType": undefined;

    "sap/ui/model/odata/type/Raw": undefined;

    "sap/ui/model/odata/type/SByte": undefined;

    "sap/ui/model/odata/type/Single": undefined;

    "sap/ui/model/odata/type/Stream": undefined;

    "sap/ui/model/odata/type/String": undefined;

    "sap/ui/model/odata/type/Time": undefined;

    "sap/ui/model/odata/type/TimeOfDay": undefined;

    "sap/ui/model/odata/type/Unit": undefined;

    "sap/ui/model/odata/UpdateMethod": undefined;

    "sap/ui/model/odata/v2/BatchMode": undefined;

    "sap/ui/model/odata/v2/Context": undefined;

    "sap/ui/model/odata/v2/ODataAnnotations": undefined;

    "sap/ui/model/odata/v2/ODataContextBinding": undefined;

    "sap/ui/model/odata/v2/ODataListBinding": undefined;

    "sap/ui/model/odata/v2/ODataModel": undefined;

    "sap/ui/model/odata/v2/ODataTreeBinding": undefined;

    "sap/ui/model/odata/v4/AnnotationHelper": undefined;

    "sap/ui/model/odata/v4/Context": undefined;

    "sap/ui/model/odata/v4/ODataContextBinding": undefined;

    "sap/ui/model/odata/v4/ODataListBinding": undefined;

    "sap/ui/model/odata/v4/ODataMetaModel": undefined;

    "sap/ui/model/odata/v4/ODataModel": undefined;

    "sap/ui/model/odata/v4/ODataPropertyBinding": undefined;

    "sap/ui/model/odata/v4/ODataUtils": undefined;

    "sap/ui/model/odata/v4/SubmitMode": undefined;

    "sap/ui/model/odata/v4/ValueListType": undefined;

    "sap/ui/model/ParseException": undefined;

    "sap/ui/model/PropertyBinding": undefined;

    "sap/ui/model/resource/ResourceModel": undefined;

    "sap/ui/model/SelectionModel": undefined;

    "sap/ui/model/SimpleType": undefined;

    "sap/ui/model/Sorter": undefined;

    "sap/ui/model/StaticBinding": undefined;

    "sap/ui/model/TreeAutoExpandMode": undefined;

    "sap/ui/model/TreeBinding": undefined;

    "sap/ui/model/TreeBindingAdapter": undefined;

    "sap/ui/model/TreeBindingCompatibilityAdapter": undefined;

    "sap/ui/model/TreeBindingUtils": undefined;

    "sap/ui/model/Type": undefined;

    "sap/ui/model/type/Boolean": undefined;

    "sap/ui/model/type/Currency": undefined;

    "sap/ui/model/type/Date": undefined;

    "sap/ui/model/type/DateInterval": undefined;

    "sap/ui/model/type/DateTime": undefined;

    "sap/ui/model/type/DateTimeInterval": undefined;

    "sap/ui/model/type/FileSize": undefined;

    "sap/ui/model/type/Float": undefined;

    "sap/ui/model/type/Integer": undefined;

    "sap/ui/model/type/String": undefined;

    "sap/ui/model/type/Time": undefined;

    "sap/ui/model/type/TimeInterval": undefined;

    "sap/ui/model/type/Unit": undefined;

    "sap/ui/model/ValidateException": undefined;

    "sap/ui/model/xml/XMLModel": undefined;

    "sap/ui/model/xml/XMLTreeBinding": undefined;

    "sap/ui/performance/Measurement": undefined;

    "sap/ui/performance/trace/FESR": undefined;

    "sap/ui/performance/trace/FESRHelper": undefined;

    "sap/ui/performance/trace/initTraces": undefined;

    "sap/ui/performance/trace/Interaction": undefined;

    "sap/ui/performance/XHRInterceptor": undefined;

    "sap/ui/security/FrameOptions": undefined;

    "sap/ui/test/actions/Action": undefined;

    "sap/ui/test/actions/Drag": undefined;

    "sap/ui/test/actions/Drop": undefined;

    "sap/ui/test/actions/EnterText": undefined;

    "sap/ui/test/actions/Press": undefined;

    "sap/ui/test/actions/Scroll": undefined;

    "sap/ui/test/generic/GenericTestCollection": undefined;

    "sap/ui/test/generic/Utils": undefined;

    "sap/ui/test/gherkin/dataTableUtils": undefined;

    "sap/ui/test/gherkin/opa5TestHarness": undefined;

    "sap/ui/test/gherkin/qUnitTestHarness": undefined;

    "sap/ui/test/gherkin/StepDefinitions": undefined;

    "sap/ui/test/matchers/AggregationContainsPropertyEqual": undefined;

    "sap/ui/test/matchers/AggregationEmpty": undefined;

    "sap/ui/test/matchers/AggregationFilled": undefined;

    "sap/ui/test/matchers/AggregationLengthEquals": undefined;

    "sap/ui/test/matchers/Ancestor": undefined;

    "sap/ui/test/matchers/BindingPath": undefined;

    "sap/ui/test/matchers/Descendant": undefined;

    "sap/ui/test/matchers/I18NText": undefined;

    "sap/ui/test/matchers/Interactable": undefined;

    "sap/ui/test/matchers/LabelFor": undefined;

    "sap/ui/test/matchers/Matcher": undefined;

    "sap/ui/test/matchers/Properties": undefined;

    "sap/ui/test/matchers/PropertyStrictEquals": undefined;

    "sap/ui/test/matchers/Sibling": undefined;

    "sap/ui/test/Opa": undefined;

    "sap/ui/test/Opa5": undefined;

    "sap/ui/test/OpaBuilder": undefined;

    "sap/ui/test/OpaExtension": undefined;

    "sap/ui/test/OpaPlugin": undefined;

    "sap/ui/test/opaQunit": undefined;

    "sap/ui/test/PageObjectFactory": undefined;

    "sap/ui/test/RecordReplay": undefined;

    "sap/ui/util/ActivityDetection": undefined;

    "sap/ui/util/defaultLinkTypes": undefined;

    "sap/ui/util/isCrossOriginURL": undefined;

    "sap/ui/util/Mobile": undefined;

    "sap/ui/util/openWindow": undefined;

    "sap/ui/util/Storage": undefined;

    "sap/ui/util/XMLHelper": undefined;

    "sap/ui/VersionInfo": undefined;
  }

  type ClassInfo<T, C> = T & Partial<C> & ThisType<T & C>;
}
