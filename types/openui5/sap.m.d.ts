// Type definitions for OpenUI5 1.40
// Project: http://openui5.org/
// Definitions by: Lukas May <https://www.dscsag.com/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace sap {
  namespace m {

    /**
     * Hide the soft keyboard.
     * @since 1.20
    */
    var closeKeyboard: any;

    /**
     * Search given control's parents and try to find iScroll.
     * @since 1.11
    */
    var getIScroll: any;

    /**
     * Search given control's parents and try to find ScrollDelegate.
     * @since 1.11
    */
    var getScrollDelegate: any;

    /**
     * <pre><code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.This
     * technical information includes   * SAPUI5 Version   * User Agent   * Configurations (Bootstrap and
     * Computed)   * URI parameters   * All loaded module namesIn order to show the device information, the
     * user must follow the following gestures.   1 - Hold two finger for 3 seconds minimum.   2 - Tab with
     * a third finger while holding the first two fingers.NOTE: This class is internal and all its
     * functions must not be used by an applicationAs <code>sap.m.Support</code> is a static class, a
     * <code>jQuery.sap.require("sap.m.Support");</code>statement must be implicitly executed before the
     * class is used.Enable Support:--------------------------------------------------//import
     * libraryjQuery.sap.require("sap.m.Support");//By default after require, support is enabled but
     * implicitly we can callsap.m.Support.on();Disable
     * Support:--------------------------------------------------sap.m.Support.off();</pre>
     * @since 1.11.0
    */
    var Support: any;

    /**
     * Returns invalid date value of UI5.
     * @since 1.10
    */
    function getInvalidDate(): void;

    /**
     * Finds default locale settings once and returns always the same.We should not need to create new
     * instance to get same locale settingsThis method keep the locale instance in the scope and returns
     * the same after first run
     * @since 1.10
     * @returns sap.ui.core.Locale instane
    */
    function getLocale(): any;

    /**
     * Finds default locale data once and returns always the same.
     * @since 1.10
     * @returns sap.ui.core.LocaleData instance
    */
    function getLocaleData(): any;

    /**
     * Checks if the given parameter is a valid JsDate Object.
     * @since 1.10
     * @param value Any variable to test.
    */
    function isDate(value: any): boolean;
    namespace touch {

      /**
       * Given a list of touches, count the number of touches related with the given element.
       * @param oTouchList The list of touch objects to search.
       * @param vElement A jQuery element or an element reference or an element id.
       * @returns The number of touches related with the given element.
      */
      function countContained(oTouchList: TouchList, vElement: typeof jQuery | sap.ui.core.Element | string): number;

      /**
       * Given a list of touch objects, find the touch that matches the given one.
       * @param oTouchList The list of touch objects to search.
       * @param oTouch A touch object to find or a Touch.identifier that uniquely identifies the current
       * finger in the touch session.
       * @returns The touch matching if any.
      */
      function find(oTouchList: TouchList, oTouch: typeof Touch | number): any | any;
    }
    namespace routing {
      /**
       * @resource sap/m/routing/Router.js
      */
      export class Router extends sap.ui.core.routing.Router {


        /**
         * Instantiates a SAPUI5 mobile Router see {@link sap.ui.core.routing.Router} for the constructor
         * argumentsThe difference to the {@link sap.ui.core.routing.Router} are the properties viewLevel,
         * transition and transitionParameters you can specify in every Route or Target created by this router.
         * @param oRoutes may contain many Route configurations as {@link
         * sap.ui.core.routing.Route#constructor}.<br/>Each of the routes contained in the array/object will be
         * added to the router.<br/>One way of defining routes is an array:<pre>[    //Will create a route
         * called 'firstRouter' you can later use this name in navTo to navigate to this route    {       
         * name: "firstRoute"        pattern : "usefulPattern"    },    //Will create a route called
         * 'anotherRoute'    {        name: "anotherRoute"        pattern : "anotherPattern"    }]</pre>The
         * alternative way of defining routes is an Object.<br/>If you choose this way, the name attribute is
         * the name of the property.<pre>{    //Will create a route called 'firstRouter' you can later use this
         * name in navTo to navigate to this route    firstRoute : {        pattern : "usefulPattern"    },   
         * //Will create a route called 'anotherRoute'    anotherRoute : {        pattern : "anotherPattern"   
         * }}</pre>The values that may be provided are the same as in {@link
         * sap.ui.core.routing.Route#constructor}
         * @param oConfig Default values for route configuration - also takes the same parameters as {@link
         * sap.ui.core.routing.Target#constructor}.<br/>This config will be used for routes and for targets,
         * used in the router<br/>Eg: if the config object specifies :<pre><code>{ viewType : "XML"
         * }</code></pre>The targets look like this:<pre>{    xmlTarget : {        ...    },    jsTarget : {   
         *     viewType : "JS"        ...    }}</pre>Then the effective config will look like this:<pre>{   
         * xmlTarget : {        viewType : "XML"        ...    },    jsTarget : {        viewType : "JS"       
         * ...    }}</pre>Since the xmlTarget does not specify its viewType, XML is taken from the config
         * object. The jsTarget is specifying it, so the viewType will be JS.<br/>
         * @param oOwner the Component of all the views that will be created by this Router,<br/>will get
         * forwarded to the {@link sap.ui.core.routing.Views#contructor}.<br/>If you are using the
         * componentMetadata to define your routes you should skip this parameter.<br/>
         * @param oTargetsConfig the target configuration, see {@link sap.m.routing.Targets#constructor}
         * documentation (the options object).<br/>You should use Targets to create and display views. The
         * route should only contain routing relevant properties.<br/><b>Example:</b><pre><code>    new Router(
         *    // Routes    [        {            // no view creation related properties are in the route       
         *     name: "startRoute",            //no hash            pattern: "",            // you can find this
         * target in the targetConfig            target: "welcome"        }    ],    // Default values shared
         * by routes and Targets    {        viewNamespace: "my.application.namespace",        viewType: "XML" 
         *   },    // You should only use this constructor when you are not using a router with a component.   
         * // Please use the metadata of a component to define your routes and targets.    // The documentation
         * can be found here: {@link sap.ui.core.UIComponent#.extend}.    null,    // Target config    {       
         *  //same name as in the route called 'startRoute'         welcome: {             // All properties
         * for creating and placing a view go here or in the config             viewName: "Welcome",           
         *  controlId: "app",             controlAggregation: "pages"         }    })</code></pre>
        */
        constructor(oRoutes: any | any[], oConfig?: any, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: any);




        /**
         * Returns a metadata object for class sap.m.routing.Router.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Returns the TargetHandler instance.
         * @returns the TargetHandler instance
        */
        getTargetHandler(): sap.m.routing.TargetHandler;
      }
      /**
       * @resource sap/m/routing/Targets.js
      */
      export class Targets extends sap.ui.core.routing.Targets {


        /**
         * Provides a convenient way for placing views into the correct containers of your application.The
         * mobile extension of Targets also handles the triggering of page navigation when the target control
         * is a {@link sap.m.SplitContainer}, a {@link sap.m.NavContainer} or a control which extends one of
         * these.Other controls are also allowed, but the extra parameters viewLevel, transition and
         * transitionParameters are ignored and it will behave like {@link sap.ui.core.routing.Targets}.When a
         * target is displayed, dialogs will be closed. To change this use {@link #getTargetHandler} and {@link
         * sap.m.routing.TargetHandler#setCloseDialogs}.
         * @param oOptions undefined
        */
        constructor(oOptions: any);




        /**
         * Returns a metadata object for class sap.m.routing.Targets.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Returns the TargetHandler instance.
         * @returns the TargetHandler instance
        */
        getTargetHandler(): sap.m.routing.TargetHandler;
      }
      /**
       * @resource sap/m/routing/TargetHandler.js
      */
      export class TargetHandler {


        /**
         * Instantiates a TargetHandler, a class used for closing dialogs and showing transitions in
         * NavContainers when targets are displayed.<br/><b>You should not create an own instance of this
         * class.</b> It will be created when using {@link sap.m.routing.Router} or {@link
         * sap.m.routing.Targets}.You may use the {@link #setCloseDialogs} function to specify if dialogs
         * should be closed on displaying other views.
         * @param closeDialogs the default is true - will close all open dialogs before navigating, if set to
         * true. If set to false it will just navigate without closing dialogs.
        */
        constructor(closeDialogs: boolean);




        /**
         * Gets if a navigation should close dialogs
         * @returns a flag indication if dialogs will be closed
        */
        getCloseDialogs(): boolean;

        /**
         * Returns a metadata object for class sap.m.routing.TargetHandler.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Sets if a navigation should close dialogs
         * @param bCloseDialogs close dialogs if true
         * @returns for chaining
        */
        setCloseDialogs(bCloseDialogs: boolean): sap.m.routing.TargetHandler;
      }
      /**
       * This class will attach to the Events of a provided router and add the views created by it to a 
       * {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer} Control, if this is the target control
       * of the route.</br>If the targetControl is no {@link sap.m.SplitContainer} or a {@link
       * sap.m.NavContainer}, It will only close the dialogs, according to the property value.</br></br>When
       * a navigation is triggered, this class will try to determine the transition of the pages based on the
       * history.</br>Eg: if a user presses browser back, it will show a backwards animation.</br></br>The
       * navigation on the container takes place in the RoutePatternMatched event of the Router. If you
       * register on the RouteMatched event of the Router, the visual navigation did not take place
       * yet.</br></br>Since it is hard to detect if a user has pressed browser back, this transitions will
       * not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a
       * masterPage.</br>If you want this case to always show a backwards transition, you should specify a
       * "viewLevel" property on your Route.</br>The viewLevel has to be an integer. The Master should have a
       * lower number than the detail.</br>These levels should represent the user process of your application
       * and they do not have to match the container structure of your Routes.</br>If the user navigates
       * between views with the same viewLevel, the history is asked for the direction.</br></br>You can
       * specify a property "transition" in a route to define which transition will be applied when
       * navigating. If it is not defined, the nav container will take its default transition.</br>You can
       * also specify "transitionParameters" on a Route, to give the transition
       * parameters.</br></br>preservePageInSplitContainer is deprecated since 1.28 since Targets make this
       * parameter obsolete.If you want to preserve the current view when navigating, but you want to
       * navigate to it when nothing is displayed in the navContainer, you can set
       * preservePageInSplitContainer = true</br>When the route that has this flag directly matches the
       * pattern, the view will still be switched by the splitContainer.</br>
       * @resource sap/m/routing/RouteMatchedHandler.js
      */
      export class RouteMatchedHandler {


        /**
         * Instantiates a RouteMatchedHandler.
         * @param router A router that creates views</br>
         * @param closeDialogs the default is true - will close all open dialogs before navigating, if set to
         * true. If set to false it will just navigate without closing dialogs.
        */
        constructor(router: sap.m.routing.Router, closeDialogs: boolean);



        /**
         * Removes the routeMatchedHandler from the Router
         * @returns for chaining
        */
        destroy(): sap.m.routing.RouteMatchedHandler;


        /**
         * Gets if a navigation should close dialogs
         * @returns a flag indication if dialogs will be closed
        */
        getCloseDialogs(): boolean;

        /**
         * Returns a metadata object for class sap.m.routing.RouteMatchedHandler.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Sets if a navigation should close dialogs
         * @param bCloseDialogs close dialogs if true
         * @returns for chaining
        */
        setCloseDialogs(bCloseDialogs: boolean): sap.m.routing.RouteMatchedHandler;
      }
    }
    namespace semantic {
      /**
       * An AddAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.See {@link sap.m.semantic.MasterPage#addAction}, {@link
       * sap.m.semantic.FullscreenPage#addAction}, {@link sap.m.semantic.DetailPage#addAction}
       * @resource sap/m/semantic/AddAction.js
      */
      export class AddAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new AddAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.AddAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A MainAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/MainAction.js
      */
      export class MainAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new MainAction.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.MainAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>text</code>.Button text
         * @returns Value of property <code>text</code>
        */
        getText(): string;

        /**
         * Sets a new value for property <code>text</code>.Button textWhen called with a value of
         * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
         * @param sText New value for property <code>text</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setText(sText: string): sap.m.semantic.MainAction;
      }
      /**
       * A SaveAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SaveAction.js
      */
      export class SaveAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new SaveAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SaveAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A MasterPage is a {@link sap.m.semantic.SemanticPage} that supports semantic content of the
       * following types:<ul>    <li>{@link sap.m.semantic.AddAction}</li>    <li>{@link
       * sap.m.semantic.MainAction}</li>    <li>{@link sap.m.semantic.PositiveAction}</li>    <li>{@link
       * sap.m.semantic.NegativeAction}</li>    <li>{@link sap.m.semantic.ForwardAction}</li>    <li>{@link
       * sap.m.semantic.EditAction}</li>    <li>{@link sap.m.semantic.SaveAction}</li>    <li>{@link
       * sap.m.semantic.DeleteAction}</li>    <li>{@link sap.m.semantic.CancelAction}</li>    <li>{@link
       * sap.m.semantic.MultiSelectAction}</li>    <li>{@link sap.m.semantic.FlagAction}</li>    <li>{@link
       * sap.m.semantic.FavoriteAction}</li>    <li>{@link sap.m.semantic.SortAction}</li>    <li>{@link
       * sap.m.semantic.SortSelect}</li>    <li>{@link sap.m.semantic.FilterAction}</li>    <li>{@link
       * sap.m.semantic.FilterSelect}</li>    <li>{@link sap.m.semantic.GroupAction}</li>    <li>{@link
       * sap.m.semantic.GroupSelect}</li>    <li>{@link sap.m.semantic.MessagesIndicator}</li></ul>
       * @resource sap/m/semantic/MasterPage.js
      */
      export class MasterPage extends sap.m.semantic.SemanticPage {


        /**
         * Constructor for a new MasterPageAccepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Destroys the addAction in the aggregation <code>addAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyAddAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCancelAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDeleteAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the editAction in the aggregation <code>editAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyEditAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the filter in the aggregation <code>filter</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyFilter(): sap.m.semantic.MasterPage;

        /**
         * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyForwardAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the group in the aggregation <code>group</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyGroup(): sap.m.semantic.MasterPage;

        /**
         * Destroys the mainAction in the aggregation <code>mainAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMainAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMessagesIndicator(): sap.m.semantic.MasterPage;

        /**
         * Destroys the multiSelectAction in the aggregation <code>multiSelectAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMultiSelectAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyNegativeAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPositiveAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the saveAction in the aggregation <code>saveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySaveAction(): sap.m.semantic.MasterPage;

        /**
         * Destroys the sort in the aggregation <code>sort</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySort(): sap.m.semantic.MasterPage;


        /**
         * Gets content of aggregation <code>addAction</code>.Add action
        */
        getAddAction(): sap.m.semantic.AddAction;

        /**
         * Gets content of aggregation <code>cancelAction</code>.Cancel action
        */
        getCancelAction(): sap.m.semantic.CancelAction;

        /**
         * Gets content of aggregation <code>deleteAction</code>.Delete action
        */
        getDeleteAction(): sap.m.semantic.DeleteAction;

        /**
         * Gets content of aggregation <code>editAction</code>.Edit action
        */
        getEditAction(): sap.m.semantic.EditAction;

        /**
         * Gets content of aggregation <code>filter</code>.Filter action
        */
        getFilter(): sap.m.semantic.IFilter;

        /**
         * Gets content of aggregation <code>forwardAction</code>.Forward action
        */
        getForwardAction(): sap.m.semantic.ForwardAction;

        /**
         * Gets content of aggregation <code>group</code>.Group action
        */
        getGroup(): sap.m.semantic.IGroup;

        /**
         * Gets content of aggregation <code>mainAction</code>.Main action
        */
        getMainAction(): sap.m.semantic.MainAction;

        /**
         * Gets content of aggregation <code>messagesIndicator</code>.MessagesIndicator
        */
        getMessagesIndicator(): sap.m.semantic.MessagesIndicator;

        /**
         * Returns a metadata object for class sap.m.semantic.MasterPage.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets content of aggregation <code>multiSelectAction</code>.MultiSelect action
        */
        getMultiSelectAction(): sap.m.semantic.MultiSelectAction;

        /**
         * Gets content of aggregation <code>negativeAction</code>.Negative action
        */
        getNegativeAction(): sap.m.semantic.NegativeAction;

        /**
         * Gets content of aggregation <code>positiveAction</code>.Positive action
        */
        getPositiveAction(): sap.m.semantic.PositiveAction;

        /**
         * Gets content of aggregation <code>saveAction</code>.Save action
        */
        getSaveAction(): sap.m.semantic.SaveAction;

        /**
         * Gets content of aggregation <code>sort</code>.Sort action
        */
        getSort(): sap.m.semantic.ISort;

        /**
         * Sets the aggregated <code>addAction</code>.
         * @param oAddAction The addAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>cancelAction</code>.
         * @param oCancelAction The cancelAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>deleteAction</code>.
         * @param oDeleteAction The deleteAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>editAction</code>.
         * @param oEditAction The editAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>filter</code>.
         * @param oFilter The filter to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFilter(oFilter: sap.m.semantic.IFilter): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>forwardAction</code>.
         * @param oForwardAction The forwardAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>group</code>.
         * @param oGroup The group to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setGroup(oGroup: sap.m.semantic.IGroup): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>mainAction</code>.
         * @param oMainAction The mainAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>messagesIndicator</code>.
         * @param oMessagesIndicator The messagesIndicator to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>multiSelectAction</code>.
         * @param oMultiSelectAction The multiSelectAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMultiSelectAction(oMultiSelectAction: sap.m.semantic.MultiSelectAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>negativeAction</code>.
         * @param oNegativeAction The negativeAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>positiveAction</code>.
         * @param oPositiveAction The positiveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>saveAction</code>.
         * @param oSaveAction The saveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.MasterPage;

        /**
         * Sets the aggregated <code>sort</code>.
         * @param oSort The sort to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSort(oSort: sap.m.semantic.ISort): sap.m.semantic.MasterPage;
      }
      /**
       * A DetailPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the
       * following types:<ul>    <li>{@link sap.m.semantic.AddAction}</li>    <li>{@link
       * sap.m.semantic.MainAction}</li>    <li>{@link sap.m.semantic.PositiveAction}</li>    <li>{@link
       * sap.m.semantic.NegativeAction}</li>    <li>{@link sap.m.semantic.ForwardAction}</li>    <li>{@link
       * sap.m.semantic.EditAction}</li>    <li>{@link sap.m.semantic.SaveAction}</li>    <li>{@link
       * sap.m.semantic.DeleteAction}</li>    <li>{@link sap.m.semantic.CancelAction}</li>    <li>{@link
       * sap.m.semantic.FlagAction}</li>    <li>{@link sap.m.semantic.FavoriteAction}</li>    <li>{@link
       * sap.m.semantic.OpenInAction}</li>    <li>{@link sap.m.semantic.DiscussInJamAction}</li>    <li>{@link
       * sap.m.semantic.ShareInJamAction}</li>    <li>{@link sap.m.semantic.SendEmailAction}</li>    <li>{@link
       * sap.m.semantic.SendMessageAction}</li>    <li>{@link sap.m.semantic.PrintAction}</li>    <li>{@link
       * sap.m.semantic.MessagesIndicator}</li>    <li>{@link sap.m.DraftIndicator}</li></ul>
       * @resource sap/m/semantic/DetailPage.js
      */
      export class DetailPage extends sap.m.semantic.ShareMenuPage {


        /**
         * Constructor for a new DetailPageAccepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Destroys the addAction in the aggregation <code>addAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyAddAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCancelAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDeleteAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the discussInJamAction in the aggregation <code>discussInJamAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDiscussInJamAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the draftIndicator in the aggregation <code>draftIndicator</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDraftIndicator(): sap.m.semantic.DetailPage;

        /**
         * Destroys the editAction in the aggregation <code>editAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyEditAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the favoriteAction in the aggregation <code>favoriteAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyFavoriteAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the flagAction in the aggregation <code>flagAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyFlagAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyForwardAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the mainAction in the aggregation <code>mainAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMainAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMessagesIndicator(): sap.m.semantic.DetailPage;

        /**
         * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyNegativeAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the openInAction in the aggregation <code>openInAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyOpenInAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the pagingAction in the aggregation <code>pagingAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPagingAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPositiveAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the printAction in the aggregation <code>printAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPrintAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the saveAction in the aggregation <code>saveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySaveAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the saveAsTileAction in the aggregation <code>saveAsTileAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySaveAsTileAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the sendEmailAction in the aggregation <code>sendEmailAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySendEmailAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the sendMessageAction in the aggregation <code>sendMessageAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySendMessageAction(): sap.m.semantic.DetailPage;

        /**
         * Destroys the shareInJamAction in the aggregation <code>shareInJamAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyShareInJamAction(): sap.m.semantic.DetailPage;


        /**
         * Gets content of aggregation <code>addAction</code>.Add action
        */
        getAddAction(): sap.m.semantic.AddAction;

        /**
         * Gets content of aggregation <code>cancelAction</code>.Cancel action
        */
        getCancelAction(): sap.m.semantic.CancelAction;

        /**
         * Gets content of aggregation <code>deleteAction</code>.Delete action
        */
        getDeleteAction(): sap.m.semantic.DeleteAction;

        /**
         * Gets content of aggregation <code>discussInJamAction</code>.DiscussInJam action
        */
        getDiscussInJamAction(): sap.m.semantic.DiscussInJamAction;

        /**
         * Gets content of aggregation <code>draftIndicator</code>.DraftIndicator
        */
        getDraftIndicator(): sap.m.DraftIndicator;

        /**
         * Gets content of aggregation <code>editAction</code>.Edit action
        */
        getEditAction(): sap.m.semantic.EditAction;

        /**
         * Gets content of aggregation <code>favoriteAction</code>.Favorite action
        */
        getFavoriteAction(): sap.m.semantic.FavoriteAction;

        /**
         * Gets content of aggregation <code>flagAction</code>.Flag action
        */
        getFlagAction(): sap.m.semantic.FlagAction;

        /**
         * Gets content of aggregation <code>forwardAction</code>.Negative action
        */
        getForwardAction(): sap.m.semantic.ForwardAction;

        /**
         * Gets content of aggregation <code>mainAction</code>.Main action
        */
        getMainAction(): sap.m.semantic.MainAction;

        /**
         * Gets content of aggregation <code>messagesIndicator</code>.MessagesIndicator
        */
        getMessagesIndicator(): sap.m.semantic.MessagesIndicator;

        /**
         * Returns a metadata object for class sap.m.semantic.DetailPage.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets content of aggregation <code>negativeAction</code>.Negative action
        */
        getNegativeAction(): sap.m.semantic.NegativeAction;

        /**
         * Gets content of aggregation <code>openInAction</code>.OpenIn action
        */
        getOpenInAction(): sap.m.semantic.OpenInAction;

        /**
         * Gets content of aggregation <code>pagingAction</code>.Paging action
        */
        getPagingAction(): sap.m.PagingButton;

        /**
         * Gets content of aggregation <code>positiveAction</code>.Positive action
        */
        getPositiveAction(): sap.m.semantic.PositiveAction;

        /**
         * Gets content of aggregation <code>printAction</code>.Print action
        */
        getPrintAction(): sap.m.semantic.PrintAction;

        /**
         * Gets content of aggregation <code>saveAction</code>.Save action
        */
        getSaveAction(): sap.m.semantic.SaveAction;

        /**
         * Gets content of aggregation <code>saveAsTileAction</code>.SaveAsTile button
        */
        getSaveAsTileAction(): sap.m.Button;

        /**
         * Gets content of aggregation <code>sendEmailAction</code>.SendEmail action
        */
        getSendEmailAction(): sap.m.semantic.SendEmailAction;

        /**
         * Gets content of aggregation <code>sendMessageAction</code>.SendMessage action
        */
        getSendMessageAction(): sap.m.semantic.SendMessageAction;

        /**
         * Gets content of aggregation <code>shareInJamAction</code>.ShareInJam action
        */
        getShareInJamAction(): sap.m.semantic.ShareInJamAction;

        /**
         * Sets the aggregated <code>addAction</code>.
         * @param oAddAction The addAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>cancelAction</code>.
         * @param oCancelAction The cancelAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>deleteAction</code>.
         * @param oDeleteAction The deleteAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>discussInJamAction</code>.
         * @param oDiscussInJamAction The discussInJamAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDiscussInJamAction(oDiscussInJamAction: sap.m.semantic.DiscussInJamAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>draftIndicator</code>.
         * @param oDraftIndicator The draftIndicator to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>editAction</code>.
         * @param oEditAction The editAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>favoriteAction</code>.
         * @param oFavoriteAction The favoriteAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFavoriteAction(oFavoriteAction: sap.m.semantic.FavoriteAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>flagAction</code>.
         * @param oFlagAction The flagAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFlagAction(oFlagAction: sap.m.semantic.FlagAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>forwardAction</code>.
         * @param oForwardAction The forwardAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>mainAction</code>.
         * @param oMainAction The mainAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>messagesIndicator</code>.
         * @param oMessagesIndicator The messagesIndicator to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>negativeAction</code>.
         * @param oNegativeAction The negativeAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>openInAction</code>.
         * @param oOpenInAction The openInAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setOpenInAction(oOpenInAction: sap.m.semantic.OpenInAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>pagingAction</code>.
         * @param oPagingAction The pagingAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPagingAction(oPagingAction: sap.m.PagingButton): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>positiveAction</code>.
         * @param oPositiveAction The positiveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>printAction</code>.
         * @param oPrintAction The printAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPrintAction(oPrintAction: sap.m.semantic.PrintAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>saveAction</code>.
         * @param oSaveAction The saveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>saveAsTileAction</code>.
         * @param oSaveAsTileAction The saveAsTileAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>sendEmailAction</code>.
         * @param oSendEmailAction The sendEmailAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSendEmailAction(oSendEmailAction: sap.m.semantic.SendEmailAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>sendMessageAction</code>.
         * @param oSendMessageAction The sendMessageAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSendMessageAction(oSendMessageAction: sap.m.semantic.SendMessageAction): sap.m.semantic.DetailPage;

        /**
         * Sets the aggregated <code>shareInJamAction</code>.
         * @param oShareInJamAction The shareInJamAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setShareInJamAction(oShareInJamAction: sap.m.semantic.ShareInJamAction): sap.m.semantic.DetailPage;
      }
      /**
       * A SortAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SortAction.js
      */
      export class SortAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new SortAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SortAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A SortSelect button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SortSelect.js
      */
      export class SortSelect extends sap.m.semantic.SemanticSelect {


        /**
         * Constructor for a new SortSelect.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SortSelect.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * An EditAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/EditAction.js
      */
      export class EditAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new EditAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.EditAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A FlagAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/FlagAction.js
      */
      export class FlagAction extends sap.m.semantic.SemanticToggleButton {


        /**
         * Constructor for a new FlagAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.FlagAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A GroupSelect button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/GroupSelect.js
      */
      export class GroupSelect extends sap.m.semantic.SemanticSelect {


        /**
         * Constructor for a new GroupSelect.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.GroupSelect.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A GroupAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/GroupAction.js
      */
      export class GroupAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new GroupAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.GroupAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A PrintAction button has default semantic-specific properties and iseligible for aggregation content
       * of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/PrintAction.js
      */
      export class PrintAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new PrintAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.PrintAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A DeleteAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/DeleteAction.js
      */
      export class DeleteAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new DeleteAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.DeleteAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A FilterAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/FilterAction.js
      */
      export class FilterAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new FilterAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.FilterAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A FilterSelect button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/FilterSelect.js
      */
      export class FilterSelect extends sap.m.semantic.SemanticSelect {


        /**
         * Constructor for a new FilterSelect.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.FilterSelect.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A CancelAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/CancelAction.js
      */
      export class CancelAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new CancelAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.CancelAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * An OpenInAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/OpenInAction.js
      */
      export class OpenInAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new OpenInAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.OpenInAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A semantic page is an enhanced {@link sap.m.Page}, that can contain controls with semantic meaning
       * @see sap.m.semantic.SemanticControl.<br>Content specified in the {@link
       * sap.m.semantic.SemanticPage#semanticControls} aggregations will be automatically positioned in
       * dedicated sections of the footer or the header of the page, depending on the control's
       * semantics.<br>For example, a semantic button of type {@link sap.m.semantic.PositiveAction} will be
       * positioned in the right side of the footer, and in logically correct sequence order with respect to
       * any other included semantic controls.<br>The full list of what we internally define for semantic
       * content is: <ul>     <li>Visual properties (e.g. AddAction will be styled as an icon button)</li>   
       *  <li>Position in the page (UX guidelines specify that some buttons should be in the header only,
       * while others are in the footer or the "share" menu, so we do the correct positioning)</li>    
       * <li>Sequence order (UX guidelines define a specific sequence order of semantic controls with respect
       * to each other)</li>     <li>Default localized tooltip for icon-only buttons</li>     <li>Overflow
       * behavior (UX quidelines define which buttons are allowed to go to the overflow of the toolbar when
       * the screen gets narrower). For icon buttons, we ensure that the text label of the button appears
       * when the button is in overflow, as specified by UX.</li>     <li>Screen reader support (invisible
       * text for reading the semantic type)</li> </ul>In addition to the predefined semantic controls, the
       * SemanticPage can host also custom application-provided controls. It preserves most of the API of
       * {@link sap.m.Page} for specifying page content.<br>
       * @resource sap/m/semantic/SemanticPage.js
      */
      export abstract class SemanticPage extends sap.ui.core.Control {


        /**
         * Constructor for a new SemanticPageAccepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Adds some content to the aggregation <code>content</code>.
         * @param oContent the content to add; if empty, nothing is inserted
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        addContent(oContent: sap.ui.core.Control): sap.m.semantic.SemanticPage;

        /**
         * Adds some customFooterContent to the aggregation <code>customFooterContent</code>.
         * @param oCustomFooterContent the customFooterContent to add; if empty, nothing is inserted
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        addCustomFooterContent(oCustomFooterContent: sap.m.Button): sap.m.semantic.SemanticPage;

        /**
         * Adds some customHeaderContent to the aggregation <code>customHeaderContent</code>.
         * @param oCustomHeaderContent the customHeaderContent to add; if empty, nothing is inserted
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        addCustomHeaderContent(oCustomHeaderContent: sap.m.Button): sap.m.semantic.SemanticPage;

        /**
         * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this
         * <code>sap.m.semantic.SemanticPage</code>.When called, the context of the event handler (its
         * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
         * to this <code>sap.m.semantic.SemanticPage</code> itself.See {@link sap.m.Page#navButtonPress}
         * @param oData An application-specific payload object that will be passed to the event handler along
         * with the event object when firing the event
         * @param fnFunction The function to be called when the event occurs
         * @param oListener Context object to call the event handler with. Defaults to this
         * <code>sap.m.semantic.SemanticPage</code> itself
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): sap.m.semantic.SemanticPage;

        /**
         * Destroys all the content in the aggregation <code>content</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyContent(): sap.m.semantic.SemanticPage;

        /**
         * Destroys all the customFooterContent in the aggregation <code>customFooterContent</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCustomFooterContent(): sap.m.semantic.SemanticPage;

        /**
         * Destroys all the customHeaderContent in the aggregation <code>customHeaderContent</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCustomHeaderContent(): sap.m.semantic.SemanticPage;

        /**
         * Destroys the landmarkInfo in the aggregation <code>landmarkInfo</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyLandmarkInfo(): sap.m.semantic.SemanticPage;

        /**
         * Destroys the subHeader in the aggregation <code>subHeader</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySubHeader(): sap.m.semantic.SemanticPage;

        /**
         * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this
         * <code>sap.m.semantic.SemanticPage</code>.The passed function and listener object must match the ones
         * used for event registration.
         * @param fnFunction The function to be called, when the event occurs
         * @param oListener Context object on which the given function had to be called
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        detachNavButtonPress(fnFunction: any, oListener: any): sap.m.semantic.SemanticPage;


        /**
         * Fires event <code>navButtonPress</code> to attached listeners.
         * @param mArguments The arguments to pass along with the event
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        fireNavButtonPress(mArguments: any): sap.m.semantic.SemanticPage;

        /**
         * Gets content of aggregation <code>content</code>.See {@link sap.m.Page#content}
        */
        getContent(): sap.ui.core.Control[];

        /**
         * Gets content of aggregation <code>customFooterContent</code>.Custom footer buttons
        */
        getCustomFooterContent(): sap.m.Button[];

        /**
         * Gets content of aggregation <code>customHeaderContent</code>.Custom header buttons
        */
        getCustomHeaderContent(): sap.m.Button[];

        /**
         * Gets current value of property <code>enableScrolling</code>.See {@link
         * sap.m.Page#enableScrolling}Default value is <code>true</code>.
         * @returns Value of property <code>enableScrolling</code>
        */
        getEnableScrolling(): boolean;

        /**
         * Gets current value of property <code>floatingFooter</code>.Determines whether the floating footer
         * behavior is enabled.If set to <code>true</code>, the content is visible when it's underneath the
         * footer.Default value is <code>false</code>.
         * @since 1.40.1
         * @returns Value of property <code>floatingFooter</code>
        */
        getFloatingFooter(): boolean;

        /**
         * Gets content of aggregation <code>landmarkInfo</code>.Accessible landmark settings to be applied to
         * the containers of the <code>sap.m.Page</code> control.If not set, no landmarks will be written.
        */
        getLandmarkInfo(): sap.m.PageAccessibleLandmarkInfo;

        /**
         * Returns a metadata object for class sap.m.semantic.SemanticPage.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>showFooter</code>.Hides or shows the page footerDefault value
         * is <code>true</code>.
         * @returns Value of property <code>showFooter</code>
        */
        getShowFooter(): boolean;

        /**
         * Gets current value of property <code>showNavButton</code>.See {@link
         * sap.m.Page#showNavButton}Default value is <code>false</code>.
         * @returns Value of property <code>showNavButton</code>
        */
        getShowNavButton(): boolean;

        /**
         * Gets current value of property <code>showSubHeader</code>.See {@link
         * sap.m.Page#showSubHeader}Default value is <code>true</code>.
         * @returns Value of property <code>showSubHeader</code>
        */
        getShowSubHeader(): boolean;

        /**
         * Gets content of aggregation <code>subHeader</code>.See {@link sap.m.Page#subHeader}
        */
        getSubHeader(): sap.m.IBar;

        /**
         * Gets current value of property <code>title</code>.See {@link sap.m.Page#title}
         * @returns Value of property <code>title</code>
        */
        getTitle(): string;

        /**
         * Gets current value of property <code>titleLevel</code>.See {@link sap.m.Page#titleLevel}Default
         * value is <code>Auto</code>.
         * @returns Value of property <code>titleLevel</code>
        */
        getTitleLevel(): sap.ui.core.TitleLevel;

        /**
         * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
         * returns its index if found or -1 otherwise.
         * @param oContent The content whose index is looked for
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
        */
        indexOfContent(oContent: sap.ui.core.Control): number;

        /**
         * Checks for the provided <code>sap.m.Button</code> in the aggregation
         * <code>customFooterContent</code>.and returns its index if found or -1 otherwise.
         * @param oCustomFooterContent The customFooterContent whose index is looked for
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
        */
        indexOfCustomFooterContent(oCustomFooterContent: sap.m.Button): number;

        /**
         * Checks for the provided <code>sap.m.Button</code> in the aggregation
         * <code>customHeaderContent</code>.and returns its index if found or -1 otherwise.
         * @param oCustomHeaderContent The customHeaderContent whose index is looked for
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
        */
        indexOfCustomHeaderContent(oCustomHeaderContent: sap.m.Button): number;

        /**
         * Inserts a content into the aggregation <code>content</code>.
         * @param oContent the content to insert; if empty, nothing is inserted
         * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
         * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
         *  greater than the current size of the aggregation, the content is inserted at             the last
         * position
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.semantic.SemanticPage;

        /**
         * Inserts a customFooterContent into the aggregation <code>customFooterContent</code>.
         * @param oCustomFooterContent the customFooterContent to insert; if empty, nothing is inserted
         * @param iIndex the <code>0</code>-based index the customFooterContent should be inserted at; for     
         *        a negative value of <code>iIndex</code>, the customFooterContent is inserted at position 0;
         * for a value             greater than the current size of the aggregation, the customFooterContent is
         * inserted at             the last position
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        insertCustomFooterContent(oCustomFooterContent: sap.m.Button, iIndex: number): sap.m.semantic.SemanticPage;

        /**
         * Inserts a customHeaderContent into the aggregation <code>customHeaderContent</code>.
         * @param oCustomHeaderContent the customHeaderContent to insert; if empty, nothing is inserted
         * @param iIndex the <code>0</code>-based index the customHeaderContent should be inserted at; for     
         *        a negative value of <code>iIndex</code>, the customHeaderContent is inserted at position 0;
         * for a value             greater than the current size of the aggregation, the customHeaderContent is
         * inserted at             the last position
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        insertCustomHeaderContent(oCustomHeaderContent: sap.m.Button, iIndex: number): sap.m.semantic.SemanticPage;

        /**
         * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
         * from the hosting UIArea.
         * @returns An array of the removed elements (might be empty)
        */
        removeAllContent(): sap.ui.core.Control[];

        /**
         * Removes all the controls from the aggregation <code>customFooterContent</code>.Additionally, it
         * unregisters them from the hosting UIArea.
         * @returns An array of the removed elements (might be empty)
        */
        removeAllCustomFooterContent(): sap.m.Button[];

        /**
         * Removes all the controls from the aggregation <code>customHeaderContent</code>.Additionally, it
         * unregisters them from the hosting UIArea.
         * @returns An array of the removed elements (might be empty)
        */
        removeAllCustomHeaderContent(): sap.m.Button[];

        /**
         * Removes a content from the aggregation <code>content</code>.
         * @param vContent The content to remove or its index or id
         * @returns The removed content or <code>null</code>
        */
        removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

        /**
         * Removes a customFooterContent from the aggregation <code>customFooterContent</code>.
         * @param vCustomFooterContent The customFooterContent to remove or its index or id
         * @returns The removed customFooterContent or <code>null</code>
        */
        removeCustomFooterContent(vCustomFooterContent: number | string | sap.m.Button): sap.m.Button;

        /**
         * Removes a customHeaderContent from the aggregation <code>customHeaderContent</code>.
         * @param vCustomHeaderContent The customHeaderContent to remove or its index or id
         * @returns The removed customHeaderContent or <code>null</code>
        */
        removeCustomHeaderContent(vCustomHeaderContent: number | string | sap.m.Button): sap.m.Button;

        /**
         * Sets a new value for property <code>enableScrolling</code>.See {@link
         * sap.m.Page#enableScrolling}When called with a value of <code>null</code> or <code>undefined</code>,
         * the default value of the property will be restored.Default value is <code>true</code>.
         * @param bEnableScrolling New value for property <code>enableScrolling</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEnableScrolling(bEnableScrolling: boolean): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>floatingFooter</code>.Determines whether the floating footer
         * behavior is enabled.If set to <code>true</code>, the content is visible when it's underneath the
         * footer.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
         * the property will be restored.Default value is <code>false</code>.
         * @since 1.40.1
         * @param bFloatingFooter New value for property <code>floatingFooter</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFloatingFooter(bFloatingFooter: boolean): sap.m.semantic.SemanticPage;

        /**
         * Sets the aggregated <code>landmarkInfo</code>.
         * @param oLandmarkInfo The landmarkInfo to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setLandmarkInfo(oLandmarkInfo: sap.m.PageAccessibleLandmarkInfo): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>showFooter</code>.Hides or shows the page footerWhen called with
         * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
         * restored.Default value is <code>true</code>.
         * @param bShowFooter New value for property <code>showFooter</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setShowFooter(bShowFooter: boolean): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>showNavButton</code>.See {@link sap.m.Page#showNavButton}When
         * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
         * property will be restored.Default value is <code>false</code>.
         * @param bShowNavButton New value for property <code>showNavButton</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setShowNavButton(bShowNavButton: boolean): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>showSubHeader</code>.See {@link sap.m.Page#showSubHeader}When
         * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
         * property will be restored.Default value is <code>true</code>.
         * @param bShowSubHeader New value for property <code>showSubHeader</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setShowSubHeader(bShowSubHeader: boolean): sap.m.semantic.SemanticPage;

        /**
         * Sets the aggregated <code>subHeader</code>.
         * @param oSubHeader The subHeader to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSubHeader(oSubHeader: sap.m.IBar): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>title</code>.See {@link sap.m.Page#title}When called with a
         * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
         * restored.
         * @param sTitle New value for property <code>title</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setTitle(sTitle: string): sap.m.semantic.SemanticPage;

        /**
         * Sets a new value for property <code>titleLevel</code>.See {@link sap.m.Page#titleLevel}When called
         * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
         * be restored.Default value is <code>Auto</code>.
         * @param sTitleLevel New value for property <code>titleLevel</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.semantic.SemanticPage;
      }
      /**
       * A ShareMenuPage is a {@link sap.m.semantic.SemanticPage} with support for "share" menu in the
       * footer.
       * @resource sap/m/semantic/ShareMenuPage.js
      */
      export class ShareMenuPage extends sap.m.semantic.SemanticPage {


        /**
         * Constructor for a new ShareMenuPageAccepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId id for the new control, generated automatically if no id is given
         * @param mSettings initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Adds some customShareMenuContent to the aggregation <code>customShareMenuContent</code>.
         * @param oCustomShareMenuContent the customShareMenuContent to add; if empty, nothing is inserted
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        addCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): sap.m.semantic.ShareMenuPage;

        /**
         * Destroys all the customShareMenuContent in the aggregation <code>customShareMenuContent</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCustomShareMenuContent(): sap.m.semantic.ShareMenuPage;


        /**
         * Gets content of aggregation <code>customShareMenuContent</code>.Custom share menu buttons
        */
        getCustomShareMenuContent(): sap.m.Button[];

        /**
         * Returns a metadata object for class sap.m.semantic.ShareMenuPage.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Checks for the provided <code>sap.m.Button</code> in the aggregation
         * <code>customShareMenuContent</code>.and returns its index if found or -1 otherwise.
         * @param oCustomShareMenuContent The customShareMenuContent whose index is looked for
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
        */
        indexOfCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): number;

        /**
         * Inserts a customShareMenuContent into the aggregation <code>customShareMenuContent</code>.
         * @param oCustomShareMenuContent the customShareMenuContent to insert; if empty, nothing is inserted
         * @param iIndex the <code>0</code>-based index the customShareMenuContent should be inserted at; for  
         *           a negative value of <code>iIndex</code>, the customShareMenuContent is inserted at
         * position 0; for a value             greater than the current size of the aggregation, the
         * customShareMenuContent is inserted at             the last position
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        insertCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button, iIndex: number): sap.m.semantic.ShareMenuPage;

        /**
         * Removes all the controls from the aggregation <code>customShareMenuContent</code>.Additionally, it
         * unregisters them from the hosting UIArea.
         * @returns An array of the removed elements (might be empty)
        */
        removeAllCustomShareMenuContent(): sap.m.Button[];

        /**
         * Removes a customShareMenuContent from the aggregation <code>customShareMenuContent</code>.
         * @param vCustomShareMenuContent The customShareMenuContent to remove or its index or id
         * @returns The removed customShareMenuContent or <code>null</code>
        */
        removeCustomShareMenuContent(vCustomShareMenuContent: number | string | sap.m.Button): sap.m.Button;
      }
      /**
       * A ForwardAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/ForwardAction.js
      */
      export class ForwardAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new ForwardAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.ForwardAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A FavoriteAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/FavoriteAction.js
      */
      export class FavoriteAction extends sap.m.semantic.SemanticToggleButton {


        /**
         * Constructor for a new FavoriteAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.FavoriteAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A FullscreenPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the
       * following types:<ul> <li>{@link sap.m.semantic.AddAction}</li>    <li>{@link
       * sap.m.semantic.MainAction}</li>    <li>{@link sap.m.semantic.PositiveAction}</li>    <li>{@link
       * sap.m.semantic.NegativeAction}</li>    <li>{@link sap.m.semantic.ForwardAction}</li>    <li>{@link
       * sap.m.semantic.EditAction}</li>    <li>{@link sap.m.semantic.SaveAction}</li>    <li>{@link
       * sap.m.semantic.DeleteAction}</li>    <li>{@link sap.m.semantic.CancelAction}</li>    <li>{@link
       * sap.m.semantic.FlagAction}</li>    <li>{@link sap.m.semantic.FavoriteAction}</li>    <li>{@link
       * sap.m.semantic.OpenInAction}</li>    <li>{@link sap.m.semantic.DiscussInJamAction}</li>    <li>{@link
       * sap.m.semantic.ShareInJamAction}</li>    <li>{@link sap.m.semantic.SendEmailAction}</li>    <li>{@link
       * sap.m.semantic.SendMessageAction}</li>    <li>{@link sap.m.semantic.PrintAction}</li>    <li>{@link
       * sap.m.semantic.MessagesIndicator}</li>    <li>{@link sap.m.DraftIndicator}</li></ul>
       * @resource sap/m/semantic/FullscreenPage.js
      */
      export class FullscreenPage extends sap.m.semantic.ShareMenuPage {


        /**
         * Constructor for a new FullscreenPageAccepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Destroys the addAction in the aggregation <code>addAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyAddAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyCancelAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDeleteAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the discussInJamAction in the aggregation <code>discussInJamAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDiscussInJamAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the draftIndicator in the aggregation <code>draftIndicator</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyDraftIndicator(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the editAction in the aggregation <code>editAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyEditAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the favoriteAction in the aggregation <code>favoriteAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyFavoriteAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the flagAction in the aggregation <code>flagAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyFlagAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyForwardAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the mainAction in the aggregation <code>mainAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMainAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyMessagesIndicator(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyNegativeAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the openInAction in the aggregation <code>openInAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyOpenInAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the pagingAction in the aggregation <code>pagingAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPagingAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPositiveAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the printAction in the aggregation <code>printAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyPrintAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the saveAction in the aggregation <code>saveAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySaveAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the saveAsTileAction in the aggregation <code>saveAsTileAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySaveAsTileAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the sendEmailAction in the aggregation <code>sendEmailAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySendEmailAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the sendMessageAction in the aggregation <code>sendMessageAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroySendMessageAction(): sap.m.semantic.FullscreenPage;

        /**
         * Destroys the shareInJamAction in the aggregation <code>shareInJamAction</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyShareInJamAction(): sap.m.semantic.FullscreenPage;


        /**
         * Gets content of aggregation <code>addAction</code>.Add action
        */
        getAddAction(): sap.m.semantic.AddAction;

        /**
         * Gets content of aggregation <code>cancelAction</code>.Cancel action
        */
        getCancelAction(): sap.m.semantic.CancelAction;

        /**
         * Gets content of aggregation <code>deleteAction</code>.Delete action
        */
        getDeleteAction(): sap.m.semantic.DeleteAction;

        /**
         * Gets content of aggregation <code>discussInJamAction</code>.DiscussInJam action
        */
        getDiscussInJamAction(): sap.m.semantic.DiscussInJamAction;

        /**
         * Gets content of aggregation <code>draftIndicator</code>.DraftIndicator
        */
        getDraftIndicator(): sap.m.DraftIndicator;

        /**
         * Gets content of aggregation <code>editAction</code>.Edit action
        */
        getEditAction(): sap.m.semantic.EditAction;

        /**
         * Gets content of aggregation <code>favoriteAction</code>.Favorite action
        */
        getFavoriteAction(): sap.m.semantic.FavoriteAction;

        /**
         * Gets content of aggregation <code>flagAction</code>.Flag action
        */
        getFlagAction(): sap.m.semantic.FlagAction;

        /**
         * Gets content of aggregation <code>forwardAction</code>.Negative action
        */
        getForwardAction(): sap.m.semantic.ForwardAction;

        /**
         * Gets content of aggregation <code>mainAction</code>.Main action
        */
        getMainAction(): sap.m.semantic.MainAction;

        /**
         * Gets content of aggregation <code>messagesIndicator</code>.MessagesIndicator
        */
        getMessagesIndicator(): sap.m.semantic.MessagesIndicator;

        /**
         * Returns a metadata object for class sap.m.semantic.FullscreenPage.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets content of aggregation <code>negativeAction</code>.Negative action
        */
        getNegativeAction(): sap.m.semantic.NegativeAction;

        /**
         * Gets content of aggregation <code>openInAction</code>.OpenIn action
        */
        getOpenInAction(): sap.m.semantic.OpenInAction;

        /**
         * Gets content of aggregation <code>pagingAction</code>.Paging action
        */
        getPagingAction(): sap.m.PagingButton;

        /**
         * Gets content of aggregation <code>positiveAction</code>.Positive action
        */
        getPositiveAction(): sap.m.semantic.PositiveAction;

        /**
         * Gets content of aggregation <code>printAction</code>.Print action
        */
        getPrintAction(): sap.m.semantic.PrintAction;

        /**
         * Gets content of aggregation <code>saveAction</code>.Save action
        */
        getSaveAction(): sap.m.semantic.SaveAction;

        /**
         * Gets content of aggregation <code>saveAsTileAction</code>.SaveAsTile button
        */
        getSaveAsTileAction(): sap.m.Button;

        /**
         * Gets content of aggregation <code>sendEmailAction</code>.SendEmail action
        */
        getSendEmailAction(): sap.m.semantic.SendEmailAction;

        /**
         * Gets content of aggregation <code>sendMessageAction</code>.SendMessage action
        */
        getSendMessageAction(): sap.m.semantic.SendMessageAction;

        /**
         * Gets content of aggregation <code>shareInJamAction</code>.ShareInJam action
        */
        getShareInJamAction(): sap.m.semantic.ShareInJamAction;

        /**
         * Sets the aggregated <code>addAction</code>.
         * @param oAddAction The addAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>cancelAction</code>.
         * @param oCancelAction The cancelAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>deleteAction</code>.
         * @param oDeleteAction The deleteAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>discussInJamAction</code>.
         * @param oDiscussInJamAction The discussInJamAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDiscussInJamAction(oDiscussInJamAction: sap.m.semantic.DiscussInJamAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>draftIndicator</code>.
         * @param oDraftIndicator The draftIndicator to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>editAction</code>.
         * @param oEditAction The editAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>favoriteAction</code>.
         * @param oFavoriteAction The favoriteAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFavoriteAction(oFavoriteAction: sap.m.semantic.FavoriteAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>flagAction</code>.
         * @param oFlagAction The flagAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setFlagAction(oFlagAction: sap.m.semantic.FlagAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>forwardAction</code>.
         * @param oForwardAction The forwardAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>mainAction</code>.
         * @param oMainAction The mainAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>messagesIndicator</code>.
         * @param oMessagesIndicator The messagesIndicator to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>negativeAction</code>.
         * @param oNegativeAction The negativeAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>openInAction</code>.
         * @param oOpenInAction The openInAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setOpenInAction(oOpenInAction: sap.m.semantic.OpenInAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>pagingAction</code>.
         * @param oPagingAction The pagingAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPagingAction(oPagingAction: sap.m.PagingButton): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>positiveAction</code>.
         * @param oPositiveAction The positiveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>printAction</code>.
         * @param oPrintAction The printAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPrintAction(oPrintAction: sap.m.semantic.PrintAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>saveAction</code>.
         * @param oSaveAction The saveAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>saveAsTileAction</code>.
         * @param oSaveAsTileAction The saveAsTileAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>sendEmailAction</code>.
         * @param oSendEmailAction The sendEmailAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSendEmailAction(oSendEmailAction: sap.m.semantic.SendEmailAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>sendMessageAction</code>.
         * @param oSendMessageAction The sendMessageAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSendMessageAction(oSendMessageAction: sap.m.semantic.SendMessageAction): sap.m.semantic.FullscreenPage;

        /**
         * Sets the aggregated <code>shareInJamAction</code>.
         * @param oShareInJamAction The shareInJamAction to set
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setShareInJamAction(oShareInJamAction: sap.m.semantic.ShareInJamAction): sap.m.semantic.FullscreenPage;
      }
      /**
       * A NegativeAction button has default semantic-specific properties andis eligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/NegativeAction.js
      */
      export class NegativeAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new NegativeAction.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId id for the new control, generated automatically if no id is given
         * @param mSettings custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.NegativeAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>text</code>.Button text
         * @returns Value of property <code>text</code>
        */
        getText(): string;

        /**
         * Sets a new value for property <code>text</code>.Button textWhen called with a value of
         * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
         * @param sText New value for property <code>text</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setText(sText: string): sap.m.semantic.NegativeAction;
      }
      /**
       * A PositiveAction button has default semantic-specific properties andis eligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/PositiveAction.js
      */
      export class PositiveAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new PositiveAction.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId id for the new control, generated automatically if no id is given
         * @param mSettings custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.PositiveAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>text</code>.Button text
         * @returns Value of property <code>text</code>
        */
        getText(): string;

        /**
         * Sets a new value for property <code>text</code>.Button textWhen called with a value of
         * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
         * @param sText New value for property <code>text</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setText(sText: string): sap.m.semantic.PositiveAction;
      }
      /**
       * A semantic button is either a {@link sap.m.Button} or {@link sap.m.OverflowButton} ,eligible for
       * aggregation content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SemanticButton.js
      */
      export abstract class SemanticButton extends sap.m.semantic.SemanticControl {


        /**
         * Constructor for a new SemanticButton.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
         * <code>sap.m.semantic.SemanticButton</code>.When called, the context of the event handler (its
         * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
         * to this <code>sap.m.semantic.SemanticButton</code> itself.See {@link sap.m.Button#press}
         * @param oData An application-specific payload object that will be passed to the event handler along
         * with the event object when firing the event
         * @param fnFunction The function to be called when the event occurs
         * @param oListener Context object to call the event handler with. Defaults to this
         * <code>sap.m.semantic.SemanticButton</code> itself
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.semantic.SemanticButton;

        /**
         * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
         * <code>sap.m.semantic.SemanticButton</code>.The passed function and listener object must match the
         * ones used for event registration.
         * @param fnFunction The function to be called, when the event occurs
         * @param oListener Context object on which the given function had to be called
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        detachPress(fnFunction: any, oListener: any): sap.m.semantic.SemanticButton;


        /**
         * Fires event <code>press</code> to attached listeners.
         * @param mArguments The arguments to pass along with the event
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        firePress(mArguments: any): sap.m.semantic.SemanticButton;

        /**
         * Gets current value of property <code>enabled</code>.See {@link sap.m.Button#enabled}Default value is
         * <code>true</code>.
         * @returns Value of property <code>enabled</code>
        */
        getEnabled(): boolean;

        /**
         * Returns a metadata object for class sap.m.semantic.SemanticButton.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Sets a new value for property <code>enabled</code>.See {@link sap.m.Button#enabled}When called with
         * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
         * restored.Default value is <code>true</code>.
         * @param bEnabled New value for property <code>enabled</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEnabled(bEnabled: boolean): sap.m.semantic.SemanticButton;
      }
      /**
       * A semantic select is a {@link sap.m.Select} eligible for aggregation content of a {@link
       * sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SemanticSelect.js
      */
      export abstract class SemanticSelect extends sap.m.semantic.SemanticControl {


        /**
         * Constructor for a new SemanticSelect.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);



        /**
         * Adds some item to the aggregation <code>items</code>.
         * @param oItem the item to add; if empty, nothing is inserted
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        addItem(oItem: sap.ui.core.Item): sap.m.semantic.SemanticSelect;

        /**
         * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
         * <code>sap.m.semantic.SemanticSelect</code>.When called, the context of the event handler (its
         * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
         * to this <code>sap.m.semantic.SemanticSelect</code> itself.See {@link sap.m.Select#change}
         * @param oData An application-specific payload object that will be passed to the event handler along
         * with the event object when firing the event
         * @param fnFunction The function to be called when the event occurs
         * @param oListener Context object to call the event handler with. Defaults to this
         * <code>sap.m.semantic.SemanticSelect</code> itself
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.semantic.SemanticSelect;

        /**
         * Binds aggregation <code>items</code> to model data.See {@link
         * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of <code>oBindingInfo</code>.
         * @param oBindingInfo The binding information
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        bindItems(oBindingInfo: any): sap.m.semantic.SemanticSelect;

        /**
         * Destroys all the items in the aggregation <code>items</code>.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        destroyItems(): sap.m.semantic.SemanticSelect;

        /**
         * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
         * <code>sap.m.semantic.SemanticSelect</code>.The passed function and listener object must match the
         * ones used for event registration.
         * @param fnFunction The function to be called, when the event occurs
         * @param oListener Context object on which the given function had to be called
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        detachChange(fnFunction: any, oListener: any): sap.m.semantic.SemanticSelect;


        /**
         * Fires event <code>change</code> to attached listeners.Expects the following event
         * parameters:<ul><li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected
         * item.</li></ul>
         * @param mArguments The arguments to pass along with the event
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        fireChange(mArguments: any): sap.m.semantic.SemanticSelect;

        /**
         * Gets current value of property <code>enabled</code>.See {@link sap.m.Select#enabled}Default value is
         * <code>true</code>.
         * @returns Value of property <code>enabled</code>
        */
        getEnabled(): boolean;

        /**
         * Gets content of aggregation <code>items</code>.See {@link sap.m.Select#items}
        */
        getItems(): sap.ui.core.Item[];

        /**
         * Returns a metadata object for class sap.m.semantic.SemanticSelect.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * ID of the element which is the current target of the association <code>selectedItem</code>, or
         * <code>null</code>.
        */
        getSelectedItem(): any;

        /**
         * Gets current value of property <code>selectedKey</code>.See {@link sap.m.Select#selectedKey}Default
         * value is <code></code>.
         * @returns Value of property <code>selectedKey</code>
        */
        getSelectedKey(): string;

        /**
         * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.and
         * returns its index if found or -1 otherwise.
         * @param oItem The item whose index is looked for
         * @returns The index of the provided control in the aggregation if found, or -1 otherwise
        */
        indexOfItem(oItem: sap.ui.core.Item): number;

        /**
         * Inserts a item into the aggregation <code>items</code>.
         * @param oItem the item to insert; if empty, nothing is inserted
         * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
         * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
         * greater than the current size of the aggregation, the item is inserted at             the last
         * position
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.semantic.SemanticSelect;

        /**
         * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
         * from the hosting UIArea.
         * @returns An array of the removed elements (might be empty)
        */
        removeAllItems(): sap.ui.core.Item[];

        /**
         * Removes a item from the aggregation <code>items</code>.
         * @param vItem The item to remove or its index or id
         * @returns The removed item or <code>null</code>
        */
        removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

        /**
         * Sets a new value for property <code>enabled</code>.See {@link sap.m.Select#enabled}When called with
         * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
         * restored.Default value is <code>true</code>.
         * @param bEnabled New value for property <code>enabled</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setEnabled(bEnabled: boolean): sap.m.semantic.SemanticSelect;

        /**
         * Sets the associated <code>selectedItem</code>.
         * @param oSelectedItem ID of an element which becomes the new target of this selectedItem association;
         * alternatively, an element instance may be given
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSelectedItem(oSelectedItem: any | sap.ui.core.Item): sap.m.semantic.SemanticSelect;

        /**
         * Sets a new value for property <code>selectedKey</code>.See {@link sap.m.Select#selectedKey}When
         * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
         * property will be restored.Default value is <code></code>.
         * @param sSelectedKey New value for property <code>selectedKey</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setSelectedKey(sSelectedKey: string): sap.m.semantic.SemanticSelect;

        /**
         * Unbinds aggregation <code>items</code> from model data.
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        unbindItems(): sap.m.semantic.SemanticSelect;
      }
      /**
       * A semantic control is an abstraction for either a {@link sap.m.semantic.SemanticButton} or {@link
       * sap.m.semantic.SemanticSelect} ,eligible for aggregation content of a {@link
       * sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SemanticControl.js
      */
      export abstract class SemanticControl extends sap.ui.core.Element {


        /**
         * Constructor for a new SemanticControl.Accepts an object literal <code>mSettings</code> that defines
         * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
         * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
         * object.
         * @param sId id for the new control, generated automatically if no id is given
         * @param mSettings initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SemanticControl.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>visible</code>.See {@link sap.ui.core.Control#visible}Default
         * value is <code>true</code>.
         * @returns Value of property <code>visible</code>
        */
        getVisible(): boolean;

        /**
         * Sets a new value for property <code>visible</code>.See {@link sap.ui.core.Control#visible}When
         * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
         * property will be restored.Default value is <code>true</code>.
         * @param bVisible New value for property <code>visible</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setVisible(bVisible: boolean): sap.m.semantic.SemanticControl;
      }
      /**
       * A SendEmailAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SendEmailAction.js
      */
      export class SendEmailAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new SendEmailAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SendEmailAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A ShareInJamAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/ShareInJamAction.js
      */
      export class ShareInJamAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new ShareInJamAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.ShareInJamAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A MultiSelectAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/MultiSelectAction.js
      */
      export class MultiSelectAction extends sap.m.semantic.SemanticToggleButton {


        /**
         * Constructor for a new MultiSelectAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.MultiSelectAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A SendMessageAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SendMessageAction.js
      */
      export class SendMessageAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new SendMessageAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SendMessageAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A MessagesIndicator button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/MessagesIndicator.js
      */
      export class MessagesIndicator extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new MessagesIndicator.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.MessagesIndicator.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A DiscussInJamAction button has default semantic-specific properties and iseligible for aggregation
       * content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/DiscussInJamAction.js
      */
      export class DiscussInJamAction extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new DiscussInJamAction.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Custom initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.DiscussInJamAction.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * A SemanticToggleButton is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
       * @resource sap/m/semantic/SemanticToggleButton.js
      */
      export abstract class SemanticToggleButton extends sap.m.semantic.SemanticButton {


        /**
         * Constructor for a new SemanticToggleButton.Accepts an object literal <code>mSettings</code> that
         * defines initialproperty values, aggregated and associated objects as well as event handlers.See
         * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
         * settings object.
         * @param sId ID for the new control, generated automatically if no ID is given
         * @param mSettings Initial settings for the new control
        */
        constructor(sId: string, mSettings?: any);




        /**
         * Returns a metadata object for class sap.m.semantic.SemanticToggleButton.
         * @returns Metadata object describing this class
        */
        getMetadata(): sap.ui.base.Metadata;

        /**
         * Gets current value of property <code>pressed</code>.The property is “true” when the control is
         * toggled. The default state of this property is "false".Default value is <code>false</code>.
         * @returns Value of property <code>pressed</code>
        */
        getPressed(): boolean;

        /**
         * Sets a new value for property <code>pressed</code>.The property is “true” when the control is
         * toggled. The default state of this property is "false".When called with a value of <code>null</code>
         * or <code>undefined</code>, the default value of the property will be restored.Default value is
         * <code>false</code>.
         * @param bPressed New value for property <code>pressed</code>
         * @returns Reference to <code>this</code> in order to allow method chaining
        */
        setPressed(bPressed: boolean): sap.m.semantic.SemanticToggleButton;
      }
      /**
       *   Marker interface for controls which are suitable as items of the sort aggregation of
       * sap.m.Semantic.MasterPage.
       * @resource sap/m/library.js
      */
      interface ISort {


      }
      /**
       *   Marker interface for controls which are suitable as items of the group aggregation of
       * sap.m.Semantic.MasterPage.
       * @resource sap/m/library.js
      */
      interface IGroup {


      }
      /**
       *   Marker interface for controls which are suitable as items of the filter aggregation of
       * sap.m.Semantic.MasterPage.
       * @resource sap/m/library.js
      */
      interface IFilter {


      }
    }
    namespace URLHelper {

      /**
       * Adds an event registration for redirect.
       * @param fnFunction The function to call, when the event occurs.
       * @param oListener The object, that wants to be notified, when the event occurs.
       * @returns sap.m.URLHelper instance
      */
      function attachRedirect(fnFunction: any, oListener?: any): any;

      /**
       * Detach already registered redirect event.
       * @param fnFunction The function to call, when the event occurs.
       * @param oListener The object, that wants to be notified, when the event occurs.
       * @returns sap.m.URLHelper instance
      */
      function detachRedirect(fnFunction: any, oListener?: any): any;

      /**
       * Builds Email URI from given parameter.Trims spaces from email addresses.
       * @param sEmail Destination email address
       * @param sSubject Subject of the email address
       * @param sBody Default message text
       * @param sCC Carbon Copy email address
       * @param sBCC Blind carbon copy email address
       * @returns Email URI scheme
      */
      function normalizeEmail(sEmail: String, sSubject?: String, sBody?: String, sCC?: String, sBCC?: String): String;

      /**
       * Sanitizes the given telephone number and returns SMS URI scheme.
       * @param sTel Telephone number
       * @returns SMS URI scheme
      */
      function normalizeSms(sTel: String): String;

      /**
       * Sanitizes the given telephone number and returns a telephone URI scheme.
       * @param sTel Telephone number
       * @returns Telephone URI scheme
      */
      function normalizeTel(sTel: String): String;

      /**
       * Redirects to the given URL.This method fires "redirect" event before opening the URL.
       * @param sURL Uniform resource locator
       * @param bNewWindow Opens URL in a new browser window or tab. Please note that, opening a new
       * window/tab can be ignored by browsers(e.g. on Windows Phone) or by popup blockers.NOTE: On Windows
       * Phone the URL will be enforced to open in the same window if opening in a new window/tab fails
       * (because of a known system restriction on cross-window communications). Use sap.m.Link instead (with
       * blank target) if you necessarily need to open URL in a new window.
      */
      function redirect(sURL: String, bNewWindow?: boolean): void;

      /**
       * Trigger email application to send email.Trims spaces from email addresses.
       * @param sEmail Destination email address
       * @param sSubject Subject of the email address
       * @param sBody Default message text
       * @param sCC Carbon Copy email address
       * @param sBCC Blind carbon copy email address
      */
      function triggerEmail(sEmail: String, sSubject?: String, sBody?: String, sCC?: String, sBCC?: String): void;

      /**
       * Trigger SMS application to send SMS to given telephone number.
       * @param sTel Telephone number
      */
      function triggerSms(sTel: String): void;

      /**
       * Trigger telephone to call given telephone number.
       * @param sTel Telephone number
      */
      function triggerTel(sTel: String): void;
    }
    namespace MessageBox {

      /**
       * Displays an alert dialog with the given message and an OK button (no
       * icons).<pre>sap.m.MessageBox.alert("This message should appear in the alert", {    title: "Alert",  
       *                                    // default    onClose: null,                                     
       *  // default    styleClass: ""                                       // default    initialFocus: null
       *                                   // default    textDirection: sap.ui.core.TextDirection.Inherit    
       * // default});</pre>If a callback is given, it is called after the alert dialog has been closedby the
       * user via the OK button. The callback is called with the following signature:<pre>  function
       * (oAction)</pre>where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert
       * dialog is closed by tapping on the OK button   or null when the alert dialog is closed by calling
       * <code>sap.m.InstanceManager.closeAllDialogs()</code>.The alert dialog opened by this method is
       * processed asynchronously.Applications have to use <code>fnCallback</code> to continue work after
       * theuser closed the alert dialog.
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function alert(vMessage: string, mOptions?: any): void;

      /**
       * Displays a confirmation dialog with the given message, a QUESTION icon, an OK buttonand a Cancel
       * button. If a callback is given, it is called after the confirmation boxhas been closed by the user
       * with one of the buttons.<pre>sap.m.MessageBox.confirm("This message should appear in the
       * confirmation", {    title: "Confirm",                                    // default    onClose: null
       *                                        // default    styleClass: ""                                 
       *      // default    initialFocus: null                                   // default    textDirection:
       * sap.ui.core.TextDirection.Inherit     // default    });</pre>The callback is called with the
       * following signature<pre>  function(oAction)</pre>where oAction is set by one of the following three
       * values:1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.2.
       * sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.3. null: Confirm dialog is
       * closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>The confirmation dialog opened
       * by this method is processed asynchronously.Applications have to use <code>fnCallback</code> to
       * continue work after theuser closed the confirmation dialog
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function confirm(vMessage: string, mOptions?: any): void;

      /**
       * Displays an error dialog with the given message, an ERROR icon, a CLOSE button..If a callback is
       * given, it is called after the error boxhas been closed by the user with one of the
       * buttons.<pre>sap.m.MessageBox.error("This message should appear in the error message box", {   
       * title: "Error",                                      // default    onClose: null                    
       *                    // default    styleClass: ""                                       // default   
       * initialFocus: null                                   // default    textDirection:
       * sap.ui.core.TextDirection.Inherit     // default    });</pre>The callback is called with the
       * following signature<pre>  function (oAction)</pre>The error dialog opened by this method is
       * processed asynchronously.Applications have to use <code>fnCallback</code> to continue work after
       * theuser closed the error dialog.
       * @since 1.30
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function error(vMessage: string, mOptions?: any): void;

      /**
       * Displays an information dialog with the given message, an INFO icon, an OK button.If a callback is
       * given, it is called after the info boxhas been closed by the user with one of the
       * buttons.<pre>sap.m.MessageBox.information("This message should appear in the information message
       * box", {    title: "Information",                                // default    onClose: null         
       *                               // default    styleClass: ""                                       //
       * default    initialFocus: null                                   // default    textDirection:
       * sap.ui.core.TextDirection.Inherit     // default    });</pre>The callback is called with the
       * following signature                 *<pre>  function (oAction)</pre>The information dialog opened by this method
       * is processed asynchronously.Applications have to use <code>fnCallback</code> to continue work after
       * theuser closed the information dialog
       * @since 1.30
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function information(vMessage: string, mOptions?: any): void;

      /**
       * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and
       * buttons, and optionally other parts.After the user has tapped a button, the <code>onClose</code>
       * function is invoked when given.The only mandatory parameter is <code>vMessage</code>. Either a
       * string with the corresponding text or evena layout control could be
       * provided.<pre>sap.m.MessageBox.show("This message should appear in the message box", {    icon:
       * sap.m.MessageBox.Icon.NONE,                    // default    title: "",                             
       *              // default    actions: sap.m.MessageBox.Action.OK                  // default   
       * onClose: null                                        // default    styleClass: ""                   
       *                    // default    initialFocus: null                                   // default   
       * textDirection: sap.ui.core.TextDirection.Inherit     // default});</pre>The created dialog is
       * executed asynchronously. When it has been created and registered for rendering,this function returns
       * without waiting for a user reaction.When applications have to react on the users choice, they have
       * to provide a callback function andpostpone any reaction on the user choice until that callback is
       * triggered.The signature of the callback is  function (oAction);where <code>oAction</code> is the
       * button that the user has tapped. For example, when the user has pressed the close button,a
       * sap.m.MessageBox.Action.Close is returned.
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function show(vMessage: string, mOptions?: any): void;

      /**
       * Displays a success dialog with the given message, a SUCCESS icon, an OK button.If a callback is
       * given, it is called after the success boxhas been closed by the user with one of the
       * buttons.<pre>sap.m.MessageBox.success("This message should appear in the success message box", {   
       * title: "Success",                                    // default    onClose: null                    
       *                    // default    styleClass: ""                                       // default   
       * initialFocus: null                                   // default    textDirection:
       * sap.ui.core.TextDirection.Inherit     // default    });</pre>The callback is called with the
       * following signature<pre>  function(oAction)</pre>The success dialog opened by this method is
       * processed asynchronously.Applications have to use <code>fnCallback</code> to continue work after
       * theuser closed the success dialog
       * @since 1.30
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function success(vMessage: string, mOptions?: any): void;

      /**
       * Displays a warning dialog with the given message, a WARNING icon, an OK button.If a callback is
       * given, it is called after the warning boxhas been closed by the user with one of the
       * buttons.<pre>sap.m.MessageBox.warning("This message should appear in the warning message box", {   
       * title: "Warning",                                    // default    onClose: null                    
       *                    // default    styleClass: ""                                       // default   
       * initialFocus: null                                   // default    textDirection:
       * sap.ui.core.TextDirection.Inherit     // default    });</pre>The callback is called with the
       * following signature                 *<pre>  function (oAction)</pre>The warning dialog opened by this method is
       * processed asynchronously.Applications have to use <code>fnCallback</code> to continue work after
       * theuser closed the warning dialog
       * @since 1.30
       * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as
       * vMassage is deprecated since version 1.30.4.
       * @param mOptions Other options (optional)
      */
      function warning(vMessage: string, mOptions?: any): void;
      namespace Icon {

        /**
         * Shows the error icon in the message box.
        */
        var ERROR: any;

        /**
         * Shows the information icon in the message box.
        */
        var INFORMATION: any;

        /**
         * Shows no icon in the message box.
        */
        var NONE: any;

        /**
         * Shows the question icon in the message box.
        */
        var QUESTION: any;

        /**
         * Shows the success icon in the message box.
        */
        var SUCCESS: any;

        /**
         * Shows the warning icon in the message box.
        */
        var WARNING: any;
      }
      namespace Action {

        /**
         * Adds an "Abort" button to the message box.
        */
        var ABORT: any;

        /**
         * Adds a "Cancel" button to the message box.
        */
        var CANCEL: any;

        /**
         * Adds a "Close" button to the message box.
        */
        var CLOSE: any;

        /**
         * Adds a "Delete" button to the message box.
        */
        var DELETE: any;

        /**
         * Adds an "Ignore" button to the message box.
        */
        var IGNORE: any;

        /**
         * Adds a "No" button to the message box.
        */
        var NO: any;

        /**
         * Adds an "OK" button to the message box.
        */
        var OK: any;

        /**
         * Adds a "Retry" button to the message box.
        */
        var RETRY: any;

        /**
         * Adds a "Yes" button to the message box.
        */
        var YES: any;
      }
    }
    namespace PopupHelper {

      /**
       * This methods converts the percentage value to an absolute number based on the given base number.
       * @param sPercentage A percentage value in string format, for example "25%"
       * @param fBaseSize A float number which the calculation is based on.
      */
      function calcPercentageSize(sPercentage: string, fBaseSize: number): void;
    }
    namespace ImageHelper {

      /**
       * Creates or updates an image control.
       * @param sImgId id of the image to be dealt with.
       * @param oImageControl the image to update. If undefined, a new image will be created.
       * @param oParent oImageControl's parentControl.
       * @param mProperties map object that contains key value pairs if image propeties. The 'src'
       * propertyMUST be contained. Also the map's keys must be names of image properties
       * @param aCssClassesToAdd array of css classes which will be added if the image needs to be created.
       * @param aCssClassesToRemove all css clases that oImageControl has and which are contained in this
       * arrayare removed bevore adding the css classes listed in aCssClassesToAdd.
      */
      function getImageControl(sImgId: string, oImageControl: sap.m.Image, oParent: sap.ui.core.Control, mProperties: any, aCssClassesToAdd: any[], aCssClassesToRemove: any[]): void;
    }
    namespace MessageToast {

      /**
       * Creates and displays a simple message toast notification message with the given text, and optionally
       * other options.The only mandatory parameter is <code>sMessage</code>.
       * @param sMessage The message to be displayed.
       * @param mOptions Object which can contain all other options. Not all entries in this object are
       * required. This property is optional.
      */
      function show(sMessage: string, mOptions?: any): void;
    }
    namespace ValueCSSColor {
    }
    namespace BackgroundHelper {

      /**
       * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for
       * background color and background image.To be called by control renderers supporting the global
       * themable background image within their root tag, before they call writeClasses() and writeStyles().
       * @param rm the RenderManager
       * @param sBgColor a configured custom background color for the control, if any
       * @param sBgImgUrl the configured custom background image for the control, if any
      */
      function addBackgroundColorStyles(rm: sap.ui.core.RenderManager, sBgColor?: String, sBgImgUrl?: any): void;

      /**
       * Renders an HTML tag into the given RenderManager which carries the background image which is either
       * configured and given or coming from the current theme.Should be called right after the opening root
       * tag has been completed, so this is the first child element inside the control.
       * @param rm the RenderManager
       * @param oControl the control within which the tag will be rendered; its ID will be used to generate
       * the element ID
       * @param vCssClass a css class or an array of css classes to add to the element
       * @param sBgImgUrl the image of a configured background image; if this is not given, the theme
       * background will be used and also the other settings are ignored.
       * @param bRepeat whether the background image should be repeated/tiled (or stretched)
       * @param fOpacity the background image opacity, if any
      */
      function renderBackgroundImageTag(rm: any, oControl: sap.ui.core.Control, vCssClass: String | String[], sBgImgUrl?: any, bRepeat?: boolean, fOpacity?: number): void;
    }
    namespace InputODataSuggestProvider {
    }
    /**
     * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides
     * its navigation capabilities.It also adds certain header tags to the HTML page which are considered
     * useful for mobile apps.
     * @resource sap/m/App.js
    */
    export class App extends sap.m.NavContainer {


      /**
       * Constructor for a new App.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>orientationChange</code> event of this
       * <code>sap.m.App</code>.When called, the context of the event handler (its <code>this</code>) will be
       * bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.App</code> itself.Fired when the orientation (portrait/landscape) of the device is
       * changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.App</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachOrientationChange(oData: any, fnFunction: any, oListener?: any): sap.m.App;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>orientationChange</code> event of this
       * <code>sap.m.App</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachOrientationChange(fnFunction: any, oListener: any): sap.m.App;


      /**
       * Fires event <code>orientationChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>landscape</code> of type <code>boolean</code>Whether the device is in
       * landscape orientation.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireOrientationChange(mArguments: any): sap.m.App;

      /**
       * Gets current value of property <code>backgroundColor</code>.Background color of the App. If set,
       * this color will override the default background defined by the theme. So this should only be set
       * when really required.Any configured background image will be placed above this colored background.
       * But any theme adaptation in the Theme Designer will override this setting.Use the "backgroundRepeat"
       * property to define whether this image should be stretched to cover the complete App or whether it
       * should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundColor</code>
      */
      getBackgroundColor(): string;

      /**
       * Gets current value of property <code>backgroundImage</code>.Background image of the App. If set,
       * this image will override the default background defined by the theme. So this should only be set
       * when really required.This background image will be placed above any color set for the background.
       * But any theme adaptation in the Theme Designer will override this image setting.Use the
       * "backgroundRepeat" property to define whether this image should be stretched to cover the complete
       * App or whether it should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundImage</code>
      */
      getBackgroundImage(): any;

      /**
       * Gets current value of property <code>backgroundOpacity</code>.Opacity of the background image. The
       * opacity can be set between 0 (fully transparent) and 1 fully opaque).This can be used to make the
       * application content better readable by making the background image partly transparent.Default value
       * is <code>1</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundOpacity</code>
      */
      getBackgroundOpacity(): number;

      /**
       * Gets current value of property <code>backgroundRepeat</code>.Whether the background image (if
       * configured) should be proportionally stretched to cover the whole App (false) or whether it should
       * be tiled (true).Default value is <code>false</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundRepeat</code>
      */
      getBackgroundRepeat(): boolean;

      /**
       * Gets current value of property <code>homeIcon</code>.The icon to be displayed on the home screen of
       * iOS devices after the user does "add to home screen".Note that only the first attempt to set the
       * homeIcon will be executed, subsequent settings are ignored.This icon must be in PNG format. The
       * property can either hold the URL of one single icon which is used for all devices (and possibly
       * scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.A
       * desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires
       * an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
       * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all
       * browsers. ICO is also preferred for this desktop icon setting because the file can contain different
       * images for different resolutions.One example
       * one-retina.png','tablet':'tablet-icon.png','tablet@2':'tablet-retina.png','icon':'desktop.ico'});The
       * respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.If an object is
       * given but one of the sizes is not given, the largest given icon will be used for this size.On
       * Android these icons may or may not be used by the device. Apparently chances can be improved by
       * adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png"
       * and setting the "homeIconPrecomposed" property to "true".
       * @returns Value of property <code>homeIcon</code>
      */
      getHomeIcon(): any;

      /**
       * Returns a metadata object for class sap.m.App.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Sets a new value for property <code>backgroundColor</code>.Background color of the App. If set, this
       * color will override the default background defined by the theme. So this should only be set when
       * really required.Any configured background image will be placed above this colored background. But
       * any theme adaptation in the Theme Designer will override this setting.Use the "backgroundRepeat"
       * property to define whether this image should be stretched to cover the complete App or whether it
       * should be tiled.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundColor New value for property <code>backgroundColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundColor(sBackgroundColor: string): sap.m.App;

      /**
       * Sets a new value for property <code>backgroundImage</code>.Background image of the App. If set, this
       * image will override the default background defined by the theme. So this should only be set when
       * really required.This background image will be placed above any color set for the background. But any
       * theme adaptation in the Theme Designer will override this image setting.Use the "backgroundRepeat"
       * property to define whether this image should be stretched to cover the complete App or whether it
       * should be tiled.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundImage New value for property <code>backgroundImage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundImage(sBackgroundImage: any): sap.m.App;

      /**
       * Sets a new value for property <code>backgroundOpacity</code>.Opacity of the background image. The
       * opacity can be set between 0 (fully transparent) and 1 fully opaque).This can be used to make the
       * application content better readable by making the background image partly transparent.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>1</code>.
       * @since 1.11.2
       * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundOpacity(fBackgroundOpacity: number): sap.m.App;

      /**
       * Sets a new value for property <code>backgroundRepeat</code>.Whether the background image (if
       * configured) should be proportionally stretched to cover the whole App (false) or whether it should
       * be tiled (true).When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.11.2
       * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.App;

      /**
       * Sets a new value for property <code>homeIcon</code>.The icon to be displayed on the home screen of
       * iOS devices after the user does "add to home screen".Note that only the first attempt to set the
       * homeIcon will be executed, subsequent settings are ignored.This icon must be in PNG format. The
       * property can either hold the URL of one single icon which is used for all devices (and possibly
       * scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.A
       * desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires
       * an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
       * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all
       * browsers. ICO is also preferred for this desktop icon setting because the file can contain different
       * images for different resolutions.One example
       * one-retina.png','tablet':'tablet-icon.png','tablet@2':'tablet-retina.png','icon':'desktop.ico'});The
       * respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.If an object is
       * given but one of the sizes is not given, the largest given icon will be used for this size.On
       * Android these icons may or may not be used by the device. Apparently chances can be improved by
       * adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png"
       * and setting the "homeIconPrecomposed" property to "true".When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oHomeIcon New value for property <code>homeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHomeIcon(oHomeIcon: any): sap.m.App;
    }
    /**
     * The Bar control can be used as a header, sub-header and a footer in a page.It has the capability to
     * center a content like a title, while having other controls on the left and right side.
     * @resource sap/m/Bar.js
    */
    export class Bar extends sap.ui.core.Control {

      /**
       * Sets classes and tag according to the context of the page. Possible contexts are header, footer and
       * sub-header.
      */
      protected applyTagAndContextClassFor: any;

      /**
       * Gets the available Bar contexts.
      */
      protected getContext: any;

      /**
       * Gets the HTML tag of the root element.
      */
      protected getHTMLTag: any;

      /**
       * Determines whether the Bar is sensitive to the container context.Implementation of the IBar
       * interface.
      */
      protected isContextSensitive: any;

      /**
       * Sets the HTML tag of the root element.
      */
      protected setHTMLTag: any;


      /**
       * Constructor for a new Bar.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Bar;

      /**
       * Adds some contentLeft to the aggregation <code>contentLeft</code>.
       * @param oContentLeft the contentLeft to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContentLeft(oContentLeft: sap.ui.core.Control): sap.m.Bar;

      /**
       * Adds some contentMiddle to the aggregation <code>contentMiddle</code>.
       * @param oContentMiddle the contentMiddle to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContentMiddle(oContentMiddle: sap.ui.core.Control): sap.m.Bar;

      /**
       * Adds some contentRight to the aggregation <code>contentRight</code>.
       * @param oContentRight the contentRight to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContentRight(oContentRight: sap.ui.core.Control): sap.m.Bar;

      /**
       * Destroys all the contentLeft in the aggregation <code>contentLeft</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContentLeft(): sap.m.Bar;

      /**
       * Destroys all the contentMiddle in the aggregation <code>contentMiddle</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContentMiddle(): sap.m.Bar;

      /**
       * Destroys all the contentRight in the aggregation <code>contentRight</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContentRight(): sap.m.Bar;


      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>contentLeft</code>.Represents the left content area, usually
       * containing a button or an app icon. If it is overlapped by the right content, its content will
       * disappear and the text will show an ellipsis.
      */
      getContentLeft(): sap.ui.core.Control[];

      /**
       * Gets content of aggregation <code>contentMiddle</code>.Represents the middle content area. Controls
       * such as label, segmented buttons or select can be placed here. The content is centrally positioned
       * if there is enough space. If the right or left content overlaps the middle content, the middle
       * content will be centered in the space between the left and the right content.
      */
      getContentMiddle(): sap.ui.core.Control[];

      /**
       * Gets content of aggregation <code>contentRight</code>.Represents the right content area. Controls
       * such as action buttons or search field can be placed here.
      */
      getContentRight(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>design</code>.Determines the design of the bar. If set to auto,
       * it becomes dependent on the place where the bar is placed.Default value is <code>Auto</code>.
       * @since 1.22
       * @returns Value of property <code>design</code>
      */
      getDesign(): sap.m.BarDesign;

      /**
       * Gets current value of property <code>enableFlexBox</code>.If this flag is set to true, contentMiddle
       * will be rendered as a HBox and layoutData can be used to allocate available space.Default value is
       * <code>false</code>.
       * @returns Value of property <code>enableFlexBox</code>
      */
      getEnableFlexBox(): boolean;

      /**
       * Returns a metadata object for class sap.m.Bar.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>translucent</code>.Indicates whether the Bar is partially
       * translucent.It is only applied for touch devices.Default value is <code>false</code>.
       * @since 1.12
       * @returns Value of property <code>translucent</code>
      */
      getTranslucent(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>contentLeft</code>.and returns its index if found or -1 otherwise.
       * @param oContentLeft The contentLeft whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContentLeft(oContentLeft: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>contentMiddle</code>.and returns its index if found or -1 otherwise.
       * @param oContentMiddle The contentMiddle whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContentMiddle(oContentMiddle: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>contentRight</code>.and returns its index if found or -1 otherwise.
       * @param oContentRight The contentRight whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContentRight(oContentRight: sap.ui.core.Control): number;

      /**
       * Inserts a contentLeft into the aggregation <code>contentLeft</code>.
       * @param oContentLeft the contentLeft to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the contentLeft should be inserted at; for            
       * a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value     
       *        greater than the current size of the aggregation, the contentLeft is inserted at            
       * the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContentLeft(oContentLeft: sap.ui.core.Control, iIndex: number): sap.m.Bar;

      /**
       * Inserts a contentMiddle into the aggregation <code>contentMiddle</code>.
       * @param oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for           
       *  a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value  
       *           greater than the current size of the aggregation, the contentMiddle is inserted at        
       *     the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContentMiddle(oContentMiddle: sap.ui.core.Control, iIndex: number): sap.m.Bar;

      /**
       * Inserts a contentRight into the aggregation <code>contentRight</code>.
       * @param oContentRight the contentRight to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the contentRight should be inserted at; for            
       * a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value    
       *         greater than the current size of the aggregation, the contentRight is inserted at           
       *  the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContentRight(oContentRight: sap.ui.core.Control, iIndex: number): sap.m.Bar;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>contentLeft</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContentLeft(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>contentMiddle</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContentMiddle(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>contentRight</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContentRight(): sap.ui.core.Control[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a contentLeft from the aggregation <code>contentLeft</code>.
       * @param vContentLeft The contentLeft to remove or its index or id
       * @returns The removed contentLeft or <code>null</code>
      */
      removeContentLeft(vContentLeft: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a contentMiddle from the aggregation <code>contentMiddle</code>.
       * @param vContentMiddle The contentMiddle to remove or its index or id
       * @returns The removed contentMiddle or <code>null</code>
      */
      removeContentMiddle(vContentMiddle: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a contentRight from the aggregation <code>contentRight</code>.
       * @param vContentRight The contentRight to remove or its index or id
       * @returns The removed contentRight or <code>null</code>
      */
      removeContentRight(vContentRight: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>design</code>.Determines the design of the bar. If set to auto,
       * it becomes dependent on the place where the bar is placed.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Auto</code>.
       * @since 1.22
       * @param sDesign New value for property <code>design</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDesign(sDesign: sap.m.BarDesign): sap.m.Bar;

      /**
       * Sets a new value for property <code>enableFlexBox</code>.If this flag is set to true, contentMiddle
       * will be rendered as a HBox and layoutData can be used to allocate available space.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bEnableFlexBox New value for property <code>enableFlexBox</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableFlexBox(bEnableFlexBox: boolean): sap.m.Bar;

      /**
       * Sets a new value for property <code>translucent</code>.Indicates whether the Bar is partially
       * translucent.It is only applied for touch devices.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.12
       * @param bTranslucent New value for property <code>translucent</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTranslucent(bTranslucent: boolean): sap.m.Bar;
    }
    /**
     * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience
     * control as it is just a specialized FlexBox control.Browser support:This control is not supported in
     * Internet Explorer 9!
     * @resource sap/m/HBox.js
    */
    export class HBox extends sap.m.FlexBox {


      /**
       * Constructor for a new HBox.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.HBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience
     * control as it is just a specialized FlexBox control.Browser support:This control is not supported in
     * Internet Explorer 9!
     * @resource sap/m/VBox.js
    */
    export class VBox extends sap.m.FlexBox {


      /**
       * Constructor for a new VBox.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.VBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * A page is a basic container for a mobile application screen. Usually one page is displayed at a time
     * (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
     * @resource sap/m/Page.js
    */
    export class Page extends sap.ui.core.Control {


      /**
       * Constructor for a new Page.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.Page;

      /**
       * Adds some headerContent to the aggregation <code>headerContent</code>.
       * @param oHeaderContent the headerContent to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addHeaderContent(oHeaderContent: sap.ui.core.Control): sap.m.Page;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this
       * <code>sap.m.Page</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Page</code> itself.this event is fired when Nav Button is pressed
       * @since 1.12.2
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Page</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): sap.m.Page;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>navButtonTap</code> event of this
       * <code>sap.m.Page</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Page</code> itself.this event is fired when Nav Button is tapped
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Page</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachNavButtonTap(oData: any, fnFunction: any, oListener?: any): sap.m.Page;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.Page;

      /**
       * Destroys the customHeader in the aggregation <code>customHeader</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomHeader(): sap.m.Page;

      /**
       * Destroys the footer in the aggregation <code>footer</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFooter(): sap.m.Page;

      /**
       * Destroys all the headerContent in the aggregation <code>headerContent</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderContent(): sap.m.Page;

      /**
       * Destroys the landmarkInfo in the aggregation <code>landmarkInfo</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyLandmarkInfo(): sap.m.Page;

      /**
       * Destroys the subHeader in the aggregation <code>subHeader</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySubHeader(): sap.m.Page;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this
       * <code>sap.m.Page</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.12.2
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachNavButtonPress(fnFunction: any, oListener: any): sap.m.Page;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>navButtonTap</code> event of this
       * <code>sap.m.Page</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachNavButtonTap(fnFunction: any, oListener: any): sap.m.Page;


      /**
       * Fires event <code>navButtonPress</code> to attached listeners.
       * @since 1.12.2
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireNavButtonPress(mArguments: any): sap.m.Page;

      /**
       * Fires event <code>navButtonTap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireNavButtonTap(mArguments: any): sap.m.Page;

      /**
       * Gets current value of property <code>backgroundDesign</code>.This property is used to set the
       * background color of a page. When a list is placed inside a page, the value "List" should be used to
       * display a gray background. "Standard", with the value white, is used as default if not
       * specified.Default value is <code>Standard</code>.
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.PageBackgroundDesign;

      /**
       * Gets content of aggregation <code>content</code>.The content of this page
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>contentOnlyBusy</code>.Decides which area is covered by the
       * local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is
       * covered, including headers and footer. When this property is set to "true", only the content area is
       * covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the
       * sub header and live search continuously updates the content area while the user is still able to
       * type.Default value is <code>false</code>.
       * @since 1.29.0
       * @returns Value of property <code>contentOnlyBusy</code>
      */
      getContentOnlyBusy(): boolean;

      /**
       * Gets content of aggregation <code>customHeader</code>.The (optional) custom header of this page.Use
       * this aggregation only when a custom header is constructed where the default header consisting of
       * title text + nav button is not sufficient.If this aggregation is set, the simple properties "title",
       * "showNavButton", "NavButtonText" and "icon" are not used.
      */
      getCustomHeader(): sap.m.IBar;

      /**
       * Gets current value of property <code>enableScrolling</code>.Enable vertical scrolling of page
       * contents. Page headers and footers are fixed and do not scroll.If set to false, there will be no
       * scrolling at all.The Page only allows vertical scrolling because horizontal scrolling is discouraged
       * in general for full-page content. If it still needs to be achieved, disable the Page scrolling and
       * use a ScrollContainer as full-page content of the Page. This allows you to freely configure
       * scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling)
       * Pages.Default value is <code>true</code>.
       * @returns Value of property <code>enableScrolling</code>
      */
      getEnableScrolling(): boolean;

      /**
       * Gets current value of property <code>floatingFooter</code>.Decides whether the floating footer
       * behavior should be enabled.When the floating footer behavior is used, the content is visible when
       * it's underneath the footer.Default value is <code>false</code>.
       * @returns Value of property <code>floatingFooter</code>
      */
      getFloatingFooter(): boolean;

      /**
       * Gets content of aggregation <code>footer</code>.The (optional) footer of this page. It is always
       * located at the bottom of the page
      */
      getFooter(): sap.m.IBar;

      /**
       * Gets content of aggregation <code>headerContent</code>.Controls to be added to the right side of the
       * page header. Usually an application would use Button controls and limit the number to one when the
       * application needs to run on smartphones. There is no automatic overflow handling when the space is
       * insufficient.When a customHeader is used, this aggregation will be ignored.
      */
      getHeaderContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>icon</code>.the icon that is rendered in the page header bar in
       * non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI
       * theme.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets content of aggregation <code>landmarkInfo</code>.Accessible landmark settings to be applied on
       * the containers of the <code>sap.m.Page</code> control.If not set, no landmarks will be written.
      */
      getLandmarkInfo(): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Returns a metadata object for class sap.m.Page.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>navButtonText</code>.The text of the nav button when running in
       * iOS (if shown) in case it deviates from the default, which is "Back". This property is
       * mvi-theme-dependent and will not have any effect in other themes.
       * @returns Value of property <code>navButtonText</code>
      */
      getNavButtonText(): string;

      /**
       * Gets current value of property <code>navButtonTooltip</code>.The tooltip of the nav buttonSince
       * version 1.34
       * @returns Value of property <code>navButtonTooltip</code>
      */
      getNavButtonTooltip(): string;

      /**
       * Gets current value of property <code>navButtonType</code>.This property is used to set the
       * appearance of the NavButton. By default when showNavButton is set to true, a back button will be
       * shown in iOS and an up button in other platforms. In case you want to show a normal button in the
       * left header area, you can set the value to "Default".Default value is <code>Back</code>.
       * @since 1.12
       * @returns Value of property <code>navButtonType</code>
      */
      getNavButtonType(): sap.m.ButtonType;

      /**
       * Gets current value of property <code>showFooter</code>.Whether this page shall have a footerDefault
       * value is <code>true</code>.
       * @since 1.13.1
       * @returns Value of property <code>showFooter</code>
      */
      getShowFooter(): boolean;

      /**
       * Gets current value of property <code>showHeader</code>.Whether this page shall have a header.If set
       * to true, either the control under the "customHeader" aggregation is used, or if there is no such
       * control, a Header control is constructed from the properties "title", "showNavButton",
       * "navButtonText" and "icon" depending on the platform.Default value is <code>true</code>.
       * @returns Value of property <code>showHeader</code>
      */
      getShowHeader(): boolean;

      /**
       * Gets current value of property <code>showNavButton</code>.A nav button will be rendered on the left
       * area of header bar if this property is set to true.Default value is <code>false</code>.
       * @returns Value of property <code>showNavButton</code>
      */
      getShowNavButton(): boolean;

      /**
       * Gets current value of property <code>showSubHeader</code>.Whether this page shall show the
       * subheader.Default value is <code>true</code>.
       * @since 1.28
       * @returns Value of property <code>showSubHeader</code>
      */
      getShowSubHeader(): boolean;

      /**
       * Gets content of aggregation <code>subHeader</code>.a subHeader will be rendered directly under the
       * header
      */
      getSubHeader(): sap.m.IBar;

      /**
       * Gets current value of property <code>title</code>.The title text appearing in the page header bar.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleLevel</code>.Defines the semantic level of the title.
       * Using "Auto" no explicit level information is written.Used for accessibility purposes only.Default
       * value is <code>Auto</code>.
       * @returns Value of property <code>titleLevel</code>
      */
      getTitleLevel(): sap.ui.core.TitleLevel;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>headerContent</code>.and returns its index if found or -1 otherwise.
       * @param oHeaderContent The headerContent whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfHeaderContent(oHeaderContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Page;

      /**
       * Inserts a headerContent into the aggregation <code>headerContent</code>.
       * @param oHeaderContent the headerContent to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the headerContent should be inserted at; for           
       *  a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value  
       *           greater than the current size of the aggregation, the headerContent is inserted at        
       *     the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertHeaderContent(oHeaderContent: sap.ui.core.Control, iIndex: number): sap.m.Page;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>headerContent</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllHeaderContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a headerContent from the aggregation <code>headerContent</code>.
       * @param vHeaderContent The headerContent to remove or its index or id
       * @returns The removed headerContent or <code>null</code>
      */
      removeHeaderContent(vHeaderContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Scrolls to the given position. Only available if enableScrolling is set to "true".
       * @param y The vertical pixel position to scroll to. Scrolling down happens with positive values.
       * @param time The duration of animated scrolling. To scroll immediately without animation, give 0 as
       * value. 0 is also the default value, when this optional parameter is omitted.
      */
      scrollTo(y: number, time: number): sap.m.Page;

      /**
       * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
       * @since 1.30
       * @param oElement The element to which should be scrolled.
       * @param iTime The duration of animated scrolling. To scroll immediately without animation, give 0 as
       * value or leave it default.
       * @returns <code>this</code> to facilitate method chaining.
      */
      scrollToElement(oElement: HTMLElement | sap.ui.core.Element, iTime?: number): sap.m.Page;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.This property is used to set the
       * background color of a page. When a list is placed inside a page, the value "List" should be used to
       * display a gray background. "Standard", with the value white, is used as default if not
       * specified.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Standard</code>.
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.PageBackgroundDesign): sap.m.Page;

      /**
       * Sets a new value for property <code>contentOnlyBusy</code>.Decides which area is covered by the
       * local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is
       * covered, including headers and footer. When this property is set to "true", only the content area is
       * covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the
       * sub header and live search continuously updates the content area while the user is still able to
       * type.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>false</code>.
       * @since 1.29.0
       * @param bContentOnlyBusy New value for property <code>contentOnlyBusy</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentOnlyBusy(bContentOnlyBusy: boolean): sap.m.Page;

      /**
       * Sets a new value for property <code>enableScrolling</code>.Enable vertical scrolling of page
       * contents. Page headers and footers are fixed and do not scroll.If set to false, there will be no
       * scrolling at all.The Page only allows vertical scrolling because horizontal scrolling is discouraged
       * in general for full-page content. If it still needs to be achieved, disable the Page scrolling and
       * use a ScrollContainer as full-page content of the Page. This allows you to freely configure
       * scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling)
       * Pages.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bEnableScrolling New value for property <code>enableScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableScrolling(bEnableScrolling: boolean): sap.m.Page;

      /**
       * Sets a new value for property <code>floatingFooter</code>.Decides whether the floating footer
       * behavior should be enabled.When the floating footer behavior is used, the content is visible when
       * it's underneath the footer.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>false</code>.
       * @param bFloatingFooter New value for property <code>floatingFooter</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFloatingFooter(bFloatingFooter: boolean): sap.m.Page;

      /**
       * Sets the aggregated <code>footer</code>.
       * @param oFooter The footer to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooter(oFooter: sap.m.IBar): sap.m.Page;

      /**
       * Sets a new value for property <code>icon</code>.the icon that is rendered in the page header bar in
       * non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI
       * theme.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.Page;

      /**
       * Sets the aggregated <code>landmarkInfo</code>.
       * @param oLandmarkInfo The landmarkInfo to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLandmarkInfo(oLandmarkInfo: sap.m.PageAccessibleLandmarkInfo): sap.m.Page;

      /**
       * Sets a new value for property <code>navButtonText</code>.The text of the nav button when running in
       * iOS (if shown) in case it deviates from the default, which is "Back". This property is
       * mvi-theme-dependent and will not have any effect in other themes.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sNavButtonText New value for property <code>navButtonText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNavButtonText(sNavButtonText: string): sap.m.Page;

      /**
       * Sets a new value for property <code>navButtonTooltip</code>.The tooltip of the nav buttonSince
       * version 1.34When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sNavButtonTooltip New value for property <code>navButtonTooltip</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNavButtonTooltip(sNavButtonTooltip: string): sap.m.Page;

      /**
       * Sets a new value for property <code>navButtonType</code>.This property is used to set the appearance
       * of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS
       * and an up button in other platforms. In case you want to show a normal button in the left header
       * area, you can set the value to "Default".When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Back</code>.
       * @since 1.12
       * @param sNavButtonType New value for property <code>navButtonType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNavButtonType(sNavButtonType: sap.m.ButtonType): sap.m.Page;

      /**
       * Sets a new value for property <code>showFooter</code>.Whether this page shall have a footerWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @since 1.13.1
       * @param bShowFooter New value for property <code>showFooter</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowFooter(bShowFooter: boolean): sap.m.Page;

      /**
       * Sets a new value for property <code>showHeader</code>.Whether this page shall have a header.If set
       * to true, either the control under the "customHeader" aggregation is used, or if there is no such
       * control, a Header control is constructed from the properties "title", "showNavButton",
       * "navButtonText" and "icon" depending on the platform.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowHeader New value for property <code>showHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHeader(bShowHeader: boolean): sap.m.Page;

      /**
       * Sets a new value for property <code>showNavButton</code>.A nav button will be rendered on the left
       * area of header bar if this property is set to true.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bShowNavButton New value for property <code>showNavButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowNavButton(bShowNavButton: boolean): sap.m.Page;

      /**
       * Sets a new value for property <code>showSubHeader</code>.Whether this page shall show the
       * subheader.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @since 1.28
       * @param bShowSubHeader New value for property <code>showSubHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSubHeader(bShowSubHeader: boolean): sap.m.Page;

      /**
       * Sets the aggregated <code>subHeader</code>.
       * @param oSubHeader The subHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeader(oSubHeader: sap.m.IBar): sap.m.Page;

      /**
       * Sets a new value for property <code>title</code>.The title text appearing in the page header
       * bar.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.Page;

      /**
       * Sets a new value for property <code>titleLevel</code>.Defines the semantic level of the title. Using
       * "Auto" no explicit level information is written.Used for accessibility purposes only.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Auto</code>.
       * @param sTitleLevel New value for property <code>titleLevel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.Page;
    }
    /**
     * The <code>sap.m.Menu</code> control represents a hierarchical menu.When opened on mobile devices it
     * occupies the whole screen.
     * @resource sap/m/Menu.js
    */
    export class Menu extends sap.ui.core.Control {


      /**
       * Constructor for a new Menu.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.MenuItem): sap.m.Menu;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this
       * <code>sap.m.Menu</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Menu</code> itself.Fired when the menu is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Menu</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachClosed(oData: any, fnFunction: any, oListener?: any): sap.m.Menu;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemSelected</code> event of this
       * <code>sap.m.Menu</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Menu</code> itself.Fired when a <code>MenuItem</code> is selected.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Menu</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemSelected(oData: any, fnFunction: any, oListener?: any): sap.m.Menu;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.Menu;

      /**
       * Closes the <code>Menu</code>.
      */
      close(): void;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.Menu;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this
       * <code>sap.m.Menu</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachClosed(fnFunction: any, oListener: any): sap.m.Menu;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemSelected</code> event of this
       * <code>sap.m.Menu</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemSelected(fnFunction: any, oListener: any): sap.m.Menu;


      /**
       * Fires event <code>closed</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireClosed(mArguments: any): sap.m.Menu;

      /**
       * Fires event <code>itemSelected</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>item</code> of type <code>sap.m.MenuItem</code>The <code>MenuItem</code>
       * which was selected.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemSelected(mArguments: any): sap.m.Menu;

      /**
       * Gets content of aggregation <code>items</code>.Defines the items contained within this control.
      */
      getItems(): sap.m.MenuItem[];

      /**
       * Returns a metadata object for class sap.m.Menu.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>title</code>.Defines the <code>Menu</code> title.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.MenuItem): number;

      /**
       * Initializes the control.
      */
      init(): void;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.MenuItem, iIndex: number): sap.m.Menu;

      /**
       * Opens the <code>Menu</code> next to the given control.
       * @param oControl The control that defines the position for the menu
       * @param bWithKeyboard Whether the menu is opened with a shortcut or not
      */
      openBy(oControl: any, bWithKeyboard: any): void;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.MenuItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.MenuItem): sap.m.MenuItem;

      /**
       * Sets the title of the <code>Menu</code>.
       * @param sTitle The new title of the <code>Menu</code>
      */
      setTitle(sTitle: String): void;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.Menu;
    }
    /**
     * The List control provides a container for all types of list items.For mobile devices, the
     * recommended limit of list items is 100 to assure proper performance. To improve initial rendering of
     * large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more
     * information..
     * @resource sap/m/List.js
    */
    export class List extends sap.m.ListBase {


      /**
       * Constructor for a new List.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some column to the aggregation <code>columns</code>.
       * @param oColumn the column to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addColumn(oColumn: sap.m.Column): sap.m.List;

      /**
       * Destroys all the columns in the aggregation <code>columns</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyColumns(): sap.m.List;


      /**
       * Gets current value of property <code>backgroundDesign</code>.Sets the background style of the list.
       * Depending on the theme, you can change the state of the background from <code>Solid</code> to
       * <code>Translucent</code> or to <code>Transparent</code>.Default value is <code>Solid</code>.
       * @since 1.14
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets content of aggregation <code>columns</code>.Defines columns of the list.
      */
      getColumns(): sap.m.Column[];

      /**
       * Returns a metadata object for class sap.m.List.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>columns</code>.and
       * returns its index if found or -1 otherwise.
       * @param oColumn The column whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfColumn(oColumn: sap.m.Column): number;

      /**
       * Inserts a column into the aggregation <code>columns</code>.
       * @param oColumn the column to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the column should be inserted at; for             a
       * negative value of <code>iIndex</code>, the column is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the column is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertColumn(oColumn: sap.m.Column, iIndex: number): sap.m.List;

      /**
       * Removes all the controls from the aggregation <code>columns</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllColumns(): sap.m.Column[];

      /**
       * Removes a column from the aggregation <code>columns</code>.
       * @param vColumn The column to remove or its index or id
       * @returns The removed column or <code>null</code>
      */
      removeColumn(vColumn: number | string | sap.m.Column): sap.m.Column;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.Sets the background style of the list.
       * Depending on the theme, you can change the state of the background from <code>Solid</code> to
       * <code>Translucent</code> or to <code>Transparent</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Solid</code>.
       * @since 1.14
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.List;
    }
    /**
     * A hyperlink control which can be used to trigger actions or to navigate to other applications or web
     * pages.
     * @resource sap/m/Link.js
    */
    export class Link extends sap.ui.core.Control {


      /**
       * Constructor for a new Link.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Link;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Link;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Link</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Link</code> itself.Event is fired when the user triggers the link control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Link</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Link;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Link</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Link;


      /**
       * Fires event <code>press</code> to attached listeners.Listeners may prevent the default action of
       * this event by using the <code>preventDefault</code>-method on the event object.
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      firePress(mArguments: any): boolean;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>emphasized</code>.Emphasized links look visually more important
       * than regular links.Default value is <code>false</code>.
       * @since 1.22
       * @returns Value of property <code>emphasized</code>
      */
      getEmphasized(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Determines whether the link can be triggered by
       * the user.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>href</code>.The link target URI. Supports standard hyperlink
       * behavior. If a JavaScript action should be triggered, this should not be set, but instead an event
       * handler for the "press" event should be registered.
       * @returns Value of property <code>href</code>
      */
      getHref(): any;

      /**
       * Returns a metadata object for class sap.m.Link.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>subtle</code>.Subtle links look more like standard text than
       * like links. They should only be used to help with visual hierarchy between large data lists of
       * important and less important links. Subtle links should not be used in any other use case.Default
       * value is <code>false</code>.
       * @since 1.22
       * @returns Value of property <code>subtle</code>
      */
      getSubtle(): boolean;

      /**
       * Gets current value of property <code>target</code>.Options are the standard values for window.open()
       * supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be
       * entered. This property is only used when the href property is set.
       * @returns Value of property <code>target</code>
      */
      getTarget(): string;

      /**
       * Gets current value of property <code>text</code>.Link text to be displayed.Default value is
       * <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Sets the horizontal alignment of the
       * text.Default value is <code>Initial</code>.
       * @since 1.28.0
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * parent DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>width</code>.Width of the link (CSS-size such as % or px). When
       * it is set, this is the exact size. When left blank, the text defines the size.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Gets current value of property <code>wrapping</code>.Determines whether the link text is allowed to
       * wrap when there is not sufficient space.Default value is <code>false</code>.
       * @returns Value of property <code>wrapping</code>
      */
      getWrapping(): boolean;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>emphasized</code>.Emphasized links look visually more important
       * than regular links.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @since 1.22
       * @param bEmphasized New value for property <code>emphasized</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEmphasized(bEmphasized: boolean): sap.m.Link;

      /**
       * Sets a new value for property <code>enabled</code>.Determines whether the link can be triggered by
       * the user.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Link;

      /**
       * Sets a new value for property <code>href</code>.The link target URI. Supports standard hyperlink
       * behavior. If a JavaScript action should be triggered, this should not be set, but instead an event
       * handler for the "press" event should be registered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sHref New value for property <code>href</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHref(sHref: any): sap.m.Link;

      /**
       * Sets a new value for property <code>subtle</code>.Subtle links look more like standard text than
       * like links. They should only be used to help with visual hierarchy between large data lists of
       * important and less important links. Subtle links should not be used in any other use case.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @since 1.22
       * @param bSubtle New value for property <code>subtle</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubtle(bSubtle: boolean): sap.m.Link;

      /**
       * Sets a new value for property <code>target</code>.Options are the standard values for window.open()
       * supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be
       * entered. This property is only used when the href property is set.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sTarget New value for property <code>target</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTarget(sTarget: string): sap.m.Link;

      /**
       * Sets a new value for property <code>text</code>.Link text to be displayed.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.Link;

      /**
       * Sets a new value for property <code>textAlign</code>.Sets the horizontal alignment of the text.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Initial</code>.
       * @since 1.28.0
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Link;

      /**
       * Sets a new value for property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * parent DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Link;

      /**
       * Sets a new value for property <code>width</code>.Width of the link (CSS-size such as % or px). When
       * it is set, this is the exact size. When left blank, the text defines the size.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Link;

      /**
       * Sets a new value for property <code>wrapping</code>.Determines whether the link text is allowed to
       * wrap when there is not sufficient space.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bWrapping New value for property <code>wrapping</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWrapping(bWrapping: boolean): sap.m.Link;
    }
    /**
     * A tile to be displayed in the tile container. Use thistile as the base class for specialized tile
     * implementations.Use the renderer _addOuterClass methods to add a style class to the mainsurface of
     * the Tile. In this class set the background color, gradientsor background images.Instead of
     * implementing the default render method in the renderer, implementyour content HTML in the
     * _renderContent method of the specialized tile.
     * @resource sap/m/Tile.js
    */
    export class Tile extends sap.ui.core.Control {


      /**
       * Constructor for a new Tile.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Tile</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Tile</code> itself.Tap event is raised if the user taps or clicks the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Tile</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Tile;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Tile</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Tile;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.Tile;

      /**
       * Returns a metadata object for class sap.m.Tile.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>removable</code>.Determines whether the tile is movable within
       * the surrounding tile container. The remove event is fired by the tile container.Default value is
       * <code>true</code>.
       * @returns Value of property <code>removable</code>
      */
      getRemovable(): boolean;

      /**
       * Sets a new value for property <code>removable</code>.Determines whether the tile is movable within
       * the surrounding tile container. The remove event is fired by the tile container.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bRemovable New value for property <code>removable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRemovable(bRemovable: boolean): sap.m.Tile;
    }
    /**
     * The <code>Text</code> control can be used for embedding longer text paragraphs, that need text
     * wrapping, into your app.If the configured text value contains HTML code or script tags, those will
     * be escaped.<br><b>Note: </b>Line breaks (\r\n, \n\r, \r, \n) will always be visualized except when
     * the <code>wrapping</code> property is set to <code>false</code>.
     * @resource sap/m/Text.js
    */
    export class Text extends sap.ui.core.Control {

      /**
       * Determines per instance whether line height should be cached or not.Default value is true.
       * @since 1.22
      */
      protected cacheLineHeight: boolean;

      /**
       * Ellipsis(…) text to indicate more text when clampText function is used.Can be overwritten with
       * 3dots(...) if fonts do not support this UTF-8 character.
       * @since 1.13.2
      */
      protected ellipsis: string;

      /**
       * Defines whether browser supports native line clamp or not
       * @since 1.13.2
      */
      protected hasNativeLineClamp: any;

      /**
       * Default line height value as a number when line-height is normal.This value is required during
       * max-height calculation for the browsers that do not support line-clamping.It is better to define
       * line-height in CSS instead of "normal" to get consistent maxLines results since normal
       * line-heightnot only varies from browser to browser but they also vary from one font face to another
       * and can also vary within a given face.Default value is 1.2
       * @since 1.22
      */
      protected normalLineHeight: number;


      /**
       * Constructor for a new Text.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);

      /**
       * Constructor for a new Text.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(mSettings?: any);



      /**
       * Binds property <code>text</code> to model data.See {@link sap.ui.base.ManagedObject#bindProperty
       * ManagedObject.bindProperty} for a detailed description of the possible properties of
       * <code>oBindingInfo</code>
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindText(oBindingInfo: any): sap.m.Text;

      /**
       * Decides whether the control can use native line clamp feature or not.In RTL mode native line clamp
       * feature is not supported.
       * @since 1.20
      */
      canUseNativeLineClamp(): Boolean;

      /**
       * Sets the max-height to support maxLines property.
       * @since 1.22
       * @param oDomRef DOM reference of the text container.
       * @returns calculated max height value
      */
      clampHeight(oDomRef: HTMLElement): Number;

      /**
       * Clamps the wrapping text according to max lines and returns the found ellipsis position.Parameters
       * can be used for better performance.
       * @since 1.20
       * @param oDomRef DOM reference of the text container.
       * @param iStartPos Start point of the ellipsis search.
       * @param iEndPos End point of the ellipsis search.
       * @returns Returns found ellipsis position or undefined
      */
      clampText(oDomRef: HTMLElement, iStartPos?: number, iEndPos?: number): number | any;


      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns the max height according to max lines and line height calculation.This is not calculated
       * max-height!
       * @since 1.22
       * @param oDomRef DOM reference of the text container.
      */
      getClampHeight(oDomRef: HTMLElement): Number;

      /**
       * Caches and returns the computed line height of the text.
       * @since 1.22
       * @param oDomRef DOM reference of the text container.
       * @returns returns calculated line-height
      */
      getLineHeight(oDomRef: HTMLElement): Number;

      /**
       * Gets current value of property <code>maxLines</code>.Limits the number of lines for wrapping
       * texts.Note: The multi-line overflow indicator depends on the browser line clamping support. For such
       * browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
       * @since 1.13.2
       * @returns Value of property <code>maxLines</code>
      */
      getMaxLines(): number;

      /**
       * Returns a metadata object for class sap.m.Text.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>text</code>.Determines the text to be displayed.Default value
       * is <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Sets the horizontal alignment of the
       * text.Default value is <code>Begin</code>.
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Available options for the text direction
       * are LTR and RTL. By default the control inherits the text direction from its parent control.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Returns the text node container's DOM reference.This can be different from getDomRef when inner
       * wrapper is needed.
       * @since 1.22
      */
      getTextDomRef(): HTMLElement | any;

      /**
       * Gets current value of property <code>width</code>.Sets the width of the Text control. By default,
       * the Text control uses the full width available. Set this property to restrict the width to a custom
       * value.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Gets current value of property <code>wrapping</code>.Enables text wrapping.Default value is
       * <code>true</code>.
       * @returns Value of property <code>wrapping</code>
      */
      getWrapping(): boolean;

      /**
       * Determines whether max lines should be rendered or not.
       * @since 1.22
      */
      hasMaxLines(): HTMLElement | any;

      /**
       * Sets a new value for property <code>maxLines</code>.Limits the number of lines for wrapping
       * texts.Note: The multi-line overflow indicator depends on the browser line clamping support. For such
       * browsers, this will be shown as ellipsis, for the other browsers the overflow will just be
       * hidden.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.13.2
       * @param iMaxLines New value for property <code>maxLines</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLines(iMaxLines: number): sap.m.Text;

      /**
       * To prevent from the layout thrashing of the textContent call, this methodfirst tries to set the
       * nodeValue of the first child if it exists.
       * @since 1.30.3
       * @param oDomRef DOM reference of the text node container.
       * @param sNodeValue new Node value.
      */
      setNodeValue(oDomRef: HTMLElement, sNodeValue?: String): void;

      /**
       * Sets a new value for property <code>text</code>.Determines the text to be displayed.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.Text;

      /**
       * Sets a new value for property <code>textAlign</code>.Sets the horizontal alignment of the text.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Begin</code>.
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Text;

      /**
       * Sets a new value for property <code>textDirection</code>.Available options for the text direction
       * are LTR and RTL. By default the control inherits the text direction from its parent control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Text;

      /**
       * Sets a new value for property <code>width</code>.Sets the width of the Text control. By default, the
       * Text control uses the full width available. Set this property to restrict the width to a custom
       * value.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Text;

      /**
       * Sets a new value for property <code>wrapping</code>.Enables text wrapping.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bWrapping New value for property <code>wrapping</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWrapping(bWrapping: boolean): sap.m.Text;

      /**
       * Unbinds property <code>text</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindText(): sap.m.Text;
    }
    /**
     * The Panel control is a container for controls which has a header and content.The header is always
     * visible while the content can be collapsed if the Panel is expandable.
     * @resource sap/m/Panel.js
    */
    export class Panel extends sap.ui.core.Control {


      /**
       * Constructor for a new Panel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.Panel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>expand</code> event of this
       * <code>sap.m.Panel</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Panel</code> itself.Indicates that the panel will expand or collapse
       * @since 1.22
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Panel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachExpand(oData: any, fnFunction: any, oListener?: any): sap.m.Panel;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.Panel;

      /**
       * Destroys the headerToolbar in the aggregation <code>headerToolbar</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderToolbar(): sap.m.Panel;

      /**
       * Destroys the infoToolbar in the aggregation <code>infoToolbar</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyInfoToolbar(): sap.m.Panel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>expand</code> event of this
       * <code>sap.m.Panel</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.22
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachExpand(fnFunction: any, oListener: any): sap.m.Panel;


      /**
       * Fires event <code>expand</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>expand</code> of type <code>boolean</code>If the panel will expand, this is
       * true.If the panel will collapse, this is false.</li></ul>
       * @since 1.22
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireExpand(mArguments: any): sap.m.Panel;

      /**
       * Gets current value of property <code>backgroundDesign</code>.This property is used to set the
       * background color of the Panel.Depending on the theme you can change the state of the background from
       * "Solid" over "Translucent" to "Transparent".Default value is <code>Translucent</code>.
       * @since 1.30
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets content of aggregation <code>content</code>.Determines the content of the Panel.The content
       * will be visible only when the Panel is expanded.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>expandable</code>.Specifies whether the control is
       * expandable.This allows for collapsing or expanding the infoToolbar (if available) and content of the
       * Panel.Note: If expandable is set to false, the Panel will always be rendered expanded.Default value
       * is <code>false</code>.
       * @since 1.22
       * @returns Value of property <code>expandable</code>
      */
      getExpandable(): boolean;

      /**
       * Gets current value of property <code>expandAnimation</code>.Indicates whether the transition between
       * the expanded and the collapsed state of the control is animated.By default the animation is
       * enabled.Default value is <code>true</code>.
       * @since 1.26
       * @returns Value of property <code>expandAnimation</code>
      */
      getExpandAnimation(): boolean;

      /**
       * Gets current value of property <code>expanded</code>.Indicates whether the Panel is expanded or
       * not.If expanded is set to true, then both the infoToolbar (if available) and the content are
       * rendered.If expanded is set to false, then only the headerText or headerToolbar is rendered.Default
       * value is <code>false</code>.
       * @since 1.22
       * @returns Value of property <code>expanded</code>
      */
      getExpanded(): boolean;

      /**
       * Gets current value of property <code>headerText</code>.This property is used to set the header text
       * of the Panel.The "headerText" is visible in both expanded and collapsed state.Note: This property is
       * overwritten by the "headerToolbar" aggregation.Default value is <code></code>.
       * @returns Value of property <code>headerText</code>
      */
      getHeaderText(): string;

      /**
       * Gets content of aggregation <code>headerToolbar</code>.This aggregation allows the use of a custom
       * Toolbar as header for the Panel.The "headerToolbar" is visible in both expanded and collapsed
       * state.Use it when you want to add extra controls for user interactions in the header.Note: This
       * aggregation overwrites "headerText" property.
       * @since 1.16
      */
      getHeaderToolbar(): sap.m.Toolbar;

      /**
       * Gets current value of property <code>height</code>.Determines the Panel height.Default value is
       * <code>auto</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets content of aggregation <code>infoToolbar</code>.This aggregation allows the use of a custom
       * Toolbar as information bar for the Panel.The "infoToolbar" is placed below the header and is visible
       * only in expanded state.Use it when you want to show extra information to the user.
       * @since 1.16
      */
      getInfoToolbar(): sap.m.Toolbar;

      /**
       * Returns a metadata object for class sap.m.Panel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>width</code>.Determines the Panel width.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Panel;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.This property is used to set the
       * background color of the Panel.Depending on the theme you can change the state of the background from
       * "Solid" over "Translucent" to "Transparent".When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Translucent</code>.
       * @since 1.30
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.Panel;

      /**
       * Sets the expandable property of the control.
       * @param bExpandable Defines whether the control is expandable or not.
       * @returns Pointer to the control instance to allow method chaining.
      */
      setExpandable(bExpandable: boolean): sap.m.Panel;

      /**
       * Sets a new value for property <code>expandAnimation</code>.Indicates whether the transition between
       * the expanded and the collapsed state of the control is animated.By default the animation is
       * enabled.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @since 1.26
       * @param bExpandAnimation New value for property <code>expandAnimation</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setExpandAnimation(bExpandAnimation: boolean): sap.m.Panel;

      /**
       * Sets the expanded property of the control.
       * @param bExpanded Defines whether control is expanded or not.
       * @returns Pointer to the control instance to allow method chaining.
      */
      setExpanded(bExpanded: boolean): sap.m.Panel;

      /**
       * Sets a new value for property <code>headerText</code>.This property is used to set the header text
       * of the Panel.The "headerText" is visible in both expanded and collapsed state.Note: This property is
       * overwritten by the "headerToolbar" aggregation.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sHeaderText New value for property <code>headerText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderText(sHeaderText: string): sap.m.Panel;

      /**
       * Sets the aggregated <code>headerToolbar</code>.
       * @since 1.16
       * @param oHeaderToolbar The headerToolbar to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderToolbar(oHeaderToolbar: sap.m.Toolbar): sap.m.Panel;

      /**
       * Sets the height of the panel.
       * @param sHeight The height of the panel as CSS size.
       * @returns Pointer to the control instance to allow method chaining.
      */
      setHeight(sHeight: any): sap.m.Panel;

      /**
       * Sets the aggregated <code>infoToolbar</code>.
       * @since 1.16
       * @param oInfoToolbar The infoToolbar to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfoToolbar(oInfoToolbar: sap.m.Toolbar): sap.m.Panel;

      /**
       * Sets the width of the panel.
       * @param sWidth The width of the Panel as CSS size.
       * @returns Pointer to the control instance to allow method chaining.
      */
      setWidth(sWidth: any): sap.m.Panel;
    }
    /**
     * The Label control is used in a UI5 mobile application to provide label text for other controls.
     * Design such as bold, and text alignment can be specified.
     * @resource sap/m/Label.js
    */
    export class Label extends sap.ui.core.Control {


      /**
       * Constructor for a new Label.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>design</code>.Sets the design of a Label to either Standard or
       * Bold.Default value is <code>Standard</code>.
       * @returns Value of property <code>design</code>
      */
      getDesign(): sap.m.LabelDesign;

      /**
       * ID of the element which is the current target of the association <code>labelFor</code>, or
       * <code>null</code>.
      */
      getLabelFor(): any;

      /**
       * Returns a metadata object for class sap.m.Label.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>required</code>.Indicates that user input is required in the
       * input this label labels.Default value is <code>false</code>.
       * @returns Value of property <code>required</code>
      */
      getRequired(): boolean;

      /**
       * Gets current value of property <code>text</code>.Determines the Label text to be displayed.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Available alignment settings are "Begin",
       * "Center", "End", "Left", and "Right".Default value is <code>Begin</code>.
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR. Alternatively, the control can inherit the text direction from its parent container.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>width</code>.Determines the width of the label.Default value is
       * <code></code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>design</code>.Sets the design of a Label to either Standard or
       * Bold.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Standard</code>.
       * @param sDesign New value for property <code>design</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDesign(sDesign: sap.m.LabelDesign): sap.m.Label;

      /**
       * Sets the associated <code>labelFor</code>.
       * @param oLabelFor ID of an element which becomes the new target of this labelFor association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLabelFor(oLabelFor: any | sap.ui.core.Control): sap.m.Label;

      /**
       * Sets a new value for property <code>required</code>.Indicates that user input is required in the
       * input this label labels.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bRequired New value for property <code>required</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRequired(bRequired: boolean): sap.m.Label;

      /**
       * Sets a new value for property <code>text</code>.Determines the Label text to be displayed.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.Label;

      /**
       * Sets a new value for property <code>textAlign</code>.Available alignment settings are "Begin",
       * "Center", "End", "Left", and "Right".When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Begin</code>.
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Label;

      /**
       * Sets a new value for property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR. Alternatively, the control can inherit the text direction from its parent container.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Label;

      /**
       * Sets a new value for property <code>width</code>.Determines the width of the label.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Label;
    }
    /**
     * <code>sap.m.Table</code> control provides a set of sophisticated and convenience functions for
     * responsive table design.To render the <code>sap.m.Table</code> properly, the order of the
     * <code>columns</code> aggregation should match with the order of the items <code>cells</code>
     * aggregation. Also <code>sap.m.Table</code> requires at least one visible <code>sap.m.Column</code>
     * in <code>columns</code> aggregation.For mobile devices, the recommended limit of table rows is 100
     * (based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use
     * the <code>growing</code> feature.
     * @resource sap/m/Table.js
    */
    export class Table extends sap.m.ListBase {


      /**
       * Constructor for a new Table.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);

      /**
       * Constructor for a new Table.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(mSettings?: any);

      /**
       * Adds some column to the aggregation <code>columns</code>.
       * @param oColumn the column to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addColumn(oColumn: sap.m.Column): sap.m.Table;

      /**
       * Destroys all the columns in the aggregation <code>columns</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyColumns(): sap.m.Table;


      /**
       * Gets current value of property <code>backgroundDesign</code>.Sets the background style of the table.
       * Depending on the theme, you can change the state of the background from <code>Solid</code> to
       * <code>Translucent</code> or to <code>Transparent</code>.Default value is <code>Translucent</code>.
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Getter for aggregation columns.
       * @param bSort set true to get the columns in an order that respects personalization settings
       * @returns columns of the Table
      */
      getColumns(bSort: Boolean): sap.m.Column[];

      /**
       * Gets current value of property <code>fixedLayout</code>.Defines the algorithm to be used to layout
       * the table cells, rows, and columns.By default, a table is rendered with fixed layout algorithm. This
       * means the horizontal layout only depends on the table's width and the width of the columns, not the
       * contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser
       * to layout the table faster than the auto table layout since the browser can begin to display the
       * table once the first row has been analyzed.When this property is set to <code>false</code>,
       * <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table
       * and its cells depends on the contents of the cells. The column width is set by the widest
       * unbreakable content inside the cells. This can make the rendering slow, since the browser needs to
       * read through all the content in the table before determining the final layout.<b>Note:</b> Since
       * <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false
       * can force the table to overflow, which may cause visual problems. It is suggested to use this
       * property when a table has a few columns in wide screens or within the horizontal scroll container
       * (e.g <code>sap.m.Dialog</code>) to handle overflow.In auto layout mode the <code>width</code>
       * property of <code>sap.m.Column</code> is taken into account as a minimum width.Default value is
       * <code>true</code>.
       * @since 1.22
       * @returns Value of property <code>fixedLayout</code>
      */
      getFixedLayout(): boolean;

      /**
       * Returns a metadata object for class sap.m.Table.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showOverlay</code>.Setting this property to <code>true</code>
       * will show an overlay on top of the table content and prevents the user interaction with it.Default
       * value is <code>false</code>.
       * @since 1.22.1
       * @returns Value of property <code>showOverlay</code>
      */
      getShowOverlay(): boolean;

      /**
       * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>columns</code>.and
       * returns its index if found or -1 otherwise.
       * @param oColumn The column whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfColumn(oColumn: sap.m.Column): number;

      /**
       * Inserts a column into the aggregation <code>columns</code>.
       * @param oColumn the column to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the column should be inserted at; for             a
       * negative value of <code>iIndex</code>, the column is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the column is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertColumn(oColumn: sap.m.Column, iIndex: number): sap.m.Table;

      /**
       * Removes all the controls from the aggregation <code>columns</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllColumns(): sap.m.Column[];

      /**
       * Removes a column from the aggregation <code>columns</code>.
       * @param vColumn The column to remove or its index or id
       * @returns The removed column or <code>null</code>
      */
      removeColumn(vColumn: number | string | sap.m.Column): sap.m.Column;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.Sets the background style of the table.
       * Depending on the theme, you can change the state of the background from <code>Solid</code> to
       * <code>Translucent</code> or to <code>Transparent</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Translucent</code>.
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.Table;

      /**
       * Sets a new value for property <code>fixedLayout</code>.Defines the algorithm to be used to layout
       * the table cells, rows, and columns.By default, a table is rendered with fixed layout algorithm. This
       * means the horizontal layout only depends on the table's width and the width of the columns, not the
       * contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser
       * to layout the table faster than the auto table layout since the browser can begin to display the
       * table once the first row has been analyzed.When this property is set to <code>false</code>,
       * <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table
       * and its cells depends on the contents of the cells. The column width is set by the widest
       * unbreakable content inside the cells. This can make the rendering slow, since the browser needs to
       * read through all the content in the table before determining the final layout.<b>Note:</b> Since
       * <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false
       * can force the table to overflow, which may cause visual problems. It is suggested to use this
       * property when a table has a few columns in wide screens or within the horizontal scroll container
       * (e.g <code>sap.m.Dialog</code>) to handle overflow.In auto layout mode the <code>width</code>
       * property of <code>sap.m.Column</code> is taken into account as a minimum width.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.22
       * @param bFixedLayout New value for property <code>fixedLayout</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFixedLayout(bFixedLayout: boolean): sap.m.Table;

      /**
       * Sets a new value for property <code>showOverlay</code>.Setting this property to <code>true</code>
       * will show an overlay on top of the table content and prevents the user interaction with it.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @since 1.22.1
       * @param bShowOverlay New value for property <code>showOverlay</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowOverlay(bShowOverlay: boolean): sap.m.Table;
    }
    /**
     * The <code>sap.m.Token</code> is a container of a single text item with a delete icon if the token is
     * in edit mode.
     * @resource sap/m/Token.js
    */
    export class Token extends sap.ui.core.Control {


      /**
       * Constructor for a new Token.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Token;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Token;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>delete</code> event of this
       * <code>sap.m.Token</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Token</code> itself.This event is fired if the user clicks the token's delete icon.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Token</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDelete(oData: any, fnFunction: any, oListener?: any): sap.m.Token;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Token</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Token</code> itself.This event is fired when the user clicks on the token.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Token</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Token;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.Token</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Token</code> itself.This event is fired when the token gets selected.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Token</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.Token;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>delete</code> event of this
       * <code>sap.m.Token</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDelete(fnFunction: any, oListener: any): sap.m.Token;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Token</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Token;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.Token</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.Token;


      /**
       * Fires event <code>delete</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDelete(mArguments: any): sap.m.Token;

      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.Token;

      /**
       * Fires event <code>select</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.Token;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>editable</code>.Indicates the editable status of the token. If
       * it is set to <code>true</code>, token displays a delete icon.Default value is <code>true</code>.
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>key</code>.Key of the token.Default value is <code></code>.
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.Token.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>selected</code>.Indicates the current selection status of the
       * token.Default value is <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Gets current value of property <code>text</code>.Displayed text of the token.Default value is
       * <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.This property specifies the text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>editable</code>.Indicates the editable status of the token. If
       * it is set to <code>true</code>, token displays a delete icon.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.Token;

      /**
       * Sets a new value for property <code>key</code>.Key of the token.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.Token;

      /**
       * Sets a new value for property <code>text</code>.Displayed text of the token.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.Token;

      /**
       * Sets a new value for property <code>textDirection</code>.This property specifies the text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Token;
    }
    /**
     * Enables users to input data.
     * @resource sap/m/Input.js
    */
    export class Input extends sap.m.InputBase {


      /**
       * Constructor for a new Input.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some suggestionColumn to the aggregation <code>suggestionColumns</code>.
       * @since 1.21.1
       * @param oSuggestionColumn the suggestionColumn to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSuggestionColumn(oSuggestionColumn: sap.m.Column): sap.m.Input;

      /**
       * Adds some suggestionItem to the aggregation <code>suggestionItems</code>.
       * @since 1.16.1
       * @param oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSuggestionItem(oSuggestionItem: sap.ui.core.Item): sap.m.Input;

      /**
       * Adds some suggestionRow to the aggregation <code>suggestionRows</code>.
       * @since 1.21.1
       * @param oSuggestionRow the suggestionRow to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSuggestionRow(oSuggestionRow: sap.m.ColumnListItem): sap.m.Input;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.Input</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Input</code> itself.This event is fired when the value of the input is changed - e.g. at
       * each keypress
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Input</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.Input;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>submit</code> event of this
       * <code>sap.m.Input</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Input</code> itself.This event is fired when user presses the <code>Enter</code> key on
       * the input.<b>Note:</b>The event is fired independent of whether there was a change before or not. If
       * a change was performed the event is fired after the change event.The event is also fired when an
       * item of the select list is selected via <code>Enter</code>.The event is only fired on an input which
       * allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).
       * @since 1.33.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Input</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSubmit(oData: any, fnFunction: any, oListener?: any): sap.m.Input;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>suggest</code> event of this
       * <code>sap.m.Input</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Input</code> itself.This event is fired when user types in the input and showSuggestion
       * is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
       * @since 1.16.1
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Input</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSuggest(oData: any, fnFunction: any, oListener?: any): sap.m.Input;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>suggestionItemSelected</code> event of
       * this <code>sap.m.Input</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Input</code> itself.This event is fired when suggestionItem shown in suggestion popup
       * are selected. This event is only fired when showSuggestion is set to true and there are
       * suggestionItems shown in the suggestion popup.
       * @since 1.16.3
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Input</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSuggestionItemSelected(oData: any, fnFunction: any, oListener?: any): sap.m.Input;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>valueHelpRequest</code> event of this
       * <code>sap.m.Input</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Input</code> itself.When the value help indicator is clicked, this event will be fired.
       * @since 1.16
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Input</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachValueHelpRequest(oData: any, fnFunction: any, oListener?: any): sap.m.Input;

      /**
       * Forwards aggregations with the name of items or columns to the internal table.
       * @param sAggregationName the name for the binding
       * @param oBindingInfo the configuration parameters for the binding
       * @returns this pointer for chaining
      */
      bindAggregation(sAggregationName: string, oBindingInfo: any): sap.m.Input;

      /**
       * Binds aggregation <code>suggestionColumns</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.21.1
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindSuggestionColumns(oBindingInfo: any): sap.m.Input;

      /**
       * Binds aggregation <code>suggestionRows</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.21.1
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindSuggestionRows(oBindingInfo: any): sap.m.Input;

      /**
       * Destroys all the suggestionColumns in the aggregation <code>suggestionColumns</code>.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySuggestionColumns(): sap.m.Input;

      /**
       * Destroys all the suggestionItems in the aggregation <code>suggestionItems</code>.
       * @since 1.16.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySuggestionItems(): sap.m.Input;

      /**
       * Destroys all the suggestionRows in the aggregation <code>suggestionRows</code>.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySuggestionRows(): sap.m.Input;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.Input</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.Input;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>submit</code> event of this
       * <code>sap.m.Input</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.33.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSubmit(fnFunction: any, oListener: any): sap.m.Input;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>suggest</code> event of this
       * <code>sap.m.Input</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.16.1
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSuggest(fnFunction: any, oListener: any): sap.m.Input;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>suggestionItemSelected</code> event of
       * this <code>sap.m.Input</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16.3
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSuggestionItemSelected(fnFunction: any, oListener: any): sap.m.Input;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>valueHelpRequest</code> event of this
       * <code>sap.m.Input</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.16
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachValueHelpRequest(fnFunction: any, oListener: any): sap.m.Input;


      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The new value of the
       * input.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.Input;

      /**
       * Fires event <code>submit</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The new value of the
       * input.</li></ul>
       * @since 1.33.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSubmit(mArguments: any): sap.m.Input;

      /**
       * Fires event <code>suggest</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>suggestValue</code> of type <code>string</code>The current value which has
       * been typed in the input.</li><li><code>suggestionColumns</code> of type
       * <code>sap.m.ListBase</code>The suggestion list is passed to this event for convenience. If you use
       * list-based or tabular suggestions, fill the suggestionList with the items you want to suggest.
       * Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input
       * control.</li></ul>
       * @since 1.16.1
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSuggest(mArguments: any): sap.m.Input;

      /**
       * Fires event <code>suggestionItemSelected</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>This is the item
       * selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this
       * value will not be set.</li><li><code>selectedRow</code> of type
       * <code>sap.m.ColumnListItem</code>This is the row selected in the tabular suggestion popup
       * represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.Note:
       * The row result function to select a result value for the string is already executed at this time. To
       * pick different value for the input field or to do follow up steps after the item has been
       * selected.</li></ul>
       * @since 1.16.3
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSuggestionItemSelected(mArguments: any): sap.m.Input;

      /**
       * Fires event <code>valueHelpRequest</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>fromSuggestions</code> of type <code>boolean</code>The event parameter is
       * set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can
       * be used to determine whether the "value help" trigger or the "show all items" trigger has been
       * pressed.</li></ul>
       * @since 1.16
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireValueHelpRequest(mArguments: any): sap.m.Input;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>dateFormat</code>.Only used if type=date and no datepicker is
       * available.The data is displayed and the user input is parsed according to this format.NOTE: The
       * value property is always of the form RFC 3339 (YYYY-MM-dd).Default value is <code>YYYY-MM-dd</code>.
       * @returns Value of property <code>dateFormat</code>
      */
      getDateFormat(): string;

      /**
       * Gets current value of property <code>description</code>.The description is a text after the input
       * field, e.g. units of measurement, currencies.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>fieldWidth</code>.This property only takes effect if the
       * description property is set. It controls the distribution of space between the input field and the
       * description text. The default value is 50% leaving the other 50% for the description.Default value
       * is <code>50%</code>.
       * @returns Value of property <code>fieldWidth</code>
      */
      getFieldWidth(): any;

      /**
       * Gets current value of property <code>filterSuggests</code>.Defines whether to filter the provided
       * suggestions before showing them to the user.Default value is <code>true</code>.
       * @returns Value of property <code>filterSuggests</code>
      */
      getFilterSuggests(): boolean;

      /**
       * Gets current value of property <code>maxLength</code>.Maximum number of characters. Value '0' means
       * the feature is switched off.This parameter is not compatible with the input type
       * <code>sap.m.InputType.Number</code>.If the input type is set to <code>Number</code>, the
       * <code>maxLength</code> value is ignored.Default value is <code>0</code>.
       * @returns Value of property <code>maxLength</code>
      */
      getMaxLength(): number;

      /**
       * Gets current value of property <code>maxSuggestionWidth</code>.If set, the value of this parameter
       * will control the horizontal size of the suggestion list to display more data. This allows suggestion
       * lists to be wider than the input field if there is enough space available. By default, the
       * suggestion list is always as wide as the input field.Note: The value will be ignored if the actual
       * width of the input field is larger than the specified parameter value.
       * @since 1.21.1
       * @returns Value of property <code>maxSuggestionWidth</code>
      */
      getMaxSuggestionWidth(): any;

      /**
       * Returns a metadata object for class sap.m.Input.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showSuggestion</code>.If this is set to true, suggest event is
       * fired when user types in the input. Changing the suggestItems aggregation in suggest event listener
       * will show suggestions within a popup. When runs on phone, input will first open a dialog where the
       * input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to
       * the input.Default value is <code>false</code>.
       * @since 1.16.1
       * @returns Value of property <code>showSuggestion</code>
      */
      getShowSuggestion(): boolean;

      /**
       * Gets current value of property <code>showTableSuggestionValueHelp</code>.For tabular suggestions,
       * this flag will show/hide the button at the end of the suggestion table that triggers the event
       * "valueHelpRequest" when pressed. The default value is true.NOTE: If suggestions are not tabular or
       * no suggestions are used, the button will not be displayed and this flag is without effect.Default
       * value is <code>true</code>.
       * @since 1.22.1
       * @returns Value of property <code>showTableSuggestionValueHelp</code>
      */
      getShowTableSuggestionValueHelp(): boolean;

      /**
       * Gets current value of property <code>showValueHelp</code>.If set to true, a value help indicator
       * will be displayed inside the control. When clicked the event "valueHelpRequest" will be
       * fired.Default value is <code>false</code>.
       * @since 1.16
       * @returns Value of property <code>showValueHelp</code>
      */
      getShowValueHelp(): boolean;

      /**
       * Getter for property <code>showValueStateMessage</code>.Whether the value state message should be
       * shown. This property is already available for sap.m.Input since 1.16.0.Default value is
       * <code>true</code>
       * @since 1.16
       * @returns the value of property <code>showValueStateMessage</code>
      */
      getShowValueStateMessage(): boolean;

      /**
       * Gets current value of property <code>startSuggestion</code>.Minimum length of the entered text in
       * input before suggest event is fired. The default value is 1 which means the suggest event is fired
       * after user types in input. When it's set to 0, suggest event is fired when input with no text gets
       * focus.Default value is <code>1</code>.
       * @since 1.21.2
       * @returns Value of property <code>startSuggestion</code>
      */
      getStartSuggestion(): number;

      /**
       * Gets content of aggregation <code>suggestionColumns</code>.The suggestionColumns and suggestionRows
       * are for tabular input suggestions. This aggregation allows for binding the table columns; for more
       * details see the aggregation "suggestionRows".
       * @since 1.21.1
      */
      getSuggestionColumns(): sap.m.Column[];

      /**
       * Gets content of aggregation <code>suggestionItems</code>.SuggestItems are the items which will be
       * shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem,
       * insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after
       * input is rendered will open/close the suggestion popup. o display suggestions with two text values,
       * it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected
       * ListItem, only the first value is returned to the input field.
       * @since 1.16.1
      */
      getSuggestionItems(): sap.ui.core.Item[];

      /**
       * Gets content of aggregation <code>suggestionRows</code>.The suggestionColumns and suggestionRows are
       * for tabular input suggestions. This aggregation allows for binding the table cells.The items of this
       * aggregation are to be bound directly or to set in the suggest event method.Note: If this aggregation
       * is filled, the aggregation suggestionItems will be ignored.
       * @since 1.21.1
      */
      getSuggestionRows(): sap.m.ColumnListItem[];

      /**
       * Gets current value of property <code>type</code>.HTML type of the internal <code>input</code> tag
       * (e.g. Text, Number, Email, Phone).The particular effect of this property differs depending on the
       * browser and the current language settings,especially for the type Number.<br>This parameter is
       * intended to be used with touch devices that use different soft keyboard layouts depending on the
       * given input type.<br>Only the default value <code>sap.m.InputType.Text</code> may be used in
       * combination with data model formats.<code>sap.ui.model</code> defines extended formats that are
       * mostly incompatible with normal HTMLrepresentations for numbers and dates.Default value is
       * <code>Text</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.InputType;

      /**
       * Gets current value of property <code>valueHelpOnly</code>.If set to true, direct text input is
       * disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The
       * properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property
       * will have no effectDefault value is <code>false</code>.
       * @since 1.21.0
       * @returns Value of property <code>valueHelpOnly</code>
      */
      getValueHelpOnly(): boolean;

      /**
       * Gets current value of property <code>valueLiveUpdate</code>.Indicates when the value gets updated
       * with the user changes: At each keystroke (true) or first when the user presses enter or tabs out
       * (false).Default value is <code>false</code>.
       * @since 1.24
       * @returns Value of property <code>valueLiveUpdate</code>
      */
      getValueLiveUpdate(): boolean;

      /**
       * Getter for property <code>valueStateText</code>.The text which is shown in the value state message
       * popup. If not specfied a default text is shown. This property is already available for sap.m.Input
       * since 1.16.0.Default value is empty/<code>undefined</code>
       * @since 1.16
       * @returns the value of property <code>valueStateText</code>
      */
      getValueStateText(): string;

      /**
       * Returns the width of the input.
       * @returns The current width or 100% as default
      */
      getWidth(): string;

      /**
       * Checks for the provided <code>sap.m.Column</code> in the aggregation
       * <code>suggestionColumns</code>.and returns its index if found or -1 otherwise.
       * @since 1.21.1
       * @param oSuggestionColumn The suggestionColumn whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSuggestionColumn(oSuggestionColumn: sap.m.Column): number;

      /**
       * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation
       * <code>suggestionItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.16.1
       * @param oSuggestionItem The suggestionItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSuggestionItem(oSuggestionItem: sap.ui.core.Item): number;

      /**
       * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation
       * <code>suggestionRows</code>.and returns its index if found or -1 otherwise.
       * @since 1.21.1
       * @param oSuggestionRow The suggestionRow whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSuggestionRow(oSuggestionRow: sap.m.ColumnListItem): number;

      /**
       * Inserts a suggestionColumn into the aggregation <code>suggestionColumns</code>.
       * @since 1.21.1
       * @param oSuggestionColumn the suggestionColumn to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the suggestionColumn should be inserted at; for        
       *     a negative value of <code>iIndex</code>, the suggestionColumn is inserted at position 0; for a
       * value             greater than the current size of the aggregation, the suggestionColumn is inserted
       * at             the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSuggestionColumn(oSuggestionColumn: sap.m.Column, iIndex: number): sap.m.Input;

      /**
       * Inserts a suggestionItem into the aggregation <code>suggestionItems</code>.
       * @since 1.16.1
       * @param oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for          
       *   a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
       *             greater than the current size of the aggregation, the suggestionItem is inserted at     
       *        the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSuggestionItem(oSuggestionItem: sap.ui.core.Item, iIndex: number): sap.m.Input;

      /**
       * Inserts a suggestionRow into the aggregation <code>suggestionRows</code>.
       * @since 1.21.1
       * @param oSuggestionRow the suggestionRow to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the suggestionRow should be inserted at; for           
       *  a negative value of <code>iIndex</code>, the suggestionRow is inserted at position 0; for a value  
       *           greater than the current size of the aggregation, the suggestionRow is inserted at        
       *     the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSuggestionRow(oSuggestionRow: sap.m.ColumnListItem, iIndex: number): sap.m.Input;

      /**
       * Fire valueHelpRequest event on tap
       * @param oEvent undefined
      */
      ontap(oEvent: any): void;

      /**
       * Removes all the controls from the aggregation <code>suggestionColumns</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.21.1
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSuggestionColumns(): sap.m.Column[];

      /**
       * Removes all the controls from the aggregation <code>suggestionItems</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.16.1
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSuggestionItems(): sap.ui.core.Item[];

      /**
       * Removes all the controls from the aggregation <code>suggestionRows</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.21.1
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSuggestionRows(): sap.m.ColumnListItem[];

      /**
       * Removes a suggestionColumn from the aggregation <code>suggestionColumns</code>.
       * @since 1.21.1
       * @param vSuggestionColumn The suggestionColumn to remove or its index or id
       * @returns The removed suggestionColumn or <code>null</code>
      */
      removeSuggestionColumn(vSuggestionColumn: number | string | sap.m.Column): sap.m.Column;

      /**
       * Removes a suggestionItem from the aggregation <code>suggestionItems</code>.
       * @since 1.16.1
       * @param vSuggestionItem The suggestionItem to remove or its index or id
       * @returns The removed suggestionItem or <code>null</code>
      */
      removeSuggestionItem(vSuggestionItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Removes a suggestionRow from the aggregation <code>suggestionRows</code>.
       * @since 1.21.1
       * @param vSuggestionRow The suggestionRow to remove or its index or id
       * @returns The removed suggestionRow or <code>null</code>
      */
      removeSuggestionRow(vSuggestionRow: number | string | sap.m.ColumnListItem): sap.m.ColumnListItem;

      /**
       * Sets a new value for property <code>dateFormat</code>.Only used if type=date and no datepicker is
       * available.The data is displayed and the user input is parsed according to this format.NOTE: The
       * value property is always of the form RFC 3339 (YYYY-MM-dd).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>YYYY-MM-dd</code>.
       * @param sDateFormat New value for property <code>dateFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDateFormat(sDateFormat: string): sap.m.Input;

      /**
       * Sets a new value for property <code>description</code>.The description is a text after the input
       * field, e.g. units of measurement, currencies.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.Input;

      /**
       * Sets a new value for property <code>fieldWidth</code>.This property only takes effect if the
       * description property is set. It controls the distribution of space between the input field and the
       * description text. The default value is 50% leaving the other 50% for the description.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>50%</code>.
       * @param sFieldWidth New value for property <code>fieldWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFieldWidth(sFieldWidth: any): sap.m.Input;

      /**
       * Sets a custom filter function for suggestions. The default is to check whether the first item text
       * begins with the typed value. For one and two-value suggestions this callback function will operate
       * on sap.ui.core.Item types, for tabular suggestions the function will operate on sap.m.ColumnListItem
       * types.
       * @since 1.16.1
       * @param fnFilter The filter function is called when displaying suggestion items and has two input
       * parameters: the first one is the string that is currently typed in the input field and the second
       * one is the item that is being filtered. Returning true will add this item to the popup, returning
       * false will not display it.
       * @returns this pointer for chaining
      */
      setFilterFunction(fnFilter: any): sap.m.Input;

      /**
       * Sets a new value for property <code>filterSuggests</code>.Defines whether to filter the provided
       * suggestions before showing them to the user.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bFilterSuggests New value for property <code>filterSuggests</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFilterSuggests(bFilterSuggests: boolean): sap.m.Input;

      /**
       * Sets a new value for property <code>maxLength</code>.Maximum number of characters. Value '0' means
       * the feature is switched off.This parameter is not compatible with the input type
       * <code>sap.m.InputType.Number</code>.If the input type is set to <code>Number</code>, the
       * <code>maxLength</code> value is ignored.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param iMaxLength New value for property <code>maxLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLength(iMaxLength: number): sap.m.Input;

      /**
       * Sets a new value for property <code>maxSuggestionWidth</code>.If set, the value of this parameter
       * will control the horizontal size of the suggestion list to display more data. This allows suggestion
       * lists to be wider than the input field if there is enough space available. By default, the
       * suggestion list is always as wide as the input field.Note: The value will be ignored if the actual
       * width of the input field is larger than the specified parameter value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.21.1
       * @param sMaxSuggestionWidth New value for property <code>maxSuggestionWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxSuggestionWidth(sMaxSuggestionWidth: any): sap.m.Input;

      /**
       * Sets a custom result filter function for tabular suggestions to select the text that is passed to
       * the input field. Default is to check whether the first cell with a "text" property begins with the
       * typed value. For one value and two-value suggestions this callback function is not called.
       * @since 1.21.1
       * @param fnFilter The result function is called with one parameter: the sap.m.ColumnListItem that is
       * selected. The function must return a result string that will be displayed as the input field's
       * value.
       * @returns this pointer for chaining
      */
      setRowResultFunction(fnFilter: any): sap.m.Input;

      /**
       * Sets a new value for property <code>showSuggestion</code>.If this is set to true, suggest event is
       * fired when user types in the input. Changing the suggestItems aggregation in suggest event listener
       * will show suggestions within a popup. When runs on phone, input will first open a dialog where the
       * input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to
       * the input.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @since 1.16.1
       * @param bShowSuggestion New value for property <code>showSuggestion</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSuggestion(bShowSuggestion: boolean): sap.m.Input;

      /**
       * Sets a new value for property <code>showTableSuggestionValueHelp</code>.For tabular suggestions,
       * this flag will show/hide the button at the end of the suggestion table that triggers the event
       * "valueHelpRequest" when pressed. The default value is true.NOTE: If suggestions are not tabular or
       * no suggestions are used, the button will not be displayed and this flag is without effect.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @since 1.22.1
       * @param bShowTableSuggestionValueHelp New value for property
       * <code>showTableSuggestionValueHelp</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowTableSuggestionValueHelp(bShowTableSuggestionValueHelp: boolean): sap.m.Input;

      /**
       * Sets a new value for property <code>showValueHelp</code>.If set to true, a value help indicator will
       * be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>false</code>.
       * @since 1.16
       * @param bShowValueHelp New value for property <code>showValueHelp</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowValueHelp(bShowValueHelp: boolean): sap.m.Input;

      /**
       * Setter for property <code>showValueStateMessage</code>.Default value is <code>true</code>
       * @since 1.16
       * @param bShowValueStateMessage new value for property <code>showValueStateMessage</code>
       * @returns <code>this</code> to allow method chaining
      */
      setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.InputBase;

      /**
       * Sets a new value for property <code>startSuggestion</code>.Minimum length of the entered text in
       * input before suggest event is fired. The default value is 1 which means the suggest event is fired
       * after user types in input. When it's set to 0, suggest event is fired when input with no text gets
       * focus.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>1</code>.
       * @since 1.21.2
       * @param iStartSuggestion New value for property <code>startSuggestion</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStartSuggestion(iStartSuggestion: number): sap.m.Input;

      /**
       * Sets a new value for property <code>type</code>.HTML type of the internal <code>input</code> tag
       * (e.g. Text, Number, Email, Phone).The particular effect of this property differs depending on the
       * browser and the current language settings,especially for the type Number.<br>This parameter is
       * intended to be used with touch devices that use different soft keyboard layouts depending on the
       * given input type.<br>Only the default value <code>sap.m.InputType.Text</code> may be used in
       * combination with data model formats.<code>sap.ui.model</code> defines extended formats that are
       * mostly incompatible with normal HTMLrepresentations for numbers and dates.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Text</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.InputType): sap.m.Input;

      /**
       * Setter for property <code>value</code>.Default value is empty/<code>undefined</code>.
       * @param sValue New value for property <code>value</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setValue(sValue: string): sap.m.InputBase;

      /**
       * Sets a new value for property <code>valueHelpOnly</code>.If set to true, direct text input is
       * disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The
       * properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property
       * will have no effectWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @since 1.21.0
       * @param bValueHelpOnly New value for property <code>valueHelpOnly</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueHelpOnly(bValueHelpOnly: boolean): sap.m.Input;

      /**
       * Sets a new value for property <code>valueLiveUpdate</code>.Indicates when the value gets updated
       * with the user changes: At each keystroke (true) or first when the user presses enter or tabs out
       * (false).When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @since 1.24
       * @param bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueLiveUpdate(bValueLiveUpdate: boolean): sap.m.Input;

      /**
       * Setter for property <code>valueStateText</code>.Default value is empty/<code>undefined</code>
       * @since 1.16
       * @param sValueStateText new value for property <code>valueStateText</code>
       * @returns <code>this</code> to allow method chaining
      */
      setValueStateText(sValueStateText: string): sap.m.InputBase;

      /**
       * Defines the width of the input. Default value is 100%
       * @param sWidth undefined
      */
      setWidth(sWidth: string): any;

      /**
       * Unbinds aggregation <code>suggestionColumns</code> from model data.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindSuggestionColumns(): sap.m.Input;

      /**
       * Unbinds aggregation <code>suggestionRows</code> from model data.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindSuggestionRows(): sap.m.Input;
    }
    /**
     * A wrapper around the IMG tag. The image can be loaded from a remote or local server.Density related
     * image will be loaded if image with density awareness name in format
     * [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the
     * original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest
     * one.There are various size setting options available, and the images can be combined with
     * actions.From version 1.30, new image mode sap.m.ImageMode.Background is added. When this mode is
     * set, the src property is set using the css style 'background-image'. The properties
     * 'backgroundSize', 'backgroundPosition', 'backgroundRepeat' have effect only when image is in
     * sap.m.ImageMode.Background mode. In order to make the high density image correctly displayed, the
     * 'backgroundSize' should be set to the dimension of the normal density version.
     * @resource sap/m/Image.js
    */
    export class Image extends sap.ui.core.Control {


      /**
       * Constructor for a new Image.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>error</code> event of this
       * <code>sap.m.Image</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Image</code> itself.Event is fired when the image resource can't be loaded. If
       * densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
       * @since 1.36.2
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Image</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachError(oData: any, fnFunction: any, oListener?: any): sap.m.Image;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>load</code> event of this
       * <code>sap.m.Image</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Image</code> itself.Event is fired when the image resource is loaded.
       * @since 1.36.2
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Image</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLoad(oData: any, fnFunction: any, oListener?: any): sap.m.Image;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Image</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Image</code> itself.Event is fired when the user clicks on the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Image</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Image;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tap</code> event of this
       * <code>sap.m.Image</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Image</code> itself.Event is fired when the user clicks on the control. (This event is
       * deprecated, use the press event instead)
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Image</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTap(oData: any, fnFunction: any, oListener?: any): sap.m.Image;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>error</code> event of this
       * <code>sap.m.Image</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.36.2
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachError(fnFunction: any, oListener: any): sap.m.Image;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>load</code> event of this
       * <code>sap.m.Image</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @since 1.36.2
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLoad(fnFunction: any, oListener: any): sap.m.Image;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Image</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Image;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tap</code> event of this
       * <code>sap.m.Image</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTap(fnFunction: any, oListener: any): sap.m.Image;


      /**
       * Fires event <code>error</code> to attached listeners.
       * @since 1.36.2
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireError(mArguments: any): sap.m.Image;

      /**
       * Fires event <code>load</code> to attached listeners.
       * @since 1.36.2
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLoad(mArguments: any): sap.m.Image;

      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.Image;

      /**
       * Fires event <code>tap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTap(mArguments: any): sap.m.Image;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>activeSrc</code>.The source property which is used when the
       * image is pressed.Default value is <code></code>.
       * @returns Value of property <code>activeSrc</code>
      */
      getActiveSrc(): any;

      /**
       * Gets current value of property <code>alt</code>.The alternative text that is displayed in case the
       * Image is not available, or cannot be displayed.If the image is set to decorative this property is
       * ignored.
       * @returns Value of property <code>alt</code>
      */
      getAlt(): string;

      /**
       * Gets current value of property <code>backgroundPosition</code>.Defines the position of the image in
       * sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style
       * 'background-position'. This property takes effect only when the 'mode' property is set to
       * sap.m.ImageMode.Background.Default value is <code>initial</code>.
       * @since 1.30.0
       * @returns Value of property <code>backgroundPosition</code>
      */
      getBackgroundPosition(): string;

      /**
       * Gets current value of property <code>backgroundRepeat</code>.Defines whether the source image is
       * repeated when the output DOM element is bigger than the source. This property is set on the output
       * DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode'
       * property is set to sap.m.ImageMode.Background.Default value is <code>no-repeat</code>.
       * @since 1.30.0
       * @returns Value of property <code>backgroundRepeat</code>
      */
      getBackgroundRepeat(): string;

      /**
       * Gets current value of property <code>backgroundSize</code>.Defines the size of the image in
       * sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style
       * 'background-size'. This property takes effect only when the 'mode' property is set to
       * sap.m.ImageMode.Background.Default value is <code>cover</code>.
       * @since 1.30.0
       * @returns Value of property <code>backgroundSize</code>
      */
      getBackgroundSize(): string;

      /**
       * Gets current value of property <code>decorative</code>.A decorative image is included for design
       * reasons. Accessibility tools will ignore decorative images.Note: If the Image has an image map
       * (useMap is set), this property will be overridden (the image will not be rendered as decorative).A
       * decorative image has no ALT attribute, so the Alt property is ignored if the image is
       * decorative.Default value is <code>true</code>.
       * @returns Value of property <code>decorative</code>
      */
      getDecorative(): boolean;

      /**
       * Gets current value of property <code>densityAware</code>.If this is set to false, the src image will
       * be loaded directly without attempting to fetch the density perfect image for high density device.By
       * default, this is set to true but then one or more requests are sent trying to get the density
       * perfect version of image if this version of image doesn't exist on the server.If bandwidth is the
       * key for the application, set this value to false.Default value is <code>true</code>.
       * @returns Value of property <code>densityAware</code>
      */
      getDensityAware(): boolean;

      /**
       * Gets current value of property <code>height</code>.When the empty value is kept, the original size
       * is not changed. It is also possible to make settings for width or height only, the original ratio
       * between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this
       * property always needs to be set. Otherwise the output DOM element has a 0 size.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Returns a metadata object for class sap.m.Image.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mode</code>.Defines how the src and the activeSrc is output to
       * the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc)
       * is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src
       * (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a
       * 'span' tag instead of an 'img' tag.Default value is <code>Image</code>.
       * @since 1.30.0
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.ImageMode;

      /**
       * Gets current value of property <code>src</code>.Relative or absolute path to URL where the image
       * file is stored. The path will be adapted to the density aware format according to the density of the
       * device following the convention that [imageName]@[densityValue].[extension]
       * @returns Value of property <code>src</code>
      */
      getSrc(): any;

      /**
       * Gets current value of property <code>useMap</code>.The name of the image map that defines the
       * clickable areas
       * @returns Value of property <code>useMap</code>
      */
      getUseMap(): string;

      /**
       * Gets current value of property <code>width</code>.When the empty value is kept, the original size is
       * not changed. It is also possible to make settings for width or height only, the original ratio
       * between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this
       * property always needs to be set. Otherwise the output DOM element has a 0 size.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
       * @param sActiveSrc undefined
       * @returns <code>this</code> pointer for chaining
      */
      setActiveSrc(sActiveSrc: any): sap.m.Image;

      /**
       * Sets a new value for property <code>alt</code>.The alternative text that is displayed in case the
       * Image is not available, or cannot be displayed.If the image is set to decorative this property is
       * ignored.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sAlt New value for property <code>alt</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAlt(sAlt: string): sap.m.Image;

      /**
       * Sets a new value for property <code>backgroundPosition</code>.Defines the position of the image in
       * sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style
       * 'background-position'. This property takes effect only when the 'mode' property is set to
       * sap.m.ImageMode.Background.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>initial</code>.
       * @since 1.30.0
       * @param sBackgroundPosition New value for property <code>backgroundPosition</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundPosition(sBackgroundPosition: string): sap.m.Image;

      /**
       * Sets a new value for property <code>backgroundRepeat</code>.Defines whether the source image is
       * repeated when the output DOM element is bigger than the source. This property is set on the output
       * DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode'
       * property is set to sap.m.ImageMode.Background.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>no-repeat</code>.
       * @since 1.30.0
       * @param sBackgroundRepeat New value for property <code>backgroundRepeat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundRepeat(sBackgroundRepeat: string): sap.m.Image;

      /**
       * Sets a new value for property <code>backgroundSize</code>.Defines the size of the image in
       * sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style
       * 'background-size'. This property takes effect only when the 'mode' property is set to
       * sap.m.ImageMode.Background.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>cover</code>.
       * @since 1.30.0
       * @param sBackgroundSize New value for property <code>backgroundSize</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundSize(sBackgroundSize: string): sap.m.Image;

      /**
       * Sets a new value for property <code>decorative</code>.A decorative image is included for design
       * reasons. Accessibility tools will ignore decorative images.Note: If the Image has an image map
       * (useMap is set), this property will be overridden (the image will not be rendered as decorative).A
       * decorative image has no ALT attribute, so the Alt property is ignored if the image is
       * decorative.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bDecorative New value for property <code>decorative</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDecorative(bDecorative: boolean): sap.m.Image;

      /**
       * Sets a new value for property <code>densityAware</code>.If this is set to false, the src image will
       * be loaded directly without attempting to fetch the density perfect image for high density device.By
       * default, this is set to true but then one or more requests are sent trying to get the density
       * perfect version of image if this version of image doesn't exist on the server.If bandwidth is the
       * key for the application, set this value to false.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bDensityAware New value for property <code>densityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDensityAware(bDensityAware: boolean): sap.m.Image;

      /**
       * Sets a new value for property <code>height</code>.When the empty value is kept, the original size is
       * not changed. It is also possible to make settings for width or height only, the original ratio
       * between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this
       * property always needs to be set. Otherwise the output DOM element has a 0 size.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.Image;

      /**
       * Sets a new value for property <code>mode</code>.Defines how the src and the activeSrc is output to
       * the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc)
       * is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src
       * (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a
       * 'span' tag instead of an 'img' tag.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Image</code>.
       * @since 1.30.0
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.ImageMode): sap.m.Image;

      /**
       * This overrides the default setter of the src property and update the dom node.
       * @param sSrc undefined
      */
      setSrc(sSrc: any): void;

      /**
       * Sets a new value for property <code>useMap</code>.The name of the image map that defines the
       * clickable areasWhen called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sUseMap New value for property <code>useMap</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUseMap(sUseMap: string): sap.m.Image;

      /**
       * Sets a new value for property <code>width</code>.When the empty value is kept, the original size is
       * not changed. It is also possible to make settings for width or height only, the original ratio
       * between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this
       * property always needs to be set. Otherwise the output DOM element has a 0 size.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Image;
    }
    /**
     * The Title control represents a single line of text with explicit header / title semantics.
     * @resource sap/m/Title.js
    */
    export class Title extends sap.ui.core.Control {


      /**
       * Constructor for a new Title control.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>level</code>.Defines the semantic level of the title.This
       * information is e.g. used by assistive technologies like screenreaders to create a hierarchical site
       * map for faster navigation.Depending on this setting either a HTML h1-h6 element is used or when
       * using level <code>Auto</code> no explicit level information is written (HTML5 header
       * element).Default value is <code>Auto</code>.
       * @returns Value of property <code>level</code>
      */
      getLevel(): sap.ui.core.TitleLevel;

      /**
       * Returns a metadata object for class sap.m.Title.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>text</code>.Defines the text which should be displayed as a
       * title.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Defines the alignment of the text within the
       * title. <b>Note:</b> This property only has an effect if the overall width of the title control
       * islarger than the displayed text.Default value is <code>Initial</code>.
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * ID of the element which is the current target of the association <code>title</code>, or
       * <code>null</code>.
      */
      getTitle(): any;

      /**
       * Gets current value of property <code>titleStyle</code>.Defines the style of the title.When using the
       * <code>Auto</code> styling, the appearance of the title depends on the current position of the title
       * and the defined level.This automatism can be overridden by setting a different style explicitly.The
       * actual appearance of the title and the different styles always depends on the theme being
       * used.Default value is <code>Auto</code>.
       * @returns Value of property <code>titleStyle</code>
      */
      getTitleStyle(): sap.ui.core.TitleLevel;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the title.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>level</code>.Defines the semantic level of the title.This
       * information is e.g. used by assistive technologies like screenreaders to create a hierarchical site
       * map for faster navigation.Depending on this setting either a HTML h1-h6 element is used or when
       * using level <code>Auto</code> no explicit level information is written (HTML5 header element).When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Auto</code>.
       * @param sLevel New value for property <code>level</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLevel(sLevel: sap.ui.core.TitleLevel): sap.m.Title;

      /**
       * Sets a new value for property <code>text</code>.Defines the text which should be displayed as a
       * title.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.Title;

      /**
       * Sets a new value for property <code>textAlign</code>.Defines the alignment of the text within the
       * title. <b>Note:</b> This property only has an effect if the overall width of the title control
       * islarger than the displayed text.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Initial</code>.
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Title;

      /**
       * Sets the associated <code>title</code>.
       * @param oTitle ID of an element which becomes the new target of this title association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(oTitle: any | sap.ui.core.Title): sap.m.Title;

      /**
       * Sets a new value for property <code>titleStyle</code>.Defines the style of the title.When using the
       * <code>Auto</code> styling, the appearance of the title depends on the current position of the title
       * and the defined level.This automatism can be overridden by setting a different style explicitly.The
       * actual appearance of the title and the different styles always depends on the theme being used.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Auto</code>.
       * @param sTitleStyle New value for property <code>titleStyle</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleStyle(sTitleStyle: sap.ui.core.TitleLevel): sap.m.Title;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the title.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Title;
    }
    /**
     * The Shell control can be used as root element of applications. It can contain an App or a
     * <code>SplitApp</code> control.The Shell provides some overarching functionality for the overall
     * application and takes care of visual adaptation, such as a frame around the App, on desktop browser
     * platforms.
     * @resource sap/m/Shell.js
    */
    export class Shell extends sap.ui.core.Control {


      /**
       * Constructor for a new Shell.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>logout</code> event of this
       * <code>sap.m.Shell</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Shell</code> itself.Fires when the user presses the logout button/link.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Shell</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLogout(oData: any, fnFunction: any, oListener?: any): sap.m.Shell;

      /**
       * Destroys the app in the aggregation <code>app</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyApp(): sap.m.Shell;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>logout</code> event of this
       * <code>sap.m.Shell</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLogout(fnFunction: any, oListener: any): sap.m.Shell;


      /**
       * Fires event <code>logout</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLogout(mArguments: any): sap.m.Shell;

      /**
       * Gets content of aggregation <code>app</code>.A Shell contains an App or a SplitApp (they may be
       * wrapped in a View). Other control types are not allowed.
      */
      getApp(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>appWidthLimited</code>.Determines whether the width of the
       * content (the aggregated App) should be limited or extended to the full screen width.Default value is
       * <code>true</code>.
       * @returns Value of property <code>appWidthLimited</code>
      */
      getAppWidthLimited(): boolean;

      /**
       * Gets current value of property <code>backgroundColor</code>.Defines the background color of the
       * Shell. If set, this color will override the default background defined by the theme. This should
       * only be set when really required.Any configured background image will be placed above this colored
       * background.Use the backgroundRepeat property to define whether this image should be stretched to
       * cover the complete Shell or whether it should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundColor</code>
      */
      getBackgroundColor(): any;

      /**
       * Gets current value of property <code>backgroundImage</code>.Defines the background image of the
       * Shell. If set, this image will override the default background defined by the theme. This should
       * only be set when really required.This background image will be placed above any color set for the
       * background.Use the backgroundRepeat property to define whether this image should be stretched to
       * cover the complete Shell or whether it should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundImage</code>
      */
      getBackgroundImage(): any;

      /**
       * Gets current value of property <code>backgroundOpacity</code>.Defines the opacity of the background
       * image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).This can be used to
       * improve readability of the Shell content by making the background image partly transparent.Default
       * value is <code>1</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundOpacity</code>
      */
      getBackgroundOpacity(): number;

      /**
       * Gets current value of property <code>backgroundRepeat</code>.Determines whether the background image
       * (if configured) should be proportionally stretched to cover the whole Shell (false, default) or
       * whether it should be tiled (true).Default value is <code>false</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundRepeat</code>
      */
      getBackgroundRepeat(): boolean;

      /**
       * Gets current value of property <code>headerRightText</code>.Defines texts, such as the name of the
       * logged-in user, which should be displayed on the right side of the header (if there is enough space
       * to display the header at all - this only happens on very tall screens (1568px height), otherwise, it
       * is always hidden).
       * @returns Value of property <code>headerRightText</code>
      */
      getHeaderRightText(): string;

      /**
       * Gets current value of property <code>homeIcon</code>.Sets the icon used for the mobile device home
       * screen and the icon to be used for bookmarks by desktop browsers.This property should be only set
       * once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to
       * different behavior depending on the browser.Different image sizes for device home screen need to be
       * given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file
       * formats may not work in all browsers).The <code>precomposed</code> flag defines whether there is
       * already a glow effect contained in the home screen images (or whether iOS should add such an
       * effect). The given structure could look like
       * con_72x72.png','tablet@2':'tablet-retina_144x144.png','precomposed':true,'favicon':'favicon.ico'}See
       * jQuery.sap.setIcons() for full documentation.
       * @returns Value of property <code>homeIcon</code>
      */
      getHomeIcon(): any;

      /**
       * Gets current value of property <code>logo</code>.Defines the logo to be displayed next to the App
       * when the screen is sufficiently large.
       * @returns Value of property <code>logo</code>
      */
      getLogo(): any;

      /**
       * Returns a metadata object for class sap.m.Shell.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showLogout</code>.Determines whether the Logout button should
       * be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is
       * always hidden.Default value is <code>true</code>.
       * @returns Value of property <code>showLogout</code>
      */
      getShowLogout(): boolean;

      /**
       * Gets current value of property <code>title</code>.Defines the application title, which may or may
       * not be displayed outside the actual application, depending on the available screen size.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Sets the aggregated <code>app</code>.
       * @param oApp The app to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setApp(oApp: sap.ui.core.Control): sap.m.Shell;

      /**
       * Sets a new value for property <code>appWidthLimited</code>.Determines whether the width of the
       * content (the aggregated App) should be limited or extended to the full screen width.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bAppWidthLimited New value for property <code>appWidthLimited</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAppWidthLimited(bAppWidthLimited: boolean): sap.m.Shell;

      /**
       * Sets a new value for property <code>backgroundColor</code>.Defines the background color of the
       * Shell. If set, this color will override the default background defined by the theme. This should
       * only be set when really required.Any configured background image will be placed above this colored
       * background.Use the backgroundRepeat property to define whether this image should be stretched to
       * cover the complete Shell or whether it should be tiled.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundColor New value for property <code>backgroundColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundColor(sBackgroundColor: any): sap.m.Shell;

      /**
       * Sets a new value for property <code>backgroundImage</code>.Defines the background image of the
       * Shell. If set, this image will override the default background defined by the theme. This should
       * only be set when really required.This background image will be placed above any color set for the
       * background.Use the backgroundRepeat property to define whether this image should be stretched to
       * cover the complete Shell or whether it should be tiled.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundImage New value for property <code>backgroundImage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundImage(sBackgroundImage: any): sap.m.Shell;

      /**
       * Sets a new value for property <code>backgroundOpacity</code>.Defines the opacity of the background
       * image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).This can be used to
       * improve readability of the Shell content by making the background image partly transparent.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>1</code>.
       * @since 1.11.2
       * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundOpacity(fBackgroundOpacity: number): sap.m.Shell;

      /**
       * Sets a new value for property <code>backgroundRepeat</code>.Determines whether the background image
       * (if configured) should be proportionally stretched to cover the whole Shell (false, default) or
       * whether it should be tiled (true).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.11.2
       * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.Shell;

      /**
       * Sets a new value for property <code>headerRightText</code>.Defines texts, such as the name of the
       * logged-in user, which should be displayed on the right side of the header (if there is enough space
       * to display the header at all - this only happens on very tall screens (1568px height), otherwise, it
       * is always hidden).When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sHeaderRightText New value for property <code>headerRightText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderRightText(sHeaderRightText: string): sap.m.Shell;

      /**
       * Sets a new value for property <code>homeIcon</code>.Sets the icon used for the mobile device home
       * screen and the icon to be used for bookmarks by desktop browsers.This property should be only set
       * once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to
       * different behavior depending on the browser.Different image sizes for device home screen need to be
       * given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file
       * formats may not work in all browsers).The <code>precomposed</code> flag defines whether there is
       * already a glow effect contained in the home screen images (or whether iOS should add such an
       * effect). The given structure could look like
       * con_72x72.png','tablet@2':'tablet-retina_144x144.png','precomposed':true,'favicon':'favicon.ico'}See
       * jQuery.sap.setIcons() for full documentation.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oHomeIcon New value for property <code>homeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHomeIcon(oHomeIcon: any): sap.m.Shell;

      /**
       * Sets a new value for property <code>logo</code>.Defines the logo to be displayed next to the App
       * when the screen is sufficiently large.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sLogo New value for property <code>logo</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLogo(sLogo: any): sap.m.Shell;

      /**
       * Sets a new value for property <code>showLogout</code>.Determines whether the Logout button should be
       * displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is
       * always hidden.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bShowLogout New value for property <code>showLogout</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowLogout(bShowLogout: boolean): sap.m.Shell;

      /**
       * Sets a new value for property <code>title</code>.Defines the application title, which may or may not
       * be displayed outside the actual application, depending on the available screen size.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.Shell;
    }
    /**
     * The <code>sap.m.Column</code> allows to define column specific properties that will be applied when
     * rendering the <code>sap.m.Table</code>.
     * @resource sap/m/Column.js
    */
    export class Column extends sap.ui.core.Element {


      /**
       * Constructor for a new Column.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);

      /**
       * Constructor for a new Column.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(mSettings?: any);

      /**
       * Apply text alignment of the Column to Text/Label/Link...TODO: This is so ugly to check content
       * functionsinstead we should document how to use our controlsto inherit text-alignment and we should
       * add a newsap.ui.core.TextAlign type called "Inherit"
       * @param oControl List control
       * @param sAlign TextAlign enumeration
       * @returns oControl
      */
      applyAlignTo(oControl: sap.ui.core.Control, sAlign?: String): sap.ui.core.Control;

      /**
       * Clears the last value of the column if mergeDuplicates property is true
       * @since 1.20.4
      */
      clearLastValue(): sap.m.Column;

      /**
       * Destroys the footer in the aggregation <code>footer</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFooter(): sap.m.Column;

      /**
       * Destroys the header in the aggregation <code>header</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeader(): sap.m.Column;


      /**
       * Returns CSS alignment according to column hAlign setting or given parameterfor Begin/End values
       * checks the locale settings
       * @param sAlign TextAlign enumeration
       * @returns left|center|right
      */
      getCssAlign(sAlign: String): String;

      /**
       * Gets current value of property <code>demandPopin</code>.According to your minScreenWidth settings,
       * the column can be hidden in different screen sizes.Setting this property to true, shows this column
       * as pop-in instead of hiding it.Default value is <code>false</code>.
       * @returns Value of property <code>demandPopin</code>
      */
      getDemandPopin(): boolean;

      /**
       * Gets content of aggregation <code>footer</code>.Control to be displayed in the column footer.
      */
      getFooter(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>hAlign</code>.Horizontal alignment of the column content.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".NOTE: Control with a
       * "textAlign" property inherits the horizontal alignment.Default value is <code>Begin</code>.
       * @returns Value of property <code>hAlign</code>
      */
      getHAlign(): sap.ui.core.TextAlign;

      /**
       * Gets content of aggregation <code>header</code>.Control to be displayed in the column header.
      */
      getHeader(): sap.ui.core.Control;

      /**
       * Gets the initial order of the column
       * @returns initial order of the column
      */
      getInitialOrder(): number;

      /**
       * Gets the last value of the column
       * @since 1.16
      */
      getLastValue(): void;

      /**
       * Gets current value of property <code>mergeDuplicates</code>.Set "true" to merge repeating
       * cells(duplicates) into one cell block.Please see "mergeFunctionName" property to customize this
       * property.Note: This feature must not be used together with two-way binding. This property is ignored
       * if a column is shown in the pop-in.Default value is <code>false</code>.
       * @since 1.16
       * @returns Value of property <code>mergeDuplicates</code>
      */
      getMergeDuplicates(): boolean;

      /**
       * Gets current value of property <code>mergeFunctionName</code>.Defines the value
       * getter(serialization) function if "mergeDuplicates" property is set "true"Control itself uses this
       * function to compare values of two repeating cells.Default value "getText" is suitable for Label and
       * Text control.e.g. For "Icon" control "getSrc" can be used.Note: You can pass one string parameter to
       * given function after "#" sign. e.g. "data#myparameter"Default value is <code>getText</code>.
       * @since 1.16
       * @returns Value of property <code>mergeFunctionName</code>
      */
      getMergeFunctionName(): string;

      /**
       * Returns a metadata object for class sap.m.Column.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minScreenWidth</code>.By default column is always shown. If you
       * set this property, control checks the minimum width of the screen to show or hide this column.As you
       * can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize
       * enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large",
       * ....).sap.m.Column.MediaQuery1->Range1 = 199This property can be used for responsive design. e.g:
       * "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in
       * iPhone.Please also see "demandPopin" property
       * @returns Value of property <code>minScreenWidth</code>
      */
      getMinScreenWidth(): string;

      /**
       * Gets the order of the column
       * @returns nOrder order of the column
      */
      getOrder(): number;

      /**
       * Gets current value of property <code>popinDisplay</code>.Defines enumerated display options for the
       * pop-in.Default value is <code>Block</code>.
       * @since 1.13.2
       * @returns Value of property <code>popinDisplay</code>
      */
      getPopinDisplay(): sap.m.PopinDisplay;

      /**
       * Gets current value of property <code>popinHAlign</code>.Horizontal alignment of the pop-in content.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".NOTE: Controls with a
       * text align do not inherit the horizontal alignment.Default value is <code>Begin</code>.
       * @returns Value of property <code>popinHAlign</code>
      */
      getPopinHAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>styleClass</code>.CSS class name for column contents(header,
       * cells and footer of column). This property can be used for different column styling. If column is
       * shown as pop-in then this class name is applied to related pop-in row.
       * @returns Value of property <code>styleClass</code>
      */
      getStyleClass(): string;

      /**
       * Gets current value of property <code>vAlign</code>.Vertical alignment of the cells in a column.
       * Possible values are "Inherit", "Top", "Middle", "Bottom"This property does not affect the vertical
       * alignment of header and footer.Default value is <code>Inherit</code>.
       * @returns Value of property <code>vAlign</code>
      */
      getVAlign(): sap.ui.core.VerticalAlign;

      /**
       * Gets current value of property <code>visible</code>.Specifies whether or not the column is visible.
       * Invisible columns are not rendered.Default value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the column. If you leave it
       * empty then this column covers the remaining space.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Determines whether the column will be hidden via media queries or not
      */
      isHidden(): void;

      /**
       * Determines whether the column will be shown as pop-in or not
      */
      isPopin(): void;

      /**
       * Gets called from the Table when the all items are removed
       * @since 1.16
      */
      onItemsRemoved(): void;

      /**
       * Sets a new value for property <code>demandPopin</code>.According to your minScreenWidth settings,
       * the column can be hidden in different screen sizes.Setting this property to true, shows this column
       * as pop-in instead of hiding it.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bDemandPopin New value for property <code>demandPopin</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDemandPopin(bDemandPopin: boolean): sap.m.Column;

      /**
       * Display or hide the column from given tableThis does not set the visibility property of the column
       * @param oTableDomRef Table DOM reference
       * @param bDisplay whether visible or not
      */
      setDisplay(oTableDomRef: any, bDisplay?: boolean): void;

      /**
       * Display or hide the column from given table via checking media query changes
       * @param oTableDomRef Table DOM reference
      */
      setDisplayViaMedia(oTableDomRef: any): void;

      /**
       * Sets the aggregated <code>footer</code>.
       * @param oFooter The footer to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooter(oFooter: sap.ui.core.Control): sap.m.Column;

      /**
       * Sets a new value for property <code>hAlign</code>.Horizontal alignment of the column content.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".NOTE: Control with a
       * "textAlign" property inherits the horizontal alignment.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Begin</code>.
       * @param sHAlign New value for property <code>hAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHAlign(sHAlign: sap.ui.core.TextAlign): sap.m.Column;

      /**
       * Sets the aggregated <code>header</code>.
       * @param oHeader The header to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeader(oHeader: sap.ui.core.Control): sap.m.Column;

      /**
       * Sets the visible column indexNegative index values can be used to clear
       * @param nIndex index of the visible column
      */
      setIndex(nIndex: number): void;

      /**
       * Sets the initial order of the column
       * @param nOrder initial order of the column
      */
      setInitialOrder(nOrder: number): void;

      /**
       * Sets the last value of the column if mergeDuplicates property is true
       * @since 1.16
       * @param value Any Value
      */
      setLastValue(value: any): sap.m.Column;

      /**
       * Sets a new value for property <code>mergeDuplicates</code>.Set "true" to merge repeating
       * cells(duplicates) into one cell block.Please see "mergeFunctionName" property to customize this
       * property.Note: This feature must not be used together with two-way binding. This property is ignored
       * if a column is shown in the pop-in.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.16
       * @param bMergeDuplicates New value for property <code>mergeDuplicates</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMergeDuplicates(bMergeDuplicates: boolean): sap.m.Column;

      /**
       * Sets a new value for property <code>mergeFunctionName</code>.Defines the value getter(serialization)
       * function if "mergeDuplicates" property is set "true"Control itself uses this function to compare
       * values of two repeating cells.Default value "getText" is suitable for Label and Text control.e.g.
       * For "Icon" control "getSrc" can be used.Note: You can pass one string parameter to given function
       * after "#" sign. e.g. "data#myparameter"When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>getText</code>.
       * @since 1.16
       * @param sMergeFunctionName New value for property <code>mergeFunctionName</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMergeFunctionName(sMergeFunctionName: string): sap.m.Column;

      /**
       * Sets a new value for property <code>minScreenWidth</code>.By default column is always shown. If you
       * set this property, control checks the minimum width of the screen to show or hide this column.As you
       * can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize
       * enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large",
       * ....).sap.m.Column.MediaQuery1->Range1 = 199This property can be used for responsive design. e.g:
       * "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in
       * iPhone.Please also see "demandPopin" propertyWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sMinScreenWidth New value for property <code>minScreenWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinScreenWidth(sMinScreenWidth: string): sap.m.Column;

      /**
       * Sets the order of the columnDoes not do the visual effectTable should be invalidate to re-render
       * @param nOrder order of the column
      */
      setOrder(nOrder: number): void;

      /**
       * Sets a new value for property <code>popinDisplay</code>.Defines enumerated display options for the
       * pop-in.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Block</code>.
       * @since 1.13.2
       * @param sPopinDisplay New value for property <code>popinDisplay</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPopinDisplay(sPopinDisplay: sap.m.PopinDisplay): sap.m.Column;

      /**
       * Sets a new value for property <code>popinHAlign</code>.Horizontal alignment of the pop-in content.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".NOTE: Controls with a
       * text align do not inherit the horizontal alignment.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Begin</code>.
       * @param sPopinHAlign New value for property <code>popinHAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPopinHAlign(sPopinHAlign: sap.ui.core.TextAlign): sap.m.Column;

      /**
       * Sets a new value for property <code>styleClass</code>.CSS class name for column contents(header,
       * cells and footer of column). This property can be used for different column styling. If column is
       * shown as pop-in then this class name is applied to related pop-in row.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sStyleClass New value for property <code>styleClass</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStyleClass(sStyleClass: string): sap.m.Column;

      /**
       * Sets a new value for property <code>vAlign</code>.Vertical alignment of the cells in a column.
       * Possible values are "Inherit", "Top", "Middle", "Bottom"This property does not affect the vertical
       * alignment of header and footer.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Inherit</code>.
       * @param sVAlign New value for property <code>vAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVAlign(sVAlign: sap.ui.core.VerticalAlign): sap.m.Column;

      /**
       * Sets a new value for property <code>visible</code>.Specifies whether or not the column is visible.
       * Invisible columns are not rendered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.Column;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the column. If you leave it
       * empty then this column covers the remaining space.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Column;
    }
    /**
     * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
     * @resource sap/m/Button.js
    */
    export class Button extends sap.ui.core.Control {


      /**
       * Constructor for a new Button.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);

      /**
       * Constructor for a new Button.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(mSettings?: any);

      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Button;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Button;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Button</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Button</code> itself.Event is fired when the user clicks on the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Button</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Button;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tap</code> event of this
       * <code>sap.m.Button</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Button</code> itself.Event is fired when the user taps the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Button</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTap(oData: any, fnFunction: any, oListener?: any): sap.m.Button;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Button</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Button;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tap</code> event of this
       * <code>sap.m.Button</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTap(fnFunction: any, oListener: any): sap.m.Button;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.Button;

      /**
       * Fires event <code>tap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTap(mArguments: any): sap.m.Button;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>activeIcon</code>.The source property of an alternative icon
       * for the active (depressed) state of the button.Both active and default icon properties should be
       * defined and have the same type: image or icon font.If the <code>icon</code> property is not set or
       * has a different type, the active icon is not displayed.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>enabled</code>.Boolean property to enable the control (default
       * is true). Buttons that are disabled have other colors than enabled ones, depending on custom
       * settingsDefault value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>icon</code>.Icon to be displayed as graphical element within
       * the button. This can be an image or an icon from the icon font.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If only one version of image is provided, set this
       * value to false to avoid the attempt of fetching density perfect image.Default value is
       * <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>iconFirst</code>.If set to true (default), the display sequence
       * is 1. icon 2. control textDefault value is <code>true</code>.
       * @returns Value of property <code>iconFirst</code>
      */
      getIconFirst(): boolean;

      /**
       * Returns a metadata object for class sap.m.Button.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Defines to which DOM reference the Popup should be docked
       * @returns the DOM reference that Popup should dock to
      */
      getPopupAnchorDomRef(): any;

      /**
       * Gets current value of property <code>text</code>.Button text
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>type</code>.Type of a button (e.g. Default, Accept, Reject,
       * Back, etc.)Default value is <code>Default</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.ButtonType;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the button.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>activeIcon</code>.The source property of an alternative icon for
       * the active (depressed) state of the button.Both active and default icon properties should be defined
       * and have the same type: image or icon font.If the <code>icon</code> property is not set or has a
       * different type, the active icon is not displayed.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.Button;

      /**
       * Sets a new value for property <code>enabled</code>.Boolean property to enable the control (default
       * is true). Buttons that are disabled have other colors than enabled ones, depending on custom
       * settingsWhen called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Button;

      /**
       * Property setter for the icon
       * @param sIcon new value of the Icon property
       * @returns this to allow method chaining
      */
      setIcon(sIcon: any): sap.m.Button;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If only one version of image is provided, set this value to false
       * to avoid the attempt of fetching density perfect image.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.Button;

      /**
       * Sets a new value for property <code>iconFirst</code>.If set to true (default), the display sequence
       * is 1. icon 2. control textWhen called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>true</code>.
       * @param bIconFirst New value for property <code>iconFirst</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconFirst(bIconFirst: boolean): sap.m.Button;

      /**
       * Property setter for the text
       * @param sText new value of the Text attribute
       * @returns this to allow method chaining
      */
      setText(sText: string): sap.m.Button;

      /**
       * Sets a new value for property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Button;

      /**
       * Sets a new value for property <code>type</code>.Type of a button (e.g. Default, Accept, Reject,
       * Back, etc.)When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Default</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.ButtonType): sap.m.Button;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the button.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Button;
    }
    /**
     * The Dialog control is used to interrupt the current processing of an application to prompt the user
     * for information or a response.
     * @resource sap/m/Dialog.js
    */
    export class Dialog extends sap.ui.core.Control {


      /**
       * Constructor for a new Dialog.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Returns the custom header instance when the customHeader aggregation is set. Otherwise it returns
       * the internal managedheader instance. This method can be called within composite controls which use
       * sap.m.Dialog inside.
      */
      _getAnyHeader(): void;

      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Dialog;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Dialog;

      /**
       * Adds some button to the aggregation <code>buttons</code>.
       * @since 1.21.1
       * @param oButton the button to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addButton(oButton: sap.m.Button): sap.m.Dialog;

      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.Dialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.Dialog</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Dialog</code> itself.This event will be fired after the dialog is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Dialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.Dialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.Dialog</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Dialog</code> itself.This event will be fired after the dialog is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Dialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.Dialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.Dialog</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Dialog</code> itself.This event will be fired before the dialog is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Dialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.Dialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.Dialog</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Dialog</code> itself.This event will be fired before the dialog is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Dialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.Dialog;

      /**
       * Close the dialog.
      */
      close(): void;

      /**
       * Destroys the beginButton in the aggregation <code>beginButton</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyBeginButton(): sap.m.Dialog;

      /**
       * Destroys all the buttons in the aggregation <code>buttons</code>.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyButtons(): sap.m.Dialog;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.Dialog;

      /**
       * Destroys the customHeader in the aggregation <code>customHeader</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomHeader(): sap.m.Dialog;

      /**
       * Destroys the endButton in the aggregation <code>endButton</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyEndButton(): sap.m.Dialog;

      /**
       * Destroys the subHeader in the aggregation <code>subHeader</code>.
       * @since 1.12.2
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySubHeader(): sap.m.Dialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.Dialog</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.Dialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.Dialog</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.Dialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.Dialog</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.Dialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.Dialog</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.Dialog;


      /**
       * Fires event <code>afterClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>origin</code> of type <code>sap.m.Button</code>This indicates the trigger
       * of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that
       * closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.Dialog;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.Dialog;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>origin</code> of type <code>sap.m.Button</code>This indicates the trigger
       * of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that
       * closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.Dialog;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.Dialog;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>beginButton</code>.The button which is rendered to the left side
       * (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version
       * 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to
       * the footer area of dialog. If the new "buttons" aggregation is set, any change made to this
       * aggregation has no effect anymore. When runs on the phone, this button (and the endButton together
       * when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this
       * button (and the endButton together when set) is (are) rendered at the right side (left side in RTL
       * mode) of the footer area.
       * @since 1.15.1
      */
      getBeginButton(): sap.m.Button;

      /**
       * Gets content of aggregation <code>buttons</code>.Buttons can be added to the footer area of dialog
       * through this aggregation. When this aggregation is set, any change to beginButton and endButton has
       * no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left
       * side in RTL mode) of the footer instead of in the middle of the footer.
       * @since 1.21.1
      */
      getButtons(): sap.m.Button[];

      /**
       * Gets content of aggregation <code>content</code>.The content inside the dialog.<br/><b>Note:</b>
       * When the content of the <code>Dialog</code> is comprised of controls that use <code>position:
       * absolute</code>, such as <code>SplitContainer</code>, the dialog has to have either <code>stretch:
       * true</code> or <code>contentHeight</code> set.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>contentHeight</code>.Preferred height of content in Dialog. If
       * the preferred height is bigger than the available space on screen, it will be overwritten by the
       * maximum available height on screen in order to make sure that dialog isn't cut off.
       * @since 1.12.1
       * @returns Value of property <code>contentHeight</code>
      */
      getContentHeight(): any;

      /**
       * Gets current value of property <code>contentWidth</code>.Preferred width of content in Dialog. This
       * property affects the width of dialog on phone in landscape mode, tablet or desktop, because the
       * dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum
       * width of dilaog or more than the available width of the screen, it will be overwritten by the min or
       * max value. The current mininum value of dialog width on tablet is 400px.
       * @since 1.12.1
       * @returns Value of property <code>contentWidth</code>
      */
      getContentWidth(): any;

      /**
       * Gets content of aggregation <code>customHeader</code>.CustomHeader is only supported in theme
       * sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the
       * customHeader is shown as the header of the dialog.
       * @since 1.15.1
      */
      getCustomHeader(): sap.m.IBar;

      /**
       * Gets current value of property <code>draggable</code>.Indicates whether the dialog is draggable. If
       * this property is set to true, the dialog will be draggable by it's header. This property has a
       * default value false. The Dialog can be draggable only in desktop mode.Default value is
       * <code>false</code>.
       * @since 1.30
       * @returns Value of property <code>draggable</code>
      */
      getDraggable(): boolean;

      /**
       * Gets content of aggregation <code>endButton</code>.The button which is rendered to the right side
       * (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version
       * 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to
       * the footer area of dialog. If the new "buttons" aggregation is set, any change made to this
       * aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together
       * when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this
       * button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL
       * mode) of the footer area.
       * @since 1.15.1
      */
      getEndButton(): sap.m.Button;

      /**
       * Gets current value of property <code>horizontalScrolling</code>.Indicates if user can scroll
       * horizontally inside dialog when the content is bigger than the content area.Dialog detects if
       * there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If
       * there is, dialog will turn off scrolling by setting this property to false automatically ignoring
       * the existing value of this property.Default value is <code>true</code>.
       * @since 1.15.1
       * @returns Value of property <code>horizontalScrolling</code>
      */
      getHorizontalScrolling(): boolean;

      /**
       * Gets current value of property <code>icon</code>.Icon displayed in the dialog's header. This icon is
       * invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5,
       * etc.) to provide higher resolution image for higher density screen.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * ID of the element which is the current target of the association <code>initialFocus</code>, or
       * <code>null</code>.
       * @since 1.15.0
      */
      getInitialFocus(): any;

      /**
       * ID of the element which is the current target of the association <code>leftButton</code>, or
       * <code>null</code>.
      */
      getLeftButton(): any;

      /**
       * Returns a metadata object for class sap.m.Dialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>resizable</code>.Indicates whether the dialog is resizable. the
       * dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's
       * bottom right corner. This property has a default value false. The Dialog can be resizable only in
       * desktop mode.Default value is <code>false</code>.
       * @since 1.30
       * @returns Value of property <code>resizable</code>
      */
      getResizable(): boolean;

      /**
       * ID of the element which is the current target of the association <code>rightButton</code>, or
       * <code>null</code>.
      */
      getRightButton(): any;

      /**
       * Gets current value of property <code>showHeader</code>.Determines whether the header is shown inside
       * the dialog. If this property is set to true, the text and icon property are ignored. This property
       * has a default value true.Default value is <code>true</code>.
       * @since 1.15.1
       * @returns Value of property <code>showHeader</code>
      */
      getShowHeader(): boolean;

      /**
       * Gets current value of property <code>state</code>.The state affects the icon and the title color. If
       * other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will
       * overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog
       * control. This property is by now only supported by blue crystal theme.Default value is
       * <code>None</code>.
       * @since 1.11.2
       * @returns Value of property <code>state</code>
      */
      getState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>stretch</code>.Determines  if the dialog will be stretched to
       * full screen. This property is only applicable to standard dialog and message type dialog ignores
       * this property.Default value is <code>false</code>.
       * @since 1.13.1
       * @returns Value of property <code>stretch</code>
      */
      getStretch(): boolean;

      /**
       * Gets current value of property <code>stretchOnPhone</code>.Determines whether the dialog will
       * displayed on full screen on a phone.Default value is <code>false</code>.
       * @since 1.11.2
       * @returns Value of property <code>stretchOnPhone</code>
      */
      getStretchOnPhone(): boolean;

      /**
       * Gets content of aggregation <code>subHeader</code>.When subHeader is assigned to Dialog, it's
       * rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be
       * scrolled when content's size is bigger than the content area's size.
       * @since 1.12.2
      */
      getSubHeader(): sap.m.IBar;

      /**
       * Gets current value of property <code>title</code>.Title text appears in the dialog header.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>type</code>.The type of the dialog. In theme sap_bluecrystal,
       * the type "message" will limit the dialog's width within 480px on tablet and desktop.Default value is
       * <code>Standard</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.DialogType;

      /**
       * Gets current value of property <code>verticalScrolling</code>.Indicates if user can scroll
       * vertically inside dialog when the content is bigger than the content area.Dialog detects if there's
       * sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there
       * is, dialog will turn off scrolling by setting this property to false automatically ignoring the
       * existing value of this property.Default value is <code>true</code>.
       * @since 1.15.1
       * @returns Value of property <code>verticalScrolling</code>
      */
      getVerticalScrolling(): boolean;

      /**
       * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.21.1
       * @param oButton The button whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfButton(oButton: sap.m.Button): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a button into the aggregation <code>buttons</code>.
       * @since 1.21.1
       * @param oButton the button to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the button should be inserted at; for             a
       * negative value of <code>iIndex</code>, the button is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the button is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertButton(oButton: sap.m.Button, iIndex: number): sap.m.Dialog;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Dialog;

      /**
       * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this
       * includes opening and closing animations), otherwise it returns false.
       * @since 1.9.1
      */
      isOpen(): void;

      /**
       * Open the dialog.
      */
      open(): void;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>buttons</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.21.1
       * @returns An array of the removed elements (might be empty)
      */
      removeAllButtons(): sap.m.Button[];

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a button from the aggregation <code>buttons</code>.
       * @since 1.21.1
       * @param vButton The button to remove or its index or id
       * @returns The removed button or <code>null</code>
      */
      removeButton(vButton: number | string | sap.m.Button): sap.m.Button;

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets the aggregated <code>beginButton</code>.
       * @since 1.15.1
       * @param oBeginButton The beginButton to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBeginButton(oBeginButton: sap.m.Button): sap.m.Dialog;

      /**
       * Sets a new value for property <code>contentHeight</code>.Preferred height of content in Dialog. If
       * the preferred height is bigger than the available space on screen, it will be overwritten by the
       * maximum available height on screen in order to make sure that dialog isn't cut off.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.12.1
       * @param sContentHeight New value for property <code>contentHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentHeight(sContentHeight: any): sap.m.Dialog;

      /**
       * Sets a new value for property <code>contentWidth</code>.Preferred width of content in Dialog. This
       * property affects the width of dialog on phone in landscape mode, tablet or desktop, because the
       * dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum
       * width of dilaog or more than the available width of the screen, it will be overwritten by the min or
       * max value. The current mininum value of dialog width on tablet is 400px.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.12.1
       * @param sContentWidth New value for property <code>contentWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentWidth(sContentWidth: any): sap.m.Dialog;

      /**
       * Sets the aggregated <code>customHeader</code>.
       * @since 1.15.1
       * @param oCustomHeader The customHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomHeader(oCustomHeader: sap.m.IBar): sap.m.Dialog;

      /**
       * Sets a new value for property <code>draggable</code>.Indicates whether the dialog is draggable. If
       * this property is set to true, the dialog will be draggable by it's header. This property has a
       * default value false. The Dialog can be draggable only in desktop mode.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.30
       * @param bDraggable New value for property <code>draggable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDraggable(bDraggable: boolean): sap.m.Dialog;

      /**
       * Sets the aggregated <code>endButton</code>.
       * @since 1.15.1
       * @param oEndButton The endButton to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEndButton(oEndButton: sap.m.Button): sap.m.Dialog;

      /**
       * Sets a new value for property <code>horizontalScrolling</code>.Indicates if user can scroll
       * horizontally inside dialog when the content is bigger than the content area.Dialog detects if
       * there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If
       * there is, dialog will turn off scrolling by setting this property to false automatically ignoring
       * the existing value of this property.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.15.1
       * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.Dialog;

      /**
       * Sets a new value for property <code>icon</code>.Icon displayed in the dialog's header. This icon is
       * invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5,
       * etc.) to provide higher resolution image for higher density screen.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.Dialog;

      /**
       * Sets the associated <code>initialFocus</code>.
       * @since 1.15.0
       * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialFocus(oInitialFocus: any | sap.ui.core.Control): sap.m.Dialog;

      /**
       * Sets the associated <code>leftButton</code>.
       * @param oLeftButton ID of an element which becomes the new target of this leftButton association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLeftButton(oLeftButton: any | sap.m.Button): sap.m.Dialog;

      /**
       * Sets a new value for property <code>resizable</code>.Indicates whether the dialog is resizable. the
       * dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's
       * bottom right corner. This property has a default value false. The Dialog can be resizable only in
       * desktop mode.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.30
       * @param bResizable New value for property <code>resizable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setResizable(bResizable: boolean): sap.m.Dialog;

      /**
       * Sets the associated <code>rightButton</code>.
       * @param oRightButton ID of an element which becomes the new target of this rightButton association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRightButton(oRightButton: any | sap.m.Button): sap.m.Dialog;

      /**
       * Sets a new value for property <code>showHeader</code>.Determines whether the header is shown inside
       * the dialog. If this property is set to true, the text and icon property are ignored. This property
       * has a default value true.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>true</code>.
       * @since 1.15.1
       * @param bShowHeader New value for property <code>showHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHeader(bShowHeader: boolean): sap.m.Dialog;

      /**
       * Sets a new value for property <code>state</code>.The state affects the icon and the title color. If
       * other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will
       * overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog
       * control. This property is by now only supported by blue crystal theme.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>None</code>.
       * @since 1.11.2
       * @param sState New value for property <code>state</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setState(sState: sap.ui.core.ValueState): sap.m.Dialog;

      /**
       * Sets a new value for property <code>stretch</code>.Determines  if the dialog will be stretched to
       * full screen. This property is only applicable to standard dialog and message type dialog ignores
       * this property.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.13.1
       * @param bStretch New value for property <code>stretch</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStretch(bStretch: boolean): sap.m.Dialog;

      /**
       * Sets a new value for property <code>stretchOnPhone</code>.Determines whether the dialog will
       * displayed on full screen on a phone.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.11.2
       * @param bStretchOnPhone New value for property <code>stretchOnPhone</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStretchOnPhone(bStretchOnPhone: boolean): sap.m.Dialog;

      /**
       * Sets the aggregated <code>subHeader</code>.
       * @since 1.12.2
       * @param oSubHeader The subHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeader(oSubHeader: sap.m.IBar): sap.m.Dialog;

      /**
       * Sets a new value for property <code>title</code>.Title text appears in the dialog header.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.Dialog;

      /**
       * Sets a new value for property <code>type</code>.The type of the dialog. In theme sap_bluecrystal,
       * the type "message" will limit the dialog's width within 480px on tablet and desktop.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Standard</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.DialogType): sap.m.Dialog;

      /**
       * Sets a new value for property <code>verticalScrolling</code>.Indicates if user can scroll vertically
       * inside dialog when the content is bigger than the content area.Dialog detects if there's
       * sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there
       * is, dialog will turn off scrolling by setting this property to false automatically ignoring the
       * existing value of this property.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.15.1
       * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVerticalScrolling(bVerticalScrolling: boolean): sap.m.Dialog;
    }
    /**
     * The <code>sap.m.Select</code> control provides a list of items that allows users to select an item.
     * @resource sap/m/Select.js
    */
    export class Select extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>sap.m.Select</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Select;

      /**
       * Adds an item to the aggregation named <code>items</code>.
       * @param oItem The item to be added; if empty, nothing is added.
       * @returns <code>this</code> to allow method chaining.
      */
      addItem(oItem: sap.ui.core.Item): sap.m.Select;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.Select</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Select</code> itself.This event is fired when the value in the selection field is
       * changed in combination with one ofthe following actions:<ul>    <li>The focus leaves the selection
       * field</li>    <li>The <i>Enter</i> key is pressed</li>    <li>The item is pressed</li></ul>
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Select</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.Select;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.Select;

      /**
       * Closes the control's picker popup.
       * @since 1.16
       * @returns <code>this</code> to allow method chaining.
      */
      close(): sap.m.Select;

      /**
       * Creates a picker popup container where the selection should take place.
       * @param sPickerType undefined
      */
      createPicker(sPickerType: string): sap.m.Popover | sap.m.Dialog;

      /**
       * Destroys all the items in the aggregation named <code>items</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      destroyItems(): sap.m.Select;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.Select</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.Select;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected
       * item.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.Select;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>autoAdjustWidth</code>.Indicates whether the width of the input
       * field is determined by the selected item's content.Default value is <code>false</code>.
       * @since 1.16
       * @returns Value of property <code>autoAdjustWidth</code>
      */
      getAutoAdjustWidth(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can change the
       * selection.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets the enabled items from the aggregation named <code>items</code>.
       * @since 1.22.0
       * @param aItems Items to filter.
       * @returns An array containing the enabled items.
      */
      getEnabledItems(aItems: sap.ui.core.Item[]): sap.ui.core.Item[];

      /**
       * Gets the first item from the aggregation named <code>items</code>.
       * @since 1.16
       * @returns The first item, or null if there are no items.
      */
      getFirstItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>forceSelection</code>.Indicates whether the selection is
       * restricted to one of the items in the list.<b>Note:</b> We strongly recommend that you always set
       * this property to <code>false</code> and bindthe <code>selectedKey</code> property to the desired
       * value for better interoperability with data binding.Default value is <code>true</code>.
       * @since 1.34
       * @returns Value of property <code>forceSelection</code>
      */
      getForceSelection(): boolean;

      /**
       * Gets current value of property <code>icon</code>.The URI to the icon that will be displayed only
       * when using the <code>IconOnly</code> type.Default value is <code></code>.
       * @since 1.16
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
       * @since 1.16
       * @param iIndex Index of the item to return.
       * @returns Item at the given index, or null if none.
      */
      getItemAt(iIndex: number): sap.ui.core.Item | any;

      /**
       * Gets the item with the given key from the aggregation named <code>items</code>.<b>Note: </b> If
       * duplicate keys exist, the first item matching the key is returned.
       * @since 1.16
       * @param sKey An item key that specifies the item to be retrieved.
      */
      getItemByKey(sKey: string): sap.ui.core.Item | any;

      /**
       * Gets aggregation <code>items</code>.<b>Note</b>: This is the default aggregation.
      */
      getItems(): sap.ui.core.Item[];

      /**
       * Gets the last item from the aggregation named <code>items</code>.
       * @since 1.16
       * @returns The last item, or null if there are no items.
      */
      getLastItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>maxWidth</code>.Sets the maximum width of the
       * control.<b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to
       * <code>true</code>.Default value is <code>100%</code>.
       * @returns Value of property <code>maxWidth</code>
      */
      getMaxWidth(): any;

      /**
       * Returns a metadata object for class sap.m.Select.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.The name to be used in the HTML code (for example,
       * for HTML forms that send data to the server via submit).Default value is <code></code>.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets the selected item object from the aggregation named <code>items</code>.
       * @returns The current target of the <code>selectedItem</code> association, or null.
      */
      getSelectedItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>selectedItemId</code>.ID of the selected item.Default value is
       * <code></code>.
       * @since 1.12
       * @returns Value of property <code>selectedItemId</code>
      */
      getSelectedItemId(): string;

      /**
       * Gets current value of property <code>selectedKey</code>.Key of the selected item.<b>Note:</b> If
       * duplicate keys exist, the first item matching the key is used.Default value is <code></code>.
       * @since 1.11
       * @returns Value of property <code>selectedKey</code>
      */
      getSelectedKey(): string;

      /**
       * Gets current value of property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a{@link sap.ui.core.ListItem} are shown.Default value is
       * <code>false</code>.
       * @since 1.40
       * @returns Value of property <code>showSecondaryValues</code>
      */
      getShowSecondaryValues(): boolean;

      /**
       * Gets current value of property <code>textAlign</code>.Sets the horizontal alignment of the text
       * within the input field.Default value is <code>Initial</code>.
       * @since 1.28
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Specifies the direction of the text within
       * the input field with enumerated options.By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>type</code>.Type of a select. Possible values
       * <code>Default</code>, <code>IconOnly</code>.Default value is <code>Default</code>.
       * @since 1.16
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.SelectType;

      /**
       * Gets current value of property <code>valueState</code>.Visualizes the validation state of the
       * control, e.g. <code>Error</code>, <code>Warning</code>,<code>Success</code>.Default value is
       * <code>None</code>.
       * @since 1.40.2
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>valueStateText</code>.Defines the text of the value state
       * message popup.If this is not specified, a default text is shown from the resource bundle.Default
       * value is <code></code>.
       * @since 1.40.5
       * @returns Value of property <code>valueStateText</code>
      */
      getValueStateText(): string;

      /**
       * Gets current value of property <code>width</code>.Sets the width of the control. The default width
       * is derived from the widest item.If the width defined is smaller than the widest item in the
       * selection list, only the width ofthe selection field will be changed: the list will keep the width
       * of its widest item.If the list is wider than the viewport, it is truncated and an ellipsis is
       * displayed for each item.For phones, the width of the list is always the same as the
       * viewport.<b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set
       * to <code>true</code>.Default value is <code>auto</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.ui.core.Item): number;

      /**
       * Inserts an item into the aggregation named <code>items</code>.
       * @param oItem The item to be inserted; if empty, nothing is inserted.
       * @param iIndex The <code>0</code>-based index the item should be inserted at; for            a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value           
       * greater than the current size of the aggregation, the item is inserted at the last position.
       * @returns <code>this</code> to allow method chaining.
      */
      insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.Select;

      /**
       * Indicates whether the control's picker popup is opened.
       * @since 1.16
       * @returns Indicates whether the picker popup is currently open (this includes opening and closing
       * animations).
      */
      isOpen(): boolean;

      /**
       * Open the control's picker popup.
       * @since 1.16
       * @returns <code>this</code> to allow method chaining.
      */
      open(): sap.m.Select;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the items in the aggregation named <code>items</code>.Additionally unregisters them from
       * the hosting UIArea.
       * @returns An array of the removed items (might be empty).
      */
      removeAllItems(): sap.ui.core.Item[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param vItem The item to be removed or its index or ID.
       * @returns The removed item or null.
      */
      removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Sets a new value for property <code>autoAdjustWidth</code>.Indicates whether the width of the input
       * field is determined by the selected item's content.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.16
       * @param bAutoAdjustWidth New value for property <code>autoAdjustWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAutoAdjustWidth(bAutoAdjustWidth: boolean): sap.m.Select;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can change the
       * selection.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Select;

      /**
       * Sets a new value for property <code>forceSelection</code>.Indicates whether the selection is
       * restricted to one of the items in the list.<b>Note:</b> We strongly recommend that you always set
       * this property to <code>false</code> and bindthe <code>selectedKey</code> property to the desired
       * value for better interoperability with data binding.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.34
       * @param bForceSelection New value for property <code>forceSelection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setForceSelection(bForceSelection: boolean): sap.m.Select;

      /**
       * Sets a new value for property <code>icon</code>.The URI to the icon that will be displayed only when
       * using the <code>IconOnly</code> type.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @since 1.16
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.Select;

      /**
       * Sets a new value for property <code>maxWidth</code>.Sets the maximum width of the
       * control.<b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to
       * <code>true</code>.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>100%</code>.
       * @param sMaxWidth New value for property <code>maxWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxWidth(sMaxWidth: any): sap.m.Select;

      /**
       * Sets a new value for property <code>name</code>.The name to be used in the HTML code (for example,
       * for HTML forms that send data to the server via submit).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.Select;

      /**
       * Sets the <code>selectedItem</code> association.Default value is <code>null</code>.
       * @param vItem New value for the <code>selectedItem</code> association.If an ID of a
       * <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code>
       * association.Alternatively, a <code>sap.ui.core.Item</code> instance may be given or
       * <code>null</code>.If the value of <code>null</code> is provided, the first enabled item will be
       * selected (if any items exist).
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItem(vItem: string | sap.ui.core.Item | any): sap.m.Select;

      /**
       * Sets the <code>selectedItemId</code> property.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @since 1.12
       * @param vItem New value for property <code>selectedItemId</code>.If the provided <code>vItem</code>
       * has a default value, the first enabled item will be selected (if any items exist).
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItemId(vItem: string | any): sap.m.Select;

      /**
       * Sets property <code>selectedKey</code>.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @since 1.11
       * @param sKey New value for property <code>selectedKey</code>.If the <code>forceSelection</code>
       * property is set to <code>true</code> and the provided <code>sKey</code> isan empty string
       * <code>""</code> or <code>undefined</code>, the value of <code>sKey</code> is changed to matchthe
       * <code>key</code> of the first enabled item and the first enabled item is selected (if any items
       * exist).In the case that an item has the default key value, it is selected instead.If duplicate keys
       * exist, the first item matching the key is selected.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedKey(sKey: string): sap.m.Select;

      /**
       * Sets a new value for property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a{@link sap.ui.core.ListItem} are shown.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.40
       * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.Select;

      /**
       * Sets a new value for property <code>textAlign</code>.Sets the horizontal alignment of the text
       * within the input field.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>Initial</code>.
       * @since 1.28
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Select;

      /**
       * Sets a new value for property <code>textDirection</code>.Specifies the direction of the text within
       * the input field with enumerated options.By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Select;

      /**
       * Sets a new value for property <code>type</code>.Type of a select. Possible values
       * <code>Default</code>, <code>IconOnly</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Default</code>.
       * @since 1.16
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.SelectType): sap.m.Select;

      /**
       * Sets a new value for property <code>valueState</code>.Visualizes the validation state of the
       * control, e.g. <code>Error</code>, <code>Warning</code>,<code>Success</code>.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>None</code>.
       * @since 1.40.2
       * @param sValueState New value for property <code>valueState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueState(sValueState: sap.ui.core.ValueState): sap.m.Select;

      /**
       * Sets a new value for property <code>valueStateText</code>.Defines the text of the value state
       * message popup.If this is not specified, a default text is shown from the resource bundle.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code></code>.
       * @since 1.40.5
       * @param sValueStateText New value for property <code>valueStateText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueStateText(sValueStateText: string): sap.m.Select;

      /**
       * Sets a new value for property <code>width</code>.Sets the width of the control. The default width is
       * derived from the widest item.If the width defined is smaller than the widest item in the selection
       * list, only the width ofthe selection field will be changed: the list will keep the width of its
       * widest item.If the list is wider than the viewport, it is truncated and an ellipsis is displayed for
       * each item.For phones, the width of the list is always the same as the viewport.<b>Note:</b> This
       * property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>auto</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Select;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.Select;
    }
    /**
     * A slider is a user interface control that enables the user to adjust values in a specified numerical
     * range.
     * @resource sap/m/Slider.js
    */
    export class Slider extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>sap.m.Slider</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Slider;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.Slider</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Slider</code> itself.This event is triggered after the end user finishes interacting, if
       * there is any change.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Slider</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.Slider;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.Slider</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Slider</code> itself.This event is triggered during the dragging period, each time the
       * slider value changes.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Slider</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.Slider;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.Slider</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.Slider;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.Slider</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.Slider;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>float</code>The current value of the slider
       * after a change.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.Slider;

      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>float</code>The current value of the slider
       * after a live change.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.Slider;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can change the
       * value.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>max</code>.The maximum value.Default value is <code>100</code>.
       * @returns Value of property <code>max</code>
      */
      getMax(): number;

      /**
       * Returns a metadata object for class sap.m.Slider.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>min</code>.The minimum value.Default value is <code>0</code>.
       * @returns Value of property <code>min</code>
      */
      getMin(): number;

      /**
       * Gets current value of property <code>name</code>.The name property to be used in the HTML code for
       * the slider (e.g. for HTML forms that send data to the server via submit).Default value is
       * <code></code>.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>progress</code>.Indicate whether a progress bar indicator is
       * shown.Default value is <code>true</code>.
       * @returns Value of property <code>progress</code>
      */
      getProgress(): boolean;

      /**
       * Gets current value of property <code>showHandleTooltip</code>.Indicate whether the handle tooltip is
       * shown.Default value is <code>true</code>.
       * @since 1.31
       * @returns Value of property <code>showHandleTooltip</code>
      */
      getShowHandleTooltip(): boolean;

      /**
       * Gets current value of property <code>step</code>.Define the amount of units to change the slider
       * when adjusting by drag and drop.Defines the size of the slider's selection intervals. (e.g. min = 0,
       * max = 10, step = 5 would result in possible selection of the values 0, 5, 10).The step must be
       * positive, if a negative number is provided, the default value will be used instead.If the width of
       * the slider converted to pixels is less than the range (max – min), the value will be rounded to
       * multiples of the step size.Default value is <code>1</code>.
       * @returns Value of property <code>step</code>
      */
      getStep(): number;

      /**
       * Gets current value of property <code>value</code>.Define the value.If the value is lower/higher than
       * the allowed minimum/maximum, the value of the properties <code>min<code>/<code>max</code> are used
       * instead.Default value is <code>0</code>.
       * @returns Value of property <code>value</code>
      */
      getValue(): number;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the control.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can change the
       * value.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Slider;

      /**
       * Sets a new value for property <code>max</code>.The maximum value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100</code>.
       * @param fMax New value for property <code>max</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMax(fMax: number): sap.m.Slider;

      /**
       * Sets a new value for property <code>min</code>.The minimum value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>0</code>.
       * @param fMin New value for property <code>min</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMin(fMin: number): sap.m.Slider;

      /**
       * Sets a new value for property <code>name</code>.The name property to be used in the HTML code for
       * the slider (e.g. for HTML forms that send data to the server via submit).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.Slider;

      /**
       * Sets a new value for property <code>progress</code>.Indicate whether a progress bar indicator is
       * shown.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bProgress New value for property <code>progress</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setProgress(bProgress: boolean): sap.m.Slider;

      /**
       * Sets a new value for property <code>showHandleTooltip</code>.Indicate whether the handle tooltip is
       * shown.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @since 1.31
       * @param bShowHandleTooltip New value for property <code>showHandleTooltip</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHandleTooltip(bShowHandleTooltip: boolean): sap.m.Slider;

      /**
       * Sets a new value for property <code>step</code>.Define the amount of units to change the slider when
       * adjusting by drag and drop.Defines the size of the slider's selection intervals. (e.g. min = 0, max
       * = 10, step = 5 would result in possible selection of the values 0, 5, 10).The step must be positive,
       * if a negative number is provided, the default value will be used instead.If the width of the slider
       * converted to pixels is less than the range (max – min), the value will be rounded to multiples of
       * the step size.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>1</code>.
       * @param fStep New value for property <code>step</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStep(fStep: number): sap.m.Slider;

      /**
       * Sets the property <code>value</code>.Default value is <code>0</code>.
       * @param fNewValue new value for property <code>value</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setValue(fNewValue: number): sap.m.Slider;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Slider;

      /**
       * Decrements the value by multiplying the step the <code>step</code> with the given parameter.
       * @param iStep The number of steps the slider goes down.
       * @returns <code>this</code> to allow method chaining.
      */
      stepDown(iStep: number): sap.m.Slider;

      /**
       * Increments the value by multiplying the <code>step</code> with the given parameter.
       * @param iStep The number of steps the slider goes up.
       * @returns <code>this</code> to allow method chaining.
      */
      stepUp(iStep: number): sap.m.Slider;
    }
    /**
     * A switch is a user interface control on mobile devices that is used for change between binary
     * states. The user can also drag the button handle or tap to change the state.
     * @resource sap/m/Switch.js
    */
    export class Switch extends sap.ui.core.Control {


      /**
       * Constructor for a new Switch.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Switch;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.Switch</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Switch</code> itself.Triggered when a switch changes the state.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Switch</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.Switch;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.Switch</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.Switch;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>state</code> of type <code>boolean</code>The new state of the
       * switch.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.Switch;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>customTextOff</code>.Custom text for the "OFF" state."OFF"
       * translated to the current language is the default value.Beware that the given text will be cut off
       * after three characters.Default value is <code></code>.
       * @returns Value of property <code>customTextOff</code>
      */
      getCustomTextOff(): string;

      /**
       * Gets current value of property <code>customTextOn</code>.Custom text for the "ON" state."ON"
       * translated to the current language is the default value.Beware that the given text will be cut off
       * after three characters.Default value is <code></code>.
       * @returns Value of property <code>customTextOn</code>
      */
      getCustomTextOn(): string;

      /**
       * Gets current value of property <code>enabled</code>.Whether the switch is enabled.Default value is
       * <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Returns a metadata object for class sap.m.Switch.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.The name to be used in the HTML code for the switch
       * (e.g. for HTML forms that send data to the server via submit).Default value is <code></code>.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>state</code>.A boolean value indicating whether the switch is
       * on or off.Default value is <code>false</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): boolean;

      /**
       * Gets current value of property <code>type</code>.Type of a Switch. Possibles values "Default",
       * "AcceptReject".Default value is <code>Default</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.SwitchType;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>customTextOff</code>.Custom text for the "OFF" state."OFF"
       * translated to the current language is the default value.Beware that the given text will be cut off
       * after three characters.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sCustomTextOff New value for property <code>customTextOff</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomTextOff(sCustomTextOff: string): sap.m.Switch;

      /**
       * Sets a new value for property <code>customTextOn</code>.Custom text for the "ON" state."ON"
       * translated to the current language is the default value.Beware that the given text will be cut off
       * after three characters.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sCustomTextOn New value for property <code>customTextOn</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomTextOn(sCustomTextOn: string): sap.m.Switch;

      /**
       * Sets a new value for property <code>enabled</code>.Whether the switch is enabled.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Switch;

      /**
       * Sets a new value for property <code>name</code>.The name to be used in the HTML code for the switch
       * (e.g. for HTML forms that send data to the server via submit).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.Switch;

      /**
       * Change the switch state between on and off.
       * @param bState undefined
       * @returns <code>this</code> to allow method chaining.
      */
      setState(bState: boolean): sap.m.Switch;

      /**
       * Sets a new value for property <code>type</code>.Type of a Switch. Possibles values "Default",
       * "AcceptReject".When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Default</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.SwitchType): sap.m.Switch;
    }
    /**
     * The Wizard control enables users to accomplish a single goalwhich consists of multiple dependable
     * sub-tasks.Each sub-task is provided in the form of a WizardStep.
     * @resource sap/m/Wizard.js
    */
    export class Wizard extends sap.ui.core.Control {


      /**
       * Constructor for a new Wizard.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds a new step to the Wizard.
       * @param wizardStep New WizardStep to add to the Wizard
       * @returns Pointer to the control instance for chaining
      */
      addStep(wizardStep: sap.m.WizardStep): sap.m.Wizard;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>complete</code> event of this
       * <code>sap.m.Wizard</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Wizard</code> itself.The complete event is fired when the user clicks the finish button
       * of the Wizard.The finish button is only available on the last step of the Wizard.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Wizard</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachComplete(oData: any, fnFunction: any, oListener?: any): sap.m.Wizard;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>stepActivate</code> event of this
       * <code>sap.m.Wizard</code>.When called, the context of the event handler (its <code>this</code>) will
       * be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Wizard</code> itself.The StepActivated event is fired every time a new step is
       * activated.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Wizard</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachStepActivate(oData: any, fnFunction: any, oListener?: any): sap.m.Wizard;

      /**
       * Destroys all aggregated steps in the Wizard.
       * @returns Pointer to the control instance for chaining.
      */
      destroySteps(): sap.m.Wizard;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>complete</code> event of this
       * <code>sap.m.Wizard</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachComplete(fnFunction: any, oListener: any): sap.m.Wizard;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>stepActivate</code> event of this
       * <code>sap.m.Wizard</code>.The passed function and listener object must match the ones used for event
       * registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachStepActivate(fnFunction: any, oListener: any): sap.m.Wizard;

      /**
       * Discards all progress done from the given step(incl.) to the end of the wizard.The verified state of
       * the steps is returned to the initial provided.
       * @param step The step after which the progress is discarded.
       * @returns Pointer to the control instance for chaining.
      */
      discardProgress(step: sap.m.WizardStep): sap.m.Wizard;


      /**
       * Fires event <code>complete</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireComplete(mArguments: any): sap.m.Wizard;

      /**
       * Fires event <code>stepActivate</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>index</code> of type <code>int</code>The index of the activated step as a
       * parameter. One-based.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireStepActivate(mArguments: any): sap.m.Wizard;

      /**
       * Gets current value of property <code>enableBranching</code>.Enables the branching functionality of
       * the Wizard.Branching gives the developer the ability to define multiple routes a useris able to take
       * based on the input in the current step.It is up to the developer to programatically check for what
       * is the input in thecurrent step and set a concrete next step amongs the available subsequent
       * steps.Note: If this property is set to false, <code>next</code> and
       * <code>subSequentSteps</code>associations of the WizardStep control are ignored.Default value is
       * <code>false</code>.
       * @returns Value of property <code>enableBranching</code>
      */
      getEnableBranching(): boolean;

      /**
       * Returns the finish button text which will be rendered.
       * @returns The text which will be rendered in the finish button.
      */
      getFinishButtonText(): string;

      /**
       * Gets current value of property <code>height</code>.Determines the height of the Wizard.Default value
       * is <code>100%</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Returns a metadata object for class sap.m.Wizard.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the number of the last activated step in the Wizard.
       * @returns The last activated step.
      */
      getProgress(): number;

      /**
       * Returns the last activated step in the Wizard.
       * @returns Pointer to the control instance for chaining.
      */
      getProgressStep(): sap.m.WizardStep;

      /**
       * Gets current value of property <code>showNextButton</code>.Controls the visibility of the next
       * button. The developers can choose to control the flow of thesteps either through the API (with
       * <code>nextStep</code> and <code>previousStep</code> methods) or let the user clickthe next button,
       * and control it with <code>validateStep</code> or <code>invalidateStep</code> methods.Default value
       * is <code>true</code>.
       * @returns Value of property <code>showNextButton</code>
      */
      getShowNextButton(): boolean;

      /**
       * Gets content of aggregation <code>steps</code>.The wizard steps to be included in the content of the
       * control.
      */
      getSteps(): sap.m.WizardStep[];

      /**
       * Gets current value of property <code>width</code>.Determines the width of the Wizard.Default value
       * is <code>auto</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Goes to the given step.
       * @param step The step to go to.
       * @param focusFirstStepElement Defines whether the focus should be changed to the first element.
       * @returns Pointer to the control instance for chaining.
      */
      goToStep(step: sap.m.WizardStep, focusFirstStepElement: boolean): sap.m.Wizard;

      /**
       * Checks for the provided <code>sap.m.WizardStep</code> in the aggregation <code>steps</code>.and
       * returns its index if found or -1 otherwise.
       * @param oStep The step whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfStep(oStep: sap.m.WizardStep): number;

      /**
       * Dynamic step insertion is not yet supported.
      */
      insertStep(): void;

      /**
       * Invalidates the given step.
       * @param step The step to be invalidated.
       * @returns Pointer to the control instance for chaining.
      */
      invalidateStep(step: sap.m.WizardStep): sap.m.Wizard;

      /**
       * Validates the current step, and moves one step further.
       * @returns Pointer to the control instance for chaining.
      */
      nextStep(): sap.m.Wizard;

      /**
       * Discards the current step and goes one step back.
       * @returns Pointer to the control instance for chaining.
      */
      previousStep(): sap.m.Wizard;

      /**
       * Removes all steps from the Wizard.
       * @returns Pointer to the Steps that were removed.
      */
      removeAllSteps(): sap.ui.core.Control;

      /**
       * Dynamic step removal is not yet supported.
      */
      removeStep(): void;

      /**
       * Sets a new value for property <code>enableBranching</code>.Enables the branching functionality of
       * the Wizard.Branching gives the developer the ability to define multiple routes a useris able to take
       * based on the input in the current step.It is up to the developer to programatically check for what
       * is the input in thecurrent step and set a concrete next step amongs the available subsequent
       * steps.Note: If this property is set to false, <code>next</code> and
       * <code>subSequentSteps</code>associations of the WizardStep control are ignored.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bEnableBranching New value for property <code>enableBranching</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableBranching(bEnableBranching: boolean): sap.m.Wizard;

      /**
       * Sets the text for the finish button. By default it is "Review".
       * @param value The text of the finish button.
       * @returns Reference to the control instance for chaining.
      */
      setFinishButtonText(value: string): sap.m.Wizard;

      /**
       * Sets a new value for property <code>height</code>.Determines the height of the Wizard.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>100%</code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.Wizard;

      /**
       * Sets the visiblity of the next button.
       * @param value True to show the button or false to hide it.
       * @returns Reference to the control instance for chaining.
      */
      setShowNextButton(value: boolean): sap.m.Wizard;

      /**
       * Sets a new value for property <code>width</code>.Determines the width of the Wizard.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>auto</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Wizard;

      /**
       * Validates the given step.
       * @param step The step to be validated.
       * @returns Pointer to the control instance for chaining.
      */
      validateStep(step: sap.m.WizardStep): sap.m.Wizard;
    }
    /**
     * Popover is used to present information temporarily but in a way that does not take over the entire
     * screen. The popover content is layered on top of your existing content and it remains visible until
     * the user taps outside of the popover (when modal is set to false) or you explicitly dismiss it (when
     * modal is set to true). The switching between modal and non-modal can also be done when the popover
     * is already opened.
     * @resource sap/m/Popover.js
    */
    export class Popover extends sap.ui.core.Control {


      /**
       * Constructor for a new Popover.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Hook called after adjusment of the Popover position.
      */
      _afterAdjustPositionAndArrowHook(): void;

      /**
       * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put
       * thetitle and buttons if needed inside, and finally return this newly create header.
      */
      _getAnyHeader(): void;

      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Popover;

      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.Popover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.Popover</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Popover</code> itself.This event will be fired after the popover is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Popover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.Popover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.Popover</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Popover</code> itself.This event will be fired after the popover is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Popover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.Popover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.Popover</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Popover</code> itself.This event will be fired before the popover is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Popover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.Popover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.Popover</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Popover</code> itself.This event will be fired before the popover is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Popover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.Popover;

      /**
       * Closes the popover when it's already opened.
       * @returns Reference to the control instance for chaining
      */
      close(): sap.m.Popover;

      /**
       * Destroys the beginButton in the aggregation <code>beginButton</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyBeginButton(): sap.m.Popover;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.Popover;

      /**
       * Destroys the customHeader in the aggregation <code>customHeader</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomHeader(): sap.m.Popover;

      /**
       * Destroys the endButton in the aggregation <code>endButton</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyEndButton(): sap.m.Popover;

      /**
       * Destroys the footer in the aggregation <code>footer</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFooter(): sap.m.Popover;

      /**
       * Destroys the subHeader in the aggregation <code>subHeader</code>.
       * @since 1.15.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySubHeader(): sap.m.Popover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.Popover</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.Popover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.Popover</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.Popover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.Popover</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.Popover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.Popover</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.Popover;


      /**
       * Fires event <code>afterClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the
       * control which opens the popover.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.Popover;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the
       * control which opens the popover.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.Popover;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the
       * control which opens the popover.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.Popover;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the
       * control which opens the popover.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.Popover;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Gets content of aggregation <code>beginButton</code>.BeginButton is shown at the left side (right
       * side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
       * @since 1.15.1
      */
      getBeginButton(): sap.ui.core.Control;

      /**
       * Gets content of aggregation <code>content</code>.The content inside the popover.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>contentHeight</code>.Set the height of the content area inside
       * Popover. When controls which adapt their size to the parent control are added directly into Popover,
       * for example sap.m.Page control, a size needs to be specified to the content area of the Popover.
       * Otherwise, Popover control isn't able to display the content in the right way. This values isn't
       * necessary for controls added to Popover directly which can decide their size by themselves, for
       * exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent
       * control.
       * @since 1.9.0
       * @returns Value of property <code>contentHeight</code>
      */
      getContentHeight(): any;

      /**
       * Gets current value of property <code>contentMinWidth</code>.Sets the minimum width of the content
       * area inside popover.Default value is <code></code>.
       * @since 1.36
       * @returns Value of property <code>contentMinWidth</code>
      */
      getContentMinWidth(): any;

      /**
       * Gets current value of property <code>contentWidth</code>.Set the width of the content area inside
       * Popover. When controls which adapt their size to the parent control are added directly into Popover,
       * for example sap.m.Page control, a size needs to be specified to the content area of the Popover.
       * Otherwise, Popover control isn't able to display the content in the right way. This values isn't
       * necessary for controls added to Popover directly which can decide their size by themselves, for
       * exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent
       * control.
       * @since 1.9.0
       * @returns Value of property <code>contentWidth</code>
      */
      getContentWidth(): any;

      /**
       * Gets content of aggregation <code>customHeader</code>.Any control that needed to be displayed in the
       * header area. When this is set, the showHeader property is ignored, and only this customHeader is
       * shown on the top of popover.
      */
      getCustomHeader(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>enableScrolling</code>.This property is deprecated. Please use
       * properties verticalScrolling and horizontalScrolling instead. If you still use this property it will
       * be mapped on the new properties verticalScrolling and horizontalScrolling.Default value is
       * <code>true</code>.
       * @returns Value of property <code>enableScrolling</code>
      */
      getEnableScrolling(): boolean;

      /**
       * Gets content of aggregation <code>endButton</code>.EndButton is always shown at the right side (left
       * side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
       * @since 1.15.1
      */
      getEndButton(): sap.ui.core.Control;

      /**
       * Gets content of aggregation <code>footer</code>.This is optional footer which is shown on the bottom
       * of the popover.
      */
      getFooter(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>horizontalScrolling</code>.This property indicates if user can
       * scroll horizontally inside popover when the content is bigger than the content area. However, when
       * scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be
       * set to false to disable the scrolling in popover in order to make the scrolling in the child control
       * work properly.Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as
       * direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
       * to false automatically ignoring the existing value of this property.Default value is
       * <code>true</code>.
       * @since 1.15.0
       * @returns Value of property <code>horizontalScrolling</code>
      */
      getHorizontalScrolling(): boolean;

      /**
       * ID of the element which is the current target of the association <code>initialFocus</code>, or
       * <code>null</code>.
       * @since 1.15.0
      */
      getInitialFocus(): any;

      /**
       * ID of the element which is the current target of the association <code>leftButton</code>, or
       * <code>null</code>.
      */
      getLeftButton(): any;

      /**
       * Returns a metadata object for class sap.m.Popover.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>modal</code>.If the popover will not be closed when tapping
       * outside the popover. It also blocks any interaction with the background. The default value is
       * false.Default value is <code>false</code>.
       * @returns Value of property <code>modal</code>
      */
      getModal(): boolean;

      /**
       * Gets current value of property <code>offsetX</code>.The offset for the popover placement in the x
       * axis. It's with unit pixel.Default value is <code>0</code>.
       * @returns Value of property <code>offsetX</code>
      */
      getOffsetX(): number;

      /**
       * Gets current value of property <code>offsetY</code>.The offset for the popover placement in the y
       * axis. It's with unit pixel.Default value is <code>0</code>.
       * @returns Value of property <code>offsetY</code>
      */
      getOffsetY(): number;

      /**
       * Gets current value of property <code>placement</code>.This is the information about on which side
       * will the popover be placed at. Possible values are sap.m.PlacementType.Left,
       * sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom,
       * sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft,
       * sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical,
       * sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom,
       * sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property
       * while popover is open won't cause any rerendering of the popover, but it will take effect when it's
       * opened again.Default value is <code>Right</code>.
       * @returns Value of property <code>placement</code>
      */
      getPlacement(): sap.m.PlacementType;

      /**
       * Gets current value of property <code>resizable</code>.Whether resize option is enabled.Default value
       * is <code>false</code>.
       * @since 1.36.4
       * @returns Value of property <code>resizable</code>
      */
      getResizable(): boolean;

      /**
       * ID of the element which is the current target of the association <code>rightButton</code>, or
       * <code>null</code>.
      */
      getRightButton(): any;

      /**
       * Gets current value of property <code>showArrow</code>.Whether Popover arrow should be visibleDefault
       * value is <code>true</code>.
       * @since 1.31
       * @returns Value of property <code>showArrow</code>
      */
      getShowArrow(): boolean;

      /**
       * Gets current value of property <code>showHeader</code>.If a header should be shown at the top of the
       * popover.Default value is <code>true</code>.
       * @returns Value of property <code>showHeader</code>
      */
      getShowHeader(): boolean;

      /**
       * Gets content of aggregation <code>subHeader</code>.When subHeader is assigned to Popover, it's
       * rendered directly after the main header if there is, or at the beginning of Popover when there's no
       * main header. SubHeader is out of the content area and won't be scrolled when content's size is
       * bigger than the content area's size.
       * @since 1.15.1
      */
      getSubHeader(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>title</code>.Title text appears in the header. This property
       * will be ignored when showHeader is set to false.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>verticalScrolling</code>.This property indicates if user can
       * scroll vertically inside popover when the content is bigger than the content area. However, when
       * scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be
       * set to false to disable the scrolling in popover in order to make the scrolling in the child control
       * work properly.Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as
       * direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
       * to false automatically ignoring the existing value of this property.Default value is
       * <code>true</code>.
       * @since 1.15.0
       * @returns Value of property <code>verticalScrolling</code>
      */
      getVerticalScrolling(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Popover;

      /**
       * The method checks if the Popover is open. It returns true when the Popover is currently open (this
       * includes opening and closing animations), otherwise it returns false.
       * @since 1.9.1
       * @returns whether the Popover is currently opened
      */
      isOpen(): boolean;

      /**
       * Opens the Popover and set the Popover position according to the {@link #getPlacement() placement}
       * property around the <code>oControl</code> parameter.
       * @param oControl This is the control to which the Popover will be placed. It can be not only a UI5
       * control, but also an existing DOM reference. The side of the placement depends on the placement
       * property set in the Popover.
       * @param bSkipInstanceManager undefined
       * @returns Reference to the control instance for chaining
      */
      openBy(oControl: any, bSkipInstanceManager: boolean): sap.m.Popover;

      /**
       * Calculate outerHeight of the element; used as hook for SVG elements
       * @param oElement An Element for which outerHeight will be calculated.
       * @param bIncludeMargin Determines if the margins should be included in the calculated outerHeight.
       * Default value is false.
      */
      outerHeight(oElement: HTMLElement, bIncludeMargin: boolean): void;

      /**
       * Calculate outerWidth of the element; used as hook for SVG elements
       * @param oElement An Element for which outerWidth will be calculated.
       * @param bIncludeMargin Determines if the margins should be included in the calculated outerWidth.
       * Default value is false.
      */
      outerWidth(oElement: HTMLElement, bIncludeMargin: boolean): void;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets the aggregated <code>beginButton</code>.
       * @since 1.15.1
       * @param oBeginButton The beginButton to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBeginButton(oBeginButton: sap.ui.core.Control): sap.m.Popover;

      /**
       * Setter for property <code>bounce</code>.Default value is empty
       * @param bBounce New value for property <code>bounce</code>
       * @returns Reference to the control instance for chaining
      */
      setBounce(bBounce: boolean): sap.m.Popover;

      /**
       * Sets a new value for property <code>contentHeight</code>.Set the height of the content area inside
       * Popover. When controls which adapt their size to the parent control are added directly into Popover,
       * for example sap.m.Page control, a size needs to be specified to the content area of the Popover.
       * Otherwise, Popover control isn't able to display the content in the right way. This values isn't
       * necessary for controls added to Popover directly which can decide their size by themselves, for
       * exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent
       * control.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @since 1.9.0
       * @param sContentHeight New value for property <code>contentHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentHeight(sContentHeight: any): sap.m.Popover;

      /**
       * Sets a new value for property <code>contentMinWidth</code>.Sets the minimum width of the content
       * area inside popover.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @since 1.36
       * @param sContentMinWidth New value for property <code>contentMinWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentMinWidth(sContentMinWidth: any): sap.m.Popover;

      /**
       * Sets a new value for property <code>contentWidth</code>.Set the width of the content area inside
       * Popover. When controls which adapt their size to the parent control are added directly into Popover,
       * for example sap.m.Page control, a size needs to be specified to the content area of the Popover.
       * Otherwise, Popover control isn't able to display the content in the right way. This values isn't
       * necessary for controls added to Popover directly which can decide their size by themselves, for
       * exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent
       * control.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @since 1.9.0
       * @param sContentWidth New value for property <code>contentWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentWidth(sContentWidth: any): sap.m.Popover;

      /**
       * Sets the aggregated <code>customHeader</code>.
       * @param oCustomHeader The customHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomHeader(oCustomHeader: sap.ui.core.Control): sap.m.Popover;

      /**
       * Sets a new value for property <code>enableScrolling</code>.This property is deprecated. Please use
       * properties verticalScrolling and horizontalScrolling instead. If you still use this property it will
       * be mapped on the new properties verticalScrolling and horizontalScrolling.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bEnableScrolling New value for property <code>enableScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableScrolling(bEnableScrolling: boolean): sap.m.Popover;

      /**
       * Sets the aggregated <code>endButton</code>.
       * @since 1.15.1
       * @param oEndButton The endButton to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEndButton(oEndButton: sap.ui.core.Control): sap.m.Popover;

      /**
       * The followOf feature closes the Popover when the position of the control that opened the Popover
       * changes by at least  32 pixels (on desktop browsers). This may lead to unwanted closing of the
       * Popover.This function is for enabling/disabling the followOf feature.
       * @since 1.16.8
       * @param bValue Enables the followOf feature
       * @returns Reference to the control instance for chaining
      */
      setFollowOf(bValue: boolean): sap.m.Popover;

      /**
       * Sets the aggregated <code>footer</code>.
       * @param oFooter The footer to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooter(oFooter: sap.ui.core.Control): sap.m.Popover;

      /**
       * Sets a new value for property <code>horizontalScrolling</code>.This property indicates if user can
       * scroll horizontally inside popover when the content is bigger than the content area. However, when
       * scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be
       * set to false to disable the scrolling in popover in order to make the scrolling in the child control
       * work properly.Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as
       * direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
       * to false automatically ignoring the existing value of this property.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.15.0
       * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.Popover;

      /**
       * Sets the associated <code>initialFocus</code>.
       * @since 1.15.0
       * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialFocus(oInitialFocus: any | sap.ui.core.Control): sap.m.Popover;

      /**
       * Sets the associated <code>leftButton</code>.
       * @param oLeftButton ID of an element which becomes the new target of this leftButton association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLeftButton(oLeftButton: any | sap.m.Button): sap.m.Popover;

      /**
       * Setter for property <code>modal</code>.This overwrites the default setter of the property
       * <code>modal</code> to avoid rerendering the whole popover control.Default value is
       * <code>false</code>
       * @param bModal New value for property <code>modal</code>.
       * @param sModalCSSClass A CSS class (or space-separated list of classes) that should be added to the
       * block layer.
       * @returns Reference to the control instance for chaining
      */
      setModal(bModal: boolean, sModalCSSClass?: string): sap.m.Popover;

      /**
       * Sets a new value for property <code>offsetX</code>.The offset for the popover placement in the x
       * axis. It's with unit pixel.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>0</code>.
       * @param iOffsetX New value for property <code>offsetX</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOffsetX(iOffsetX: number): sap.m.Popover;

      /**
       * Sets a new value for property <code>offsetY</code>.The offset for the popover placement in the y
       * axis. It's with unit pixel.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>0</code>.
       * @param iOffsetY New value for property <code>offsetY</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOffsetY(iOffsetY: number): sap.m.Popover;

      /**
       * Set the placement of the Popover.
       * @param sPlacement The position of the Popover
       * @returns Reference to the control instance for chaining
      */
      setPlacement(sPlacement: sap.m.PlacementType): sap.m.Popover;

      /**
       * Sets a new value for property <code>resizable</code>.Whether resize option is enabled.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>false</code>.
       * @since 1.36.4
       * @param bResizable New value for property <code>resizable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setResizable(bResizable: boolean): sap.m.Popover;

      /**
       * Sets the associated <code>rightButton</code>.
       * @param oRightButton ID of an element which becomes the new target of this rightButton association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRightButton(oRightButton: any | sap.m.Button): sap.m.Popover;

      /**
       * Sets a new value for property <code>showArrow</code>.Whether Popover arrow should be visibleWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @since 1.31
       * @param bShowArrow New value for property <code>showArrow</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowArrow(bShowArrow: boolean): sap.m.Popover;

      /**
       * Sets a new value for property <code>showHeader</code>.If a header should be shown at the top of the
       * popover.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bShowHeader New value for property <code>showHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHeader(bShowHeader: boolean): sap.m.Popover;

      /**
       * Sets the aggregated <code>subHeader</code>.
       * @since 1.15.1
       * @param oSubHeader The subHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeader(oSubHeader: sap.ui.core.Control): sap.m.Popover;

      /**
       * The setter of the title property.If you want to show a header in the popover, don't forget to set
       * the{@link #setShowHeader showHeader} property to true.
       * @param sTitle The title to be set
       * @returns Reference to the control instance for chaining
      */
      setTitle(sTitle: string): sap.m.Popover;

      /**
       * Sets a new value for property <code>verticalScrolling</code>.This property indicates if user can
       * scroll vertically inside popover when the content is bigger than the content area. However, when
       * scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be
       * set to false to disable the scrolling in popover in order to make the scrolling in the child control
       * work properly.Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as
       * direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
       * to false automatically ignoring the existing value of this property.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.15.0
       * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVerticalScrolling(bVerticalScrolling: boolean): sap.m.Popover;
    }
    /**
     * The <code>sap.m.FlexBox</code> control builds the container for a flexible box layout.Browser
     * support:This control is not supported in Internet Explorer 9!
     * @resource sap/m/FlexBox.js
    */
    export class FlexBox extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>sap.m.FlexBox</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.ui.core.Control): sap.m.FlexBox;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.FlexBox;


      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>alignContent</code>.Determines the layout behavior of container
       * lines when there's extra space along the cross-axis. This property has no effect in Internet
       * Explorer 10.Default value is <code>Stretch</code>.
       * @since 1.36.0
       * @returns Value of property <code>alignContent</code>
      */
      getAlignContent(): sap.m.FlexAlignContent;

      /**
       * Gets current value of property <code>alignItems</code>.Determines the layout behavior of items along
       * the cross-axis. "Baseline" is not supported in Internet Explorer 10.Default value is
       * <code>Stretch</code>.
       * @returns Value of property <code>alignItems</code>
      */
      getAlignItems(): sap.m.FlexAlignItems;

      /**
       * Gets current value of property <code>backgroundDesign</code>.Defines the background style of the
       * <code>sap.m.FlexBox</code>.Default value is <code>Transparent</code>.
       * @since 1.38.5
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets current value of property <code>direction</code>.Determines the direction of the layout of
       * child elements.Default value is <code>Row</code>.
       * @returns Value of property <code>direction</code>
      */
      getDirection(): sap.m.FlexDirection;

      /**
       * Gets current value of property <code>displayInline</code>.Determines whether the
       * <code>sap.m.FlexBox</code> is in block or inline mode.Default value is <code>false</code>.
       * @returns Value of property <code>displayInline</code>
      */
      getDisplayInline(): boolean;

      /**
       * Gets current value of property <code>fitContainer</code>.Determines whether the
       * <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the
       * <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs
       * to be set to 'false' for the FlexBox to fit the entire viewport.Default value is <code>false</code>.
       * @returns Value of property <code>fitContainer</code>
      */
      getFitContainer(): boolean;

      /**
       * Gets current value of property <code>height</code>.The height of the <code>sap.m.FlexBox</code>.
       * Note that when a percentage is given, for the height to work as expected, the height of the
       * surrounding container must be defined.Default value is <code></code>.
       * @since 1.9.1
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets content of aggregation <code>items</code>.Flex items within the flexible box layout
      */
      getItems(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>justifyContent</code>.Determines the layout behavior along the
       * main axis.Default value is <code>Start</code>.
       * @returns Value of property <code>justifyContent</code>
      */
      getJustifyContent(): sap.m.FlexJustifyContent;

      /**
       * Returns a metadata object for class sap.m.FlexBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>renderType</code>.Determines whether the layout is rendered as
       * a series of divs or as an unordered list (ul)Default value is <code>Div</code>.
       * @returns Value of property <code>renderType</code>
      */
      getRenderType(): sap.m.FlexRendertype;

      /**
       * Gets current value of property <code>width</code>.The width of the <code>sap.m.FlexBox</code>. Note
       * that when a percentage is given, for the width to work as expected, the width of the surrounding
       * container must be defined.Default value is <code></code>.
       * @since 1.9.1
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Gets current value of property <code>wrap</code>.Determines the wrapping behavior of the flex
       * container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.Default
       * value is <code>NoWrap</code>.
       * @since 1.36.0
       * @returns Value of property <code>wrap</code>
      */
      getWrap(): sap.m.FlexWrap;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.ui.core.Control): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.ui.core.Control, iIndex: number): sap.m.FlexBox;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.ui.core.Control[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>alignContent</code>.Determines the layout behavior of container
       * lines when there's extra space along the cross-axis. This property has no effect in Internet
       * Explorer 10.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Stretch</code>.
       * @since 1.36.0
       * @param sAlignContent New value for property <code>alignContent</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAlignContent(sAlignContent: sap.m.FlexAlignContent): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>alignItems</code>.Determines the layout behavior of items along
       * the cross-axis. "Baseline" is not supported in Internet Explorer 10.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Stretch</code>.
       * @param sAlignItems New value for property <code>alignItems</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAlignItems(sAlignItems: sap.m.FlexAlignItems): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.Defines the background style of the
       * <code>sap.m.FlexBox</code>.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>Transparent</code>.
       * @since 1.38.5
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>direction</code>.Determines the direction of the layout of child
       * elements.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Row</code>.
       * @param sDirection New value for property <code>direction</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDirection(sDirection: sap.m.FlexDirection): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>displayInline</code>.Determines whether the
       * <code>sap.m.FlexBox</code> is in block or inline mode.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bDisplayInline New value for property <code>displayInline</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayInline(bDisplayInline: boolean): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>fitContainer</code>.Determines whether the
       * <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the
       * <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs
       * to be set to 'false' for the FlexBox to fit the entire viewport.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bFitContainer New value for property <code>fitContainer</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFitContainer(bFitContainer: boolean): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>height</code>.The height of the <code>sap.m.FlexBox</code>. Note
       * that when a percentage is given, for the height to work as expected, the height of the surrounding
       * container must be defined.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code></code>.
       * @since 1.9.1
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>justifyContent</code>.Determines the layout behavior along the
       * main axis.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Start</code>.
       * @param sJustifyContent New value for property <code>justifyContent</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setJustifyContent(sJustifyContent: sap.m.FlexJustifyContent): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>renderType</code>.Determines whether the layout is rendered as a
       * series of divs or as an unordered list (ul)When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Div</code>.
       * @param sRenderType New value for property <code>renderType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRenderType(sRenderType: sap.m.FlexRendertype): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>width</code>.The width of the <code>sap.m.FlexBox</code>. Note
       * that when a percentage is given, for the width to work as expected, the width of the surrounding
       * container must be defined.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code></code>.
       * @since 1.9.1
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.FlexBox;

      /**
       * Sets a new value for property <code>wrap</code>.Determines the wrapping behavior of the flex
       * container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>NoWrap</code>.
       * @since 1.36.0
       * @param sWrap New value for property <code>wrap</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWrap(sWrap: sap.m.FlexWrap): sap.m.FlexBox;
    }
    /**
     * The Toolbar control is a horizontal container that is most commonly used to display buttons, labels,
     * selects and various other input controls.By default, Toolbar items are shrinkable if they have
     * percent-based width (e.g. Input, Slider) or implement the {@link sap.ui.core.IShrinkable} interface
     * (e.g. Text, Label). This behavior can be overridden by providing {@link sap.m.ToolbarLayoutData} for
     * the Toolbar items.Note: It is recommended that you use {@link sap.m.OverflowToolbar} over Toolbar,
     * unless you want to avoid overflow in favor of shrinking.
     * @resource sap/m/Toolbar.js
    */
    export class Toolbar extends sap.ui.core.Control {

      /**
       * Sets classes and tag according to the context in the page. Possible contexts are header, footer,
       * subheader
      */
      protected applyTagAndContextClassFor: any;

      /**
       * Gets the HTML tag of the root domref
      */
      protected getHTMLTag: any;

      /**
       * Returns if the bar is sensitive to the container context. Implementation of the IBar interface
      */
      protected isContextSensitive: any;

      /**
       * Sets the HTML tag of the root domref
      */
      protected setHTMLTag: any;


      /**
       * Constructor for a new Toolbar.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);

      /**
       * Constructor for a new Toolbar.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(mSettings?: any);

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Toolbar;

      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.Toolbar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.Toolbar</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Toolbar</code> itself.Fired when the user clicks on the toolbar, if the Active property
       * is set to "true".
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Toolbar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.Toolbar;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.Toolbar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.Toolbar</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.Toolbar;


      /**
       * Fires event <code>press</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>srcControl</code> of type <code>sap.ui.core.Control</code>The toolbar item
       * that was pressed</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.Toolbar;

      /**
       * Gets current value of property <code>active</code>.Indicates that the whole toolbar is clickable.
       * The Press event is fired only if Active is set to true.Note: This property should be used when there
       * are no interactive controls inside the toolbar and the toolbar itself is meant to be
       * interactive.Default value is <code>false</code>.
       * @returns Value of property <code>active</code>
      */
      getActive(): boolean;

      /**
       * Returns the currently applied design property of the Toolbar.
      */
      getActiveDesign(): sap.m.ToolbarDesign;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>content</code>.The content of the toolbar.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>design</code>.Defines the toolbar design.Note: Design settings
       * are theme-dependent. They also determine the default height of the toolbar.Default value is
       * <code>Auto</code>.
       * @since 1.16.8
       * @returns Value of property <code>design</code>
      */
      getDesign(): sap.m.ToolbarDesign;

      /**
       * Gets current value of property <code>enabled</code>.Sets the enabled property of all controls
       * defined in the content aggregation.Note: This property does not apply to the toolbar itself, but
       * rather to its items.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>height</code>.Defines the height of the control.Note: By
       * default, the Height property depends on the used theme and the Design property.Default value is
       * <code></code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Returns a metadata object for class sap.m.Toolbar.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the first sap.m.Title control id inside the toolbar for the accessibility
       * @since 1.28
      */
      getTitleId(): String;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the control.By default,
       * Toolbar is a block element. If the the width is not explicitly set, the control will assume its
       * natural size.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Toolbar;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>active</code>.Indicates that the whole toolbar is clickable. The
       * Press event is fired only if Active is set to true.Note: This property should be used when there are
       * no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bActive New value for property <code>active</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActive(bActive: boolean): sap.m.Toolbar;

      /**
       * Sets a new value for property <code>design</code>.Defines the toolbar design.Note: Design settings
       * are theme-dependent. They also determine the default height of the toolbar.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Auto</code>.
       * @since 1.16.8
       * @param sDesign New value for property <code>design</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDesign(sDesign: sap.m.ToolbarDesign): sap.m.Toolbar;

      /**
       * Sets a new value for property <code>enabled</code>.Sets the enabled property of all controls defined
       * in the content aggregation.Note: This property does not apply to the toolbar itself, but rather to
       * its items.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.Toolbar;

      /**
       * Sets a new value for property <code>height</code>.Defines the height of the control.Note: By
       * default, the Height property depends on the used theme and the Design property.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.Toolbar;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the control.By default,
       * Toolbar is a block element. If the the width is not explicitly set, the control will assume its
       * natural size.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Toolbar;
    }
    /**
     * SplitApp is another root element of a UI5 mobile application besides App control. It maintains two
     * NavContainers if running on tablet and one - on phone.The display of master NavContainer depends on
     * the portrait/landscape mode of the device and the mode of SplitApp.
     * @resource sap/m/SplitApp.js
    */
    export class SplitApp extends sap.m.SplitContainer {


      /**
       * Constructor for a new SplitApp.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Fires the orientationChange event after SplitApp has reacted to the browser orientationChange event.
      */
      _onOrientationChange(): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>orientationChange</code> event of this
       * <code>sap.m.SplitApp</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SplitApp</code> itself.Fires when orientation (portrait/landscape) is changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitApp</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachOrientationChange(oData: any, fnFunction: any, oListener?: any): sap.m.SplitApp;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>orientationChange</code> event of this
       * <code>sap.m.SplitApp</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachOrientationChange(fnFunction: any, oListener: any): sap.m.SplitApp;


      /**
       * Fires event <code>orientationChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>landscape</code> of type <code>boolean</code>Returns true if the device is
       * in landscape mode.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireOrientationChange(mArguments: any): sap.m.SplitApp;

      /**
       * Gets current value of property <code>homeIcon</code>.Represents the icon to be displayed on the home
       * screen of iOS devices after the user does "add to home screen".Note that only the first attempt to
       * set the homeIcon is executed, subsequent settings are ignored.The icon must be in PNG format. The
       * property can either store the URL of one single icon or an object holding icon URLs for the
       * different required sizes.Note that if single icon is used for all devices, when scaled, its quality
       * can regress.A desktop icon (used for bookmarks and overriding the favicon) can also be configured.
       * This requires an object to be given and the "icon" property of this object then defines the desktop
       * bookmark icon.For this icon, PNG is not supported by Internet Explorer. The ICO format is supported
       * by all browsers. ICO is also preferred for this desktop icon setting as the file can contain
       * different images for different resolutions.One example
       * one-retina.png','tablet':'tablet-icon.png','tablet@2':'tablet-retina.png','icon':'desktop.ico'});The
       * image size is 57/114 px for the phone and 72/144 px for the tablet.If an object is given but one of
       * the sizes is not given, the largest given icon will be used for this size.On Android, these icons
       * may or may not be used by the device. Chances can be improved by adding glare effect, rounded
       * corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed
       * property to true.
       * @returns Value of property <code>homeIcon</code>
      */
      getHomeIcon(): any;

      /**
       * Returns a metadata object for class sap.m.SplitApp.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Sets a new value for property <code>homeIcon</code>.Represents the icon to be displayed on the home
       * screen of iOS devices after the user does "add to home screen".Note that only the first attempt to
       * set the homeIcon is executed, subsequent settings are ignored.The icon must be in PNG format. The
       * property can either store the URL of one single icon or an object holding icon URLs for the
       * different required sizes.Note that if single icon is used for all devices, when scaled, its quality
       * can regress.A desktop icon (used for bookmarks and overriding the favicon) can also be configured.
       * This requires an object to be given and the "icon" property of this object then defines the desktop
       * bookmark icon.For this icon, PNG is not supported by Internet Explorer. The ICO format is supported
       * by all browsers. ICO is also preferred for this desktop icon setting as the file can contain
       * different images for different resolutions.One example
       * one-retina.png','tablet':'tablet-icon.png','tablet@2':'tablet-retina.png','icon':'desktop.ico'});The
       * image size is 57/114 px for the phone and 72/144 px for the tablet.If an object is given but one of
       * the sizes is not given, the largest given icon will be used for this size.On Android, these icons
       * may or may not be used by the device. Chances can be improved by adding glare effect, rounded
       * corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed
       * property to true.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param oHomeIcon New value for property <code>homeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHomeIcon(oHomeIcon: any): sap.m.SplitApp;
    }
    /**
     * The <code>sap.m.ListBase</code> control provides a base functionality of the <code>sap.m.List</code>
     * and <code>sap.m.Table</code> controls. Selection, deletion, unread states and inset style are also
     * maintained in <code>sap.m.ListBase</code>.<b>Note:</b> The ListBase including all contained items
     * may be completely re-rendered when the data of a bound model is changed. Due to the limited hardware
     * resources of mobile devices this can lead to longer delays for lists that contain many items. As
     * such the usage of a list is not recommended for these use cases.
     * @resource sap/m/ListBase.js
    */
    export class ListBase extends sap.ui.core.Control {


      /**
       * Constructor for a new ListBase.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.ListBase;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.ListItemBase): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>delete</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires when delete icon is pressed by user.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDelete(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>growingFinished</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires after the new growing chunk has been fetched from the model
       * and processed by the control.
       * @since 1.16
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachGrowingFinished(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>growingStarted</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires before the new growing chunk is requested from the model.
       * @since 1.16
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachGrowingStarted(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemPress</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires when an item is pressed unless the item's <code>type</code>
       * property is <code>Inactive</code>.
       * @since 1.20
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemPress(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires when selection is changed via user interaction. In
       * <code>MultiSelect</code> mode, this event is also fired on deselection.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires when selection is changed via user interaction inside the
       * control.
       * @since 1.16
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>swipe</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires after user's swipe action and before the
       * <code>swipeContent</code> is shown. On the <code>swipe</code> event handler,
       * <code>swipeContent</code> can be changed according to the swiped item.Calling the
       * <code>preventDefault</code> method of the event cancels the swipe action.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSwipe(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>updateFinished</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires after <code>items</code> binding is updated and processed
       * by the control.
       * @since 1.16.3
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUpdateFinished(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>updateStarted</code> event of this
       * <code>sap.m.ListBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ListBase</code> itself.Fires before <code>items</code> binding is updated (e.g. sorting,
       * filtering)<b>Note:</b> Event handler should not invalidate the control.
       * @since 1.16.3
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUpdateStarted(oData: any, fnFunction: any, oListener?: any): sap.m.ListBase;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.ListBase;

      /**
       * Destroys the headerToolbar in the aggregation <code>headerToolbar</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderToolbar(): sap.m.ListBase;

      /**
       * Destroys the infoToolbar in the aggregation <code>infoToolbar</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyInfoToolbar(): sap.m.ListBase;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.ListBase;

      /**
       * Destroys the swipeContent in the aggregation <code>swipeContent</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySwipeContent(): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>delete</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDelete(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>growingFinished</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachGrowingFinished(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>growingStarted</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachGrowingStarted(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemPress</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.20
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemPress(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionChange(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>swipe</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSwipe(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>updateFinished</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16.3
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUpdateFinished(fnFunction: any, oListener: any): sap.m.ListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>updateStarted</code> event of this
       * <code>sap.m.ListBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.16.3
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUpdateStarted(fnFunction: any, oListener: any): sap.m.ListBase;


      /**
       * Fires event <code>delete</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired
       * the delete event.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDelete(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>growingFinished</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>actual</code> of type <code>int</code>Actual number of
       * items.</li><li><code>total</code> of type <code>int</code>Total number of items.</li></ul>
       * @since 1.16
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireGrowingFinished(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>growingStarted</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>actual</code> of type <code>int</code>Actual number of
       * items.</li><li><code>total</code> of type <code>int</code>Total number of items.</li></ul>
       * @since 1.16
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireGrowingStarted(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>itemPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired
       * the pressed event.</li><li><code>srcControl</code> of type <code>sap.ui.core.Control</code>The
       * control which caused the press event within the container.</li></ul>
       * @since 1.20
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemPress(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired
       * the select event.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>selectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item whose
       * selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned.
       * This parameter can be used for single-selection modes.</li><li><code>listItems</code> of type
       * <code>sap.m.ListItemBase[]</code>Array of items whose selection has changed. This parameter can be
       * used for <code>MultiSelect</code> mode.</li><li><code>selected</code> of type
       * <code>boolean</code>Indicates whether the <code>listItem</code> parameter is selected or
       * not.</li></ul>
       * @since 1.16
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionChange(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>swipe</code> to attached listeners.Listeners may prevent the default action of
       * this event by using the <code>preventDefault</code>-method on the event object.Expects the following
       * event parameters:<ul><li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which
       * fired the swipe.</li><li><code>swipeContent</code> of type
       * <code>sap.ui.core.Control</code>Aggregated <code>swipeContent</code> control that is shown on the
       * right hand side of the item.</li><li><code>srcControl</code> of type
       * <code>sap.ui.core.Control</code>Holds which control caused the swipe event within the
       * item.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireSwipe(mArguments: any): boolean;

      /**
       * Fires event <code>updateFinished</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>reason</code> of type <code>string</code>The reason of the update, e.g.
       * Binding, Filter, Sort, Growing, Change, Refresh, Context.</li><li><code>actual</code> of type
       * <code>int</code>Actual number of items.</li><li><code>total</code> of type <code>int</code>The total
       * count of bound items. This can be used if the <code>growing</code> property is set to
       * <code>true</code>.</li></ul>
       * @since 1.16.3
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUpdateFinished(mArguments: any): sap.m.ListBase;

      /**
       * Fires event <code>updateStarted</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>reason</code> of type <code>string</code>The reason of the update, e.g.
       * Binding, Filter, Sort, Growing, Change, Refresh, Context.</li><li><code>actual</code> of type
       * <code>int</code>Actual number of items.</li><li><code>total</code> of type <code>int</code>The total
       * count of bound items. This can be used if the <code>growing</code> property is set to
       * <code>true</code>.</li></ul>
       * @since 1.16.3
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUpdateStarted(mArguments: any): sap.m.ListBase;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.28.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>enableBusyIndicator</code>.When this property is set to
       * <code>true</code>, the control will automatically display a busy indicator when it detects that data
       * is being loaded. This busy indicator blocks the interaction with the items until data loading is
       * finished.By default, the busy indicator will be shown after one second. This behavior can be
       * customized by setting the <code>busyIndicatorDelay</code> property.Default value is
       * <code>true</code>.
       * @since 1.20.2
       * @returns Value of property <code>enableBusyIndicator</code>
      */
      getEnableBusyIndicator(): boolean;

      /**
       * Gets current value of property <code>footerText</code>.Defines the footer text that appears in the
       * control.
       * @returns Value of property <code>footerText</code>
      */
      getFooterText(): string;

      /**
       * Gets current value of property <code>growing</code>.If set to <code>true</code>, enables the growing
       * feature of the control to load more items by requesting from the model.<b>Note:</b>: This feature
       * only works when an <code>items</code> aggregation is bound. Growing must not be used together with
       * two-way binding.Default value is <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>growing</code>
      */
      getGrowing(): boolean;

      /**
       * Gets current value of property <code>growingDirection</code>.Defines the direction of the growing
       * feature.If set to <code>Downwards</code> the user has to scroll down to load more items or the
       * growing button is displayed at the bottom.If set to <code>Upwards</code> the user has to scroll up
       * to load more items or the growing button is displayed at the top.Default value is
       * <code>Downwards</code>.
       * @since 1.40.0
       * @returns Value of property <code>growingDirection</code>
      */
      getGrowingDirection(): sap.m.ListGrowingDirection;

      /**
       * Returns growing information as object with "actual" and "total" keys.Note: This function returns
       * "null" if "growing" feature is disabled.
       * @since 1.16
      */
      getGrowingInfo(): any;

      /**
       * Gets current value of property <code>growingScrollToLoad</code>.If set to true, the user can scroll
       * down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the
       * control.<b>Note:</b> This property can only be used if the <code>growing</code> property is set to
       * <code>true</code> and only if there is one instance of <code>sap.m.List</code> or
       * <code>sap.m.Table</code> inside the scrollable scroll container (e.g
       * <code>sap.m.Page</code>).Default value is <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>growingScrollToLoad</code>
      */
      getGrowingScrollToLoad(): boolean;

      /**
       * Gets current value of property <code>growingThreshold</code>.Defines the number of items to be
       * requested from the model for each grow.This property can only be used if the <code>growing</code>
       * property is set to <code>true</code>.Default value is <code>20</code>.
       * @since 1.16.0
       * @returns Value of property <code>growingThreshold</code>
      */
      getGrowingThreshold(): number;

      /**
       * Gets current value of property <code>growingTriggerText</code>.Defines the text displayed on the
       * growing button. The default is a translated text ("More") coming from the message bundle.This
       * property can only be used if the <code>growing</code> property is set to <code>true</code>.
       * @since 1.16.0
       * @returns Value of property <code>growingTriggerText</code>
      */
      getGrowingTriggerText(): string;

      /**
       * Gets current value of property <code>headerDesign</code>.Defines the header style of the control.
       * Possible values are <code>Standard</code> and <code>Plain</code>.Default value is
       * <code>Standard</code>.
       * @since 1.14
       * @returns Value of property <code>headerDesign</code>
      */
      getHeaderDesign(): sap.m.ListHeaderDesign;

      /**
       * Gets current value of property <code>headerText</code>.Defines the header text that appears in the
       * control.<b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is
       * ignored.
       * @returns Value of property <code>headerText</code>
      */
      getHeaderText(): string;

      /**
       * Gets content of aggregation <code>headerToolbar</code>.The header area can be used as a toolbar to
       * add extra controls for user interactions.<b>Note:</b> When set, this overwrites the
       * <code>headerText</code> property.
       * @since 1.16
      */
      getHeaderToolbar(): sap.m.Toolbar;

      /**
       * Gets current value of property <code>includeItemInSelection</code>.Defines whether the items are
       * selectable by clicking on the item itself (<code>true</code>) rather than having to set the
       * selection control first.<b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this
       * functionality by default.Default value is <code>false</code>.
       * @returns Value of property <code>includeItemInSelection</code>
      */
      getIncludeItemInSelection(): boolean;

      /**
       * Gets content of aggregation <code>infoToolbar</code>.A toolbar that is placed below the header to
       * show extra information to the user.
       * @since 1.16
      */
      getInfoToolbar(): sap.m.Toolbar;

      /**
       * Gets current value of property <code>inset</code>.Defines the indentation of the container. Setting
       * it to <code>true</code> indents the list.Default value is <code>false</code>.
       * @returns Value of property <code>inset</code>
      */
      getInset(): boolean;

      /**
       * Returns ItemNavigation for controls uses List
       * @since 1.16.5
      */
      getItemNavigation(): sap.ui.core.delegate.ItemNavigation | any;

      /**
       * Gets content of aggregation <code>items</code>.Defines the items contained within this control.
      */
      getItems(): sap.m.ListItemBase[];

      /**
       * Gets current value of property <code>keyboardMode</code>.Defines keyboard handling behavior of the
       * control.Default value is <code>Navigation</code>.
       * @since 1.38.0
       * @returns Value of property <code>keyboardMode</code>
      */
      getKeyboardMode(): sap.m.ListKeyboardMode;

      /**
       * Returns the last list mode, the mode that is renderedThis can be used to detect mode changes during
       * rendering
      */
      getLastMode(): void;

      /**
       * Returns a metadata object for class sap.m.ListBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mode</code>.Defines the mode of the control (e.g.
       * <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).Default
       * value is <code>None</code>.
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.ListMode;

      /**
       * Gets current value of property <code>modeAnimationOn</code>.Defines if animations will be shown
       * while switching between modes.Default value is <code>true</code>.
       * @returns Value of property <code>modeAnimationOn</code>
      */
      getModeAnimationOn(): boolean;

      /**
       * Gets current value of property <code>noDataText</code>.This text is displayed when the control
       * contains no items.
       * @returns Value of property <code>noDataText</code>
      */
      getNoDataText(): string;

      /**
       * Gets current value of property <code>rememberSelections</code>.If set to true, this control
       * remembers and retains the selection of the items after a binding update has been performed (e.g.
       * sorting, filtering).<b>Note:</b> This feature works only if two-way data binding for the
       * <code>selected</code> property of the item is not used. It also needs to be turned off if the
       * binding context of the item does not always point to the same entry in the model, for example, if
       * the order of the data in the <code>JSONModel</code> is changed.Default value is <code>true</code>.
       * @since 1.16.6
       * @returns Value of property <code>rememberSelections</code>
      */
      getRememberSelections(): boolean;

      /**
       * Returns the binding contexts of the selected items.Note: This method returns an empty array if no
       * databinding is used.
       * @since 1.18.6
       * @param bAll Set true to include even invisible selected items(e.g. the selections from the previous
       * filters).        Note: In single selection modes, only the last selected item's binding context is
       * returned in array.
      */
      getSelectedContexts(bAll: boolean): any[];

      /**
       * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is
       * enabled and multiple items are selected, only the up-most selected item is returned.
      */
      getSelectedItem(): sap.m.ListItemBase;

      /**
       * Returns an array containing the selected list items. If no items are selected, an empty array is
       * returned.
      */
      getSelectedItems(): sap.m.ListItemBase[];

      /**
       * Gets current value of property <code>showNoData</code>.Defines whether or not the text specified in
       * the <code>noDataText</code> property is displayed.Default value is <code>true</code>.
       * @returns Value of property <code>showNoData</code>
      */
      getShowNoData(): boolean;

      /**
       * Gets current value of property <code>showSeparators</code>.Defines which item separator style will
       * be used.Default value is <code>All</code>.
       * @returns Value of property <code>showSeparators</code>
      */
      getShowSeparators(): sap.m.ListSeparators;

      /**
       * Gets current value of property <code>showUnread</code>.Activates the unread indicator for all items,
       * if set to <code>true</code>.Default value is <code>false</code>.
       * @returns Value of property <code>showUnread</code>
      */
      getShowUnread(): boolean;

      /**
       * Gets content of aggregation <code>swipeContent</code>.User can swipe to bring in this control on the
       * right hand side of an item.<b>Note:</b> For non-touch devices, this functionality is ignored.
      */
      getSwipeContent(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>swipeDirection</code>.Defines the direction of the swipe
       * movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the
       * <code>swipeContent</code> aggregation.Default value is <code>Both</code>.
       * @returns Value of property <code>swipeDirection</code>
      */
      getSwipeDirection(): sap.m.SwipeDirection;

      /**
       * Returns swiped list item. When no item is swiped, "null" is returned.
      */
      getSwipedItem(): sap.m.ListItemBase;

      /**
       * Gets current value of property <code>width</code>.Sets the width of the control.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.ListItemBase): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.ListItemBase, iIndex: number): sap.m.ListBase;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.ListItemBase[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.ListItemBase): sap.m.ListItemBase;

      /**
       * Removes visible selections of the current selection mode.
       * @param bAll Since version 1.16.3. This control keeps old selections after filter or sorting. Set
       * this parameter "true" to remove all selections.
      */
      removeSelections(bAll: boolean): sap.m.ListBase;

      /**
       * Select all items in "MultiSelection" mode.
       * @since 1.16
      */
      selectAll(): sap.m.ListBase;

      /**
       * Sets a new value for property <code>enableBusyIndicator</code>.When this property is set to
       * <code>true</code>, the control will automatically display a busy indicator when it detects that data
       * is being loaded. This busy indicator blocks the interaction with the items until data loading is
       * finished.By default, the busy indicator will be shown after one second. This behavior can be
       * customized by setting the <code>busyIndicatorDelay</code> property.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.20.2
       * @param bEnableBusyIndicator New value for property <code>enableBusyIndicator</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableBusyIndicator(bEnableBusyIndicator: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>footerText</code>.Defines the footer text that appears in the
       * control.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sFooterText New value for property <code>footerText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooterText(sFooterText: string): sap.m.ListBase;

      /**
       * Sets a new value for property <code>growing</code>.If set to <code>true</code>, enables the growing
       * feature of the control to load more items by requesting from the model.<b>Note:</b>: This feature
       * only works when an <code>items</code> aggregation is bound. Growing must not be used together with
       * two-way binding.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.16.0
       * @param bGrowing New value for property <code>growing</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowing(bGrowing: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>growingDirection</code>.Defines the direction of the growing
       * feature.If set to <code>Downwards</code> the user has to scroll down to load more items or the
       * growing button is displayed at the bottom.If set to <code>Upwards</code> the user has to scroll up
       * to load more items or the growing button is displayed at the top.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Downwards</code>.
       * @since 1.40.0
       * @param sGrowingDirection New value for property <code>growingDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowingDirection(sGrowingDirection: sap.m.ListGrowingDirection): sap.m.ListBase;

      /**
       * Sets a new value for property <code>growingScrollToLoad</code>.If set to true, the user can scroll
       * down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the
       * control.<b>Note:</b> This property can only be used if the <code>growing</code> property is set to
       * <code>true</code> and only if there is one instance of <code>sap.m.List</code> or
       * <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @since 1.16.0
       * @param bGrowingScrollToLoad New value for property <code>growingScrollToLoad</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowingScrollToLoad(bGrowingScrollToLoad: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>growingThreshold</code>.Defines the number of items to be
       * requested from the model for each grow.This property can only be used if the <code>growing</code>
       * property is set to <code>true</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>20</code>.
       * @since 1.16.0
       * @param iGrowingThreshold New value for property <code>growingThreshold</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowingThreshold(iGrowingThreshold: number): sap.m.ListBase;

      /**
       * Sets a new value for property <code>growingTriggerText</code>.Defines the text displayed on the
       * growing button. The default is a translated text ("More") coming from the message bundle.This
       * property can only be used if the <code>growing</code> property is set to <code>true</code>.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @since 1.16.0
       * @param sGrowingTriggerText New value for property <code>growingTriggerText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowingTriggerText(sGrowingTriggerText: string): sap.m.ListBase;

      /**
       * Sets a new value for property <code>headerDesign</code>.Defines the header style of the control.
       * Possible values are <code>Standard</code> and <code>Plain</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Standard</code>.
       * @since 1.14
       * @param sHeaderDesign New value for property <code>headerDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderDesign(sHeaderDesign: sap.m.ListHeaderDesign): sap.m.ListBase;

      /**
       * Sets a new value for property <code>headerText</code>.Defines the header text that appears in the
       * control.<b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is
       * ignored.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sHeaderText New value for property <code>headerText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderText(sHeaderText: string): sap.m.ListBase;

      /**
       * Sets the aggregated <code>headerToolbar</code>.
       * @since 1.16
       * @param oHeaderToolbar The headerToolbar to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderToolbar(oHeaderToolbar: sap.m.Toolbar): sap.m.ListBase;

      /**
       * Sets a new value for property <code>includeItemInSelection</code>.Defines whether the items are
       * selectable by clicking on the item itself (<code>true</code>) rather than having to set the
       * selection control first.<b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this
       * functionality by default.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>false</code>.
       * @param bIncludeItemInSelection New value for property <code>includeItemInSelection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIncludeItemInSelection(bIncludeItemInSelection: boolean): sap.m.ListBase;

      /**
       * Sets the aggregated <code>infoToolbar</code>.
       * @since 1.16
       * @param oInfoToolbar The infoToolbar to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfoToolbar(oInfoToolbar: sap.m.Toolbar): sap.m.ListBase;

      /**
       * Sets a new value for property <code>inset</code>.Defines the indentation of the container. Setting
       * it to <code>true</code> indents the list.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bInset New value for property <code>inset</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInset(bInset: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>keyboardMode</code>.Defines keyboard handling behavior of the
       * control.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Navigation</code>.
       * @since 1.38.0
       * @param sKeyboardMode New value for property <code>keyboardMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKeyboardMode(sKeyboardMode: sap.m.ListKeyboardMode): sap.m.ListBase;

      /**
       * Sets a new value for property <code>mode</code>.Defines the mode of the control (e.g.
       * <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>None</code>.
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.ListMode): sap.m.ListBase;

      /**
       * Sets a new value for property <code>modeAnimationOn</code>.Defines if animations will be shown while
       * switching between modes.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>true</code>.
       * @param bModeAnimationOn New value for property <code>modeAnimationOn</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setModeAnimationOn(bModeAnimationOn: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>noDataText</code>.This text is displayed when the control
       * contains no items.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sNoDataText New value for property <code>noDataText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNoDataText(sNoDataText: string): sap.m.ListBase;

      /**
       * Sets a new value for property <code>rememberSelections</code>.If set to true, this control remembers
       * and retains the selection of the items after a binding update has been performed (e.g. sorting,
       * filtering).<b>Note:</b> This feature works only if two-way data binding for the
       * <code>selected</code> property of the item is not used. It also needs to be turned off if the
       * binding context of the item does not always point to the same entry in the model, for example, if
       * the order of the data in the <code>JSONModel</code> is changed.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.16.6
       * @param bRememberSelections New value for property <code>rememberSelections</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRememberSelections(bRememberSelections: boolean): sap.m.ListBase;

      /**
       * Selects or deselects the given list item.
       * @param oListItem The list item whose selection to be changed. This parameter is mandatory.
       * @param bSelect Sets selected status of the list item. Default value is true.
      */
      setSelectedItem(oListItem: sap.m.ListItemBase, bSelect: boolean): sap.m.ListBase;

      /**
       * Sets a list item to be selected by id. In single mode the method removes the previous selection.
       * @param sId The id of the list item whose selection to be changed.
       * @param bSelect Sets selected status of the list item. Default value is true.
      */
      setSelectedItemById(sId: string, bSelect: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>showNoData</code>.Defines whether or not the text specified in
       * the <code>noDataText</code> property is displayed.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowNoData New value for property <code>showNoData</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowNoData(bShowNoData: boolean): sap.m.ListBase;

      /**
       * Sets a new value for property <code>showSeparators</code>.Defines which item separator style will be
       * used.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>All</code>.
       * @param sShowSeparators New value for property <code>showSeparators</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSeparators(sShowSeparators: sap.m.ListSeparators): sap.m.ListBase;

      /**
       * Sets a new value for property <code>showUnread</code>.Activates the unread indicator for all items,
       * if set to <code>true</code>.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>false</code>.
       * @param bShowUnread New value for property <code>showUnread</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowUnread(bShowUnread: boolean): sap.m.ListBase;

      /**
       * Sets the aggregated <code>swipeContent</code>.
       * @param oSwipeContent The swipeContent to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSwipeContent(oSwipeContent: sap.ui.core.Control): sap.m.ListBase;

      /**
       * Sets a new value for property <code>swipeDirection</code>.Defines the direction of the swipe
       * movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the
       * <code>swipeContent</code> aggregation.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Both</code>.
       * @param sSwipeDirection New value for property <code>swipeDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSwipeDirection(sSwipeDirection: sap.m.SwipeDirection): sap.m.ListBase;

      /**
       * Sets a new value for property <code>width</code>.Sets the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.ListBase;

      /**
       * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is
       * done, you can/should use this method to hide swipeContent from screen.Note: If users try to tap
       * inside of the list but outside of the swipeContent then control hides automatically.
       * @param oCallback This callback function is called with two parameters(swipedListItem and
       * swipedContent) after swipe-out animation is finished.
      */
      swipeOut(oCallback: any): sap.m.ListBase;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.ListBase;
    }
    /**
     * The <code>sap.m.ComboBox</code> control combines a dropdown list with items and a text field with a
     * button,allowing the user to either type a value directly or choose from the list of existing items.
     * @resource sap/m/ComboBox.js
    */
    export class ComboBox extends sap.m.ComboBoxBase {


      /**
       * Constructor for a new <code>sap.m.ComboBox</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this
       * <code>sap.m.ComboBox</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ComboBox</code> itself.This event is fired when the user types something that matches
       * with an item in the list;it is also fired when the user presses on a list item, or when navigating
       * via keyboard.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ComboBox</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.ComboBox;

      /**
       * Creates a picker popup container where the selection should take place.To be overwritten by
       * subclasses.
       * @param sPickerType undefined
       * @returns The picker popup to be used.
      */
      createPicker(sPickerType: string): sap.m.Popover | sap.m.Dialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this
       * <code>sap.m.ComboBox</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionChange(fnFunction: any, oListener: any): sap.m.ComboBox;


      /**
       * Fires event <code>selectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected
       * item.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionChange(mArguments: any): sap.m.ComboBox;

      /**
       * Gets the default selected item from the aggregation named <code>items</code>.
      */
      getDefaultSelectedItem(): void;

      /**
       * Gets aggregation <code>items</code>.<b>Note</b>: This is the default aggregation.
      */
      getItems(): sap.ui.core.Item[];

      /**
       * Returns a metadata object for class sap.m.ComboBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets the selected item object from the aggregation named <code>items</code>.
       * @returns The current target of the <code>selectedItem</code> association,or <code>null</code>.
      */
      getSelectedItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>selectedItemId</code>.ID of the selected item.Default value is
       * <code></code>.
       * @returns Value of property <code>selectedItemId</code>
      */
      getSelectedItemId(): string;

      /**
       * Gets current value of property <code>selectedKey</code>.Key of the selected item.<b>Note:</b> If
       * duplicate keys exist, the first item matching the key is used.Default value is <code></code>.
       * @returns Value of property <code>selectedKey</code>
      */
      getSelectedKey(): string;

      /**
       * Gets current value of property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a{@link sap.ui.core.ListItem} are shown.Default value is
       * <code>false</code>.
       * @since 1.32.3
       * @returns Value of property <code>showSecondaryValues</code>
      */
      getShowSecondaryValues(): boolean;

      /**
       * This event handler is called before the picker popup is opened.
      */
      onBeforeOpen(): void;

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param vItem The item to be removed or its index or ID.
       * @returns The removed item or <code>null</code>.
      */
      removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Sets the start and end positions of the current text selection.
       * @since 1.22.1
       * @param iSelectionStart The index of the first selected character.
       * @param iSelectionEnd The index of the character after the last selected character.
      */
      selectText(iSelectionStart: number, iSelectionEnd: number): any;

      /**
       * Sets the <code>selectedItem</code> association.Default value is <code>null</code>.
       * @param vItem New value for the <code>selectedItem</code> association.If an ID of a
       * <code>sap.ui.core.Item</code> is given, the item with this ID becomes the<code>selectedItem</code>
       * association.Alternatively, a <code>sap.ui.core.Item</code> instance may be given or
       * <code>null</code> to clearthe selection.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItem(vItem: string | sap.ui.core.Item | any): sap.m.ComboBox;

      /**
       * Sets the <code>selectedItemId</code> property.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @param vItem New value for property <code>selectedItemId</code>.If the provided <code>vItem</code>
       * is an empty string <code>""</code> or <code>undefined</code>,the selection is cleared.If the ID has
       * no corresponding aggregated item, the selected item is not changed.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItemId(vItem: string | any): sap.m.ComboBox;

      /**
       * Sets the <code>selectedKey</code> property.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @param sKey New value for property <code>selectedKey</code>.If the provided <code>sKey</code> is an
       * empty string <code>""</code> or <code>undefined</code>,the selection is cleared.If duplicate keys
       * exist, the first item matching the key is selected.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedKey(sKey: string): sap.m.ComboBox;

      /**
       * Sets a new value for property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a{@link sap.ui.core.ListItem} are shown.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.32.3
       * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.ComboBox;

      /**
       * Synchronizes the <code>selectedItem</code> association and the <code>selectedItemId</code> property.
      */
      synchronizeSelection(): void;
    }
    /**
     * The <code>sap.m.TextArea</code> enables multi-line text input.
     * @resource sap/m/TextArea.js
    */
    export class TextArea extends sap.m.InputBase {


      /**
       * Constructor for a new TextArea.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.TextArea</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.TextArea</code> itself.Is fired whenever the user has modified the text shown on the
       * text area.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TextArea</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.TextArea;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.TextArea</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.TextArea;


      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The new <code>value</code> of the
       * control.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.TextArea;

      /**
       * Gets current value of property <code>cols</code>.Defines the visible width of the control, in
       * average character widths.<b>Note:</b> The <code>width</code> property wins over the
       * <code>cols</code> property, if both are set.Default value is <code>20</code>.
       * @returns Value of property <code>cols</code>
      */
      getCols(): number;

      /**
       * Gets current value of property <code>growing</code>.Indicates the ability of the control to
       * automatically grow and shrink dynamically with its content.<b>Note:</b> The <code>height</code>
       * property is ignored, if this property set to <code>true</code>.Default value is <code>false</code>.
       * @since 1.38.0
       * @returns Value of property <code>growing</code>
      */
      getGrowing(): boolean;

      /**
       * Gets current value of property <code>growingMaxLines</code>.Defines the maximum number of lines that
       * the control can grow.Default value is <code>0</code>.
       * @since 1.38.0
       * @returns Value of property <code>growingMaxLines</code>
      */
      getGrowingMaxLines(): number;

      /**
       * Gets current value of property <code>height</code>.Defines the height of the control.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets current value of property <code>maxLength</code>.Defines the maximum number of characters that
       * the <code>value</code> can be.Default value is <code>0</code>.
       * @returns Value of property <code>maxLength</code>
      */
      getMaxLength(): number;

      /**
       * Returns a metadata object for class sap.m.TextArea.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>rows</code>.Defines the number of visible text lines for the
       * control.<b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if
       * both are set.Default value is <code>2</code>.
       * @returns Value of property <code>rows</code>
      */
      getRows(): number;

      /**
       * Getter for property <code>value</code>.Defines the value of the control's input field.Default value
       * is <code>undefined</code>
       * @returns the value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueLiveUpdate</code>.Indicates when the <code>value</code>
       * property gets updated with the user changes. Setting it to <code>true</code> updates the
       * <code>value</code> property whenever the user has modified the text shown on the text area.Default
       * value is <code>false</code>.
       * @since 1.30
       * @returns Value of property <code>valueLiveUpdate</code>
      */
      getValueLiveUpdate(): boolean;

      /**
       * Gets current value of property <code>wrapping</code>.Indicates how the control wraps the text, e.g.
       * <code>Soft</code>, <code>Hard</code>, <code>Off</code>.Default value is <code>None</code>.
       * @returns Value of property <code>wrapping</code>
      */
      getWrapping(): sap.ui.core.Wrapping;

      /**
       * Sets a new value for property <code>cols</code>.Defines the visible width of the control, in average
       * character widths.<b>Note:</b> The <code>width</code> property wins over the <code>cols</code>
       * property, if both are set.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>20</code>.
       * @param iCols New value for property <code>cols</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCols(iCols: number): sap.m.TextArea;

      /**
       * Sets a new value for property <code>growing</code>.Indicates the ability of the control to
       * automatically grow and shrink dynamically with its content.<b>Note:</b> The <code>height</code>
       * property is ignored, if this property set to <code>true</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.38.0
       * @param bGrowing New value for property <code>growing</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowing(bGrowing: boolean): sap.m.TextArea;

      /**
       * Sets a new value for property <code>growingMaxLines</code>.Defines the maximum number of lines that
       * the control can grow.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>0</code>.
       * @since 1.38.0
       * @param iGrowingMaxLines New value for property <code>growingMaxLines</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowingMaxLines(iGrowingMaxLines: number): sap.m.TextArea;

      /**
       * Sets a new value for property <code>height</code>.Defines the height of the control.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.TextArea;

      /**
       * Sets a new value for property <code>maxLength</code>.Defines the maximum number of characters that
       * the <code>value</code> can be.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param iMaxLength New value for property <code>maxLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLength(iMaxLength: number): sap.m.TextArea;

      /**
       * Sets a new value for property <code>rows</code>.Defines the number of visible text lines for the
       * control.<b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if
       * both are set.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>2</code>.
       * @param iRows New value for property <code>rows</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRows(iRows: number): sap.m.TextArea;

      /**
       * Sets a new value for property <code>valueLiveUpdate</code>.Indicates when the <code>value</code>
       * property gets updated with the user changes. Setting it to <code>true</code> updates the
       * <code>value</code> property whenever the user has modified the text shown on the text area.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @since 1.30
       * @param bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueLiveUpdate(bValueLiveUpdate: boolean): sap.m.TextArea;

      /**
       * Sets a new value for property <code>wrapping</code>.Indicates how the control wraps the text, e.g.
       * <code>Soft</code>, <code>Hard</code>, <code>Off</code>.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>None</code>.
       * @param sWrapping New value for property <code>wrapping</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWrapping(sWrapping: sap.ui.core.Wrapping): sap.m.TextArea;
    }
    /**
     * The CheckBox control allows the user to select one or multiple items from a list. To select each
     * item the user has to select the square box in front of it.
     * @resource sap/m/CheckBox.js
    */
    export class CheckBox extends sap.ui.core.Control {


      /**
       * Constructor for a new CheckBox.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId The ID for the new control, generated automatically if no ID is given
       * @param mSettings The Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.CheckBox;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.CheckBox;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.CheckBox</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.CheckBox</code> itself.Event is triggered when the control status is changed by the user
       * by selecting or deselecting the checkbox.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.CheckBox</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.CheckBox;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.CheckBox</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.CheckBox;


      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selected</code> of type <code>boolean</code>Checks whether the CheckBox is
       * marked or not .</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.CheckBox;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>activeHandling</code>.Flag to switch on activeHandling, when it
       * is switched off, there will be no visual changes on active state. Default value is 'true'Default
       * value is <code>true</code>.
       * @returns Value of property <code>activeHandling</code>
      */
      getActiveHandling(): boolean;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>editable</code>.Specifies whether the user shall be allowed to
       * edit the state of the checkboxDefault value is <code>true</code>.
       * @since 1.25
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Disables the Checkbox. Disabled controls are not
       * interactive and are rendered differently according to the theme.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Returns a metadata object for class sap.m.CheckBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.The 'name' property to be used in the HTML code,
       * for example for HTML forms that send data to the server via submit.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>selected</code>.Stores the state of the checkbox whether it is
       * selected or not.Default value is <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Returns the CheckBox`s tab index.
       * @since 1.22
       * @returns iTabIndex for Checkbox
      */
      getTabIndex(): number;

      /**
       * Gets current value of property <code>text</code>.Defines the text displayed next to the checkbox
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Aligns the text of the checkbox. Available
       * alignment settings are "Begin", "Center", "End", "Left", and "Right".Default value is
       * <code>Begin</code>.
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR. Alternatively, the control can inherit the text direction from its parent container.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>valueState</code>.Accepts the core enumeration ValueState.type
       * that supports 'None', 'Error', 'Warning' and 'Success'.Default value is <code>None</code>.
       * @since 1.38
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>width</code>.Width of the checkbox`s labelDefault value is
       * <code></code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>activeHandling</code>.Flag to switch on activeHandling, when it
       * is switched off, there will be no visual changes on active state. Default value is 'true'When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bActiveHandling New value for property <code>activeHandling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveHandling(bActiveHandling: boolean): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>editable</code>.Specifies whether the user shall be allowed to
       * edit the state of the checkboxWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.25
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>enabled</code>.Disables the Checkbox. Disabled controls are not
       * interactive and are rendered differently according to the theme.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>name</code>.The 'name' property to be used in the HTML code, for
       * example for HTML forms that send data to the server via submit.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.CheckBox;

      /**
       * Sets the tab index of the control
       * @since 1.16
       * @param iTabIndex The tab index should be greater than or equal -1
      */
      setTabIndex(iTabIndex: number): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>text</code>.Defines the text displayed next to the checkboxWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>textAlign</code>.Aligns the text of the checkbox. Available
       * alignment settings are "Begin", "Center", "End", "Left", and "Right".When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Begin</code>.
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR. Alternatively, the control can inherit the text direction from its parent container.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>valueState</code>.Accepts the core enumeration ValueState.type
       * that supports 'None', 'Error', 'Warning' and 'Success'.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>None</code>.
       * @since 1.38
       * @param sValueState New value for property <code>valueState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueState(sValueState: sap.ui.core.ValueState): sap.m.CheckBox;

      /**
       * Sets a new value for property <code>width</code>.Width of the checkbox`s labelWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.CheckBox;
    }
    /**
     * The Carousel control can be used to navigate through a list of sap.m controls just like flipping
     * through the pages of a book by swiping right or left. An indicator shows the current position within
     * the control list. When displayed in a desktop browser, a left- and right-arrow button is displayed
     * on the carousel's sides, which can be used to navigate through the carousel.Note: when displa
     * Internet Explorer 9, page changes are not animated.
     * @resource sap/m/Carousel.js
    */
    export class Carousel extends sap.ui.core.Control {


      /**
       * Constructor for a new Carousel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some page to the aggregation <code>pages</code>.
       * @param oPage the page to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addPage(oPage: sap.ui.core.Control): sap.m.Carousel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>loadPage</code> event of this
       * <code>sap.m.Carousel</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Carousel</code> itself.Carousel requires a new page to be loaded. This event may be used
       * to fill the content of that page
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Carousel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLoadPage(oData: any, fnFunction: any, oListener?: any): sap.m.Carousel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>pageChanged</code> event of this
       * <code>sap.m.Carousel</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Carousel</code> itself.This event is fired after a carousel swipe has been completed. It
       * is triggered both by physical swipe events and through API carousel manipulations such as calling
       * 'next', 'previous' or 'setActivePageId' functions.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Carousel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPageChanged(oData: any, fnFunction: any, oListener?: any): sap.m.Carousel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>unloadPage</code> event of this
       * <code>sap.m.Carousel</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Carousel</code> itself.Carousel does not display a page any longer and unloads it. This
       * event may be used to clean up the content of that page.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Carousel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUnloadPage(oData: any, fnFunction: any, oListener?: any): sap.m.Carousel;

      /**
       * Destroys all the pages in the aggregation <code>pages</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPages(): sap.m.Carousel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>loadPage</code> event of this
       * <code>sap.m.Carousel</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLoadPage(fnFunction: any, oListener: any): sap.m.Carousel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>pageChanged</code> event of this
       * <code>sap.m.Carousel</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPageChanged(fnFunction: any, oListener: any): sap.m.Carousel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>unloadPage</code> event of this
       * <code>sap.m.Carousel</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUnloadPage(fnFunction: any, oListener: any): sap.m.Carousel;


      /**
       * Fires event <code>loadPage</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>pageId</code> of type <code>string</code>Id of the page which will be
       * loaded</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLoadPage(mArguments: any): sap.m.Carousel;

      /**
       * Fires event <code>pageChanged</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>oldActivePageId</code> of type <code>string</code>Id of the page which was
       * active before the page change.</li><li><code>newActivePageId</code> of type <code>string</code>Id of
       * the page which is active after the page change.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePageChanged(mArguments: any): sap.m.Carousel;

      /**
       * Fires event <code>unloadPage</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>pageId</code> of type <code>string</code>Id of the page which will be
       * unloaded</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUnloadPage(mArguments: any): sap.m.Carousel;

      /**
       * ID of the element which is the current target of the association <code>activePage</code>, or
       * <code>null</code>.
      */
      getActivePage(): any;

      /**
       * Gets current value of property <code>busyIndicatorSize</code>.Size of the busy indicators which can
       * be displayed in the carousel.Default value is <code>6em</code>.
       * @returns Value of property <code>busyIndicatorSize</code>
      */
      getBusyIndicatorSize(): any;

      /**
       * Gets current value of property <code>height</code>.The height of the carousel. Note that when a
       * percentage value is used, the height of the surrounding container must be defined.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets current value of property <code>loop</code>.Defines whether the carousel should loop, i.e show
       * the first page after the last page is reached and vice versa.Default value is <code>false</code>.
       * @returns Value of property <code>loop</code>
      */
      getLoop(): boolean;

      /**
       * Returns a metadata object for class sap.m.Carousel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>pageIndicatorPlacement</code>.Defines where the carousel's page
       * indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom.
       * Other values are ignored and the default value will be applied. The default value is
       * sap.m.PlacementType.Bottom.Default value is <code>Bottom</code>.
       * @returns Value of property <code>pageIndicatorPlacement</code>
      */
      getPageIndicatorPlacement(): sap.m.PlacementType;

      /**
       * Gets content of aggregation <code>pages</code>.The content which the carousel displays.
      */
      getPages(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>showBusyIndicator</code>.Show or hide busy indicator in the
       * carousel when loading pages after swipe.Default value is <code>true</code>.
       * @returns Value of property <code>showBusyIndicator</code>
      */
      getShowBusyIndicator(): boolean;

      /**
       * Gets current value of property <code>showPageIndicator</code>.Show or hide carousel's page
       * indicator.Default value is <code>true</code>.
       * @returns Value of property <code>showPageIndicator</code>
      */
      getShowPageIndicator(): boolean;

      /**
       * Gets current value of property <code>width</code>.The width of the carousel. Note that when a
       * percentage value is used, the height of the surrounding container must be defined.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>pages</code>.and
       * returns its index if found or -1 otherwise.
       * @param oPage The page whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfPage(oPage: sap.ui.core.Control): number;

      /**
       * Inserts a page into the aggregation <code>pages</code>.
       * @param oPage the page to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the page should be inserted at; for             a
       * negative value of <code>iIndex</code>, the page is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the page is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertPage(oPage: sap.ui.core.Control, iIndex: number): sap.m.Carousel;

      /**
       * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method
       * chaining.
      */
      next(): sap.m.Carousel;

      /**
       * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for
       * method chaining.
      */
      previous(): sap.m.Carousel;

      /**
       * Removes all the controls from the aggregation <code>pages</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllPages(): sap.ui.core.Control[];

      /**
       * Removes a page from the aggregation <code>pages</code>.
       * @param vPage The page to remove or its index or id
       * @returns The removed page or <code>null</code>
      */
      removePage(vPage: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets the associated <code>activePage</code>.
       * @param oActivePage ID of an element which becomes the new target of this activePage association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActivePage(oActivePage: any | sap.ui.core.Control): sap.m.Carousel;

      /**
       * Sets a new value for property <code>busyIndicatorSize</code>.Size of the busy indicators which can
       * be displayed in the carousel.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>6em</code>.
       * @param sBusyIndicatorSize New value for property <code>busyIndicatorSize</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBusyIndicatorSize(sBusyIndicatorSize: any): sap.m.Carousel;

      /**
       * Sets a new value for property <code>height</code>.The height of the carousel. Note that when a
       * percentage value is used, the height of the surrounding container must be defined.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.Carousel;

      /**
       * Sets a new value for property <code>loop</code>.Defines whether the carousel should loop, i.e show
       * the first page after the last page is reached and vice versa.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bLoop New value for property <code>loop</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLoop(bLoop: boolean): sap.m.Carousel;

      /**
       * Sets a new value for property <code>pageIndicatorPlacement</code>.Defines where the carousel's page
       * indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom.
       * Other values are ignored and the default value will be applied. The default value is
       * sap.m.PlacementType.Bottom.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>Bottom</code>.
       * @param sPageIndicatorPlacement New value for property <code>pageIndicatorPlacement</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPageIndicatorPlacement(sPageIndicatorPlacement: sap.m.PlacementType): sap.m.Carousel;

      /**
       * Sets a new value for property <code>showBusyIndicator</code>.Show or hide busy indicator in the
       * carousel when loading pages after swipe.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowBusyIndicator New value for property <code>showBusyIndicator</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowBusyIndicator(bShowBusyIndicator: boolean): sap.m.Carousel;

      /**
       * Sets a new value for property <code>showPageIndicator</code>.Show or hide carousel's page
       * indicator.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bShowPageIndicator New value for property <code>showPageIndicator</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowPageIndicator(bShowPageIndicator: boolean): sap.m.Carousel;

      /**
       * Sets a new value for property <code>width</code>.The width of the carousel. Note that when a
       * percentage value is used, the height of the surrounding container must be defined.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Carousel;
    }
    /**
     * Base type for <code>items</code> aggregation in P13nPanel control.
     * @resource sap/m/P13nItem.js
    */
    export class P13nItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>aggregationRole</code>.Defines aggregation role
       * @since 1.34.0
       * @returns Value of property <code>aggregationRole</code>
      */
      getAggregationRole(): string;

      /**
       * Gets current value of property <code>columnKey</code>.Can be used as input for subsequent actions.
       * @since 1.26.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Gets current value of property <code>isDefault</code>.the column with isDefault==true will be used
       * as the selected column item on the conditionPanelDefault value is <code>false</code>.
       * @since 1.26.0
       * @returns Value of property <code>isDefault</code>
      */
      getIsDefault(): boolean;

      /**
       * Gets current value of property <code>maxLength</code>.specifies the number of characters which can
       * be entered in the value fields of the condition panel
       * @since 1.26.0
       * @returns Value of property <code>maxLength</code>
      */
      getMaxLength(): string;

      /**
       * Returns a metadata object for class sap.m.P13nItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>precision</code>.if type==numeric the precision will be used to
       * format the entered value (maxIntegerDigits of the used Formatter)
       * @since 1.26.0
       * @returns Value of property <code>precision</code>
      */
      getPrecision(): string;

      /**
       * Gets current value of property <code>role</code>.Defines role. The role is reflected in the manner
       * how the dimension will influence the chart layout.
       * @since 1.34.0
       * @returns Value of property <code>role</code>
      */
      getRole(): string;

      /**
       * Gets current value of property <code>scale</code>.if type==numeric the scale will be used to format
       * the entered value (maxFractionDigits of the used Formatter)
       * @since 1.26.0
       * @returns Value of property <code>scale</code>
      */
      getScale(): string;

      /**
       * Gets current value of property <code>text</code>.The text to be displayed for the item.Default value
       * is <code></code>.
       * @since 1.26.0
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>type</code>.data type of the column (text, numeric or date is
       * supported)Default value is <code>text</code>.
       * @since 1.26.0
       * @returns Value of property <code>type</code>
      */
      getType(): string;

      /**
       * Gets current value of property <code>values</code>.the array of values for type bool. e.g. ["",
       * "Off", "On"]. The first entry can be empty (used to blank the value field). Next valuerepresent the
       * false value, last entry the true value.
       * @since 1.34.0
       * @returns Value of property <code>values</code>
      */
      getValues(): string[];

      /**
       * Gets current value of property <code>visible</code>.Defines visibility of column
       * @since 1.26.0
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.Defines column width
       * @since 1.26.0
       * @returns Value of property <code>width</code>
      */
      getWidth(): string;

      /**
       * Sets a new value for property <code>aggregationRole</code>.Defines aggregation roleWhen called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.34.0
       * @param sAggregationRole New value for property <code>aggregationRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAggregationRole(sAggregationRole: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>columnKey</code>.Can be used as input for subsequent
       * actions.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @since 1.26.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>isDefault</code>.the column with isDefault==true will be used as
       * the selected column item on the conditionPanelWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.26.0
       * @param bIsDefault New value for property <code>isDefault</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIsDefault(bIsDefault: boolean): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>maxLength</code>.specifies the number of characters which can be
       * entered in the value fields of the condition panelWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sMaxLength New value for property <code>maxLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLength(sMaxLength: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>precision</code>.if type==numeric the precision will be used to
       * format the entered value (maxIntegerDigits of the used Formatter)When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sPrecision New value for property <code>precision</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPrecision(sPrecision: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>role</code>.Defines role. The role is reflected in the manner
       * how the dimension will influence the chart layout.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.34.0
       * @param sRole New value for property <code>role</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRole(sRole: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>scale</code>.if type==numeric the scale will be used to format
       * the entered value (maxFractionDigits of the used Formatter)When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sScale New value for property <code>scale</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setScale(sScale: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>text</code>.The text to be displayed for the item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code></code>.
       * @since 1.26.0
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>type</code>.data type of the column (text, numeric or date is
       * supported)When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>text</code>.
       * @since 1.26.0
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: string): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>values</code>.the array of values for type bool. e.g. ["",
       * "Off", "On"]. The first entry can be empty (used to blank the value field). Next valuerepresent the
       * false value, last entry the true value.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.34.0
       * @param sValues New value for property <code>values</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValues(sValues: string[]): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>visible</code>.Defines visibility of columnWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.26.0
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>width</code>.Defines column widthWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: string): sap.m.P13nItem;
    }
    /**
     * The <code>MenuItem</code> control is used for creating items for the <code>sap.m.Menu</code>.It is
     * derived from a core <code>sap.ui.core.Item</code>.
     * @resource sap/m/MenuItem.js
    */
    export class MenuItem extends sap.ui.core.Item {


      /**
       * Constructor for a new <code>MenuItem</code>.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.MenuItem): sap.m.MenuItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>aggregationChanged</code> event of this
       * <code>sap.m.MenuItem</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MenuItem</code> itself.Fired when aggregation of the item changes.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MenuItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAggregationChanged(oData: any, fnFunction: any, oListener?: any): sap.m.MenuItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.MenuItem</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MenuItem</code> itself.Fired after the item has been pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MenuItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.MenuItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>propertyChanged</code> event of this
       * <code>sap.m.MenuItem</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MenuItem</code> itself.Fired when a property of the item changes.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MenuItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPropertyChanged(oData: any, fnFunction: any, oListener?: any): sap.m.MenuItem;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.MenuItem;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.MenuItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>aggregationChanged</code> event of
       * this <code>sap.m.MenuItem</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAggregationChanged(fnFunction: any, oListener: any): sap.m.MenuItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.MenuItem</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.MenuItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>propertyChanged</code> event of this
       * <code>sap.m.MenuItem</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPropertyChanged(fnFunction: any, oListener: any): sap.m.MenuItem;


      /**
       * Fires event <code>aggregationChanged</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>aggregationName</code> of type <code>String</code>The aggregation name of
       * the changed aggregation.</li><li><code>methodName</code> of type <code>String</code>Which method
       * changed the aggregation.</li><li><code>methodParams</code> of type <code>Object</code>What
       * parameters were used to change the aggregation.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAggregationChanged(mArguments: any): sap.m.MenuItem;

      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.MenuItem;

      /**
       * Fires event <code>propertyChanged</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>propertyKey</code> of type <code>string</code>The property name to be
       * changed.</li><li><code>propertyValue</code> of type <code>mixed</code>The new property
       * value.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePropertyChanged(mArguments: any): sap.m.MenuItem;

      /**
       * Gets current value of property <code>icon</code>.Defines the icon, which belongs to the item.This
       * can be an URI to an image or an icon font URI.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): string;

      /**
       * Gets content of aggregation <code>items</code>.Defines the sub-items contained within this element.
      */
      getItems(): sap.m.MenuItem[];

      /**
       * Returns a metadata object for class sap.m.MenuItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>startsSection</code>.Defines whether a visual separator should
       * be rendered before the item.<b>Note:</b> If an item is invisible its separator is also not
       * displayed.Default value is <code>false</code>.
       * @returns Value of property <code>startsSection</code>
      */
      getStartsSection(): boolean;

      /**
       * Gets current value of property <code>visible</code>.Defines whether the item should be visible on
       * the screen. If set to <code>false</code>,a placeholder is rendered instead of the real item.Default
       * value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.MenuItem): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.MenuItem, iIndex: number): sap.m.MenuItem;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.MenuItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.MenuItem): sap.m.MenuItem;

      /**
       * Sets a new value for property <code>icon</code>.Defines the icon, which belongs to the item.This can
       * be an URI to an image or an icon font URI.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: string): sap.m.MenuItem;

      /**
       * Sets a new value for property <code>startsSection</code>.Defines whether a visual separator should
       * be rendered before the item.<b>Note:</b> If an item is invisible its separator is also not
       * displayed.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @param bStartsSection New value for property <code>startsSection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStartsSection(bStartsSection: boolean): sap.m.MenuItem;

      /**
       * Sets a new value for property <code>visible</code>.Defines whether the item should be visible on the
       * screen. If set to <code>false</code>,a placeholder is rendered instead of the real item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.MenuItem;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.MenuItem;
    }
    /**
     * The <code>sap.m.InputBase</code> control provides a basic functionality for input controls.
     * @resource sap/m/InputBase.js
    */
    export class InputBase extends sap.ui.core.Control {

      /**
       * Use labels as placeholder configuration.It can be necessary for the subclasses to overwrite this
       * whennative placeholder usage causes undesired input events or whenplaceholder attribute is not
       * supported for the specified
       * type.https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary
      */
      protected bShowLabelAsPlaceholder: any;


      /**
       * Constructor for a new <code>sap.m.InputBase</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.InputBase;

      /**
       * Applies the focus info.To be overwritten by subclasses.
       * @param oFocusInfo undefined
      */
      applyFocusInfo(oFocusInfo: any): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.InputBase</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.InputBase</code> itself.Is fired when the text in the input field has changed and the
       * focus leaves the input field or the enter key is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.InputBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.InputBase;

      /**
       * Registers an event listener to the browser input event.
       * @param fnCallback Function to be called when the value of the input element is changed.
       * @returns <code>this</code> to allow method chaining.
      */
      bindToInputEvent(fnCallback: any): sap.m.InputBase;

      /**
       * Binds property <code>value</code> to model data.See {@link sap.ui.base.ManagedObject#bindProperty
       * ManagedObject.bindProperty} for a detailed description of the possible properties of
       * <code>oBindingInfo</code>
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindValue(oBindingInfo: any): sap.m.InputBase;

      /**
       * Close value state message popup.
       * @since 1.26
      */
      closeValueStateMessage(): void;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.InputBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.InputBase;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The new <code>value</code> of the
       * <code>control</code>.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.InputBase;

      /**
       * Fires the change event for the listeners
       * @since 1.22.1
       * @param sValue value of the input.
       * @param oParams extra event parameters.
      */
      fireChangeEvent(sValue: String, oParams?: any): void;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets the reference element which the message popup should dock to.
       * @since 1.26
       * @returns DOM element which the message popup should dock to
      */
      getDomRefForValueStateMessage(): any;

      /**
       * Gets current value of property <code>editable</code>.Defines whether the control can be modified by
       * the user or not.<b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text
       * from it.Default value is <code>true</code>.
       * @since 1.12.0
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Returns an object representing the serialized focus information.To be overwritten by subclasses.
       * @returns An object representing the serialized focus information.
      */
      getFocusInfo(): any;

      /**
       * Returns a metadata object for class sap.m.InputBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.Defines the name of the control for the purposes of
       * form submission.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>placeholder</code>.Defines a short hint intended to aid the
       * user with data entry when the control has no value.
       * @returns Value of property <code>placeholder</code>
      */
      getPlaceholder(): string;

      /**
       * Gets current value of property <code>required</code>.Indicates that user input is required. This
       * property is only needed for accessibility purposes when a single relationship betweenthe field and a
       * label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established(e.g.
       * one label should label multiple fields).Default value is <code>false</code>.
       * @since 1.38.4
       * @returns Value of property <code>required</code>
      */
      getRequired(): boolean;

      /**
       * Retrieves the selected text.Only supported for input control's type of Text, Url, Tel and Password.
       * @since 1.32
       * @returns The selected text.
      */
      getSelectedText(): string;

      /**
       * Gets current value of property <code>showValueStateMessage</code>.Indicates whether the value state
       * message should be shown or not.Default value is <code>true</code>.
       * @since 1.26.0
       * @returns Value of property <code>showValueStateMessage</code>
      */
      getShowValueStateMessage(): boolean;

      /**
       * Gets current value of property <code>textAlign</code>.Defines the horizontal alignment of the text
       * that is shown inside the input field.Default value is <code>Initial</code>.
       * @since 1.26.0
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Defines the text directionality of the
       * input field, e.g. <code>RTL</code>, <code>LTR</code>Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>value</code>.Defines the value of the control.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueState</code>.Visualizes the validation state of the
       * control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.Default value is
       * <code>None</code>.
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>valueStateText</code>.Defines the text that appears in the
       * value state message pop-up. If this is not specified, a default text is shown from the resource
       * bundle.
       * @since 1.26.0
       * @returns Value of property <code>valueStateText</code>
      */
      getValueStateText(): string;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the control.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Handles the change event.
       * @param oEvent undefined
       * @returns true when change event is fired
      */
      onChange(oEvent: any): boolean | any;

      /**
       * Hook method that gets called when the input value is reverted with hitting escape.It may require to
       * re-implement this method from sub classes for control specific behaviour.
       * @since 1.26
       * @param sValue Reverted value of the input.
      */
      onValueRevertedByEscape(sValue: String): void;

      /**
       * Open value state message popup.
       * @since 1.26
      */
      openValueStateMessage(): void;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Selects the text within the input field between the specified start and end positions.Only supported
       * for input control's type of Text, Url, Tel and Password.
       * @since 1.22.1
       * @param iSelectionStart The index into the text at which the first selected character is located.
       * @param iSelectionEnd The index into the text at which the last selected character is located.
       * @returns <code>this</code> to allow method chaining.
      */
      selectText(iSelectionStart: number, iSelectionEnd: number): sap.m.InputBase;

      /**
       * Sets a new value for property <code>editable</code>.Defines whether the control can be modified by
       * the user or not.<b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text
       * from it.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @since 1.12.0
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.InputBase;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.InputBase;

      /**
       * Sets a new value for property <code>name</code>.Defines the name of the control for the purposes of
       * form submission.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.InputBase;

      /**
       * Sets a new value for property <code>placeholder</code>.Defines a short hint intended to aid the user
       * with data entry when the control has no value.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sPlaceholder New value for property <code>placeholder</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlaceholder(sPlaceholder: string): sap.m.InputBase;

      /**
       * Sets a new value for property <code>required</code>.Indicates that user input is required. This
       * property is only needed for accessibility purposes when a single relationship betweenthe field and a
       * label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established(e.g.
       * one label should label multiple fields).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.38.4
       * @param bRequired New value for property <code>required</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRequired(bRequired: boolean): sap.m.InputBase;

      /**
       * Sets a new value for property <code>showValueStateMessage</code>.Indicates whether the value state
       * message should be shown or not.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.26.0
       * @param bShowValueStateMessage New value for property <code>showValueStateMessage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.InputBase;

      /**
       * Sets a new value for property <code>textAlign</code>.Defines the horizontal alignment of the text
       * that is shown inside the input field.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Initial</code>.
       * @since 1.26.0
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.InputBase;

      /**
       * Sets a new value for property <code>textDirection</code>.Defines the text directionality of the
       * input field, e.g. <code>RTL</code>, <code>LTR</code>When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.InputBase;

      /**
       * Setter for property <code>value</code>.Default value is empty/<code>undefined</code>.
       * @param sValue New value for property <code>value</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setValue(sValue: string): sap.m.InputBase;

      /**
       * Setter for property <code>valueState</code>.Default value is <code>None</code>.
       * @param sValueState New value for property <code>valueState</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setValueState(sValueState: sap.ui.core.ValueState): sap.m.InputBase;

      /**
       * Setter for property <code>valueStateText</code>.Default value is empty/<code>undefined</code>.
       * @since 1.26
       * @param sText New value for property <code>valueStateText</code>.
       * @returns <code>this</code> to allow method chaining
      */
      setValueStateText(sText: string): sap.m.InputBase;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.InputBase;

      /**
       * Unbinds property <code>value</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindValue(): sap.m.InputBase;

      /**
       * Sets the DOM value of the input field and handles placeholder visibility.
       * @since 1.22
       * @param sValue value of the input field.
       * @returns <code>this</code> to allow method chaining.
      */
      updateDomValue(sValue: string): sap.m.InputBase;
    }
    /**
     * The Feed Input allows the user to enter text for a new feed entry and then post it.
     * @resource sap/m/FeedInput.js
    */
    export class FeedInput extends sap.ui.core.Control {


      /**
       * Constructor for a new FeedInput.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>post</code> event of this
       * <code>sap.m.FeedInput</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.FeedInput</code> itself.The Post event is triggered when the user has entered a value
       * and pressed the post button. After firing this event, the value is reset.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FeedInput</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPost(oData: any, fnFunction: any, oListener?: any): sap.m.FeedInput;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>post</code> event of this
       * <code>sap.m.FeedInput</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPost(fnFunction: any, oListener: any): sap.m.FeedInput;


      /**
       * Fires event <code>post</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The value of the feed input before
       * reseting it.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePost(mArguments: any): sap.m.FeedInput;

      /**
       * Gets current value of property <code>ariaLabelForPicture</code>.Text for Picture which will be read
       * by screenreader.If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is
       * deactivated.
       * @since 1.30
       * @returns Value of property <code>ariaLabelForPicture</code>
      */
      getAriaLabelForPicture(): string;

      /**
       * Gets current value of property <code>buttonTooltip</code>.Sets a new tooltip for Submit button. The
       * tooltip can either be a simple string (which in most cases will be rendered as the title attribute
       * of this element)or an instance of sap.ui.core.TooltipBase.If a new tooltip is set, any previously
       * set tooltip is deactivated.The default value is set language dependent.Default value is
       * <code>Submit</code>.
       * @since 1.28
       * @returns Value of property <code>buttonTooltip</code>
      */
      getButtonTooltip(): sap.ui.core.TooltipBase;

      /**
       * Gets current value of property <code>enabled</code>.Set this flag to "false" to disable both text
       * input and post button.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>icon</code>.Icon to be displayed as a graphical element within
       * the feed input. This can be an image or an icon from the icon font.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.Some mobile devices support higher
       * resolution images while others do not. Therefore, you should provide image resources for all
       * relevant densities.If the property is set to "true", one or more requests are sent to the server to
       * try and get the perfect density version of an image. If an image of a certain density is not
       * available, the image control falls back to the default image, which should be provided.If you do not
       * have higher resolution images, you should set the property to "false" to avoid unnecessary
       * round-trips.Please be aware that this property is relevant only for images and not for icons.Default
       * value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>maxLength</code>.The maximum length (the maximum number of
       * characters) for the feed input's value. By default this is not limited.Default value is
       * <code>0</code>.
       * @returns Value of property <code>maxLength</code>
      */
      getMaxLength(): number;

      /**
       * Returns a metadata object for class sap.m.FeedInput.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placeholder</code>.The placeholder text shown in the input area
       * as long as the user has not entered any text value.Default value is <code>Post something
       * here</code>.
       * @returns Value of property <code>placeholder</code>
      */
      getPlaceholder(): string;

      /**
       * Gets current value of property <code>showIcon</code>.If set to "true" (default), icons will be
       * displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false"
       * icons are hiddenDefault value is <code>true</code>.
       * @returns Value of property <code>showIcon</code>
      */
      getShowIcon(): boolean;

      /**
       * Gets current value of property <code>value</code>.The text value of the feed input. As long as the
       * user has not entered any text the post button is disabled
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Sets a new value for property <code>ariaLabelForPicture</code>.Text for Picture which will be read
       * by screenreader.If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is
       * deactivated.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.30
       * @param sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAriaLabelForPicture(sAriaLabelForPicture: string): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>buttonTooltip</code>.Sets a new tooltip for Submit button. The
       * tooltip can either be a simple string (which in most cases will be rendered as the title attribute
       * of this element)or an instance of sap.ui.core.TooltipBase.If a new tooltip is set, any previously
       * set tooltip is deactivated.The default value is set language dependent.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Submit</code>.
       * @since 1.28
       * @param sButtonTooltip New value for property <code>buttonTooltip</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setButtonTooltip(sButtonTooltip: sap.ui.core.TooltipBase): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>enabled</code>.Set this flag to "false" to disable both text
       * input and post button.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>icon</code>.Icon to be displayed as a graphical element within
       * the feed input. This can be an image or an icon from the icon font.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.Some mobile devices support higher
       * resolution images while others do not. Therefore, you should provide image resources for all
       * relevant densities.If the property is set to "true", one or more requests are sent to the server to
       * try and get the perfect density version of an image. If an image of a certain density is not
       * available, the image control falls back to the default image, which should be provided.If you do not
       * have higher resolution images, you should set the property to "false" to avoid unnecessary
       * round-trips.Please be aware that this property is relevant only for images and not for icons.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>maxLength</code>.The maximum length (the maximum number of
       * characters) for the feed input's value. By default this is not limited.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>0</code>.
       * @param iMaxLength New value for property <code>maxLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLength(iMaxLength: number): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>placeholder</code>.The placeholder text shown in the input area
       * as long as the user has not entered any text value.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Post something here</code>.
       * @param sPlaceholder New value for property <code>placeholder</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlaceholder(sPlaceholder: string): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>showIcon</code>.If set to "true" (default), icons will be
       * displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false"
       * icons are hiddenWhen called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bShowIcon New value for property <code>showIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIcon(bShowIcon: boolean): sap.m.FeedInput;

      /**
       * Sets a new value for property <code>value</code>.The text value of the feed input. As long as the
       * user has not entered any text the post button is disabledWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.FeedInput;
    }
    /**
     * The <code>sap.m.MaskInput</code> control allows users to easily enter data in a certain format and
     * in a fixed-width input(for example: date, time, phone number, credit card number, currency, IP
     * address, MAC address, and others).
     * @resource sap/m/MaskInput.js
    */
    export class MaskInput extends sap.m.InputBase {


      /**
       * Constructor for a new MaskInput.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Gets a replacement string for the character being placed in the input.Subclasses may override this
       * method in order to get some additional behavior. For instance, switching current inputcharacter with
       * other for time input purposes. As an example, if the user enters "2" (in 12-hour format), the
       * consumer may usethis method to replace the input from "2" to "02".
       * @param sChar The current character from the input
       * @param iPlacePosition The position the character should occupy
       * @param sCurrentInputValue The value currently inside the input field (may differ from the property
       * value)
       * @returns A string that replaces the character
      */
      _feedReplaceChar(sChar: String, iPlacePosition: number, sCurrentInputValue: string): String;

      /**
       * Verifies whether a character at a given position is allowed according to its mask rule.
       * @param sChar The character
       * @param iIndex The position of the character
      */
      _isCharAllowed(sChar: String, iIndex: number): void;

      /**
       * Adds some rule to the aggregation <code>rules</code>.
       * @param oRule the rule to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addRule(oRule: sap.m.MaskInputRule): sap.m.MaskInput;

      /**
       * Destroys all the rules in the aggregation <code>rules</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyRules(): sap.m.MaskInput;


      /**
       * Gets current value of property <code>mask</code>.Mask defined by its characters type (respectively,
       * by its length).You should consider the following important facts:1. The mask characters normally
       * correspond to an existing rule (one rule per unique char).Characters which don't, are considered
       * immutable characters (for example, the mask '2099', where '9' corresponds to a rulefor digits, has
       * the characters '2' and '0' as immutable).2. Adding a rule corresponding to the
       * <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior.3. You
       * can use the special escape character '^' called "Caret" prepending a rule character to make it
       * immutable.Use the double escape '^^' if you want to make use of the escape character as a immutable
       * one.
       * @returns Value of property <code>mask</code>
      */
      getMask(): string;

      /**
       * Returns a metadata object for class sap.m.MaskInput.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placeholderSymbol</code>.Defines a placeholder symbol. Shown at
       * the position where there is no user input yet.Default value is <code>_</code>.
       * @returns Value of property <code>placeholderSymbol</code>
      */
      getPlaceholderSymbol(): string;

      /**
       * Gets content of aggregation <code>rules</code>.A list of validation rules (one rule per mask
       * character).
      */
      getRules(): sap.m.MaskInputRule[];

      /**
       * Checks for the provided <code>sap.m.MaskInputRule</code> in the aggregation <code>rules</code>.and
       * returns its index if found or -1 otherwise.
       * @param oRule The rule whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfRule(oRule: sap.m.MaskInputRule): number;

      /**
       * Inserts a rule into the aggregation <code>rules</code>.
       * @param oRule the rule to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the rule should be inserted at; for             a
       * negative value of <code>iIndex</code>, the rule is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the rule is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertRule(oRule: sap.m.MaskInputRule, iIndex: number): sap.m.MaskInput;

      /**
       * Removes all the controls from the aggregation <code>rules</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllRules(): sap.m.MaskInputRule[];

      /**
       * Removes a rule from the aggregation <code>rules</code>.
       * @param vRule The rule to remove or its index or id
       * @returns The removed rule or <code>null</code>
      */
      removeRule(vRule: number | string | sap.m.MaskInputRule): sap.m.MaskInputRule;

      /**
       * Setter for property <code>value</code>.
       * @param sValue New value for property <code>value</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setValue(sValue: string): sap.m.MaskInput;
    }
    /**
     * Base type for <code>panels</code> aggregation in P13nDialog control.
     * @resource sap/m/P13nPanel.js
    */
    export class P13nPanel extends sap.ui.core.Control {


      /**
       * Constructor for a new P13nPanel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @since 1.26.0
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.P13nItem): sap.m.P13nPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeNavigationTo</code> event of this
       * <code>sap.m.P13nPanel</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.P13nPanel</code> itself.Due to performance the data of the panel can be requested in
       * lazy mode e.g. when the panel is displayed
       * @since 1.28.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeNavigationTo(oData: any, fnFunction: any, oListener?: any): sap.m.P13nPanel;

      /**
       * @since 1.28.0
      */
      beforeNavigationTo(): void;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26.0
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.P13nPanel;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @since 1.26.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.P13nPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeNavigationTo</code> event of
       * this <code>sap.m.P13nPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.28.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeNavigationTo(fnFunction: any, oListener: any): sap.m.P13nPanel;


      /**
       * Fires event <code>beforeNavigationTo</code> to attached listeners.
       * @since 1.28.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeNavigationTo(mArguments: any): sap.m.P13nPanel;

      /**
       * Gets current value of property <code>changeNotifier</code>.Callback which notifies a change on this
       * panel.
       * @returns Value of property <code>changeNotifier</code>
      */
      getChangeNotifier(): any;

      /**
       * Gets content of aggregation <code>items</code>.Aggregation of items
       * @since 1.26.0
      */
      getItems(): sap.m.P13nItem[];

      /**
       * Returns a metadata object for class sap.m.P13nPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * This method can be overwritten by subclass in order to return a payload for Ok action
       * @since 1.26.7
      */
      getOkPayload(): void;

      /**
       * This method can be overwritten by subclass in order to return a payload for Reset action
       * @since 1.28.0
      */
      getResetPayload(): void;

      /**
       * Gets current value of property <code>title</code>.Title text appears in the panel.
       * @since 1.26.0
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleLarge</code>.Large title text appears e.g. in dialog
       * header in case that only one panel is shown.
       * @since 1.30.0
       * @returns Value of property <code>titleLarge</code>
      */
      getTitleLarge(): string;

      /**
       * Gets current value of property <code>type</code>.Panel type for generic use. Due to extensibility
       * reason the type of <code>type</code> property should be <code>string</code>.So it is feasible to add
       * a custom panel without expanding the type.
       * @since 1.26.0
       * @returns Value of property <code>type</code>
      */
      getType(): string;

      /**
       * Gets current value of property <code>validationExecutor</code>.Callback method which is called in
       * order to validate end user entry.
       * @returns Value of property <code>validationExecutor</code>
      */
      getValidationExecutor(): any;

      /**
       * Gets current value of property <code>validationListener</code>.Callback method which is called in
       * order to register for validation result.
       * @returns Value of property <code>validationListener</code>
      */
      getValidationListener(): any;

      /**
       * Gets current value of property <code>verticalScrolling</code>.Enables the vertical Scrolling on the
       * P13nDialog when the panel is shown.Default value is <code>true</code>.
       * @since 1.26.0
       * @returns Value of property <code>verticalScrolling</code>
      */
      getVerticalScrolling(): boolean;

      /**
       * Checks for the provided <code>sap.m.P13nItem</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.26.0
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.P13nItem): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @since 1.26.0
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.P13nItem, iIndex: number): sap.m.P13nPanel;

      /**
       * This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove
       * invalid content on the panel.
       * @since 1.28.0
      */
      onAfterNavigationFrom(): void;

      /**
       * This method can be overwritten by subclass in order to prevent navigation to another panel. This
       * could be the case if some content on the panelis considered 'invalid'.
       * @since 1.28.0
       * @returns true if it is allowed to navigate away from this panel, false if it is not allowed
      */
      onBeforeNavigationFrom(): boolean;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.26.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.P13nItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @since 1.26.0
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.P13nItem): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>changeNotifier</code>.Callback which notifies a change on this
       * panel.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param oChangeNotifier New value for property <code>changeNotifier</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setChangeNotifier(oChangeNotifier: any): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>title</code>.Title text appears in the panel.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.26.0
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>titleLarge</code>.Large title text appears e.g. in dialog header
       * in case that only one panel is shown.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.30.0
       * @param sTitleLarge New value for property <code>titleLarge</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleLarge(sTitleLarge: string): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>type</code>.Panel type for generic use. Due to extensibility
       * reason the type of <code>type</code> property should be <code>string</code>.So it is feasible to add
       * a custom panel without expanding the type.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: string): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>validationExecutor</code>.Callback method which is called in
       * order to validate end user entry.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oValidationExecutor New value for property <code>validationExecutor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValidationExecutor(oValidationExecutor: any): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>validationListener</code>.Callback method which is called in
       * order to register for validation result.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oValidationListener New value for property <code>validationListener</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValidationListener(oValidationListener: any): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>verticalScrolling</code>.Enables the vertical Scrolling on the
       * P13nDialog when the panel is shown.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.26.0
       * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVerticalScrolling(bVerticalScrolling: boolean): sap.m.P13nPanel;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @since 1.26.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.P13nPanel;
    }
    /**
     * The control that displays multiple GenericTile controls as changing slides.
     * @resource sap/m/SlideTile.js
    */
    export class SlideTile extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.SlideTile control.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some tile to the aggregation <code>tiles</code>.
       * @param oTile the tile to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addTile(oTile: sap.m.GenericTile): sap.m.SlideTile;

      /**
       * Destroys all the tiles in the aggregation <code>tiles</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyTiles(): sap.m.SlideTile;


      /**
       * Gets current value of property <code>displayTime</code>.The time of the slide display in
       * milliseconds.Default value is <code>5000</code>.
       * @returns Value of property <code>displayTime</code>
      */
      getDisplayTime(): number;

      /**
       * Returns a metadata object for class sap.m.SlideTile.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>tiles</code>.The set of Generic Tiles to be shown in the control.
      */
      getTiles(): sap.m.GenericTile[];

      /**
       * Gets current value of property <code>transitionTime</code>.The time of the slide changing in
       * milliseconds.Default value is <code>500</code>.
       * @returns Value of property <code>transitionTime</code>
      */
      getTransitionTime(): number;

      /**
       * Checks for the provided <code>sap.m.GenericTile</code> in the aggregation <code>tiles</code>.and
       * returns its index if found or -1 otherwise.
       * @param oTile The tile whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfTile(oTile: sap.m.GenericTile): number;

      /**
       * Inserts a tile into the aggregation <code>tiles</code>.
       * @param oTile the tile to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the tile should be inserted at; for             a
       * negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the tile is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertTile(oTile: sap.m.GenericTile, iIndex: number): sap.m.SlideTile;

      /**
       * Removes all the controls from the aggregation <code>tiles</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTiles(): sap.m.GenericTile[];

      /**
       * Removes a tile from the aggregation <code>tiles</code>.
       * @param vTile The tile to remove or its index or id
       * @returns The removed tile or <code>null</code>
      */
      removeTile(vTile: number | string | sap.m.GenericTile): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>displayTime</code>.The time of the slide display in
       * milliseconds.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>5000</code>.
       * @param iDisplayTime New value for property <code>displayTime</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayTime(iDisplayTime: number): sap.m.SlideTile;

      /**
       * Sets a new value for property <code>transitionTime</code>.The time of the slide changing in
       * milliseconds.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>500</code>.
       * @param iTransitionTime New value for property <code>transitionTime</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTransitionTime(iTransitionTime: number): sap.m.SlideTile;
    }
    /**
     * The <code>StepInput</code> control allows the user to change the input values with predefined
     * increments (steps).
     * @resource sap/m/StepInput.js
    */
    export class StepInput extends sap.ui.core.Control {


      /**
       * Constructor for a new StepInput.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.StepInput;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.StepInput;


      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>editable</code>.Defines whether the control can be modified by
       * the user or not.<b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the
       * text from it.Default value is <code>true</code>.
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>largerStep</code>.TIncreases/decreases the value with a larger
       * value than the set step only when using the PageUp/PageDown keys.Default value is 2 times larger
       * than the set step.Default value is <code>2</code>.
       * @returns Value of property <code>largerStep</code>
      */
      getLargerStep(): Number;

      /**
       * Gets current value of property <code>max</code>.Sets the maximum possible value of the defined
       * range.
       * @returns Value of property <code>max</code>
      */
      getMax(): Number;

      /**
       * Returns a metadata object for class sap.m.StepInput.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>min</code>.Sets the minimum possible value of the defined
       * range.
       * @returns Value of property <code>min</code>
      */
      getMin(): Number;

      /**
       * Gets current value of property <code>step</code>.Increases/decreases the value of the input.Default
       * value is <code>1</code>.
       * @returns Value of property <code>step</code>
      */
      getStep(): Number;

      /**
       * Gets current value of property <code>value</code>.Determines the value of the <code>StepInput</code>
       * and can be set initially from the app developer.Default value is <code>0</code>.
       * @returns Value of property <code>value</code>
      */
      getValue(): Number;

      /**
       * Gets current value of property <code>valueState</code>.Accepts the core enumeration ValueState.type
       * that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and
       * <code>Success</code>.Default value is <code>None</code>.
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the control.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.StepInput;

      /**
       * Sets a new value for property <code>largerStep</code>.TIncreases/decreases the value with a larger
       * value than the set step only when using the PageUp/PageDown keys.Default value is 2 times larger
       * than the set step.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>2</code>.
       * @param sLargerStep New value for property <code>largerStep</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLargerStep(sLargerStep: Number): sap.m.StepInput;

      /**
       * Sets a new value for property <code>step</code>.Increases/decreases the value of the input.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>1</code>.
       * @param sStep New value for property <code>step</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStep(sStep: Number): sap.m.StepInput;

      /**
       * Sets a new value for property <code>value</code>.Determines the value of the <code>StepInput</code>
       * and can be set initially from the app developer.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: Number): sap.m.StepInput;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.StepInput;
    }
    /**
     * Tokenizer displays multiple tokens
     * @resource sap/m/Tokenizer.js
    */
    export class Tokenizer extends sap.ui.core.Control {


      /**
       * Constructor for a new Tokenizer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.Tokenizer;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.Tokenizer;

      /**
       * Adds some token to the aggregation <code>tokens</code>.
       * @param oToken the token to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addToken(oToken: sap.m.Token): sap.m.Tokenizer;

      /**
       * Function validates the given text and adds a new token if validation was successful
       * @param oParameters parameter bag containing following fields: {sap.m.String} text - the source text
       * {sap.m.Token}         [optional] token - a suggested token {object} [optional] suggestionObject -
       * any object used to find the         suggested token {function} [optional] validationCallback -
       * callback which gets called after validation has         finished
      */
      addValidateToken(oParameters: any): void;

      /**
       * Function adds an validation callback called before any new token gets added to the tokens
       * aggregation
       * @param fValidator undefined
      */
      addValidator(fValidator: any): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tokenChange</code> event of this
       * <code>sap.m.Tokenizer</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.Tokenizer</code> itself.fired when the tokens aggregation changed (add / remove token)
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.Tokenizer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTokenChange(oData: any, fnFunction: any, oListener?: any): sap.m.Tokenizer;

      /**
       * Destroys all the tokens in the aggregation <code>tokens</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyTokens(): sap.m.Tokenizer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tokenChange</code> event of this
       * <code>sap.m.Tokenizer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTokenChange(fnFunction: any, oListener: any): sap.m.Tokenizer;


      /**
       * Fires event <code>tokenChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>type</code> of type <code>string</code>type of tokenChange event.There are
       * four TokenChange types: "added", "removed", "removedAll", "tokensChanged".Use
       * Tokenizer.TokenChangeType.Added for "added",    Tokenizer.TokenChangeType.Removed for "removed",
       * Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged
       * for "tokensChanged".</li><li><code>token</code> of type <code>sap.m.Token</code>the added token or
       * removed token.This parameter is used when tokenChange type is "added" or
       * "removed".</li><li><code>tokens</code> of type <code>sap.m.Token[]</code>the array of removed
       * tokens.This parameter is used when tokenChange type is
       * "removedAll".</li><li><code>addedTokens</code> of type <code>sap.m.Token[]</code>the array of tokens
       * that are added.This parameter is used when tokenChange type is
       * "tokenChanged".</li><li><code>removedTokens</code> of type <code>sap.m.Token[]</code>the array of
       * tokens that are removed.This parameter is used when tokenChange type is "tokenChanged".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTokenChange(mArguments: any): sap.m.Tokenizer;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>editable</code>.true if tokens shall be editable otherwise
       * falseDefault value is <code>true</code>.
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Returns a metadata object for class sap.m.Tokenizer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Function returns the internally used scroll delegate
      */
      getScrollDelegate(): sap.ui.core.delegate.ScrollEnablement;

      /**
       * Function returns the tokens' width
      */
      getScrollWidth(): void;

      /**
       * Function returns all currently selected tokens
       * @returns - array of selected tokens or empty array
      */
      getSelectedTokens(): sap.m.Token[];

      /**
       * Gets content of aggregation <code>tokens</code>.the currently displayed tokens
      */
      getTokens(): sap.m.Token[];

      /**
       * Gets current value of property <code>width</code>.Defines the width of the Tokenizer.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.Token</code> in the aggregation <code>tokens</code>.and returns
       * its index if found or -1 otherwise.
       * @param oToken The token whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfToken(oToken: sap.m.Token): number;

      /**
       * Inserts a token into the aggregation <code>tokens</code>.
       * @param oToken the token to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the token should be inserted at; for             a
       * negative value of <code>iIndex</code>, the token is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the token is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertToken(oToken: sap.m.Token, iIndex: number): sap.m.Tokenizer;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>tokens</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTokens(): sap.m.Token[];

      /**
       * Function removes all validation callbacks
      */
      removeAllValidators(): void;

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Function removes all selected tokens
       * @returns - this for chaining
      */
      removeSelectedTokens(): sap.m.Tokenizer;

      /**
       * Removes a token from the aggregation <code>tokens</code>.
       * @param vToken The token to remove or its index or id
       * @returns The removed token or <code>null</code>
      */
      removeToken(vToken: number | string | sap.m.Token): sap.m.Token;

      /**
       * Function removes an validation callback
       * @param fValidator undefined
      */
      removeValidator(fValidator: any): void;

      /**
       * Function scrolls the tokens to the end
       * @param bInitialize indicates if we should reset the 'scroll-to-end-pending' flag; if true we would
       * reset this flag
      */
      scrollToEnd(bInitialize: boolean): void;

      /**
       * Function scrolls the tokens to the start
      */
      scrollToStart(): void;

      /**
       * Function selects all tokens
       * @param optional bSelect - true for selecting, false for deselecting
       * @returns - this for chaining
      */
      selectAllTokens(optional: boolean): sap.m.Tokenizer;

      /**
       * Sets a new value for property <code>editable</code>.true if tokens shall be editable otherwise
       * falseWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.Tokenizer;

      /**
       * Function sets the tokenizer's width in pixels
       * @param nWidth the new width in pixels
      */
      setPixelWidth(nWidth: number): void;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the Tokenizer.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.Tokenizer;
    }
    /**
     * The QuickView control renders a responsive popover (sap.m.Popover or sap.m.Dialog)and displays
     * information of an object in a business-card format. It also allows this object to be linked
     * toanother object using one of the links in the responsive popover. Clicking that link updates the
     * information in thepopover with the data of the linked object. Unlimited number of objects can be
     * linked.
     * @resource sap/m/QuickView.js
    */
    export class QuickView extends sap.m.QuickViewBase {


      /**
       * Constructor for a new QuickView.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.QuickView</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.QuickView</code> itself.This event fires after the QuickView is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickView</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.QuickView;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.QuickView</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.QuickView</code> itself.This event fires after the QuickView is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickView</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.QuickView;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.QuickView</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.QuickView</code> itself.This event fires before the QuickView is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickView</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.QuickView;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.QuickView</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.QuickView</code> itself.This event fires before the QuickView is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickView</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.QuickView;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.QuickView</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.QuickView;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.QuickView</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.QuickView;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.QuickView</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.QuickView;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.QuickView</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.QuickView;


      /**
       * Fires event <code>afterClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers
       * to the control, which opens the QuickView.</li><li><code>origin</code> of type
       * <code>sap.m.Button</code>This parameter contains the control,which triggers the close of the
       * QuickView.It is undefined when running on desktop or tablet.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.QuickView;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers
       * to the control, which opens the QuickView.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.QuickView;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers
       * to the control, which opens the QuickView.</li><li><code>origin</code> of type
       * <code>sap.m.Button</code>This parameter contains the control,which triggers the close of the
       * QuickView.It is undefined when running on desktop or tablet.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.QuickView;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers
       * to the control, which opens the QuickView.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.QuickView;

      /**
       * Returns a metadata object for class sap.m.QuickView.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placement</code>.This property is reused from sap.m.Popover and
       * only takes effect when running on desktop or tablet. Please refer the documentation of the placement
       * property of sap.m.Popover.Default value is <code>Right</code>.
       * @returns Value of property <code>placement</code>
      */
      getPlacement(): sap.m.PlacementType;

      /**
       * Gets current value of property <code>width</code>.The width of the QuickView. The property takes
       * effect only when running on desktop or tablet.Default value is <code>320px</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Opens the QuickView.
       * @param oControl The control which opens the QuickView.
       * @returns Pointer to the control instance for chaining
      */
      openBy(oControl: sap.ui.core.Control): sap.m.QuickView;

      /**
       * The method sets placement position of the QuickView.
       * @param sPlacement The side from which the QuickView appears relative to the control that opens it.
       * @returns Pointer to the control instance for chaining.
      */
      setPlacement(sPlacement: sap.m.PlacementType): sap.m.QuickView;

      /**
       * The method sets the width of the QuickView.Works only on desktop or tablet.
       * @param sWidth The new width of the QuickView.
       * @returns Pointer to the control instance for chaining
      */
      setWidth(sWidth: any): sap.m.QuickView;
    }
    /**
     * BusyDialog is used to indicate that the system is busy and the user has to wait.
     * @resource sap/m/BusyDialog.js
    */
    export class BusyDialog extends sap.ui.core.Control {


      /**
       * Constructor for a new BusyDialog.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.BusyDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this
       * <code>sap.m.BusyDialog</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.BusyDialog</code> itself.Fires when the busy dialog is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.BusyDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachClose(oData: any, fnFunction: any, oListener?: any): sap.m.BusyDialog;

      /**
       * Closes the BusyDialog.
      */
      close(): sap.m.BusyDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this
       * <code>sap.m.BusyDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachClose(fnFunction: any, oListener: any): sap.m.BusyDialog;


      /**
       * Fires event <code>close</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>cancelPressed</code> of type <code>boolean</code>Indicates if the close
       * events are triggered by a user, pressing a cancel button or because the operation was
       * terminated.This parameter is set to true if the close event is fired by user interaction.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireClose(mArguments: any): sap.m.BusyDialog;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>cancelButtonText</code>.The text of the cancel button. The
       * default text is "Cancel" (translated to the respective language).Default value is <code></code>.
       * @returns Value of property <code>cancelButtonText</code>
      */
      getCancelButtonText(): string;

      /**
       * Gets current value of property <code>customIcon</code>.Icon, used from the BusyIndicator. This icon
       * is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5,
       * etc.) to provide higher resolution image for higher density screens.Default value is <code></code>.
       * @returns Value of property <code>customIcon</code>
      */
      getCustomIcon(): any;

      /**
       * Gets current value of property <code>customIconDensityAware</code>.If this is set to
       * <code>false</code>, the source image will be loaded directly without attempting to fetch the density
       * perfect image for high density devices.By default, this is set to <code>true</code> but then one or
       * more requests are sent trying to get the density perfect version of the image.If bandwidth is the
       * key for the application, set this value to <code>false</code>.Default value is <code>true</code>.
       * @returns Value of property <code>customIconDensityAware</code>
      */
      getCustomIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>customIconHeight</code>.Height of the provided icon with
       * default value "44px".Default value is <code>44px</code>.
       * @returns Value of property <code>customIconHeight</code>
      */
      getCustomIconHeight(): any;

      /**
       * Gets current value of property <code>customIconRotationSpeed</code>.Defines the rotation speed of
       * the given image. If GIF file is used, the speed has to be set to 0. The value is in
       * milliseconds.Default value is <code>1000</code>.
       * @returns Value of property <code>customIconRotationSpeed</code>
      */
      getCustomIconRotationSpeed(): number;

      /**
       * Gets current value of property <code>customIconWidth</code>.Width of the provided icon with default
       * value "44px".Default value is <code>44px</code>.
       * @returns Value of property <code>customIconWidth</code>
      */
      getCustomIconWidth(): any;

      /**
       * Returns a metadata object for class sap.m.BusyDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showCancelButton</code>.Indicates if the cancel button will be
       * rendered inside the busy dialog. The default value is set to <code>false</code>.Default value is
       * <code>false</code>.
       * @returns Value of property <code>showCancelButton</code>
      */
      getShowCancelButton(): boolean;

      /**
       * Gets current value of property <code>text</code>.Optional text displayed inside the dialog.Default
       * value is <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>title</code>.Sets the title of the BusyDialog. The default
       * value is an empty string.Default value is <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Opens the BusyDialog.
      */
      open(): sap.m.BusyDialog;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>cancelButtonText</code>.The text of the cancel button. The
       * default text is "Cancel" (translated to the respective language).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sCancelButtonText New value for property <code>cancelButtonText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCancelButtonText(sCancelButtonText: string): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>customIcon</code>.Icon, used from the BusyIndicator. This icon
       * is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5,
       * etc.) to provide higher resolution image for higher density screens.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sCustomIcon New value for property <code>customIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIcon(sCustomIcon: any): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>customIconDensityAware</code>.If this is set to
       * <code>false</code>, the source image will be loaded directly without attempting to fetch the density
       * perfect image for high density devices.By default, this is set to <code>true</code> but then one or
       * more requests are sent trying to get the density perfect version of the image.If bandwidth is the
       * key for the application, set this value to <code>false</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconDensityAware(bCustomIconDensityAware: boolean): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>customIconHeight</code>.Height of the provided icon with default
       * value "44px".When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>44px</code>.
       * @param sCustomIconHeight New value for property <code>customIconHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconHeight(sCustomIconHeight: any): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>customIconRotationSpeed</code>.Defines the rotation speed of the
       * given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>1000</code>.
       * @param iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconRotationSpeed(iCustomIconRotationSpeed: number): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>customIconWidth</code>.Width of the provided icon with default
       * value "44px".When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>44px</code>.
       * @param sCustomIconWidth New value for property <code>customIconWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconWidth(sCustomIconWidth: any): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>showCancelButton</code>.Indicates if the cancel button will be
       * rendered inside the busy dialog. The default value is set to <code>false</code>.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bShowCancelButton New value for property <code>showCancelButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowCancelButton(bShowCancelButton: boolean): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>text</code>.Optional text displayed inside the dialog.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code></code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.BusyDialog;

      /**
       * Sets a new value for property <code>title</code>.Sets the title of the BusyDialog. The default value
       * is an empty string.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.BusyDialog;
    }
    /**
     * The <code>sap.m.SelectList</code> displays a list of items that allows the user to select an item.
     * @resource sap/m/SelectList.js
    */
    export class SelectList extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>sap.m.SelectList</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.SelectList;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.ui.core.Item): sap.m.SelectList;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemPress</code> event of this
       * <code>sap.m.SelectList</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SelectList</code> itself.This event is fired when an item is pressed.
       * @since 1.32.4
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectList</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemPress(oData: any, fnFunction: any, oListener?: any): sap.m.SelectList;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this
       * <code>sap.m.SelectList</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SelectList</code> itself.This event is fired when the selection has changed.<b>Note:
       * </b> The selection can be changed by pressing an non-selected item orvia keyboard and after the
       * enter or space key is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectList</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.SelectList;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.SelectList;

      /**
       * Clear the selection.
      */
      clearSelection(): void;

      /**
       * Destroys all the items in the aggregation named <code>items</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      destroyItems(): sap.m.SelectList;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemPress</code> event of this
       * <code>sap.m.SelectList</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.32.4
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemPress(fnFunction: any, oListener: any): sap.m.SelectList;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this
       * <code>sap.m.SelectList</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionChange(fnFunction: any, oListener: any): sap.m.SelectList;


      /**
       * Fires event <code>itemPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>item</code> of type <code>sap.ui.core.Item</code>The pressed
       * item.</li></ul>
       * @since 1.32.4
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemPress(mArguments: any): sap.m.SelectList;

      /**
       * Fires event <code>selectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected
       * item.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionChange(mArguments: any): sap.m.SelectList;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Retrieves the default selected item from the aggregation named <code>items</code>.
       * @param aItems undefined
      */
      getDefaultSelectedItem(aItems: sap.ui.core.Item[]): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can change the
       * selection.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets the enabled items from the aggregation named <code>items</code>.
       * @param aItems items to filter
       * @returns An array containing the enabled items.
      */
      getEnabledItems(aItems: sap.ui.core.Item[]): sap.ui.core.Item[];

      /**
       * Gets the first item from the aggregation named <code>items</code>.
       * @returns The first item, or null if there are no items.
      */
      getFirstItem(): sap.ui.core.Item | any;

      /**
       * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
       * @param iIndex Index of the item to return.
       * @returns Item at the given index, or null if none.
      */
      getItemAt(iIndex: number): sap.ui.core.Item | any;

      /**
       * Gets the item with the given key from the aggregation named <code>items</code>.<b>Note: </b> If
       * duplicate keys exists, the first item matching the key is returned.
       * @param sKey An item key that specifies the item to retrieve.
      */
      getItemByKey(sKey: string): sap.ui.core.Item | any;

      /**
       * Gets content of aggregation <code>items</code>.Defines the items contained within this control.
      */
      getItems(): sap.ui.core.Item[];

      /**
       * Gets current value of property <code>keyboardNavigationMode</code>.Defines the keyboard navigation
       * mode.<b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is
       * onlyintended for use in some composite controls that handles keyboard navigation by
       * themselves.Default value is <code>Delimited</code>.
       * @since 1.38
       * @returns Value of property <code>keyboardNavigationMode</code>
      */
      getKeyboardNavigationMode(): sap.m.SelectListKeyboardNavigationMode;

      /**
       * Gets the enabled items from the aggregation named <code>items</code>.
       * @returns The last item, or null if there are no items.
      */
      getLastItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>maxWidth</code>.Sets the maximum width of the control.Default
       * value is <code>100%</code>.
       * @returns Value of property <code>maxWidth</code>
      */
      getMaxWidth(): any;

      /**
       * Returns a metadata object for class sap.m.SelectList.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets the selected item object from the aggregation named <code>items</code>.
       * @returns The current target of the <code>selectedItem</code> association, or null.
      */
      getSelectedItem(): sap.ui.core.Item | any;

      /**
       * Gets current value of property <code>selectedItemId</code>.ID of the selected item.Default value is
       * <code></code>.
       * @returns Value of property <code>selectedItemId</code>
      */
      getSelectedItemId(): string;

      /**
       * Gets current value of property <code>selectedKey</code>.Key of the selected item.<b>Note: </b> If
       * duplicate keys exist, the first item matching the key is used.Default value is <code></code>.
       * @returns Value of property <code>selectedKey</code>
      */
      getSelectedKey(): string;

      /**
       * Gets current value of property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a {@link sap.ui.core.ListItem} are shown.Default value
       * is <code>false</code>.
       * @since 1.32.3
       * @returns Value of property <code>showSecondaryValues</code>
      */
      getShowSecondaryValues(): boolean;

      /**
       * Gets current value of property <code>width</code>.Sets the width of the control.Default value is
       * <code>auto</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.ui.core.Item): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.SelectList;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the items in the aggregation named <code>items</code>.Additionally unregisters them from
       * the hosting UIArea.
       * @returns An array of the removed items (might be empty).
      */
      removeAllItems(): sap.ui.core.Item[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param vItem The item to remove or its index or id.
       * @returns The removed item or null.
      */
      removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can change the
       * selection.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.SelectList;

      /**
       * Sets a new value for property <code>keyboardNavigationMode</code>.Defines the keyboard navigation
       * mode.<b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is
       * onlyintended for use in some composite controls that handles keyboard navigation by themselves.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Delimited</code>.
       * @since 1.38
       * @param sKeyboardNavigationMode New value for property <code>keyboardNavigationMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKeyboardNavigationMode(sKeyboardNavigationMode: sap.m.SelectListKeyboardNavigationMode): sap.m.SelectList;

      /**
       * Sets a new value for property <code>maxWidth</code>.Sets the maximum width of the control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>100%</code>.
       * @param sMaxWidth New value for property <code>maxWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxWidth(sMaxWidth: any): sap.m.SelectList;

      /**
       * Sets the <code>selectedItem</code> association.
       * @param vItem New value for the <code>selectedItem</code> association.If an ID of a
       * <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code>
       * association.Alternatively, a <code>sap.ui.core.Item</code> instance may be given or
       * <code>null</code> to clear the selection.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItem(vItem: string | sap.ui.core.Item | any): sap.m.SelectList;

      /**
       * Sets property <code>selectedItemId</code>.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @param vItem New value for property <code>selectedItemId</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItemId(vItem: string | any): sap.m.SelectList;

      /**
       * Sets property <code>selectedKey</code>.Default value is an empty string <code>""</code> or
       * <code>undefined</code>.
       * @param sKey New value for property <code>selectedKey</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedKey(sKey: string): sap.m.SelectList;

      /**
       * Updates and synchronizes <code>selectedItem</code> association, <code>selectedItemId</code> and
       * <code>selectedKey</code> properties.
       * @param vItem undefined
      */
      setSelection(vItem: string | sap.ui.core.Item | any): void;

      /**
       * Sets a new value for property <code>showSecondaryValues</code>.Indicates whether the text values of
       * the <code>additionalText</code> property of a {@link sap.ui.core.ListItem} are shown.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>false</code>.
       * @since 1.32.3
       * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.SelectList;

      /**
       * Sets a new value for property <code>width</code>.Sets the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>auto</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.SelectList;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.SelectList;
    }
    /**
     * The P13nDialog control provides a dialog that contains one or more panels. On each of the panels,
     * one or more changes with regards to a       table can be processed. For example, a panel to set a
     * column to invisible, change the order of the columns or a panel to sort or filter       tables.
     * @resource sap/m/P13nDialog.js
    */
    export class P13nDialog extends sap.m.Dialog {


      /**
       * Constructor for a new P13nDialog.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some panel to the aggregation <code>panels</code>.
       * @since 1.26.0
       * @param oPanel the panel to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addPanel(oPanel: sap.m.P13nPanel): sap.m.P13nDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this
       * <code>sap.m.P13nDialog</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.P13nDialog</code> itself.Event fired if the 'cancel' button in P13nDialog is clicked.
       * @since 1.26.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancel(oData: any, fnFunction: any, oListener?: any): sap.m.P13nDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>ok</code> event of this
       * <code>sap.m.P13nDialog</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.P13nDialog</code> itself.Event fired if the 'ok' button in P13nDialog is clicked.
       * @since 1.26.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachOk(oData: any, fnFunction: any, oListener?: any): sap.m.P13nDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>reset</code> event of this
       * <code>sap.m.P13nDialog</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.P13nDialog</code> itself.Event fired if the 'reset' button in P13nDialog is clicked.
       * @since 1.26.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachReset(oData: any, fnFunction: any, oListener?: any): sap.m.P13nDialog;

      /**
       * Binds aggregation <code>panels</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26.0
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindPanels(oBindingInfo: any): sap.m.P13nDialog;

      /**
       * Destroys all the panels in the aggregation <code>panels</code>.
       * @since 1.26.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPanels(): sap.m.P13nDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this
       * <code>sap.m.P13nDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.26.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancel(fnFunction: any, oListener: any): sap.m.P13nDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>ok</code> event of this
       * <code>sap.m.P13nDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.26.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachOk(fnFunction: any, oListener: any): sap.m.P13nDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>reset</code> event of this
       * <code>sap.m.P13nDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.26.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachReset(fnFunction: any, oListener: any): sap.m.P13nDialog;


      /**
       * Fires event <code>cancel</code> to attached listeners.
       * @since 1.26.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancel(mArguments: any): sap.m.P13nDialog;

      /**
       * Fires event <code>ok</code> to attached listeners.
       * @since 1.26.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireOk(mArguments: any): sap.m.P13nDialog;

      /**
       * Fires event <code>reset</code> to attached listeners.
       * @since 1.26.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireReset(mArguments: any): sap.m.P13nDialog;

      /**
       * Gets current value of property <code>initialVisiblePanelType</code>.This property determines which
       * panel is initially shown when dialog is opened. Due to extensibility reason the type should
       * be<code>string</code>. So it is feasible to add a custom panel without expanding the type.
       * @since 1.26.0
       * @returns Value of property <code>initialVisiblePanelType</code>
      */
      getInitialVisiblePanelType(): string;

      /**
       * Returns a metadata object for class sap.m.P13nDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>panels</code>.The dialog panels displayed in the dialog.
       * @since 1.26.0
      */
      getPanels(): sap.m.P13nPanel[];

      /**
       * Gets current value of property <code>showReset</code>.This property determines whether the 'Restore'
       * button is shown inside the dialog. If this property is set to true, clicking the'Reset' button will
       * trigger the <code>reset</code> event sending a notification that model data must be reset.Default
       * value is <code>false</code>.
       * @since 1.26.0
       * @returns Value of property <code>showReset</code>
      */
      getShowReset(): boolean;

      /**
       * Gets current value of property <code>showResetEnabled</code>.This property determines whether the
       * 'Restore' button is enabled and is taken into account only if <code>showReset</code> is setto
       * <code>true</code>.Default value is <code>false</code>.
       * @since 1.36.0
       * @returns Value of property <code>showResetEnabled</code>
      */
      getShowResetEnabled(): boolean;

      /**
       * Gets current value of property <code>validationExecutor</code>.Calls the validation listener once
       * all panel-relevant validation checks have been done. This callback function is called in orderto
       * perform cross-model validation checks.
       * @returns Value of property <code>validationExecutor</code>
      */
      getValidationExecutor(): any;

      /**
       * Returns visible panel.
       * @since 1.26.0
      */
      getVisiblePanel(): sap.m.P13nPanel | any;

      /**
       * Checks for the provided <code>sap.m.P13nPanel</code> in the aggregation <code>panels</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.26.0
       * @param oPanel The panel whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfPanel(oPanel: sap.m.P13nPanel): number;

      /**
       * Inserts a panel into the aggregation <code>panels</code>.
       * @since 1.26.0
       * @param oPanel the panel to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the panel should be inserted at; for             a
       * negative value of <code>iIndex</code>, the panel is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the panel is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertPanel(oPanel: sap.m.P13nPanel, iIndex: number): sap.m.P13nDialog;

      /**
       * Removes all the controls from the aggregation <code>panels</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.26.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllPanels(): sap.m.P13nPanel[];

      /**
       * Removes a panel from the aggregation <code>panels</code>.
       * @since 1.26.0
       * @param vPanel The panel to remove or its index or id
       * @returns The removed panel or <code>null</code>
      */
      removePanel(vPanel: number | string | sap.m.P13nPanel): sap.m.P13nPanel;

      /**
       * Sets a new value for property <code>initialVisiblePanelType</code>.This property determines which
       * panel is initially shown when dialog is opened. Due to extensibility reason the type should
       * be<code>string</code>. So it is feasible to add a custom panel without expanding the type.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @since 1.26.0
       * @param sInitialVisiblePanelType New value for property <code>initialVisiblePanelType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialVisiblePanelType(sInitialVisiblePanelType: string): sap.m.P13nDialog;

      /**
       * Sets a new value for property <code>showReset</code>.This property determines whether the 'Restore'
       * button is shown inside the dialog. If this property is set to true, clicking the'Reset' button will
       * trigger the <code>reset</code> event sending a notification that model data must be reset.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @since 1.26.0
       * @param bShowReset New value for property <code>showReset</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowReset(bShowReset: boolean): sap.m.P13nDialog;

      /**
       * Sets a new value for property <code>showResetEnabled</code>.This property determines whether the
       * 'Restore' button is enabled and is taken into account only if <code>showReset</code> is setto
       * <code>true</code>.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @since 1.36.0
       * @param bShowResetEnabled New value for property <code>showResetEnabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowResetEnabled(bShowResetEnabled: boolean): sap.m.P13nDialog;

      /**
       * Sets a new value for property <code>validationExecutor</code>.Calls the validation listener once all
       * panel-relevant validation checks have been done. This callback function is called in orderto perform
       * cross-model validation checks.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oValidationExecutor New value for property <code>validationExecutor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValidationExecutor(oValidationExecutor: any): sap.m.P13nDialog;

      /**
       * Unbinds aggregation <code>panels</code> from model data.
       * @since 1.26.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindPanels(): sap.m.P13nDialog;
    }
    /**
     * The <code>sap.m.MenuButton</code> control enables the user to show a hierarchical menu.
     * @resource sap/m/MenuButton.js
    */
    export class MenuButton extends sap.ui.core.Control {


      /**
       * Constructor for a new MenuButton.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>defaultAction</code> event of this
       * <code>sap.m.MenuButton</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MenuButton</code> itself.Fired when the <code>buttonMode</code> is set to
       * <code>Split</code> and the user presses the main buttonunless <code>useDefaultActionOnly</code> is
       * set to <code>false</code> and another actionfrom the menu has been selected previously.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MenuButton</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDefaultAction(oData: any, fnFunction: any, oListener?: any): sap.m.MenuButton;

      /**
       * Binds aggregation <code>menu</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindMenu(oBindingInfo: any): sap.m.MenuButton;

      /**
       * Destroys the menu in the aggregation <code>menu</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyMenu(): sap.m.MenuButton;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>defaultAction</code> event of this
       * <code>sap.m.MenuButton</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDefaultAction(fnFunction: any, oListener: any): sap.m.MenuButton;


      /**
       * Fires event <code>defaultAction</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDefaultAction(mArguments: any): sap.m.MenuButton;

      /**
       * Gets current value of property <code>activeIcon</code>.The source property of an alternative icon
       * for the active (pressed) state of the button.Both active and default icon properties should be
       * defined and of the same type - image or icon font.If the <code>icon</code> property is not set or
       * has a different type, the active icon is not displayed.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Gets current value of property <code>buttonMode</code>.Defines whether the <code>MenuButton</code>
       * is set to <code>Regular</code> or <code>Split</code> mode.Default value is <code>Regular</code>.
       * @returns Value of property <code>buttonMode</code>
      */
      getButtonMode(): sap.m.MenuButtonMode;

      /**
       * Gets current value of property <code>enabled</code>.Boolean property to enable the control (default
       * is <code>true</code>).<br/><b>Note:</b> Depending on custom settings, the buttons that are disabled
       * have other colors than the enabled ones.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>icon</code>.Defines the icon to be displayed as a graphical
       * element within the button.It can be an image or an icon from the icon font.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.When set to <code>true</code>
       * (default), one or more requests are sent trying to get thedensity perfect version of image if this
       * version of image doesn't exist on the server.If only one version of image is provided, set this
       * value to <code>false</code> toavoid the attempt of fetching density perfect image.Default value is
       * <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets content of aggregation <code>menu</code>.Defines the menu that opens for this button.
      */
      getMenu(): sap.m.Menu;

      /**
       * Returns a metadata object for class sap.m.MenuButton.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>text</code>.Defines the text of the
       * <code>MenuButton</code>.<br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with
       * <code>useDefaultActionOnly</code>set to <code>false</code>, the text is changed to display the last
       * selected item's text,while in <code>Regular</code> <code>buttonMode<code> the text stays unchanged.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Specifies the element's text
       * directionality with enumerated options.By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>type</code>.Defines the type of the <code>MenuButton</code>
       * (for example, Default, Accept, Reject, Back, etc.)Default value is <code>Default</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.ButtonType;

      /**
       * Gets current value of property <code>useDefaultActionOnly</code>.Controls whether the default action
       * handler is invoked always or it is invoked only until a menu item is selected.Usable only if
       * <code>buttonMode</code> is set to <code>Split</code>.Default value is <code>false</code>.
       * @returns Value of property <code>useDefaultActionOnly</code>
      */
      getUseDefaultActionOnly(): Boolean;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the <code>MenuButton</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Initializes the control.
      */
      init(): void;

      /**
       * Sets a new value for property <code>activeIcon</code>.The source property of an alternative icon for
       * the active (pressed) state of the button.Both active and default icon properties should be defined
       * and of the same type - image or icon font.If the <code>icon</code> property is not set or has a
       * different type, the active icon is not displayed.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.MenuButton;

      /**
       * Sets the <code>buttonМode</code> of the control.
       * @param sMode The new button mode
       * @returns This instance
      */
      setButtonMode(sMode: sap.m.MenuButtonMode): MenuButton;

      /**
       * Sets a new value for property <code>enabled</code>.Boolean property to enable the control (default
       * is <code>true</code>).<br/><b>Note:</b> Depending on custom settings, the buttons that are disabled
       * have other colors than the enabled ones.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.MenuButton;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.When set to <code>true</code> (default),
       * one or more requests are sent trying to get thedensity perfect version of image if this version of
       * image doesn't exist on the server.If only one version of image is provided, set this value to
       * <code>false</code> toavoid the attempt of fetching density perfect image.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.MenuButton;

      /**
       * Sets the aggregated <code>menu</code>.
       * @param oMenu The menu to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMenu(oMenu: sap.m.Menu): sap.m.MenuButton;

      /**
       * Sets a new value for property <code>textDirection</code>.Specifies the element's text directionality
       * with enumerated options.By default, the control inherits text direction from the DOM.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.MenuButton;

      /**
       * Sets the tooltip for the <code>MenuButton</code>.Can either be an instance of a TooltipBase subclass
       * or a simple string.
       * @param vTooltip The tooltip that should be shown.
       * @returns this instance
      */
      setTooltip(vTooltip: sap.ui.core.TooltipBase): any;

      /**
       * Sets a new value for property <code>useDefaultActionOnly</code>.Controls whether the default action
       * handler is invoked always or it is invoked only until a menu item is selected.Usable only if
       * <code>buttonMode</code> is set to <code>Split</code>.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param sUseDefaultActionOnly New value for property <code>useDefaultActionOnly</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUseDefaultActionOnly(sUseDefaultActionOnly: Boolean): sap.m.MenuButton;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the
       * <code>MenuButton</code>.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.MenuButton;

      /**
       * Unbinds aggregation <code>menu</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindMenu(): sap.m.MenuButton;
    }
    /**
     * The IconTabBar control represents a collection of tabs with associated content.IconTabBar covers the
     * following use cases:- Filter – There is only one main content for all tabs. The main content can be
     * filtered, based on the selected tab.- Normal tab bar - The contents of each tab are independent from
     * each other.- Combination of the above - There can be both filtered and independent contents.
     * @resource sap/m/IconTabBar.js
    */
    export class IconTabBar extends sap.ui.core.Control {


      /**
       * Constructor for a new IconTabBar.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.IconTabBar;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.IconTab): sap.m.IconTabBar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>expand</code> event of this
       * <code>sap.m.IconTabBar</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.IconTabBar</code> itself.Indicates that the tab will expand or collapse.
       * @since 1.15.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.IconTabBar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachExpand(oData: any, fnFunction: any, oListener?: any): sap.m.IconTabBar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.IconTabBar</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.IconTabBar</code> itself.Fires when an item is selected.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.IconTabBar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.IconTabBar;

      /**
       * Forwards aggregations with the name of items to the internal list.
       * @param sAggregationName The name for the binding
       * @param oBindingInfo The configuration parameters for the binding
       * @returns this pointer for chaining
      */
      bindAggregation(sAggregationName: string, oBindingInfo: any): sap.m.IconTabBar;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.IconTabBar;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.IconTabBar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>expand</code> event of this
       * <code>sap.m.IconTabBar</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.15.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachExpand(fnFunction: any, oListener: any): sap.m.IconTabBar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.IconTabBar</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.IconTabBar;


      /**
       * Fires event <code>expand</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>expand</code> of type <code>boolean</code>If the tab will expand, this is
       * true.</li><li><code>collapse</code> of type <code>boolean</code>If the tab will collapse, this is
       * true.</li></ul>
       * @since 1.15.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireExpand(mArguments: any): sap.m.IconTabBar;

      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>item</code> of type <code>sap.m.IconTabFilter</code>The selected
       * item</li><li><code>key</code> of type <code>string</code>The key of the selected
       * item</li><li><code>selectedItem</code> of type <code>sap.m.IconTabFilter</code>The selected
       * item</li><li><code>selectedKey</code> of type <code>string</code>The key of the selected
       * item</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.IconTabBar;

      /**
       * Gets current value of property <code>applyContentPadding</code>.Determines whether the IconTabBar
       * content fits to the full area.The paddings are removed if it's set to false.Default value is
       * <code>true</code>.
       * @since 1.26
       * @returns Value of property <code>applyContentPadding</code>
      */
      getApplyContentPadding(): boolean;

      /**
       * Gets current value of property <code>backgroundDesign</code>.Specifies the background color of the
       * IconTabBar.Depending on the theme, you can change the state ofthe background color to "Solid",
       * "Translucent", or "Transparent".Default value is <code>Solid</code>.
       * @since 1.26
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets content of aggregation <code>content</code>.Represents the contents displayed below the
       * IconTabBar.If there are multiple contents, they are rendered after each other.The developer has to
       * manage to display the right one or use the content aggregationinside the IconTabFilter (which will
       * be displayed instead if it is set).
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>expandable</code>.Defines if the tabs are collapsible and
       * expandable.Default value is <code>true</code>.
       * @since 1.15.0
       * @returns Value of property <code>expandable</code>
      */
      getExpandable(): boolean;

      /**
       * Gets current value of property <code>expanded</code>.Indicates if the actual tab content is expanded
       * or not.Default value is <code>true</code>.
       * @since 1.15.0
       * @returns Value of property <code>expanded</code>
      */
      getExpanded(): boolean;

      /**
       * Gets current value of property <code>headerMode</code>.Specifies the header mode.<b>Note:</b> The
       * Inline mode works only if no icons are set.Default value is <code>Standard</code>.
       * @since 1.40
       * @returns Value of property <code>headerMode</code>
      */
      getHeaderMode(): sap.m.IconTabHeaderMode;

      /**
       * Gets content of aggregation <code>items</code>.The items displayed in the IconTabBar.
      */
      getItems(): sap.m.IconTab[];

      /**
       * Returns a metadata object for class sap.m.IconTabBar.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Reflector for the internal header's selectedKey property.
       * @returns The current property value
      */
      getSelectedKey(): string;

      /**
       * Gets current value of property <code>showSelection</code>.Defines whether the current selection
       * should be visualized.Default value is <code>true</code>.
       * @returns Value of property <code>showSelection</code>
      */
      getShowSelection(): boolean;

      /**
       * Gets current value of property <code>stretchContentHeight</code>.Determines whether the IconTabBar
       * height is stretched to the maximum possible heightof its parent container. As a prerequisite, the
       * height of the parent container must bedefined as a fixed value.Default value is <code>false</code>.
       * @since 1.26
       * @returns Value of property <code>stretchContentHeight</code>
      */
      getStretchContentHeight(): boolean;

      /**
       * Gets current value of property <code>upperCase</code>.Determines whether the text of the icon tab
       * filter (not the count) is displayed in uppercase.Default value is <code>false</code>.
       * @since 1.22
       * @returns Value of property <code>upperCase</code>
      */
      getUpperCase(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.m.IconTab</code> in the aggregation <code>items</code>.and returns
       * its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.IconTab): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.IconTabBar;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.IconTab, iIndex: number): sap.m.IconTabBar;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.IconTab[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.IconTab): sap.m.IconTab;

      /**
       * Sets a new value for property <code>applyContentPadding</code>.Determines whether the IconTabBar
       * content fits to the full area.The paddings are removed if it's set to false.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.26
       * @param bApplyContentPadding New value for property <code>applyContentPadding</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setApplyContentPadding(bApplyContentPadding: boolean): sap.m.IconTabBar;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.Specifies the background color of the
       * IconTabBar.Depending on the theme, you can change the state ofthe background color to "Solid",
       * "Translucent", or "Transparent".When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Solid</code>.
       * @since 1.26
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.IconTabBar;

      /**
       * Sets the tabs as collapsible and expandable without re-rendering the control.
       * @param bExpandable new parameter value
       * @returns this pointer for chaining
      */
      setExpandable(bExpandable: boolean): sap.m.IconTabBar;

      /**
       * Sets the tab content as expanded.
       * @param bExpanded new parameter value
       * @returns this pointer for chaining
      */
      setExpanded(bExpanded: boolean): sap.m.IconTabBar;

      /**
       * Sets the header mode.
       * @param mode new parameter value
       * @returns this pointer for chaining
      */
      setHeaderMode(mode: sap.m.IconTabHeaderMode): sap.m.IconTabBar;

      /**
       * Reflector for the internal header's selectedKey property.
       * @param sValue the new value
       * @returns this pointer for chaining
      */
      setSelectedKey(sValue: string): sap.m.IconTabBar;

      /**
       * Sets a new value for property <code>showSelection</code>.Defines whether the current selection
       * should be visualized.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>true</code>.
       * @param bShowSelection New value for property <code>showSelection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSelection(bShowSelection: boolean): sap.m.IconTabBar;

      /**
       * Sets a new value for property <code>stretchContentHeight</code>.Determines whether the IconTabBar
       * height is stretched to the maximum possible heightof its parent container. As a prerequisite, the
       * height of the parent container must bedefined as a fixed value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.26
       * @param bStretchContentHeight New value for property <code>stretchContentHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStretchContentHeight(bStretchContentHeight: boolean): sap.m.IconTabBar;

      /**
       * Sets a new value for property <code>upperCase</code>.Determines whether the text of the icon tab
       * filter (not the count) is displayed in uppercase.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.22
       * @param bUpperCase New value for property <code>upperCase</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUpperCase(bUpperCase: boolean): sap.m.IconTabBar;
    }
    /**
     * The TimePicker is an extension of the Input control and allows time selection in anydevice or
     * browser supported by UI5.It enables users to fill time related input fields. For the TimePicker
     * UI,you can define text, icon or both. A time format must be specified,otherwise the default
     * "HH:mm:ss a" will be used. The functionality is aligned with the{@link sap.m.DatePicker} control for
     * consistent behavior.
     * @resource sap/m/TimePicker.js
    */
    export class TimePicker extends sap.m.MaskInput {


      /**
       * Constructor for a new TimePicker.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Fires change event to attached listeners.Expects following event parameters:<ul><li>value parameter
       * of type <code>string</code> - the new value of the input</li><li>valid parameter of type
       * <code>boolean</code> - indicator for a valid time</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns <code>this</code> to allow method chaining
      */
      fireChange(mArguments: any): sap.m.TimePicker;

      /**
       * Fires the change event for the listeners
       * @param sValue value of the input.
       * @param oParams extra event parameters.
      */
      fireChangeEvent(sValue: String, oParams?: any): void;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>dateValue</code>.Holds a reference to a JavaScript Date Object.
       * The <code>value</code> (string)property will be set according to it. Alternatively, if the
       * <code>value</code>and <code>valueFormat</code> pair properties are supplied instead,the
       * <code>dateValue</code> will be instantiated аccording to the parsed<code>value</code>.
       * @returns Value of property <code>dateValue</code>
      */
      getDateValue(): any;

      /**
       * Gets current value of property <code>displayFormat</code>.Determines the format, displayed in the
       * input field and the picker sliders.The default value is the browser's medium time format locale
       * setting{@link sap.ui.core.LocaleData#getTimePattern}.If data binding with type {@link
       * sap.ui.model.type.Time} is used for the<code>value</code> property, the <code>displayFormat</code>
       * propertyis ignored as the information is provided from the binding itself.
       * @returns Value of property <code>displayFormat</code>
      */
      getDisplayFormat(): string;

      /**
       * Gets current value of property <code>localeId</code>.Defines the locale used to parse string values
       * representing time.Determines the locale, used to interpret the string, supplied by
       * the<code>value</code> property.Example: AM in the string "09:04 AM" is locale (language)
       * dependent.The format comes from the browser language settings if not set explicitly.Used in
       * combination with 12 hour <code>valueFormat</code> containing 'a', whichstands for day period
       * string.Default value is taken from browser's locale setting.
       * @returns Value of property <code>localeId</code>
      */
      getLocaleId(): string;

      /**
       * Returns a metadata object for class sap.m.TimePicker.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minutesStep</code>.Sets the minutes slider step.The minutes
       * slider is populated only by multiples of the step.Default value is <code>1</code>.
       * @returns Value of property <code>minutesStep</code>
      */
      getMinutesStep(): number;

      /**
       * Gets current value of property <code>secondsStep</code>.Sets the seconds slider step.The seconds
       * slider is populated only by multiples of the step.Default value is <code>1</code>.
       * @returns Value of property <code>secondsStep</code>
      */
      getSecondsStep(): number;

      /**
       * Gets current value of property <code>title</code>.Displays the text of the general picker label and
       * is read by screen readers.It is visible only on phone.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>valueFormat</code>.Determines the format of the value
       * property.The default value is the browser's medium time format locale setting{@link
       * sap.ui.core.LocaleData#getTimePattern}.If data binding with type {@link sap.ui.model.type.Time} is
       * used for the<code>value</code> property, the <code>valueFormat</code> propertyis ignored as the
       * information is provided from the binding itself.
       * @returns Value of property <code>valueFormat</code>
      */
      getValueFormat(): string;

      /**
       * Initializes the control.
      */
      init(): void;

      /**
       * Called after the picker closes.
      */
      onAfterClose(): void;

      /**
       * Called after the picker appears.
      */
      onAfterOpen(): void;

      /**
       * Called before the picker appears.
      */
      onBeforeOpen(): void;

      /**
       * Sets the <code>dateValue</code> JavaScript date object.Recommended usage is when <code>value</code>
       * is not set, as they are mutually exclusive.
       * @param oDate New date object
       * @returns this instance, used for chaining
      */
      setDateValue(oDate: any): sap.m.TimePicker | Error;

      /**
       * Sets the <code>displayFormat</code>.
       * @param sDisplayFormat The format of the string inside the input
       * @returns this instance, used for chaining
      */
      setDisplayFormat(sDisplayFormat: string): sap.m.TimePicker;

      /**
       * Sets the locale of the control.Used for parsing and formatting the time values in languages
       * different than English.Necessary for translation and auto-complete of the day periods, such as AM
       * and PM.
       * @param sLocaleId A locale identifier like 'en_US'
       * @returns this instance, used for chaining
      */
      setLocaleId(sLocaleId: string): sap.m.TimePicker;

      /**
       * Sets the minutes slider step.
       * @param iStep The step used to generate values for the minutes slider
       * @returns this
      */
      setMinutesStep(iStep: any): any;

      /**
       * Sets the seconds slider step.
       * @param iStep The step used to generate values for the seconds slider
       * @returns this
      */
      setSecondsStep(iStep: any): any;

      /**
       * Sets the <code>valueFormat</code> property.
       * @param sValueFormat The format of strings that are set as value to the control
       * @returns this instance, used for chaining
      */
      setValueFormat(sValueFormat: string): sap.m.TimePicker;
    }
    /**
     * MultiInput provides functionality to add / remove / enter tokens
     * @resource sap/m/MultiInput.js
    */
    export class MultiInput extends sap.m.Input {


      /**
       * Constructor for a new MultiInput.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some token to the aggregation <code>tokens</code>.
       * @param oToken the token to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addToken(oToken: sap.m.Token): sap.m.MultiInput;

      /**
       * Function adds an validation callback called before any new token gets added to the tokens
       * aggregation
       * @param fValidator undefined
      */
      addValidator(fValidator: any): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tokenChange</code> event of this
       * <code>sap.m.MultiInput</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MultiInput</code> itself.Fired when the tokens aggregation changed (add / remove token)
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MultiInput</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTokenChange(oData: any, fnFunction: any, oListener?: any): sap.m.MultiInput;

      /**
       * Function overwrites clone function to add tokens to MultiInput
       * @returns reference to the newly created clone
      */
      clone(): sap.ui.core.Element;

      /**
       * Close multi-line MultiInput in multi-line mode
       * @since 1.28
      */
      closeMultiLine(): void;

      /**
       * Destroys all the tokens in the aggregation <code>tokens</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyTokens(): sap.m.MultiInput;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tokenChange</code> event of this
       * <code>sap.m.MultiInput</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTokenChange(fnFunction: any, oListener: any): sap.m.MultiInput;


      /**
       * Fires event <code>tokenChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>type</code> of type <code>string</code>Type of tokenChange event.There are
       * four TokenChange types: "added", "removed", "removedAll", "tokensChanged".Use
       * Tokenizer.TokenChangeType.Added for "added",    Tokenizer.TokenChangeType.Removed for "removed",
       * Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged
       * for "tokensChanged".</li><li><code>token</code> of type <code>sap.m.Token</code>The added token or
       * removed token.This parameter is used when tokenChange type is "added" or
       * "removed".</li><li><code>tokens</code> of type <code>sap.m.Token[]</code>The array of removed
       * tokens.This parameter is used when tokenChange type is
       * "removedAll".</li><li><code>addedTokens</code> of type <code>sap.m.Token[]</code>The array of tokens
       * that are added.This parameter is used when tokenChange type is
       * "tokenChanged".</li><li><code>removedTokens</code> of type <code>sap.m.Token[]</code>The array of
       * tokens that are removed.This parameter is used when tokenChange type is "tokenChanged".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTokenChange(mArguments: any): sap.m.MultiInput;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Get the reference element which the message popup should dock to
       * @returns Dom Element which the message popup should dock to
      */
      getDomRefForValueStateMessage(): any;

      /**
       * Gets current value of property <code>enableMultiLineMode</code>.If set to true, the MultiInput will
       * be displayed in multi-line display mode.In multi-line display mode, all tokens can be fully viewed
       * and easily edited in the MultiInput.The default value is false.Default value is <code>false</code>.
       * @since 1.28
       * @returns Value of property <code>enableMultiLineMode</code>
      */
      getEnableMultiLineMode(): boolean;

      /**
       * Gets current value of property <code>maxTokens</code>.The max number of tokens that is allowed in
       * MultiInput.
       * @since 1.36
       * @returns Value of property <code>maxTokens</code>
      */
      getMaxTokens(): number;

      /**
       * Returns a metadata object for class sap.m.MultiInput.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Function returns domref which acts as reference point for the opening suggestion menu
       * @returns the domref at which to open the suggestion menu
      */
      getPopupAnchorDomRef(): any;

      /**
       * Gets content of aggregation <code>tokens</code>.The currently displayed tokens
      */
      getTokens(): sap.m.Token[];

      /**
       * Checks for the provided <code>sap.m.Token</code> in the aggregation <code>tokens</code>.and returns
       * its index if found or -1 otherwise.
       * @param oToken The token whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfToken(oToken: sap.m.Token): number;

      /**
       * Inserts a token into the aggregation <code>tokens</code>.
       * @param oToken the token to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the token should be inserted at; for             a
       * negative value of <code>iIndex</code>, the token is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the token is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertToken(oToken: sap.m.Token, iIndex: number): sap.m.MultiInput;

      /**
       * Focus is on MultiInput
       * @param oEvent undefined
      */
      onfocusin(oEvent: any): void;

      /**
       * When press ESC, deselect all tokens and all texts
       * @param oEvent undefined
      */
      onsapescape(oEvent: any): void;

      /**
       * When tap on text field, deselect all tokens
       * @param oEvent undefined
      */
      ontap(oEvent: any): void;

      /**
       * Expand multi-line MultiInput in multi-line mode
       * @since 1.28
      */
      openMultiLine(): void;

      /**
       * Removes all the controls from the aggregation <code>tokens</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTokens(): sap.m.Token[];

      /**
       * Function removes all validation callbacks
      */
      removeAllValidators(): void;

      /**
       * Removes a token from the aggregation <code>tokens</code>.
       * @param vToken The token to remove or its index or id
       * @returns The removed token or <code>null</code>
      */
      removeToken(vToken: number | string | sap.m.Token): sap.m.Token;

      /**
       * Function removes an validation callback
       * @param fValidator undefined
      */
      removeValidator(fValidator: any): void;

      /**
       * Setter for property <code>enableMultiLineMode</code>.
       * @since 1.28
      */
      setEnableMultiLineMode(): void;

      /**
       * Sets a new value for property <code>maxTokens</code>.The max number of tokens that is allowed in
       * MultiInput.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.36
       * @param iMaxTokens New value for property <code>maxTokens</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxTokens(iMaxTokens: number): sap.m.MultiInput;

      /**
       * Function sets an array of tokens, existing tokens will get overridden
       * @param aTokens the new token set
      */
      setTokens(aTokens: sap.m.Token[]): void;
    }
    /**
     * This is a date input control with a calendar as date picker.A date can be entered using a calendar
     * that opens in a popup. Alternatively a value can be entered directly in the input field by typing it
     * in.(This is only possible on desktop devices, on mobile devices keyboard input is not possible.)If a
     * date is entered by typing it into the input field, it must fit to the used date format and locale.
     * (See <code>sap.ui.core.format.DateFormat</code>)There are two options to provide a date for the
     * <code>DatePicker</code>.You can put a date as a string to the property <code>value</code> or you can
     * put a JavaScript Date object to the property <code>dateValue</code>.Only one of the properties
     * should be used at one time, but they are synchronized internally.What property you should use
     * depends on the use case of the application:<ul><li>Use the <code>value</code> property if you want
     * to bind the <code>DatePicker</code> to a model using the
     * <code>sap.ui.model.type.Date</code>.</li><li>Use the <code>value</code> property if the date is
     * provided as a string from the backend or inside the application (e.g. as ABAP type DATS
     * field).</li><li>Use the <code>dateValue</code> property if the date is already provided as a
     * JavaScript Date object or you want to work with a JavaScript Date object.</li></ul>All formatting
     * and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}, so
     * read the corresponding documentation if you need some information about this.Supported format
     * options are pattern-based on Unicode LDML Date Format notation. {@link
     * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}For example, if the
     * <code>valueFormat</code> is "yyyy-MM-dd", <code>displayFormat</code> is "MMM d, y" and the used
     * locale is English,a valid <code>value</code> string is "2015-07-30", which leads to an output of
     * "Jul 30, 2015".If no <code>placeholder</code> is set to the <code>DatePicker</code> the used
     * <code>displayFormat</code> is shown as placeholder.If another placeholder is needed, it must be
     * set.Internally the <code>sap.ui.unified.Calendar</code> is used, but it is only needed if the
     * <code>DatePicker</code> is opened. This means that it is not needed for the initial rendering.If the
     * <code>sap.ui.unified</code> library is not loaded before the <code>DatePicker</code> is opened, it
     * will be loaded upon opening.This could lead to a waiting time before a <code>DatePicker</code> is
     * opened the first time. To prevent this, applications using the <code>DatePicker</code> should also
     * loadthe <code>sap.ui.unified</code> library.
     * @resource sap/m/DatePicker.js
    */
    export class DatePicker extends sap.m.InputBase {


      /**
       * Constructor for a new DatePicker.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some <code>specialDate</code> to the aggregation <code>specialDates</code>.
       * @since 1.38.5
       * @param oSpecialDate the specialDate to add; if empty, nothing is added
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.DatePicker;

      /**
       * Destroys all the specialDates in the aggregation <code>specialDates</code>.
       * @since 1.38.5
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySpecialDates(): sap.m.DatePicker;


      /**
       * Fire event change to attached listeners.Expects following event parameters:<ul><li>'value' of type
       * <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li><li>'valid' of type
       * <code>boolean</code> Indicator for a valid date.</li></ul>
       * @param mArguments the arguments to pass along with the event.
       * @returns <code>this</code> to allow method chaining
      */
      fireChange(mArguments: any): sap.m.DatePicker;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>dateValue</code>.The date as JavaScript Date object. This is
       * independent from any formatter.<b>Note:</b> If this property is used, the <code>value</code>
       * property should not be changed from the caller.
       * @returns Value of property <code>dateValue</code>
      */
      getDateValue(): any;

      /**
       * Gets current value of property <code>displayFormat</code>.The date is displayed in the input field
       * using this format. By default, the medium format of the used locale is used.Supported format options
       * are pattern-based on Unicode LDML Date Format notation. {@link
       * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}<b>Note:</b> If you use data binding on the
       * <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be
       * ignored.The format defined in the binding will be used.
       * @returns Value of property <code>displayFormat</code>
      */
      getDisplayFormat(): string;

      /**
       * Gets current value of property <code>displayFormatType</code>.Displays date in this given type in
       * input field. Default value is taken from locale settings.Accepted are values of
       * <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of
       * theconfiguration is used.<b>Note:</b> If data binding on <code>value</code> property with type
       * <code>sap.ui.model.type.Date</code> is used, this property will be ignored.Default value is
       * <code></code>.
       * @since 1.28.6
       * @returns Value of property <code>displayFormatType</code>
      */
      getDisplayFormatType(): string;

      /**
       * ID of the element which is the current target of the association <code>legend</code>, or
       * <code>null</code>.
       * @since 1.38.5
      */
      getLegend(): any;

      /**
       * Gets current value of property <code>maxDate</code>.Maximum date that can be shown and selected in
       * the <code>DatePicker</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>maxDate</code> is set to be before the <code>minDate</code>,the <code>maxDate</code> and the
       * <code>minDate</code> are switched before rendering.
       * @since 1.38.0
       * @returns Value of property <code>maxDate</code>
      */
      getMaxDate(): any;

      /**
       * Returns a metadata object for class sap.m.DatePicker.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minDate</code>.Minimum date that can be shown and selected in
       * the <code>DatePicker</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>minDate</code> is set to be after the <code>maxDate</code>,the <code>maxDate</code> and the
       * <code>minDate</code> are switched before rendering.
       * @since 1.38.0
       * @returns Value of property <code>minDate</code>
      */
      getMinDate(): any;

      /**
       * Gets current value of property <code>secondaryCalendarType</code>.If set, the days in the calendar
       * popup are also displayed in this calendar typeIf not set, the dates are only displayed in the
       * primary calendar type
       * @since 1.34.1
       * @returns Value of property <code>secondaryCalendarType</code>
      */
      getSecondaryCalendarType(): sap.ui.core.CalendarType;

      /**
       * Gets content of aggregation <code>specialDates</code>.Date Range with type to visualize special days
       * in the Calendar.If one day is assigned to more than one Type, only the first one will be used.
       * @since 1.38.5
      */
      getSpecialDates(): sap.ui.core.Element[];

      /**
       * Gets current value of property <code>valueFormat</code>.The date string expected and returned in the
       * <code>value</code> property uses this format. By default the short format of the used locale is
       * used.Supported format options are pattern-based on Unicode LDML Date Format notation. {@link
       * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}For example, if the date string represents
       * an ABAP DATS type, the format should be "yyyyMMdd".<b>Note:</b> If data binding on
       * <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property
       * will be ignored.The format defined in the binding will be used.
       * @returns Value of property <code>valueFormat</code>
      */
      getValueFormat(): string;

      /**
       * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation
       * <code>specialDates</code>.and returns its index if found or -1 otherwise.
       * @since 1.38.5
       * @param oSpecialDate The specialDate whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSpecialDate(oSpecialDate: sap.ui.core.Element): number;

      /**
       * Inserts a <code>specialDate</code> to the aggregation <code>specialDates</code>.
       * @since 1.38.5
       * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
       * @param iIndex the 0-based index the <code>specialDate</code> should be inserted at;             for
       * a negative value of <code>iIndex</code>, the <code>specialDate</code> is inserted at position 0;    
       *         for a value greater than the current size of the aggregation, the <code>specialDate</code>
       * is inserted at the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.DatePicker;

      /**
       * Removes all the controls from the aggregation <code>specialDates</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.38.5
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSpecialDates(): sap.ui.core.Element[];

      /**
       * Removes a <code>specialDate</code> from the aggregation <code>specialDates</code>.
       * @since 1.38.5
       * @param oSpecialDate The <code>specialDate</code> to remove or its index or id
       * @returns The removed <code>specialDate</code> or null
      */
      removeSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;

      /**
       * Sets a new value for property <code>dateValue</code>.The date as JavaScript Date object. This is
       * independent from any formatter.<b>Note:</b> If this property is used, the <code>value</code>
       * property should not be changed from the caller.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oDateValue New value for property <code>dateValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDateValue(oDateValue: any): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>displayFormat</code>.The date is displayed in the input field
       * using this format. By default, the medium format of the used locale is used.Supported format options
       * are pattern-based on Unicode LDML Date Format notation. {@link
       * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}<b>Note:</b> If you use data binding on the
       * <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be
       * ignored.The format defined in the binding will be used.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.
       * @param sDisplayFormat New value for property <code>displayFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayFormat(sDisplayFormat: string): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>displayFormatType</code>.Displays date in this given type in
       * input field. Default value is taken from locale settings.Accepted are values of
       * <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of
       * theconfiguration is used.<b>Note:</b> If data binding on <code>value</code> property with type
       * <code>sap.ui.model.type.Date</code> is used, this property will be ignored.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @since 1.28.6
       * @param sDisplayFormatType New value for property <code>displayFormatType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayFormatType(sDisplayFormatType: string): sap.m.DatePicker;

      /**
       * Sets the associated legend.
       * @since 1.38.5
       * @param oLegend ID of an element which becomes the new target of this <code>legend</code>
       * association;                                                        alternatively, an element
       * instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLegend(oLegend: any | sap.ui.unified.CalendarLegend): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>maxDate</code>.Maximum date that can be shown and selected in
       * the <code>DatePicker</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>maxDate</code> is set to be before the <code>minDate</code>,the <code>maxDate</code> and the
       * <code>minDate</code> are switched before rendering.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.38.0
       * @param oMaxDate New value for property <code>maxDate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxDate(oMaxDate: any): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>minDate</code>.Minimum date that can be shown and selected in
       * the <code>DatePicker</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>minDate</code> is set to be after the <code>maxDate</code>,the <code>maxDate</code> and the
       * <code>minDate</code> are switched before rendering.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.38.0
       * @param oMinDate New value for property <code>minDate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinDate(oMinDate: any): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>secondaryCalendarType</code>.If set, the days in the calendar
       * popup are also displayed in this calendar typeIf not set, the dates are only displayed in the
       * primary calendar typeWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.34.1
       * @param sSecondaryCalendarType New value for property <code>secondaryCalendarType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSecondaryCalendarType(sSecondaryCalendarType: sap.ui.core.CalendarType): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>valueFormat</code>.The date string expected and returned in the
       * <code>value</code> property uses this format. By default the short format of the used locale is
       * used.Supported format options are pattern-based on Unicode LDML Date Format notation. {@link
       * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}For example, if the date string represents
       * an ABAP DATS type, the format should be "yyyyMMdd".<b>Note:</b> If data binding on
       * <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property
       * will be ignored.The format defined in the binding will be used.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sValueFormat New value for property <code>valueFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueFormat(sValueFormat: string): sap.m.DatePicker;

      /**
       * Defines the width of the DatePicker. Default value is 100%
       * @param sWidth new value for <code>width</code>
       * @returns <code>this</code> to allow method chaining
      */
      setWidth(sWidth: string): sap.m.DatePicker;
    }
    /**
     * The WizardStep is a container control which should be used mainly to aggregate user input
     * controls.It gives the developer the ability to validate, invalidate the step and define subsequent
     * steps.Note: The WizardStep control control is supposed to be used only as an aggregation of the
     * Wizard control,and should not be used as a standalone one.
     * @resource sap/m/WizardStep.js
    */
    export class WizardStep extends sap.ui.core.Control {


      /**
       * Constructor for a new WizardStep.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.WizardStep;

      /**
       * Adds some subsequentStep into the association <code>subsequentSteps</code>.
       * @param vSubsequentStep the subsequentSteps to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSubsequentStep(vSubsequentStep: any | sap.m.WizardStep): sap.m.WizardStep;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>activate</code> event of this
       * <code>sap.m.WizardStep</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.WizardStep</code> itself.This event is fired on next step activation from the Wizard.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.WizardStep</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachActivate(oData: any, fnFunction: any, oListener?: any): sap.m.WizardStep;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>complete</code> event of this
       * <code>sap.m.WizardStep</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.WizardStep</code> itself.This event is fired after the user presses the Next button in
       * the Wizard,or on <code>nextStep</code> method call from the app developer.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.WizardStep</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachComplete(oData: any, fnFunction: any, oListener?: any): sap.m.WizardStep;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.WizardStep;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>activate</code> event of this
       * <code>sap.m.WizardStep</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachActivate(fnFunction: any, oListener: any): sap.m.WizardStep;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>complete</code> event of this
       * <code>sap.m.WizardStep</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachComplete(fnFunction: any, oListener: any): sap.m.WizardStep;


      /**
       * Fires event <code>activate</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireActivate(mArguments: any): sap.m.WizardStep;

      /**
       * Fires event <code>complete</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireComplete(mArguments: any): sap.m.WizardStep;

      /**
       * Gets content of aggregation <code>content</code>.The content of the Wizard Step.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>icon</code>.Determines the icon that is displayed for this
       * step.The icon is visualized in the progress navigation part of the Wizard control.<b>Note:</b> In
       * order for the icon to be displayed, each step in the Wizard should havethis property defined,
       * otherwise the default numbering will be displayed.Default value is <code></code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Returns a metadata object for class sap.m.WizardStep.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * ID of the element which is the current target of the association <code>nextStep</code>, or
       * <code>null</code>.
      */
      getNextStep(): any;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>subsequentSteps</code>.
      */
      getSubsequentSteps(): any[];

      /**
       * Gets current value of property <code>title</code>.Determines the title of the step.The title is
       * visualized in the Wizard control.Default value is <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>validated</code>.Indicates whether or not the step is
       * validated.When a step is validated a Next button is visualized in the Wizard control.Default value
       * is <code>true</code>.
       * @returns Value of property <code>validated</code>
      */
      getValidated(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.WizardStep;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes all the controls in the association named <code>subsequentSteps</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSubsequentSteps(): any[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes an subsequentStep from the association named <code>subsequentSteps</code>.
       * @param vSubsequentStep The subsequentStep to be removed or its index or ID
       * @returns The removed subsequentStep or <code>null</code>
      */
      removeSubsequentStep(vSubsequentStep: number | any | sap.m.WizardStep): any;

      /**
       * Sets a new value for property <code>icon</code>.Determines the icon that is displayed for this
       * step.The icon is visualized in the progress navigation part of the Wizard control.<b>Note:</b> In
       * order for the icon to be displayed, each step in the Wizard should havethis property defined,
       * otherwise the default numbering will be displayed.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.WizardStep;

      /**
       * Sets the associated <code>nextStep</code>.
       * @param oNextStep ID of an element which becomes the new target of this nextStep association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNextStep(oNextStep: any | sap.m.WizardStep): sap.m.WizardStep;

      /**
       * Sets a new value for property <code>title</code>.Determines the title of the step.The title is
       * visualized in the Wizard control.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.WizardStep;

      /**
       * Sets a new value for property <code>validated</code>.Indicates whether or not the step is
       * validated.When a step is validated a Next button is visualized in the Wizard control.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bValidated New value for property <code>validated</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValidated(bValidated: boolean): sap.m.WizardStep;
    }
    /**
     * Use the CustomTile control to display application specific content in the Tile control.The tile
     * width is 8.5em and height is 10em.
     * @resource sap/m/CustomTile.js
    */
    export class CustomTile extends sap.m.Tile {


      /**
       * Constructor for a new CustomTile.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Destroys the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.CustomTile;


      /**
       * Gets content of aggregation <code>content</code>.Defines the content of the CustomTile.
      */
      getContent(): sap.ui.core.Control;

      /**
       * Returns a metadata object for class sap.m.CustomTile.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Sets the aggregated <code>content</code>.
       * @param oContent The content to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContent(oContent: sap.ui.core.Control): sap.m.CustomTile;
    }
    /**
     * This control displays the news content text and subheader in a tile.
     * @resource sap/m/NewsContent.js
    */
    export class NewsContent extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.NewsContent control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.NewsContent</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.NewsContent</code> itself.The event is fired when the user chooses the news content.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.NewsContent</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.NewsContent;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.NewsContent</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.NewsContent;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.NewsContent;

      /**
       * Gets current value of property <code>contentText</code>.The content text.
       * @returns Value of property <code>contentText</code>
      */
      getContentText(): string;

      /**
       * Returns a metadata object for class sap.m.NewsContent.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.Default value is <code>Auto</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): sap.m.Size;

      /**
       * Gets current value of property <code>subheader</code>.The subheader.
       * @returns Value of property <code>subheader</code>
      */
      getSubheader(): string;

      /**
       * Sets a new value for property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: sap.m.Size): sap.m.NewsContent;

      /**
       * Sets a new value for property <code>subheader</code>.The subheader.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sSubheader New value for property <code>subheader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubheader(sSubheader: string): sap.m.NewsContent;
    }
    /**
     * This control is used within the GenericTile control.
     * @resource sap/m/TileContent.js
    */
    export class TileContent extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.TileContent control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Destroys the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.TileContent;


      /**
       * Gets content of aggregation <code>content</code>.The switchable view that depends on the tile type.
      */
      getContent(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>disabled</code>.Disables control if true.Default value is
       * <code>false</code>.
       * @since 1.23
       * @returns Value of property <code>disabled</code>
      */
      getDisabled(): boolean;

      /**
       * Gets current value of property <code>footer</code>.The footer text of the tile.
       * @returns Value of property <code>footer</code>
      */
      getFooter(): string;

      /**
       * Gets current value of property <code>frameType</code>.The frame type: 1x1 or 2x1.Default value is
       * <code>Auto</code>.
       * @since 1.25
       * @returns Value of property <code>frameType</code>
      */
      getFrameType(): sap.m.FrameType;

      /**
       * Returns a metadata object for class sap.m.TileContent.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>size</code>.Updates the size of the tile. If it is not set,
       * then the default size is applied based on the device tile.Default value is <code>Auto</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): sap.m.Size;

      /**
       * Gets current value of property <code>unit</code>.The percent sign, the currency symbol, or the unit
       * of measure.
       * @returns Value of property <code>unit</code>
      */
      getUnit(): string;

      /**
       * Sets the aggregated <code>content</code>.
       * @param oContent The content to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContent(oContent: sap.ui.core.Control): sap.m.TileContent;

      /**
       * Sets a new value for property <code>disabled</code>.Disables control if true.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.23
       * @param bDisabled New value for property <code>disabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisabled(bDisabled: boolean): sap.m.TileContent;

      /**
       * Sets a new value for property <code>footer</code>.The footer text of the tile.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sFooter New value for property <code>footer</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooter(sFooter: string): sap.m.TileContent;

      /**
       * Sets a new value for property <code>frameType</code>.The frame type: 1x1 or 2x1.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Auto</code>.
       * @since 1.25
       * @param sFrameType New value for property <code>frameType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFrameType(sFrameType: sap.m.FrameType): sap.m.TileContent;

      /**
       * Setter for protected property to enable or disable footer rendering. This function does not
       * invalidate the control.
       * @param value is used to if the footer is rendered or not
       * @returns this to allow method chaining
      */
      setRenderFooter(value: boolean): sap.m.TileContent;

      /**
       * Sets a new value for property <code>size</code>.Updates the size of the tile. If it is not set, then
       * the default size is applied based on the device tile.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: sap.m.Size): sap.m.TileContent;

      /**
       * Sets a new value for property <code>unit</code>.The percent sign, the currency symbol, or the unit
       * of measure.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sUnit New value for property <code>unit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUnit(sUnit: string): sap.m.TileContent;
    }
    /**
     * MessagePage is displayed when there is no data or matching content. There are different use cases
     * where a MessagePage might be visualized, for example:        - The search query returned no results        - The
     * app contains no items        - There are too many items        - The application is loadingThe layout is
     * unchanged but the text varies depending on the use case.<br><b>Note:</b> The
     * <code>MessagePage</code> is not intended to be used as a top-level control,but rather used within
     * controls such as <code>NavContainer</code>, <code>App</code>, <code>Shell</code> or other container
     * controls.
     * @resource sap/m/MessagePage.js
    */
    export class MessagePage extends sap.ui.core.Control {


      /**
       * Constructor for a new MessagePage.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.MessagePage;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.MessagePage;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this
       * <code>sap.m.MessagePage</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.MessagePage</code> itself.This event is fired when Nav Button is pressed.
       * @since 1.28.1
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePage</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePage;

      /**
       * Destroys the customDescription in the aggregation <code>customDescription</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomDescription(): sap.m.MessagePage;

      /**
       * Destroys the customText in the aggregation <code>customText</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomText(): sap.m.MessagePage;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this
       * <code>sap.m.MessagePage</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.28.1
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachNavButtonPress(fnFunction: any, oListener: any): sap.m.MessagePage;


      /**
       * Fires event <code>navButtonPress</code> to attached listeners.
       * @since 1.28.1
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireNavButtonPress(mArguments: any): sap.m.MessagePage;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>customDescription</code>.The (optional) custom description control
       * of this page.Use this aggregation when the "description" (sap.m.Text) control needs to be replaced
       * with a sap.m.Link control."description" and "textDirection" setters can be used for this
       * aggregation.
      */
      getCustomDescription(): sap.m.Link;

      /**
       * Gets content of aggregation <code>customText</code>.The (optional) custom Text control of this
       * page.Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with a
       * sap.m.Link control."text" and "textDirection" setters can be used for this aggregation.
      */
      getCustomText(): sap.m.Link;

      /**
       * Gets current value of property <code>description</code>.Determines the detailed description that
       * shows additional information on the MessagePage.Default value is <code>Check the filter
       * settings.</code>.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>icon</code>.Determines the icon displayed on the
       * MessagePage.Default value is <code>sap-icon://documents</code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Returns a metadata object for class sap.m.MessagePage.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showHeader</code>.Determines the visibility of the MessagePage
       * header.Can be used to hide the header of the MessagePage when it's embedded in another page.Default
       * value is <code>true</code>.
       * @returns Value of property <code>showHeader</code>
      */
      getShowHeader(): boolean;

      /**
       * Gets current value of property <code>showNavButton</code>.Determines the visibility of the
       * navigation button in MessagePage header.Default value is <code>false</code>.
       * @returns Value of property <code>showNavButton</code>
      */
      getShowNavButton(): boolean;

      /**
       * Gets current value of property <code>text</code>.Determines the main text displayed on the
       * MessagePage.Default value is <code>No matching items found.</code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Determines the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>title</code>.Determines the title in the header of MessagePage.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets the aggregated <code>customDescription</code>.
       * @param oCustomDescription The customDescription to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomDescription(oCustomDescription: sap.m.Link): sap.m.MessagePage;

      /**
       * Sets the aggregated <code>customText</code>.
       * @param oCustomText The customText to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomText(oCustomText: sap.m.Link): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>description</code>.Determines the detailed description that
       * shows additional information on the MessagePage.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Check the filter settings.</code>.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>icon</code>.Determines the icon displayed on the
       * MessagePage.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>sap-icon://documents</code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>showHeader</code>.Determines the visibility of the MessagePage
       * header.Can be used to hide the header of the MessagePage when it's embedded in another page.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bShowHeader New value for property <code>showHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHeader(bShowHeader: boolean): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>showNavButton</code>.Determines the visibility of the navigation
       * button in MessagePage header.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bShowNavButton New value for property <code>showNavButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowNavButton(bShowNavButton: boolean): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>text</code>.Determines the main text displayed on the
       * MessagePage.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>No matching items found.</code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>textDirection</code>.Determines the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.MessagePage;

      /**
       * Sets a new value for property <code>title</code>.Determines the title in the header of
       * MessagePage.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.MessagePage;
    }
    /**
     * ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the
     * ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in
     * iPhone and Android while as a sap.m.Popover in iPad.
     * @resource sap/m/ActionSheet.js
    */
    export class ActionSheet extends sap.ui.core.Control {


      /**
       * Constructor for a new ActionSheet.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some button to the aggregation <code>buttons</code>.
       * @param oButton the button to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addButton(oButton: sap.m.Button): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event will be fired after the ActionSheet is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event will be fired after the ActionSheet is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event will be fired before the ActionSheet is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event will be fired before the ActionSheet is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancelButtonPress</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event is fired when the cancelButton is clicked. For
       * iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by
       * clicking outside.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancelButtonPress(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancelButtonTap</code> event of this
       * <code>sap.m.ActionSheet</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.ActionSheet</code> itself.This event is fired when the cancelButton is tapped. For iPad,
       * this event is also fired when showCancelButton is set to true, and Popover is closed by tapping
       * outside.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ActionSheet</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancelButtonTap(oData: any, fnFunction: any, oListener?: any): sap.m.ActionSheet;

      /**
       * Calling this method will make the ActionSheet disappear from the screen.
      */
      close(): void;

      /**
       * Destroys all the buttons in the aggregation <code>buttons</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyButtons(): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancelButtonPress</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancelButtonPress(fnFunction: any, oListener: any): sap.m.ActionSheet;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancelButtonTap</code> event of this
       * <code>sap.m.ActionSheet</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancelButtonTap(fnFunction: any, oListener: any): sap.m.ActionSheet;


      /**
       * Fires event <code>afterClose</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.ActionSheet;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.ActionSheet;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.ActionSheet;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.ActionSheet;

      /**
       * Fires event <code>cancelButtonPress</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancelButtonPress(mArguments: any): sap.m.ActionSheet;

      /**
       * Fires event <code>cancelButtonTap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancelButtonTap(mArguments: any): sap.m.ActionSheet;

      /**
       * Gets content of aggregation <code>buttons</code>.These buttons are added to the content area in
       * ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener
       * is called.
      */
      getButtons(): sap.m.Button[];

      /**
       * Gets current value of property <code>cancelButtonText</code>.This is the text displayed in the
       * cancelButton. Default value is "Cancel", and it's translated according to the current locale
       * setting. This property will be ignored when running either in iPad or showCancelButton is set to
       * false.
       * @returns Value of property <code>cancelButtonText</code>
      */
      getCancelButtonText(): string;

      /**
       * Returns a metadata object for class sap.m.ActionSheet.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placement</code>.The ActionSheet behaves as a sap.m.Popover in
       * iPad and this property is the information about on which side will the popover be placed at.
       * Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top,
       * sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal,
       * sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight,
       * sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop,
       * sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.Default
       * value is <code>Bottom</code>.
       * @returns Value of property <code>placement</code>
      */
      getPlacement(): sap.m.PlacementType;

      /**
       * Gets current value of property <code>showCancelButton</code>.If this is set to true, there will be a
       * cancel button shown below the action buttons. There won't be any cancel button shown in iPad
       * regardless of this property. The default value is set to true.Default value is <code>true</code>.
       * @returns Value of property <code>showCancelButton</code>
      */
      getShowCancelButton(): boolean;

      /**
       * Gets current value of property <code>title</code>.Title will be shown in the header area in iPhone
       * and every Android devices. This property will be ignored in tablets and desktop browser.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.and
       * returns its index if found or -1 otherwise.
       * @param oButton The button whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfButton(oButton: sap.m.Button): number;

      /**
       * Inserts a button into the aggregation <code>buttons</code>.
       * @param oButton the button to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the button should be inserted at; for             a
       * negative value of <code>iIndex</code>, the button is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the button is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertButton(oButton: sap.m.Button, iIndex: number): sap.m.ActionSheet;

      /**
       * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open
       * (this includes opening and closing animations), otherwise it returns false.
      */
      isOpen(): boolean;

      /**
       * Calling this method will make the ActionSheet visible on the screen.
       * @param oControl The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the
       * object to which the popover will be placed. It can be not only a UI5 control, but also an existing
       * dom reference. The side of the placement depends on the placement property set in the popover. In
       * other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because
       * dialog is aligned to the screen.
      */
      openBy(oControl: any): void;

      /**
       * Removes all the controls from the aggregation <code>buttons</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllButtons(): sap.m.Button[];

      /**
       * Removes a button from the aggregation <code>buttons</code>.
       * @param vButton The button to remove or its index or id
       * @returns The removed button or <code>null</code>
      */
      removeButton(vButton: number | string | sap.m.Button): sap.m.Button;

      /**
       * Sets a new value for property <code>cancelButtonText</code>.This is the text displayed in the
       * cancelButton. Default value is "Cancel", and it's translated according to the current locale
       * setting. This property will be ignored when running either in iPad or showCancelButton is set to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sCancelButtonText New value for property <code>cancelButtonText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCancelButtonText(sCancelButtonText: string): sap.m.ActionSheet;

      /**
       * Sets a new value for property <code>placement</code>.The ActionSheet behaves as a sap.m.Popover in
       * iPad and this property is the information about on which side will the popover be placed at.
       * Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top,
       * sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal,
       * sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight,
       * sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop,
       * sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Bottom</code>.
       * @param sPlacement New value for property <code>placement</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlacement(sPlacement: sap.m.PlacementType): sap.m.ActionSheet;

      /**
       * Sets a new value for property <code>showCancelButton</code>.If this is set to true, there will be a
       * cancel button shown below the action buttons. There won't be any cancel button shown in iPad
       * regardless of this property. The default value is set to true.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bShowCancelButton New value for property <code>showCancelButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowCancelButton(bShowCancelButton: boolean): sap.m.ActionSheet;

      /**
       * Sets a new value for property <code>title</code>.Title will be shown in the header area in iPhone
       * and every Android devices. This property will be ignored in tablets and desktop browser.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ActionSheet;
    }
    /**
     * Enables users to navigate between items by providing a list of links to previous steps in the
     * user'snavigation path. The last three steps can be accessed as links directly The remaining links
     * prior to themare available in a drop-down menu.
     * @resource sap/m/Breadcrumbs.js
    */
    export class Breadcrumbs extends sap.ui.core.Control {


      /**
       * Constructor for a new BreadcrumbsAccepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some link to the aggregation <code>links</code>.
       * @since 1.34
       * @param oLink the link to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addLink(oLink: sap.m.Link): sap.m.Breadcrumbs;

      /**
       * Destroys all the links in the aggregation <code>links</code>.
       * @since 1.34
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyLinks(): sap.m.Breadcrumbs;


      /**
       * Gets current value of property <code>currentLocationText</code>.Determines the text of current/last
       * element in the Breadcrumbs path.
       * @since 1.34
       * @returns Value of property <code>currentLocationText</code>
      */
      getCurrentLocationText(): string;

      /**
       * Gets content of aggregation <code>links</code>.A list of all the active link elements in the
       * Breadcrumbs control.<b>Note:</b> Enabling the property <code>wrapping</code> of the link will not
       * worksince it's incompatible with the concept of the control.The other properties will work, but
       * their effect may be undesirable.
       * @since 1.34
      */
      getLinks(): sap.m.Link[];

      /**
       * Returns a metadata object for class sap.m.Breadcrumbs.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.m.Link</code> in the aggregation <code>links</code>.and returns
       * its index if found or -1 otherwise.
       * @since 1.34
       * @param oLink The link whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfLink(oLink: sap.m.Link): number;

      /**
       * Inserts a link into the aggregation <code>links</code>.
       * @since 1.34
       * @param oLink the link to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the link should be inserted at; for             a
       * negative value of <code>iIndex</code>, the link is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the link is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertLink(oLink: sap.m.Link, iIndex: number): sap.m.Breadcrumbs;

      /**
       * Removes all the controls from the aggregation <code>links</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.34
       * @returns An array of the removed elements (might be empty)
      */
      removeAllLinks(): sap.m.Link[];

      /**
       * Removes a link from the aggregation <code>links</code>.
       * @since 1.34
       * @param vLink The link to remove or its index or id
       * @returns The removed link or <code>null</code>
      */
      removeLink(vLink: number | string | sap.m.Link): sap.m.Link;

      /**
       * Sets a new value for property <code>currentLocationText</code>.Determines the text of current/last
       * element in the Breadcrumbs path.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.34
       * @param sCurrentLocationText New value for property <code>currentLocationText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCurrentLocationText(sCurrentLocationText: string): sap.m.Breadcrumbs;
    }
    /**
     * RadioButton is a control similar to CheckBox, but it allows the user to choose only one of the
     * predefined set of options.Usually, RadioButton is used in a group with other RadioButtons (with the
     * groupName property or by using sap.m.RadioButtonGroup), thus providing a limited choice for the
     * user.An event is triggered when the user makes a change of the selection.
     * @resource sap/m/RadioButton.js
    */
    export class RadioButton extends sap.ui.core.Control {


      /**
       * Constructor for a new RadioButton.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.RadioButton;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.RadioButton;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.RadioButton</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.RadioButton</code> itself.Event is triggered when the user makes a change on the radio
       * button (selecting or unselecting it).
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.RadioButton</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.RadioButton;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.RadioButton</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.RadioButton;

      /**
       * Destroys all related objects to the RadioButton
      */
      exit(): void;


      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selected</code> of type <code>boolean</code>Checks whether the RadioButton
       * is active or not.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.RadioButton;

      /**
       * Gets current value of property <code>activeHandling</code>.This is a flag to switch on
       * activeHandling. When it is switched off,there will not be visual changes on active state. Default
       * value is 'true'Default value is <code>true</code>.
       * @returns Value of property <code>activeHandling</code>
      */
      getActiveHandling(): boolean;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>editable</code>.Specifies whether the user can select the radio
       * button.Default value is <code>true</code>.
       * @since 1.25
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Specifies if the radio button is
       * disabled.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>groupName</code>.Name of the radio button group the current
       * radio button belongs to. You can define a new name for the group.If no new name is specified, this
       * radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a
       * group is that when one of the radio buttons in a group is selected, all others are
       * unselected.Default value is <code>sapMRbDefaultGroup</code>.
       * @returns Value of property <code>groupName</code>
      */
      getGroupName(): string;

      /**
       * Returns a metadata object for class sap.m.RadioButton.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>selected</code>.Specifies the select state of the radio
       * buttonDefault value is <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Gets current value of property <code>text</code>.Specifies the text displayed next to the
       * RadioButton
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textAlign</code>.Specifies the alignment of the radio button.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".Default value is
       * <code>Begin</code>.
       * @since 1.28
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR. Alternatively, the control can inherit the text direction from its parent container.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>valueState</code>.Enumeration sap.ui.core.ValueState provides
       * state values Error, Success, Warning, NoneDefault value is <code>None</code>.
       * @since 1.25
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>width</code>.Width of the LabelDefault value is <code></code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
       * @param oEvent provides information for the event
      */
      onsapselect(oEvent: any): void;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>activeHandling</code>.This is a flag to switch on
       * activeHandling. When it is switched off,there will not be visual changes on active state. Default
       * value is 'true'When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bActiveHandling New value for property <code>activeHandling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveHandling(bActiveHandling: boolean): sap.m.RadioButton;

      /**
       * Method to set a RadioButton's state to active or inactive.
       * @param bActive Sets the active state to true or false
      */
      setActiveState(bActive: boolean): void;

      /**
       * Sets a new value for property <code>editable</code>.Specifies whether the user can select the radio
       * button.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @since 1.25
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.RadioButton;

      /**
       * Sets a new value for property <code>enabled</code>.Specifies if the radio button is disabled.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.RadioButton;

      /**
       * Sets RadioButton's groupName. Only one radioButton from the same group can be selected
       * @param sGroupName Name of the group to which the RadioButton will belong.
       * @returns Reference to the control instance for chaining
      */
      setGroupName(sGroupName: string): sap.m.RadioButton;

      /**
       * Sets the state of the RadioButton to selected.
       * @param bSelected defines if the radio button is selected
       * @returns Reference to the control instance for chaining
      */
      setSelected(bSelected: boolean): sap.m.RadioButton;

      /**
       * Sets the text for the RadioButton's label.
       * @param sText The text to be set
       * @returns Reference to the control instance for chaining
      */
      setText(sText: string): sap.m.RadioButton;

      /**
       * Sets a new value for property <code>textAlign</code>.Specifies the alignment of the radio button.
       * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Begin</code>.
       * @since 1.28
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.RadioButton;

      /**
       * Sets the text direction for the RadioButton's label.
       * @param sDirection Text direction to be set to RadioButton's label
       * @returns Reference to the control instance for chaining
      */
      setTextDirection(sDirection: string): sap.m.RadioButton;

      /**
       * Sets a new value for property <code>valueState</code>.Enumeration sap.ui.core.ValueState provides
       * state values Error, Success, Warning, NoneWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>None</code>.
       * @since 1.25
       * @param sValueState New value for property <code>valueState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueState(sValueState: sap.ui.core.ValueState): sap.m.RadioButton;

      /**
       * Sets the width for the RadioButton's label.
       * @param sWidth CSS size to be set as width of the label
       * @returns Reference to the control instance for chaining
      */
      setWidth(sWidth: string): sap.m.RadioButton;
    }
    /**
     * The FacetFilter control is used to provide filtering functionality with multiple parameters.
     * @resource sap/m/FacetFilter.js
    */
    export class FacetFilter extends sap.ui.core.Control {


      /**
       * Constructor for a new FacetFilter.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some list to the aggregation <code>lists</code>.
       * @param oList the list to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addList(oList: sap.m.FacetFilterList): sap.m.FacetFilter;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this
       * <code>sap.m.FacetFilter</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.FacetFilter</code> itself.Fired when the user confirms filter selection.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FacetFilter</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachConfirm(oData: any, fnFunction: any, oListener?: any): sap.m.FacetFilter;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>reset</code> event of this
       * <code>sap.m.FacetFilter</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.FacetFilter</code> itself.Fired when the Reset button is pressed to inform that all
       * FacetFilterLists need to be reset.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FacetFilter</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachReset(oData: any, fnFunction: any, oListener?: any): sap.m.FacetFilter;

      /**
       * Destroys all the lists in the aggregation <code>lists</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyLists(): sap.m.FacetFilter;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this
       * <code>sap.m.FacetFilter</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachConfirm(fnFunction: any, oListener: any): sap.m.FacetFilter;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>reset</code> event of this
       * <code>sap.m.FacetFilter</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachReset(fnFunction: any, oListener: any): sap.m.FacetFilter;


      /**
       * Fires event <code>confirm</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireConfirm(mArguments: any): sap.m.FacetFilter;

      /**
       * Fires event <code>reset</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireReset(mArguments: any): sap.m.FacetFilter;

      /**
       * Gets current value of property <code>liveSearch</code>.Enables/disables live search on all search
       * fields except for the FacetFilterList search.Default value is <code>true</code>.
       * @returns Value of property <code>liveSearch</code>
      */
      getLiveSearch(): boolean;

      /**
       * Returns a metadata object for class sap.m.FacetFilter.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showPersonalization</code>.If set to <code>true</code> and the
       * FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet
       * button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the
       * facet.Default value is <code>false</code>.
       * @returns Value of property <code>showPersonalization</code>
      */
      getShowPersonalization(): boolean;

      /**
       * Gets current value of property <code>showPopoverOKButton</code>.If set to <code>true</code>, an OK
       * button is displayed for every FacetFilterList popover. This button allows the user to close the
       * popover from within the popover instead of having to click outside of it.Default value is
       * <code>false</code>.
       * @returns Value of property <code>showPopoverOKButton</code>
      */
      getShowPopoverOKButton(): boolean;

      /**
       * Gets current value of property <code>showReset</code>.Shows/hides the FacetFilter Reset
       * button.Default value is <code>true</code>.
       * @returns Value of property <code>showReset</code>
      */
      getShowReset(): boolean;

      /**
       * Gets current value of property <code>showSummaryBar</code>.Shows the summary bar instead of the
       * FacetFilter buttons bar when set to <code>true</code>.Default value is <code>false</code>.
       * @returns Value of property <code>showSummaryBar</code>
      */
      getShowSummaryBar(): boolean;

      /**
       * Gets current value of property <code>type</code>.Defines the default appearance of the FacetFilter
       * on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.Default
       * value is <code>Simple</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.FacetFilterType;

      /**
       * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation <code>lists</code>.and
       * returns its index if found or -1 otherwise.
       * @param oList The list whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfList(oList: sap.m.FacetFilterList): number;

      /**
       * Inserts a list into the aggregation <code>lists</code>.
       * @param oList the list to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the list should be inserted at; for             a
       * negative value of <code>iIndex</code>, the list is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the list is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertList(oList: sap.m.FacetFilterList, iIndex: number): sap.m.FacetFilter;

      /**
       * Opens the FacetFilter dialog.
       * @returns this pointer for chaining
      */
      openFilterDialog(): sap.m.FacetFilter;

      /**
       * Removes all the controls from the aggregation <code>lists</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllLists(): sap.m.FacetFilterList[];

      /**
       * Sets a new value for property <code>showPersonalization</code>.If set to <code>true</code> and the
       * FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet
       * button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the
       * facet.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>false</code>.
       * @param bShowPersonalization New value for property <code>showPersonalization</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowPersonalization(bShowPersonalization: boolean): sap.m.FacetFilter;

      /**
       * Sets a new value for property <code>showPopoverOKButton</code>.If set to <code>true</code>, an OK
       * button is displayed for every FacetFilterList popover. This button allows the user to close the
       * popover from within the popover instead of having to click outside of it.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bShowPopoverOKButton New value for property <code>showPopoverOKButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowPopoverOKButton(bShowPopoverOKButton: boolean): sap.m.FacetFilter;
    }
    /**
     * Enables users to input a search string.
     * @resource sap/m/SearchField.js
    */
    export class SearchField extends sap.ui.core.Control {


      /**
       * Constructor for a new SearchField.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.SearchField;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.SearchField;

      /**
       * Adds some suggestionItem to the aggregation <code>suggestionItems</code>.
       * @since 1.34
       * @param oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSuggestionItem(oSuggestionItem: sap.m.SuggestionItem): sap.m.SearchField;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.SearchField</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SearchField</code> itself.This event is fired when the value of the search field is
       * changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field,
       * especially during the liveChange event.
       * @since 1.9.1
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SearchField</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.SearchField;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this
       * <code>sap.m.SearchField</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SearchField</code> itself.Event which is fired when the user triggers a search.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SearchField</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSearch(oData: any, fnFunction: any, oListener?: any): sap.m.SearchField;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>suggest</code> event of this
       * <code>sap.m.SearchField</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.SearchField</code> itself.This event is fired when the search field is initially focused
       * or its value is changed by the user.This event means that suggestion data should be updated, in case
       * if suggestions are used.Use the value parameter to create new suggestions for it.
       * @since 1.34
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SearchField</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSuggest(oData: any, fnFunction: any, oListener?: any): sap.m.SearchField;

      /**
       * Binds property <code>value</code> to model data.See {@link sap.ui.base.ManagedObject#bindProperty
       * ManagedObject.bindProperty} for a detailed description of the possible properties of
       * <code>oBindingInfo</code>
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindValue(oBindingInfo: any): sap.m.SearchField;

      /**
       * Destroys all the suggestionItems in the aggregation <code>suggestionItems</code>.
       * @since 1.34
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySuggestionItems(): sap.m.SearchField;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.SearchField</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.9.1
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.SearchField;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this
       * <code>sap.m.SearchField</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSearch(fnFunction: any, oListener: any): sap.m.SearchField;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>suggest</code> event of this
       * <code>sap.m.SearchField</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.34
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSuggest(fnFunction: any, oListener: any): sap.m.SearchField;


      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>newValue</code> of type <code>string</code>Current search string.</li></ul>
       * @since 1.9.1
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.SearchField;

      /**
       * Fires event <code>search</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>query</code> of type <code>string</code>The search query
       * string.</li><li><code>suggestionItem</code> of type <code>sap.m.SuggestionItem</code>Suggestion list
       * item in case if the user has selected an item from the suggestions
       * list.</li><li><code>refreshButtonPressed</code> of type <code>boolean</code>Indicates if the user
       * pressed the refresh icon.</li><li><code>clearButtonPressed</code> of type
       * <code>boolean</code>Indicates if the user pressed the clear icon.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSearch(mArguments: any): sap.m.SearchField;

      /**
       * Fires event <code>suggest</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>suggestValue</code> of type <code>string</code>Current search string of the
       * search field.</li></ul>
       * @since 1.34
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSuggest(mArguments: any): sap.m.SearchField;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>enabled</code>.Boolean property to enable the control (default
       * is true).Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>enableSuggestions</code>.If true, a <code>suggest</code> event
       * is fired when user types in the input and when the input is focused.On a phone device, a full screen
       * dialog with suggestions is always shown even if the suggestions list is empty.Default value is
       * <code>false</code>.
       * @since 1.34
       * @returns Value of property <code>enableSuggestions</code>
      */
      getEnableSuggestions(): boolean;

      /**
       * Gets current value of property <code>maxLength</code>.Maximum number of characters. Value '0' means
       * the feature is switched off.Default value is <code>0</code>.
       * @returns Value of property <code>maxLength</code>
      */
      getMaxLength(): number;

      /**
       * Returns a metadata object for class sap.m.SearchField.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placeholder</code>.Text shown when no value available. Default
       * placeholder text is the word "Search" in the current local language (if supported) or in English.
       * @returns Value of property <code>placeholder</code>
      */
      getPlaceholder(): string;

      /**
       * Function returns DOM element which acts as reference point for the opening suggestion menu
       * @since 1.34
       * @returns the DOM element at which to open the suggestion list
      */
      getPopupAnchorDomRef(): any;

      /**
       * Gets current value of property <code>refreshButtonTooltip</code>.Tooltip text of the refresh button.
       * If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed
       * on touch devices.
       * @since 1.16
       * @returns Value of property <code>refreshButtonTooltip</code>
      */
      getRefreshButtonTooltip(): string;

      /**
       * Gets current value of property <code>selectOnFocus</code>.Normally, search text is selected for copy
       * when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField
       * during the liveChange event, set this property to false to disable text selection by focus.Default
       * value is <code>true</code>.
       * @since 1.20
       * @returns Value of property <code>selectOnFocus</code>
      */
      getSelectOnFocus(): boolean;

      /**
       * Gets current value of property <code>showMagnifier</code>.Set to false to hide the magnifier
       * icon.Default value is <code>true</code>.
       * @returns Value of property <code>showMagnifier</code>
      */
      getShowMagnifier(): boolean;

      /**
       * Gets current value of property <code>showRefreshButton</code>.Set to true to display a refresh
       * button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user
       * can reload the results list without changing the search string.Default value is <code>false</code>.
       * @since 1.16
       * @returns Value of property <code>showRefreshButton</code>
      */
      getShowRefreshButton(): boolean;

      /**
       * Gets current value of property <code>showSearchButton</code>.Set to true to show the search button
       * with the magnifier icon.If false, both the search and refresh buttons are not displayed even if the
       * "showRefreshButton" property is true.Default value is <code>true</code>.
       * @since 1.23
       * @returns Value of property <code>showSearchButton</code>
      */
      getShowSearchButton(): boolean;

      /**
       * Gets content of aggregation <code>suggestionItems</code>.<code>SuggestionItems</code> are the items
       * which will be shown in the suggestions list.The following properties can be
       * used:<ul><li><code>key</code> is not displayed and may be used as internal technical
       * field</li><li><code>text</code> is displayed as normal suggestion
       * text</li><li><code>icon</code></li><li><code>description</code> - additional text may be used to
       * visually display search item type or category</li></ul>
       * @since 1.34
      */
      getSuggestionItems(): sap.m.SuggestionItem[];

      /**
       * Gets current value of property <code>value</code>.Input Value.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>visible</code>.Invisible inputs are not rendered.Default value
       * is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.Defines the CSS width of the input. If not set,
       * width is 100%.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.SuggestionItem</code> in the aggregation
       * <code>suggestionItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.34
       * @param oSuggestionItem The suggestionItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSuggestionItem(oSuggestionItem: sap.m.SuggestionItem): number;

      /**
       * Inserts a suggestionItem into the aggregation <code>suggestionItems</code>.
       * @since 1.34
       * @param oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for          
       *   a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
       *             greater than the current size of the aggregation, the suggestionItem is inserted at     
       *        the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSuggestionItem(oSuggestionItem: sap.m.SuggestionItem, iIndex: number): sap.m.SearchField;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>suggestionItems</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.34
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSuggestionItems(): sap.m.SuggestionItem[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a suggestionItem from the aggregation <code>suggestionItems</code>.
       * @since 1.34
       * @param vSuggestionItem The suggestionItem to remove or its index or id
       * @returns The removed suggestionItem or <code>null</code>
      */
      removeSuggestionItem(vSuggestionItem: number | string | sap.m.SuggestionItem): sap.m.SuggestionItem;

      /**
       * Sets a new value for property <code>enabled</code>.Boolean property to enable the control (default
       * is true).When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>enableSuggestions</code>.If true, a <code>suggest</code> event
       * is fired when user types in the input and when the input is focused.On a phone device, a full screen
       * dialog with suggestions is always shown even if the suggestions list is empty.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.34
       * @param bEnableSuggestions New value for property <code>enableSuggestions</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableSuggestions(bEnableSuggestions: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>maxLength</code>.Maximum number of characters. Value '0' means
       * the feature is switched off.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>0</code>.
       * @param iMaxLength New value for property <code>maxLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxLength(iMaxLength: number): sap.m.SearchField;

      /**
       * Sets a new value for property <code>placeholder</code>.Text shown when no value available. Default
       * placeholder text is the word "Search" in the current local language (if supported) or in
       * English.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sPlaceholder New value for property <code>placeholder</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlaceholder(sPlaceholder: string): sap.m.SearchField;

      /**
       * Sets a new value for property <code>refreshButtonTooltip</code>.Tooltip text of the refresh button.
       * If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed
       * on touch devices.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.16
       * @param sRefreshButtonTooltip New value for property <code>refreshButtonTooltip</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRefreshButtonTooltip(sRefreshButtonTooltip: string): sap.m.SearchField;

      /**
       * Sets a new value for property <code>selectOnFocus</code>.Normally, search text is selected for copy
       * when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField
       * during the liveChange event, set this property to false to disable text selection by focus.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @since 1.20
       * @param bSelectOnFocus New value for property <code>selectOnFocus</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSelectOnFocus(bSelectOnFocus: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>showMagnifier</code>.Set to false to hide the magnifier
       * icon.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bShowMagnifier New value for property <code>showMagnifier</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowMagnifier(bShowMagnifier: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>showRefreshButton</code>.Set to true to display a refresh button
       * in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can
       * reload the results list without changing the search string.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.16
       * @param bShowRefreshButton New value for property <code>showRefreshButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowRefreshButton(bShowRefreshButton: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>showSearchButton</code>.Set to true to show the search button
       * with the magnifier icon.If false, both the search and refresh buttons are not displayed even if the
       * "showRefreshButton" property is true.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.23
       * @param bShowSearchButton New value for property <code>showSearchButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSearchButton(bShowSearchButton: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>value</code>.Input Value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.SearchField;

      /**
       * Sets a new value for property <code>visible</code>.Invisible inputs are not rendered.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.SearchField;

      /**
       * Sets a new value for property <code>width</code>.Defines the CSS width of the input. If not set,
       * width is 100%.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.SearchField;

      /**
       * Toggle visibility of the suggestion list.
       * @since 1.34
       * @param bShow set to <code>true</code> to display suggestions and <code>false</code> to hide them.
       * Default value is <code>true</code>.An empty suggestion list is not shown on desktop and tablet
       * devices.<br>This method may be called only as a response to the <code>suggest</code> event to ensure
       * that the suggestion list is shownat the moment when the user expects it.
       * @returns <code>this</code> to allow method chaining
      */
      suggest(bShow: boolean | any): sap.m.SearchField;

      /**
       * Unbinds property <code>value</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindValue(): sap.m.SearchField;
    }
    /**
     * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control.
     * Everything like the selection, deletion, unread states and inset style are also maintained here. In
     * addition the control provides a loading mechanism to request data from the model and append the list
     * items to the list. The request is started manually by tapping on the trigger at the end of the list.
     * @resource sap/m/GrowingList.js
    */
    export class GrowingList extends sap.m.List {


      /**
       * Constructor for a new GrowingList.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.GrowingList.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>scrollToLoad</code>.If you set this property to true then user
       * needs to scroll end to trigger loading a new page. Default value is false which means user needs to
       * scroll end and then click button to load new page.NOTE: This property can be set true, if growing
       * property is set "true" and if you only have one instance of this control inside the scroll
       * container(e.g Page).Default value is <code>false</code>.
       * @since 1.16
       * @returns Value of property <code>scrollToLoad</code>
      */
      getScrollToLoad(): boolean;

      /**
       * Gets current value of property <code>threshold</code>.Number of items requested from the server. To
       * activate this you should set growing property to "true"Default value is <code>20</code>.
       * @since 1.16
       * @returns Value of property <code>threshold</code>
      */
      getThreshold(): number;

      /**
       * Gets current value of property <code>triggerText</code>.Text which is displayed on the trigger at
       * the end of the list. The default is a translated text ("Load More Data") coming from the
       * messagebundle properties.This property can be used only if growing property is set "true" and
       * scrollToLoad property is set "false".
       * @since 1.16
       * @returns Value of property <code>triggerText</code>
      */
      getTriggerText(): string;

      /**
       * Sets a new value for property <code>scrollToLoad</code>.If you set this property to true then user
       * needs to scroll end to trigger loading a new page. Default value is false which means user needs to
       * scroll end and then click button to load new page.NOTE: This property can be set true, if growing
       * property is set "true" and if you only have one instance of this control inside the scroll
       * container(e.g Page).When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @since 1.16
       * @param bScrollToLoad New value for property <code>scrollToLoad</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setScrollToLoad(bScrollToLoad: boolean): sap.m.GrowingList;

      /**
       * Sets a new value for property <code>threshold</code>.Number of items requested from the server. To
       * activate this you should set growing property to "true"When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>20</code>.
       * @since 1.16
       * @param iThreshold New value for property <code>threshold</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setThreshold(iThreshold: number): sap.m.GrowingList;

      /**
       * Sets a new value for property <code>triggerText</code>.Text which is displayed on the trigger at the
       * end of the list. The default is a translated text ("Load More Data") coming from the messagebundle
       * properties.This property can be used only if growing property is set "true" and scrollToLoad
       * property is set "false".When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.16
       * @param sTriggerText New value for property <code>triggerText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTriggerText(sTriggerText: string): sap.m.GrowingList;
    }
    /**
     * Displays the title, description, and a customizable main area.
     * @resource sap/m/GenericTile.js
    */
    export class GenericTile extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.GenericTile control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some tileContent to the aggregation <code>tileContent</code>.
       * @param oTileContent the tileContent to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addTileContent(oTileContent: sap.m.TileContent): sap.m.GenericTile;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.GenericTile</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.GenericTile</code> itself.The event is fired when the user chooses the tile.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.GenericTile</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.GenericTile;

      /**
       * Destroys the icon in the aggregation <code>icon</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyIcon(): sap.m.GenericTile;

      /**
       * Destroys all the tileContent in the aggregation <code>tileContent</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyTileContent(): sap.m.GenericTile;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.GenericTile</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.GenericTile;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.GenericTile;

      /**
       * Gets current value of property <code>backgroundImage</code>.The URI of the background image.
       * @returns Value of property <code>backgroundImage</code>
      */
      getBackgroundImage(): any;

      /**
       * Gets current value of property <code>failedText</code>.The message that appears when the control is
       * in the Failed state.
       * @returns Value of property <code>failedText</code>
      */
      getFailedText(): string;

      /**
       * Gets current value of property <code>frameType</code>.The frame type: 1x1 or 2x1.Default value is
       * <code>library.FrameType.OneByOne</code>.
       * @returns Value of property <code>frameType</code>
      */
      getFrameType(): sap.m.FrameType;

      /**
       * Gets current value of property <code>header</code>.The header of the tile.
       * @returns Value of property <code>header</code>
      */
      getHeader(): string;

      /**
       * Gets current value of property <code>headerImage</code>.The image to be displayed as a graphical
       * element within the header. This can be an image or an icon from the icon font.
       * @returns Value of property <code>headerImage</code>
      */
      getHeaderImage(): any;

      /**
       * Gets content of aggregation <code>icon</code>.An icon or image to be displayed in the control.This
       * aggregation is deprecated since version 1.36.0, to display an icon or image use sap.m.TileContent
       * control instead.
      */
      getIcon(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>imageDescription</code>.Description of a header image that is
       * used in the tooltip.
       * @returns Value of property <code>imageDescription</code>
      */
      getImageDescription(): string;

      /**
       * Returns a metadata object for class sap.m.GenericTile.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mode</code>.The mode of the GenericTile.Default value is
       * <code>library.GenericTileMode.ContentMode</code>.
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.GenericTileMode;

      /**
       * Gets current value of property <code>size</code>.The size of the tile. If not set, then the default
       * size is applied based on the device.Default value is <code>Auto</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): sap.m.Size;

      /**
       * Gets current value of property <code>state</code>.The load status.Default value is
       * <code>Loaded</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.m.LoadState;

      /**
       * Gets current value of property <code>subheader</code>.The subheader of the tile.
       * @returns Value of property <code>subheader</code>
      */
      getSubheader(): string;

      /**
       * Gets content of aggregation <code>tileContent</code>.The switchable view that depends on the tile
       * type.
      */
      getTileContent(): sap.m.TileContent[];

      /**
       * Checks for the provided <code>sap.m.TileContent</code> in the aggregation
       * <code>tileContent</code>.and returns its index if found or -1 otherwise.
       * @param oTileContent The tileContent whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfTileContent(oTileContent: sap.m.TileContent): number;

      /**
       * Inserts a tileContent into the aggregation <code>tileContent</code>.
       * @param oTileContent the tileContent to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the tileContent should be inserted at; for            
       * a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value     
       *        greater than the current size of the aggregation, the tileContent is inserted at            
       * the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertTileContent(oTileContent: sap.m.TileContent, iIndex: number): sap.m.GenericTile;

      /**
       * Removes all the controls from the aggregation <code>tileContent</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTileContent(): sap.m.TileContent[];

      /**
       * Removes a tileContent from the aggregation <code>tileContent</code>.
       * @param vTileContent The tileContent to remove or its index or id
       * @returns The removed tileContent or <code>null</code>
      */
      removeTileContent(vTileContent: number | string | sap.m.TileContent): sap.m.TileContent;

      /**
       * Sets a new value for property <code>backgroundImage</code>.The URI of the background image.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sBackgroundImage New value for property <code>backgroundImage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundImage(sBackgroundImage: any): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>failedText</code>.The message that appears when the control is
       * in the Failed state.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sFailedText New value for property <code>failedText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFailedText(sFailedText: string): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>frameType</code>.The frame type: 1x1 or 2x1.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>library.FrameType.OneByOne</code>.
       * @param sFrameType New value for property <code>frameType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFrameType(sFrameType: sap.m.FrameType): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>header</code>.The header of the tile.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sHeader New value for property <code>header</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeader(sHeader: string): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>headerImage</code>.The image to be displayed as a graphical
       * element within the header. This can be an image or an icon from the icon font.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sHeaderImage New value for property <code>headerImage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderImage(sHeaderImage: any): sap.m.GenericTile;

      /**
       * Sets the aggregated <code>icon</code>.
       * @param oIcon The icon to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(oIcon: sap.ui.core.Control): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>imageDescription</code>.Description of a header image that is
       * used in the tooltip.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sImageDescription New value for property <code>imageDescription</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setImageDescription(sImageDescription: string): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>mode</code>.The mode of the GenericTile.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>library.GenericTileMode.ContentMode</code>.
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.GenericTileMode): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>size</code>.The size of the tile. If not set, then the default
       * size is applied based on the device.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: sap.m.Size): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>state</code>.The load status.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Loaded</code>.
       * @param sState New value for property <code>state</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setState(sState: sap.m.LoadState): sap.m.GenericTile;

      /**
       * Sets a new value for property <code>subheader</code>.The subheader of the tile.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sSubheader New value for property <code>subheader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubheader(sSubheader: string): sap.m.GenericTile;
    }
    /**
     * Displays a tile containing the text of the feed, a subheader, and a numeric value.
     * @resource sap/m/FeedContent.js
    */
    export class FeedContent extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.FeedContent control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.FeedContent</code>.When called, the context of the event handler (its <code>this</code>)
       * will be bound to <code>oListener</code> if specified, otherwise it will be bound to this
       * <code>sap.m.FeedContent</code> itself.The event is fired when the user chooses the feed content.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FeedContent</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.FeedContent;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.FeedContent</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.FeedContent;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.FeedContent;

      /**
       * Gets current value of property <code>contentText</code>.The content text.
       * @returns Value of property <code>contentText</code>
      */
      getContentText(): string;

      /**
       * Returns a metadata object for class sap.m.FeedContent.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.Default value is <code>Auto</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): sap.m.Size;

      /**
       * Gets current value of property <code>subheader</code>.The subheader.
       * @returns Value of property <code>subheader</code>
      */
      getSubheader(): string;

      /**
       * Gets current value of property <code>truncateValueTo</code>.The number of characters to display for
       * the value property.Default value is <code>4</code>.
       * @returns Value of property <code>truncateValueTo</code>
      */
      getTruncateValueTo(): number;

      /**
       * Gets current value of property <code>value</code>.The actual value.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueColor</code>.The semantic color of the value.
       * @returns Value of property <code>valueColor</code>
      */
      getValueColor(): sap.m.ValueColor;

      /**
       * Sets a new value for property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: sap.m.Size): sap.m.FeedContent;

      /**
       * Sets a new value for property <code>subheader</code>.The subheader.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sSubheader New value for property <code>subheader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubheader(sSubheader: string): sap.m.FeedContent;

      /**
       * Sets a new value for property <code>truncateValueTo</code>.The number of characters to display for
       * the value property.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>4</code>.
       * @param iTruncateValueTo New value for property <code>truncateValueTo</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTruncateValueTo(iTruncateValueTo: number): sap.m.FeedContent;

      /**
       * Sets a new value for property <code>value</code>.The actual value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.FeedContent;

      /**
       * Sets a new value for property <code>valueColor</code>.The semantic color of the value.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sValueColor New value for property <code>valueColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueColor(sValueColor: sap.m.ValueColor): sap.m.FeedContent;
    }
    /**
     * A range slider is a user interface control that enables the userto select a value range in a
     * predifined numerical interval.
     * @resource sap/m/RangeSlider.js
    */
    export class RangeSlider extends sap.m.Slider {


      /**
       * Constructor for a new <code>sap.m.RangeSlider</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>inputsAsTooltips</code>.Indicates whether an Input fields
       * should be used as tooltips for the handles.Default value is <code>false</code>.
       * @returns Value of property <code>inputsAsTooltips</code>
      */
      getInputsAsTooltips(): boolean;

      /**
       * Returns a metadata object for class sap.m.RangeSlider.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>range</code>.Determines the range in which the user can select
       * values.If the value is lower/higher than the allowed minimum/maximum,a warning message will be
       * output to the console.Default value is <code>[]</code>.
       * @returns Value of property <code>range</code>
      */
      getRange(): any;

      /**
       * Sets a new value for property <code>inputsAsTooltips</code>.Indicates whether an Input fields should
       * be used as tooltips for the handles.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bInputsAsTooltips New value for property <code>inputsAsTooltips</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInputsAsTooltips(bInputsAsTooltips: boolean): sap.m.RangeSlider;

      /**
       * Sets a new value for property <code>range</code>.Determines the range in which the user can select
       * values.If the value is lower/higher than the allowed minimum/maximum,a warning message will be
       * output to the console.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>[]</code>.
       * @param oRange New value for property <code>range</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRange(oRange: any): sap.m.RangeSlider;
    }
    /**
     * The ObjectNumber control displays number and number unit properties for an object. The number can be
     * displayed using semanticcolors to provide additional meaning about the object to the user.
     * @resource sap/m/ObjectNumber.js
    */
    export class ObjectNumber extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectNumber.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.ObjectNumber;


      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Gets current value of property <code>emphasized</code>.Indicates if the object number should appear
       * emphasized.Default value is <code>true</code>.
       * @returns Value of property <code>emphasized</code>
      */
      getEmphasized(): boolean;

      /**
       * Returns a metadata object for class sap.m.ObjectNumber.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>number</code>.Defines the number field.
       * @returns Value of property <code>number</code>
      */
      getNumber(): string;

      /**
       * Gets current value of property <code>numberUnit</code>.Defines the number units qualifier.
       * @returns Value of property <code>numberUnit</code>
      */
      getNumberUnit(): string;

      /**
       * Gets current value of property <code>state</code>.Determines the object number's value state.
       * Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal
       * theme).Default value is <code>None</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>textAlign</code>.Sets the horizontal alignment of the number
       * and unit.Default value is <code>Begin</code>.
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Available options for the number and unit
       * text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the
       * text direction from its parent control.Default value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>unit</code>.Defines the number units qualifier. If numberUnit
       * and unit are both set, the unit value is used.
       * @since 1.16.1
       * @returns Value of property <code>unit</code>
      */
      getUnit(): string;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>emphasized</code>.Indicates if the object number should appear
       * emphasized.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bEmphasized New value for property <code>emphasized</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEmphasized(bEmphasized: boolean): sap.m.ObjectNumber;

      /**
       * Sets a new value for property <code>number</code>.Defines the number field.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sNumber New value for property <code>number</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumber(sNumber: string): sap.m.ObjectNumber;

      /**
       * Sets a new value for property <code>numberUnit</code>.Defines the number units qualifier.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sNumberUnit New value for property <code>numberUnit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberUnit(sNumberUnit: string): sap.m.ObjectNumber;

      /**
       * Sets the ObjectNumber's value state.
       * @param sState The state to be set to
       * @returns this pointer for chaining
      */
      setState(sState: sap.ui.core.ValueState): ObjectNumber;

      /**
       * Sets the text alignment of the control without re-rendering the whole ObjectNumber.
       * @param sAlign The new value
       * @returns <code>this</code> pointer for chaining
      */
      setTextAlign(sAlign: sap.ui.core.TextAlign): sap.m.ObjectNumber;

      /**
       * Sets a new value for property <code>textDirection</code>.Available options for the number and unit
       * text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the
       * text direction from its parent control.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectNumber;

      /**
       * Sets a new value for property <code>unit</code>.Defines the number units qualifier. If numberUnit
       * and unit are both set, the unit value is used.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.16.1
       * @param sUnit New value for property <code>unit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUnit(sUnit: string): sap.m.ObjectNumber;
    }
    /**
     * Holds layout data for a FlexBox|HBox|VBox
     * @resource sap/m/FlexItemData.js
    */
    export class FlexItemData extends sap.ui.core.LayoutData {


      /**
       * Constructor for a new <code>sap.m.FlexItemData</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId id for the new element, generated automatically if no id is given
       * @param mSettings initial settings for the new element
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>alignSelf</code>.Determines cross-axis alignment of individual
       * element (not currently supported in Internet Explorer)Default value is <code>Auto</code>.
       * @returns Value of property <code>alignSelf</code>
      */
      getAlignSelf(): sap.m.FlexAlignSelf;

      /**
       * Gets current value of property <code>backgroundDesign</code>.Defines the background style of the
       * flex item.Default value is <code>Transparent</code>.
       * @since 1.38.5
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets current value of property <code>baseSize</code>.The base size is the initial main size of the
       * item for the flex algorithm. If set to "auto", this will be the computed size of the item.Default
       * value is <code>auto</code>.
       * @since 1.32.0
       * @returns Value of property <code>baseSize</code>
      */
      getBaseSize(): any;

      /**
       * Gets current value of property <code>growFactor</code>.Determines the flexibility of the flex item
       * when allocatable space is remaining.Default value is <code>0</code>.
       * @returns Value of property <code>growFactor</code>
      */
      getGrowFactor(): number;

      /**
       * Gets current value of property <code>maxHeight</code>.The maximum height of the flex item.Default
       * value is <code></code>.
       * @since 1.36.0
       * @returns Value of property <code>maxHeight</code>
      */
      getMaxHeight(): any;

      /**
       * Gets current value of property <code>maxWidth</code>.The maximum height of the flex item.Default
       * value is <code></code>.
       * @since 1.36.0
       * @returns Value of property <code>maxWidth</code>
      */
      getMaxWidth(): any;

      /**
       * Returns a metadata object for class sap.m.FlexItemData.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minHeight</code>.The minimum height of the flex item.Default
       * value is <code>auto</code>.
       * @since 1.36.0
       * @returns Value of property <code>minHeight</code>
      */
      getMinHeight(): any;

      /**
       * Gets current value of property <code>minWidth</code>.The minimum height of the flex item.Default
       * value is <code>auto</code>.
       * @since 1.36.0
       * @returns Value of property <code>minWidth</code>
      */
      getMinWidth(): any;

      /**
       * Gets current value of property <code>order</code>.Determines the display order of flex items
       * independent of their source code order.Default value is <code>0</code>.
       * @returns Value of property <code>order</code>
      */
      getOrder(): number;

      /**
       * Gets current value of property <code>shrinkFactor</code>.The shrink factor determines how much the
       * flex item will shrink relative to the rest of the flex items in the flex container when negative
       * free space is distributed.Default value is <code>1</code>.
       * @since 1.24.0
       * @returns Value of property <code>shrinkFactor</code>
      */
      getShrinkFactor(): number;

      /**
       * Gets current value of property <code>styleClass</code>.The style class will be applied to the flex
       * item and can be used for CSS selectorsDefault value is <code></code>.
       * @returns Value of property <code>styleClass</code>
      */
      getStyleClass(): string;

      /**
       * Sets a new value for property <code>alignSelf</code>.Determines cross-axis alignment of individual
       * element (not currently supported in Internet Explorer)When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sAlignSelf New value for property <code>alignSelf</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAlignSelf(sAlignSelf: sap.m.FlexAlignSelf): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.Defines the background style of the flex
       * item.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Transparent</code>.
       * @since 1.38.5
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>baseSize</code>.The base size is the initial main size of the
       * item for the flex algorithm. If set to "auto", this will be the computed size of the item.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>auto</code>.
       * @since 1.32.0
       * @param sBaseSize New value for property <code>baseSize</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBaseSize(sBaseSize: any): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>growFactor</code>.Determines the flexibility of the flex item
       * when allocatable space is remaining.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param fGrowFactor New value for property <code>growFactor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGrowFactor(fGrowFactor: number): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>maxHeight</code>.The maximum height of the flex item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code></code>.
       * @since 1.36.0
       * @param sMaxHeight New value for property <code>maxHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxHeight(sMaxHeight: any): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>maxWidth</code>.The maximum height of the flex item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code></code>.
       * @since 1.36.0
       * @param sMaxWidth New value for property <code>maxWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxWidth(sMaxWidth: any): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>minHeight</code>.The minimum height of the flex item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>auto</code>.
       * @since 1.36.0
       * @param sMinHeight New value for property <code>minHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinHeight(sMinHeight: any): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>minWidth</code>.The minimum height of the flex item.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>auto</code>.
       * @since 1.36.0
       * @param sMinWidth New value for property <code>minWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinWidth(sMinWidth: any): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>order</code>.Determines the display order of flex items
       * independent of their source code order.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param iOrder New value for property <code>order</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOrder(iOrder: number): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>shrinkFactor</code>.The shrink factor determines how much the
       * flex item will shrink relative to the rest of the flex items in the flex container when negative
       * free space is distributed.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>1</code>.
       * @since 1.24.0
       * @param fShrinkFactor New value for property <code>shrinkFactor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShrinkFactor(fShrinkFactor: number): sap.m.FlexItemData;

      /**
       * Sets a new value for property <code>styleClass</code>.The style class will be applied to the flex
       * item and can be used for CSS selectorsWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sStyleClass New value for property <code>styleClass</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStyleClass(sStyleClass: string): sap.m.FlexItemData;
    }
    /**
     * This control can be displayed as image content in a tile.
     * @resource sap/m/ImageContent.js
    */
    export class ImageContent extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.ImageContent control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.ImageContent</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ImageContent</code> itself.The event is fired when the user chooses the image
       * content.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ImageContent</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.ImageContent;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.ImageContent</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.ImageContent;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.ImageContent;

      /**
       * Gets current value of property <code>description</code>.Description of image. This text is used to
       * provide ScreenReader information.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Returns a metadata object for class sap.m.ImageContent.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>src</code>.The image to be displayed as a graphical element
       * within the imageContent. This can be an image or an icon from the icon font.
       * @returns Value of property <code>src</code>
      */
      getSrc(): any;

      /**
       * Sets a new value for property <code>description</code>.Description of image. This text is used to
       * provide ScreenReader information.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.ImageContent;

      /**
       * Sets a new value for property <code>src</code>.The image to be displayed as a graphical element
       * within the imageContent. This can be an image or an icon from the icon font.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sSrc New value for property <code>src</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSrc(sSrc: any): sap.m.ImageContent;
    }
    /**
     * The NavContainer control handles hierarchic navigation between Pages or other fullscreen
     * controls.All children of this control will receive navigation events like {@link
     * sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link
     * sap.m.NavContainerChild sap.m.NavContainerChild}
     * @resource sap/m/NavContainer.js
    */
    export class NavContainer extends sap.ui.core.Control {


      /**
       * Constructor for a new NavContainer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is
       * identified by a "name". Make sure to only use names that will not collide with transitions which may
       * be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom
       * transitions to ensure this."to" and "back" are the transition functions for the forward and backward
       * navigation.Both will be called with the following parameters:- oFromPage: the Control which is
       * currently being displayed by the NavContainer- oToPage: the Control which should be displayed by the
       * NavContainer after the transition- fCallback: a function which MUST be called when the transition
       * has completed- oTransitionParameters: a data object that can be given by application code when
       * triggering the transition by calling to() or back(); this object could give additional information
       * to the transition function, like the DOM element which triggered the transition or the desired
       * transition durationThe contract for "to" and "back" is that they may do an animation of their
       * choice, but it should not take "too long". At the beginning of the transition the target page
       * "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page
       * (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or
       * make it transparent) and then should remove this CSS class.After the animation the target page
       * "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible
       * anymore. This page should then have the CSS class "sapMNavItemHidden".For adding/removing this or
       * other CSS classes, the transition can use the addStyleClass/removeStyleClass
       * method:oFromPage.addStyleClass("sapMNavItemHidden");When the transition is complete, it MUST call
       * the given fCallback method to inform the NavContainer that navigation has finished!Hint: if the
       * target page of your transition stays black on iPhone, try wrapping the animation start into
       * asetTimeout(..., 0)block (delayed, but without waiting).This method can be called on any
       * NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will
       * always be registered for the type (and ALL instances), not for the single instance on which this
       * method was invoked.Returns the sap.m.NavContainer type if called statically, or "this" (to allow
       * method chaining) if called on a particular NavContainer instance.
       * @param sName The name of the transition. This name can be used by the application to choose this
       * transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()"
       * corresponds to this name, the back() navigation will automatically use the same transition.       
       * Make sure to only use names that will not collide with transitions which may be added to the
       * NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to
       * ensure this.
       * @param oTo The function which will be called by the NavContainer when the application navigates
       * "to()", using this animation's name. The NavContainer instance is the "this" context within the
       * animation function.        See the documentation of NavContainer.addCustomTransitions for more
       * details about this function.
       * @param oBack The function which will be called by the NavContainer when the application navigates
       * "back()" from a page where it had navigated to using this animation's name. The NavContainer
       * instance is the "this" context within the animation function.        See the documentation of
       * NavContainer.addCustomTransitions for more details about this function.
      */
      addCustomTransition(sName: string, oTo: any, oBack: any): sap.m.NavContainer;

      /**
       * Adds some page to the aggregation <code>pages</code>.
       * @param oPage the page to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addPage(oPage: sap.ui.core.Control): sap.m.NavContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterNavigate</code> event of this
       * <code>sap.m.NavContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.NavContainer</code> itself.The event is fired when navigation between two pages
       * has completed. In case of animated transitions this event is fired with some delay after the
       * "navigate" event.
       * @since 1.7.1
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.NavContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.NavContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this
       * <code>sap.m.NavContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.NavContainer</code> itself.The event is fired when navigation between two pages
       * has been triggered. The transition (if any) to the new page has not started yet.This event can be
       * aborted by the application with preventDefault(), which means that there will be no navigation.
       * @since 1.7.1
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.NavContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.NavContainer;

      /**
       * Navigates back one level. If already on the initial page and there is no place to go back, nothing
       * happens.Calling this navigation method triggers first the (cancelable) "navigate" event on the
       * NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if
       * applicable) and"beforeShow" on the target page. Later - after the transition has completed - the
       * "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been
       * left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow"
       * event object as "data" property. The original "data" object from the "to" navigation is also
       * available in these event objects.
       * @param oBackData Since version 1.7.1. This optional object can carry any payload data which should
       * be made available to the target page of the back navigation. The event on the target page will
       * contain this data object as "backData" property. (The original data from the "to()" navigation will
       * still be available as "data" property.)        In scenarios where the entity triggering the
       * navigation can or should not directly initialize the target page, it can fill this object and the
       * target page itself (or a listener on it) can take over the initialization, using the given data.    
       *    For back navigation this can be used e.g. when returning from a detail page to transfer any
       * settings done there.        When the "transitionParameters" object is used, this "data" object must
       * also be given (either as object or as null) in order to have a proper parameter order.
       * @param oTransitionParameters Since version 1.7.1. This optional object can give additional
       * information to the transition function, like the DOM element which triggered the transition or the
       * desired transition duration.        The animation type can NOT be selected here - it is always the
       * inverse of the "to" navigation.        In order to use the "transitionParameters" property, the
       * "data" property must be used (at least "null" must be given) for a proper parameter order.       
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
      */
      back(oBackData: any, oTransitionParameters?: any): sap.m.NavContainer;

      /**
       * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there
       * is no such page among the previous pages, nothing happens.The transition effect which had been used
       * to get to the current page is inverted and used for this navigation.Calling this navigation method
       * triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo
       * event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page.
       * Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target
       * page and "afterHide" on the page which has been left. The given backData object is available in the
       * "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data"
       * object from the "to" navigation is also available in these event objects.
       * @since 1.7.2
       * @param sPageId The ID of the screen to which back navigation should happen. The ID or the control
       * itself can be given. The nearest such page among the previous pages in the history stack will be
       * used.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the "backToPage" navigation. The event on the target page will contain this data
       * object as "backData" property.        When the "transitionParameters" object is used, this "data"
       * object must also be given (either as object or as null) in order to have a proper parameter order.
       * @param oTransitionParameters This optional object can give additional information to the transition
       * function, like the DOM element which triggered the transition or the desired transition duration.   
       *     The animation type can NOT be selected here - it is always the inverse of the "to" navigation.  
       *      In order to use the "transitionParameters" property, the "data" property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backToPage(sPageId: string, oBackData?: any, oTransitionParameters?: any): sap.m.NavContainer;

      /**
       * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the
       * first added element). If already on the initial page, nothing happens.The transition effect which
       * had been used to get to the current page is inverted and used for this navigation.Calling this
       * navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the
       * "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow"
       * on the target page. Later - after the transition has completed - the "afterShow" pseudo event is
       * triggered on the target page and "afterHide" on the page which has been left. The given backData
       * object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data"
       * property.
       * @since 1.7.1
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the "backToTop" navigation. The event on the target page will contain this data
       * object as "backData" property.        When the "transitionParameters" object is used, this "data"
       * object must also be given (either as object or as null) in order to have a proper parameter order.
       * @param oTransitionParameters This optional object can give additional information to the transition
       * function, like the DOM element which triggered the transition or the desired transition duration.   
       *     The animation type can NOT be selected here - it is always the inverse of the "to" navigation.  
       *      In order to use the "transitionParameters" property, the "data" property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backToTop(oBackData: any, oTransitionParameters?: any): sap.m.NavContainer;

      /**
       * Returns whether the current page is the top/initial page.Note: going to the initial page again with
       * a row of "to" navigations causes the initial page to be displayed again, but logically one is not at
       * the top level, so this method returns "false" in this case.
      */
      currentPageIsTopPage(): boolean;

      /**
       * Destroys all the pages in the aggregation <code>pages</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPages(): sap.m.NavContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterNavigate</code> event of this
       * <code>sap.m.NavContainer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.7.1
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterNavigate(fnFunction: any, oListener: any): sap.m.NavContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this
       * <code>sap.m.NavContainer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.7.1
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachNavigate(fnFunction: any, oListener: any): sap.m.NavContainer;


      /**
       * Fires event <code>afterNavigate</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The page which had been
       * shown before navigation.</li><li><code>fromId</code> of type <code>string</code>The ID of the page
       * which had been shown before navigation.</li><li><code>to</code> of type
       * <code>sap.ui.core.Control</code>The page which is now shown after
       * navigation.</li><li><code>toId</code> of type <code>string</code>The ID of the page which is now
       * shown after navigation.</li><li><code>firstTime</code> of type <code>boolean</code>Whether the "to"
       * page (more precisely: a control with the ID of the page which has been navigated to) had not been
       * shown/navigated to before.</li><li><code>isTo</code> of type <code>boolean</code>Whether was a
       * forward navigation, triggered by "to()".</li><li><code>isBack</code> of type
       * <code>boolean</code>Whether this was a back navigation, triggered by
       * "back()".</li><li><code>isBackToTop</code> of type <code>boolean</code>Whether this was a navigation
       * to the root page, triggered by "backToTop()".</li><li><code>isBackToPage</code> of type
       * <code>boolean</code>Whether this was a navigation to a specific page, triggered by
       * "backToPage()".</li><li><code>direction</code> of type <code>string</code>How the navigation was
       * triggered, possible values are "to", "back", "backToPage", and "backToTop".</li></ul>
       * @since 1.7.1
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterNavigate(mArguments: any): sap.m.NavContainer;

      /**
       * Fires event <code>navigate</code> to attached listeners.Listeners may prevent the default action of
       * this event by using the <code>preventDefault</code>-method on the event object.Expects the following
       * event parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The page which
       * was shown before the current navigation.</li><li><code>fromId</code> of type <code>string</code>The
       * ID of the page which was shown before the current navigation.</li><li><code>to</code> of type
       * <code>sap.ui.core.Control</code>The page which will be shown after the current
       * navigation.</li><li><code>toId</code> of type <code>string</code>The ID of the page which will be
       * shown after the current navigation.</li><li><code>firstTime</code> of type
       * <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which
       * is currently navigated to) has not been shown/navigated to before.</li><li><code>isTo</code> of type
       * <code>boolean</code>Whether this is a forward navigation, triggered by
       * "to()".</li><li><code>isBack</code> of type <code>boolean</code>Whether this is a back navigation,
       * triggered by "back()".</li><li><code>isBackToTop</code> of type <code>boolean</code>Whether this is
       * a navigation to the root page, triggered by "backToTop()".</li><li><code>isBackToPage</code> of type
       * <code>boolean</code>Whether this was a navigation to a specific page, triggered by
       * "backToPage()".</li><li><code>direction</code> of type <code>string</code>How the navigation was
       * triggered, possible values are "to", "back", "backToPage", and "backToTop".</li></ul>
       * @since 1.7.1
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireNavigate(mArguments: any): boolean;

      /**
       * Gets current value of property <code>autoFocus</code>.Determines whether the initial focus is set
       * automatically on first rendering and after navigating to a new page.This is useful when on touch
       * devices the keyboard pops out due to the focus being automatically set on an input field.If
       * necessary the "afterShow" event can be used to focus another element.Default value is
       * <code>true</code>.
       * @since 1.30
       * @returns Value of property <code>autoFocus</code>
      */
      getAutoFocus(): boolean;

      /**
       * Returns the currently displayed page-level control. Note: it is not necessarily an instance of
       * sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is
       * aggregated.Returns undefined if no page has been added yet.
      */
      getCurrentPage(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>defaultTransitionName</code>.The type of the
       * transition/animation to apply when "to()" is called without defining a transition type to use. The
       * default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered
       * custom transitions.Default value is <code>slide</code>.
       * @since 1.7.1
       * @returns Value of property <code>defaultTransitionName</code>
      */
      getDefaultTransitionName(): string;

      /**
       * Gets current value of property <code>height</code>.The height of the NavContainer. Can be changed
       * when the NavContainer should not cover the whole available area.Default value is <code>100%</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * ID of the element which is the current target of the association <code>initialPage</code>, or
       * <code>null</code>.
      */
      getInitialPage(): any;

      /**
       * Returns a metadata object for class sap.m.NavContainer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the control with the given ID from the "pages" aggregation (if available).
       * @param sId The ID of the aggregated control to find.
      */
      getPage(sId: string): sap.ui.core.Control;

      /**
       * Gets content of aggregation <code>pages</code>.The content entities between which this NavContainer
       * navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control
       * with fullscreen/page semantics.These aggregated controls will receive navigation events like {@link
       * sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link
       * sap.m.NavContainerChild sap.m.NavContainerChild}
      */
      getPages(): sap.ui.core.Control[];

      /**
       * Returns the previous page (the page from which the user drilled down to the current page with
       * "to()").Note: this is not the page which the user has seen before, but the page which is the target
       * of the next "back()" navigation.If there is no previous page, "undefined" is returned.
       * @since 1.7.1
      */
      getPreviousPage(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>visible</code>.Whether the NavContainer is visible.Default
       * value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.The width of the NavContainer. Can be changed when
       * the NavContainer should not cover the whole available area.Default value is <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>pages</code>.and
       * returns its index if found or -1 otherwise.
       * @param oPage The page whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfPage(oPage: sap.ui.core.Control): number;

      /**
       * Inserts a page into the aggregation <code>pages</code>.
       * @param oPage the page to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the page should be inserted at; for             a
       * negative value of <code>iIndex</code>, the page is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the page is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertPage(oPage: sap.ui.core.Control, iIndex: number): sap.m.NavContainer;

      /**
       * Inserts the page/control with the specified ID into the navigation history stack of the
       * NavContainer.This can be used for deep-linking when the user directly reached a drilldown detail
       * page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back
       * navigation would not be possible because there is no previous page in the NavContainer's history
       * stack.
       * @since 1.16.1
       * @param sPageId The ID of the control/page/screen which is inserted into the history stack. The
       * respective control must be aggregated by the NavContainer, otherwise this will cause an error.
       * @param sTransitionName The type of the transition/animation which would have been used to navigate
       * from the (inserted) previous page to the current page. When navigating back, the inverse animation
       * will be applied.        This parameter can be omitted; then the default is "slide" (horizontal
       * movement from the right).
       * @param oData This optional object can carry any payload data which would have been given to the
       * inserted previous page if the user would have done a normal forward navigation to it.
      */
      insertPreviousPage(sPageId: string, sTransitionName?: string, oData?: any): sap.m.NavContainer;

      /**
       * Removes all the controls from the aggregation <code>pages</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllPages(): sap.ui.core.Control[];

      /**
       * Removes a page from the aggregation <code>pages</code>.
       * @param vPage The page to remove or its index or id
       * @returns The removed page or <code>null</code>
      */
      removePage(vPage: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>autoFocus</code>.Determines whether the initial focus is set
       * automatically on first rendering and after navigating to a new page.This is useful when on touch
       * devices the keyboard pops out due to the focus being automatically set on an input field.If
       * necessary the "afterShow" event can be used to focus another element.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.30
       * @param bAutoFocus New value for property <code>autoFocus</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAutoFocus(bAutoFocus: boolean): sap.m.NavContainer;

      /**
       * Sets a new value for property <code>defaultTransitionName</code>.The type of the
       * transition/animation to apply when "to()" is called without defining a transition type to use. The
       * default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered
       * custom transitions.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>slide</code>.
       * @since 1.7.1
       * @param sDefaultTransitionName New value for property <code>defaultTransitionName</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDefaultTransitionName(sDefaultTransitionName: string): sap.m.NavContainer;

      /**
       * Sets a new value for property <code>height</code>.The height of the NavContainer. Can be changed
       * when the NavContainer should not cover the whole available area.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.NavContainer;

      /**
       * Sets the associated <code>initialPage</code>.
       * @param oInitialPage ID of an element which becomes the new target of this initialPage association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialPage(oInitialPage: any | sap.ui.core.Control): sap.m.NavContainer;

      /**
       * Sets a new value for property <code>visible</code>.Whether the NavContainer is visible.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.NavContainer;

      /**
       * Sets a new value for property <code>width</code>.The width of the NavContainer. Can be changed when
       * the NavContainer should not cover the whole available area.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.NavContainer;

      /**
       * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This
       * creates a new history item inside the NavContainer and allows going back.Note that any modifications
       * to the target page (like setting its title, or anything else that could cause a re-rendering) should
       * be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page
       * animation.Available transitions currently include "slide" (default), "fade", "flip", and "show".
       * None of these is currently making use of any given transitionParameters.Calling this navigation
       * method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide"
       * pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target
       * page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the
       * target page and "afterHide" on the page which has been left. The given data object is available in
       * the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
       * @param sPageId The screen to which drilldown should happen. The ID or the control itself can be
       * given.
       * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted;
       * then the default is "slide" (horizontal movement from the right).        Other options are: "fade",
       * "flip", and "show" and the names of any registered custom transitions.        None of the standard
       * transitions is currently making use of any given transition parameters.
       * @param oData Since version 1.7.1. This optional object can carry any payload data which should be
       * made available to the target page. The "beforeShow" event on the target page will contain this data
       * object as "data" property.        Use case: in scenarios where the entity triggering the navigation
       * can or should not directly initialize the target page, it can fill this object and the target page
       * itself (or a listener on it) can take over the initialization, using the given data.        When the
       * "transitionParameters" object is used, this "data" object must also be given (either as object or as
       * null) in order to have a proper parameter order.
       * @param oTransitionParameters Since version 1.7.1. This optional object can contain additional
       * information for the transition function, like the DOM element which triggered the transition or the
       * desired transition duration.        For a proper parameter order, the "data" parameter must be given
       * when the "transitionParameters" parameter is used. (it can be given as "null")        NOTE: it
       * depends on the transition function how the object should be structured and which parameters are
       * actually used to influence the transition.        The "show", "slide" and "fade" transitions do not
       * use any parameter.
      */
      to(sPageId: string, sTransitionName?: string, oData?: any, oTransitionParameters?: any): sap.m.NavContainer;
    }
    /**
     * An abstract class for combo boxes.
     * @resource sap/m/ComboBoxBase.js
    */
    export class ComboBoxBase extends sap.m.ComboBoxTextField {


      /**
       * Constructor for a new <code>sap.m.ComboBoxBase</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds an item to the aggregation named <code>items</code>.
       * @param oItem The item to be added; if empty, nothing is added.
       * @returns <code>this</code> to allow method chaining.
      */
      addItem(oItem: sap.ui.core.Item): sap.m.ComboBoxBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>loadItems</code> event of this
       * <code>sap.m.ComboBoxBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ComboBoxBase</code> itself.This event is fired when the end user moves the
       * cursor to the text field, performsan action that requires items to be loaded, and items are not
       * already loaded. For example,pressing F4 to open the dropdown list or typing something in the text
       * field fires the event.<b>Note:</b> We strongly recommend to only use this feature in performance
       * critical scenarios.Loading the items lazily (on demand) to defer initialization has several
       * implications for the end userexperience. For example, the busy indicator has to be shown while the
       * items are being loaded andassistive technology software also has to announce the state changes
       * (which may be confusingfor some screen reader users).<b>Note</b>: Currently the
       * <code>sap.m.MultiComboBox</code> does not support this event.
       * @since 1.38
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ComboBoxBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLoadItems(oData: any, fnFunction: any, oListener?: any): sap.m.ComboBoxBase;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.ComboBoxBase;

      /**
       * Clears the selection.To be overwritten by subclasses.
      */
      clearSelection(): void;

      /**
       * Closes the control's picker popup.
       * @returns <code>this</code> to allow method chaining.
      */
      close(): sap.m.ComboBoxBase;

      /**
       * Creates a picker popup container where the selection should take place.To be overwritten by
       * subclasses.
       * @param sPickerType undefined
       * @returns The picker popup to be used.
      */
      createPicker(sPickerType: string): sap.m.Popover | sap.m.Dialog;

      /**
       * Destroys all the items in the aggregation named <code>items</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      destroyItems(): sap.m.ComboBoxBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>loadItems</code> event of this
       * <code>sap.m.ComboBoxBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @since 1.38
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLoadItems(fnFunction: any, oListener: any): sap.m.ComboBoxBase;


      /**
       * Fires event <code>loadItems</code> to attached listeners.
       * @since 1.38
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLoadItems(mArguments: any): sap.m.ComboBoxBase;

      /**
       * Gets the enabled items from the aggregation named <code>items</code>.
       * @param aItems Items to filter.
       * @returns An array containing the enabled items.
      */
      getEnabledItems(aItems: sap.ui.core.Item[]): sap.ui.core.Item[];

      /**
       * Gets the first item from the aggregation named <code>items</code>.
       * @returns The first item, or null if there are no items.
      */
      getFirstItem(): sap.ui.core.Item;

      /**
       * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
       * @param iIndex Index of the item to return.
       * @returns Item at the given index, or null if none.
      */
      getItemAt(iIndex: number): sap.ui.core.Item;

      /**
       * Gets the item with the given key from the aggregation named <code>items</code>.<b>Note:</b> If
       * duplicate keys exist, the first item matching the key is returned.
       * @param sKey An item key that specifies the item to retrieve.
      */
      getItemByKey(sKey: string): sap.ui.core.Item;

      /**
       * Gets content of aggregation <code>items</code>.Defines the items contained within this control.
      */
      getItems(): sap.ui.core.Item[];

      /**
       * Gets the last item from the aggregation named <code>items</code>.
       * @returns The last item, or null if there are no items.
      */
      getLastItem(): sap.ui.core.Item;

      /**
       * Gets the <code>list</code>.
       * @returns The list instance object or <code>null</code>.
      */
      getList(): sap.m.SelectList;

      /**
       * Returns a metadata object for class sap.m.ComboBoxBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets the control's picker popup.
       * @returns The picker instance, creating it if necessary by callingthe <code>createPicker()</code>
       * method.
      */
      getPicker(): sap.m.Dialog | sap.m.Popover | any;

      /**
       * Gets the property <code>_sPickerType</code>
      */
      getPickerType(): string;

      /**
       * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.ui.core.Item): number;

      /**
       * Inserts an item into the aggregation named <code>items</code>.
       * @param oItem The item to be inserted; if empty, nothing is inserted.
       * @param iIndex The <code>0</code>-based index the item should be inserted at; for            a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value           
       * greater than the current size of the aggregation, the item is inserted at the last position.
       * @returns <code>this</code> to allow method chaining.
      */
      insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.ComboBoxBase;

      /**
       * Indicates whether the control's picker popup is open.
       * @returns Determines whether the control's picker popup is currently open (this includes opening and
       * closing animations).
      */
      isOpen(): boolean;

      /**
       * Opens the control's picker popup.
       * @returns <code>this</code> to allow method chaining.
      */
      open(): sap.m.ComboBoxBase;

      /**
       * Removes all the controls in the aggregation named <code>items</code>.Additionally unregisters them
       * from the hosting UIArea and clears the selection.
       * @returns An array of the removed items (might be empty).
      */
      removeAllItems(): sap.ui.core.Item[];

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param vItem The item to remove or its index or ID.
       * @returns The removed item or null.
      */
      removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Sets the property <code>_sPickerType</code>.
       * @param sPickerType undefined
      */
      setPickerType(sPickerType: string): void;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.ComboBoxBase;
    }
    /**
     * ListItemBase contains the base features of all specific list items.
     * @resource sap/m/ListItemBase.js
    */
    export class ListItemBase extends sap.ui.core.Control {

      /**
       * Returns the state of the item selection as a boolean
      */
      public isSelected: any;


      /**
       * Constructor for a new ListItemBase.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.ListItemBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>detailPress</code> event of this
       * <code>sap.m.ListItemBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ListItemBase</code> itself.Fires when the user clicks on the detail button of
       * the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListItemBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDetailPress(oData: any, fnFunction: any, oListener?: any): sap.m.ListItemBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>detailTap</code> event of this
       * <code>sap.m.ListItemBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ListItemBase</code> itself.Fires when the user taps on the detail button of the
       * control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListItemBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDetailTap(oData: any, fnFunction: any, oListener?: any): sap.m.ListItemBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.ListItemBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ListItemBase</code> itself.Fires when the user clicks on the
       * control.<b>Note:</b> This event is not fired when the parent <code>mode</code> is
       * <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to
       * <code>true</code>.If there is an interactive element that handles its own <code>press</code> event
       * then the list item's <code>press</code> event is not fired.Also see {@link
       * sap.m.ListBase#attachItemPress}.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListItemBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.ListItemBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tap</code> event of this
       * <code>sap.m.ListItemBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ListItemBase</code> itself.Fires when the user taps on the control.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ListItemBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTap(oData: any, fnFunction: any, oListener?: any): sap.m.ListItemBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>detailPress</code> event of this
       * <code>sap.m.ListItemBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDetailPress(fnFunction: any, oListener: any): sap.m.ListItemBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>detailTap</code> event of this
       * <code>sap.m.ListItemBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDetailTap(fnFunction: any, oListener: any): sap.m.ListItemBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.ListItemBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.ListItemBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tap</code> event of this
       * <code>sap.m.ListItemBase</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTap(fnFunction: any, oListener: any): sap.m.ListItemBase;


      /**
       * Fires event <code>detailPress</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDetailPress(mArguments: any): sap.m.ListItemBase;

      /**
       * Fires event <code>detailTap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDetailTap(mArguments: any): sap.m.ListItemBase;

      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.ListItemBase;

      /**
       * Fires event <code>tap</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTap(mArguments: any): sap.m.ListItemBase;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.28.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>counter</code>.Defines the counter value of the list items.
       * @returns Value of property <code>counter</code>
      */
      getCounter(): number;

      /**
       * Returns a metadata object for class sap.m.ListItemBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>selected</code>.Defines the selected state of the list
       * items.<b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause
       * unwanted results if you have more than one selected items in your binding.Default value is
       * <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Returns the tabbable DOM elements as a jQuery collection
       * @since 1.26
       * @returns jQuery object
      */
      getTabbables(): typeof jQuery;

      /**
       * Gets current value of property <code>type</code>.Defines the visual indication and behavior of the
       * list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.Default value is
       * <code>Inactive</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.ListType;

      /**
       * Gets current value of property <code>unread</code>.Activates the unread indicator for the list item,
       * if set to <code>true</code>.<b>Note:</b> This flag is ignored when the <code>showUnread</code>
       * property of the parent is set to <code>false</code>.Default value is <code>false</code>.
       * @returns Value of property <code>unread</code>
      */
      getUnread(): boolean;

      /**
       * Gets current value of property <code>visible</code>.Whether the control should be visible on the
       * screen. If set to false, a placeholder is rendered instead of the real control.Default value is
       * <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.28.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>counter</code>.Defines the counter value of the list items.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param iCounter New value for property <code>counter</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCounter(iCounter: number): sap.m.ListItemBase;

      /**
       * Sets a new value for property <code>selected</code>.Defines the selected state of the list
       * items.<b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause
       * unwanted results if you have more than one selected items in your binding.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bSelected New value for property <code>selected</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSelected(bSelected: boolean): sap.m.ListItemBase;

      /**
       * Sets a new value for property <code>type</code>.Defines the visual indication and behavior of the
       * list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Inactive</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.ListType): sap.m.ListItemBase;

      /**
       * Sets a new value for property <code>unread</code>.Activates the unread indicator for the list item,
       * if set to <code>true</code>.<b>Note:</b> This flag is ignored when the <code>showUnread</code>
       * property of the parent is set to <code>false</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bUnread New value for property <code>unread</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUnread(bUnread: boolean): sap.m.ListItemBase;

      /**
       * Sets a new value for property <code>visible</code>.Whether the control should be visible on the
       * screen. If set to false, a placeholder is rendered instead of the real control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.ListItemBase;
    }
    /**
     * The ActionSelect control provides a list of predefined items that allows end users to choose options
     * and additionally trigger some actions.
     * @resource sap/m/ActionSelect.js
    */
    export class ActionSelect extends sap.m.Select {


      /**
       * Constructor for a new ActionSelect.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some button into the association <code>buttons</code>.
       * @param vButton the buttons to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addButton(vButton: any | sap.m.Button): sap.m.ActionSelect;


      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>buttons</code>.
      */
      getButtons(): any[];

      /**
       * Returns a metadata object for class sap.m.ActionSelect.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Remove all buttons from the ActionSelect.
       * @returns An array with the ids of the removed elements (might be empty).
      */
      removeAllButtons(): string[];

      /**
       * Button to be removed from the ActionSelect content.
       * @param vButton The button to remove or its index or id.
       * @returns The id of the removed button or null.
      */
      removeButton(vButton: number | string | sap.m.Button): string;
    }
    /**
     * The <code>sap.m.ObjectMarker</code> control represents one of the following predefined
     * @resource sap/m/ObjectMarker.js
    */
    export class ObjectMarker extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectMarker.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.ObjectMarker;

      /**
       * Returns a metadata object for class sap.m.ObjectMarker.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>type</code>.Sets one of the predefined types.<br><b>Note</b>:
       * If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes
       * with predefined one as follows:<ul>                <li>For <code>Flagged</code> and
       * <code>Favorite</code> the icon is visible and the text is not displayed</li>                <li>For
       * <code>Draft</code> the text is visible and the icon is not displayed</li>                <li>For
       * <code>Locked</code> and <code>Unsaved</code> - on screens larger than 600px both icon and text are
       * visible, otherwise only the icon</li></ul>
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.ObjectMarkerType;

      /**
       * Gets current value of property <code>visibility</code>.Sets one of the visibility states.Visibility
       * states are as follows:<ul>                <li><code>IconOnly</code> - displays only icon, regardless
       * of the screen size</li>                <li><code>TextOnly</code> - displays only text, regardless of
       * the screen size</li>                <li><code>IconAndText</code> - displays both icon and text,
       * regardless of the screen size</li></ul>
       * @returns Value of property <code>visibility</code>
      */
      getVisibility(): sap.m.ObjectMarkerVisibility;
    }
    /**
     * The control provides a set of properties for text, sender information, time stamp.Beginning with
     * release 1.23 the new feature expand / collapse was introduced, which uses the property
     * maxCharacters.
     * @resource sap/m/FeedListItem.js
    */
    export class FeedListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new FeedListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>iconPress</code> event of this
       * <code>sap.m.FeedListItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.FeedListItem</code> itself.Event is fired when the icon is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FeedListItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachIconPress(oData: any, fnFunction: any, oListener?: any): sap.m.FeedListItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>senderPress</code> event of this
       * <code>sap.m.FeedListItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.FeedListItem</code> itself.Event is fired when name of the sender is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FeedListItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSenderPress(oData: any, fnFunction: any, oListener?: any): sap.m.FeedListItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>iconPress</code> event of this
       * <code>sap.m.FeedListItem</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachIconPress(fnFunction: any, oListener: any): sap.m.FeedListItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>senderPress</code> event of this
       * <code>sap.m.FeedListItem</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSenderPress(fnFunction: any, oListener: any): sap.m.FeedListItem;


      /**
       * Fires event <code>iconPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>string</code>Dom reference of the feed item's
       * icon to be used for positioning.</li><li><code>getDomRef</code> of type
       * <code>function</code>Function to retrieve the DOM reference for the <code>iconPress</code> event.The
       * function returns the DOM element of the icon or null</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireIconPress(mArguments: any): sap.m.FeedListItem;

      /**
       * Fires event <code>senderPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>string</code>Dom reference of the feed item's
       * sender string to be used for positioning.</li><li><code>getDomRef</code> of type
       * <code>function</code>Function to retrieve the DOM reference for the <code>senderPress</code>
       * event.The function returns the DOM element of the sender link or null</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSenderPress(mArguments: any): sap.m.FeedListItem;

      /**
       * Gets current value of property <code>activeIcon</code>.Icon displayed when the list item is active.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Gets current value of property <code>icon</code>.Icon to be displayed as graphical element within
       * the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a
       * default person-placeholder icon is displayed.Icon is only shown if showIcon = true.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconActive</code>.If true, icon is an link, which will fire
       * 'iconPress' events. If false, icon is normal imageDefault value is <code>true</code>.
       * @returns Value of property <code>iconActive</code>
      */
      getIconActive(): boolean;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If bandwidth is the key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>info</code>.The Info text.
       * @returns Value of property <code>info</code>
      */
      getInfo(): string;

      /**
       * Gets current value of property <code>maxCharacters</code>.The expand and collapse feature is set by
       * default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on
       * these values, the text of the FeedListItem is collapsed once text reaches these limits. In this
       * case, only the specified number of characters is displayed. By clicking on the text link More, the
       * entire text can be displayed. The text link Less collapses the text. The application is able to set
       * the value to its needs.
       * @returns Value of property <code>maxCharacters</code>
      */
      getMaxCharacters(): number;

      /**
       * Returns a metadata object for class sap.m.FeedListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>sender</code>.Sender of the chunk
       * @returns Value of property <code>sender</code>
      */
      getSender(): string;

      /**
       * Gets current value of property <code>senderActive</code>.If true, sender string is an link, which
       * will fire 'senderPress' events. If false, sender is normal text.Default value is <code>true</code>.
       * @returns Value of property <code>senderActive</code>
      */
      getSenderActive(): boolean;

      /**
       * Gets current value of property <code>showIcon</code>.If set to "true" (default), icons will be
       * displayed, if set to false icons are hiddenDefault value is <code>true</code>.
       * @returns Value of property <code>showIcon</code>
      */
      getShowIcon(): boolean;

      /**
       * Gets current value of property <code>text</code>.The FeedListItem text.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>timestamp</code>.This chunks timestamp
       * @returns Value of property <code>timestamp</code>
      */
      getTimestamp(): string;

      /**
       * Sets a new value for property <code>activeIcon</code>.Icon displayed when the list item is
       * active.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>icon</code>.Icon to be displayed as graphical element within the
       * FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default
       * person-placeholder icon is displayed.Icon is only shown if showIcon = true.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>iconActive</code>.If true, icon is an link, which will fire
       * 'iconPress' events. If false, icon is normal imageWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bIconActive New value for property <code>iconActive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconActive(bIconActive: boolean): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If bandwidth is the key for the application, set this value to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>info</code>.The Info text.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sInfo New value for property <code>info</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfo(sInfo: string): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>maxCharacters</code>.The expand and collapse feature is set by
       * default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on
       * these values, the text of the FeedListItem is collapsed once text reaches these limits. In this
       * case, only the specified number of characters is displayed. By clicking on the text link More, the
       * entire text can be displayed. The text link Less collapses the text. The application is able to set
       * the value to its needs.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param iMaxCharacters New value for property <code>maxCharacters</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxCharacters(iMaxCharacters: number): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>sender</code>.Sender of the chunkWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sSender New value for property <code>sender</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSender(sSender: string): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>senderActive</code>.If true, sender string is an link, which
       * will fire 'senderPress' events. If false, sender is normal text.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bSenderActive New value for property <code>senderActive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSenderActive(bSenderActive: boolean): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>showIcon</code>.If set to "true" (default), icons will be
       * displayed, if set to false icons are hiddenWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowIcon New value for property <code>showIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIcon(bShowIcon: boolean): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>text</code>.The FeedListItem text.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.FeedListItem;

      /**
       * Sets a new value for property <code>timestamp</code>.This chunks timestampWhen called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sTimestamp New value for property <code>timestamp</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTimestamp(sTimestamp: string): sap.m.FeedListItem;

      /**
       * Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type =
       * "sap.m.ListType.Active" for a FeedListItem
       * @param type new value for property type
       * @returns this allows method chaining
      */
      setType(type: sap.m.ListType): sap.m.FeedListItem;

      /**
       * Redefinition of sap.m.ListItemBase.setUnread: Unread is not supported for FeedListItem
       * @param value new value for property unread is ignored
       * @returns this allows method chaining
      */
      setUnread(value: boolean): sap.m.FeedListItem;
    }
    /**
     * Status information that can be either text with a value state, or an icon.
     * @resource sap/m/ObjectStatus.js
    */
    export class ObjectStatus extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectStatus.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.ObjectStatus;


      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Gets current value of property <code>icon</code>.Icon URI. This may be either an icon font or image
       * path.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If bandwidth is key for the application, set this value
       * to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Returns a metadata object for class sap.m.ObjectStatus.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>state</code>.Defines the text value state.Default value is
       * <code>None</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>text</code>.Defines the ObjectStatus text.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Determines the direction of the text, not
       * including the title.Available options for the text direction are LTR (left-to-right) and RTL
       * (right-to-left). By default the control inherits the text direction from its parent control.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>title</code>.Defines the ObjectStatus title.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>icon</code>.Icon URI. This may be either an icon font or image
       * path.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.ObjectStatus;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If bandwidth is key for the application, set this value to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectStatus;

      /**
       * Sets a new value for property <code>state</code>.Defines the text value state.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>None</code>.
       * @param sState New value for property <code>state</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setState(sState: sap.ui.core.ValueState): sap.m.ObjectStatus;

      /**
       * Sets the text.The default value is empty/undefined.
       * @param sText New value for property text
       * @returns this to allow method chaining
      */
      setText(sText: string): sap.m.ObjectStatus;

      /**
       * Sets a new value for property <code>textDirection</code>.Determines the direction of the text, not
       * including the title.Available options for the text direction are LTR (left-to-right) and RTL
       * (right-to-left). By default the control inherits the text direction from its parent control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectStatus;

      /**
       * Sets the title.The default value is empty/undefined.
       * @param sTitle New value for property title
       * @returns this to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ObjectStatus;
    }
    /**
     * MessageStrip is a control that enables the embedding of application-related messages in the
     * application.There are 4 types of messages: Information, Success, Warning and Error.Each message can
     * have a close button, so that it can be removed from the UI if needed.
     * @resource sap/m/MessageStrip.js
    */
    export class MessageStrip extends sap.ui.core.Control {


      /**
       * Constructor for a new MessageStrip.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this
       * <code>sap.m.MessageStrip</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessageStrip</code> itself.This event will be fired after the container is
       * closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessageStrip</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachClose(oData: any, fnFunction: any, oListener?: any): sap.m.MessageStrip;

      /**
       * Closes the MessageStrip.This method sets the visible property of the MessageStrip to false.The
       * MessageStrip can be shown again by setting the visible property to true.
      */
      close(): void;

      /**
       * Destroys the link in the aggregation <code>link</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyLink(): sap.m.MessageStrip;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this
       * <code>sap.m.MessageStrip</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachClose(fnFunction: any, oListener: any): sap.m.MessageStrip;


      /**
       * Fires event <code>close</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireClose(mArguments: any): sap.m.MessageStrip;

      /**
       * Gets current value of property <code>customIcon</code>.Determines a custom icon which is
       * displayed.If none is set, the default icon for this message type is used.Default value is
       * <code></code>.
       * @returns Value of property <code>customIcon</code>
      */
      getCustomIcon(): any;

      /**
       * Gets content of aggregation <code>link</code>.Adds a sap.m.Link control which will be displayed at
       * the end of the message.
      */
      getLink(): sap.m.Link;

      /**
       * Returns a metadata object for class sap.m.MessageStrip.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showCloseButton</code>.Determines if the message has a close
       * button in the upper right corner.Default value is <code>false</code>.
       * @returns Value of property <code>showCloseButton</code>
      */
      getShowCloseButton(): boolean;

      /**
       * Gets current value of property <code>showIcon</code>.Determines if an icon is displayed for the
       * message.Default value is <code>false</code>.
       * @returns Value of property <code>showIcon</code>
      */
      getShowIcon(): boolean;

      /**
       * Gets current value of property <code>text</code>.Determines the text of the message.Default value is
       * <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>type</code>.Determines the type of messages that are displayed
       * in the MessageStrip.Possible values are: Information (default), Success, Warning, Error.If None is
       * passed, the value is set to Information and a warning is displayed in the console.Default value is
       * <code>Information</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.ui.core.MessageType;

      /**
       * Sets a new value for property <code>customIcon</code>.Determines a custom icon which is displayed.If
       * none is set, the default icon for this message type is used.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sCustomIcon New value for property <code>customIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIcon(sCustomIcon: any): sap.m.MessageStrip;

      /**
       * Sets the aggregated <code>link</code>.
       * @param oLink The link to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLink(oLink: sap.m.Link): sap.m.MessageStrip;

      /**
       * Sets a new value for property <code>showCloseButton</code>.Determines if the message has a close
       * button in the upper right corner.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bShowCloseButton New value for property <code>showCloseButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowCloseButton(bShowCloseButton: boolean): sap.m.MessageStrip;

      /**
       * Sets a new value for property <code>showIcon</code>.Determines if an icon is displayed for the
       * message.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @param bShowIcon New value for property <code>showIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIcon(bShowIcon: boolean): sap.m.MessageStrip;

      /**
       * Setter for property text.Default value is empty/undefined
       * @param sText new value for property text
       * @returns this to allow method chaining
      */
      setText(sText: string): sap.m.MessageStrip;

      /**
       * Setter for property type.Default value is sap.ui.core.MessageType.Information
       * @param sType The Message type
       * @returns this to allow method chaining
      */
      setType(sType: sap.ui.core.MessageType): sap.m.MessageStrip;
    }
    /**
     * A SelectDialog is a dialog containing a list, search functionality to filter it and a
     * confirmation/cancel button. The control can be used when the user should select one or multiple
     * items out of many.The list used in the SelectDialog is a growing list and can be filled with a any
     * kind of list item. The search field triggers the events "search" and "liveChange" where a filter
     * function can be applied to the list binding.After selecting an item in single selection mode or
     * after confirming in multi selection mode, the dialog will be closed and the event "confirm" is fired
     * with the items that have been selected. By default, the selection will also be reset to allow for a
     * new selection when opening the dialog again.When cancelling the selection, the event "change" will
     * be fired and the selection is restored to the state when the dialog was opened.NOTE: The growing
     * functionality of the list does not support two-way Binding, so if you use this control with a JSON
     * model make sure the binding mode is set to "OneWay" and that you update the selection model manually
     * with the items passed in the "confirm" event.
     * @resource sap/m/SelectDialog.js
    */
    export class SelectDialog extends sap.ui.core.Control {


      /**
       * Constructor for a new SelectDialog.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.ListItemBase): sap.m.SelectDialog;

      /**
       * Forward method to the inner dialog: addStyleClass
       * @returns this pointer for chaining
      */
      addStyleClass(): sap.m.SelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this
       * <code>sap.m.SelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SelectDialog</code> itself.This event will be fired when the cancel button is
       * clicked
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancel(oData: any, fnFunction: any, oListener?: any): sap.m.SelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this
       * <code>sap.m.SelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SelectDialog</code> itself.This event will be fired when the dialog is confirmed
       * by selecting an item in single selection mode or by pressing the confirmation button in multi
       * selection mode . The items being selected are returned as event parameters.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachConfirm(oData: any, fnFunction: any, oListener?: any): sap.m.SelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.SelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SelectDialog</code> itself.This event will be fired when the value of the search
       * field is changed by a user - e.g. at each key press
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.SelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this
       * <code>sap.m.SelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SelectDialog</code> itself.This event will be fired when the search button has
       * been clicked on the searchfield on the visual control
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSearch(oData: any, fnFunction: any, oListener?: any): sap.m.SelectDialog;

      /**
       * Forwards aggregations with the name of items to the internal list.
       * @param sAggregationName The name for the binding
       * @param oBindingInfo The configuration parameters for the binding
       * @returns this pointer for chaining
      */
      bindAggregation(sAggregationName: string, oBindingInfo: any): sap.m.SelectDialog;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.SelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this
       * <code>sap.m.SelectDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancel(fnFunction: any, oListener: any): sap.m.SelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this
       * <code>sap.m.SelectDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachConfirm(fnFunction: any, oListener: any): sap.m.SelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.SelectDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.SelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this
       * <code>sap.m.SelectDialog</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSearch(fnFunction: any, oListener: any): sap.m.SelectDialog;


      /**
       * Fires event <code>cancel</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancel(mArguments: any): sap.m.SelectDialog;

      /**
       * Fires event <code>confirm</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.m.StandardListItem</code>Returns the
       * selected list item. When no item is selected, "null" is returned. When multi-selection is enabled
       * and multiple items are selected, only the first selected item is
       * returned.</li><li><code>selectedItems</code> of type <code>sap.m.StandardListItem[]</code>Returns an
       * array containing the visible selected list items. If no items are selected, an empty array is
       * returned.</li><li><code>selectedContexts</code> of type <code>string</code>Returns the binding
       * contexts of the selected items including the non-visible items.NOTE: In contrast to the parameter
       * "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to
       * list filtering). An empty array will be set for this parameter if no data binding is used.NOTE: When
       * the list binding is pre-filtered and there are items in the selection that are not visible upon
       * opening the dialog, these contexts are not loaded. Therefore, these items will not be included in
       * the selectedContexts array unless they are displayed at least once.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireConfirm(mArguments: any): sap.m.SelectDialog;

      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The value to search for, which can
       * change at any keypress</li><li><code>itemsBinding</code> of type <code>any</code>The Items binding
       * of the Select Dialog. It will only be available if the items aggregation is bound to a
       * model.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.SelectDialog;

      /**
       * Fires event <code>search</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The value entered in the
       * search</li><li><code>itemsBinding</code> of type <code>any</code>The Items binding of the Select
       * Dialog for search purposes. It will only be available if the items aggregation is bound to a
       * model.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSearch(mArguments: any): sap.m.SelectDialog;

      /**
       * Get the internal Dialog's contentHeight property {@link sap.m.Dialog}
       * @returns sHeight The content width of the internal dialog
      */
      getContentHeight(): any;

      /**
       * Get the internal Dialog's contentWidth property {@link sap.m.Dialog}
       * @returns sWidth The content width of the internal dialog
      */
      getContentWidth(): any;

      /**
       * Forward method to the inner dialog: getDomRef
       * @returns The Element's DOM Element sub DOM Element or null
      */
      getDomRef(): sap.ui.core.Element;

      /**
       * Gets current value of property <code>growingThreshold</code>.Determines the number of items
       * initially displayed in the list. Also defines the number of items to be requested from the model for
       * each grow.
       * @returns Value of property <code>growingThreshold</code>
      */
      getGrowingThreshold(): number;

      /**
       * Gets content of aggregation <code>items</code>.The items of the list shown in the search dialog. It
       * is recommended to use a StandardListItem for the dialog but other combinations are also possible.
      */
      getItems(): sap.m.ListItemBase[];

      /**
       * Returns a metadata object for class sap.m.SelectDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>multiSelect</code>.Determines if the user can select several
       * options from the listDefault value is <code>false</code>.
       * @returns Value of property <code>multiSelect</code>
      */
      getMultiSelect(): boolean;

      /**
       * Get the internal List's no data text property
       * @returns the current no data text
      */
      getNoDataText(): string;

      /**
       * Gets current value of property <code>rememberSelections</code>.This flag controls whether the dialog
       * clears the selection after the confirm event has been fired. If the dialog needs to be opened
       * multiple times in the same context to allow for corrections of previous user inputs, set this flag
       * to "true".Default value is <code>false</code>.
       * @since 1.18
       * @returns Value of property <code>rememberSelections</code>
      */
      getRememberSelections(): boolean;

      /**
       * Gets current value of property <code>title</code>.Determines the title text that appears in the
       * dialog header
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Forward method to the inner dialog: hasStyleClass
       * @returns true if the class is set, false otherwise
      */
      hasStyleClass(): boolean;

      /**
       * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.ListItemBase): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.ListItemBase, iIndex: number): sap.m.SelectDialog;

      /**
       * Opens the internal dialog with a searchfield and a list.
       * @param sSearchValue A value for the search can be passed to match with the filter applied to the
       * list binding.
      */
      open(sSearchValue: string): sap.m.SelectDialog;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.ListItemBase[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.ListItemBase): sap.m.ListItemBase;

      /**
       * Forward method to the inner dialog: removeStyleClass
       * @returns this pointer for chaining
      */
      removeStyleClass(): sap.m.SelectDialog;

      /**
       * Set the internal Dialog's contentHeight property {@link sap.m.Dialog}
       * @param sHeight The new content width value for the dialog
       * @returns this pointer for chaining
      */
      setContentHeight(sHeight: any): sap.m.SelectDialog;

      /**
       * Set the internal Dialog's contentWidth property {@link sap.m.Dialog}
       * @param sWidth The new content width value for the dialog
       * @returns this pointer for chaining
      */
      setContentWidth(sWidth: any): sap.m.SelectDialog;

      /**
       * Sets the growing threshold to the internal list
       * @param iValue Value for the list's growing threshold.
       * @returns this pointer for chaining
      */
      setGrowingThreshold(iValue: number): sap.m.SelectDialog;

      /**
       * Enable/Disable multi selection mode.
       * @param bMulti Flag for multi selection mode
       * @returns this pointer for chaining
      */
      setMultiSelect(bMulti: boolean): sap.m.SelectDialog;

      /**
       * Set the internal List's no data text property
       * @param sNoDataText The no data text for the list
       * @returns this pointer for chaining
      */
      setNoDataText(sNoDataText: string): sap.m.SelectDialog;

      /**
       * Sets a new value for property <code>rememberSelections</code>.This flag controls whether the dialog
       * clears the selection after the confirm event has been fired. If the dialog needs to be opened
       * multiple times in the same context to allow for corrections of previous user inputs, set this flag
       * to "true".When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @since 1.18
       * @param bRememberSelections New value for property <code>rememberSelections</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRememberSelections(bRememberSelections: boolean): sap.m.SelectDialog;

      /**
       * Set the title of the internal dialog
       * @param sTitle The title text for the dialog
       * @returns this pointer for chaining
      */
      setTitle(sTitle: string): sap.m.SelectDialog;

      /**
       * Forward method to the inner dialog: toggleStyleClass
       * @returns this pointer for chaining
      */
      toggleStyleClass(): sap.m.SelectDialog;
    }
    /**
     * The ToggleButton Control is a Button that can be toggled between pressed and normal state
     * @resource sap/m/ToggleButton.js
    */
    export class ToggleButton extends sap.m.Button {


      /**
       * Constructor for a new ToggleButton.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns a metadata object for class sap.m.ToggleButton.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>pressed</code>.The property is “true” when the control is
       * toggled. The default state of this property is "false".Default value is <code>false</code>.
       * @returns Value of property <code>pressed</code>
      */
      getPressed(): boolean;

      /**
       * Sets a new value for property <code>pressed</code>.The property is “true” when the control is
       * toggled. The default state of this property is "false".When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bPressed New value for property <code>pressed</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPressed(bPressed: boolean): sap.m.ToggleButton;
    }
    /**
     * Type for <code>sortItems</code> aggregation in P13nSortPanel control.
     * @resource sap/m/P13nSortItem.js
    */
    export class P13nSortItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nSortItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>columnKey</code>.key of the column
       * @since 1.26.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Returns a metadata object for class sap.m.P13nSortItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>operation</code>.sap.m.P13nConditionOperation
       * @since 1.26.0
       * @returns Value of property <code>operation</code>
      */
      getOperation(): string;

      /**
       * Sets a new value for property <code>columnKey</code>.key of the columnWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nSortItem;

      /**
       * Sets a new value for property <code>operation</code>.sap.m.P13nConditionOperationWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.26.0
       * @param sOperation New value for property <code>operation</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOperation(sOperation: string): sap.m.P13nSortItem;
    }
    /**
     * The <code>TabContainer</code> control represents a collection of tabs with associated content.The
     * <code>TabContainer</code> is a full-page container that takes 100% of the parent width and height.As
     * the control is expected to occupy the the whole parent, it should be the only child of its parent.
     * @resource sap/m/TabContainer.js
    */
    export class TabContainer extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>TabContainer</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Finds the <code>sap.m.TabStripItem</code> corresponding to a given
       * <code>sap.m.TabContainerItem</code>.
       * @param vItem object or ID of the <code>TabContainerItem</code>
       * @returns <code>TabStripItem</code> corresponding to a given <code>sap.m.TabContainerItem</code> (if
       * any)
      */
      _toTabStripItem(vItem: sap.m.TabContainerItem | string): any | any;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>addNewButtonPress</code> event of this
       * <code>sap.m.TabContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TabContainer</code> itself.Fired when <code>Add New Tab</code> button is
       * pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TabContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAddNewButtonPress(oData: any, fnFunction: any, oListener?: any): sap.m.TabContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemClose</code> event of this
       * <code>sap.m.TabContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TabContainer</code> itself.Fired when an item is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TabContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemClose(oData: any, fnFunction: any, oListener?: any): sap.m.TabContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemSelect</code> event of this
       * <code>sap.m.TabContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TabContainer</code> itself.Fired when an item is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TabContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemSelect(oData: any, fnFunction: any, oListener?: any): sap.m.TabContainer;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.TabContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>addNewButtonPress</code> event of this
       * <code>sap.m.TabContainer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAddNewButtonPress(fnFunction: any, oListener: any): sap.m.TabContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemClose</code> event of this
       * <code>sap.m.TabContainer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemClose(fnFunction: any, oListener: any): sap.m.TabContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemSelect</code> event of this
       * <code>sap.m.TabContainer</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemSelect(fnFunction: any, oListener: any): sap.m.TabContainer;


      /**
       * Fires event <code>addNewButtonPress</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAddNewButtonPress(mArguments: any): sap.m.TabContainer;

      /**
       * Fires event <code>itemClose</code> to attached listeners.Listeners may prevent the default action of
       * this event by using the <code>preventDefault</code>-method on the event object.Expects the following
       * event parameters:<ul><li><code>item</code> of type <code>sap.m.TabContainerItem</code>The item to be
       * closed.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireItemClose(mArguments: any): boolean;

      /**
       * Fires event <code>itemSelect</code> to attached listeners.Listeners may prevent the default action
       * of this event by using the <code>preventDefault</code>-method on the event object.Expects the
       * following event parameters:<ul><li><code>item</code> of type <code>sap.m.TabContainerItem</code>The
       * selected item.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireItemSelect(mArguments: any): boolean;

      /**
       * Gets content of aggregation <code>items</code>.The items displayed in the <code>TabContainer</code>.
      */
      getItems(): sap.m.TabContainerItem[];

      /**
       * Returns a metadata object for class sap.m.TabContainer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * ID of the element which is the current target of the association <code>selectedItem</code>, or
       * <code>null</code>.
      */
      getSelectedItem(): any;

      /**
       * Gets current value of property <code>showAddNewButton</code>.Defines whether an <code>Add New
       * Tab</code> button is displayed in the TabStrip.Default value is <code>false</code>.
       * @returns Value of property <code>showAddNewButton</code>
      */
      getShowAddNewButton(): boolean;

      /**
       * Checks for the provided <code>sap.m.TabContainerItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.TabContainerItem): number;

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param vItem The item to remove or its index or ID
       * @returns The removed item or null
      */
      removeItem(vItem: number | string | sap.m.TabContainerItem): sap.m.TabContainerItem;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.TabContainer;
    }
    /**
     * Enables users to navigate between items/entities.
     * @resource sap/m/PagingButton.js
    */
    export class PagingButton extends sap.ui.core.Control {


      /**
       * Constructor for a new PagingButton.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>positionChange</code> event of this
       * <code>sap.m.PagingButton</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PagingButton</code> itself.Fired when the current position is changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PagingButton</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPositionChange(oData: any, fnFunction: any, oListener?: any): sap.m.PagingButton;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>positionChange</code> event of this
       * <code>sap.m.PagingButton</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPositionChange(fnFunction: any, oListener: any): sap.m.PagingButton;


      /**
       * Fires event <code>positionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>newPosition</code> of type <code>int</code>The number of the new
       * position.</li><li><code>oldPosition</code> of type <code>int</code>The number of the old
       * position.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePositionChange(mArguments: any): sap.m.PagingButton;

      /**
       * Gets current value of property <code>count</code>.Determines the total count of items/entities that
       * the control navigates through.The minimum number of items/entities is 1.Default value is
       * <code>1</code>.
       * @returns Value of property <code>count</code>
      */
      getCount(): number;

      /**
       * Returns a metadata object for class sap.m.PagingButton.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>nextButtonTooltip</code>.Determines the tooltip of the next
       * button.Default value is <code></code>.
       * @since 1.36
       * @returns Value of property <code>nextButtonTooltip</code>
      */
      getNextButtonTooltip(): string;

      /**
       * Gets current value of property <code>position</code>.Determines the current position in the
       * items/entities that the control navigates through.Starting (minimum) number is 1.Default value is
       * <code>1</code>.
       * @returns Value of property <code>position</code>
      */
      getPosition(): number;

      /**
       * Gets current value of property <code>previousButtonTooltip</code>.Determines the tooltip of the
       * previous button.Default value is <code></code>.
       * @since 1.36
       * @returns Value of property <code>previousButtonTooltip</code>
      */
      getPreviousButtonTooltip(): string;
    }
    /**
     * The StandardTile control is displayed in the tile container.
     * @resource sap/m/StandardTile.js
    */
    export class StandardTile extends sap.m.Tile {


      /**
       * Constructor for a new StandardTile.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.StandardTile;


      /**
       * Gets current value of property <code>activeIcon</code>.Defines the active icon of the StandardTile.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Gets the icon of the StandardTile control.
      */
      getIcon(): void;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If bandwidth is key for the application, set this value
       * to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>info</code>.Defines the description of the StandardTile.
       * @returns Value of property <code>info</code>
      */
      getInfo(): string;

      /**
       * Gets current value of property <code>infoState</code>.Defines the color of the info text. Possible
       * values are Error, Warning, Success and so on.Default value is <code>None</code>.
       * @returns Value of property <code>infoState</code>
      */
      getInfoState(): sap.ui.core.ValueState;

      /**
       * Returns a metadata object for class sap.m.StandardTile.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>number</code>.Defines the number field of the StandardTile.
       * @returns Value of property <code>number</code>
      */
      getNumber(): string;

      /**
       * Gets current value of property <code>numberUnit</code>.Defines the number units qualifier of the
       * StandardTile.
       * @returns Value of property <code>numberUnit</code>
      */
      getNumberUnit(): string;

      /**
       * Gets current value of property <code>title</code>.Defines the title of the StandardTile.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>type</code>.Defines the type of the StandardTile.Default value
       * is <code>None</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.StandardTileType;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>activeIcon</code>.Defines the active icon of the
       * StandardTile.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>icon</code>.Defines the icon of the StandardTile.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If bandwidth is key for the application, set this value to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>info</code>.Defines the description of the StandardTile.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sInfo New value for property <code>info</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfo(sInfo: string): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>infoState</code>.Defines the color of the info text. Possible
       * values are Error, Warning, Success and so on.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>None</code>.
       * @param sInfoState New value for property <code>infoState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfoState(sInfoState: sap.ui.core.ValueState): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>number</code>.Defines the number field of the StandardTile.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sNumber New value for property <code>number</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumber(sNumber: string): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>numberUnit</code>.Defines the number units qualifier of the
       * StandardTile.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sNumberUnit New value for property <code>numberUnit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberUnit(sNumberUnit: string): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>title</code>.Defines the title of the StandardTile.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.StandardTile;

      /**
       * Sets a new value for property <code>type</code>.Defines the type of the StandardTile.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>None</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.StandardTileType): sap.m.StandardTile;
    }
    /**
     * ObjectHeader is a display control that enables the user to easily identify a specific object. The
     * object header title is the key identifier of the object and additional text and icons can be used to
     * further distinguish it from other objects.
     * @resource sap/m/ObjectHeader.js
    */
    export class ObjectHeader extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectHeader.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some additionalNumber to the aggregation <code>additionalNumbers</code>.
       * @since 1.38.0
       * @param oAdditionalNumber the additionalNumber to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber): sap.m.ObjectHeader;

      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.ObjectHeader;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.ObjectHeader;

      /**
       * Adds some attribute to the aggregation <code>attributes</code>.
       * @param oAttribute the attribute to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.ObjectHeader;

      /**
       * Adds some status to the aggregation <code>statuses</code>.
       * @since 1.16.0
       * @param oStatus the status to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addStatus(oStatus: sap.ui.core.Control): sap.m.ObjectHeader;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>iconPress</code> event of this
       * <code>sap.m.ObjectHeader</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectHeader</code> itself.Event is fired when the title icon is active and the
       * user taps/clicks on it
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectHeader</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachIconPress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectHeader;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>introPress</code> event of this
       * <code>sap.m.ObjectHeader</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectHeader</code> itself.Event is fired when the intro is active and the user
       * taps/clicks on it
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectHeader</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachIntroPress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectHeader;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>titlePress</code> event of this
       * <code>sap.m.ObjectHeader</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectHeader</code> itself.Event is fired when the title is active and the user
       * taps/clicks on it
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectHeader</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTitlePress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectHeader;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>titleSelectorPress</code> event of this
       * <code>sap.m.ObjectHeader</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectHeader</code> itself.Event is fired when the object header title selector
       * (down-arrow) is pressed
       * @since 1.16.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectHeader</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTitleSelectorPress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectHeader;

      /**
       * Destroys all the additionalNumbers in the aggregation <code>additionalNumbers</code>.
       * @since 1.38.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAdditionalNumbers(): sap.m.ObjectHeader;

      /**
       * Destroys all the attributes in the aggregation <code>attributes</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAttributes(): sap.m.ObjectHeader;

      /**
       * Destroys the firstStatus in the aggregation <code>firstStatus</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFirstStatus(): sap.m.ObjectHeader;

      /**
       * Destroys the headerContainer in the aggregation <code>headerContainer</code>.
       * @since 1.21.1
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderContainer(): sap.m.ObjectHeader;

      /**
       * Destroys the secondStatus in the aggregation <code>secondStatus</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySecondStatus(): sap.m.ObjectHeader;

      /**
       * Destroys all the statuses in the aggregation <code>statuses</code>.
       * @since 1.16.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyStatuses(): sap.m.ObjectHeader;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>iconPress</code> event of this
       * <code>sap.m.ObjectHeader</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachIconPress(fnFunction: any, oListener: any): sap.m.ObjectHeader;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>introPress</code> event of this
       * <code>sap.m.ObjectHeader</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachIntroPress(fnFunction: any, oListener: any): sap.m.ObjectHeader;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>titlePress</code> event of this
       * <code>sap.m.ObjectHeader</code>.The passed function and listener object must match the ones used for
       * event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTitlePress(fnFunction: any, oListener: any): sap.m.ObjectHeader;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>titleSelectorPress</code> event of
       * this <code>sap.m.ObjectHeader</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @since 1.16.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTitleSelectorPress(fnFunction: any, oListener: any): sap.m.ObjectHeader;


      /**
       * Fires event <code>iconPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>object</code>Dom reference of the object
       * header' icon to be used for positioning.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireIconPress(mArguments: any): sap.m.ObjectHeader;

      /**
       * Fires event <code>introPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>object</code>Dom reference of the object
       * header' intro to be used for positioning.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireIntroPress(mArguments: any): sap.m.ObjectHeader;

      /**
       * Fires event <code>titlePress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>object</code>Dom reference of the object
       * header' title to be used for positioning.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTitlePress(mArguments: any): sap.m.ObjectHeader;

      /**
       * Fires event <code>titleSelectorPress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>object</code>Dom reference of the object
       * header' titleArrow to be used for positioning.</li></ul>
       * @since 1.16.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTitleSelectorPress(mArguments: any): sap.m.ObjectHeader;

      /**
       * Gets content of aggregation <code>additionalNumbers</code>.NOTE: Only applied if you set
       * "responsive=false".Additional object numbers and units are managed in this aggregation.The numbers
       * are hidden on tablet and phone size screens.When only one number is provided, it is rendered with
       * additional separator from the main ObjectHeader number.
       * @since 1.38.0
      */
      getAdditionalNumbers(): sap.m.ObjectNumber[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>attributes</code>.The list of Object Attributes
      */
      getAttributes(): sap.m.ObjectAttribute[];

      /**
       * Gets current value of property <code>backgroundDesign</code>.This property is used to set the
       * background color of the ObjectHeader. Possible values are "Solid", "Translucent" and
       * "Transparent".NOTE: The different types of ObjectHeader come with different default background.- non
       * responsive ObjectHeader: Transparent- responsive ObjectHeader: Translucent- condensed ObjectHeder:
       * Solid
       * @returns Value of property <code>backgroundDesign</code>
      */
      getBackgroundDesign(): sap.m.BackgroundDesign;

      /**
       * Gets current value of property <code>condensed</code>.<code>ObjectHeader</code> with title, one
       * attribute, number, and number unit.<br><b>Note:</b> Only applied if the <code>responsive</code>
       * property is set to <code>false</code>.Default value is <code>false</code>.
       * @returns Value of property <code>condensed</code>
      */
      getCondensed(): boolean;

      /**
       * Gets content of aggregation <code>firstStatus</code>.First status shown on the right side of the
       * attributes above the second status.If it is not set the first attribute will expand to take the
       * entire row.
      */
      getFirstStatus(): sap.m.ObjectStatus;

      /**
       * Gets current value of property <code>fullScreenOptimized</code>.Optimizes the display of the
       * elements of the <code>ObjectHeader</code>.<br>Set this property to <code>true</code> if your
       * application uses a full-screen layout (as opposed to a master-detail or other split-screen
       * layout).<br><b>Note</b>: Only applied if the <code>responsive</code> property is also set to
       * <code>true</code>.If set to <code>true</code>, the following situations apply:<ul>               
       * <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the
       * Title/Number group</li>                <li>On desktop, 4+ attributes/statuses - 4 columns below the
       * Title/Number</li>                <li>On tablet (portrait mode), always in 2 columns below the
       * Title/Number</li>                <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns
       * below the Title/Number</li>                <li>On tablet (landscape mode), 3+ attributes/statuses -
       * 3 columns below the Title/Number</li></ul>On phone, the attributes and statuses are always
       * positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.<br>If set to
       * <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the
       * <code>ObjectHeader</code> in 2 or 3 columns depending on their number:<ul>               <li>On
       * desktop, 1-4 attributes/statuses - 2 columns</li>               <li>On desktop, 5+
       * attributes/statuses - 3 columns</li>               <li>On tablet, always in 2
       * columns</li></ul>Default value is <code>false</code>.
       * @since 1.28
       * @returns Value of property <code>fullScreenOptimized</code>
      */
      getFullScreenOptimized(): boolean;

      /**
       * Gets content of aggregation <code>headerContainer</code>.This aggregation takes only effect when you
       * set "responsive" to true.It can either be filled with an sap.m.IconTabBar or a
       * sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner
       * control. If used with an IconTabBar control, only the header will be displayed inside the object
       * header, the content will be displayed below the ObjectHeader.
       * @since 1.21.1
      */
      getHeaderContainer(): sap.m.ObjectHeaderContainer;

      /**
       * Gets current value of property <code>icon</code>.Object header icon.<b>Note:</b> Recursive
       * resolution of binding expressions is not supported by the framework.It works only in ObjectHeader,
       * since it is a composite control and creates an Image control internally.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconActive</code>.Indicates that the object header icon is
       * clickable
       * @returns Value of property <code>iconActive</code>
      */
      getIconActive(): boolean;

      /**
       * Gets current value of property <code>iconAlt</code>.Object header icon alternative text that is
       * displayed in case the Image is not available, or cannot be displayed.
       * @returns Value of property <code>iconAlt</code>
      */
      getIconAlt(): string;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If bandwidth is the key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>intro</code>.Introductory text for the object header
       * @returns Value of property <code>intro</code>
      */
      getIntro(): string;

      /**
       * Gets current value of property <code>introActive</code>.Indicates that the intro is clickable
       * @returns Value of property <code>introActive</code>
      */
      getIntroActive(): boolean;

      /**
       * Gets current value of property <code>introHref</code>.The intro link target URI. Supports standard
       * hyperlink behavior. If an action should be triggered, this should not be set, but instead an event
       * handler for the "introPress" event should be registered.
       * @since 1.28
       * @returns Value of property <code>introHref</code>
      */
      getIntroHref(): any;

      /**
       * Gets current value of property <code>introTarget</code>.Options are _self, _top, _blank, _parent,
       * _search. Alternatively, a frame name can be entered.
       * @since 1.28
       * @returns Value of property <code>introTarget</code>
      */
      getIntroTarget(): string;

      /**
       * Gets current value of property <code>introTextDirection</code>.This property specifies the intro
       * text directionality with enumerated options. By default, the control inherits text direction from
       * the DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>introTextDirection</code>
      */
      getIntroTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>markFavorite</code>.Sets the favorite state to true or false.
       * The showMarkers property must be true for this property to take effect.Default value is
       * <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>markFavorite</code>
      */
      getMarkFavorite(): boolean;

      /**
       * Gets current value of property <code>markFlagged</code>.Sets the flagged state to true or false. The
       * showMarkers property must be true for this property to take effect.Default value is
       * <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>markFlagged</code>
      */
      getMarkFlagged(): boolean;

      /**
       * Returns a metadata object for class sap.m.ObjectHeader.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>number</code>.Object header number field
       * @returns Value of property <code>number</code>
      */
      getNumber(): string;

      /**
       * Gets current value of property <code>numberState</code>.Object header number and numberUnit value
       * state.Default value is <code>None</code>.
       * @since 1.16.0
       * @returns Value of property <code>numberState</code>
      */
      getNumberState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>numberTextDirection</code>.This property specifies the number
       * and unit directionality with enumerated options. By default, the control inherits text direction
       * from the DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>numberTextDirection</code>
      */
      getNumberTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>numberUnit</code>.Object header number units qualifier
       * @returns Value of property <code>numberUnit</code>
      */
      getNumberUnit(): string;

      /**
       * Gets current value of property <code>responsive</code>.If this property is set to true the
       * ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.Be
       * aware that the design and behavior of the responsive ObjectHeader can change without further
       * notification.Default value is <code>false</code>.
       * @since 1.21.1
       * @returns Value of property <code>responsive</code>
      */
      getResponsive(): boolean;

      /**
       * Gets content of aggregation <code>secondStatus</code>.Second status shown on the right side of the
       * attributes below the first status.If it is not set the second attribute will expand to take the
       * entire row.
      */
      getSecondStatus(): sap.m.ObjectStatus;

      /**
       * Gets current value of property <code>showMarkers</code>.Indicates if object header supports showing
       * markers such as flagged and favorite.Default value is <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>showMarkers</code>
      */
      getShowMarkers(): boolean;

      /**
       * Gets current value of property <code>showTitleSelector</code>.When set to true, the selector arrow
       * icon/image is shown and can be pressed.Default value is <code>false</code>.
       * @since 1.16.0
       * @returns Value of property <code>showTitleSelector</code>
      */
      getShowTitleSelector(): boolean;

      /**
       * Gets content of aggregation <code>statuses</code>.The list of Object sap.ui.core.Control. It will
       * only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
       * @since 1.16.0
      */
      getStatuses(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>title</code>.Object header title
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleActive</code>.Indicates that the title is clickable and is
       * set only if a title is provided
       * @returns Value of property <code>titleActive</code>
      */
      getTitleActive(): boolean;

      /**
       * Gets current value of property <code>titleHref</code>.The title link target URI. Supports standard
       * hyperlink behavior. If an action should be triggered, this should not be set, but instead an event
       * handler for the "titlePress" event should be registered.
       * @since 1.28
       * @returns Value of property <code>titleHref</code>
      */
      getTitleHref(): any;

      /**
       * Gets current value of property <code>titleLevel</code>.Defines the semantic level of the title.This
       * information is e.g. used by assistive technologies like screenreaders to create a hierarchical site
       * map for faster navigation.Depending on this setting a HTML h1-h6 element is used.Default value is
       * <code>H1</code>.
       * @returns Value of property <code>titleLevel</code>
      */
      getTitleLevel(): sap.ui.core.TitleLevel;

      /**
       * Gets current value of property <code>titleSelectorTooltip</code>.Sets custom text for the tooltip of
       * the select title arrow. If not set, a default text of the tooltip will be displayed.Default value is
       * <code>Options</code>.
       * @since 1.30.0
       * @returns Value of property <code>titleSelectorTooltip</code>
      */
      getTitleSelectorTooltip(): string;

      /**
       * Gets current value of property <code>titleTarget</code>.Options are _self, _top, _blank, _parent,
       * _search. Alternatively, a frame name can be entered.
       * @since 1.28
       * @returns Value of property <code>titleTarget</code>
      */
      getTitleTarget(): string;

      /**
       * Gets current value of property <code>titleTextDirection</code>.This property specifies the title
       * text directionality with enumerated options. By default, the control inherits text direction from
       * the DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>titleTextDirection</code>
      */
      getTitleTextDirection(): sap.ui.core.TextDirection;

      /**
       * Checks for the provided <code>sap.m.ObjectNumber</code> in the aggregation
       * <code>additionalNumbers</code>.and returns its index if found or -1 otherwise.
       * @since 1.38.0
       * @param oAdditionalNumber The additionalNumber whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber): number;

      /**
       * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation
       * <code>attributes</code>.and returns its index if found or -1 otherwise.
       * @param oAttribute The attribute whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>statuses</code>.and returns its index if found or -1 otherwise.
       * @since 1.16.0
       * @param oStatus The status whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfStatus(oStatus: sap.ui.core.Control): number;

      /**
       * Inserts a additionalNumber into the aggregation <code>additionalNumbers</code>.
       * @since 1.38.0
       * @param oAdditionalNumber the additionalNumber to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the additionalNumber should be inserted at; for        
       *     a negative value of <code>iIndex</code>, the additionalNumber is inserted at position 0; for a
       * value             greater than the current size of the aggregation, the additionalNumber is inserted
       * at             the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber, iIndex: number): sap.m.ObjectHeader;

      /**
       * Inserts a attribute into the aggregation <code>attributes</code>.
       * @param oAttribute the attribute to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for             a
       * negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the attribute is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.ObjectHeader;

      /**
       * Inserts a status into the aggregation <code>statuses</code>.
       * @since 1.16.0
       * @param oStatus the status to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the status should be inserted at; for             a
       * negative value of <code>iIndex</code>, the status is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the status is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertStatus(oStatus: sap.ui.core.Control, iIndex: number): sap.m.ObjectHeader;

      /**
       * Removes a additionalNumber from the aggregation <code>additionalNumbers</code>.
       * @since 1.38.0
       * @param vAdditionalNumber The additionalNumber to remove or its index or id
       * @returns The removed additionalNumber or <code>null</code>
      */
      removeAdditionalNumber(vAdditionalNumber: number | string | sap.m.ObjectNumber): sap.m.ObjectNumber;

      /**
       * Removes all the controls from the aggregation <code>additionalNumbers</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.38.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAdditionalNumbers(): sap.m.ObjectNumber[];

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>attributes</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAttributes(): sap.m.ObjectAttribute[];

      /**
       * Removes all the controls from the aggregation <code>statuses</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.16.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllStatuses(): sap.ui.core.Control[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a attribute from the aggregation <code>attributes</code>.
       * @param vAttribute The attribute to remove or its index or id
       * @returns The removed attribute or <code>null</code>
      */
      removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;

      /**
       * Removes a status from the aggregation <code>statuses</code>.
       * @since 1.16.0
       * @param vStatus The status to remove or its index or id
       * @returns The removed status or <code>null</code>
      */
      removeStatus(vStatus: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>backgroundDesign</code>.This property is used to set the
       * background color of the ObjectHeader. Possible values are "Solid", "Translucent" and
       * "Transparent".NOTE: The different types of ObjectHeader come with different default background.- non
       * responsive ObjectHeader: Transparent- responsive ObjectHeader: Translucent- condensed ObjectHeder:
       * SolidWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.ObjectHeader;

      /**
       * Set the condensed flag
       * @param bCondensed the new value
       * @returns this pointer for chaining
      */
      setCondensed(bCondensed: boolean): sap.m.ObjectHeader;

      /**
       * Sets the aggregated <code>firstStatus</code>.
       * @param oFirstStatus The firstStatus to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFirstStatus(oFirstStatus: sap.m.ObjectStatus): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>fullScreenOptimized</code>.Optimizes the display of the elements
       * of the <code>ObjectHeader</code>.<br>Set this property to <code>true</code> if your application uses
       * a full-screen layout (as opposed to a master-detail or other split-screen layout).<br><b>Note</b>:
       * Only applied if the <code>responsive</code> property is also set to <code>true</code>.If set to
       * <code>true</code>, the following situations apply:<ul>                <li>On desktop, 1-3
       * attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>  
       *              <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>         
       *       <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>               
       * <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>     
       *           <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the
       * Title/Number</li></ul>On phone, the attributes and statuses are always positioned in 1 column below
       * the Title/Number of the <code>ObjectHeader</code>.<br>If set to <code>false</code>, the attributes
       * and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3
       * columns depending on their number:<ul>               <li>On desktop, 1-4 attributes/statuses - 2
       * columns</li>               <li>On desktop, 5+ attributes/statuses - 3 columns</li>              
       * <li>On tablet, always in 2 columns</li></ul>When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.28
       * @param bFullScreenOptimized New value for property <code>fullScreenOptimized</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFullScreenOptimized(bFullScreenOptimized: boolean): sap.m.ObjectHeader;

      /**
       * Sets the aggregated <code>headerContainer</code>.
       * @since 1.21.1
       * @param oHeaderContainer The headerContainer to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderContainer(oHeaderContainer: sap.m.ObjectHeaderContainer): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>icon</code>.Object header icon.<b>Note:</b> Recursive resolution
       * of binding expressions is not supported by the framework.It works only in ObjectHeader, since it is
       * a composite control and creates an Image control internally.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>iconActive</code>.Indicates that the object header icon is
       * clickableWhen called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param bIconActive New value for property <code>iconActive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconActive(bIconActive: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>iconAlt</code>.Object header icon alternative text that is
       * displayed in case the Image is not available, or cannot be displayed.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIconAlt New value for property <code>iconAlt</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconAlt(sIconAlt: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If bandwidth is the key for the application, set this value to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>intro</code>.Introductory text for the object headerWhen called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sIntro New value for property <code>intro</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntro(sIntro: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>introActive</code>.Indicates that the intro is clickableWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param bIntroActive New value for property <code>introActive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntroActive(bIntroActive: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>introHref</code>.The intro link target URI. Supports standard
       * hyperlink behavior. If an action should be triggered, this should not be set, but instead an event
       * handler for the "introPress" event should be registered.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.28
       * @param sIntroHref New value for property <code>introHref</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntroHref(sIntroHref: any): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>introTarget</code>.Options are _self, _top, _blank, _parent,
       * _search. Alternatively, a frame name can be entered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.28
       * @param sIntroTarget New value for property <code>introTarget</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntroTarget(sIntroTarget: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>introTextDirection</code>.This property specifies the intro text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sIntroTextDirection New value for property <code>introTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;

      /**
       * Sets the visibility value of the Favorite marker.
       * @param bMarked the new value
       * @returns this pointer for chaining
      */
      setMarkFavorite(bMarked: boolean): sap.m.ObjectHeader;

      /**
       * Sets the visibility value of the Flagged marker.
       * @param bMarked the new value
       * @returns this pointer for chaining
      */
      setMarkFlagged(bMarked: boolean): sap.m.ObjectHeader;

      /**
       * Set the number value to the internal aggregation
       * @param sNumber the new value
       * @returns this pointer for chaining
      */
      setNumber(sNumber: string): sap.m.ObjectHeader;

      /**
       * Set the number state to the internal aggregation
       * @param sState the new value
       * @returns this pointer for chaining
      */
      setNumberState(sState: sap.ui.core.ValueState): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>numberTextDirection</code>.This property specifies the number
       * and unit directionality with enumerated options. By default, the control inherits text direction
       * from the DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sNumberTextDirection New value for property <code>numberTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;

      /**
       * Set the number unit to the internal aggregation
       * @param sUnit the new value
       * @returns this pointer for chaining
      */
      setNumberUnit(sUnit: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>responsive</code>.If this property is set to true the
       * ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.Be
       * aware that the design and behavior of the responsive ObjectHeader can change without further
       * notification.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.21.1
       * @param bResponsive New value for property <code>responsive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setResponsive(bResponsive: boolean): sap.m.ObjectHeader;

      /**
       * Sets the aggregated <code>secondStatus</code>.
       * @param oSecondStatus The secondStatus to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSecondStatus(oSecondStatus: sap.m.ObjectStatus): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>showMarkers</code>.Indicates if object header supports showing
       * markers such as flagged and favorite.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.16.0
       * @param bShowMarkers New value for property <code>showMarkers</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowMarkers(bShowMarkers: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>showTitleSelector</code>.When set to true, the selector arrow
       * icon/image is shown and can be pressed.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.16.0
       * @param bShowTitleSelector New value for property <code>showTitleSelector</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowTitleSelector(bShowTitleSelector: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>title</code>.Object header titleWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>titleActive</code>.Indicates that the title is clickable and is
       * set only if a title is providedWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param bTitleActive New value for property <code>titleActive</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleActive(bTitleActive: boolean): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>titleHref</code>.The title link target URI. Supports standard
       * hyperlink behavior. If an action should be triggered, this should not be set, but instead an event
       * handler for the "titlePress" event should be registered.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.28
       * @param sTitleHref New value for property <code>titleHref</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleHref(sTitleHref: any): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>titleLevel</code>.Defines the semantic level of the title.This
       * information is e.g. used by assistive technologies like screenreaders to create a hierarchical site
       * map for faster navigation.Depending on this setting a HTML h1-h6 element is used.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>H1</code>.
       * @param sTitleLevel New value for property <code>titleLevel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.ObjectHeader;

      /**
       * Sets the new text for the tooltip of the select title arrow to the internal aggregation
       * @param sTooltip the new value
       * @returns this pointer for chaining
      */
      setTitleSelectorTooltip(sTooltip: any): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>titleTarget</code>.Options are _self, _top, _blank, _parent,
       * _search. Alternatively, a frame name can be entered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.28
       * @param sTitleTarget New value for property <code>titleTarget</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleTarget(sTitleTarget: string): sap.m.ObjectHeader;

      /**
       * Sets a new value for property <code>titleTextDirection</code>.This property specifies the title text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;
    }
    /**
     * Control to indicate that the system is busy with some task and the user has to wait.
     * @resource sap/m/BusyIndicator.js
    */
    export class BusyIndicator extends sap.ui.core.Control {


      /**
       * Constructor for a new BusyIndicator.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.BusyIndicator;


      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>customIcon</code>.Icon URL if an icon is used as the busy
       * indicator.Default value is <code></code>.
       * @returns Value of property <code>customIcon</code>
      */
      getCustomIcon(): any;

      /**
       * Gets current value of property <code>customIconDensityAware</code>.If this is set to false, the src
       * image will be loaded directly without attemptingto fetch the density perfect image for high density
       * device.By default, this is set to true but then one or more requests are sent to the server,trying
       * to get the density perfect version of the specified image.If bandwidth is the key for the
       * application, set this value to false.Default value is <code>true</code>.
       * @returns Value of property <code>customIconDensityAware</code>
      */
      getCustomIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>customIconHeight</code>.Height of the provided icon. By default
       * 44px are used.Default value is <code>44px</code>.
       * @returns Value of property <code>customIconHeight</code>
      */
      getCustomIconHeight(): any;

      /**
       * Gets current value of property <code>customIconRotationSpeed</code>.Defines the rotation speed of
       * the given image.If a .gif is used, the speed has to be set to 0.The unit is in ms.<b>Note:</b>
       * Values are considered valid when greater than or equal to 0.If invalid value is provided the speed
       * defaults to 0.Default value is <code>1000</code>.
       * @returns Value of property <code>customIconRotationSpeed</code>
      */
      getCustomIconRotationSpeed(): number;

      /**
       * Gets current value of property <code>customIconWidth</code>.Width of the provided icon. By default
       * 44px are used.Default value is <code>44px</code>.
       * @returns Value of property <code>customIconWidth</code>
      */
      getCustomIconWidth(): any;

      /**
       * Gets current value of property <code>design</code>.Setting this property will not have any effect on
       * the appearance of the BusyIndicatorin versions greater than or equal to 1.32.1Default value is
       * <code>auto</code>.
       * @returns Value of property <code>design</code>
      */
      getDesign(): string;

      /**
       * Returns a metadata object for class sap.m.BusyIndicator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>size</code>.Defines the size of the busy indicator.The
       * animation consists of three circles, each of which will be this size.Therefore the total width of
       * the control amounts to three times the given size.Default value is <code>1rem</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): any;

      /**
       * Gets current value of property <code>text</code>.Defines text to be displayed below the busy
       * indicator.It can be used to inform the user of the current operation.Default value is <code></code>.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR.Alternatively, the control can inherit the text direction from its parent container.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>customIcon</code>.Icon URL if an icon is used as the busy
       * indicator.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code></code>.
       * @param sCustomIcon New value for property <code>customIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIcon(sCustomIcon: any): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>customIconDensityAware</code>.If this is set to false, the src
       * image will be loaded directly without attemptingto fetch the density perfect image for high density
       * device.By default, this is set to true but then one or more requests are sent to the server,trying
       * to get the density perfect version of the specified image.If bandwidth is the key for the
       * application, set this value to false.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconDensityAware(bCustomIconDensityAware: boolean): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>customIconHeight</code>.Height of the provided icon. By default
       * 44px are used.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>44px</code>.
       * @param sCustomIconHeight New value for property <code>customIconHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconHeight(sCustomIconHeight: any): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>customIconRotationSpeed</code>.Defines the rotation speed of the
       * given image.If a .gif is used, the speed has to be set to 0.The unit is in ms.<b>Note:</b> Values
       * are considered valid when greater than or equal to 0.If invalid value is provided the speed defaults
       * to 0.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>1000</code>.
       * @param iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconRotationSpeed(iCustomIconRotationSpeed: number): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>customIconWidth</code>.Width of the provided icon. By default
       * 44px are used.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>44px</code>.
       * @param sCustomIconWidth New value for property <code>customIconWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIconWidth(sCustomIconWidth: any): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>design</code>.Setting this property will not have any effect on
       * the appearance of the BusyIndicatorin versions greater than or equal to 1.32.1When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>auto</code>.
       * @param sDesign New value for property <code>design</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDesign(sDesign: string): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>size</code>.Defines the size of the busy indicator.The animation
       * consists of three circles, each of which will be this size.Therefore the total width of the control
       * amounts to three times the given size.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>1rem</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: any): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>text</code>.Defines text to be displayed below the busy
       * indicator.It can be used to inform the user of the current operation.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.BusyIndicator;

      /**
       * Sets a new value for property <code>textDirection</code>.Options for the text direction are RTL and
       * LTR.Alternatively, the control can inherit the text direction from its parent container.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.BusyIndicator;
    }
    /**
     * The <code>sap.m.MaskInputRule</code> control holds the mapping of a single
     * <code>maskFormatSymbol</code>to the regular expression <code>regex</code> that defines the allowed
     * characters for the rule.
     * @resource sap/m/MaskInputRule.js
    */
    export class MaskInputRule extends sap.ui.core.Element {


      /**
       * Constructor for a new MaskInputRule.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>maskFormatSymbol</code>.Defines the symbol used in the mask
       * format which will accept a certain range of characters.Default value is <code>*</code>.
       * @returns Value of property <code>maskFormatSymbol</code>
      */
      getMaskFormatSymbol(): string;

      /**
       * Returns a metadata object for class sap.m.MaskInputRule.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>regex</code>.Defines the allowed characters as a regular
       * expression.Default value is <code>[a-zA-Z0-9]</code>.
       * @returns Value of property <code>regex</code>
      */
      getRegex(): string;
    }
    /**
     * The FormattedText control allows the usage of a limited set of tags for inline display of formatted
     * text in HTML format.
     * @resource sap/m/FormattedText.js
    */
    export class FormattedText extends sap.ui.core.Control {


      /**
       * Constructor for a new FormattedText.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>height</code>.Optional height of the control in CSS units.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets current value of property <code>htmlText</code>.Text in HTML format.The following tags are
       * supported:<ul>    <li><code>a</code></li>    <li><code>abbr</code></li>    <li><code>blockquote</code></li>
       * <li><code>br</code></li>    <li><code>cite</code></li>    <li><code>code</code></li>
       * <li><code>em</code></li>    <li><code>h1</code></li>    <li><code>h2</code></li>    <li><code>h3</code></li>
       * <li><code>h4</code></li>    <li><code>h5</code></li>    <li><code>h6</code></li>    <li><code>p</code></li>
       * <li><code>pre</code></li>    <li><code>strong</code></li>    <li><code>span</code></li>
       * <li><code>u</code></li>    <li><code>dl</code></li>    <li><code>dt</code></li>    <li><code>dl</code></li>
       * <li><code>ul</code></li>    <li><code>ol</code></li>    <li><code>li</code></li></ul><p><code>class,
       * style,</code> and <code>target</code> attributes are allowed.If <code>target</code> is not set,
       * links open in a new window by default.<p>Only safe <code>href</code> attributes can be used. See
       * {@link jQuery.sap.validateUrl}.Default value is <code></code>.
       * @returns Value of property <code>htmlText</code>
      */
      getHtmlText(): string;

      /**
       * Returns a metadata object for class sap.m.FormattedText.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>width</code>.Optional width of the control in CSS units.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>height</code>.Optional height of the control in CSS units.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.FormattedText;

      /**
       * Defines the HTML text to be displayed.
       * @param sText HTML text as a string
       * @returns this for chaining
      */
      setHtmlText(sText: string): sap.m.FormattedText;

      /**
       * Sets a new value for property <code>width</code>.Optional width of the control in CSS units.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.FormattedText;
    }
    /**
     * The QuickViewCard control displays information of an object in a business-card format.It also allows
     * this object to be linked to another object using one of the links.Clicking that link updates the
     * information with the data of the linked object.Unlimited number of objects can be linked.
     * @resource sap/m/QuickViewCard.js
    */
    export class QuickViewCard extends sap.m.QuickViewBase {


      /**
       * Constructor for a new QuickViewCard.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.QuickViewCard.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showVerticalScrollBar</code>.Determines whether the browser
       * displays the vertical scroll bar or simply cuts the content of the QuickViewCard.Default value is
       * <code>true</code>.
       * @returns Value of property <code>showVerticalScrollBar</code>
      */
      getShowVerticalScrollBar(): boolean;

      /**
       * Sets a new value for property <code>showVerticalScrollBar</code>.Determines whether the browser
       * displays the vertical scroll bar or simply cuts the content of the QuickViewCard.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bShowVerticalScrollBar New value for property <code>showVerticalScrollBar</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowVerticalScrollBar(bShowVerticalScrollBar: boolean): sap.m.QuickViewCard;
    }
    /**
     * QuickViewBase class provides base functionality for QuickView and QuickViewCard.Do not use it
     * directly.
     * @resource sap/m/QuickViewBase.js
    */
    export class QuickViewBase extends sap.ui.core.Control {


      /**
       * Constructor for a new QuickViewBase.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some page to the aggregation <code>pages</code>.
       * @param oPage the page to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addPage(oPage: sap.m.QuickViewPage): sap.m.QuickViewBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterNavigate</code> event of this
       * <code>sap.m.QuickViewBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.QuickViewBase</code> itself.The event is fired when navigation between two pages
       * has completed.In case of animated transitions this event is fired with some delayafter the
       * "navigate" event.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickViewBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.QuickViewBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this
       * <code>sap.m.QuickViewBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.QuickViewBase</code> itself.The event is fired when navigation between two pages
       * has been triggered.The transition (if any) to the new page has not started yet.This event can be
       * aborted by the application with preventDefault(),which means that there will be no navigation.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.QuickViewBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.QuickViewBase;

      /**
       * Binds aggregation <code>pages</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindPages(oBindingInfo: any): sap.m.QuickViewBase;

      /**
       * Destroys all the pages in the aggregation <code>pages</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPages(): sap.m.QuickViewBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterNavigate</code> event of this
       * <code>sap.m.QuickViewBase</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterNavigate(fnFunction: any, oListener: any): sap.m.QuickViewBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this
       * <code>sap.m.QuickViewBase</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachNavigate(fnFunction: any, oListener: any): sap.m.QuickViewBase;


      /**
       * Fires event <code>afterNavigate</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>Determines the page,
       * which has been displayed before navigation.</li><li><code>fromId</code> of type
       * <code>string</code>Determines the ID of the page, which has been displayed before
       * navigation.</li><li><code>to</code> of type <code>sap.ui.core.Control</code>Determines the page,
       * which is now displayed after navigation.</li><li><code>toId</code> of type
       * <code>string</code>Determines the ID of the page, which is now displayed after
       * navigation.</li><li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to"
       * page (a control with the ID of the page, which has been navigated to) has not been
       * displayed/navigated to before.</li><li><code>isTo</code> of type <code>boolean</code>Determines
       * whether this was a forward navigation.</li><li><code>isBack</code> of type
       * <code>boolean</code>Determines whether this was a back navigation.</li><li><code>isBackToTop</code>
       * of type <code>boolean</code>Determines whether this was a navigation to the root
       * page.</li><li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a
       * navigation to a specific page.</li><li><code>direction</code> of type <code>string</code>Determines 
       * how the navigation was triggered, possible values are"to", "back", "backToPage", and
       * "backToTop".</li><li><code>isTopPage</code> of type <code>boolean</code>Determines whether this is a
       * navigation to the top page.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterNavigate(mArguments: any): sap.m.QuickViewBase;

      /**
       * Fires event <code>navigate</code> to attached listeners.Listeners may prevent the default action of
       * this event by using the <code>preventDefault</code>-method on the event object.Expects the following
       * event parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The page which
       * was displayed before the current navigation.</li><li><code>fromId</code> of type
       * <code>string</code>The ID of the page which was displayed before the current
       * navigation.</li><li><code>to</code> of type <code>sap.ui.core.Control</code>The page which will be
       * displayed after the current navigation.</li><li><code>toId</code> of type <code>string</code>The ID
       * of the page which will be displayed after the current navigation.</li><li><code>firstTime</code> of
       * type <code>boolean</code>Determines whether the "to" page (a control with the ID of the pagewhich is
       * currently navigated to) has not been displayed/navigated to before.</li><li><code>isTo</code> of
       * type <code>boolean</code>Determines whether this is a forward
       * navigation.</li><li><code>isBack</code> of type <code>boolean</code>Determines whether this is a
       * back navigation.</li><li><code>isBackToTop</code> of type <code>boolean</code>Determines  whether
       * this is a navigation to the root page.</li><li><code>isBackToPage</code> of type
       * <code>boolean</code>Determines whether this was a navigation to a specific
       * page.</li><li><code>direction</code> of type <code>string</code>Determines how the navigation was
       * triggered, possible values are"to", "back", "backToPage", and "backToTop".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireNavigate(mArguments: any): boolean;

      /**
       * Returns a metadata object for class sap.m.QuickViewBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>pages</code>.Displays a page header, object icon or image, object
       * name with short description,and object information divided in groups
      */
      getPages(): sap.m.QuickViewPage[];

      /**
       * Checks for the provided <code>sap.m.QuickViewPage</code> in the aggregation <code>pages</code>.and
       * returns its index if found or -1 otherwise.
       * @param oPage The page whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfPage(oPage: sap.m.QuickViewPage): number;

      /**
       * Inserts a page into the aggregation <code>pages</code>.
       * @param oPage the page to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the page should be inserted at; for             a
       * negative value of <code>iIndex</code>, the page is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the page is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertPage(oPage: sap.m.QuickViewPage, iIndex: number): sap.m.QuickViewBase;

      /**
       * Navigates to the previous page if there is such.
      */
      navigateBack(): void;

      /**
       * Removes all the controls from the aggregation <code>pages</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllPages(): sap.m.QuickViewPage[];

      /**
       * Removes a page from the aggregation <code>pages</code>.
       * @param vPage The page to remove or its index or id
       * @returns The removed page or <code>null</code>
      */
      removePage(vPage: number | string | sap.m.QuickViewPage): sap.m.QuickViewPage;

      /**
       * Unbinds aggregation <code>pages</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindPages(): sap.m.QuickViewBase;
    }
    /**
     * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable
     * page. Do not place it into a page with disabled scrolling.On touch devices it gets hidden by default
     * and when the user pulls down the page far enough, it gets visible and triggers the "refresh"
     * event.In non-touch browsers where scrollbars are used for scrolling, it is always visible and
     * triggers the "refresh" event when clicked.
     * @resource sap/m/PullToRefresh.js
    */
    export class PullToRefresh extends sap.ui.core.Control {


      /**
       * Constructor for a new PullToRefresh.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>refresh</code> event of this
       * <code>sap.m.PullToRefresh</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PullToRefresh</code> itself.Event indicates that the user has requested new data
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PullToRefresh</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachRefresh(oData: any, fnFunction: any, oListener?: any): sap.m.PullToRefresh;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>refresh</code> event of this
       * <code>sap.m.PullToRefresh</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachRefresh(fnFunction: any, oListener: any): sap.m.PullToRefresh;


      /**
       * Fires event <code>refresh</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireRefresh(mArguments: any): sap.m.PullToRefresh;

      /**
       * Gets current value of property <code>customIcon</code>.Provide a URI to a custom icon image to
       * replace the SAP logo. Large images are scaled down to max 50px height.
       * @returns Value of property <code>customIcon</code>
      */
      getCustomIcon(): any;

      /**
       * Gets current value of property <code>description</code>.Optional description. May be used to inform
       * a user, for example, when the list has been updated last time.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image if this
       * version of image doesn't exist on the server.If bandwidth is the key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Returns a metadata object for class sap.m.PullToRefresh.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showIcon</code>.Set to true to display an icon/logo. Icon must
       * be set either in the customIcon property or in the CSS theme for the PullToRefresh control.Default
       * value is <code>false</code>.
       * @returns Value of property <code>showIcon</code>
      */
      getShowIcon(): boolean;

      /**
       * Hides the control and resets it to the normal state. In non-touch environments the control is not
       * hidden.
      */
      hide(): void;

      /**
       * Sets a new value for property <code>customIcon</code>.Provide a URI to a custom icon image to
       * replace the SAP logo. Large images are scaled down to max 50px height.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sCustomIcon New value for property <code>customIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomIcon(sCustomIcon: any): sap.m.PullToRefresh;

      /**
       * Sets a new value for property <code>description</code>.Optional description. May be used to inform a
       * user, for example, when the list has been updated last time.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.PullToRefresh;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image if this version of
       * image doesn't exist on the server.If bandwidth is the key for the application, set this value to
       * false.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.PullToRefresh;

      /**
       * Sets a new value for property <code>showIcon</code>.Set to true to display an icon/logo. Icon must
       * be set either in the customIcon property or in the CSS theme for the PullToRefresh control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bShowIcon New value for property <code>showIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIcon(bShowIcon: boolean): sap.m.PullToRefresh;
    }
    /**
     * This control can be used to add horizontal space between toolbar items.Note: ToolbarLayoutData
     * should not be used with this control.
     * @resource sap/m/ToolbarSpacer.js
    */
    export class ToolbarSpacer extends sap.ui.core.Control {

      /**
       * Flexible Spacer Class Name
      */
      protected flexClass: any;


      /**
       * Constructor for a new ToolbarSpacer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.ToolbarSpacer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the horizontal space.Note:
       * Empty("") value makes the space flexible which means it covers the remaining space between toolbar
       * items.This feature can be used to push next item to the edge of the toolbar.Default value is
       * <code></code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the horizontal space.Note:
       * Empty("") value makes the space flexible which means it covers the remaining space between toolbar
       * items.This feature can be used to push next item to the edge of the toolbar.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.ToolbarSpacer;
    }
    /**
     * A container that arranges same-size tiles nicely on carousel pages.
     * @resource sap/m/TileContainer.js
    */
    export class TileContainer extends sap.ui.core.Control {


      /**
       * Constructor for a new TileContainer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds a Tile to the end of the tiles collection.
       * @param oTile The tile to add
       * @returns this pointer for chaining
      */
      addTile(oTile: sap.m.Tile): sap.m.TileContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tileAdd</code> event of this
       * <code>sap.m.TileContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TileContainer</code> itself.Fires when a Tile is added.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TileContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTileAdd(oData: any, fnFunction: any, oListener?: any): sap.m.TileContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tileDelete</code> event of this
       * <code>sap.m.TileContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TileContainer</code> itself.Fires if a Tile is deleted in Edit mode.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TileContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTileDelete(oData: any, fnFunction: any, oListener?: any): sap.m.TileContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>tileMove</code> event of this
       * <code>sap.m.TileContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TileContainer</code> itself.Fires if a Tile is moved.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TileContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTileMove(oData: any, fnFunction: any, oListener?: any): sap.m.TileContainer;

      /**
       * Deletes a Tile.
       * @param oTile The tile to move
       * @returns this pointer for chaining
      */
      deleteTile(oTile: sap.m.Tile): sap.m.TileContainer;

      /**
       * Destroys all the tiles in the aggregation <code>tiles</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyTiles(): sap.m.TileContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tileAdd</code> event of this
       * <code>sap.m.TileContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTileAdd(fnFunction: any, oListener: any): sap.m.TileContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tileDelete</code> event of this
       * <code>sap.m.TileContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTileDelete(fnFunction: any, oListener: any): sap.m.TileContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>tileMove</code> event of this
       * <code>sap.m.TileContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTileMove(fnFunction: any, oListener: any): sap.m.TileContainer;


      /**
       * Fires event <code>tileAdd</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTileAdd(mArguments: any): sap.m.TileContainer;

      /**
       * Fires event <code>tileDelete</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>tile</code> of type <code>sap.m.Tile</code>The deleted Tile.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTileDelete(mArguments: any): sap.m.TileContainer;

      /**
       * Fires event <code>tileMove</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>tile</code> of type <code>sap.m.Tile</code>The Tile that has been
       * moved.</li><li><code>newIndex</code> of type <code>int</code>The new index of the Tile in the tiles
       * aggregation.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTileMove(mArguments: any): sap.m.TileContainer;

      /**
       * Gets current value of property <code>allowAdd</code>.Determines whether the user is allowed to add
       * Tiles in Edit mode (editable = true).
       * @returns Value of property <code>allowAdd</code>
      */
      getAllowAdd(): boolean;

      /**
       * Gets current value of property <code>editable</code>.Determines whether the TileContainer is
       * editable so you can move, delete or add tiles.
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>height</code>.Defines the height of the TileContainer in
       * px.Default value is <code>100%</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Returns a metadata object for class sap.m.TileContainer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the index of the first Tile visible in the current page.
       * @returns The index of the first Tile that is visible in the current page
      */
      getPageFirstTileIndex(): number;

      /**
       * Gets content of aggregation <code>tiles</code>.The Tiles to be displayed by the TileContainer.
      */
      getTiles(): sap.m.Tile[];

      /**
       * Gets current value of property <code>width</code>.Defines the width of the TileContainer in
       * px.Default value is <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.Tile</code> in the aggregation <code>tiles</code>.and returns
       * its index if found or -1 otherwise.
       * @param oTile The tile whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfTile(oTile: sap.m.Tile): number;

      /**
       * Inserts a Tile to the given index.
       * @param oTile The Tile to insert
       * @param iIndex The new Tile position in the tiles aggregation
       * @returns this pointer for chaining
      */
      insertTile(oTile: sap.m.Tile, iIndex: number): sap.m.TileContainer;

      /**
       * Moves a given Tile to the given index.
       * @param vTile The tile to move
       * @param iNewIndex The new Tile position in the tiles aggregation
       * @returns this pointer for chaining
      */
      moveTile(vTile: sap.m.Tile, iNewIndex: number): sap.m.TileContainer;

      /**
       * Removes all the controls from the aggregation <code>tiles</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTiles(): sap.m.Tile[];

      /**
       * Removes a tile from the aggregation <code>tiles</code>.
       * @param vTile The tile to remove or its index or id
       * @returns The removed tile or <code>null</code>
      */
      removeTile(vTile: number | string | sap.m.Tile): sap.m.Tile;

      /**
       * Scrolls to the page where the given Tile or tile index is included.Optionally this can be done
       * animated or not. With IE9 the scroll is never animated.
       * @param vTile The Tile or tile index to be scrolled into view
       * @param bAnimated Whether the scroll should be animated
      */
      scrollIntoView(vTile: sap.m.Tile | number, bAnimated: boolean): void;

      /**
       * Scrolls one page to the left.
      */
      scrollLeft(): void;

      /**
       * Scrolls one page to the right.
      */
      scrollRight(): void;

      /**
       * Sets a new value for property <code>allowAdd</code>.Determines whether the user is allowed to add
       * Tiles in Edit mode (editable = true).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param bAllowAdd New value for property <code>allowAdd</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAllowAdd(bAllowAdd: boolean): sap.m.TileContainer;

      /**
       * Sets the editable property to the TileContainer, allowing to move icons.This is currently also set
       * with a long tap.
       * @param bValue Whether the container is in edit mode or not
       * @returns this pointer for chaining
      */
      setEditable(bValue: boolean): sap.m.TileContainer;

      /**
       * Sets a new value for property <code>height</code>.Defines the height of the TileContainer in px.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>100%</code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.TileContainer;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the TileContainer in px.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.TileContainer;
    }
    /**
     * Type for <code>groupItems</code> aggregation in P13nGroupPanel control.
     * @resource sap/m/P13nGroupItem.js
    */
    export class P13nGroupItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nGroupItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>columnKey</code>.key of the column
       * @since 1.28.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Returns a metadata object for class sap.m.P13nGroupItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>operation</code>.sap.m.P13nConditionOperation
       * @since 1.28.0
       * @returns Value of property <code>operation</code>
      */
      getOperation(): string;

      /**
       * Gets current value of property <code>showIfGrouped</code>.make the grouped column as normalcolumn
       * visibleDefault value is <code>false</code>.
       * @since 1.28.0
       * @returns Value of property <code>showIfGrouped</code>
      */
      getShowIfGrouped(): boolean;

      /**
       * Sets a new value for property <code>columnKey</code>.key of the columnWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.28.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nGroupItem;

      /**
       * Sets a new value for property <code>operation</code>.sap.m.P13nConditionOperationWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.28.0
       * @param sOperation New value for property <code>operation</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOperation(sOperation: string): sap.m.P13nGroupItem;

      /**
       * Sets a new value for property <code>showIfGrouped</code>.make the grouped column as normalcolumn
       * visibleWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>false</code>.
       * @since 1.28.0
       * @param bShowIfGrouped New value for property <code>showIfGrouped</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIfGrouped(bShowIfGrouped: boolean): sap.m.P13nGroupItem;
    }
    /**
     * List item should be used for a label and an input field.
     * @resource sap/m/InputListItem.js
    */
    export class InputListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new InputListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.InputListItem;

      /**
       * Binds aggregation <code>content</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindContent(oBindingInfo: any): sap.m.InputListItem;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.InputListItem;


      /**
       * Gets content of aggregation <code>content</code>.Content controls can be added
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>label</code>.Label of the list item
       * @returns Value of property <code>label</code>
      */
      getLabel(): string;

      /**
       * Gets current value of property <code>labelTextDirection</code>.This property specifies the label
       * text directionality with enumerated options. By default, the label inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.30.0
       * @returns Value of property <code>labelTextDirection</code>
      */
      getLabelTextDirection(): sap.ui.core.TextDirection;

      /**
       * Returns a metadata object for class sap.m.InputListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.InputListItem;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>label</code>.Label of the list itemWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sLabel New value for property <code>label</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLabel(sLabel: string): sap.m.InputListItem;

      /**
       * Sets a new value for property <code>labelTextDirection</code>.This property specifies the label text
       * directionality with enumerated options. By default, the label inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.30.0
       * @param sLabelTextDirection New value for property <code>labelTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLabelTextDirection(sLabelTextDirection: sap.ui.core.TextDirection): sap.m.InputListItem;

      /**
       * Unbinds aggregation <code>content</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindContent(): sap.m.InputListItem;
    }
    /**
     * The MultiComboBox control provides a list box with items and a text field allowing the user to
     * either type a value directly into the control or choose from the list of existing items.
     * @resource sap/m/MultiComboBox.js
    */
    export abstract class MultiComboBox extends sap.m.ComboBoxBase {


      /**
       * Constructor for a new MultiComboBox.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item <code>oItem</code> to the association named <code>selectedItems</code>.
       * @param oItem The selected item to add; if empty, nothing is added.
       * @returns <code>this</code> to allow method chaining.
      */
      addSelectedItem(oItem: sap.ui.core.Item): sap.m.MultiComboBox;

      /**
       * Adds selected items. Only items with valid keys are added as selected.
       * @param aKeys An array of item keys that identifies the items to be added as selected
      */
      addSelectedKeys(aKeys: string[]): sap.m.MultiComboBox;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this
       * <code>sap.m.MultiComboBox</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MultiComboBox</code> itself.Event is fired when selection of an item is
       * changed.Note: please do not use the "change" event inherited from sap.m.InputBase
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MultiComboBox</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.MultiComboBox;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionFinish</code> event of this
       * <code>sap.m.MultiComboBox</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MultiComboBox</code> itself.Event is fired when user has finished a selection of
       * items in a list box and list box has been closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MultiComboBox</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionFinish(oData: any, fnFunction: any, oListener?: any): sap.m.MultiComboBox;

      /**
       * Clear the selection.
      */
      clearSelection(): void;

      /**
       * Creates a picker. To be overwritten by subclasses.
       * @param sPickerType undefined
       * @returns The picker pop-up to be used.
      */
      createPicker(sPickerType: string): sap.m.Popover | sap.m.Dialog;

      /**
       * Destroys all the items in the aggregation named <code>items</code>.
       * @returns <code>this</code> to allow method chaining.
      */
      destroyItems(): sap.m.ComboBoxBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this
       * <code>sap.m.MultiComboBox</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionChange(fnFunction: any, oListener: any): sap.m.MultiComboBox;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionFinish</code> event of this
       * <code>sap.m.MultiComboBox</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionFinish(fnFunction: any, oListener: any): sap.m.MultiComboBox;


      /**
       * Fires event <code>selectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>changedItem</code> of type <code>sap.ui.core.Item</code>Item which
       * selection is changed</li><li><code>selected</code> of type <code>boolean</code>Selection state: true
       * if item is selected, false ifitem is not selected</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionChange(mArguments: any): sap.m.MultiComboBox;

      /**
       * Fires event <code>selectionFinish</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItems</code> of type <code>sap.ui.core.Item[]</code>The selected
       * items which are selected after list box has been closed.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionFinish(mArguments: any): sap.m.MultiComboBox;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets the enabled items from the aggregation named <code>items</code>.
       * @param aItems Items to filter.
       * @returns An array containing the enabled items.
      */
      getEnabledItems(aItems: sap.ui.core.Item[]): sap.ui.core.Item[];

      /**
       * Gets the item with the given key from the aggregation named <code>items</code>.<br><b>Note:</b> If
       * duplicate keys exist, the first item matching the key is returned.
       * @param sKey An item key that specifies the item to retrieve.
      */
      getItemByKey(sKey: string): sap.ui.core.Item;

      /**
       * Returns a metadata object for class sap.m.MultiComboBox.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Retrieves the selected item objects from the association named <code>selectedItems</code>.
       * @returns Array of sap.ui.core.Item instances. The current target of the <code>selectedItems</code>  
       *       association.
      */
      getSelectedItems(): sap.ui.core.Item[];

      /**
       * Gets current value of property <code>selectedKeys</code>.Keys of the selected items. If the key has
       * no corresponding item, no changes will apply. If duplicate keys exists the first item matching the
       * key is used.Default value is <code>[]</code>.
       * @returns Value of property <code>selectedKeys</code>
      */
      getSelectedKeys(): string[];

      /**
       * Inserts an item into the aggregation named <code>items</code>.
       * @param oItem The item to insert; if empty, nothing is inserted.
       * @param iIndex The <code>0</code>-based index the item should be inserted at; for            a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value           
       * greater than the current size of the aggregation, the item is inserted at            the last
       * position.
       * @returns <code>this</code> to allow method chaining.
      */
      insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.MultiComboBox;

      /**
       * This hook method is called after the MultiComboBox's Pop-up is rendered.
      */
      onAfterRenderingPicker(): void;

      /**
       * This hook method is called before the MultiComboBox's Pop-up is rendered.
      */
      onBeforeRenderingPicker(): void;

      /**
       * Removes all the items in the aggregation named <code>items</code>.
       * @returns An array of sap.ui.core.Item of the removed items (might be empty).
      */
      removeAllItems(): sap.ui.core.Item[];

      /**
       * Removes all the controls in the association named <code>selectedItems</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSelectedItems(): any[];

      /**
       * Removes an item from the aggregation named <code>items</code>.
       * @param oItem The item to remove or its index or id.
       * @returns The removed item or null.
      */
      removeItem(oItem: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Removes an selectedItem from the association named <code>selectedItems</code>.
       * @param vSelectedItem The selectedItem to be removed or its index or ID
       * @returns The removed selectedItem or <code>null</code>
      */
      removeSelectedItem(vSelectedItem: number | any | sap.ui.core.Item): any;

      /**
       * Removes selected items. Only items with valid keys are removed.
       * @param aKeys An array of item keys that identifies the items to be removed
      */
      removeSelectedKeys(aKeys: string[]): sap.m.MultiComboBox;

      /**
       * Setter for association <code>selectedItems</code>.
       * @param aItems new values for association <code>selectedItems</code>.Array of sap.ui.core.Item Id
       * which becomes the new target of this <code>selectedItems</code> association.Alternatively, an array
       * of sap.ui.core.Item instance may be given or null.
       * @returns <code>this</code> to allow method chaining.
      */
      setSelectedItems(aItems: string[] | sap.ui.core.Item[] | any): sap.m.MultiComboBox;

      /**
       * Sets a new value for property <code>selectedKeys</code>.Keys of the selected items. If the key has
       * no corresponding item, no changes will apply. If duplicate keys exists the first item matching the
       * key is used.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>[]</code>.
       * @param sSelectedKeys New value for property <code>selectedKeys</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSelectedKeys(sSelectedKeys: string[]): sap.m.MultiComboBox;
    }
    /**
     * The P13nSortPanel control is used to define settings for sorting in table personalization.
     * @resource sap/m/P13nSortPanel.js
    */
    export class P13nSortPanel extends sap.m.P13nPanel {


      /**
       * Constructor for a new P13nSortPanel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some sortItem to the aggregation <code>sortItems</code>.
       * @since 1.26
       * @param oSortItem the sortItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSortItem(oSortItem: sap.m.P13nSortItem): sap.m.P13nSortPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>addSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nSortPanel</code> itself.event raised when a SortItem was added
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nSortPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAddSortItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nSortPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>removeSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nSortPanel</code> itself.remove a sort item
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nSortPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachRemoveSortItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nSortPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>updateSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nSortPanel</code> itself.update a sort item
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nSortPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUpdateSortItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nSortPanel;

      /**
       * Binds aggregation <code>sortItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindSortItems(oBindingInfo: any): sap.m.P13nSortPanel;

      /**
       * Destroys all the sortItems in the aggregation <code>sortItems</code>.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySortItems(): sap.m.P13nSortPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>addSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAddSortItem(fnFunction: any, oListener: any): sap.m.P13nSortPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>removeSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachRemoveSortItem(fnFunction: any, oListener: any): sap.m.P13nSortPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>updateSortItem</code> event of this
       * <code>sap.m.P13nSortPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUpdateSortItem(fnFunction: any, oListener: any): sap.m.P13nSortPanel;


      /**
       * Fires event <code>addSortItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAddSortItem(mArguments: any): sap.m.P13nSortPanel;

      /**
       * Fires event <code>removeSortItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireRemoveSortItem(mArguments: any): sap.m.P13nSortPanel;

      /**
       * Fires event <code>updateSortItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUpdateSortItem(mArguments: any): sap.m.P13nSortPanel;

      /**
       * Gets current value of property <code>containerQuery</code>.defines if the mediaQuery or a
       * ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog
       * theproperty should be set to true!Default value is <code>false</code>.
       * @since 1.26
       * @returns Value of property <code>containerQuery</code>
      */
      getContainerQuery(): boolean;

      /**
       * Gets current value of property <code>layoutMode</code>.can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.
       * @since 1.26
       * @returns Value of property <code>layoutMode</code>
      */
      getLayoutMode(): string;

      /**
       * Returns a metadata object for class sap.m.P13nSortPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>sortItems</code>.defined Sort Items
       * @since 1.26
      */
      getSortItems(): sap.m.P13nSortItem[];

      /**
       * Checks for the provided <code>sap.m.P13nSortItem</code> in the aggregation
       * <code>sortItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.26
       * @param oSortItem The sortItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSortItem(oSortItem: sap.m.P13nSortItem): number;

      /**
       * Inserts a sortItem into the aggregation <code>sortItems</code>.
       * @since 1.26
       * @param oSortItem the sortItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the sortItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value          
       *   greater than the current size of the aggregation, the sortItem is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSortItem(oSortItem: sap.m.P13nSortItem, iIndex: number): sap.m.P13nSortPanel;

      /**
       * Removes all the controls from the aggregation <code>sortItems</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.26
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSortItems(): sap.m.P13nSortItem[];

      /**
       * removes all invalid sort conditions.
       * @since 1.28
      */
      removeInvalidConditions(): void;

      /**
       * Removes a sortItem from the aggregation <code>sortItems</code>.
       * @since 1.26
       * @param vSortItem The sortItem to remove or its index or id
       * @returns The removed sortItem or <code>null</code>
      */
      removeSortItem(vSortItem: number | string | sap.m.P13nSortItem): sap.m.P13nSortItem;

      /**
       * removes all errors/warning states from of all sort conditions.
       * @since 1.28
      */
      removeValidationErrors(): void;

      /**
       * Sets a new value for property <code>containerQuery</code>.defines if the mediaQuery or a
       * ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog
       * theproperty should be set to true!When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.26
       * @param bContainerQuery New value for property <code>containerQuery</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContainerQuery(bContainerQuery: boolean): sap.m.P13nSortPanel;

      /**
       * Sets a new value for property <code>layoutMode</code>.can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.26
       * @param sLayoutMode New value for property <code>layoutMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLayoutMode(sLayoutMode: string): sap.m.P13nSortPanel;

      /**
       * setter for the supported operations array
       * @since 1.26
       * @param array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
       * @returns this for chaining
      */
      setOperations(array: any[]): sap.m.P13nSortPanel;

      /**
       * Unbinds aggregation <code>sortItems</code> from model data.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindSortItems(): sap.m.P13nSortPanel;

      /**
       * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state)
       * and opens a popup message dialog to give theuser the feedback that some values are wrong or missing.
       * @since 1.26
      */
      validateConditions(): void;
    }
    /**
     * This control displays a number of IconTabFilters and IconTabSeparators. If the available
     * horizontalspace is exceeded, a horizontal scrolling appears.
     * @resource sap/m/IconTabHeader.js
    */
    export class IconTabHeader extends sap.ui.core.Control {


      /**
       * Constructor for a new IconTabHeader.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.IconTab): sap.m.IconTabHeader;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.IconTabHeader</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.IconTabHeader</code> itself.Fires when an item is selected.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.IconTabHeader</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.IconTabHeader;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.IconTabHeader;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.IconTabHeader</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.IconTabHeader;


      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>item</code> of type <code>sap.m.IconTabFilter</code>The selected
       * item</li><li><code>key</code> of type <code>string</code>The key of the selected item</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.IconTabHeader;

      /**
       * Gets content of aggregation <code>items</code>.The items displayed in the IconTabHeader.
      */
      getItems(): sap.m.IconTab[];

      /**
       * Returns a metadata object for class sap.m.IconTabHeader.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mode</code>.Specifies the header mode.<b>Note:</b> The Inline
       * mode works only if no icons are set.Default value is <code>Standard</code>.
       * @since 1.40
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.IconTabHeaderMode;

      /**
       * Gets current value of property <code>selectedKey</code>.Key of the selected item.If the key has no
       * corresponding aggregated item, no changes will apply.If duplicate keys exists the first item
       * matching, the key is used.
       * @since 1.15.0
       * @returns Value of property <code>selectedKey</code>
      */
      getSelectedKey(): string;

      /**
       * Gets current value of property <code>showSelection</code>.Defines whether the current selection is
       * visualized.Default value is <code>true</code>.
       * @returns Value of property <code>showSelection</code>
      */
      getShowSelection(): boolean;

      /**
       * Gets current value of property <code>visible</code>.Specifies whether the control is
       * rendered.Default value is <code>true</code>.
       * @since 1.15.0
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Checks for the provided <code>sap.m.IconTab</code> in the aggregation <code>items</code>.and returns
       * its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.IconTab): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.IconTab, iIndex: number): sap.m.IconTabHeader;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.IconTab[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.IconTab): sap.m.IconTab;

      /**
       * Sets a new value for property <code>mode</code>.Specifies the header mode.<b>Note:</b> The Inline
       * mode works only if no icons are set.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Standard</code>.
       * @since 1.40
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.IconTabHeaderMode): sap.m.IconTabHeader;

      /**
       * Sets the selected item based on key.
       * @param sKey The key of the item to be selected
       * @returns this pointer for chaining
      */
      setSelectedKey(sKey: string): sap.m.IconTabHeader;

      /**
       * Sets a new value for property <code>showSelection</code>.Defines whether the current selection is
       * visualized.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bShowSelection New value for property <code>showSelection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSelection(bShowSelection: boolean): sap.m.IconTabHeader;

      /**
       * Sets a new value for property <code>visible</code>.Specifies whether the control is rendered.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @since 1.15.0
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.IconTabHeader;
    }
    /**
     * Allows end users to interact with date and/or time and select from a date and/or time
     * pad.<b>Note:</b> This control should not be used any longer, instead please use the dedicated
     * <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code>
     * control.
     * @resource sap/m/DateTimeInput.js
    */
    export class DateTimeInput extends sap.ui.core.Control {


      /**
       * Constructor for a new DateTimeInput.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.DateTimeInput;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.DateTimeInput</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.DateTimeInput</code> itself.This event gets fired when the selection has
       * finished and the value has changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.DateTimeInput</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.DateTimeInput;

      /**
       * Binds property <code>value</code> to model data.See {@link sap.ui.base.ManagedObject#bindProperty
       * ManagedObject.bindProperty} for a detailed description of the possible properties of
       * <code>oBindingInfo</code>
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindValue(oBindingInfo: any): sap.m.DateTimeInput;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.DateTimeInput</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.DateTimeInput;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>The string value of the control in
       * given valueFormat (or locale format).</li><li><code>dateValue</code> of type <code>object</code>The
       * value of control as JavaScript Date Object or null if value is empty.</li><li><code>valid</code> of
       * type <code>boolean</code>if set, the entered value is a valid date.If not set the entered value
       * cannot be converted to a date.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.DateTimeInput;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.27.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>dateValue</code>.This property as JavaScript Date Object can be
       * used to assign a new value which is independent from valueFormat.
       * @returns Value of property <code>dateValue</code>
      */
      getDateValue(): any;

      /**
       * Gets current value of property <code>displayFormat</code>.Displays date value in this given format
       * in text field. Default value is taken from locale settings.If you use data-binding on value property
       * with type sap.ui.model.type.Date then you can ignore this property or the latter wins.If the user's
       * browser supports native picker then this property is overwritten by browser with locale settings.
       * @returns Value of property <code>displayFormat</code>
      */
      getDisplayFormat(): string;

      /**
       * Gets current value of property <code>editable</code>.Defines whether the control can be modified by
       * the user or not.<b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text
       * from it.Default value is <code>true</code>.
       * @since 1.12.0
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Returns a metadata object for class sap.m.DateTimeInput.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.Defines the name of the control for the purposes of
       * form submission.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>placeholder</code>.Defines a short hint intended to aid the
       * user with data entry when the control has no value.
       * @returns Value of property <code>placeholder</code>
      */
      getPlaceholder(): string;

      /**
       * Gets current value of property <code>showValueStateMessage</code>.Indicates whether the value state
       * message should be shown or not.Default value is <code>true</code>.
       * @since 1.26.0
       * @returns Value of property <code>showValueStateMessage</code>
      */
      getShowValueStateMessage(): boolean;

      /**
       * Gets current value of property <code>textAlign</code>.Defines the horizontal alignment of the text
       * that is shown inside the input field.Default value is <code>Initial</code>.
       * @since 1.26.0
       * @returns Value of property <code>textAlign</code>
      */
      getTextAlign(): sap.ui.core.TextAlign;

      /**
       * Gets current value of property <code>textDirection</code>.Defines the text directionality of the
       * input field, e.g. <code>RTL</code>, <code>LTR</code>Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>type</code>.Type of DateTimeInput (e.g. Date, Time,
       * DateTime)Default value is <code>Date</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.DateTimeInputType;

      /**
       * Gets current value of property <code>value</code>.Defines the value of the control.The new value
       * must be in the format set by <code>valueFormat</code>.The "Now" literal can also be assigned as a
       * parameter to show the current date and/or time.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueFormat</code>.Given value property should match with
       * valueFormat to parse date. Default value is taken from locale settings.You can only set and get
       * value in this format.If you use data-binding on value property with type sap.ui.model.type.Date you
       * can ignore this property or the latter wins.
       * @returns Value of property <code>valueFormat</code>
      */
      getValueFormat(): string;

      /**
       * Gets current value of property <code>valueState</code>.Visualizes the validation state of the
       * control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.Default value is
       * <code>None</code>.
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>valueStateText</code>.Defines the text that appears in the
       * value state message pop-up. If this is not specified, a default text is shown from the resource
       * bundle.
       * @since 1.26.0
       * @returns Value of property <code>valueStateText</code>
      */
      getValueStateText(): string;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the control.Default value is
       * <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.27.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>dateValue</code>.This property as JavaScript Date Object can be
       * used to assign a new value which is independent from valueFormat.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oDateValue New value for property <code>dateValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDateValue(oDateValue: any): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>displayFormat</code>.Displays date value in this given format in
       * text field. Default value is taken from locale settings.If you use data-binding on value property
       * with type sap.ui.model.type.Date then you can ignore this property or the latter wins.If the user's
       * browser supports native picker then this property is overwritten by browser with locale
       * settings.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sDisplayFormat New value for property <code>displayFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayFormat(sDisplayFormat: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>editable</code>.Defines whether the control can be modified by
       * the user or not.<b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text
       * from it.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @since 1.12.0
       * @param bEditable New value for property <code>editable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEditable(bEditable: boolean): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>enabled</code>.Indicates whether the user can interact with the
       * control or not.<b>Note:</b> Disabled controls cannot be focused and they are out of the
       * tab-chain.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>name</code>.Defines the name of the control for the purposes of
       * form submission.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>placeholder</code>.Defines a short hint intended to aid the user
       * with data entry when the control has no value.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sPlaceholder New value for property <code>placeholder</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlaceholder(sPlaceholder: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>showValueStateMessage</code>.Indicates whether the value state
       * message should be shown or not.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @since 1.26.0
       * @param bShowValueStateMessage New value for property <code>showValueStateMessage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>textAlign</code>.Defines the horizontal alignment of the text
       * that is shown inside the input field.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Initial</code>.
       * @since 1.26.0
       * @param sTextAlign New value for property <code>textAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>textDirection</code>.Defines the text directionality of the
       * input field, e.g. <code>RTL</code>, <code>LTR</code>When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>type</code>.Type of DateTimeInput (e.g. Date, Time,
       * DateTime)When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Date</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.DateTimeInputType): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>value</code>.Defines the value of the control.The new value must
       * be in the format set by <code>valueFormat</code>.The "Now" literal can also be assigned as a
       * parameter to show the current date and/or time.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>valueFormat</code>.Given value property should match with
       * valueFormat to parse date. Default value is taken from locale settings.You can only set and get
       * value in this format.If you use data-binding on value property with type sap.ui.model.type.Date you
       * can ignore this property or the latter wins.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sValueFormat New value for property <code>valueFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueFormat(sValueFormat: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>valueState</code>.Visualizes the validation state of the
       * control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>None</code>.
       * @param sValueState New value for property <code>valueState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueState(sValueState: sap.ui.core.ValueState): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>valueStateText</code>.Defines the text that appears in the value
       * state message pop-up. If this is not specified, a default text is shown from the resource
       * bundle.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.26.0
       * @param sValueStateText New value for property <code>valueStateText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueStateText(sValueStateText: string): sap.m.DateTimeInput;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the control.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.DateTimeInput;

      /**
       * Unbinds property <code>value</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindValue(): sap.m.DateTimeInput;
    }
    /**
     * Represents a selectable item inside an IconTabBar.
     * @resource sap/m/IconTabFilter.js
    */
    export class IconTabFilter extends sap.ui.core.Item {


      /**
       * Constructor for a new IconTabFilter.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @since 1.15.0
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.IconTabFilter;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @since 1.15.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.IconTabFilter;


      /**
       * Gets content of aggregation <code>content</code>.The content displayed for this item (optional).If
       * this content is set, it is displayed instead of the general content inside the IconTabBar.
       * @since 1.15.0
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>count</code>.Represents the "count" text, which is displayed in
       * the tab filter.Default value is <code></code>.
       * @returns Value of property <code>count</code>
      */
      getCount(): string;

      /**
       * Gets current value of property <code>design</code>.Specifies whether the icon and the texts are
       * placed vertically or horizontally.Default value is <code>Vertical</code>.
       * @returns Value of property <code>design</code>
      */
      getDesign(): sap.m.IconTabFilterDesign;

      /**
       * Gets current value of property <code>icon</code>.Specifies the icon to be displayed for the tab
       * filter.Default value is <code></code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconColor</code>.Specifies the icon color.If an icon font is
       * used, the color can be chosen from the icon colors (sap.ui.core.IconColor).Possible semantic colors
       * are: Neutral, Positive, Critical, Negative.Instead of the semantic icon color the brand color can be
       * used, this is named Default.Semantic colors and brand colors should not be mixed up inside one
       * IconTabBar.Default value is <code>Default</code>.
       * @returns Value of property <code>iconColor</code>
      */
      getIconColor(): sap.ui.core.IconColor;

      /**
       * Gets current value of property <code>iconDensityAware</code>.If set to true, it sends one or more
       * requests,trying to get the density perfect version of the image if this version ofthe image doesn't
       * exist on the server. Default value is set to true.If bandwidth is key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Returns a metadata object for class sap.m.IconTabFilter.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showAll</code>.Enables special visualization for disabled
       * filter (show all items).Default value is <code>false</code>.
       * @returns Value of property <code>showAll</code>
      */
      getShowAll(): boolean;

      /**
       * Gets current value of property <code>visible</code>.Specifies whether the tab filter is
       * rendered.Default value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.15.0
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @since 1.15.0
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.IconTabFilter;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.15.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @since 1.15.0
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>count</code>.Represents the "count" text, which is displayed in
       * the tab filter.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code></code>.
       * @param sCount New value for property <code>count</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCount(sCount: string): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>design</code>.Specifies whether the icon and the texts are
       * placed vertically or horizontally.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Vertical</code>.
       * @param sDesign New value for property <code>design</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDesign(sDesign: sap.m.IconTabFilterDesign): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>icon</code>.Specifies the icon to be displayed for the tab
       * filter.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>iconColor</code>.Specifies the icon color.If an icon font is
       * used, the color can be chosen from the icon colors (sap.ui.core.IconColor).Possible semantic colors
       * are: Neutral, Positive, Critical, Negative.Instead of the semantic icon color the brand color can be
       * used, this is named Default.Semantic colors and brand colors should not be mixed up inside one
       * IconTabBar.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>Default</code>.
       * @param sIconColor New value for property <code>iconColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconColor(sIconColor: sap.ui.core.IconColor): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.If set to true, it sends one or more
       * requests,trying to get the density perfect version of the image if this version ofthe image doesn't
       * exist on the server. Default value is set to true.If bandwidth is key for the application, set this
       * value to false.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>showAll</code>.Enables special visualization for disabled filter
       * (show all items).When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bShowAll New value for property <code>showAll</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowAll(bShowAll: boolean): sap.m.IconTabFilter;

      /**
       * Sets a new value for property <code>visible</code>.Specifies whether the tab filter is rendered.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.IconTabFilter;
    }
    /**
     * QuickViewPage consists of  a page header, an object icon or image,an object name with short
     * description, and an object information divided in groups.The control uses the sap.m.SimpleForm
     * control to display information.
     * @resource sap/m/QuickViewPage.js
    */
    export class QuickViewPage extends sap.ui.core.Control {


      /**
       * Constructor for a new QuickViewPage.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some group to the aggregation <code>groups</code>.
       * @param oGroup the group to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addGroup(oGroup: sap.m.QuickViewGroup): sap.m.QuickViewPage;

      /**
       * Binds aggregation <code>groups</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindGroups(oBindingInfo: any): sap.m.QuickViewPage;

      /**
       * Destroys all the groups in the aggregation <code>groups</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyGroups(): sap.m.QuickViewPage;


      /**
       * Gets current value of property <code>crossAppNavCallback</code>.Specifies the application which
       * provides target and param configuration  for cross-application navigation from the 'page header'.
       * @returns Value of property <code>crossAppNavCallback</code>
      */
      getCrossAppNavCallback(): any;

      /**
       * Gets current value of property <code>description</code>.Specifies the text displayed under the
       * header of the content sectionDefault value is <code></code>.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets content of aggregation <code>groups</code>.QuickViewGroup consists of a title (optional) and an
       * entity of group elements.
      */
      getGroups(): sap.m.QuickViewGroup[];

      /**
       * Gets current value of property <code>header</code>.Specifies the text displayed in the header of the
       * control.Default value is <code></code>.
       * @returns Value of property <code>header</code>
      */
      getHeader(): string;

      /**
       * Gets current value of property <code>icon</code>.Specifies the URL of the icon displayed under the
       * header of the pageDefault value is <code></code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): string;

      /**
       * Returns a metadata object for class sap.m.QuickViewPage.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>pageId</code>.Page idDefault value is <code></code>.
       * @returns Value of property <code>pageId</code>
      */
      getPageId(): string;

      /**
       * Gets current value of property <code>title</code>.Specifies the text displayed in the header of the
       * content section of the control.Default value is <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleUrl</code>.Specifies the URL which opens when the title or
       * the thumbnail is clicked.Default value is <code></code>.
       * @returns Value of property <code>titleUrl</code>
      */
      getTitleUrl(): string;

      /**
       * Checks for the provided <code>sap.m.QuickViewGroup</code> in the aggregation <code>groups</code>.and
       * returns its index if found or -1 otherwise.
       * @param oGroup The group whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfGroup(oGroup: sap.m.QuickViewGroup): number;

      /**
       * Inserts a group into the aggregation <code>groups</code>.
       * @param oGroup the group to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the group should be inserted at; for             a
       * negative value of <code>iIndex</code>, the group is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the group is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertGroup(oGroup: sap.m.QuickViewGroup, iIndex: number): sap.m.QuickViewPage;

      /**
       * Removes all the controls from the aggregation <code>groups</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllGroups(): sap.m.QuickViewGroup[];

      /**
       * Removes a group from the aggregation <code>groups</code>.
       * @param vGroup The group to remove or its index or id
       * @returns The removed group or <code>null</code>
      */
      removeGroup(vGroup: number | string | sap.m.QuickViewGroup): sap.m.QuickViewGroup;

      /**
       * Sets a new value for property <code>crossAppNavCallback</code>.Specifies the application which
       * provides target and param configuration  for cross-application navigation from the 'page
       * header'.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param oCrossAppNavCallback New value for property <code>crossAppNavCallback</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCrossAppNavCallback(oCrossAppNavCallback: any): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>description</code>.Specifies the text displayed under the header
       * of the content sectionWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>header</code>.Specifies the text displayed in the header of the
       * control.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code></code>.
       * @param sHeader New value for property <code>header</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeader(sHeader: string): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>icon</code>.Specifies the URL of the icon displayed under the
       * header of the pageWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: string): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>pageId</code>.Page idWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sPageId New value for property <code>pageId</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPageId(sPageId: string): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>title</code>.Specifies the text displayed in the header of the
       * content section of the control.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.QuickViewPage;

      /**
       * Sets a new value for property <code>titleUrl</code>.Specifies the URL which opens when the title or
       * the thumbnail is clicked.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code></code>.
       * @param sTitleUrl New value for property <code>titleUrl</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleUrl(sTitleUrl: string): sap.m.QuickViewPage;

      /**
       * Unbinds aggregation <code>groups</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindGroups(): sap.m.QuickViewPage;
    }
    /**
     * A MessagePopover is a Popover containing a summarized list with messages.
     * @resource sap/m/MessagePopover.js
    */
    export class MessagePopover extends sap.ui.core.Control {


      /**
       * Constructor for a new MessagePopoverAccepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.MessagePopoverItem): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired after the popover is
       * closed
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired after the popover is
       * opened
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired before the popover is
       * closed
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired before the popover is
       * opened
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemSelect</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired when description is shown
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemSelect(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>listSelect</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired when one of the lists is
       * shown when (not) filtered  by type
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachListSelect(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>longtextLoaded</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired when the long text
       * description data from a remote URL is loaded
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLongtextLoaded(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>urlValidated</code> event of this
       * <code>sap.m.MessagePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.MessagePopover</code> itself.This event will be fired when a validation of a URL
       * from long text description is ready
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.MessagePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUrlValidated(oData: any, fnFunction: any, oListener?: any): sap.m.MessagePopover;

      /**
       * Closes the MessagePopover
       * @returns Reference to the 'this' for chaining purposes
      */
      close(): sap.m.MessagePopover;

      /**
       * Destroys the headerButton in the aggregation <code>headerButton</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderButton(): sap.m.MessagePopover;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemSelect</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemSelect(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>listSelect</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachListSelect(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>longtextLoaded</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLongtextLoaded(fnFunction: any, oListener: any): sap.m.MessagePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>urlValidated</code> event of this
       * <code>sap.m.MessagePopover</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUrlValidated(fnFunction: any, oListener: any): sap.m.MessagePopover;


      /**
       * Fires event <code>afterClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control
       * which opens the popover</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the
       * control which opens the popover</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control
       * which opens the popoverSee sap.ui.core.MessageType enum values for types</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control
       * which opens the popover</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>itemSelect</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>item</code> of type <code>sap.m.MessagePopoverItem</code>Refers to the
       * message popover item that is being presented</li><li><code>messageTypeFilter</code> of type
       * <code>sap.ui.core.MessageType</code>Refers to the type of messages being shownSee
       * sap.ui.core.MessageType values for types</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemSelect(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>listSelect</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>messageTypeFilter</code> of type <code>sap.ui.core.MessageType</code>This
       * parameter refers to the type of messages being shown.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireListSelect(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>longtextLoaded</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLongtextLoaded(mArguments: any): sap.m.MessagePopover;

      /**
       * Fires event <code>urlValidated</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUrlValidated(mArguments: any): sap.m.MessagePopover;

      /**
       * Gets current value of property <code>asyncDescriptionHandler</code>.Callback function for resolving
       * a promise after description has been asynchronously loaded inside this function
       * @returns Value of property <code>asyncDescriptionHandler</code>
      */
      getAsyncDescriptionHandler(): any;

      /**
       * Gets current value of property <code>asyncURLHandler</code>.Callback function for resolving a
       * promise after a link has been asynchronously validated inside this function
       * @returns Value of property <code>asyncURLHandler</code>
      */
      getAsyncURLHandler(): any;

      /**
       * Gets content of aggregation <code>headerButton</code>.A custom header button
      */
      getHeaderButton(): sap.m.Button;

      /**
       * Gets current value of property <code>initiallyExpanded</code>.Sets the initial state of the control
       * - expanded or collapsed. By default the control opens as expandedDefault value is <code>true</code>.
       * @returns Value of property <code>initiallyExpanded</code>
      */
      getInitiallyExpanded(): boolean;

      /**
       * Gets content of aggregation <code>items</code>.A list with message items
      */
      getItems(): sap.m.MessagePopoverItem[];

      /**
       * Returns a metadata object for class sap.m.MessagePopover.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>placement</code>.Determines the position, where the control
       * will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top,
       * sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.The default value is
       * sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not
       * cause any re-rendering and changing of the position. Changes will only be applied with the next
       * interaction.Default value is <code>Vertical</code>.
       * @returns Value of property <code>placement</code>
      */
      getPlacement(): sap.m.VerticalPlacementType;

      /**
       * Checks for the provided <code>sap.m.MessagePopoverItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.MessagePopoverItem): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.MessagePopoverItem, iIndex: number): sap.m.MessagePopover;

      /**
       * The method checks if the MessagePopover is open. It returns true when the MessagePopover is
       * currently open(this includes opening and closing animations), otherwise it returns false
       * @returns Whether the MessagePopover is open
      */
      isOpen(): boolean;

      /**
       * Opens the MessagePopover
       * @param oControl Control which opens the MessagePopover
       * @returns Reference to the 'this' for chaining purposes
      */
      openBy(oControl: sap.ui.core.Control): sap.m.MessagePopover;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.MessagePopoverItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.MessagePopoverItem): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>asyncDescriptionHandler</code>.Callback function for resolving a
       * promise after description has been asynchronously loaded inside this functionWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param oAsyncDescriptionHandler New value for property <code>asyncDescriptionHandler</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAsyncDescriptionHandler(oAsyncDescriptionHandler: any): sap.m.MessagePopover;

      /**
       * Sets a new value for property <code>asyncURLHandler</code>.Callback function for resolving a promise
       * after a link has been asynchronously validated inside this functionWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oAsyncURLHandler New value for property <code>asyncURLHandler</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAsyncURLHandler(oAsyncURLHandler: any): sap.m.MessagePopover;

      /**
       * Setter for default description and URL validation callbacks across all instances of MessagePopover
       * @param mDefaultHandlers An object setting default callbacks
      */
      setDefaultHandlers(mDefaultHandlers: any): void;

      /**
       * Sets the aggregated <code>headerButton</code>.
       * @param oHeaderButton The headerButton to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderButton(oHeaderButton: sap.m.Button): sap.m.MessagePopover;

      /**
       * Sets a new value for property <code>initiallyExpanded</code>.Sets the initial state of the control -
       * expanded or collapsed. By default the control opens as expandedWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bInitiallyExpanded New value for property <code>initiallyExpanded</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitiallyExpanded(bInitiallyExpanded: boolean): sap.m.MessagePopover;

      /**
       * This method toggles between open and closed state of the MessagePopover instance.oControl parameter
       * is mandatory in the same way as in 'openBy' method
       * @param oControl Control which opens the MessagePopover
       * @returns Reference to the 'this' for chaining purposes
      */
      toggle(oControl: sap.ui.core.Control): sap.m.MessagePopover;
    }
    /**
     * A draft indicator is {@link sap.m.Label}.
     * @resource sap/m/DraftIndicator.js
    */
    export abstract class DraftIndicator extends sap.ui.core.Control {


      /**
       * Constructor for a new DraftIndicator.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
      */
      constructor(sId: string);



      /**
       * Clears the indicator state
      */
      clearDraftState(): void;


      /**
       * Returns a metadata object for class sap.m.DraftIndicator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minDisplayTime</code>.Minimum time in milliseconds for showing
       * the draft indicatorDefault value is <code>1500</code>.
       * @returns Value of property <code>minDisplayTime</code>
      */
      getMinDisplayTime(): number;

      /**
       * Gets current value of property <code>state</code>.State of the indicator. Could be "Saving", "Saved"
       * and "Clear".Default value is <code>Clear</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.m.DraftIndicatorState;

      /**
       * Sets a new value for property <code>minDisplayTime</code>.Minimum time in milliseconds for showing
       * the draft indicatorWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>1500</code>.
       * @param iMinDisplayTime New value for property <code>minDisplayTime</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinDisplayTime(iMinDisplayTime: number): sap.m.DraftIndicator;

      /**
       * Sets the indicator in "Saved" state
      */
      showDraftSaved(): void;

      /**
       * Sets the indicator in "Saving..." state
      */
      showDraftSaving(): void;
    }
    /**
     * This is a date input control with a calendar and a time selector as date time picker.A date can be
     * entered using a calendar or time selector that opens in a popup. Alternatively a value can be
     * entered directly in the input field by typing it in.If a date is entered by typing it into the input
     * field, it must fit the used date format and locale. (See
     * <code>sap.ui.core.format.DateFormat</code>)There are two options to provide a date for the
     * <code>DateTimePicker</code>.You can put a date as a string to the property <code>value</code> or you
     * can put a JavaScript Date object to the property <code>dateValue</code>.Only one of the properties
     * should be used at one time, but they are synchronized internally.What property you should use
     * depends on the use case of the application:<ul><li>Use the <code>value</code> property if you want
     * to bind the <code>DateTimePicker</code> to a model using the
     * <code>sap.ui.model.type.DateTime</code>.</li><li>Use the <code>value</code> property if the date is
     * provided as a string from the back end or inside the application (e.g. as ABAP type DATS
     * field).</li><li>Use the <code>dateValue</code> property if the date is already provided as a
     * JavaScript Date object or you want to work with a JavaScript Date object.</li></ul>All formatting
     * and parsing of dates to and from strings is done using the {@link sap.ui.core.format.DateFormat}, so
     * please read the corresponding documentation if you need more information about this.Supported format
     * options are pattern-based on Unicode LDML Date Format notation. {@link
     * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}For example, if the
     * <code>valueFormat</code> is "yyyy-MM-dd-HH-mm-ss", <code>displayFormat</code> is "MMM d, y,
     * HH:mm:ss" and the used locale is English,a valid <code>value</code> string is "2015-07-30-10-30-15",
     * which leads to an output of "Jul 30, 2015, 10:30:15".If no <code>placeholder</code> is set to the
     * <code>DateTimePicker</code>, the used <code>displayFormat</code> is shown as a placeholder.If
     * another placeholder is needed, it must be set.Internally the <code>sap.ui.unified.Calendar</code> is
     * used, but it is only needed if the <code>DateTimePicker</code> is opened. This means that it is not
     * needed for the initial rendering.If the <code>sap.ui.unified</code> library is not loaded before the
     * <code>DateTimePicker</code> is opened, it will be loaded upon opening.This could lead to a waiting
     * time before a <code>DateTimePicker</code> is opened the first time. To prevent this, applications
     * using the <code>DateTimePicker</code> should also loadthe <code>sap.ui.unified</code> library.
     * @resource sap/m/DateTimePicker.js
    */
    export class DateTimePicker extends sap.m.DatePicker {


      /**
       * Constructor for a new DateTimePicker.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns a metadata object for class sap.m.DateTimePicker.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * Shows numeric values used for example in tiles colored according to their meaning and displays
     * deviations.
     * @resource sap/m/NumericContent.js
    */
    export class NumericContent extends sap.ui.core.Control {


      /**
       * Constructor for a new sap.m.GenericTile control.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.NumericContent</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.NumericContent</code> itself.The event is fired when the user chooses the
       * numeric content.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.NumericContent</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.NumericContent;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.NumericContent</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.NumericContent;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.NumericContent;

      /**
       * Gets current value of property <code>animateTextChange</code>.If set to true, the change of the
       * value will be animated.Default value is <code>true</code>.
       * @returns Value of property <code>animateTextChange</code>
      */
      getAnimateTextChange(): boolean;

      /**
       * Gets current value of property <code>formatterValue</code>.If set to true, the value parameter
       * contains a numeric value and scale. If set to false (default), the value parameter contains a
       * numeric value only.Default value is <code>false</code>.
       * @returns Value of property <code>formatterValue</code>
      */
      getFormatterValue(): boolean;

      /**
       * Gets current value of property <code>icon</code>.The icon to be displayed as a graphical element
       * within the control. This can be an image or an icon from the icon font.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDescription</code>.Description of an icon that is used in
       * the tooltip.
       * @returns Value of property <code>iconDescription</code>
      */
      getIconDescription(): string;

      /**
       * Gets current value of property <code>indicator</code>.The indicator arrow that shows value
       * deviation.Default value is <code>None</code>.
       * @returns Value of property <code>indicator</code>
      */
      getIndicator(): sap.m.DeviationIndicator;

      /**
       * Returns a metadata object for class sap.m.NumericContent.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>nullifyValue</code>.If set to true, the omitted value property
       * is set to 0.Default value is <code>true</code>.
       * @returns Value of property <code>nullifyValue</code>
      */
      getNullifyValue(): boolean;

      /**
       * Gets current value of property <code>scale</code>.The scaling prefix. Financial characters can be
       * used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix
       * contains more than three characters, only the first three characters are displayed.
       * @returns Value of property <code>scale</code>
      */
      getScale(): string;

      /**
       * Gets current value of property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.Default value is <code>Auto</code>.
       * @returns Value of property <code>size</code>
      */
      getSize(): sap.m.Size;

      /**
       * Gets current value of property <code>state</code>.Indicates the load status.Default value is
       * <code>Loaded</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.m.LoadState;

      /**
       * Gets current value of property <code>truncateValueTo</code>.The number of characters to display for
       * the value property.Default value is <code>4</code>.
       * @returns Value of property <code>truncateValueTo</code>
      */
      getTruncateValueTo(): number;

      /**
       * Gets current value of property <code>value</code>.The actual value.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueColor</code>.The semantic color of the value.Default value
       * is <code>Neutral</code>.
       * @returns Value of property <code>valueColor</code>
      */
      getValueColor(): sap.m.ValueColor;

      /**
       * Gets current value of property <code>width</code>.The width of the chart. If it is not set, the size
       * of the control is defined by the size property.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Gets current value of property <code>withMargin</code>.If the value is set to false, the content
       * will fit to the whole size of the control.Default value is <code>true</code>.
       * @returns Value of property <code>withMargin</code>
      */
      getWithMargin(): boolean;

      /**
       * Sets a new value for property <code>animateTextChange</code>.If set to true, the change of the value
       * will be animated.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>true</code>.
       * @param bAnimateTextChange New value for property <code>animateTextChange</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAnimateTextChange(bAnimateTextChange: boolean): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>formatterValue</code>.If set to true, the value parameter
       * contains a numeric value and scale. If set to false (default), the value parameter contains a
       * numeric value only.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bFormatterValue New value for property <code>formatterValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFormatterValue(bFormatterValue: boolean): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>iconDescription</code>.Description of an icon that is used in
       * the tooltip.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sIconDescription New value for property <code>iconDescription</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDescription(sIconDescription: string): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>indicator</code>.The indicator arrow that shows value
       * deviation.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>None</code>.
       * @param sIndicator New value for property <code>indicator</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIndicator(sIndicator: sap.m.DeviationIndicator): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>nullifyValue</code>.If set to true, the omitted value property
       * is set to 0.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bNullifyValue New value for property <code>nullifyValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNullifyValue(bNullifyValue: boolean): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>scale</code>.The scaling prefix. Financial characters can be
       * used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix
       * contains more than three characters, only the first three characters are displayed.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sScale New value for property <code>scale</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setScale(sScale: string): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>size</code>.Updates the size of the chart. If not set then the
       * default size is applied based on the device tile.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Auto</code>.
       * @param sSize New value for property <code>size</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSize(sSize: sap.m.Size): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>state</code>.Indicates the load status.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Loaded</code>.
       * @param sState New value for property <code>state</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setState(sState: sap.m.LoadState): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>truncateValueTo</code>.The number of characters to display for
       * the value property.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>4</code>.
       * @param iTruncateValueTo New value for property <code>truncateValueTo</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTruncateValueTo(iTruncateValueTo: number): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>value</code>.The actual value.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>valueColor</code>.The semantic color of the value.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Neutral</code>.
       * @param sValueColor New value for property <code>valueColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueColor(sValueColor: sap.m.ValueColor): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>width</code>.The width of the chart. If it is not set, the size
       * of the control is defined by the size property.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.NumericContent;

      /**
       * Sets a new value for property <code>withMargin</code>.If the value is set to false, the content will
       * fit to the whole size of the control.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bWithMargin New value for property <code>withMargin</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWithMargin(bWithMargin: boolean): sap.m.NumericContent;
    }
    /**
     * This control with a content aggregation can be used to customize standard list items that we don't
     * provide. List mode and ListItem type are applied to CustomListItems as well.<b>Note:</b> Even though
     * the content aggregation allows any control, complex responsive layout controls (e.g. <code>Table,
     * Form</code>) should not be aggregated as content.
     * @resource sap/m/CustomListItem.js
    */
    export class CustomListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new CustomListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.CustomListItem;

      /**
       * Binds aggregation <code>content</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindContent(oBindingInfo: any): sap.m.CustomListItem;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.CustomListItem;


      /**
       * Gets content of aggregation <code>content</code>.The content of this list item
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Returns a metadata object for class sap.m.CustomListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.CustomListItem;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Unbinds aggregation <code>content</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindContent(): sap.m.CustomListItem;
    }
    /**
     * Type for <code>filterItems</code> aggregation in P13nFilterPanel control.
     * @resource sap/m/P13nFilterItem.js
    */
    export class P13nFilterItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nFilterItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>columnKey</code>.key of the column
       * @since 1.26.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Gets current value of property <code>exclude</code>.defines if the filter is an include or exclude
       * filter itemDefault value is <code>false</code>.
       * @since 1.26.0
       * @returns Value of property <code>exclude</code>
      */
      getExclude(): boolean;

      /**
       * Returns a metadata object for class sap.m.P13nFilterItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>operation</code>.sap.m.P13nConditionOperation
       * @since 1.26.0
       * @returns Value of property <code>operation</code>
      */
      getOperation(): string;

      /**
       * Gets current value of property <code>value1</code>.value of the filter
       * @since 1.26.0
       * @returns Value of property <code>value1</code>
      */
      getValue1(): string;

      /**
       * Gets current value of property <code>value2</code>.to value of the between filter
       * @since 1.26.0
       * @returns Value of property <code>value2</code>
      */
      getValue2(): string;

      /**
       * Sets a new value for property <code>columnKey</code>.key of the columnWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nFilterItem;

      /**
       * Sets a new value for property <code>exclude</code>.defines if the filter is an include or exclude
       * filter itemWhen called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.26.0
       * @param bExclude New value for property <code>exclude</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setExclude(bExclude: boolean): sap.m.P13nFilterItem;

      /**
       * Sets a new value for property <code>operation</code>.sap.m.P13nConditionOperationWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.26.0
       * @param sOperation New value for property <code>operation</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOperation(sOperation: string): sap.m.P13nFilterItem;

      /**
       * Sets a new value for property <code>value1</code>.value of the filterWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.26.0
       * @param sValue1 New value for property <code>value1</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue1(sValue1: string): sap.m.P13nFilterItem;

      /**
       * Sets a new value for property <code>value2</code>.to value of the between filterWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.26.0
       * @param sValue2 New value for property <code>value2</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue2(sValue2: string): sap.m.P13nFilterItem;
    }
    /**
     * The P13nGroupPanel control is used to define group-specific settings for table personalization.
     * @resource sap/m/P13nGroupPanel.js
    */
    export class P13nGroupPanel extends sap.m.P13nPanel {


      /**
       * Constructor for a new P13nGroupPanel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some groupItem to the aggregation <code>groupItems</code>.
       * @since 1.26
       * @param oGroupItem the groupItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addGroupItem(oGroupItem: sap.m.P13nGroupItem): sap.m.P13nGroupPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>addGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nGroupPanel</code> itself.Event raised if a <code>GroupItem</code> has been
       * added.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nGroupPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAddGroupItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nGroupPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>removeGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nGroupPanel</code> itself.Removes a group item.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nGroupPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachRemoveGroupItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nGroupPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>updateGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nGroupPanel</code> itself.Updates a group item.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nGroupPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUpdateGroupItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nGroupPanel;

      /**
       * Binds aggregation <code>groupItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindGroupItems(oBindingInfo: any): sap.m.P13nGroupPanel;

      /**
       * Destroys all the groupItems in the aggregation <code>groupItems</code>.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyGroupItems(): sap.m.P13nGroupPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>addGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAddGroupItem(fnFunction: any, oListener: any): sap.m.P13nGroupPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>removeGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachRemoveGroupItem(fnFunction: any, oListener: any): sap.m.P13nGroupPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>updateGroupItem</code> event of this
       * <code>sap.m.P13nGroupPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUpdateGroupItem(fnFunction: any, oListener: any): sap.m.P13nGroupPanel;


      /**
       * Fires event <code>addGroupItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAddGroupItem(mArguments: any): sap.m.P13nGroupPanel;

      /**
       * Fires event <code>removeGroupItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireRemoveGroupItem(mArguments: any): sap.m.P13nGroupPanel;

      /**
       * Fires event <code>updateGroupItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUpdateGroupItem(mArguments: any): sap.m.P13nGroupPanel;

      /**
       * Gets current value of property <code>containerQuery</code>.Defines if <code>mediaQuery</code> or
       * <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>is used in a
       * dialog, the property must be set to true.Default value is <code>false</code>.
       * @since 1.26
       * @returns Value of property <code>containerQuery</code>
      */
      getContainerQuery(): boolean;

      /**
       * Gets content of aggregation <code>groupItems</code>.Defined group items.
       * @since 1.26
      */
      getGroupItems(): sap.m.P13nGroupItem[];

      /**
       * Gets current value of property <code>layoutMode</code>.Can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.
       * @since 1.26
       * @returns Value of property <code>layoutMode</code>
      */
      getLayoutMode(): string;

      /**
       * Gets current value of property <code>maxGroups</code>.Defines the maximum number of groups.Default
       * value is <code>-1</code>.
       * @since 1.26
       * @returns Value of property <code>maxGroups</code>
      */
      getMaxGroups(): string;

      /**
       * Returns a metadata object for class sap.m.P13nGroupPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.m.P13nGroupItem</code> in the aggregation
       * <code>groupItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.26
       * @param oGroupItem The groupItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfGroupItem(oGroupItem: sap.m.P13nGroupItem): number;

      /**
       * Inserts a groupItem into the aggregation <code>groupItems</code>.
       * @since 1.26
       * @param oGroupItem the groupItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the groupItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the groupItem is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertGroupItem(oGroupItem: sap.m.P13nGroupItem, iIndex: number): sap.m.P13nGroupPanel;

      /**
       * Removes all the controls from the aggregation <code>groupItems</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.26
       * @returns An array of the removed elements (might be empty)
      */
      removeAllGroupItems(): sap.m.P13nGroupItem[];

      /**
       * Removes a groupItem from the aggregation <code>groupItems</code>.
       * @since 1.26
       * @param vGroupItem The groupItem to remove or its index or id
       * @returns The removed groupItem or <code>null</code>
      */
      removeGroupItem(vGroupItem: number | string | sap.m.P13nGroupItem): sap.m.P13nGroupItem;

      /**
       * Removes all invalid group conditions.
       * @since 1.28
      */
      removeInvalidConditions(): void;

      /**
       * Removes all errors/warning states from of all group conditions.
       * @since 1.28
      */
      removeValidationErrors(): void;

      /**
       * Sets a new value for property <code>containerQuery</code>.Defines if <code>mediaQuery</code> or
       * <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>is used in a
       * dialog, the property must be set to true.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.26
       * @param bContainerQuery New value for property <code>containerQuery</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContainerQuery(bContainerQuery: boolean): sap.m.P13nGroupPanel;

      /**
       * Sets a new value for property <code>layoutMode</code>.Can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.26
       * @param sLayoutMode New value for property <code>layoutMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLayoutMode(sLayoutMode: string): sap.m.P13nGroupPanel;

      /**
       * Sets a new value for property <code>maxGroups</code>.Defines the maximum number of groups.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>-1</code>.
       * @since 1.26
       * @param sMaxGroups New value for property <code>maxGroups</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxGroups(sMaxGroups: string): sap.m.P13nGroupPanel;

      /**
       * Setter for the supported operations array.
       * @since 1.26
       * @param array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
      */
      setOperations(array: any[]): void;

      /**
       * Unbinds aggregation <code>groupItems</code> from model data.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindGroupItems(): sap.m.P13nGroupPanel;

      /**
       * Checks if the entered or modified conditions are correct, marks invalid fields yellow (Warning) and
       * opens a popup message dialog to let theuser know that some values are not correct or missing.
       * @since 1.26
      */
      validateConditions(): void;
    }
    /**
     * <code>sap.m.ColumnListItem</code> can be used with the <code>cells</code> aggregation to create rows
     * for the <code>sap.m.Table</code> control.The <code>columns</code> aggregation of the
     * <code>sap.m.Table</code> should match with the cells aggregation.<b>Note:</b> This control should
     * only be used within the <code>sap.m.Table</code> control.The inherited <code>counter</code> property
     * of <code>sap.m.ListItemBase</code> is not supported.
     * @resource sap/m/ColumnListItem.js
    */
    export class ColumnListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new ColumnListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Returns pop-in DOMRef as a jQuery Object
       * @since 1.26
      */
      $Popin(): void;

      /**
       * Adds some cell to the aggregation <code>cells</code>.
       * @param oCell the cell to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addCell(oCell: sap.ui.core.Control): sap.m.ColumnListItem;

      /**
       * Binds aggregation <code>cells</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindCells(oBindingInfo: any): sap.m.ColumnListItem;

      /**
       * Destroys all the cells in the aggregation <code>cells</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCells(): sap.m.ColumnListItem;


      /**
       * Gets content of aggregation <code>cells</code>.Every <code>control</code> inside the
       * <code>cells</code> aggregation defines one cell of the row.<b>Note:</b> The order of the
       * <code>cells</code> aggregation must match the order of the <code>columns</code> aggregation of
       * <code>sap.m.Table</code>.
      */
      getCells(): sap.ui.core.Control[];

      /**
       * Returns a metadata object for class sap.m.ColumnListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the pop-in element.
       * @since 1.30.9
      */
      getPopin(): void;

      /**
       * Returns the tabbable DOM elements as a jQuery collectionWhen popin is available this separated dom
       * should also be included
       * @since 1.26
       * @returns jQuery object
      */
      getTabbables(): typeof jQuery;

      /**
       * Gets current value of property <code>vAlign</code>.Sets the vertical alignment of all the cells
       * within the table row (including selection and navigation).<b>Note:</b> <code>vAlign</code> property
       * of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are
       * set.Default value is <code>Inherit</code>.
       * @since 1.20
       * @returns Value of property <code>vAlign</code>
      */
      getVAlign(): sap.ui.core.VerticalAlign;

      /**
       * Determines whether control has pop-in or not.
      */
      hasPopin(): void;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>cells</code>.and
       * returns its index if found or -1 otherwise.
       * @param oCell The cell whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfCell(oCell: sap.ui.core.Control): number;

      /**
       * Inserts a cell into the aggregation <code>cells</code>.
       * @param oCell the cell to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the cell should be inserted at; for             a
       * negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the cell is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertCell(oCell: sap.ui.core.Control, iIndex: number): sap.m.ColumnListItem;

      /**
       * Removes all the controls from the aggregation <code>cells</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllCells(): sap.ui.core.Control[];

      /**
       * Removes a cell from the aggregation <code>cells</code>.
       * @param vCell The cell to remove or its index or id
       * @returns The removed cell or <code>null</code>
      */
      removeCell(vCell: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Pemove pop-in from DOM
      */
      removePopin(): void;

      /**
       * Sets a new value for property <code>vAlign</code>.Sets the vertical alignment of all the cells
       * within the table row (including selection and navigation).<b>Note:</b> <code>vAlign</code> property
       * of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Inherit</code>.
       * @since 1.20
       * @param sVAlign New value for property <code>vAlign</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVAlign(sVAlign: sap.ui.core.VerticalAlign): sap.m.ColumnListItem;

      /**
       * Unbinds aggregation <code>cells</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindCells(): sap.m.ColumnListItem;
    }
    /**
     * Display suggestion list items.
     * @resource sap/m/SuggestionItem.js
    */
    export class SuggestionItem extends sap.ui.core.Control {


      /**
       * Constructor for a new SuggestionItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>description</code>.Additional text of type string, optionally
       * to be displayed along with this item.Default value is <code></code>.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>icon</code>.The icon belonging to this list item instance.This
       * can be an URI to an image or an icon font URI.Default value is <code></code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): string;

      /**
       * Returns a metadata object for class sap.m.SuggestionItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Return suggestion text. By default, it is the value of the <code>text</code> property.Subclasses may
       * override this function.
       * @returns suggestion text.
      */
      getSuggestionText(): string;

      /**
       * Produces the HTML of the suggestion item and writes it to render-output-buffer.Subclasses may
       * override this function.
       * @param oRenderManager The <code>RenderManager</code>
       * @param oItem The item which should be rendered
       * @param sSearch The search text that should be emphasized
       * @param bSelected The item is selected
      */
      render(oRenderManager: sap.ui.core.RenderManager, oItem: sap.m.SuggestionItem, sSearch: string, bSelected: boolean): void;

      /**
       * Sets a new value for property <code>description</code>.Additional text of type string, optionally to
       * be displayed along with this item.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.SuggestionItem;

      /**
       * Sets a new value for property <code>icon</code>.The icon belonging to this list item instance.This
       * can be an URI to an image or an icon font URI.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: string): sap.m.SuggestionItem;
    }
    /**
     * ObjectListItem is a display control that provides summary information about an object as a list
     * item. The ObjectListItem title is the key identifier of the object. Additional text and icons can be
     * used to further distinguish it from other objects. Attributes and statuses can be used to provide
     * additional meaning about the object to the user.
     * @resource sap/m/ObjectListItem.js
    */
    export class ObjectListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new ObjectListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some attribute to the aggregation <code>attributes</code>.
       * @param oAttribute the attribute to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.ObjectListItem;

      /**
       * Destroys all the attributes in the aggregation <code>attributes</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAttributes(): sap.m.ObjectListItem;

      /**
       * Destroys the firstStatus in the aggregation <code>firstStatus</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFirstStatus(): sap.m.ObjectListItem;

      /**
       * Destroys the secondStatus in the aggregation <code>secondStatus</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySecondStatus(): sap.m.ObjectListItem;


      /**
       * Gets current value of property <code>activeIcon</code>.Icon displayed when the ObjectListItem is
       * active.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Gets content of aggregation <code>attributes</code>.List of attributes displayed below the title to
       * the left of the status fields.
      */
      getAttributes(): sap.m.ObjectAttribute[];

      /**
       * Gets content of aggregation <code>firstStatus</code>.First status text field displayed on the right
       * side of the attributes.
      */
      getFirstStatus(): sap.m.ObjectStatus;

      /**
       * Gets current value of property <code>icon</code>.ObjectListItem icon displayed to the left of the
       * title.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, this is set to true but
       * then one or more requests are sent trying to get the density perfect version of image (in case this
       * version of image dоesn't exist on the server).If bandwidth is key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>intro</code>.Defines the introductory text for the
       * ObjectListItem.
       * @returns Value of property <code>intro</code>
      */
      getIntro(): string;

      /**
       * Gets current value of property <code>introTextDirection</code>.Determines the text direction of the
       * item intro.Available options for the intro direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item intro inherits the text direction from its parent.Default value
       * is <code>Inherit</code>.
       * @returns Value of property <code>introTextDirection</code>
      */
      getIntroTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>markFavorite</code>.Sets the favorite state for the
       * ObjectListItem.
       * @since 1.16.0
       * @returns Value of property <code>markFavorite</code>
      */
      getMarkFavorite(): boolean;

      /**
       * Gets current value of property <code>markFlagged</code>.Sets the flagged state for the
       * ObjectListItem.
       * @since 1.16.0
       * @returns Value of property <code>markFlagged</code>
      */
      getMarkFlagged(): boolean;

      /**
       * Gets current value of property <code>markLocked</code>.Sets the locked state of the
       * ObjectListItem.Default value is <code>false</code>.
       * @since 1.28
       * @returns Value of property <code>markLocked</code>
      */
      getMarkLocked(): boolean;

      /**
       * Returns a metadata object for class sap.m.ObjectListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>number</code>.Defines the ObjectListItem number.
       * @returns Value of property <code>number</code>
      */
      getNumber(): string;

      /**
       * Gets current value of property <code>numberState</code>.Defines the ObjectListItem number and
       * numberUnit value state.Default value is <code>None</code>.
       * @since 1.16.0
       * @returns Value of property <code>numberState</code>
      */
      getNumberState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>numberTextDirection</code>.Determines the text direction of the
       * item number.Available options for the number direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item number inherits the text direction from its parent.Default value
       * is <code>Inherit</code>.
       * @returns Value of property <code>numberTextDirection</code>
      */
      getNumberTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>numberUnit</code>.Defines the number units qualifier of the
       * ObjectListItem.
       * @returns Value of property <code>numberUnit</code>
      */
      getNumberUnit(): string;

      /**
       * Gets content of aggregation <code>secondStatus</code>.Second status text field displayed on the
       * right side of the attributes.
      */
      getSecondStatus(): sap.m.ObjectStatus;

      /**
       * Gets current value of property <code>showMarkers</code>.If set to true, the ObjectListItem can be
       * marked with icons such as favorite and flag.
       * @since 1.16.0
       * @returns Value of property <code>showMarkers</code>
      */
      getShowMarkers(): boolean;

      /**
       * Gets current value of property <code>title</code>.Defines the ObjectListItem title.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleTextDirection</code>.Determines the text direction of the
       * item title.Available options for the title direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item title inherits the text direction from its parent.Default value
       * is <code>Inherit</code>.
       * @returns Value of property <code>titleTextDirection</code>
      */
      getTitleTextDirection(): sap.ui.core.TextDirection;

      /**
       * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation
       * <code>attributes</code>.and returns its index if found or -1 otherwise.
       * @param oAttribute The attribute whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;

      /**
       * Inserts a attribute into the aggregation <code>attributes</code>.
       * @param oAttribute the attribute to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for             a
       * negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the attribute is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.ObjectListItem;

      /**
       * Removes all the controls from the aggregation <code>attributes</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAttributes(): sap.m.ObjectAttribute[];

      /**
       * Removes a attribute from the aggregation <code>attributes</code>.
       * @param vAttribute The attribute to remove or its index or id
       * @returns The removed attribute or <code>null</code>
      */
      removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;

      /**
       * Sets a new value for property <code>activeIcon</code>.Icon displayed when the ObjectListItem is
       * active.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.ObjectListItem;

      /**
       * Sets the aggregated <code>firstStatus</code>.
       * @param oFirstStatus The firstStatus to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFirstStatus(oFirstStatus: sap.m.ObjectStatus): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>icon</code>.ObjectListItem icon displayed to the left of the
       * title.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, this is set to true but then
       * one or more requests are sent trying to get the density perfect version of image (in case this
       * version of image dоesn't exist on the server).If bandwidth is key for the application, set this
       * value to false.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>intro</code>.Defines the introductory text for the
       * ObjectListItem.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sIntro New value for property <code>intro</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntro(sIntro: string): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>introTextDirection</code>.Determines the text direction of the
       * item intro.Available options for the intro direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item intro inherits the text direction from its parent.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sIntroTextDirection New value for property <code>introTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>markFavorite</code>.Sets the favorite state for the
       * ObjectListItem.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.16.0
       * @param bMarkFavorite New value for property <code>markFavorite</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMarkFavorite(bMarkFavorite: boolean): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>markFlagged</code>.Sets the flagged state for the
       * ObjectListItem.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @since 1.16.0
       * @param bMarkFlagged New value for property <code>markFlagged</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMarkFlagged(bMarkFlagged: boolean): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>markLocked</code>.Sets the locked state of the
       * ObjectListItem.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>false</code>.
       * @since 1.28
       * @param bMarkLocked New value for property <code>markLocked</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMarkLocked(bMarkLocked: boolean): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>number</code>.Defines the ObjectListItem number.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sNumber New value for property <code>number</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumber(sNumber: string): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>numberState</code>.Defines the ObjectListItem number and
       * numberUnit value state.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>None</code>.
       * @since 1.16.0
       * @param sNumberState New value for property <code>numberState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberState(sNumberState: sap.ui.core.ValueState): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>numberTextDirection</code>.Determines the text direction of the
       * item number.Available options for the number direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item number inherits the text direction from its parent.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sNumberTextDirection New value for property <code>numberTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>numberUnit</code>.Defines the number units qualifier of the
       * ObjectListItem.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sNumberUnit New value for property <code>numberUnit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberUnit(sNumberUnit: string): sap.m.ObjectListItem;

      /**
       * Sets the aggregated <code>secondStatus</code>.
       * @param oSecondStatus The secondStatus to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSecondStatus(oSecondStatus: sap.m.ObjectStatus): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>showMarkers</code>.If set to true, the ObjectListItem can be
       * marked with icons such as favorite and flag.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.16.0
       * @param bShowMarkers New value for property <code>showMarkers</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowMarkers(bShowMarkers: boolean): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>title</code>.Defines the ObjectListItem title.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ObjectListItem;

      /**
       * Sets a new value for property <code>titleTextDirection</code>.Determines the text direction of the
       * item title.Available options for the title direction are LTR (left-to-right) and RTL
       * (right-to-left).By default the item title inherits the text direction from its parent.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;
    }
    /**
     * The <code>sap.m.ActionListItem</code> can be used like a <code>button</code> to fire actions when
     * pressed.<b>Note:</b> The inherited <code>selected</code> property of the
     * <code>sap.m.ListItemBase</code> is not supported.
     * @resource sap/m/ActionListItem.js
    */
    export class ActionListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new ActionListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.ActionListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Determines item specific modeActionListItems are not selectable because they are command controls
       * (like Button or Link) so triggering the associated command, rather than selection isappropriate to
       * happen upon user action on these items. By overwriting isSelectable (inherited from ListItemBase) we
       * exclude the item from processingspecific to selectable list-items.
      */
      getMode(): void;

      /**
       * Gets current value of property <code>text</code>.Defines the text that appears in the control.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Sets a new value for property <code>text</code>.Defines the text that appears in the control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.ActionListItem;
    }
    /**
     * QuickViewGroup consists of a title (optional) and an entity of group elements.
     * @resource sap/m/QuickViewGroup.js
    */
    export class QuickViewGroup extends sap.ui.core.Element {


      /**
       * Constructor for a new QuickViewGroup.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some element to the aggregation <code>elements</code>.
       * @param oElement the element to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addElement(oElement: sap.m.QuickViewGroupElement): sap.m.QuickViewGroup;

      /**
       * Binds aggregation <code>elements</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindElements(oBindingInfo: any): sap.m.QuickViewGroup;

      /**
       * Destroys all the elements in the aggregation <code>elements</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyElements(): sap.m.QuickViewGroup;


      /**
       * Gets content of aggregation <code>elements</code>.A combination of one label and another control
       * (Link or Text) associated to this label.
      */
      getElements(): sap.m.QuickViewGroupElement[];

      /**
       * Gets current value of property <code>heading</code>.The title of the groupDefault value is
       * <code></code>.
       * @returns Value of property <code>heading</code>
      */
      getHeading(): string;

      /**
       * Returns a metadata object for class sap.m.QuickViewGroup.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>visible</code>.Determines whether the group is visible on the
       * screen.Default value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Checks for the provided <code>sap.m.QuickViewGroupElement</code> in the aggregation
       * <code>elements</code>.and returns its index if found or -1 otherwise.
       * @param oElement The element whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfElement(oElement: sap.m.QuickViewGroupElement): number;

      /**
       * Inserts a element into the aggregation <code>elements</code>.
       * @param oElement the element to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the element should be inserted at; for             a
       * negative value of <code>iIndex</code>, the element is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the element is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertElement(oElement: sap.m.QuickViewGroupElement, iIndex: number): sap.m.QuickViewGroup;

      /**
       * Removes all the controls from the aggregation <code>elements</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllElements(): sap.m.QuickViewGroupElement[];

      /**
       * Removes a element from the aggregation <code>elements</code>.
       * @param vElement The element to remove or its index or id
       * @returns The removed element or <code>null</code>
      */
      removeElement(vElement: number | string | sap.m.QuickViewGroupElement): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>heading</code>.The title of the groupWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sHeading New value for property <code>heading</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeading(sHeading: string): sap.m.QuickViewGroup;

      /**
       * Sets a new value for property <code>visible</code>.Determines whether the group is visible on the
       * screen.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.QuickViewGroup;

      /**
       * Unbinds aggregation <code>elements</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindElements(): sap.m.QuickViewGroup;
    }
    /**
     * SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on
     * phone.The display of the master NavContainer depends on the portrait/landscape mode of the device
     * and the mode of SplitContainer.NOTE: This control must be rendered as a full screen control in order
     * to make the show/hide master area work properly.
     * @resource sap/m/SplitContainer.js
    */
    export class SplitContainer extends sap.ui.core.Control {


      /**
       * Constructor for a new SplitContainer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some detailPage to the aggregation <code>detailPages</code>.
       * @param oDetailPage the detailPage to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addDetailPage(oDetailPage: sap.ui.core.Control): sap.m.SplitContainer;

      /**
       * Adds some masterPage to the aggregation <code>masterPages</code>.
       * @param oMasterPage the masterPage to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addMasterPage(oMasterPage: sap.ui.core.Control): sap.m.SplitContainer;

      /**
       * Adds a content entity either to master area or detail area depending on the master parameter.The
       * method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App.
       * So that the same code line can be reused.
       * @since 1.11.1
       * @param oPage The content entities between which this SplitContainer navigates in either master area
       * or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View,
       * sap.m.Carousel or any other control with fullscreen/page semantics.
       * @param bMaster States if the page should be added to the master area. If it's set to false, the page
       * is added to detail area.
      */
      addPage(oPage: sap.ui.core.Control, bMaster: boolean): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterDetailNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when navigation between two pages in detail
       * area has completed.NOTE: In case of animated transitions this event is fired with some delay after
       * the "navigate" event.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterDetailNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterMasterClose</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when the master area is fully closed after
       * the animation (if any).
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterMasterClose(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterMasterNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when navigation between two pages in master
       * area has completed.NOTE: In case of animated transitions this event is fired with some delay after
       * the navigate event.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterMasterNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterMasterOpen</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when the master area is fully opened after
       * animation if any.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterMasterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeMasterClose</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires before the master area is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeMasterClose(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeMasterOpen</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires before the master area is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeMasterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>detailNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when navigation between two pages in detail
       * area has been triggered.The transition (if any) to the new page has not started yet.NOTE: This event
       * can be aborted by the application with preventDefault(), which means that there will be no
       * navigation.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDetailNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>masterButton</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when a Master Button needs to be shown or
       * hidden. This is necessary for custom headers when the SplitContainer control does not handle the
       * placement of the master button automatically.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachMasterButton(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>masterNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SplitContainer</code> itself.Fires when navigation between two pages in master
       * area has been triggered. The transition (if any) to the new page has not started yet.This event can
       * be aborted by the application with preventDefault(), which means that there will be no navigation.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SplitContainer</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachMasterNavigate(oData: any, fnFunction: any, oListener?: any): sap.m.SplitContainer;

      /**
       * Navigates back to the previous detail page found in the history.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the back navigation. The event on the target page will contain this data object
       * as backData property. (The original data from the to() navigation will still be available as data
       * property.)        In scenarios where the entity triggering the navigation can or should not directly
       * initialize the target page, it can fill this object and the target page itself (or a listener on it)
       * can take over the initialization, using the given data.        For back navigation this can be used,
       * for example, when returning from a detail page to transfer any settings done there.        When the
       * transitionParameters object is used, this data object must also be given (either as object or as
       * null) in order to have a proper parameter order.
       * @param oTransitionParameter This optional object can give additional information to the transition
       * function, like the DOM element, which triggered the transition or the desired transition duration.  
       *      The animation type can NOT be selected here - it is always the inverse of the "to" navigation. 
       *       In order to use the transitionParameters property, the data property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backDetail(oBackData: any, oTransitionParameter: any): sap.m.SplitContainer;

      /**
       * Navigates back to the previous master page which is found in the history.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the back navigation.        The event on the target page will contain this data
       * object as backData property (the original data from the to() navigation will still be available as
       * data property).        In scenarios where the entity triggering the navigation can or should not
       * directly initialize the target page, it can fill this object and the target page itself (or a
       * listener on it) can take over the initialization, using the given data.        For back navigation
       * this can be used, for example, when returning from a detail page to transfer any settings done
       * there.        When the transitionParameters object is used, this data object must also be given
       * (either as object or as null) in order to have a proper parameter order.
       * @param oTransitionParameter This optional object can give additional information to the transition
       * function, like the DOM element, which triggered the transition or the desired transition duration.  
       *      The animation type can NOT be selected here - it is always the inverse of the "to" navigation. 
       *       In order to use the transitionParameters property, the data property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backMaster(oBackData: any, oTransitionParameter: any): sap.m.SplitContainer;

      /**
       * Navigates back to the nearest previous page in the SplitContainer history with the given ID (if
       * there is no such page among the previous pages, nothing happens).The transition effect, which had
       * been used to get to the current page is inverted and used for this navigation.Calling this
       * navigation method, first triggers the (cancelable) navigate event on the SplitContainer,then the
       * beforeHide pseudo event on the source page, beforeFirstShow (if applicable),and beforeShow on the
       * target page. Later, after the transition has completed,the afterShow pseudo event is triggered on
       * the target page and afterHide - on the page, which has been left.The given backData object is
       * available in the beforeFirstShow, beforeShow, and afterShow event objects as dataproperty. The
       * original "data" object from the "to" navigation is also available in these event objects.
       * @since 1.10.0
       * @param sPageId The screen to which is being navigated to. The ID or the control itself can be given.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the back navigation.        The event on the target page will contain this data
       * object as backData property. (the original data from the to() navigation will still be available as
       * data property).        In scenarios, where the entity triggering the navigation can't or shouldn't
       * directly initialize the target page, it can fill this object and the target page itself (or a
       * listener on it) can take over the initialization, using the given data.        For back navigation
       * this can be used, for example, when returning from a detail page to transfer any settings done
       * there.        When the transitionParameters object is used, this data object must also be given
       * (either as object or as null) in order to have a proper parameter order.
       * @param oTransitionParameters This optional object can give additional information to the transition
       * function, like the DOM element, which triggered the transition or the desired transition duration.  
       *      The animation type can NOT be selected here - it is always the inverse of the "to" navigation. 
       *       In order to use the transitionParameters property, the data property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backToPage(sPageId: string, oBackData: any, oTransitionParameters: any): sap.m.SplitContainer;

      /**
       * Navigates back to the initial/top level of Detail (this is the element aggregated as initialPage, or
       * the first added element).NOTE: If already on the initial page, nothing happens.The transition effect
       * which had been used to get to the current page is inverted and used for this navigation.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the back navigation. The event on the target page will contain this data object
       * as backData property (the original data from the to() navigation will still be available as data
       * property).        In scenarios where the entity triggering the navigation can or should not directly
       * initialize the target page, it can fill this object and the target page itself (or a listener on it)
       * can take over the initialization, using the given data.        For back navigation this can be used,
       * for example, when returning from a detail page to transfer any settings done there.        When the
       * transitionParameters object is used, this data object must also be given (either as object or as
       * null) in order to have a proper parameter order.
       * @param oTransitionParameter This optional object can give additional information to the transition
       * function, like the DOM element, which triggered the transition or the desired transition duration.  
       *      The animation type can NOT be selected here - it is always the inverse of the "to" navigation. 
       *       In order to use the transitionParameters property, the data property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backToTopDetail(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;

      /**
       * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage",
       * or the first added element).NOTE: If already on the initial page, nothing happens.The transition
       * effect which had been used to get to the current page is inverted and used for this navigation.
       * @param oBackData This optional object can carry any payload data which should be made available to
       * the target page of the back navigation. The event on the target page will contain this data object
       * as "backData" property. (The original data from the "to()" navigation will still be available as
       * "data" property.)        In scenarios where the entity triggering the navigation can or should not
       * directly initialize the target page, it can fill this object and the target page itself (or a
       * listener on it) can take over the initialization, using the given data.        For back navigation
       * this can be used e.g. when returning from a detail page to transfer any settings done there.       
       * When the "transitionParameters" object is used, this "data" object must also be given (either as
       * object or as null) in order to have a proper parameter order.
       * @param oTransitionParameter This optional object can give additional information to the transition
       * function, like the DOM element which triggered the transition or the desired transition duration.   
       *     The animation type can NOT be selected here - it is always the inverse of the "to" navigation.  
       *      In order to use the transitionParameters property, the data property must be used (at least
       * "null" must be given) for a proper parameter order.        NOTE: it depends on the transition
       * function how the object should be structured and which parameters are actually used to influence the
       * transition.
      */
      backToTopMaster(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;

      /**
       * Destroys all the detailPages in the aggregation <code>detailPages</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyDetailPages(): sap.m.SplitContainer;

      /**
       * Destroys all the masterPages in the aggregation <code>masterPages</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyMasterPages(): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterDetailNavigate</code> event of
       * this <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterDetailNavigate(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterMasterClose</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterMasterClose(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterMasterNavigate</code> event of
       * this <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterMasterNavigate(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterMasterOpen</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterMasterOpen(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeMasterClose</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeMasterClose(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeMasterOpen</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeMasterOpen(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>detailNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDetailNavigate(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>masterButton</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachMasterButton(fnFunction: any, oListener: any): sap.m.SplitContainer;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>masterNavigate</code> event of this
       * <code>sap.m.SplitContainer</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachMasterNavigate(fnFunction: any, oListener: any): sap.m.SplitContainer;


      /**
       * Fires event <code>afterDetailNavigate</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which had
       * been displayed before navigation.</li><li><code>fromId</code> of type <code>string</code>The ID of
       * the page, which had been displayed before navigation.</li><li><code>to</code> of type
       * <code>sap.ui.core.Control</code>The page, which is now displayed after
       * navigation.</li><li><code>toId</code> of type <code>string</code>The ID of the page, which is now
       * displayed after navigation.</li><li><code>firstTime</code> of type <code>boolean</code>Determines
       * whether the "to" page (more precisely: a control with the ID of the page,which has been navigated
       * to) has not been displayed/navigated to before.</li><li><code>isTo</code> of type
       * <code>boolean</code>Determines whether was a forward navigation, triggered by
       * to().</li><li><code>isBack</code> of type <code>boolean</code>Determines whether this was a back
       * navigation, triggered by back().</li><li><code>isBackToTop</code> of type
       * <code>boolean</code>Determines whether this was a navigation to the root page, triggered by
       * backToTop().</li><li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this
       * was a navigation to a specific page, triggered by backToPage().</li><li><code>direction</code> of
       * type <code>string</code>Determines how the navigation was triggered, possible values are "to",
       * "back", "backToPage", and "backToTop".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterDetailNavigate(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>afterMasterClose</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterMasterClose(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>afterMasterNavigate</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which had
       * been displayed before navigation.</li><li><code>fromId</code> of type <code>string</code>The ID of
       * the page, which had been displayed before navigation.</li><li><code>to</code> of type
       * <code>sap.ui.core.Control</code>The page, which is now displayed after
       * navigation.</li><li><code>toId</code> of type <code>string</code>The ID of the page, which is now
       * displayed after navigation.</li><li><code>firstTime</code> of type <code>boolean</code>Whether the
       * "to" page (more precisely: a control with the ID of the page, which has been navigated to)has not
       * been displayed/navigated to before.</li><li><code>isTo</code> of type <code>boolean</code>Determines
       * whether was a forward navigation, triggered by to().</li><li><code>isBack</code> of type
       * <code>boolean</code>Determines whether this was a back navigation, triggered by
       * back().</li><li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this was a
       * navigation to the root page, triggered by backToTop().</li><li><code>isBackToPage</code> of type
       * <code>boolean</code>Determines whether this was a navigation to a specific page, triggered by
       * backToPage().</li><li><code>direction</code> of type <code>string</code>Determines how the
       * navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterMasterNavigate(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>afterMasterOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterMasterOpen(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>beforeMasterClose</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeMasterClose(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>beforeMasterOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeMasterOpen(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>detailNavigate</code> to attached listeners.Listeners may prevent the default
       * action of this event by using the <code>preventDefault</code>-method on the event object.Expects the
       * following event parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The
       * page, which was displayed before the current navigation.</li><li><code>fromId</code> of type
       * <code>string</code>The ID of the page, which was displayed before the current
       * navigation.</li><li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which will be
       * displayed after the current navigation.</li><li><code>toId</code> of type <code>string</code>The ID
       * of the page, which will be displayed after the current navigation.</li><li><code>firstTime</code> of
       * type <code>boolean</code>Determines whether the "to" page (more precisely: a control with the ID of
       * the page,which is currently navigated to) has not been displayed/navigated to
       * before.</li><li><code>isTo</code> of type <code>boolean</code>Determines whether this is a forward
       * navigation, triggered by to().</li><li><code>isBack</code> of type <code>boolean</code>Determines
       * whether this is a back navigation, triggered by back().</li><li><code>isBackToTop</code> of type
       * <code>boolean</code>Determines whether this is a navigation to the root page, triggered by
       * backToTop().</li><li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this
       * was a navigation to a specific page, triggered by backToPage().</li><li><code>direction</code> of
       * type <code>string</code>Determines how the navigation was triggered, possible values are "to",
       * "back", "backToPage", and "backToTop".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireDetailNavigate(mArguments: any): boolean;

      /**
       * Fires event <code>masterButton</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireMasterButton(mArguments: any): sap.m.SplitContainer;

      /**
       * Fires event <code>masterNavigate</code> to attached listeners.Listeners may prevent the default
       * action of this event by using the <code>preventDefault</code>-method on the event object.Expects the
       * following event parameters:<ul><li><code>from</code> of type <code>sap.ui.core.Control</code>The
       * page, which was displayed before the current navigation.</li><li><code>fromId</code> of type
       * <code>string</code>The ID of the page, which was displayed before the current
       * navigation.</li><li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which will be
       * displayed after the current navigation.</li><li><code>toId</code> of type <code>string</code>The ID
       * of the page, which will be displayed after the current navigation.</li><li><code>firstTime</code> of
       * type <code>boolean</code>Determines whether the "to" page (more precisely: a control with the ID of
       * the page,which is currently being navigated to) has not been displayed/navigated to
       * before.</li><li><code>isTo</code> of type <code>boolean</code>Determines whether this is a forward
       * navigation, triggered by to().</li><li><code>isBack</code> of type <code>boolean</code>Determines
       * whether this is a back navigation, triggered by back().</li><li><code>isBackToTop</code> of type
       * <code>boolean</code>Determines whether this is a navigation to the root page, triggered by
       * backToTop().</li><li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this
       * was a navigation to a specific page, triggered by backToPage().</li><li><code>direction</code> of
       * type <code>string</code>Determines how the navigation was triggered, possible values are "to",
       * "back", "backToPage", and "backToTop".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Whether or not to prevent the default action
      */
      fireMasterNavigate(mArguments: any): boolean;

      /**
       * Gets current value of property <code>backgroundColor</code>.Determines the background color of the
       * SplitContainer. If set, this color overrides the default one,which is defined by the theme (should
       * only be used when really required).Any configured background image will be placed above this colored
       * background,but any theme adaptation in the Theme Designer will override this setting.Use the
       * backgroundRepeat property to define whether this image should be stretchedto cover the complete
       * SplitContainer or whether it should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundColor</code>
      */
      getBackgroundColor(): string;

      /**
       * Gets current value of property <code>backgroundImage</code>.Sets the background image of the
       * SplitContainer. When set, this image overridesthe default background defined by the theme (should
       * only be used when really required).This background image will be placed above any color set for the
       * background,but any theme adaptation in the Theme Designer will override this image setting.Use the
       * backgroundRepeat property to define whether this image should be stretchedto cover the complete
       * SplitContainer or whether it should be tiled.
       * @since 1.11.2
       * @returns Value of property <code>backgroundImage</code>
      */
      getBackgroundImage(): any;

      /**
       * Gets current value of property <code>backgroundOpacity</code>.Defines the opacity of the background
       * image - between 0 (fully transparent) and 1 (fully opaque).This can be used to improve the content
       * visibility by making the background image partly transparent.Default value is <code>1</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundOpacity</code>
      */
      getBackgroundOpacity(): number;

      /**
       * Gets current value of property <code>backgroundRepeat</code>.Defines whether the background image
       * (if configured) is proportionally stretchedto cover the whole SplitContainer (false) or whether it
       * should be tiled (true).Default value is <code>false</code>.
       * @since 1.11.2
       * @returns Value of property <code>backgroundRepeat</code>
      */
      getBackgroundRepeat(): boolean;

      /**
       * Returns the current displayed detail page.
      */
      getCurrentDetailPage(): sap.ui.core.Control;

      /**
       * Returns the current displayed master page.
      */
      getCurrentMasterPage(): sap.ui.core.Control;

      /**
       * Returns the currently displayed page either in master area or in detail area.When the parameter is
       * set to true, the current page in master area is returned, otherwise, the current page in detail area
       * is returned.This method is provided mainly for API consistency between sap.m.SplitContainer and
       * sap.m.App, so that the same code line can be reused.
       * @since 1.11.1
       * @param bMaster States if this function returns the current page in master area. If it's set to
       * false, the current page in detail area will be returned.
      */
      getCurrentPage(bMaster: boolean): sap.ui.core.Control;

      /**
       * Gets current value of property <code>defaultTransitionNameDetail</code>.Determines the type of the
       * transition/animation to apply when to() is called without defining thetransition to use. The default
       * is "slide", other options are "fade", "show", and the names of any registered custom
       * transitions.Default value is <code>slide</code>.
       * @returns Value of property <code>defaultTransitionNameDetail</code>
      */
      getDefaultTransitionNameDetail(): string;

      /**
       * Gets current value of property <code>defaultTransitionNameMaster</code>.Determines the type of the
       * transition/animation to apply when to() is called, without defining thetransition to use. The
       * default is "slide", other options are "fade", "show", and the names of any registered custom
       * transitions.Default value is <code>slide</code>.
       * @returns Value of property <code>defaultTransitionNameMaster</code>
      */
      getDefaultTransitionNameMaster(): string;

      /**
       * Returns the page with the given ID in detail area. If there's no page that has the given ID, null is
       * returned.
       * @since 1.11.1
       * @param sId The ID of the page that needs to be fetched.
      */
      getDetailPage(sId: string): sap.ui.core.Control;

      /**
       * Gets content of aggregation <code>detailPages</code>.Determines the content entities, between which
       * the SplitContainer navigates in detail area.These can be of type sap.m.Page, sap.ui.core.View,
       * sap.m.Carousel or any other control with fullscreen/page semantics.These aggregated controls receive
       * navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},they are documented in
       * the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
      */
      getDetailPages(): sap.ui.core.Control[];

      /**
       * ID of the element which is the current target of the association <code>initialDetail</code>, or
       * <code>null</code>.
      */
      getInitialDetail(): any;

      /**
       * ID of the element which is the current target of the association <code>initialMaster</code>, or
       * <code>null</code>.
      */
      getInitialMaster(): any;

      /**
       * Gets current value of property <code>masterButtonText</code>.Determines the text displayed in master
       * button, which has a default value "Navigation".This text is only displayed in iOS platform and the
       * icon from the current page in detail area isdisplayed in the master button for the other
       * platforms.The master button is shown/hidden depending on the orientation of the device and
       * whetherthe master area is opened or not. SplitContainer manages the show/hide of the master button
       * by itselfonly when the pages added to the detail area are sap.m.Page with built-in header or
       * sap.m.Pagewith built-in header, which is wrapped by one or several sap.ui.core.mvc.View.Otherwise,
       * the show/hide of master button needs to be managed by the application.
       * @returns Value of property <code>masterButtonText</code>
      */
      getMasterButtonText(): string;

      /**
       * Returns the page with the given ID in master area (if there's no page that has the given ID, null is
       * returned).
       * @since 1.11.1
       * @param sId The ID of the page that needs to be fetched
      */
      getMasterPage(sId: string): sap.ui.core.Control;

      /**
       * Gets content of aggregation <code>masterPages</code>.Determines the content entities, between which
       * the SplitContainer navigates in master area.These can be of type sap.m.Page, sap.ui.core.View,
       * sap.m.Carousel or any other control with fullscreen/page semantics.These aggregated controls receive
       * navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},they are documented in
       * the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
      */
      getMasterPages(): sap.ui.core.Control[];

      /**
       * Returns a metadata object for class sap.m.SplitContainer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mode</code>.Defines whether the master page will always be
       * displayed (in portrait and landscape mode - StretchCompressMode),or if it should be hidden when in
       * portrait mode (ShowHideMode). Default is ShowHideMode.Other possible values are Hide (Master is
       * always hidden) and Popover (master is displayed in popover).Default value is
       * <code>ShowHideMode</code>.
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.SplitAppMode;

      /**
       * Returns the page with the given ID from either master area, or detail area depending on the master
       * parameter (if there's no page that has the given ID, null is returned).
       * @since 1.11.1
       * @param sId The ID of the page that needs to be fetched
       * @param bMaster If the page with given ID should be fetched from the master area. If it's set to
       * false, the page will be fetched from detail area.
      */
      getPage(sId: string, bMaster: boolean): sap.ui.core.Control;

      /**
       * Returns the previous page (the page, from which the user drilled down to the current page with
       * to()).Note: this is not the page, which the user has seen before, but the page which is the target
       * of the next back() navigation.If there is no previous page, "undefined" is returned.
       * @param bMaster States if this function returns the previous page in master area. If it's set to
       * false, the previous page in detail area will be returned.
      */
      getPreviousPage(bMaster: boolean): sap.ui.core.Control;

      /**
       * Used to hide the master page when in ShowHideMode and the device is in portrait mode.
      */
      hideMaster(): sap.m.SplitContainer;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>detailPages</code>.and returns its index if found or -1 otherwise.
       * @param oDetailPage The detailPage whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfDetailPage(oDetailPage: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>masterPages</code>.and returns its index if found or -1 otherwise.
       * @param oMasterPage The masterPage whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfMasterPage(oMasterPage: sap.ui.core.Control): number;

      /**
       * Inserts a detailPage into the aggregation <code>detailPages</code>.
       * @param oDetailPage the detailPage to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the detailPage should be inserted at; for             a
       * negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value        
       *     greater than the current size of the aggregation, the detailPage is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertDetailPage(oDetailPage: sap.ui.core.Control, iIndex: number): sap.m.SplitContainer;

      /**
       * Inserts a masterPage into the aggregation <code>masterPages</code>.
       * @param oMasterPage the masterPage to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the masterPage should be inserted at; for             a
       * negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value        
       *     greater than the current size of the aggregation, the masterPage is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertMasterPage(oMasterPage: sap.ui.core.Control, iIndex: number): sap.m.SplitContainer;

      /**
       * Inserts the page/control with the specified ID into the navigation history stack of the
       * NavContainer.This can be used for deep-linking when the user directly reached a drilldown detail
       * page using a bookmark and then wants to navigate up in the drilldown hierarchy.Normally, such a back
       * navigation would not be possible as there is no previous page in the SplitContainer's history stack.
       * @param sPageId The ID of the control/page/screen, which is inserted into the history stack. The
       * respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
       * @param sTransitionName The type of the transition/animation, which would have been used to navigate
       * from the (inserted) previous page to the current page. When navigating back, the inverse animation
       * will be applied.        This parameter can be omitted; then the default value is "slide" (horizontal
       * movement from the right).
       * @param oData This optional object can carry any payload data which would have been given to the
       * inserted previous page if the user would have done a normal forward navigation to it.
      */
      insertPreviousPage(sPageId: string, sTransitionName: string, oData: any): sap.m.SplitContainer;

      /**
       * Returns whether master area is currently displayed on the screen.In desktop browser or tablet, this
       * method returns true when master area is displayed on the screen, regardless if in portrait or
       * landscape mode.On mobile phone devices, this method returns true when the currently displayed page
       * is from the pages, which are added to the master area, otherwise, it returns false.
       * @since 1.16.5
      */
      isMasterShown(): boolean;

      /**
       * Removes all the controls from the aggregation <code>detailPages</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllDetailPages(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>masterPages</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllMasterPages(): sap.ui.core.Control[];

      /**
       * Removes a detailPage from the aggregation <code>detailPages</code>.
       * @param vDetailPage The detailPage to remove or its index or id
       * @returns The removed detailPage or <code>null</code>
      */
      removeDetailPage(vDetailPage: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a masterPage from the aggregation <code>masterPages</code>.
       * @param vMasterPage The masterPage to remove or its index or id
       * @returns The removed masterPage or <code>null</code>
      */
      removeMasterPage(vMasterPage: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>backgroundColor</code>.Determines the background color of the
       * SplitContainer. If set, this color overrides the default one,which is defined by the theme (should
       * only be used when really required).Any configured background image will be placed above this colored
       * background,but any theme adaptation in the Theme Designer will override this setting.Use the
       * backgroundRepeat property to define whether this image should be stretchedto cover the complete
       * SplitContainer or whether it should be tiled.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundColor New value for property <code>backgroundColor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundColor(sBackgroundColor: string): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>backgroundImage</code>.Sets the background image of the
       * SplitContainer. When set, this image overridesthe default background defined by the theme (should
       * only be used when really required).This background image will be placed above any color set for the
       * background,but any theme adaptation in the Theme Designer will override this image setting.Use the
       * backgroundRepeat property to define whether this image should be stretchedto cover the complete
       * SplitContainer or whether it should be tiled.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.11.2
       * @param sBackgroundImage New value for property <code>backgroundImage</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundImage(sBackgroundImage: any): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>backgroundOpacity</code>.Defines the opacity of the background
       * image - between 0 (fully transparent) and 1 (fully opaque).This can be used to improve the content
       * visibility by making the background image partly transparent.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>1</code>.
       * @since 1.11.2
       * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundOpacity(fBackgroundOpacity: number): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>backgroundRepeat</code>.Defines whether the background image (if
       * configured) is proportionally stretchedto cover the whole SplitContainer (false) or whether it
       * should be tiled (true).When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @since 1.11.2
       * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>defaultTransitionNameDetail</code>.Determines the type of the
       * transition/animation to apply when to() is called without defining thetransition to use. The default
       * is "slide", other options are "fade", "show", and the names of any registered custom
       * transitions.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>slide</code>.
       * @param sDefaultTransitionNameDetail New value for property <code>defaultTransitionNameDetail</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDefaultTransitionNameDetail(sDefaultTransitionNameDetail: string): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>defaultTransitionNameMaster</code>.Determines the type of the
       * transition/animation to apply when to() is called, without defining thetransition to use. The
       * default is "slide", other options are "fade", "show", and the names of any registered custom
       * transitions.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>slide</code>.
       * @param sDefaultTransitionNameMaster New value for property <code>defaultTransitionNameMaster</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDefaultTransitionNameMaster(sDefaultTransitionNameMaster: string): sap.m.SplitContainer;

      /**
       * Sets the associated <code>initialDetail</code>.
       * @param oInitialDetail ID of an element which becomes the new target of this initialDetail
       * association; alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialDetail(oInitialDetail: any | sap.ui.core.Control): sap.m.SplitContainer;

      /**
       * Sets the associated <code>initialMaster</code>.
       * @param oInitialMaster ID of an element which becomes the new target of this initialMaster
       * association; alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialMaster(oInitialMaster: any | sap.ui.core.Control): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>masterButtonText</code>.Determines the text displayed in master
       * button, which has a default value "Navigation".This text is only displayed in iOS platform and the
       * icon from the current page in detail area isdisplayed in the master button for the other
       * platforms.The master button is shown/hidden depending on the orientation of the device and
       * whetherthe master area is opened or not. SplitContainer manages the show/hide of the master button
       * by itselfonly when the pages added to the detail area are sap.m.Page with built-in header or
       * sap.m.Pagewith built-in header, which is wrapped by one or several sap.ui.core.mvc.View.Otherwise,
       * the show/hide of master button needs to be managed by the application.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sMasterButtonText New value for property <code>masterButtonText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMasterButtonText(sMasterButtonText: string): sap.m.SplitContainer;

      /**
       * Sets a new value for property <code>mode</code>.Defines whether the master page will always be
       * displayed (in portrait and landscape mode - StretchCompressMode),or if it should be hidden when in
       * portrait mode (ShowHideMode). Default is ShowHideMode.Other possible values are Hide (Master is
       * always hidden) and Popover (master is displayed in popover).When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>ShowHideMode</code>.
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.SplitAppMode): sap.m.SplitContainer;

      /**
       * Used to make the master page visible when in ShowHideMode and the device is in portrait mode.
      */
      showMaster(): sap.m.SplitContainer;

      /**
       * Navigates to the given page inside the SplitContainer.The navigation is done inside the master area
       * if the page has been added,otherwise, it tries to do the page navigation in the detail area.
       * @since 1.10.0
       * @param sPageId The screen to which we are navigating to. The ID or the control itself can be given.
       * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted;
       * then the default value is "slide" (horizontal movement from the right).        Other options are:
       * "fade", "flip", and "show" and the names of any registered custom transitions.        None of the
       * standard transitions is currently making use of any given transition parameters.
       * @param oData This optional object can carry any payload data which should be made available to the
       * target page. The beforeShow event on the target page will contain this data object as data property.
       *        Use case: in scenarios where the entity triggering the navigation can or should not directly
       * initialize the target page, it can fill this object and the target page itself (or a listener on it)
       * can take over the initialization, using the given data.        When the transitionParameters object
       * is used, this "data" object must also be given (either as object or as null) in order to have a
       * proper parameter order.
       * @param oTransitionParameters This optional object can contain additional information for the
       * transition function, like the DOM element which triggered the transition or the desired transition
       * duration.        For a proper parameter order, the "data" parameter must be given when the
       * transitionParameters parameter is used (it can be given as "null").        NOTE: It depends on the
       * transition function how the object should be structured and which parameters are actually used to
       * influence the transition.        The "show", "slide" and "fade" transitions do not use any
       * parameter.
      */
      to(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): sap.m.SplitContainer;

      /**
       * Navigates to a given detail page.
       * @param sPageId undefined
       * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted;
       * then the default is "slide" (horizontal movement from the right).        Other options are: "fade",
       * "flip", and "show" and the names of any registered custom transitions.        None of the standard
       * transitions is currently making use of any given transition parameters.
       * @param oData This optional object can carry any payload data which should be made available to the
       * target page. The beforeShow event on the target page will contain this data object as data property.
       *        Use case: in scenarios where the entity triggering the navigation can or should not directly
       * initialize the target page, it can fill this object and the target page itself (or a listener on it)
       * can take over the initialization, using the given data.        When the transitionParameters object
       * is used, this data object must also be given (either as object or as null) in order to have a proper
       * parameter order.
       * @param oTransitionParameter This optional object can contain additional information for the
       * transition function, like the DOM element, which triggered the transition or the desired transition
       * duration.        For a proper parameter order, the data parameter must be given when the
       * transitionParameters parameter is used (it can be given as "null").        NOTE: it depends on the
       * transition function how the object should be structured and which parameters are actually used to
       * influence the transition.        The "show", "slide" and "fade" transitions do not use any
       * parameter.
      */
      toDetail(sPageId: string, sTransitionName: string, oData: any, oTransitionParameter: any): sap.m.SplitContainer;

      /**
       * Navigates to a given master page.
       * @param sPageId The screen to which drilldown should happen. The ID or the control itself can be
       * given.
       * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted;
       * then the default value is "slide" (horizontal movement from the right).        Other options are:
       * "fade", "flip", and "show" and the names of any registered custom transitions.        None of the
       * standard transitions is currently making use of any given transition parameters.
       * @param oData Since version 1.7.1. This optional object can carry any payload data which should be
       * made available to the target page. The beforeShow event on the target page will contain this data
       * object as data property.        Use case: in scenarios where the entity triggering the navigation
       * can't or shouldn't directly initialize the target page, it can fill this object and the target page
       * itself (or a listener on it) can take over the initialization, using the given data.        When the
       * transitionParameters object is used, this data object must also be given (either as object or as
       * null) in order to have a proper parameter order.
       * @param oTransitionParameters Since version 1.7.1. This optional object can contain additional
       * information for the transition function, like the DOM element, which triggered the transition or the
       * desired transition duration.        For a proper parameter order, the data parameter must be given
       * when the transitionParameters parameter is used (it can be given as "null").        NOTE: it depends
       * on the transition function how the object should be structured and which parameters are actually
       * used to influence the transition.        The "show", "slide" and "fade" transitions do not use any
       * parameter.
      */
      toMaster(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): sap.m.SplitContainer;
    }
    /**
     * <code>sap.m.DisplayListItem</code> can be used to represent a label and a value.
     * @resource sap/m/DisplayListItem.js
    */
    export class DisplayListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new DisplayListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>label</code>.Defines the label of the list item.
       * @returns Value of property <code>label</code>
      */
      getLabel(): string;

      /**
       * Returns a metadata object for class sap.m.DisplayListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>value</code>.Defines the value of the list item.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>valueTextDirection</code>.Defines the <code>value</code> text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>valueTextDirection</code>
      */
      getValueTextDirection(): sap.ui.core.TextDirection;

      /**
       * Sets a new value for property <code>label</code>.Defines the label of the list item.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sLabel New value for property <code>label</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLabel(sLabel: string): sap.m.DisplayListItem;

      /**
       * Sets a new value for property <code>value</code>.Defines the value of the list item.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.DisplayListItem;

      /**
       * Sets a new value for property <code>valueTextDirection</code>.Defines the <code>value</code> text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sValueTextDirection New value for property <code>valueTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValueTextDirection(sValueTextDirection: sap.ui.core.TextDirection): sap.m.DisplayListItem;
    }
    /**
     * The ScrollContainer is a control that can display arbitrary content within a limited screen area and
     * provides touch scrolling to make all content accessible.Note that it is not recommended to have
     * nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls
     * vertically inside a Page control with scrolling enabled). This is currently not considered a valid
     * use-case of a good UI and the behavior will feel wrong.
     * @resource sap/m/ScrollContainer.js
    */
    export class ScrollContainer extends sap.ui.core.Control {


      /**
       * Constructor for a new ScrollContainer.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.ScrollContainer;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.ScrollContainer;


      /**
       * Gets content of aggregation <code>content</code>.The content of the ScrollContainer.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>focusable</code>.Whether the scroll container can be
       * focused.Note that it should be set to "true" when there are no focusable elements inside or when
       * keyboard interaction requires an additional tab stop on the container.Default value is
       * <code>false</code>.
       * @returns Value of property <code>focusable</code>
      */
      getFocusable(): boolean;

      /**
       * Gets current value of property <code>height</code>.The height of the ScrollContainer.By default the
       * height equals the content height. If only horizontal scrolling is used, do not set the height or
       * make sure the height is always larger than the height of the content.Note that when a percentage is
       * given, for the height to work as expected, the height of the surrounding container must be
       * defined.Default value is <code>auto</code>.
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Gets current value of property <code>horizontal</code>.Whether horizontal scrolling should be
       * possible.Default value is <code>true</code>.
       * @returns Value of property <code>horizontal</code>
      */
      getHorizontal(): boolean;

      /**
       * Returns a metadata object for class sap.m.ScrollContainer.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>vertical</code>.Whether vertical scrolling should be
       * possible.Note that this is off by default because typically a Page is used as fullscreen element
       * which can handle vertical scrolling. If this is not the case and vertical scrolling is required,
       * this flag needs to be set to "true".Important: it is not supported to have nested controls that both
       * enable scrolling into the same dimension.Default value is <code>false</code>.
       * @returns Value of property <code>vertical</code>
      */
      getVertical(): boolean;

      /**
       * Gets current value of property <code>width</code>.The width of the ScrollContainer.If not set, it
       * consumes the complete available width, behaving like normal HTML block elements. If only vertical
       * scrolling is enabled, make sure the content always fits or wraps.Default value is <code>auto</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ScrollContainer;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Scrolls to the given position.When called while the control is not rendered (yet), the scrolling
       * position is still applied, but there is no animation.
       * @param x The horizontal pixel position to scroll to.        Scrolling to the right happens with
       * positive values. In right-to-left mode scrolling starts at the right side and higher values scroll
       * to the left.        If only vertical scrolling is enabled, give 0 as value.
       * @param y The vertical pixel position to scroll to.        Scrolling down happens with positive
       * values.        If only horizontal scrolling is enabled, give 0 as value.
       * @param time The duration of animated scrolling.        To scroll immediately without animation, give
       * 0 as value. 0 is also the default value, when this optional parameter is omitted.
      */
      scrollTo(x: number, y: number, time: number): sap.m.ScrollContainer;

      /**
       * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
       * @since 1.30
       * @param element The element to which should be scrolled.
       * @param time The duration of animated scrolling. To scroll immediately without animation, give 0 as
       * value or leave it default.
       * @returns <code>this</code> to facilitate method chaining.
      */
      scrollToElement(element: HTMLElement | sap.ui.core.Element, time?: number): sap.m.ScrollContainer;

      /**
       * Sets a new value for property <code>focusable</code>.Whether the scroll container can be
       * focused.Note that it should be set to "true" when there are no focusable elements inside or when
       * keyboard interaction requires an additional tab stop on the container.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bFocusable New value for property <code>focusable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFocusable(bFocusable: boolean): sap.m.ScrollContainer;

      /**
       * Sets a new value for property <code>height</code>.The height of the ScrollContainer.By default the
       * height equals the content height. If only horizontal scrolling is used, do not set the height or
       * make sure the height is always larger than the height of the content.Note that when a percentage is
       * given, for the height to work as expected, the height of the surrounding container must be
       * defined.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>auto</code>.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.ScrollContainer;

      /**
       * Sets a new value for property <code>horizontal</code>.Whether horizontal scrolling should be
       * possible.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bHorizontal New value for property <code>horizontal</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHorizontal(bHorizontal: boolean): sap.m.ScrollContainer;

      /**
       * Sets a new value for property <code>vertical</code>.Whether vertical scrolling should be
       * possible.Note that this is off by default because typically a Page is used as fullscreen element
       * which can handle vertical scrolling. If this is not the case and vertical scrolling is required,
       * this flag needs to be set to "true".Important: it is not supported to have nested controls that both
       * enable scrolling into the same dimension.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bVertical New value for property <code>vertical</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVertical(bVertical: boolean): sap.m.ScrollContainer;

      /**
       * Sets a new value for property <code>width</code>.The width of the ScrollContainer.If not set, it
       * consumes the complete available width, behaving like normal HTML block elements. If only vertical
       * scrolling is enabled, make sure the content always fits or wraps.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>auto</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.ScrollContainer;
    }
    /**
     * The ObjectAttribute control displays a text field that can be normal or active. The ObjectAttribute
     * fires a press event when the user selects active text.
     * @resource sap/m/ObjectAttribute.js
    */
    export class ObjectAttribute extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectAttribute.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.ObjectAttribute</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectAttribute</code> itself.Fires when the user clicks on active text.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectAttribute</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectAttribute;

      /**
       * Destroys the customContent in the aggregation <code>customContent</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomContent(): sap.m.ObjectAttribute;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.ObjectAttribute</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.ObjectAttribute;


      /**
       * Fires event <code>press</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>string</code>DOM reference of the
       * ObjectAttribute's text to be used for positioning.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.ObjectAttribute;

      /**
       * Gets current value of property <code>active</code>.Indicates if the ObjectAttribute text is
       * selectable for the user.
       * @returns Value of property <code>active</code>
      */
      getActive(): boolean;

      /**
       * Gets content of aggregation <code>customContent</code>.When the aggregation is set, it replaces the
       * text, active and textDirection properties. This also ignores the press event. The provided control
       * is displayed as an active link.<b>Note:</b> It will only allow sap.m.Text and sap.m.Link controls.
      */
      getCustomContent(): sap.ui.core.Control;

      /**
       * Returns a metadata object for class sap.m.ObjectAttribute.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Defines to which DOM reference the Popup should be docked.
       * @returns The DOM reference that Popup should dock to
      */
      getPopupAnchorDomRef(): any;

      /**
       * Gets current value of property <code>text</code>.Defines the ObjectAttribute text.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Determines the direction of the text, not
       * including the title.Available options for the text direction are LTR (left-to-right) and RTL
       * (right-to-left). By default the control inherits the text direction from its parent control.Default
       * value is <code>Inherit</code>.
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>title</code>.Defines the ObjectAttribute title.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Sets a new value for property <code>active</code>.Indicates if the ObjectAttribute text is
       * selectable for the user.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param bActive New value for property <code>active</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActive(bActive: boolean): sap.m.ObjectAttribute;

      /**
       * Sets the aggregated <code>customContent</code>.
       * @param oCustomContent The customContent to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomContent(oCustomContent: sap.ui.core.Control): sap.m.ObjectAttribute;

      /**
       * Sets a new value for property <code>text</code>.Defines the ObjectAttribute text.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.ObjectAttribute;

      /**
       * Sets a new value for property <code>textDirection</code>.Determines the direction of the text, not
       * including the title.Available options for the text direction are LTR (left-to-right) and RTL
       * (right-to-left). By default the control inherits the text direction from its parent control.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>Inherit</code>.
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectAttribute;

      /**
       * Sets a new value for property <code>title</code>.Defines the ObjectAttribute title.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ObjectAttribute;
    }
    /**
     * The P13nFilterPanel control is used to define filter-specific settings for table personalization.
     * @resource sap/m/P13nFilterPanel.js
    */
    export class P13nFilterPanel extends sap.m.P13nPanel {


      /**
       * Constructor for a new P13nFilterPanel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some filterItem to the aggregation <code>filterItems</code>.
       * @since 1.26
       * @param oFilterItem the filterItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addFilterItem(oFilterItem: sap.m.P13nFilterItem): sap.m.P13nFilterPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>addFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nFilterPanel</code> itself.Event raised if a filter item has been added.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nFilterPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAddFilterItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nFilterPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>removeFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nFilterPanel</code> itself.Removes a filter item.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nFilterPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachRemoveFilterItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nFilterPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>updateFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nFilterPanel</code> itself.Updates a filter item.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nFilterPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUpdateFilterItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nFilterPanel;

      /**
       * Binds aggregation <code>filterItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindFilterItems(oBindingInfo: any): sap.m.P13nFilterPanel;

      /**
       * Destroys all the filterItems in the aggregation <code>filterItems</code>.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFilterItems(): sap.m.P13nFilterPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>addFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAddFilterItem(fnFunction: any, oListener: any): sap.m.P13nFilterPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>removeFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachRemoveFilterItem(fnFunction: any, oListener: any): sap.m.P13nFilterPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>updateFilterItem</code> event of this
       * <code>sap.m.P13nFilterPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUpdateFilterItem(fnFunction: any, oListener: any): sap.m.P13nFilterPanel;


      /**
       * Fires event <code>addFilterItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAddFilterItem(mArguments: any): sap.m.P13nFilterPanel;

      /**
       * Fires event <code>removeFilterItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireRemoveFilterItem(mArguments: any): sap.m.P13nFilterPanel;

      /**
       * Fires event <code>updateFilterItem</code> to attached listeners.
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUpdateFilterItem(mArguments: any): sap.m.P13nFilterPanel;

      /**
       * Returns the array of conditions.
       * @since 1.26
      */
      getConditions(): void;

      /**
       * Gets current value of property <code>containerQuery</code>.Defines if the <code>mediaQuery</code> or
       * a <code>ContainerResize</code> is used for layout update. If the<code>ConditionPanel</code> is used
       * in a dialog, the property must be set to <code>true</code>.Default value is <code>false</code>.
       * @since 1.26
       * @returns Value of property <code>containerQuery</code>
      */
      getContainerQuery(): boolean;

      /**
       * Getter for the exclude operations.
       * @since 1.26
       * @param the type for which the operations are defined
       * @returns array of operations [<code>sap.m.P13nConditionOperation.BT</code>,        
       * <code>sap.m.P13nConditionOperation.EQ</code>]
      */
      getExcludeOperations(the: string): any[];

      /**
       * Gets content of aggregation <code>filterItems</code>.Defines filter items.
       * @since 1.26
      */
      getFilterItems(): sap.m.P13nFilterItem[];

      /**
       * Getter for the include operations.
       * @since 1.26
       * @param the type for which the operations are defined
       * @returns array of operations [<code>sap.m.P13nConditionOperation.BT</code>,        
       * <code>sap.m.P13nConditionOperation.EQ</code>]
      */
      getIncludeOperations(the: string): any;

      /**
       * Gets current value of property <code>layoutMode</code>.Can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.
       * @since 1.26
       * @returns Value of property <code>layoutMode</code>
      */
      getLayoutMode(): string;

      /**
       * Gets current value of property <code>maxExcludes</code>.Defines the maximum number of exclude
       * filters.Default value is <code>-1</code>.
       * @since 1.26
       * @returns Value of property <code>maxExcludes</code>
      */
      getMaxExcludes(): string;

      /**
       * Gets current value of property <code>maxIncludes</code>.Defines the maximum number of include
       * filters.Default value is <code>-1</code>.
       * @since 1.26
       * @returns Value of property <code>maxIncludes</code>
      */
      getMaxIncludes(): string;

      /**
       * Returns a metadata object for class sap.m.P13nFilterPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.m.P13nFilterItem</code> in the aggregation
       * <code>filterItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.26
       * @param oFilterItem The filterItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfFilterItem(oFilterItem: sap.m.P13nFilterItem): number;

      /**
       * Inserts a filterItem into the aggregation <code>filterItems</code>.
       * @since 1.26
       * @param oFilterItem the filterItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the filterItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value        
       *     greater than the current size of the aggregation, the filterItem is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertFilterItem(oFilterItem: sap.m.P13nFilterItem, iIndex: number): sap.m.P13nFilterPanel;

      /**
       * Removes all the controls from the aggregation <code>filterItems</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.26
       * @returns An array of the removed elements (might be empty)
      */
      removeAllFilterItems(): sap.m.P13nFilterItem[];

      /**
       * Removes a filterItem from the aggregation <code>filterItems</code>.
       * @since 1.26
       * @param vFilterItem The filterItem to remove or its index or id
       * @returns The removed filterItem or <code>null</code>
      */
      removeFilterItem(vFilterItem: number | string | sap.m.P13nFilterItem): sap.m.P13nFilterItem;

      /**
       * Removes all invalid conditions.
       * @since 1.28
      */
      removeInvalidConditions(): void;

      /**
       * Removes all errors and warnings states from of all filter conditions.
       * @since 1.28
      */
      removeValidationErrors(): void;

      /**
       * Sets the array of conditions.
       * @since 1.26
       * @param aConditions the complete list of conditions
       * @returns this for chaining
      */
      setConditions(aConditions: any[]): sap.m.P13nFilterPanel;

      /**
       * Sets a new value for property <code>containerQuery</code>.Defines if the <code>mediaQuery</code> or
       * a <code>ContainerResize</code> is used for layout update. If the<code>ConditionPanel</code> is used
       * in a dialog, the property must be set to <code>true</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.26
       * @param bContainerQuery New value for property <code>containerQuery</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContainerQuery(bContainerQuery: boolean): sap.m.P13nFilterPanel;

      /**
       * Setter for the supported exclude operations array.
       * @since 1.26
       * @param array of operations [<code>sap.m.P13nConditionOperation.BT</code>,      
       * <code>sap.m.P13nConditionOperation.EQ</code>]
       * @param the type for which the operations are defined
      */
      setExcludeOperations(array: any[], the: string): void;

      /**
       * Setter for the supported Include operations array.
       * @since 1.26
       * @param array of operations [<code>sap.m.P13nConditionOperation.BT</code>,      
       * <code>sap.m.P13nConditionOperation.EQ</code>]
       * @param the type for which the operations are defined
      */
      setIncludeOperations(array: any[], the: string): void;

      /**
       * Sets a new value for property <code>layoutMode</code>.Can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @since 1.26
       * @param sLayoutMode New value for property <code>layoutMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLayoutMode(sLayoutMode: string): sap.m.P13nFilterPanel;

      /**
       * Sets a new value for property <code>maxExcludes</code>.Defines the maximum number of exclude
       * filters.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>-1</code>.
       * @since 1.26
       * @param sMaxExcludes New value for property <code>maxExcludes</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxExcludes(sMaxExcludes: string): sap.m.P13nFilterPanel;

      /**
       * Sets a new value for property <code>maxIncludes</code>.Defines the maximum number of include
       * filters.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>-1</code>.
       * @since 1.26
       * @param sMaxIncludes New value for property <code>maxIncludes</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxIncludes(sMaxIncludes: string): sap.m.P13nFilterPanel;

      /**
       * Unbinds aggregation <code>filterItems</code> from model data.
       * @since 1.26
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindFilterItems(): sap.m.P13nFilterPanel;

      /**
       * Checks if the entered and modified conditions are correct, marks invalid fields in yellow (warning).
       * @since 1.26
       * @returns <code>false</code>, if there is an invalid condition
      */
      validateConditions(): boolean;
    }
    /**
     * Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to
     * theimage icons which shall be used as rating symbols. When the user performs a rating, an event is
     * fired.
     * @resource sap/m/RatingIndicator.js
    */
    export class RatingIndicator extends sap.ui.core.Control {


      /**
       * Constructor for a new RatingIndicator.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.RatingIndicator;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.RatingIndicator;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.RatingIndicator</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.RatingIndicator</code> itself.The event is fired when the user has done a
       * rating.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.RatingIndicator</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.RatingIndicator;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.RatingIndicator</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.RatingIndicator</code> itself.This event is triggered during the dragging
       * period, each time the rating value changes.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.RatingIndicator</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.RatingIndicator;

      /**
       * Binds property <code>value</code> to model data.See {@link sap.ui.base.ManagedObject#bindProperty
       * ManagedObject.bindProperty} for a detailed description of the possible properties of
       * <code>oBindingInfo</code>
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindValue(oBindingInfo: any): sap.m.RatingIndicator;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.RatingIndicator</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.RatingIndicator;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.RatingIndicator</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.RatingIndicator;


      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>int</code>The rated value</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.RatingIndicator;

      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>float</code>The current value of the rating
       * after a live change event.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.RatingIndicator;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>enabled</code>.Value "true" is required to let the user rate
       * with this control. It is recommended to set this parameter to "false" for the "Small" size which is
       * meant for indicating a value onlyDefault value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>iconHovered</code>.The URI to the icon font icon or image that
       * will be displayed for hovered rating symbols. A star icon will be used if the property is not set
       * @returns Value of property <code>iconHovered</code>
      */
      getIconHovered(): any;

      /**
       * Gets current value of property <code>iconSelected</code>.The URI to the icon font icon or image that
       * will be displayed for selected rating symbols. A star icon will be used if the property is not set
       * @returns Value of property <code>iconSelected</code>
      */
      getIconSelected(): any;

      /**
       * Gets current value of property <code>iconSize</code>.The Size of the image or icon to be displayed.
       * The default value depends on the theme. Please be sure that the size is corresponding to a full
       * pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem
       * (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
       * @returns Value of property <code>iconSize</code>
      */
      getIconSize(): any;

      /**
       * Gets current value of property <code>iconUnselected</code>.The URI to the icon font icon or image
       * that will be displayed for all unselected rating symbols. A star icon will be used if the property
       * is not set
       * @returns Value of property <code>iconUnselected</code>
      */
      getIconUnselected(): any;

      /**
       * Gets current value of property <code>maxValue</code>.The number of displayed rating symbolsDefault
       * value is <code>5</code>.
       * @returns Value of property <code>maxValue</code>
      */
      getMaxValue(): number;

      /**
       * Returns a metadata object for class sap.m.RatingIndicator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>value</code>.The indicated value of the ratingDefault value is
       * <code>0</code>.
       * @returns Value of property <code>value</code>
      */
      getValue(): number;

      /**
       * Gets current value of property <code>visualMode</code>.Defines how float values are visualized:
       * Full, Half (see enumeration RatingIndicatorVisualMode)Default value is <code>Half</code>.
       * @returns Value of property <code>visualMode</code>
      */
      getVisualMode(): sap.m.RatingIndicatorVisualMode;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>enabled</code>.Value "true" is required to let the user rate
       * with this control. It is recommended to set this parameter to "false" for the "Small" size which is
       * meant for indicating a value onlyWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.RatingIndicator;

      /**
       * Sets a new value for property <code>iconHovered</code>.The URI to the icon font icon or image that
       * will be displayed for hovered rating symbols. A star icon will be used if the property is not
       * setWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sIconHovered New value for property <code>iconHovered</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconHovered(sIconHovered: any): sap.m.RatingIndicator;

      /**
       * Sets a new value for property <code>iconSelected</code>.The URI to the icon font icon or image that
       * will be displayed for selected rating symbols. A star icon will be used if the property is not
       * setWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sIconSelected New value for property <code>iconSelected</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconSelected(sIconSelected: any): sap.m.RatingIndicator;

      /**
       * Sets the icon size value. The method is automatically updating the UI components if the control has
       * been rendered before.
       * @param sIconSize undefined
       * @returns Returns <code>this</code> to facilitate method chaining.
      */
      setIconSize(sIconSize: any): sap.m.RatingIndicator;

      /**
       * Sets a new value for property <code>iconUnselected</code>.The URI to the icon font icon or image
       * that will be displayed for all unselected rating symbols. A star icon will be used if the property
       * is not setWhen called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sIconUnselected New value for property <code>iconUnselected</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconUnselected(sIconUnselected: any): sap.m.RatingIndicator;

      /**
       * Sets a new value for property <code>maxValue</code>.The number of displayed rating symbolsWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>5</code>.
       * @param iMaxValue New value for property <code>maxValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxValue(iMaxValue: number): sap.m.RatingIndicator;

      /**
       * Sets the rating value. The method is automatically checking whether the value is in the valid range
       * of 0-{@link #getMaxValue maxValue} and if it is a valid number. Calling the setter with null or
       * undefined will reset the value to it's default.
       * @param fValue The rating value to be set.
       * @returns Returns <code>this</code> to facilitate method chaining.
      */
      setValue(fValue: number): sap.m.RatingIndicator;

      /**
       * Sets a new value for property <code>visualMode</code>.Defines how float values are visualized: Full,
       * Half (see enumeration RatingIndicatorVisualMode)When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>Half</code>.
       * @param sVisualMode New value for property <code>visualMode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisualMode(sVisualMode: sap.m.RatingIndicatorVisualMode): sap.m.RatingIndicator;

      /**
       * Unbinds property <code>value</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindValue(): sap.m.RatingIndicator;
    }
    /**
     * The OverflowToolbar control is a container based on sap.m.Toolbar, that provides overflow when its
     * content does not fit in the visible area.Note: It is recommended that you use OverflowToolbar over
     * {@link sap.m.Toolbar}, unless you want to avoid overflow in favor of shrinking.
     * @resource sap/m/OverflowToolbar.js
    */
    export class OverflowToolbar extends sap.m.Toolbar {


      /**
       * Constructor for a new Overflow ToolbarAccepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Closes the overflow area.Useful to manually close the overflow after having suppressed automatic
       * closing with "closeOverflowOnInteraction=false".
       * @since 1.40
      */
      closeOverflow(): void;


      /**
       * Returns a metadata object for class sap.m.OverflowToolbar.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * FacetFilterList represents a list of values for the FacetFilter control.
     * @resource sap/m/FacetFilterList.js
    */
    export class FacetFilterList extends sap.m.List {


      /**
       * Constructor for a new FacetFilterList.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>listClose</code> event of this
       * <code>sap.m.FacetFilterList</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.FacetFilterList</code> itself.Triggered after the list of items is closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FacetFilterList</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachListClose(oData: any, fnFunction: any, oListener?: any): sap.m.FacetFilterList;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>listOpen</code> event of this
       * <code>sap.m.FacetFilterList</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.FacetFilterList</code> itself.Fired before the filter list is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.FacetFilterList</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachListOpen(oData: any, fnFunction: any, oListener?: any): sap.m.FacetFilterList;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>listClose</code> event of this
       * <code>sap.m.FacetFilterList</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachListClose(fnFunction: any, oListener: any): sap.m.FacetFilterList;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>listOpen</code> event of this
       * <code>sap.m.FacetFilterList</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachListOpen(fnFunction: any, oListener: any): sap.m.FacetFilterList;


      /**
       * Fires event <code>listClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItems</code> of type <code>sap.m.FacetFilterItem[]</code>Array of
       * selected items. Items returned are only copies and therefore can only be used to read properties,
       * not set them.</li><li><code>allSelected</code> of type <code>boolean</code><code>True</code> if the
       * select All checkbox is selected. This will be <code>false</code> if all items are actually selected
       * (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected
       * items.</li><li><code>selectedKeys</code> of type <code>object</code>Associative array containing the
       * keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys
       * for all selected items, not the items themselves. Being an associative array, each object property
       * is the FacetFilterItem key value and the value of the property is the FacetFilterItem
       * text.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireListClose(mArguments: any): sap.m.FacetFilterList;

      /**
       * Fires event <code>listOpen</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireListOpen(mArguments: any): sap.m.FacetFilterList;

      /**
       * Gets current value of property <code>active</code>.Indicates that the list is displayed as a button
       * when the FacetFilter type is set to <code>Simple</code>.Default value is <code>true</code>.
       * @returns Value of property <code>active</code>
      */
      getActive(): boolean;

      /**
       * Gets current value of property <code>allCount</code>.Determines the number of objects that match
       * this item in the target data set when all filter items are selected.
       * @returns Value of property <code>allCount</code>
      */
      getAllCount(): number;

      /**
       * Gets current value of property <code>dataType</code>.FacetFilterList data type. Only String data
       * type will provide search function.Default value is <code>String</code>.
       * @returns Value of property <code>dataType</code>
      */
      getDataType(): sap.m.FacetFilterListDataType;

      /**
       * Gets current value of property <code>enableCaseInsensitiveSearch</code>.If set to <code>true</code>,
       * enables case-insensitive search for OData.Default value is <code>false</code>.
       * @returns Value of property <code>enableCaseInsensitiveSearch</code>
      */
      getEnableCaseInsensitiveSearch(): boolean;

      /**
       * Gets current value of property <code>key</code>.Unique identifier for this filter list.
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.FacetFilterList.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>multiSelect</code>.Specifies whether multiple or single
       * selection is used.Default value is <code>true</code>.
       * @returns Value of property <code>multiSelect</code>
      */
      getMultiSelect(): boolean;

      /**
       * Gets current value of property <code>retainListSequence</code>.Retains the list sequence if it is
       * inactive and made active again.Default value is <code>false</code>.
       * @since 1.22.1
       * @returns Value of property <code>retainListSequence</code>
      */
      getRetainListSequence(): boolean;

      /**
       * Returns the keys of the selected elements as an associative array.An empty object is returned if no
       * items are selected.
       * @since 1.20.3
       * @returns Object with the selected keys
      */
      getSelectedKeys(): any;

      /**
       * Gets current value of property <code>sequence</code>.Sequence that determines the order in which
       * FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of
       * sequence.Default value is <code>-1</code>.
       * @returns Value of property <code>sequence</code>
      */
      getSequence(): number;

      /**
       * Gets current value of property <code>showRemoveFacetIcon</code>.Specifies whether remove icon for
       * facet is visible or hidden.Default value is <code>true</code>.
       * @since 1.20.4
       * @returns Value of property <code>showRemoveFacetIcon</code>
      */
      getShowRemoveFacetIcon(): boolean;

      /**
       * Gets current value of property <code>title</code>.Defines the title of the facet. The facet title is
       * displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also
       * displayed as a list item in the facet page of the dialog.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>wordWrap</code>.If set to <code>true</code>, the item text
       * wraps when it is too long.Default value is <code>false</code>.
       * @returns Value of property <code>wordWrap</code>
      */
      getWordWrap(): boolean;

      /**
       * Removes the specified key from the selected keys cache and deselects the item.
       * @since 1.20.4
       * @param sKey The key of the selected item to be removed from the cache. If <code>null</code> then the
       * text parameter will be used as the key.
       * @param sText The text of the selected item to be removed from the cache. If the key parameter is
       * <code>null</code> then text will be used as the key.
      */
      removeSelectedKey(sKey: string, sText: string): void;

      /**
       * Removes all selected keys from the selected keys cache and deselects all items.
       * @since 1.20.4
      */
      removeSelectedKeys(): void;

      /**
       * Sets a new value for property <code>active</code>.Indicates that the list is displayed as a button
       * when the FacetFilter type is set to <code>Simple</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bActive New value for property <code>active</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActive(bActive: boolean): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>allCount</code>.Determines the number of objects that match this
       * item in the target data set when all filter items are selected.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param iAllCount New value for property <code>allCount</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAllCount(iAllCount: number): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>dataType</code>.FacetFilterList data type. Only String data type
       * will provide search function.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>String</code>.
       * @param sDataType New value for property <code>dataType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDataType(sDataType: sap.m.FacetFilterListDataType): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>enableCaseInsensitiveSearch</code>.If set to <code>true</code>,
       * enables case-insensitive search for OData.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bEnableCaseInsensitiveSearch New value for property <code>enableCaseInsensitiveSearch</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableCaseInsensitiveSearch(bEnableCaseInsensitiveSearch: boolean): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>key</code>.Unique identifier for this filter list.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.FacetFilterList;

      /**
       * Overrides to allow only MultiSelect and SingleSelectMaster list modes.If an invalid mode is given
       * then the mode will not be changed.
       * @param mode The list mode
      */
      setMode(mode: sap.m.ListMode): any;

      /**
       * Sets a new value for property <code>retainListSequence</code>.Retains the list sequence if it is
       * inactive and made active again.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.22.1
       * @param bRetainListSequence New value for property <code>retainListSequence</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRetainListSequence(bRetainListSequence: boolean): sap.m.FacetFilterList;

      /**
       * Used to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a
       * variant.Keys are cached separately from the actual FacetFilterItems so that they remain even when
       * the physical items are removed by filtering or sorting.If aKeys is <code>undefined</code>,
       * <code>null</code>, or {} (empty object) then all keys are deleted.After this method completes, only
       * those items with matching keys will be selected. All other items in the list will be deselected.
       * @since 1.20.3
       * @param oAKeys Associative array indicating which FacetFilterItems should be selected in the list.
       * Each property must be set to the value of a FacetFilterItem.key property. Each property value should
       * be set to the FacetFilterItem.text property value. The text value is used to display the
       * FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no
       * property value is set then the property key is used for the text.
      */
      setSelectedKeys(oAKeys: any): void;

      /**
       * Sets a new value for property <code>sequence</code>.Sequence that determines the order in which
       * FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>-1</code>.
       * @param iSequence New value for property <code>sequence</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSequence(iSequence: number): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>showRemoveFacetIcon</code>.Specifies whether remove icon for
       * facet is visible or hidden.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>true</code>.
       * @since 1.20.4
       * @param bShowRemoveFacetIcon New value for property <code>showRemoveFacetIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowRemoveFacetIcon(bShowRemoveFacetIcon: boolean): sap.m.FacetFilterList;

      /**
       * Sets a new value for property <code>wordWrap</code>.If set to <code>true</code>, the item text wraps
       * when it is too long.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bWordWrap New value for property <code>wordWrap</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWordWrap(bWordWrap: boolean): sap.m.FacetFilterList;
    }
    /**
     * Represents a value for the FacetFilterList control.
     * @resource sap/m/FacetFilterItem.js
    */
    export class FacetFilterItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new FacetFilterItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>count</code>.Defines the number of objects that match this item
       * in the target data set.
       * @returns Value of property <code>count</code>
      */
      getCount(): number;

      /**
       * Gets current value of property <code>key</code>.Can be used as input for subsequent actions.
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.FacetFilterItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>text</code>.Determines the text to be displayed for the item.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Sets a new value for property <code>key</code>.Can be used as input for subsequent actions.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.FacetFilterItem;

      /**
       * Sets a new value for property <code>text</code>.Determines the text to be displayed for the
       * item.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.FacetFilterItem;
    }
    /**
     * SegmentedButton is a horizontal control made of multiple buttons, which can display a title or an
     * image. It automatically resizes the buttons to fit proportionally within the control. When no width
     * is set, the control uses the available width.
     * @resource sap/m/SegmentedButton.js
    */
    export class SegmentedButton extends sap.ui.core.Control {


      /**
       * Constructor for a new SegmentedButton.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.SegmentedButton;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.SegmentedButton;

      /**
       * Adds some button to the aggregation <code>buttons</code>.
       * @param oButton the button to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addButton(oButton: sap.m.Button): sap.m.SegmentedButton;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @since 1.28
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.SegmentedButtonItem): sap.m.SegmentedButton;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.SegmentedButton</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SegmentedButton</code> itself.Fires when the user selects a button, which
       * returns the ID and button object.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SegmentedButton</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.SegmentedButton;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.28
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.SegmentedButton;

      /**
       * Binds property <code>selectedKey</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description of the
       * possible properties of <code>oBindingInfo</code>
       * @since 1.28.0
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindSelectedKey(oBindingInfo: any): sap.m.SegmentedButton;

      /**
       * Adds a Button with a text as title, an URI for an icon, enabled and textDirection.Only one is
       * allowed.
       * @since 1.28.0
       * @param sText Defines the title text of the newly created Button
       * @param sURI Icon to be displayed as graphical element within the Button.        Density related
       * image will be loaded if image with density awareness name in format
       * [imageName]@[densityValue].[extension] is provided.
       * @param bEnabled Enables the control (default is true). Buttons that are disabled have other colors
       * than enabled ones, depending on custom settings.
       * @param sTextDirection Element's text directionality with enumerated options
       * @returns The created Button
      */
      createButton(sText: string, sURI: any, bEnabled: boolean, sTextDirection?: sap.ui.core.TextDirection): sap.m.Button;

      /**
       * Destroys all the buttons in the aggregation <code>buttons</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyButtons(): sap.m.SegmentedButton;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @since 1.28
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.SegmentedButton;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.SegmentedButton</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.SegmentedButton;


      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>button</code> of type <code>sap.m.Button</code>Reference to the button,
       * that has been selected.</li><li><code>id</code> of type <code>string</code>ID of the button, which
       * has been selected.</li><li><code>key</code> of type <code>string</code>Key of the button, which has
       * been selected. This property is only filled when the control is initiated with the items
       * aggregation.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.SegmentedButton;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>buttons</code>.The buttons of the SegmentedButton control. The
       * items set in this aggregation are used as an interface for the buttons displayed by the control.
       * Only the properties ID, icon, text, enabled and textDirections of the Button control are evaluated.
       * Setting other properties of the button will have no effect. Alternatively, you can use the
       * createButton method to add buttons.
      */
      getButtons(): sap.m.Button[];

      /**
       * Gets current value of property <code>enabled</code>.Disables all the buttons in the SegmentedButton
       * control. When disabled all the buttons look grey and you cannot focus or click on them.Default value
       * is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets content of aggregation <code>items</code>.Aggregation of items to be displayed. The items set
       * in this aggregation are used as an interface for the buttons displayed by the control.The "items"
       * and "buttons" aggregations should NOT be used simultaneously as it causes the control to work
       * incorrectly.
       * @since 1.28
      */
      getItems(): sap.m.SegmentedButtonItem[];

      /**
       * Returns a metadata object for class sap.m.SegmentedButton.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * ID of the element which is the current target of the association <code>selectedButton</code>, or
       * <code>null</code>.
      */
      getSelectedButton(): any;

      /**
       * Gets current value of property <code>width</code>.Defines the width of the SegmentedButton control.
       * If not set, it uses the minimum required width to make all buttons inside of the same size (based on
       * the biggest button).
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.and
       * returns its index if found or -1 otherwise.
       * @param oButton The button whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfButton(oButton: sap.m.Button): number;

      /**
       * Checks for the provided <code>sap.m.SegmentedButtonItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @since 1.28
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.SegmentedButtonItem): number;

      /**
       * Inserts a button into the aggregation <code>buttons</code>.
       * @param oButton the button to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the button should be inserted at; for             a
       * negative value of <code>iIndex</code>, the button is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the button is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertButton(oButton: sap.m.Button, iIndex: number): sap.m.SegmentedButton;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @since 1.28
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.SegmentedButtonItem, iIndex: number): sap.m.SegmentedButton;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>buttons</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllButtons(): sap.m.Button[];

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.28
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.SegmentedButtonItem[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a button from the aggregation <code>buttons</code>.
       * @param vButton The button to remove or its index or id
       * @returns The removed button or <code>null</code>
      */
      removeButton(vButton: number | string | sap.m.Button): sap.m.Button;

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @since 1.28
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.SegmentedButtonItem): sap.m.SegmentedButtonItem;

      /**
       * Sets a new value for property <code>enabled</code>.Disables all the buttons in the SegmentedButton
       * control. When disabled all the buttons look grey and you cannot focus or click on them.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.SegmentedButton;

      /**
       * Setter for association <code>selectedButton</code>.
       * @param vButton New value for association <code>setSelectedButton</code>   A sap.m.Button instance
       * which becomes the new target of this <code>selectedButton</code> association.   Alternatively, the
       * ID of a sap.m.Button instance may be given as a string.   If the value of null, undefined, or an
       * empty string is provided the first item will be selected.
       * @returns <code>this</code> this pointer for chaining
      */
      setSelectedButton(vButton: string | sap.m.Button | any | any): sap.m.SegmentedButton;

      /**
       * Sets a new value for property <code>width</code>.Defines the width of the SegmentedButton control.
       * If not set, it uses the minimum required width to make all buttons inside of the same size (based on
       * the biggest button).When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.SegmentedButton;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @since 1.28
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.SegmentedButton;

      /**
       * Unbinds property <code>selectedKey</code> from model data.
       * @since 1.28.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindSelectedKey(): sap.m.SegmentedButton;
    }
    /**
     * Type for <code>columnsItems</code> aggregation in P13nColumnsPanel control.
     * @resource sap/m/P13nColumnsItem.js
    */
    export class P13nColumnsItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nColumnsItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>columnKey</code>.This property contains the unique table column
       * key
       * @since 1.26.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Gets current value of property <code>index</code>.This property contains the index of a table column
       * @since 1.26.0
       * @returns Value of property <code>index</code>
      */
      getIndex(): number;

      /**
       * Returns a metadata object for class sap.m.P13nColumnsItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>total</code>.This property contains the total flag of a table
       * column.
       * @since 1.26.0
       * @returns Value of property <code>total</code>
      */
      getTotal(): boolean;

      /**
       * Gets current value of property <code>visible</code>.This property decides whether a P13nColumnsItem
       * is visible
       * @since 1.26.0
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.This property contains the with of a table column.
       * @since 1.26.0
       * @returns Value of property <code>width</code>
      */
      getWidth(): string;

      /**
       * Sets a new value for property <code>columnKey</code>.This property contains the unique table column
       * keyWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @since 1.26.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nColumnsItem;

      /**
       * Sets a new value for property <code>index</code>.This property contains the index of a table
       * columnWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.26.0
       * @param iIndex New value for property <code>index</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIndex(iIndex: number): sap.m.P13nColumnsItem;

      /**
       * Sets a new value for property <code>total</code>.This property contains the total flag of a table
       * column.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.26.0
       * @param bTotal New value for property <code>total</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTotal(bTotal: boolean): sap.m.P13nColumnsItem;

      /**
       * Sets a new value for property <code>visible</code>.This property decides whether a P13nColumnsItem
       * is visibleWhen called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @since 1.26.0
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.P13nColumnsItem;

      /**
       * Sets a new value for property <code>width</code>.This property contains the with of a table
       * column.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.26.0
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: string): sap.m.P13nColumnsItem;
    }
    /**
     * <code>sap.m.StandardListItem</code> is a list item providing the most common use cases, e.g. image,
     * title and description.
     * @resource sap/m/StandardListItem.js
    */
    export class StandardListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new StandardListItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>activeIcon</code>.Defines the icon that is shown while the list
       * item is pressed.
       * @returns Value of property <code>activeIcon</code>
      */
      getActiveIcon(): any;

      /**
       * Gets current value of property <code>adaptTitleSize</code>.By default, the title size adapts to the
       * available space and gets bigger if the description is empty. If you have list items with and without
       * descriptions, this results in titles with different sizes. In this case, it can be better to switch
       * the size adaption off by setting this property to <code>false</code>.Default value is
       * <code>true</code>.
       * @since 1.16.3
       * @returns Value of property <code>adaptTitleSize</code>
      */
      getAdaptTitleSize(): boolean;

      /**
       * Gets current value of property <code>description</code>.Defines the additional information for the
       * title.<b>Note:</b> This is only visible when the <code>title</code> property is not empty.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>icon</code>.Defines the list item icon.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.By default, one or more requests are
       * sent to get the density perfect version of the icon if the given version of the icon doesn't exist
       * on the server.<b>Note:<b> If bandwidth is a key factor for the application, set this value to
       * <code>false</code>.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Gets current value of property <code>iconInset</code>.Defines the indentation of the icon. If set to
       * <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of
       * the list item.Default value is <code>true</code>.
       * @returns Value of property <code>iconInset</code>
      */
      getIconInset(): boolean;

      /**
       * Gets current value of property <code>info</code>.Defines an additional information text.
       * @returns Value of property <code>info</code>
      */
      getInfo(): string;

      /**
       * Gets current value of property <code>infoState</code>.Defines the state of the information text,
       * e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.Default value is
       * <code>None</code>.
       * @returns Value of property <code>infoState</code>
      */
      getInfoState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>infoTextDirection</code>.Defines the <code>info</code>
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>infoTextDirection</code>
      */
      getInfoTextDirection(): sap.ui.core.TextDirection;

      /**
       * Returns a metadata object for class sap.m.StandardListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>title</code>.Defines the title of the list item.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleTextDirection</code>.Defines the <code>title</code> text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>titleTextDirection</code>
      */
      getTitleTextDirection(): sap.ui.core.TextDirection;

      /**
       * Sets a new value for property <code>activeIcon</code>.Defines the icon that is shown while the list
       * item is pressed.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sActiveIcon New value for property <code>activeIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setActiveIcon(sActiveIcon: any): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>adaptTitleSize</code>.By default, the title size adapts to the
       * available space and gets bigger if the description is empty. If you have list items with and without
       * descriptions, this results in titles with different sizes. In this case, it can be better to switch
       * the size adaption off by setting this property to <code>false</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.16.3
       * @param bAdaptTitleSize New value for property <code>adaptTitleSize</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAdaptTitleSize(bAdaptTitleSize: boolean): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>description</code>.Defines the additional information for the
       * title.<b>Note:</b> This is only visible when the <code>title</code> property is not empty.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>icon</code>.Defines the list item icon.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.By default, one or more requests are
       * sent to get the density perfect version of the icon if the given version of the icon doesn't exist
       * on the server.<b>Note:<b> If bandwidth is a key factor for the application, set this value to
       * <code>false</code>.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>iconInset</code>.Defines the indentation of the icon. If set to
       * <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of
       * the list item.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bIconInset New value for property <code>iconInset</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconInset(bIconInset: boolean): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>info</code>.Defines an additional information text.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sInfo New value for property <code>info</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfo(sInfo: string): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>infoState</code>.Defines the state of the information text, e.g.
       * <code>Error</code>, <code>Warning</code>, <code>Success</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>None</code>.
       * @param sInfoState New value for property <code>infoState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfoState(sInfoState: sap.ui.core.ValueState): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>infoTextDirection</code>.Defines the <code>info</code>
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sInfoTextDirection New value for property <code>infoTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInfoTextDirection(sInfoTextDirection: sap.ui.core.TextDirection): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>title</code>.Defines the title of the list item.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.StandardListItem;

      /**
       * Sets a new value for property <code>titleTextDirection</code>.Defines the <code>title</code> text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.StandardListItem;
    }
    /**
     * The <code>PlanningCalendar</code> can display rows with appointments for different persons.It is
     * possible to define different views and switch between the views.You can add your own buttons or
     * other controls to the toolbar.<b>Note:</b> The <code>PlanningCalendar</code> uses parts of the
     * <code>sap.ui.unified</code> library.If the <code>sap.ui.unified</code> library is not loaded before
     * the <code>PlanningCalendar</code> is loaded,it will be loaded after the
     * <code>PlanningCalendar</code> is loaded.This could lead to a waiting time before a
     * <code>PlanningCalendar</code> is used for the first time.To prevent this, applications using the
     * <code>PlanningCalendar</code> should also load the <code>sap.ui.unified</code> library.
     * @resource sap/m/PlanningCalendar.js
    */
    export class PlanningCalendar extends sap.ui.core.Control {


      /**
       * Constructor for a new <code>PlanningCalendar</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sID ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sID: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @since 1.40.0
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.PlanningCalendar;

      /**
       * Adds some row to the aggregation <code>rows</code>.
       * @param oRow the row to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addRow(oRow: sap.m.PlanningCalendarRow): sap.m.PlanningCalendar;

      /**
       * Adds some specialDate to the aggregation <code>specialDates</code>.
       * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.PlanningCalendar;

      /**
       * Adds some toolbarContent to the aggregation <code>toolbarContent</code>.
       * @param oToolbarContent the toolbarContent to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addToolbarContent(oToolbarContent: sap.ui.core.Control): sap.m.PlanningCalendar;

      /**
       * Adds some view to the aggregation <code>views</code>.
       * @param oView the view to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addView(oView: sap.m.PlanningCalendarView): sap.m.PlanningCalendar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>appointmentSelect</code> event of this
       * <code>sap.m.PlanningCalendar</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PlanningCalendar</code> itself.Fired if an appointment was selected
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PlanningCalendar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAppointmentSelect(oData: any, fnFunction: any, oListener?: any): sap.m.PlanningCalendar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>intervalSelect</code> event of this
       * <code>sap.m.PlanningCalendar</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PlanningCalendar</code> itself.Fired if an interval was selected in the header
       * calendar or in the row
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PlanningCalendar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachIntervalSelect(oData: any, fnFunction: any, oListener?: any): sap.m.PlanningCalendar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>rowSelectionChange</code> event of this
       * <code>sap.m.PlanningCalendar</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PlanningCalendar</code> itself.Fires when row selection is changed
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PlanningCalendar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachRowSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.PlanningCalendar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this
       * <code>sap.m.PlanningCalendar</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PlanningCalendar</code> itself.<code>startDate</code> was changed while
       * navigating in <code>PlanningCalendar</code>
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PlanningCalendar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachStartDateChange(oData: any, fnFunction: any, oListener?: any): sap.m.PlanningCalendar;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>viewChange</code> event of this
       * <code>sap.m.PlanningCalendar</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.PlanningCalendar</code> itself.<code>viewKey</code> was changed by user
       * interaction
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.PlanningCalendar</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachViewChange(oData: any, fnFunction: any, oListener?: any): sap.m.PlanningCalendar;

      /**
       * Destroys all the rows in the aggregation <code>rows</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyRows(): sap.m.PlanningCalendar;

      /**
       * Destroys all the specialDates in the aggregation <code>specialDates</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySpecialDates(): sap.m.PlanningCalendar;

      /**
       * Destroys all the toolbarContent in the aggregation <code>toolbarContent</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyToolbarContent(): sap.m.PlanningCalendar;

      /**
       * Destroys all the views in the aggregation <code>views</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyViews(): sap.m.PlanningCalendar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>appointmentSelect</code> event of this
       * <code>sap.m.PlanningCalendar</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAppointmentSelect(fnFunction: any, oListener: any): sap.m.PlanningCalendar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>intervalSelect</code> event of this
       * <code>sap.m.PlanningCalendar</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachIntervalSelect(fnFunction: any, oListener: any): sap.m.PlanningCalendar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>rowSelectionChange</code> event of
       * this <code>sap.m.PlanningCalendar</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachRowSelectionChange(fnFunction: any, oListener: any): sap.m.PlanningCalendar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this
       * <code>sap.m.PlanningCalendar</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachStartDateChange(fnFunction: any, oListener: any): sap.m.PlanningCalendar;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>viewChange</code> event of this
       * <code>sap.m.PlanningCalendar</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachViewChange(fnFunction: any, oListener: any): sap.m.PlanningCalendar;


      /**
       * Fires event <code>appointmentSelect</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>appointment</code> of type
       * <code>sap.ui.unified.CalendarAppointment</code>Selected
       * appointment</li><li><code>appointments</code> of type
       * <code>sap.ui.unified.CalendarAppointment[]</code>Selected appointments in case a group appointment
       * is selected</li><li><code>multiSelect</code> of type <code>boolean</code>If set, the appointment was
       * selected using multiple selection (e.g. Shift + single mouse click),meaning more than the current
       * appointment could be selected.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAppointmentSelect(mArguments: any): sap.m.PlanningCalendar;

      /**
       * Fires event <code>intervalSelect</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>startDate</code> of type <code>object</code>Start date of the selected
       * interval, as JavaScript date object.</li><li><code>endDate</code> of type
       * <code>object</code>Interval end date as JavaScript date object</li><li><code>subInterval</code> of
       * type <code>boolean</code>If set, the selected interval is a subinterval</li><li><code>row</code> of
       * type <code>sap.m.PlanningCalendarRow</code>Row of the selected interval</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireIntervalSelect(mArguments: any): sap.m.PlanningCalendar;

      /**
       * Fires event <code>rowSelectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>rows</code> of type <code>sap.m.PlanningCalendarRow[]</code>Array of rows
       * whose selection has changed.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireRowSelectionChange(mArguments: any): sap.m.PlanningCalendar;

      /**
       * Fires event <code>startDateChange</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireStartDateChange(mArguments: any): sap.m.PlanningCalendar;

      /**
       * Fires event <code>viewChange</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireViewChange(mArguments: any): sap.m.PlanningCalendar;

      /**
       * Gets current value of property <code>appointmentsReducedHeight</code>.If set the appointments
       * without text (only title) are rendered with a smaller height.<b>Note:</b> On phone devices this
       * property is ignored, appointments are always rendered in full heightto allow touching.Default value
       * is <code>false</code>.
       * @since 1.38.0
       * @returns Value of property <code>appointmentsReducedHeight</code>
      */
      getAppointmentsReducedHeight(): boolean;

      /**
       * Gets current value of property <code>appointmentsVisualization</code>.Defines the visualization of
       * the <code>CalendarAppoinment</code><b>Note:</b> The real visualization depends on the used
       * theme.Default value is <code>Standard</code>.
       * @since 1.40.0
       * @returns Value of property <code>appointmentsVisualization</code>
      */
      getAppointmentsVisualization(): sap.ui.unified.CalendarAppointmentVisualization;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
       * @since 1.40.0
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>height</code>.Height of the <code>PlanningCalendar</code>
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * ID of the element which is the current target of the association <code>legend</code>, or
       * <code>null</code>.
       * @since 1.40.0
      */
      getLegend(): any;

      /**
       * Gets current value of property <code>maxDate</code>.Maximum date that can be shown and selected in
       * the <code>PlanningCalendar</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>maxDate</code> is set to be before the <code>minDate</code>,the <code>minDate</code> is set to
       * the begin of the month of the <code>maxDate</code>.
       * @since 1.38.0
       * @returns Value of property <code>maxDate</code>
      */
      getMaxDate(): any;

      /**
       * Returns a metadata object for class sap.m.PlanningCalendar.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minDate</code>.Minimum date that can be shown and selected in
       * the <code>PlanningCalendar</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>minDate</code> is set to be after the <code>maxDate</code>,the <code>maxDate</code> is set to
       * the end of the month of the <code>minDate</code>.
       * @since 1.38.0
       * @returns Value of property <code>minDate</code>
      */
      getMinDate(): any;

      /**
       * Gets current value of property <code>noDataText</code>.This text is displayed when no rows are
       * assigned.
       * @returns Value of property <code>noDataText</code>
      */
      getNoDataText(): string;

      /**
       * Gets content of aggregation <code>rows</code>.rows of the <code>PlanningCalendar</code>
      */
      getRows(): sap.m.PlanningCalendarRow[];

      /**
       * Returns an array containing the selected rows. If no row is selected, an empty array is returned.
       * @returns selected rows
      */
      getSelectedRows(): sap.m.PlanningCalendarRow[];

      /**
       * Gets current value of property <code>showEmptyIntervalHeaders</code>.If set, interval headers are
       * shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.If not set, no
       * interval headers are shown if no <code>intervalHeaders</code> are assigned.<b>Note:</b> This
       * property is only used if <code>showIntervalHeaders</code> is set to <code>true</code>.Default value
       * is <code>true</code>.
       * @since 1.38.0
       * @returns Value of property <code>showEmptyIntervalHeaders</code>
      */
      getShowEmptyIntervalHeaders(): boolean;

      /**
       * Gets current value of property <code>showIntervalHeaders</code>.If set, interval headers are shown
       * like specified in <code>showEmptyIntervalHeaders</code>.If not set, no interval headers are shown
       * even if <code>intervalHeaders</code> are assigned.Default value is <code>true</code>.
       * @returns Value of property <code>showIntervalHeaders</code>
      */
      getShowIntervalHeaders(): boolean;

      /**
       * Gets current value of property <code>showRowHeaders</code>.If set, headers of the
       * <code>PlanningCalendarRows</code> are shown. This means the column with the headers is shown.If not
       * set, the header column is not shown at all, even if header information is provided.Default value is
       * <code>true</code>.
       * @returns Value of property <code>showRowHeaders</code>
      */
      getShowRowHeaders(): boolean;

      /**
       * Gets current value of property <code>singleSelection</code>.If set, only a single row can be
       * selectedDefault value is <code>true</code>.
       * @returns Value of property <code>singleSelection</code>
      */
      getSingleSelection(): boolean;

      /**
       * Gets content of aggregation <code>specialDates</code>.Date range along with a type to visualize
       * special days in the header calendar.If one day is assigned to more than one type, only the first one
       * will be used.
      */
      getSpecialDates(): sap.ui.unified.DateTypeRange[];

      /**
       * Gets current value of property <code>startDate</code>.Start date of the row, as JavaScript date
       * object. As a default the current date is used.
       * @returns Value of property <code>startDate</code>
      */
      getStartDate(): any;

      /**
       * Gets content of aggregation <code>toolbarContent</code>.The content of the toolbar.
      */
      getToolbarContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>viewKey</code>.Key of the <code>PlanningCalendarView</code>
       * used for the output. The default value uses a default view.If you are using own views, the keys of
       * these views must be used instead.Default value is
       * <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
       * @returns Value of property <code>viewKey</code>
      */
      getViewKey(): string;

      /**
       * Gets content of aggregation <code>views</code>.Views of the <code>PlanningCalendar</code>.If not
       * set, three default views are used to allow you to switch between hour, day and month granularity.The
       * default views have the keys defined in </code>sap.ui.unified.CalendarIntervalType</code>
      */
      getViews(): sap.m.PlanningCalendarView[];

      /**
       * Gets current value of property <code>width</code>.Width of the <code>PlanningCalendar</code>
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.PlanningCalendarRow</code> in the aggregation
       * <code>rows</code>.and returns its index if found or -1 otherwise.
       * @param oRow The row whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfRow(oRow: sap.m.PlanningCalendarRow): number;

      /**
       * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation
       * <code>specialDates</code>.and returns its index if found or -1 otherwise.
       * @param oSpecialDate The specialDate whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation
       * <code>toolbarContent</code>.and returns its index if found or -1 otherwise.
       * @param oToolbarContent The toolbarContent whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfToolbarContent(oToolbarContent: sap.ui.core.Control): number;

      /**
       * Checks for the provided <code>sap.m.PlanningCalendarView</code> in the aggregation
       * <code>views</code>.and returns its index if found or -1 otherwise.
       * @param oView The view whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfView(oView: sap.m.PlanningCalendarView): number;

      /**
       * Inserts a row into the aggregation <code>rows</code>.
       * @param oRow the row to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the row should be inserted at; for             a
       * negative value of <code>iIndex</code>, the row is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the row is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertRow(oRow: sap.m.PlanningCalendarRow, iIndex: number): sap.m.PlanningCalendar;

      /**
       * Inserts a specialDate into the aggregation <code>specialDates</code>.
       * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for            
       * a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value     
       *        greater than the current size of the aggregation, the specialDate is inserted at            
       * the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.PlanningCalendar;

      /**
       * Inserts a toolbarContent into the aggregation <code>toolbarContent</code>.
       * @param oToolbarContent the toolbarContent to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the toolbarContent should be inserted at; for          
       *   a negative value of <code>iIndex</code>, the toolbarContent is inserted at position 0; for a value
       *             greater than the current size of the aggregation, the toolbarContent is inserted at     
       *        the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertToolbarContent(oToolbarContent: sap.ui.core.Control, iIndex: number): sap.m.PlanningCalendar;

      /**
       * Inserts a view into the aggregation <code>views</code>.
       * @param oView the view to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the view should be inserted at; for             a
       * negative value of <code>iIndex</code>, the view is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the view is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertView(oView: sap.m.PlanningCalendarView, iIndex: number): sap.m.PlanningCalendar;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @since 1.40.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>rows</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllRows(): sap.m.PlanningCalendarRow[];

      /**
       * Removes all the controls from the aggregation <code>specialDates</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];

      /**
       * Removes all the controls from the aggregation <code>toolbarContent</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllToolbarContent(): sap.ui.core.Control[];

      /**
       * Removes all the controls from the aggregation <code>views</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllViews(): sap.m.PlanningCalendarView[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @since 1.40.0
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a row from the aggregation <code>rows</code>.
       * @param vRow The row to remove or its index or id
       * @returns The removed row or <code>null</code>
      */
      removeRow(vRow: number | string | sap.m.PlanningCalendarRow): sap.m.PlanningCalendarRow;

      /**
       * Removes a specialDate from the aggregation <code>specialDates</code>.
       * @param vSpecialDate The specialDate to remove or its index or id
       * @returns The removed specialDate or <code>null</code>
      */
      removeSpecialDate(vSpecialDate: number | string | sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;

      /**
       * Removes a toolbarContent from the aggregation <code>toolbarContent</code>.
       * @param vToolbarContent The toolbarContent to remove or its index or id
       * @returns The removed toolbarContent or <code>null</code>
      */
      removeToolbarContent(vToolbarContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Removes a view from the aggregation <code>views</code>.
       * @param vView The view to remove or its index or id
       * @returns The removed view or <code>null</code>
      */
      removeView(vView: number | string | sap.m.PlanningCalendarView): sap.m.PlanningCalendarView;

      /**
       * Selects or deselects all <code>PlanningCalendarRows</code>.<b>Note:</b> Selection only works if
       * <code>singleSelection</code> is not set
       * @param bSelect Indicator showing whether <code>PlanningCalendarRows</code> should be selected or
       * deselected
       * @returns <code>this</code> to allow method chaining
      */
      selectAllRows(bSelect: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>appointmentsReducedHeight</code>.If set the appointments without
       * text (only title) are rendered with a smaller height.<b>Note:</b> On phone devices this property is
       * ignored, appointments are always rendered in full heightto allow touching.When called with a value
       * of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @since 1.38.0
       * @param bAppointmentsReducedHeight New value for property <code>appointmentsReducedHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAppointmentsReducedHeight(bAppointmentsReducedHeight: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>appointmentsVisualization</code>.Defines the visualization of
       * the <code>CalendarAppoinment</code><b>Note:</b> The real visualization depends on the used
       * theme.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Standard</code>.
       * @since 1.40.0
       * @param sAppointmentsVisualization New value for property <code>appointmentsVisualization</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAppointmentsVisualization(sAppointmentsVisualization: sap.ui.unified.CalendarAppointmentVisualization): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>height</code>.Height of the <code>PlanningCalendar</code>When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.PlanningCalendar;

      /**
       * Sets the associated <code>legend</code>.
       * @since 1.40.0
       * @param oLegend ID of an element which becomes the new target of this legend association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLegend(oLegend: any | sap.ui.unified.CalendarLegend): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>maxDate</code>.Maximum date that can be shown and selected in
       * the <code>PlanningCalendar</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>maxDate</code> is set to be before the <code>minDate</code>,the <code>minDate</code> is set to
       * the begin of the month of the <code>maxDate</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.38.0
       * @param oMaxDate New value for property <code>maxDate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxDate(oMaxDate: any): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>minDate</code>.Minimum date that can be shown and selected in
       * the <code>PlanningCalendar</code>. This must be a JavaScript date object.<b>Note:</b> If the
       * <code>minDate</code> is set to be after the <code>maxDate</code>,the <code>maxDate</code> is set to
       * the end of the month of the <code>minDate</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @since 1.38.0
       * @param oMinDate New value for property <code>minDate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinDate(oMinDate: any): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>noDataText</code>.This text is displayed when no rows are
       * assigned.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sNoDataText New value for property <code>noDataText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNoDataText(sNoDataText: string): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>showEmptyIntervalHeaders</code>.If set, interval headers are
       * shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.If not set, no
       * interval headers are shown if no <code>intervalHeaders</code> are assigned.<b>Note:</b> This
       * property is only used if <code>showIntervalHeaders</code> is set to <code>true</code>.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @since 1.38.0
       * @param bShowEmptyIntervalHeaders New value for property <code>showEmptyIntervalHeaders</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowEmptyIntervalHeaders(bShowEmptyIntervalHeaders: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>showIntervalHeaders</code>.If set, interval headers are shown
       * like specified in <code>showEmptyIntervalHeaders</code>.If not set, no interval headers are shown
       * even if <code>intervalHeaders</code> are assigned.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowIntervalHeaders New value for property <code>showIntervalHeaders</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowIntervalHeaders(bShowIntervalHeaders: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>showRowHeaders</code>.If set, headers of the
       * <code>PlanningCalendarRows</code> are shown. This means the column with the headers is shown.If not
       * set, the header column is not shown at all, even if header information is provided.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bShowRowHeaders New value for property <code>showRowHeaders</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowRowHeaders(bShowRowHeaders: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>singleSelection</code>.If set, only a single row can be
       * selectedWhen called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bSingleSelection New value for property <code>singleSelection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSingleSelection(bSingleSelection: boolean): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>startDate</code>.Start date of the row, as JavaScript date
       * object. As a default the current date is used.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oStartDate New value for property <code>startDate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStartDate(oStartDate: any): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>viewKey</code>.Key of the <code>PlanningCalendarView</code> used
       * for the output. The default value uses a default view.If you are using own views, the keys of these
       * views must be used instead.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is
       * <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
       * @param sViewKey New value for property <code>viewKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setViewKey(sViewKey: string): sap.m.PlanningCalendar;

      /**
       * Sets a new value for property <code>width</code>.Width of the <code>PlanningCalendar</code>When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.PlanningCalendar;
    }
    /**
     * An item to be used in a TabContainer.
     * @resource sap/m/TabContainerItem.js
    */
    export class TabContainerItem extends sap.ui.core.Element {


      /**
       * Constructor for a new <code>TabContainerItem</code>.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.TabContainerItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemPropertyChanged</code> event of this
       * <code>sap.m.TabContainerItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TabContainerItem</code> itself.Sends information that some of the properties
       * have changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TabContainerItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemPropertyChanged(oData: any, fnFunction: any, oListener?: any): sap.m.TabContainerItem;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.TabContainerItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemPropertyChanged</code> event of
       * this <code>sap.m.TabContainerItem</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemPropertyChanged(fnFunction: any, oListener: any): sap.m.TabContainerItem;


      /**
       * Fires event <code>itemPropertyChanged</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>itemChanged</code> of type <code>sap.m.TabContainerItem</code>The item
       * changed.</li><li><code>propertyKey</code> of type <code>string</code>The key of the
       * property.</li><li><code>propertyValue</code> of type <code>mixed</code>The value of the
       * property.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemPropertyChanged(mArguments: any): sap.m.TabContainerItem;

      /**
       * Gets content of aggregation <code>content</code>.The content displayed for this item.
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>key</code>.Determines the name of the item. Can be used as
       * input for subsequent actions.
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.TabContainerItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>modified</code>.Shows if a control is edited (default is
       * false). Items that are marked as modified have a * symbol to indicate that they haven't been
       * saved.Default value is <code>false</code>.
       * @returns Value of property <code>modified</code>
      */
      getModified(): boolean;

      /**
       * Gets current value of property <code>name</code>.Determines the text to be displayed for the
       * item.Default value is <code></code>.
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.TabContainerItem;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>key</code>.Determines the name of the item. Can be used as input
       * for subsequent actions.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.TabContainerItem;

      /**
       * Sets a new value for property <code>modified</code>.Shows if a control is edited (default is false).
       * Items that are marked as modified have a * symbol to indicate that they haven't been saved.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bModified New value for property <code>modified</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setModified(bModified: boolean): sap.m.TabContainerItem;

      /**
       * Sets a new value for property <code>name</code>.Determines the text to be displayed for the
       * item.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.TabContainerItem;

      /**
       * Overwrites the method in order to suppress invalidation for some properties.
       * @param sName Property name to be set
       * @param vValue Property value to be set
       * @param bSuppressInvalidation Whether invalidation to be suppressed
       * @returns This instance for chaining
      */
      setProperty(sName: string, vValue: boolean | string | any, bSuppressInvalidation: boolean): sap.m.TabContainerItem;
    }
    /**
     * Table Personalization Dialog
     * @resource sap/m/TablePersoDialog.js
    */
    export class TablePersoDialog extends sap.ui.base.ManagedObject {


      /**
       * The TablePersoDialog can be used to display and allow modification of personalization settings
       * relating to a Table. It displays the columns of the table that it refers to by using<ul><li>The
       * result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers
       * a non-null value for a column</li><li>the column header control's 'text' property if no caption
       * property is available</li><li>the column header control's 'title' property if neither 'text' nor
       * 'caption' property are available</li><li>the column id is displayed as last fallback, if none of the
       * above is at hand. In that case, a warning is logged. </li></ul>Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId optional id for the new control; generated automatically if            no non-empty id is given
       * Note: this can be omitted, no matter            whether <code>mSettings</code> will be given or not!
       * @param mSettings optional map/JSON-object with initial settings for the            new component instance
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this
       * <code>sap.m.TablePersoDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TablePersoDialog</code> itself.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TablePersoDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancel(oData: any, fnFunction: any, oListener?: any): sap.m.TablePersoDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this
       * <code>sap.m.TablePersoDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TablePersoDialog</code> itself.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TablePersoDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachConfirm(oData: any, fnFunction: any, oListener?: any): sap.m.TablePersoDialog;

      /**
       * Destroys the persoService in the aggregation <code>persoService</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPersoService(): sap.m.TablePersoDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this
       * <code>sap.m.TablePersoDialog</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancel(fnFunction: any, oListener: any): sap.m.TablePersoDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this
       * <code>sap.m.TablePersoDialog</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachConfirm(fnFunction: any, oListener: any): sap.m.TablePersoDialog;


      /**
       * Fires event <code>cancel</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancel(mArguments: any): sap.m.TablePersoDialog;

      /**
       * Fires event <code>confirm</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireConfirm(mArguments: any): sap.m.TablePersoDialog;

      /**
       * Gets current value of property <code>columnInfoCallback</code>.
       * @returns Value of property <code>columnInfoCallback</code>
      */
      getColumnInfoCallback(): any;

      /**
       * Gets current value of property <code>contentHeight</code>.
       * @returns Value of property <code>contentHeight</code>
      */
      getContentHeight(): any;

      /**
       * Gets current value of property <code>contentWidth</code>.
       * @returns Value of property <code>contentWidth</code>
      */
      getContentWidth(): any;

      /**
       * Gets current value of property <code>hasGrouping</code>.
       * @returns Value of property <code>hasGrouping</code>
      */
      getHasGrouping(): boolean;

      /**
       * Gets current value of property <code>initialColumnState</code>.
       * @returns Value of property <code>initialColumnState</code>
      */
      getInitialColumnState(): any;

      /**
       * Returns a metadata object for class sap.m.TablePersoDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * ID of the element which is the current target of the association <code>persoDialogFor</code>, or
       * <code>null</code>.
      */
      getPersoDialogFor(): any;

      /**
       * Gets current value of property <code>persoMap</code>.
       * @returns Value of property <code>persoMap</code>
      */
      getPersoMap(): any;

      /**
       * Gets content of aggregation <code>persoService</code>.Refers to the service for reading and writing
       * the personalization.
      */
      getPersoService(): any;

      /**
       * Gets current value of property <code>showResetAll</code>.
       * @returns Value of property <code>showResetAll</code>
      */
      getShowResetAll(): boolean;

      /**
       * Gets current value of property <code>showSelectAll</code>.
       * @returns Value of property <code>showSelectAll</code>
      */
      getShowSelectAll(): boolean;

      /**
       * Initializes the TablePersoDialog instance after creation.
      */
      init(): void;

      /**
       * Sets the content of the dialog, being list items representingthe associated table's column settings,
       * and opens the dialog
      */
      open(): void;

      /**
       * Returns the personalizations made. Currently supportsa 'columns' property which holds an array of
       * settings,one element per column in the associated table. The elementcontains column-specific
       * information as follows: id: column id;order: new order; text: the column's header text that was
       * displayedin the dialog; visible: visibility (true or false).
       * @returns the personalization data
      */
      retrievePersonalizations(): any;

      /**
       * Sets a new value for property <code>columnInfoCallback</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oColumnInfoCallback New value for property <code>columnInfoCallback</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnInfoCallback(oColumnInfoCallback: any): sap.m.TablePersoDialog;

      /**
       * Sets a new value for property <code>contentHeight</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sContentHeight New value for property <code>contentHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentHeight(sContentHeight: any): sap.m.TablePersoDialog;

      /**
       * Sets a new value for property <code>contentWidth</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sContentWidth New value for property <code>contentWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentWidth(sContentWidth: any): sap.m.TablePersoDialog;

      /**
       * Setter to turn on/ switch off TablePersoDialog's grouping mode.
       * @param bHasGrouping groping mode on or off.
       * @returns the TablePersoDialog instance.
      */
      setHasGrouping(bHasGrouping: boolean): TablePersoDialog;

      /**
       * Sets a new value for property <code>initialColumnState</code>.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oInitialColumnState New value for property <code>initialColumnState</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialColumnState(oInitialColumnState: any): sap.m.TablePersoDialog;

      /**
       * Sets the associated <code>persoDialogFor</code>.
       * @param oPersoDialogFor ID of an element which becomes the new target of this persoDialogFor
       * association; alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPersoDialogFor(oPersoDialogFor: any | sap.m.Table): sap.m.TablePersoDialog;

      /**
       * Sets a new value for property <code>persoMap</code>.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param oPersoMap New value for property <code>persoMap</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPersoMap(oPersoMap: any): sap.m.TablePersoDialog;

      /**
       * Sets the aggregated <code>persoService</code>.
       * @param oPersoService The persoService to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPersoService(oPersoService: any): sap.m.TablePersoDialog;

      /**
       * Setter to show/hide TablePersoDialog's 'Undo Personalization' button.
       * @param bShowResetAll 'undo Personalization' button visible or not.
       * @returns the TablePersoDialog instance.
      */
      setShowResetAll(bShowResetAll: boolean): TablePersoDialog;

      /**
       * Setter to show/hide TablePersoDialog's 'selectAll' checkbox.
       * @param bShowSelectAll selectAll checkbox visible or not.
       * @returns the TablePersoDialog instance.
      */
      setShowSelectAll(bShowSelectAll: boolean): TablePersoDialog;
    }
    /**
     * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.It is derived from
     * a core Item, but does not support the base class properties "textDirection" and "enabled", setting
     * these properties will not have any effects.
     * @resource sap/m/ViewSettingsItem.js
    */
    export class ViewSettingsItem extends sap.ui.core.Item {


      /**
       * Constructor for a new ViewSettingsItem.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>itemPropertyChanged</code> event of this
       * <code>sap.m.ViewSettingsItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsItem</code> itself.Let the outside world know that some of its
       * properties has changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachItemPropertyChanged(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>itemPropertyChanged</code> event of
       * this <code>sap.m.ViewSettingsItem</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachItemPropertyChanged(fnFunction: any, oListener: any): sap.m.ViewSettingsItem;


      /**
       * Fires event <code>itemPropertyChanged</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>changedItem</code> of type <code>sap.m.ViewSettingsItem</code>Instance of
       * the item that changed.</li><li><code>propertyKey</code> of type <code>string</code>Key of the
       * changed property.</li><li><code>propertyValue</code> of type <code>mixed</code>Value of the changed
       * property.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireItemPropertyChanged(mArguments: any): sap.m.ViewSettingsItem;

      /**
       * Returns a metadata object for class sap.m.ViewSettingsItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>selected</code>.Selected state of the item. If set to "true",
       * the item will be displayed as selected in the view settings dialog.Default value is
       * <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Sets a new value for property <code>selected</code>.Selected state of the item. If set to "true",
       * the item will be displayed as selected in the view settings dialog.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bSelected New value for property <code>selected</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSelected(bSelected: boolean): sap.m.ViewSettingsItem;
    }
    /**
     * Represents an Icon used to separate 2 tab filters.
     * @resource sap/m/IconTabSeparator.js
    */
    export class IconTabSeparator extends sap.ui.core.Element {


      /**
       * Constructor for a new IconTabSeparator.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>icon</code>.The icon to display for this separator. If no icon
       * is given, a separator line is used instead.Default value is <code></code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets current value of property <code>iconDensityAware</code>.If set to true, it sends one or more
       * requests,trying to get the density perfect version of the image if this version ofthe image doesn't
       * exist on the server. Default value is set to true.If bandwidth is key for the application, set this
       * value to false.Default value is <code>true</code>.
       * @returns Value of property <code>iconDensityAware</code>
      */
      getIconDensityAware(): boolean;

      /**
       * Returns a metadata object for class sap.m.IconTabSeparator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Sets a new value for property <code>icon</code>.The icon to display for this separator. If no icon
       * is given, a separator line is used instead.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.IconTabSeparator;

      /**
       * Sets a new value for property <code>iconDensityAware</code>.If set to true, it sends one or more
       * requests,trying to get the density perfect version of the image if this version ofthe image doesn't
       * exist on the server. Default value is set to true.If bandwidth is key for the application, set this
       * value to false.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bIconDensityAware New value for property <code>iconDensityAware</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIconDensityAware(bIconDensityAware: boolean): sap.m.IconTabSeparator;
    }
    /**
     * This control is used as a wrapper for a group of sap.m.RadioButton controls, which then can be used
     * as a single UI element.You can select only one of the grouped radio buttons at a time.The
     * RadioButtonGroup lets you do things like attach a single event handler on a group of buttons, rather
     * than on each individual button.The grouped radio buttons can be arranged within different number of
     * columns.Based on the number of specified columns and the number of radio buttons used, different
     * layout types can be achieved - as a 'matrix',horizontally or vertically aligned radio buttons.
     * @resource sap/m/RadioButtonGroup.js
    */
    export class RadioButtonGroup extends sap.ui.core.Control {


      /**
       * Constructor for a new RadioButtonGroup.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.RadioButtonGroup;

      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.RadioButtonGroup;

      /**
       * Adds a new radio button to the group.
       * @param oButton The button which will be added to the group
       * @returns Pointer to the control instance for chaining
      */
      addButton(oButton: sap.m.RadioButton): sap.m.RadioButtonGroup;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this
       * <code>sap.m.RadioButtonGroup</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.RadioButtonGroup</code> itself.Fires when selection is changed by user
       * interaction.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.RadioButtonGroup</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelect(oData: any, fnFunction: any, oListener?: any): sap.m.RadioButtonGroup;

      /**
       * Binds aggregation <code>buttons</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindButtons(oBindingInfo: any): sap.m.RadioButtonGroup;

      /**
       * Creates a new instance of RadioButtonGroup, with the same settings as the RadioButtonGroupon which
       * the method is called.Event handlers are not cloned.
       * @returns New instance of RadioButtonGroup
      */
      clone(): sap.m.RadioButtonGroup;

      /**
       * Destroys all radio buttons.
       * @returns Pointer to the control instance for chaining
      */
      destroyButtons(): sap.m.RadioButtonGroup;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this
       * <code>sap.m.RadioButtonGroup</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelect(fnFunction: any, oListener: any): sap.m.RadioButtonGroup;


      /**
       * Fires event <code>select</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedIndex</code> of type <code>int</code>Index of the selected
       * RadioButton.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelect(mArguments: any): sap.m.RadioButtonGroup;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets content of aggregation <code>buttons</code>.Returns a list of the RadioButtons in a
       * RadioButtonGroup
      */
      getButtons(): sap.m.RadioButton[];

      /**
       * Gets current value of property <code>columns</code>.Specifies the maximum number of radio buttons
       * displayed in one line.Default value is <code>1</code>.
       * @returns Value of property <code>columns</code>
      */
      getColumns(): number;

      /**
       * Gets current value of property <code>editable</code>.Specifies whether the user can change the
       * selected value of the RadioButtonGroup.When the property is set to false, the control obtains visual
       * stylesdifferent from its visual styles for the normal and the disabled state.Additionally, the
       * control is no longer interactive, but can receive focus.Default value is <code>true</code>.
       * @returns Value of property <code>editable</code>
      */
      getEditable(): boolean;

      /**
       * Gets current value of property <code>enabled</code>.Switches the enabled state of the control. All
       * Radio Buttons inside a disabled group are disabled. Default value is “true”.Default value is
       * <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Returns a metadata object for class sap.m.RadioButtonGroup.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Returns the selected radio button.
       * @returns The selected radio button
      */
      getSelectedButton(): sap.m.RadioButton;

      /**
       * Gets current value of property <code>selectedIndex</code>.Determines the index of the
       * selected/checked RadioButton. Default is 0.If no radio button is selected, the selectedIndex
       * property will return -1.Default value is <code>0</code>.
       * @returns Value of property <code>selectedIndex</code>
      */
      getSelectedIndex(): number;

      /**
       * Gets current value of property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>valueState</code>.Тhe value state to be displayed for the radio
       * button. Possible values are: sap.ui.core.ValueState.Error,sap.ui.core.ValueState.Warning,
       * sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.Note: Setting this attribute to
       * sap.ui.core.ValueState.Error when the accessibility feature is enabled,sets the value of the invalid
       * propery for the whole RadioButtonGroup to “true”.Default value is <code>None</code>.
       * @returns Value of property <code>valueState</code>
      */
      getValueState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>width</code>.Specifies the width of the RadioButtonGroup.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Checks for the provided <code>sap.m.RadioButton</code> in the aggregation <code>buttons</code>.and
       * returns its index if found or -1 otherwise.
       * @param oButton The button whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfButton(oButton: sap.m.RadioButton): number;

      /**
       * Adds a new radio button to the group at a specified index.
       * @param oButton The radio button which will be added to the group
       * @param iIndex The index, at which the radio button will be added
       * @returns Pointer to the control instance for chaining
      */
      insertButton(oButton: sap.m.RadioButton, iIndex: number): sap.m.RadioButtonGroup;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes all radio buttons.
       * @returns Array of removed buttons or null
      */
      removeAllButtons(): any[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a radio button from the group.
       * @returns The removed radio button
      */
      removeButton(): sap.m.RadioButton;

      /**
       * Sets a new value for property <code>columns</code>.Specifies the maximum number of radio buttons
       * displayed in one line.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>1</code>.
       * @param iColumns New value for property <code>columns</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumns(iColumns: number): sap.m.RadioButtonGroup;

      /**
       * Sets the editable property of all radio buttons in the group.Non editable radio buttons can still
       * obtain focus.
       * @param bEditable Defines whether the radio buttons should be interactive.
       * @returns Pointer to the control instance for chaining
      */
      setEditable(bEditable: boolean): sap.m.RadioButtonGroup;

      /**
       * Sets the enabled property of all radio buttons in the group.
       * @param bEnabled Defines whether the radio buttons should be interactive.
       * @returns Pointer to the control instance for chaining
      */
      setEnabled(bEnabled: boolean): sap.m.RadioButtonGroup;

      /**
       * Sets the selected sap.m.RadioButton using sap.m.RadioButton.
       * @param oSelectedButton The item to be selected
       * @returns Pointer to the control instance for chaining
      */
      setSelectedButton(oSelectedButton: sap.m.RadioButton): sap.m.RadioButtonGroup;

      /**
       * Sets the selected sap.m.RadioButton using index.
       * @param iSelectedIndex The index of the radio button which has to be selected
       * @returns Pointer to the control instance for chaining
      */
      setSelectedIndex(iSelectedIndex: number): sap.m.RadioButtonGroup;

      /**
       * Sets a new value for property <code>textDirection</code>.This property specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.RadioButtonGroup;

      /**
       * Sets ValueState of all radio buttons in the group.
       * @param sValueState The value state of the radio group - none, success, warning, error.
       * @returns Pointer to the control instance for chaining
      */
      setValueState(sValueState: string): sap.m.RadioButtonGroup;

      /**
       * Sets a new value for property <code>width</code>.Specifies the width of the RadioButtonGroup.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.RadioButtonGroup;

      /**
       * Unbinds aggregation <code>buttons</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindButtons(): sap.m.RadioButtonGroup;
    }
    /**
     * The P13nColumnsPanel control is used to define column-specific settings for table personalization.
     * @resource sap/m/P13nColumnsPanel.js
    */
    export class P13nColumnsPanel extends sap.m.P13nPanel {


      /**
       * Constructor for a new P13nColumnsPanel.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Add ColumnsItem to columnsItems aggregation
       * @since 1.26.0
       * @param oColumnsItem is the new ColumnsItem that shall be added
       * @returns <code>this</code> to allow method chaining.
      */
      addColumnsItem(oColumnsItem: sap.m.P13nColumnsItem): sap.m.P13nColumnsPanel;

      /**
       * Add item to items aggregation
       * @since 1.26.0
       * @param oItem is the new item that shall be added
       * @returns <code>this</code> to allow method chaining.
      */
      addItem(oItem: sap.m.P13nItem): sap.m.P13nColumnsPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>addColumnsItem</code> event of this
       * <code>sap.m.P13nColumnsPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nColumnsPanel</code> itself.Event raised when a <code>columnsItem</code> is
       * added.
       * @since 1.26.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nColumnsPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAddColumnsItem(oData: any, fnFunction: any, oListener?: any): sap.m.P13nColumnsPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>changeColumnsItems</code> event of this
       * <code>sap.m.P13nColumnsPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nColumnsPanel</code> itself.Event raised if <code>columnsItems</code> is
       * changed or new one needs to be created in the model.
       * @since 1.26.7
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nColumnsPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChangeColumnsItems(oData: any, fnFunction: any, oListener?: any): sap.m.P13nColumnsPanel;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>setData</code> event of this
       * <code>sap.m.P13nColumnsPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nColumnsPanel</code> itself.Event raised if <code>setData</code> is called in
       * model. The event serves the purpose of minimizing such calls since they cantake up a lot of
       * performance.
       * @since 1.26.7
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nColumnsPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSetData(oData: any, fnFunction: any, oListener?: any): sap.m.P13nColumnsPanel;

      /**
       * Binds aggregation <code>columnsItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.26.0
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindColumnsItems(oBindingInfo: any): sap.m.P13nColumnsPanel;

      /**
       * Destroy all instances from columnsItems aggregation
       * @since 1.26.0
       * @returns <code>this</code> to allow method chaining.
      */
      destroyColumnsItems(): sap.m.P13nColumnsPanel;

      /**
       * Destroy all items from items aggregation
       * @since 1.26.0
       * @returns <code>this</code> to allow method chaining.
      */
      destroyItems(): sap.m.P13nColumnsPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>addColumnsItem</code> event of this
       * <code>sap.m.P13nColumnsPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAddColumnsItem(fnFunction: any, oListener: any): sap.m.P13nColumnsPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>changeColumnsItems</code> event of
       * this <code>sap.m.P13nColumnsPanel</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @since 1.26.7
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChangeColumnsItems(fnFunction: any, oListener: any): sap.m.P13nColumnsPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>setData</code> event of this
       * <code>sap.m.P13nColumnsPanel</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26.7
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSetData(fnFunction: any, oListener: any): sap.m.P13nColumnsPanel;

      /**
       * Cleans up before destruction.
      */
      exit(): void;


      /**
       * Fires event <code>addColumnsItem</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>newItem</code> of type
       * <code>sap.m.P13nColumnsItem</code><code>columnsItem</code> that needs to be added in the
       * model.</li></ul>
       * @since 1.26.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAddColumnsItem(mArguments: any): sap.m.P13nColumnsPanel;

      /**
       * Fires event <code>changeColumnsItems</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>newItems</code> of type <code>sap.m.P13nColumnsItem[]</code>Contains
       * <code>columnsItems</code> that needs to be created in the model.</li><li><code>existingItems</code>
       * of type <code>sap.m.P13nColumnsItem[]</code>Contains <code>columnsItems</code> that needs to be
       * changed in the model.</li></ul>
       * @since 1.26.7
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChangeColumnsItems(mArguments: any): sap.m.P13nColumnsPanel;

      /**
       * Fires event <code>setData</code> to attached listeners.
       * @since 1.26.7
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSetData(mArguments: any): sap.m.P13nColumnsPanel;

      /**
       * Gets content of aggregation <code>columnsItems</code>.List of columns that has been changed.
       * @since 1.26.0
      */
      getColumnsItems(): sap.m.P13nColumnsItem[];

      /**
       * Returns a metadata object for class sap.m.P13nColumnsPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Delivers a payload for columnsPanel that can be used at consumer side
       * @since 1.26.7
       * @returns oPayload, which contains useful information
      */
      getOkPayload(): any;

      /**
       * Delivers a payload for columnsPanel that can be used at consumer side
       * @since 1.28
       * @returns oPayload, which contains useful information
      */
      getResetPayload(): any;

      /**
       * Gets current value of property <code>visibleItemsThreshold</code>.Specifies a threshold of visible
       * items. If the end user makes a lot of columns visible, this might cause performance to slow
       * down.When this happens, the user can receive a corresponding warning triggered by the
       * <code>visibleItemsThreshold</code> property. Theproperty needs to be activated and set to the
       * required value by the consuming application to ensure that the warning message isshown when the
       * threshold has been exceeded. In the following example the message will be shown if more than 100
       * visible columns areselected:<pre>customData&gt;core:CustomData
       * key=&quot;p13nDialogSettings&quot;value='\{&quot;columns&quot;:\{&quot;visible&quot;: true,
       * &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;/customData&gt;</pre>Default
       * value is <code>-1</code>.
       * @since 1.26.7
       * @returns Value of property <code>visibleItemsThreshold</code>
      */
      getVisibleItemsThreshold(): number;

      /**
       * Checks for the provided <code>sap.m.P13nColumnsItem</code> in the aggregation
       * <code>columnsItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.26.0
       * @param oColumnsItem The columnsItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfColumnsItem(oColumnsItem: sap.m.P13nColumnsItem): number;

      /**
       * Insert ColumnsItem to columnsItems aggregation
       * @since 1.26.0
       * @param iIndex is the index where the columnsItem item shall be inserted
       * @param oColumnsItem is the new columnsItem that shall be inserted
       * @returns <code>this</code> to allow method chaining.
      */
      insertColumnsItem(iIndex: number, oColumnsItem: sap.m.P13nColumnsItem): sap.m.P13nColumnsPanel;

      /**
       * Add item to items aggregation
       * @since 1.26.0
       * @param iIndex is the index where the new item shall be inserted
       * @param oItem is the new item that shall be added
       * @returns <code>this</code> to allow method chaining.
      */
      insertItem(oItem: sap.m.P13nItem, iIndex: number): sap.m.P13nColumnsPanel;

      /**
       * This method does a re-initialization of the panel
       * @since 1.28
      */
      reInitialize(): void;

      /**
       * Remove all ColumnsItems from columnsItems aggregation
       * @since 1.26.0
       * @returns An array of the removed items (might be empty).
      */
      removeAllColumnsItems(): sap.m.P13nColumnsItem[];

      /**
       * Remove all item from items aggregation
       * @since 1.26.0
       * @returns An array of the removed items (might be empty).
      */
      removeAllItems(): sap.m.P13nItem[];

      /**
       * Remove ColumnsItem from columnsItems aggregation
       * @since 1.26.0
       * @param oColumnsItem is the ColumnsItem that shall be removed
       * @returns The removed item or null.
      */
      removeColumnsItem(oColumnsItem: sap.m.P13nColumnsItem): sap.m.P13nColumnsItem;

      /**
       * Remove item from items aggregation
       * @since 1.26.0
       * @param oItem is the item that shall be removed
       * @returns The removed item or null.
      */
      removeItem(oItem: sap.m.P13nItem): sap.m.P13nItem;

      /**
       * Sets a new value for property <code>visibleItemsThreshold</code>.Specifies a threshold of visible
       * items. If the end user makes a lot of columns visible, this might cause performance to slow
       * down.When this happens, the user can receive a corresponding warning triggered by the
       * <code>visibleItemsThreshold</code> property. Theproperty needs to be activated and set to the
       * required value by the consuming application to ensure that the warning message isshown when the
       * threshold has been exceeded. In the following example the message will be shown if more than 100
       * visible columns areselected:<pre>customData&gt;core:CustomData
       * key=&quot;p13nDialogSettings&quot;value='\{&quot;columns&quot;:\{&quot;visible&quot;: true,
       * &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;/customData&gt;</pre>When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>-1</code>.
       * @since 1.26.7
       * @param iVisibleItemsThreshold New value for property <code>visibleItemsThreshold</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisibleItemsThreshold(iVisibleItemsThreshold: number): sap.m.P13nColumnsPanel;

      /**
       * Unbinds aggregation <code>columnsItems</code> from model data.
       * @since 1.26.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindColumnsItems(): sap.m.P13nColumnsPanel;
    }
    /**
     * Creates a visual separator (theme dependent: padding, margin, line) between the preceding and
     * succeeding toolbar item.
     * @resource sap/m/ToolbarSeparator.js
    */
    export class ToolbarSeparator extends sap.ui.core.Control {


      /**
       * Constructor for a new ToolbarSeparator.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.ToolbarSeparator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * This control allows users to upload single or multiple files from their devices (desktop PC, tablet
     * or phone) and attach them into the application.The consumer is responsible for performing the
     * consistency checks of the model during the upload of the file, e.g. the user is editing or deleting
     * a file.
     * @resource sap/m/UploadCollection.js
    */
    export class UploadCollection extends sap.ui.core.Control {


      /**
       * Constructor for a new UploadCollection.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some headerParameter to the aggregation <code>headerParameters</code>.
       * @param oHeaderParameter the headerParameter to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter): sap.m.UploadCollection;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.UploadCollectionItem): sap.m.UploadCollection;

      /**
       * Adds some parameter to the aggregation <code>parameters</code>.
       * @param oParameter the parameter to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addParameter(oParameter: sap.m.UploadCollectionParameter): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeUploadStarts</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered before the actual upload
       * starts. An event is fired per file. All the necessary header parameters should be set here.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeUploadStarts(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when files are selected in
       * the FileUploader dialog. Applications can set parameters and headerParameters which will be
       * dispatched to the embedded FileUploader control.Limitation: parameters and headerParameters are not
       * supported by Internet Explorer 9.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachChange(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>fileDeleted</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when an uploaded
       * attachment is selected and the Delete button is pressed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFileDeleted(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>filenameLengthExceed</code> event of
       * this <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when the name of a chosen
       * file is longer than the value specified with the maximumFilenameLength property (only if provided by
       * the application).
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFilenameLengthExceed(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>fileRenamed</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when the file name is
       * changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFileRenamed(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>fileSizeExceed</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when the file size of an
       * uploaded file is exceeded (only if the maxFileSize property was provided by the application).This
       * event is not supported by Internet Explorer 9.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFileSizeExceed(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.Fires when selection is changed via user
       * interaction inside the control.
       * @since 1.36.0
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSelectionChange(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>typeMissmatch</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered when the file type or the
       * MIME type don't match the permitted types (only if the fileType property or the mimeType property
       * are provided by the application).
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTypeMissmatch(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>uploadComplete</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered as soon as the upload
       * request is completed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUploadComplete(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>uploadTerminated</code> event of this
       * <code>sap.m.UploadCollection</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.UploadCollection</code> itself.The event is triggered as soon as the upload
       * request was terminated by the user.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.UploadCollection</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachUploadTerminated(oData: any, fnFunction: any, oListener?: any): sap.m.UploadCollection;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.UploadCollection;

      /**
       * Destroys all the headerParameters in the aggregation <code>headerParameters</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyHeaderParameters(): sap.m.UploadCollection;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.UploadCollection;

      /**
       * Destroys all the parameters in the aggregation <code>parameters</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyParameters(): sap.m.UploadCollection;

      /**
       * Destroys the toolbar in the aggregation <code>toolbar</code>.
       * @since 1.34
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyToolbar(): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeUploadStarts</code> event of
       * this <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeUploadStarts(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachChange(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>fileDeleted</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFileDeleted(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>filenameLengthExceed</code> event of
       * this <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFilenameLengthExceed(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>fileRenamed</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFileRenamed(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>fileSizeExceed</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFileSizeExceed(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.36.0
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSelectionChange(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>typeMissmatch</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTypeMissmatch(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>uploadComplete</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUploadComplete(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>uploadTerminated</code> event of this
       * <code>sap.m.UploadCollection</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachUploadTerminated(fnFunction: any, oListener: any): sap.m.UploadCollection;

      /**
       * Downloads the given item.This function delegates to {sap.m.UploadCollectionItem.download}.
       * @since 1.36.0
       * @param uploadCollectionItem The item to download. This parameter is mandatory.
       * @param askForLocation Decides whether to ask for a location to download or not.
       * @returns True if the download has started successfully. False if the download couldn't be started.
      */
      downloadItem(uploadCollectionItem: sap.m.UploadCollectionItem, askForLocation: boolean): boolean;


      /**
       * Fires event <code>beforeUploadStarts</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>fileName</code> of type <code>string</code>Specifies the name of the file
       * to be uploaded.</li><li><code>addHeaderParameter</code> of type <code>function</code>Adds a header
       * parameter to the file that will be uploaded.</li><li><code>getHeaderParameter</code> of type
       * <code>function</code>Returns the corresponding header parameter (type
       * sap.m.UploadCollectionParameter) if available.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeUploadStarts(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>change</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>files</code> of type <code>object[]</code>A FileList of individually selected
       * files from the underlying system. See www.w3.org for the FileList Interface definition.Limitation:
       * Internet Explorer 9 supports only single file with property file.name.Since version
       * 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireChange(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>fileDeleted</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter item
       * instead.</li><li><code>item</code> of type <code>sap.m.UploadCollectionItem</code>An item to be
       * deleted from the collection.Since version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFileDeleted(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>filenameLengthExceed</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>files</code> of type <code>object[]</code>A FileList of individually selected
       * files from the underlying system.Limitation: Internet Explorer 9 supports only single file with
       * property file.name.Since version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFilenameLengthExceed(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>fileRenamed</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter item
       * instead.</li><li><code>fileName</code> of type <code>string</code>The new file name.This parameter
       * is deprecated since version 1.28.0, use parameter item instead.</li><li><code>item</code> of type
       * <code>sap.m.UploadCollectionItem</code>The renamed UI element as a UploadCollectionItem.Since
       * version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFileRenamed(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>fileSizeExceed</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>fileSize</code> of type <code>string</code>The size in MB of a file to be
       * uploaded.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>files</code> of type <code>object[]</code>A FileList of individually selected
       * files from the underlying system.Limitation: Internet Explorer 9 supports only single file with
       * property file.name.Since version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFileSizeExceed(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>selectionChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.m.UploadCollectionItem</code>The item
       * whose selection has changed. In <code>MultiSelect</code> mode, only the selected item upmost is
       * returned. This parameter can be used for single-selection modes.</li><li><code>selectedItems</code>
       * of type <code>sap.m.UploadCollectionItem[]</code>Array of items whose selection has changed. This
       * parameter can be used for <code>MultiSelect</code> mode.</li><li><code>selected</code> of type
       * <code>boolean</code>Indicates whether the <code>listItem</code> parameter is selected or
       * not.</li></ul>
       * @since 1.36.0
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSelectionChange(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>typeMissmatch</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>documentId</code> of type <code>string</code>An unique Id of the attached
       * document.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>fileType</code> of type <code>string</code>File type.This parameter is
       * deprecated since version 1.28.0, use parameter files instead.</li><li><code>mimeType</code> of type
       * <code>string</code>MIME type.This parameter is deprecated since version 1.28.0, use parameter files
       * instead.</li><li><code>files</code> of type <code>object[]</code>A FileList of individually selected
       * files from the underlying system.Limitation: Internet Explorer 9 supports only single file.Since
       * version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTypeMissmatch(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>uploadComplete</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>readyStateXHR</code> of type <code>string</code>Ready state XHR. This
       * parameter is deprecated since version 1.28.0., use parameter files
       * instead.</li><li><code>response</code> of type <code>string</code>Response of the completed upload
       * request. This parameter is deprecated since version 1.28.0., use parameter files
       * instead.</li><li><code>status</code> of type <code>string</code>Status Code of the completed upload
       * event. This parameter is deprecated since version 1.28.0., use parameter files
       * instead.</li><li><code>files</code> of type <code>object[]</code>A list of uploaded files. Each
       * entry contains the following members.fileName    : The name of a file to be uploaded.response    :
       * Response message which comes from the server. On the server side, this response has to be put within
       * the 'body' tags of the response document of the iFrame. It can consist of a return code and an
       * optional message. This does not work in cross-domain scenarios.responseRaw : HTTP-Response which
       * comes from the server. This property is not supported by Internet Explorer Versions lower than
       * 9.status    : Status of the XHR request. This property is not supported by Internet Explorer 9 and
       * lower.headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each
       * header-field is reflected by a property in the header-object, with the property value reflecting the
       * header-field's content. This property is not supported by Internet Explorer 9 and lower.Since
       * version 1.28.0.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUploadComplete(mArguments: any): sap.m.UploadCollection;

      /**
       * Fires event <code>uploadTerminated</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>fileName</code> of type <code>string</code>Specifies the name of the file
       * of which the upload is to be terminated.</li><li><code>getHeaderParameter</code> of type
       * <code>function</code>This callback function returns the corresponding header parameter (type
       * sap.m.UploadCollectionParameter) if available.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireUploadTerminated(mArguments: any): sap.m.UploadCollection;

      /**
       * Gets current value of property <code>fileType</code>.Defines the allowed file types for the
       * upload.The chosen files will be checked against an array of file types.If at least one file does not
       * fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
       * @returns Value of property <code>fileType</code>
      */
      getFileType(): string[];

      /**
       * Gets content of aggregation <code>headerParameters</code>.Specifies the header parameters for the
       * FileUploader that are submitted only with XHR requests.Header parameters are not supported by
       * Internet Explorer 8 and 9.
      */
      getHeaderParameters(): sap.m.UploadCollectionParameter[];

      /**
       * Gets current value of property <code>instantUpload</code>.If false, no upload is triggered when a
       * file is selected. In addition, if a file was selected, a new FileUploader instance is created to
       * ensure that multiple files from multiple folders can be chosen.Default value is <code>true</code>.
       * @since 1.30
       * @returns Value of property <code>instantUpload</code>
      */
      getInstantUpload(): boolean;

      /**
       * Gets content of aggregation <code>items</code>.Uploaded items.
      */
      getItems(): sap.m.UploadCollectionItem[];

      /**
       * Gets current value of property <code>maximumFilenameLength</code>.Specifies the maximum length of a
       * file name.If the maximum file name length is exceeded, the corresponding event
       * 'filenameLengthExceed' is triggered.
       * @returns Value of property <code>maximumFilenameLength</code>
      */
      getMaximumFilenameLength(): number;

      /**
       * Gets current value of property <code>maximumFileSize</code>.Specifies a file size limit in megabytes
       * that prevents the upload if at least one file exceeds the limit.This property is not supported by
       * Internet Explorer 8 and 9.
       * @returns Value of property <code>maximumFileSize</code>
      */
      getMaximumFileSize(): number;

      /**
       * Returns a metadata object for class sap.m.UploadCollection.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mimeType</code>.Defines the allowed MIME types of files to be
       * uploaded.The chosen files will be checked against an array of MIME types.If at least one file does
       * not fit the MIME type requirements, the upload is prevented.This property is not supported by
       * Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
       * @returns Value of property <code>mimeType</code>
      */
      getMimeType(): string[];

      /**
       * Gets current value of property <code>mode</code>.Defines the selection mode of the control (e.g.
       * None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).Since the UploadCollection
       * reacts like a list for attachments, the API is close to the ListBase Interface.sap.m.ListMode.Delete
       * mode is not supported and will be automatically set to sap.m.ListMode.None.In addition, if instant
       * upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be
       * automatically set to sap.m.ListMode.None.Default value is <code>None</code>.
       * @since 1.34
       * @returns Value of property <code>mode</code>
      */
      getMode(): sap.m.ListMode;

      /**
       * Gets current value of property <code>multiple</code>.Lets the user select multiple files from the
       * same folder and then upload them.Internet Explorer 8 and 9 do not support this property.Please note
       * that the various operating systems for mobile devices can react differently to the property so that
       * fewer upload functions may be available in some cases.Default value is <code>false</code>.
       * @returns Value of property <code>multiple</code>
      */
      getMultiple(): boolean;

      /**
       * Gets current value of property <code>noDataText</code>.Allows you to set your own text for the 'No
       * data' label.
       * @returns Value of property <code>noDataText</code>
      */
      getNoDataText(): string;

      /**
       * Gets current value of property <code>numberOfAttachmentsText</code>.Sets the title text in the
       * toolbar of the list of attachments.To show as well the number of attachments in brackets like the
       * default text does. The number of attachments could be retrieved via "getItems().length".If a new
       * title is set, the default is deactivated.The default value is set to language-dependent "Attachments
       * (n)".
       * @since 1.30
       * @returns Value of property <code>numberOfAttachmentsText</code>
      */
      getNumberOfAttachmentsText(): string;

      /**
       * Gets content of aggregation <code>parameters</code>.Specifies the parameters for the FileUploader
       * that are rendered as a hidden input field.
      */
      getParameters(): sap.m.UploadCollectionParameter[];

      /**
       * Gets current value of property <code>sameFilenameAllowed</code>.Allows the user to use the same name
       * for a file when editing the file name. 'Same name' refers to an already existing file name in the
       * list.Default value is <code>false</code>.
       * @returns Value of property <code>sameFilenameAllowed</code>
      */
      getSameFilenameAllowed(): boolean;

      /**
       * Returns selected UploadCollectionItem.
       * @since 1.34
       * @returns selected item
      */
      getSelectedItem(): sap.m.UploadCollectionItem;

      /**
       * Returns an array containing the selected UploadCollectionItems.
       * @since 1.34
       * @returns array with selected items
      */
      getSelectedItems(): sap.m.UploadCollectionItem[];

      /**
       * Gets current value of property <code>showSeparators</code>.Defines whether separators are shown
       * between list items.Default value is <code>All</code>.
       * @returns Value of property <code>showSeparators</code>
      */
      getShowSeparators(): sap.m.ListSeparators;

      /**
       * Gets content of aggregation <code>toolbar</code>.Specifies the toolbar.
       * @since 1.34
      */
      getToolbar(): sap.m.OverflowToolbar;

      /**
       * Gets current value of property <code>uploadEnabled</code>.Enables the upload of a file.Default value
       * is <code>true</code>.
       * @returns Value of property <code>uploadEnabled</code>
      */
      getUploadEnabled(): boolean;

      /**
       * Gets current value of property <code>uploadUrl</code>.Specifies the URL where the uploaded files
       * have to be stored.Default value is <code>../../../upload</code>.
       * @returns Value of property <code>uploadUrl</code>
      */
      getUploadUrl(): string;

      /**
       * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation
       * <code>headerParameters</code>.and returns its index if found or -1 otherwise.
       * @param oHeaderParameter The headerParameter whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter): number;

      /**
       * Checks for the provided <code>sap.m.UploadCollectionItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.UploadCollectionItem): number;

      /**
       * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation
       * <code>parameters</code>.and returns its index if found or -1 otherwise.
       * @param oParameter The parameter whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfParameter(oParameter: sap.m.UploadCollectionParameter): number;

      /**
       * Inserts a headerParameter into the aggregation <code>headerParameters</code>.
       * @param oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the headerParameter should be inserted at; for         
       *    a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a
       * value             greater than the current size of the aggregation, the headerParameter is inserted
       * at             the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter, iIndex: number): sap.m.UploadCollection;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.UploadCollectionItem, iIndex: number): sap.m.UploadCollection;

      /**
       * Inserts a parameter into the aggregation <code>parameters</code>.
       * @param oParameter the parameter to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the parameter should be inserted at; for             a
       * negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the parameter is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertParameter(oParameter: sap.m.UploadCollectionParameter, iIndex: number): sap.m.UploadCollection;

      /**
       * Opens the FileUploader dialog. When an UploadCollectionItem is provided, this method can be used to
       * update a file with a new version.In this case, the upload progress can be sequenced using the
       * events: beforeUploadStarts, uploadComplete and uploadTerminated. For this use,multiple properties
       * from the UploadCollection have to be set to false. If no UploadCollectionItem is provided, only the
       * dialog opensand no further configuration of the UploadCollection is needed.
       * @since 1.38.0
       * @param item The item to update with a new version. This parameter is mandatory.
       * @returns To ensure method chaining, return the UploadCollection.
      */
      openFileDialog(item: sap.m.UploadCollectionItem): sap.m.UploadCollection;

      /**
       * Removes all the controls from the aggregation <code>headerParameters</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllHeaderParameters(): sap.m.UploadCollectionParameter[];

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.UploadCollectionItem[];

      /**
       * Removes all the controls from the aggregation <code>parameters</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllParameters(): sap.m.UploadCollectionParameter[];

      /**
       * Removes a headerParameter from the aggregation <code>headerParameters</code>.
       * @param vHeaderParameter The headerParameter to remove or its index or id
       * @returns The removed headerParameter or <code>null</code>
      */
      removeHeaderParameter(vHeaderParameter: number | string | sap.m.UploadCollectionParameter): sap.m.UploadCollectionParameter;

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.UploadCollectionItem): sap.m.UploadCollectionItem;

      /**
       * Removes a parameter from the aggregation <code>parameters</code>.
       * @param vParameter The parameter to remove or its index or id
       * @returns The removed parameter or <code>null</code>
      */
      removeParameter(vParameter: number | string | sap.m.UploadCollectionParameter): sap.m.UploadCollectionParameter;

      /**
       * Select all items in "MultiSelection" mode.
       * @since 1.34
       * @returns The current UploadCollection
      */
      selectAll(): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>fileType</code>.Defines the allowed file types for the
       * upload.The chosen files will be checked against an array of file types.If at least one file does not
       * fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sFileType New value for property <code>fileType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFileType(sFileType: string[]): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>instantUpload</code>.If false, no upload is triggered when a
       * file is selected. In addition, if a file was selected, a new FileUploader instance is created to
       * ensure that multiple files from multiple folders can be chosen.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.30
       * @param bInstantUpload New value for property <code>instantUpload</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInstantUpload(bInstantUpload: boolean): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>maximumFilenameLength</code>.Specifies the maximum length of a
       * file name.If the maximum file name length is exceeded, the corresponding event
       * 'filenameLengthExceed' is triggered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param iMaximumFilenameLength New value for property <code>maximumFilenameLength</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaximumFilenameLength(iMaximumFilenameLength: number): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>maximumFileSize</code>.Specifies a file size limit in megabytes
       * that prevents the upload if at least one file exceeds the limit.This property is not supported by
       * Internet Explorer 8 and 9.When called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.
       * @param fMaximumFileSize New value for property <code>maximumFileSize</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaximumFileSize(fMaximumFileSize: number): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>mimeType</code>.Defines the allowed MIME types of files to be
       * uploaded.The chosen files will be checked against an array of MIME types.If at least one file does
       * not fit the MIME type requirements, the upload is prevented.This property is not supported by
       * Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sMimeType New value for property <code>mimeType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMimeType(sMimeType: string[]): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>mode</code>.Defines the selection mode of the control (e.g.
       * None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).Since the UploadCollection
       * reacts like a list for attachments, the API is close to the ListBase Interface.sap.m.ListMode.Delete
       * mode is not supported and will be automatically set to sap.m.ListMode.None.In addition, if instant
       * upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be
       * automatically set to sap.m.ListMode.None.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>None</code>.
       * @since 1.34
       * @param sMode New value for property <code>mode</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMode(sMode: sap.m.ListMode): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>multiple</code>.Lets the user select multiple files from the
       * same folder and then upload them.Internet Explorer 8 and 9 do not support this property.Please note
       * that the various operating systems for mobile devices can react differently to the property so that
       * fewer upload functions may be available in some cases.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bMultiple New value for property <code>multiple</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMultiple(bMultiple: boolean): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>noDataText</code>.Allows you to set your own text for the 'No
       * data' label.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sNoDataText New value for property <code>noDataText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNoDataText(sNoDataText: string): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>numberOfAttachmentsText</code>.Sets the title text in the
       * toolbar of the list of attachments.To show as well the number of attachments in brackets like the
       * default text does. The number of attachments could be retrieved via "getItems().length".If a new
       * title is set, the default is deactivated.The default value is set to language-dependent "Attachments
       * (n)".When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @since 1.30
       * @param sNumberOfAttachmentsText New value for property <code>numberOfAttachmentsText</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNumberOfAttachmentsText(sNumberOfAttachmentsText: string): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>sameFilenameAllowed</code>.Allows the user to use the same name
       * for a file when editing the file name. 'Same name' refers to an already existing file name in the
       * list.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>false</code>.
       * @param bSameFilenameAllowed New value for property <code>sameFilenameAllowed</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSameFilenameAllowed(bSameFilenameAllowed: boolean): sap.m.UploadCollection;

      /**
       * Selects or deselects the given list item.
       * @since 1.34
       * @param uploadCollectionItem The item whose selection to be changed. This parameter is mandatory.
       * @param select Sets selected status of the item. Default value is true.
       * @returns The current UploadCollection
      */
      setSelectedItem(uploadCollectionItem: sap.m.UploadCollectionItem, select: boolean): sap.m.UploadCollection;

      /**
       * Sets a UploadCollectionItem to be selected by id. In single mode, the method removes the previous
       * selection.
       * @since 1.34
       * @param id The id of the item whose selection to be changed.
       * @param select Sets selected status of the item. Default value is true.
       * @returns The current UploadCollection
      */
      setSelectedItemById(id: string, select: boolean): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>showSeparators</code>.Defines whether separators are shown
       * between list items.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>All</code>.
       * @param sShowSeparators New value for property <code>showSeparators</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSeparators(sShowSeparators: sap.m.ListSeparators): sap.m.UploadCollection;

      /**
       * Sets the aggregated <code>toolbar</code>.
       * @since 1.34
       * @param oToolbar The toolbar to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setToolbar(oToolbar: sap.m.OverflowToolbar): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>uploadEnabled</code>.Enables the upload of a file.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bUploadEnabled New value for property <code>uploadEnabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUploadEnabled(bUploadEnabled: boolean): sap.m.UploadCollection;

      /**
       * Sets a new value for property <code>uploadUrl</code>.Specifies the URL where the uploaded files have
       * to be stored.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>../../../upload</code>.
       * @param sUploadUrl New value for property <code>uploadUrl</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUploadUrl(sUploadUrl: string): sap.m.UploadCollection;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.UploadCollection;

      /**
       * Starts the upload for all selected files.
       * @since 1.30
      */
      upload(): void;
    }
    /**
     * The ObjectIdentifier is a display control that enables the user to easily identify a specific
     * object. The ObjectIdentifier title is the key identifier of the object and additional text and icons
     * can be used to further distinguish it from other objects.
     * @resource sap/m/ObjectIdentifier.js
    */
    export class ObjectIdentifier extends sap.ui.core.Control {


      /**
       * Constructor for a new ObjectIdentifier.Accepts an object literal <code>mSettings</code> that defines
       * initialproperty values, aggregated and associated objects as well as event handlers.See {@link
       * sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings
       * object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaLabelledBy(vAriaLabelledBy: any | sap.ui.core.Control): sap.m.ObjectIdentifier;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>titlePress</code> event of this
       * <code>sap.m.ObjectIdentifier</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ObjectIdentifier</code> itself.Fires when the title is active and the user
       * taps/clicks on it.
       * @since 1.26
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ObjectIdentifier</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachTitlePress(oData: any, fnFunction: any, oListener?: any): sap.m.ObjectIdentifier;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>titlePress</code> event of this
       * <code>sap.m.ObjectIdentifier</code>.The passed function and listener object must match the ones used
       * for event registration.
       * @since 1.26
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachTitlePress(fnFunction: any, oListener: any): sap.m.ObjectIdentifier;


      /**
       * Fires event <code>titlePress</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>domRef</code> of type <code>object</code>DOM reference of the object
       * identifier's title.</li></ul>
       * @since 1.26
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireTitlePress(mArguments: any): sap.m.ObjectIdentifier;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaLabelledBy</code>.
      */
      getAriaLabelledBy(): any[];

      /**
       * Gets current value of property <code>badgeAttachments</code>.Indicates whether or not the
       * attachments icon is displayed.
       * @returns Value of property <code>badgeAttachments</code>
      */
      getBadgeAttachments(): boolean;

      /**
       * Gets current value of property <code>badgeNotes</code>.Indicates whether or not the notes icon is
       * displayed.
       * @returns Value of property <code>badgeNotes</code>
      */
      getBadgeNotes(): boolean;

      /**
       * Gets current value of property <code>badgePeople</code>.Indicates whether or not the address book
       * icon is displayed.
       * @returns Value of property <code>badgePeople</code>
      */
      getBadgePeople(): boolean;

      /**
       * Returns a metadata object for class sap.m.ObjectIdentifier.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>text</code>.Defines the object text.
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>textDirection</code>.Specifies the element's text
       * directionality with enumerated options. By default, the control inherits text direction from the
       * DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>title</code>.Defines the object title.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleActive</code>.Indicates if the ObjectIdentifier's title is
       * clickable.Default value is <code>false</code>.
       * @since 1.26
       * @returns Value of property <code>titleActive</code>
      */
      getTitleActive(): boolean;

      /**
       * Gets current value of property <code>visible</code>.Indicates if the ObjectIdentifier is visible. An
       * invisible ObjectIdentifier is not being rendered.Default value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Removes all the controls in the association named <code>ariaLabelledBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaLabelledBy(): any[];

      /**
       * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
       * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
       * @returns The removed ariaLabelledBy or <code>null</code>
      */
      removeAriaLabelledBy(vAriaLabelledBy: number | any | sap.ui.core.Control): any;

      /**
       * Sets a new value for property <code>badgeAttachments</code>.Indicates whether or not the attachments
       * icon is displayed.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param bBadgeAttachments New value for property <code>badgeAttachments</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBadgeAttachments(bBadgeAttachments: boolean): sap.m.ObjectIdentifier;

      /**
       * Sets a new value for property <code>badgeNotes</code>.Indicates whether or not the notes icon is
       * displayed.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param bBadgeNotes New value for property <code>badgeNotes</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBadgeNotes(bBadgeNotes: boolean): sap.m.ObjectIdentifier;

      /**
       * Sets a new value for property <code>badgePeople</code>.Indicates whether or not the address book
       * icon is displayed.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param bBadgePeople New value for property <code>badgePeople</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setBadgePeople(bBadgePeople: boolean): sap.m.ObjectIdentifier;

      /**
       * Sets text.Default value is empty/undefined.
       * @param sText New value for property text
       * @returns this to allow method chaining
      */
      setText(sText: string): sap.m.ObjectIdentifier;

      /**
       * Sets a new value for property <code>textDirection</code>.Specifies the element's text directionality
       * with enumerated options. By default, the control inherits text direction from the DOM.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectIdentifier;

      /**
       * Sets the title.Default value is empty/undefined.
       * @param sTitle New value for property title
       * @returns this to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ObjectIdentifier;

      /**
       * Sets property titleActive.Default value is false.
       * @param bValue new value for property titleActive
       * @returns this to allow method chaining
      */
      setTitleActive(bValue: boolean): sap.m.ObjectIdentifier;

      /**
       * Sets a new value for property <code>visible</code>.Indicates if the ObjectIdentifier is visible. An
       * invisible ObjectIdentifier is not being rendered.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.ObjectIdentifier;
    }
    /**
     * Helper Class for implementing the IBar interface. Should be created once per IBar instance.
     * @resource sap/m/BarInPageEnabler.js
    */
    export class IBarInPageEnabler {





      /**
       * Adds the sapMBarChildClass to a control.
       * @param oControl undefined
      */
      addChildClassTo(oControl: sap.ui.core.Control): void;

      /**
       * Renders the tooltip for the given control
       * @param oRM the RenderManager that can be used for writing to the render output buffer.
       * @param oControl an object representation of the control that should be rendered.
      */
      renderTooltip(oRM: sap.ui.core.RenderManager, oControl: sap.ui.core.Control): void;
    }
    /**
     * The <code>sap.m.ComboBoxTextField</code>.
     * @resource sap/m/ComboBoxTextField.js
    */
    export class ComboBoxTextField extends sap.m.InputBase {


      /**
       * Constructor for a new <code>sap.m.ComboBoxTextField</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId ID for the new control, generated automatically if no ID is given.
       * @param mSettings Initial settings for the new control.
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>maxWidth</code>.Sets the maximum width of the text
       * field.Default value is <code>100%</code>.
       * @returns Value of property <code>maxWidth</code>
      */
      getMaxWidth(): any;

      /**
       * Returns a metadata object for class sap.m.ComboBoxTextField.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showButton</code>.Indicates whether the dropdown arrow button
       * is shown.Default value is <code>true</code>.
       * @since 1.38
       * @returns Value of property <code>showButton</code>
      */
      getShowButton(): boolean;

      /**
       * Gets the <code>value</code>.Default value is an empty string.
       * @returns The value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Sets a new value for property <code>maxWidth</code>.Sets the maximum width of the text field.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>100%</code>.
       * @param sMaxWidth New value for property <code>maxWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxWidth(sMaxWidth: any): sap.m.ComboBoxTextField;

      /**
       * Sets a new value for property <code>showButton</code>.Indicates whether the dropdown arrow button is
       * shown.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @since 1.38
       * @param bShowButton New value for property <code>showButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowButton(bShowButton: boolean): sap.m.ComboBoxTextField;
    }
    /**
     * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the
     * ProgressIndicator is filled with a color.Additionally, a user-defined string can be displayed on the
     * ProgressIndicator.
     * @resource sap/m/ProgressIndicator.js
    */
    export class ProgressIndicator extends sap.ui.core.Control {


      /**
       * Constructor for a new ProgressIndicator.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Gets current value of property <code>displayValue</code>.Specifies the text value to be displayed in
       * the bar.
       * @returns Value of property <code>displayValue</code>
      */
      getDisplayValue(): string;

      /**
       * Gets current value of property <code>enabled</code>.Switches enabled state of the control. Disabled
       * fields have different colors, and cannot be focused.Default value is <code>true</code>.
       * @returns Value of property <code>enabled</code>
      */
      getEnabled(): boolean;

      /**
       * Gets current value of property <code>height</code>.Specifies the height of the control. The default
       * value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small
       * size (like for use in ObjectHeader) is 1.375rem (22px).
       * @since 1.15.0
       * @returns Value of property <code>height</code>
      */
      getHeight(): any;

      /**
       * Returns a metadata object for class sap.m.ProgressIndicator.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>percentValue</code>.Specifies the numerical value in percent
       * for the length of the progress bar.Default value is <code>0</code>.
       * @returns Value of property <code>percentValue</code>
      */
      getPercentValue(): number;

      /**
       * Gets current value of property <code>showValue</code>.Indicates whether the displayValue should be
       * shown in the ProgressIndicator.Default value is <code>true</code>.
       * @returns Value of property <code>showValue</code>
      */
      getShowValue(): boolean;

      /**
       * Gets current value of property <code>state</code>.Specifies the state of the bar. Enumeration
       * sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default
       * value).Default value is <code>None</code>.
       * @returns Value of property <code>state</code>
      */
      getState(): sap.ui.core.ValueState;

      /**
       * Gets current value of property <code>textDirection</code>.Specifies the element's text
       * directionality with enumerated options (RTL or LTR). By default, the control inherits text direction
       * from the DOM.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>textDirection</code>
      */
      getTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>width</code>.Specifies the width of the control.Default value
       * is <code>100%</code>.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>displayValue</code>.Specifies the text value to be displayed in
       * the bar.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sDisplayValue New value for property <code>displayValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayValue(sDisplayValue: string): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>enabled</code>.Switches enabled state of the control. Disabled
       * fields have different colors, and cannot be focused.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bEnabled New value for property <code>enabled</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnabled(bEnabled: boolean): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>height</code>.Specifies the height of the control. The default
       * value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small
       * size (like for use in ObjectHeader) is 1.375rem (22px).When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.15.0
       * @param sHeight New value for property <code>height</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeight(sHeight: any): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>percentValue</code>.Specifies the numerical value in percent for
       * the length of the progress bar.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>0</code>.
       * @param fPercentValue New value for property <code>percentValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPercentValue(fPercentValue: number): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>showValue</code>.Indicates whether the displayValue should be
       * shown in the ProgressIndicator.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bShowValue New value for property <code>showValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowValue(bShowValue: boolean): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>state</code>.Specifies the state of the bar. Enumeration
       * sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default
       * value).When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>None</code>.
       * @param sState New value for property <code>state</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setState(sState: sap.ui.core.ValueState): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>textDirection</code>.Specifies the element's text directionality
       * with enumerated options (RTL or LTR). By default, the control inherits text direction from the
       * DOM.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTextDirection New value for property <code>textDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ProgressIndicator;

      /**
       * Sets a new value for property <code>width</code>.Specifies the width of the control.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>100%</code>.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.ProgressIndicator;
    }
    /**
     * @resource sap/m/GrowingEnablement.js
    */
    export class GrowingEnablement extends sap.ui.base.Object {






      /**
       * Returns a metadata object for class sap.m.GrowingEnablement.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     * TableSelectDialog provides you with an easier way to create a dialog that contains a list with
     * grouping and search functionalities.The Table used in a SelectDialog is a Table with Columns. After
     * selecting an item, the dialog is closed and a callback function returns the item being selected.
     * @resource sap/m/TableSelectDialog.js
    */
    export class TableSelectDialog extends sap.ui.core.Control {

      /**
       * Sets the binding context for the internal table AND the current control so that both controls can be
       * used with the context.
      */
      public _setBindingContext: any;

      /**
       * Sets the model for the internal table and the current control, so that both controls can be used
       * with data binding.
      */
      public _setModel: any;


      /**
       * Constructor for a new TableSelectDialog.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some column to the aggregation <code>columns</code>.
       * @param oColumn the column to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addColumn(oColumn: sap.m.Column): sap.m.TableSelectDialog;

      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.ColumnListItem): sap.m.TableSelectDialog;

      /**
       * Transfers method to the inner dialog: addStyleClass
       * @returns this pointer for chaining
      */
      addStyleClass(): sap.m.TableSelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this
       * <code>sap.m.TableSelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TableSelectDialog</code> itself.Fires when the Cancel button is clicked.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TableSelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancel(oData: any, fnFunction: any, oListener?: any): sap.m.TableSelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this
       * <code>sap.m.TableSelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TableSelectDialog</code> itself.Fires when the dialog is confirmed by selecting
       * an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The
       * items being selected are returned as event parameters.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TableSelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachConfirm(oData: any, fnFunction: any, oListener?: any): sap.m.TableSelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this
       * <code>sap.m.TableSelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TableSelectDialog</code> itself.Fires when the value of the search field is
       * changed by a user (for example at each key press).
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TableSelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachLiveChange(oData: any, fnFunction: any, oListener?: any): sap.m.TableSelectDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this
       * <code>sap.m.TableSelectDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TableSelectDialog</code> itself.Fires when the search button has been clicked on
       * dialog.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TableSelectDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachSearch(oData: any, fnFunction: any, oListener?: any): sap.m.TableSelectDialog;

      /**
       * Forwards aggregations with the name of items or columns to the internal table.
       * @param sAggregationName The name for the binding
       * @param oBindingInfo The configuration parameters for the binding
       * @returns this pointer for chaining
      */
      bindAggregation(sAggregationName: string, oBindingInfo: any): sap.m.TableSelectDialog;

      /**
       * Binds aggregation <code>columns</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindColumns(oBindingInfo: any): sap.m.TableSelectDialog;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.TableSelectDialog;

      /**
       * Destroys all the columns in the aggregation <code>columns</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyColumns(): sap.m.TableSelectDialog;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.TableSelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this
       * <code>sap.m.TableSelectDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancel(fnFunction: any, oListener: any): sap.m.TableSelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this
       * <code>sap.m.TableSelectDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachConfirm(fnFunction: any, oListener: any): sap.m.TableSelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this
       * <code>sap.m.TableSelectDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachLiveChange(fnFunction: any, oListener: any): sap.m.TableSelectDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this
       * <code>sap.m.TableSelectDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachSearch(fnFunction: any, oListener: any): sap.m.TableSelectDialog;


      /**
       * Fires event <code>cancel</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancel(mArguments: any): sap.m.TableSelectDialog;

      /**
       * Fires event <code>confirm</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>selectedItem</code> of type <code>sap.m.StandardListItem</code>Returns the
       * selected list item. When no item is selected, "null" is returned. When multi-selection is enabled
       * and multiple items are selected, only the first selected item is
       * returned.</li><li><code>selectedItems</code> of type <code>sap.m.StandardListItem[]</code>Returns an
       * array containing the visible selected list items. If no items are selected, an empty array is
       * returned.</li><li><code>selectedContexts</code> of type <code>string</code>Returns the binding
       * contexts of the selected items including the non-visible items.Note: In contrast to the parameter
       * "selectedItems", this parameter includes the selected but NOT visible items (due to list filtering).
       * An empty array is set for this parameter if no Databinding is used.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireConfirm(mArguments: any): sap.m.TableSelectDialog;

      /**
       * Fires event <code>liveChange</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>Specifies the value entered in the
       * search field.</li><li><code>itemsBinding</code> of type <code>any</code>The Items binding of the
       * Table Select Dialog.Only available if the items aggregation is bound to a model.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireLiveChange(mArguments: any): sap.m.TableSelectDialog;

      /**
       * Fires event <code>search</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>value</code> of type <code>string</code>Specifies the value entered in the
       * search field.</li><li><code>itemsBinding</code> of type <code>any</code>Determines the Items binding
       * of the Table Select Dialog. Only available if the items aggregation is bound to a model.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireSearch(mArguments: any): sap.m.TableSelectDialog;

      /**
       * Gets content of aggregation <code>columns</code>.The columns bindings.
      */
      getColumns(): sap.m.Column[];

      /**
       * Retrieves content height of the select dialog {@link sap.m.Dialog}
       * @returns sHeight the content height of the internal dialog
      */
      getContentHeight(): any;

      /**
       * Retrieves content width of the select dialog {@link sap.m.Dialog}
       * @returns sWidth the content width of the internal dialog
      */
      getContentWidth(): any;

      /**
       * Transfers method to the inner dialog: getDomRef
       * @returns The Element's DOM Element sub DOM Element or null
      */
      getDomRef(): sap.ui.core.Element;

      /**
       * Gets current value of property <code>growingThreshold</code>.Determines the number of items
       * initially displayed in the table.
       * @returns Value of property <code>growingThreshold</code>
      */
      getGrowingThreshold(): number;

      /**
       * Gets content of aggregation <code>items</code>.The items of the table.
      */
      getItems(): sap.m.ColumnListItem[];

      /**
       * Returns a metadata object for class sap.m.TableSelectDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>multiSelect</code>.Enables the user to select several options
       * from the table.Default value is <code>false</code>.
       * @returns Value of property <code>multiSelect</code>
      */
      getMultiSelect(): boolean;

      /**
       * Retrieves the internal List's no data text property
       * @returns the current no data text
      */
      getNoDataText(): string;

      /**
       * Gets current value of property <code>rememberSelections</code>.Controls whether the dialog clears
       * the selection or not. When the dialog is opened multiple times in the same context to allow for
       * corrections of previous user inputs, set this flag to "true". When the dialog should reset the
       * selection to allow for a new selection each time set it to "false"Note: This property must be set
       * before the Dialog is opened to have an effect.Default value is <code>false</code>.
       * @since 1.18
       * @returns Value of property <code>rememberSelections</code>
      */
      getRememberSelections(): boolean;

      /**
       * Gets current value of property <code>title</code>.Specifies the title text in the dialog header.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Transfers method to the inner dialog: hasStyleClass
       * @returns true if the class is set, false otherwise
      */
      hasStyleClass(): boolean;

      /**
       * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>columns</code>.and
       * returns its index if found or -1 otherwise.
       * @param oColumn The column whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfColumn(oColumn: sap.m.Column): number;

      /**
       * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation <code>items</code>.and
       * returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.ColumnListItem): number;

      /**
       * Inserts a column into the aggregation <code>columns</code>.
       * @param oColumn the column to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the column should be inserted at; for             a
       * negative value of <code>iIndex</code>, the column is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the column is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertColumn(oColumn: sap.m.Column, iIndex: number): sap.m.TableSelectDialog;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.ColumnListItem, iIndex: number): sap.m.TableSelectDialog;

      /**
       * Invalidates the dialog instead of this control, as there is no renderer.
       * @returns this pointer for chaining
      */
      invalidate(): sap.m.TableSelectDialog;

      /**
       * Shows the busy state and is called after the renderer is finished.
       * @returns this pointer for chaining
      */
      onAfterRendering(): sap.m.TableSelectDialog;

      /**
       * Opens the internal dialog with a searchfield and a table.
       * @param sSearchValue Value for the search. The table will be automatically trigger the search event
       * if this parameter is set.
       * @returns <code>this</code> to allow method chaining
      */
      open(sSearchValue: string): sap.m.TableSelectDialog;

      /**
       * Removes all the controls from the aggregation <code>columns</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllColumns(): sap.m.Column[];

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.ColumnListItem[];

      /**
       * Removes a column from the aggregation <code>columns</code>.
       * @param vColumn The column to remove or its index or id
       * @returns The removed column or <code>null</code>
      */
      removeColumn(vColumn: number | string | sap.m.Column): sap.m.Column;

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.ColumnListItem): sap.m.ColumnListItem;

      /**
       * Transfers method to the inner dialog: removeStyleClass
       * @returns this pointer for chaining
      */
      removeStyleClass(): sap.m.TableSelectDialog;

      /**
       * Sets the busyIndicatorDelay value to the internal table
       * @param iValue Value for the busyIndicatorDelay.
       * @returns this pointer for chaining
      */
      setBusyIndicatorDelay(iValue: number): sap.m.TableSelectDialog;

      /**
       * Sets content height of the select dialog {@link sap.m.Dialog}
       * @param sHeight the new content height value for the dialog
       * @returns this pointer for chaining
      */
      setContentHeight(sHeight: any): sap.m.TableSelectDialog;

      /**
       * Sets content width of the select dialog {@link sap.m.Dialog}
       * @param sWidth the new content width value for the dialog
       * @returns this pointer for chaining
      */
      setContentWidth(sWidth: any): sap.m.TableSelectDialog;

      /**
       * Sets the growing threshold to the internal table
       * @param iValue Value for the table's growing threshold.
       * @returns this pointer for chaining
      */
      setGrowingThreshold(iValue: number): sap.m.TableSelectDialog;

      /**
       * Enables/Disables multi selection mode.
       * @param bMulti flag for multi selection mode
       * @returns this pointer for chaining
      */
      setMultiSelect(bMulti: boolean): sap.m.TableSelectDialog;

      /**
       * Sets the no data text of the internal table
       * @param sNoDataText the no data text for the table
      */
      setNoDataText(sNoDataText: string): void;

      /**
       * Sets a new value for property <code>rememberSelections</code>.Controls whether the dialog clears the
       * selection or not. When the dialog is opened multiple times in the same context to allow for
       * corrections of previous user inputs, set this flag to "true". When the dialog should reset the
       * selection to allow for a new selection each time set it to "false"Note: This property must be set
       * before the Dialog is opened to have an effect.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @since 1.18
       * @param bRememberSelections New value for property <code>rememberSelections</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRememberSelections(bRememberSelections: boolean): sap.m.TableSelectDialog;

      /**
       * Sets the title of the internal dialog
       * @param sTitle the title text for the dialog
       * @returns this pointer for chaining
      */
      setTitle(sTitle: string): sap.m.TableSelectDialog;

      /**
       * Transfers method to the inner dialog: toggleStyleClass
       * @returns this pointer for chaining
      */
      toggleStyleClass(): sap.m.TableSelectDialog;

      /**
       * Unbinds aggregation <code>columns</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindColumns(): sap.m.TableSelectDialog;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.TableSelectDialog;
    }
    /**
     * Defines layout data for the toolbar items.
     * @resource sap/m/ToolbarLayoutData.js
    */
    export class ToolbarLayoutData extends sap.ui.core.LayoutData {


      /**
       * Constructor for a new ToolbarLayoutData.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>maxWidth</code>.Sets the maximum width of the toolbar item.
       * @returns Value of property <code>maxWidth</code>
      */
      getMaxWidth(): any;

      /**
       * Returns a metadata object for class sap.m.ToolbarLayoutData.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>minWidth</code>.Sets the minimum width of the toolbar item.
       * @returns Value of property <code>minWidth</code>
      */
      getMinWidth(): any;

      /**
       * Gets current value of property <code>shrinkable</code>.Determines whether the control, when in a
       * toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is
       * ignored.Note: Nested layout controls should not be shrinkable.Default value is <code>false</code>.
       * @returns Value of property <code>shrinkable</code>
      */
      getShrinkable(): boolean;

      /**
       * Sets a new value for property <code>maxWidth</code>.Sets the maximum width of the toolbar item.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sMaxWidth New value for property <code>maxWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxWidth(sMaxWidth: any): sap.m.ToolbarLayoutData;

      /**
       * Sets a new value for property <code>minWidth</code>.Sets the minimum width of the toolbar item.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sMinWidth New value for property <code>minWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMinWidth(sMinWidth: any): sap.m.ToolbarLayoutData;

      /**
       * Sets a new value for property <code>shrinkable</code>.Determines whether the control, when in a
       * toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is
       * ignored.Note: Nested layout controls should not be shrinkable.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bShrinkable New value for property <code>shrinkable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShrinkable(bShrinkable: boolean): sap.m.ToolbarLayoutData;
    }
    /**
     * This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and
     * tablet, while on phone it acts as a sap.m.Dialog with stretch set to true.
     * @resource sap/m/ResponsivePopover.js
    */
    export class ResponsivePopover extends sap.ui.core.Control {


      /**
       * Constructor for a new ResponsivePopover.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAriaDescribedBy(vAriaDescribedBy: any | sap.ui.core.Control): sap.m.ResponsivePopover;

      /**
       * Adds content to the ResponsivePopover
       * @param oControl The control to be added to the content
      */
      addContent(oControl: sap.ui.core.Control): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this
       * <code>sap.m.ResponsivePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ResponsivePopover</code> itself.Event is fired after popover or dialog is
       * closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ResponsivePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterClose(oData: any, fnFunction: any, oListener?: any): sap.m.ResponsivePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this
       * <code>sap.m.ResponsivePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ResponsivePopover</code> itself.Event is fired after popover or dialog is open.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ResponsivePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachAfterOpen(oData: any, fnFunction: any, oListener?: any): sap.m.ResponsivePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this
       * <code>sap.m.ResponsivePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ResponsivePopover</code> itself.Event is fired before popover or dialog is
       * closed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ResponsivePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeClose(oData: any, fnFunction: any, oListener?: any): sap.m.ResponsivePopover;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this
       * <code>sap.m.ResponsivePopover</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ResponsivePopover</code> itself.Event is fired before popover or dialog is open.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ResponsivePopover</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): sap.m.ResponsivePopover;

      /**
       * Creates a new instance of ResponsivePopover with the same settings as the ResponsivePopover on which
       * the method is called
       * @returns New instance of ResponsivePopover
      */
      clone(): sap.m.ResponsivePopover;

      /**
       * Closes the ResponsivePopover.
      */
      close(): sap.ui.core.Control;

      /**
       * Destroys the beginButton in the aggregation <code>beginButton</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyBeginButton(): sap.m.ResponsivePopover;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.ResponsivePopover;

      /**
       * Destroys the customHeader in the aggregation <code>customHeader</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomHeader(): sap.m.ResponsivePopover;

      /**
       * Destroys the endButton in the aggregation <code>endButton</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyEndButton(): sap.m.ResponsivePopover;

      /**
       * Destroys the subHeader in the aggregation <code>subHeader</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySubHeader(): sap.m.ResponsivePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this
       * <code>sap.m.ResponsivePopover</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterClose(fnFunction: any, oListener: any): sap.m.ResponsivePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this
       * <code>sap.m.ResponsivePopover</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachAfterOpen(fnFunction: any, oListener: any): sap.m.ResponsivePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this
       * <code>sap.m.ResponsivePopover</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeClose(fnFunction: any, oListener: any): sap.m.ResponsivePopover;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this
       * <code>sap.m.ResponsivePopover</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachBeforeOpen(fnFunction: any, oListener: any): sap.m.ResponsivePopover;


      /**
       * Fires event <code>afterClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter
       * contains the control which is passed as the parameter when calling openBy method. When runs on the
       * phone, this parameter is undefined.</li><li><code>origin</code> of type
       * <code>sap.m.Button</code>This parameter contains the control which triggers the close of the
       * ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterClose(mArguments: any): sap.m.ResponsivePopover;

      /**
       * Fires event <code>afterOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter
       * contains the control which is passed as the parameter when calling openBy method. When runs on the
       * phone, this parameter is undefined.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireAfterOpen(mArguments: any): sap.m.ResponsivePopover;

      /**
       * Fires event <code>beforeClose</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter
       * contains the control which is passed as the parameter when calling openBy method. When runs on the
       * phone, this parameter is undefined.</li><li><code>origin</code> of type
       * <code>sap.m.Button</code>This parameter contains the control which triggers the close of the
       * ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeClose(mArguments: any): sap.m.ResponsivePopover;

      /**
       * Fires event <code>beforeOpen</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter
       * contains the control which is passed as the parameter when calling openBy method. When runs on the
       * phone, this parameter is undefined.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireBeforeOpen(mArguments: any): sap.m.ResponsivePopover;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>ariaDescribedBy</code>.
      */
      getAriaDescribedBy(): any[];

      /**
       * Getter for beginButton aggregation
       * @returns The button that is set as a beginButton aggregation
      */
      getBeginButton(): sap.m.Button;

      /**
       * Gets content of aggregation <code>content</code>.Content is supported by both variants. Please see
       * the documentation on sap.m.Popover#content and sap.m.Dialog#content
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>contentHeight</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
       * @returns Value of property <code>contentHeight</code>
      */
      getContentHeight(): any;

      /**
       * Gets current value of property <code>contentWidth</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
       * @returns Value of property <code>contentWidth</code>
      */
      getContentWidth(): any;

      /**
       * Gets content of aggregation <code>customHeader</code>.CustomHeader is supported by both variants.
       * Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader
      */
      getCustomHeader(): sap.m.IBar;

      /**
       * Getter for endButton aggregation
       * @returns The button that is set as a endButton aggregation
      */
      getEndButton(): sap.m.Button;

      /**
       * Gets current value of property <code>horizontalScrolling</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#horizontalScrolling and
       * sap.m.Dialog#horizontalScrollingDefault value is <code>true</code>.
       * @returns Value of property <code>horizontalScrolling</code>
      */
      getHorizontalScrolling(): boolean;

      /**
       * Gets current value of property <code>icon</code>.This property only takes effect  on phone. Please
       * see the documentation sap.m.Dialog#icon.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * ID of the element which is the current target of the association <code>initialFocus</code>, or
       * <code>null</code>.
      */
      getInitialFocus(): any;

      /**
       * Returns a metadata object for class sap.m.ResponsivePopover.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>modal</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#modal.
       * @returns Value of property <code>modal</code>
      */
      getModal(): boolean;

      /**
       * Gets current value of property <code>offsetX</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#offsetX.
       * @returns Value of property <code>offsetX</code>
      */
      getOffsetX(): number;

      /**
       * Gets current value of property <code>offsetY</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#offsetY.
       * @returns Value of property <code>offsetY</code>
      */
      getOffsetY(): number;

      /**
       * Gets current value of property <code>placement</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#placement.Default value is <code>Right</code>.
       * @returns Value of property <code>placement</code>
      */
      getPlacement(): sap.m.PlacementType;

      /**
       * Gets current value of property <code>resizable</code>.Whether resize option is enabled.Default value
       * is <code>false</code>.
       * @since 1.36.4
       * @returns Value of property <code>resizable</code>
      */
      getResizable(): boolean;

      /**
       * Gets current value of property <code>showCloseButton</code>.Determines if a close button should be
       * inserted into the dialog's header dynamically to close the dialog. This property only takes effect
       * on phone.Default value is <code>true</code>.
       * @returns Value of property <code>showCloseButton</code>
      */
      getShowCloseButton(): boolean;

      /**
       * Gets current value of property <code>showHeader</code>.This property is supported by both variants.
       * Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeaderDefault value is
       * <code>true</code>.
       * @returns Value of property <code>showHeader</code>
      */
      getShowHeader(): boolean;

      /**
       * Gets content of aggregation <code>subHeader</code>.SubHeader is supported by both variants. Please
       * see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader
      */
      getSubHeader(): sap.m.IBar;

      /**
       * Gets current value of property <code>title</code>.This property is supported by both variants.
       * Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>verticalScrolling</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#verticalScrolling and
       * sap.m.Dialog#verticalScrollingDefault value is <code>true</code>.
       * @returns Value of property <code>verticalScrolling</code>
      */
      getVerticalScrolling(): boolean;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ResponsivePopover;

      /**
       * Checks whether the ResponsivePopover is currently open.
      */
      isOpen(): sap.ui.core.Control;

      /**
       * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter
       * on tablet or desktop and is full screen on phone. Therefore the control parameter is only used on
       * tablet or desktop and is ignored on phone.
       * @param oControl         When this control is displayed on tablet or desktop, the ResponsivePopover
       * is positioned relatively to this control.
      */
      openBy(oControl: any): sap.ui.core.Control;

      /**
       * Removes all the controls in the association named <code>ariaDescribedBy</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAriaDescribedBy(): any[];

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
       * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
       * @returns The removed ariaDescribedBy or <code>null</code>
      */
      removeAriaDescribedBy(vAriaDescribedBy: number | any | sap.ui.core.Control): any;

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Setter for beginButton aggregation
       * @param oButton The button that will be set as an aggregation
       * @returns Pointer to the control instance for chaining
      */
      setBeginButton(oButton: sap.m.Button): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>contentHeight</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#contentHeight and
       * sap.m.Dialog#contentHeightWhen called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.
       * @param sContentHeight New value for property <code>contentHeight</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentHeight(sContentHeight: any): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>contentWidth</code>.This property is supported by both variants.
       * Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidthWhen called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sContentWidth New value for property <code>contentWidth</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentWidth(sContentWidth: any): sap.m.ResponsivePopover;

      /**
       * Sets the aggregated <code>customHeader</code>.
       * @param oCustomHeader The customHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCustomHeader(oCustomHeader: sap.m.IBar): sap.m.ResponsivePopover;

      /**
       * Setter for endButton aggregation
       * @param oButton The button that will be set as an aggregation
       * @returns Pointer to the control instance for chaining
      */
      setEndButton(oButton: sap.m.Button): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>horizontalScrolling</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#horizontalScrolling and
       * sap.m.Dialog#horizontalScrollingWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>icon</code>.This property only takes effect  on phone. Please
       * see the documentation sap.m.Dialog#icon.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.ResponsivePopover;

      /**
       * Sets the associated <code>initialFocus</code>.
       * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setInitialFocus(oInitialFocus: any | sap.ui.core.Control): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>modal</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#modal.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param bModal New value for property <code>modal</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setModal(bModal: boolean): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>offsetX</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#offsetX.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param iOffsetX New value for property <code>offsetX</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOffsetX(iOffsetX: number): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>offsetY</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#offsetY.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param iOffsetY New value for property <code>offsetY</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setOffsetY(iOffsetY: number): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>placement</code>.This property only takes effect on desktop or
       * tablet. Please see the documentation sap.m.Popover#placement.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Right</code>.
       * @param sPlacement New value for property <code>placement</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPlacement(sPlacement: sap.m.PlacementType): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>resizable</code>.Whether resize option is enabled.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>false</code>.
       * @since 1.36.4
       * @param bResizable New value for property <code>resizable</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setResizable(bResizable: boolean): sap.m.ResponsivePopover;

      /**
       * Determines if the close button to the ResponsivePopover is shown or not. Works only when
       * ResponsivePopover is used as a dialog
       * @param bShowCloseButton Defines whether the close button is shown
       * @returns Pointer to the control instance for chaining
      */
      setShowCloseButton(bShowCloseButton: boolean): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>showHeader</code>.This property is supported by both variants.
       * Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeaderWhen called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bShowHeader New value for property <code>showHeader</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowHeader(bShowHeader: boolean): sap.m.ResponsivePopover;

      /**
       * Sets the aggregated <code>subHeader</code>.
       * @param oSubHeader The subHeader to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeader(oSubHeader: sap.m.IBar): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>title</code>.This property is supported by both variants. Please
       * see the documentation on sap.m.Popover#title and sap.m.Dialog#titleWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ResponsivePopover;

      /**
       * Sets a new value for property <code>verticalScrolling</code>.This property is supported by both
       * variants. Please see the documentation on sap.m.Popover#verticalScrolling and
       * sap.m.Dialog#verticalScrollingWhen called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVerticalScrolling(bVerticalScrolling: boolean): sap.m.ResponsivePopover;
    }
    /**
     * The ViewSettingsDialog control provides functionality to easily select the options for sorting,
     * grouping, and filtering data. It is a composite control, consisting of a modal popover and several
     * internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be
     * activated by filling the respective associations. If only one association is filled, the other tabs
     * are automatically hidden. The selected options can be used to create sorters and filters for the
     * table.
     * @resource sap/m/ViewSettingsDialog.js
    */
    export class ViewSettingsDialog extends sap.ui.core.Control {


      /**
       * Constructor for a new ViewSettingsDialog.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Overwrites the aggregation setter in order to have ID validation logic as some stringsare reserved
       * for the predefined tabs.
       * @param oCustomTab The custom tab to be added
       * @returns this pointer for chaining
      */
      addCustomTab(oCustomTab: any): sap.m.ViewSettingsDialog;

      /**
       * Adds some filterItem to the aggregation <code>filterItems</code>.
       * @since 1.16
       * @param oFilterItem the filterItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addFilterItem(oFilterItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;

      /**
       * Adds a group item and sets the association to reflect the selected state.
       * @param oItem The item to be added to the group items
       * @returns this pointer for chaining
      */
      addGroupItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;

      /**
       * Adds a preset filter item and sets the association to reflect the selected state.
       * @param oItem The selected item or a string with the key
       * @returns this pointer for chaining
      */
      addPresetFilterItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;

      /**
       * Adds a sort item and sets the association to reflect the selected state.
       * @param oItem The item to be added to the aggregation
       * @returns this pointer for chaining
      */
      addSortItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;

      /**
       * Forward method to the inner dialog method: addStyleClass.
       * @returns this pointer for chaining
      */
      addStyleClass(): sap.m.ViewSettingsDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsDialog</code> itself.Called when the Cancel button is pressed. It
       * can be used to set the state of custom filter controls.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachCancel(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsDialog</code> itself.Indicates that the user has pressed the OK
       * button and the selected sort, group, and filter settings should be applied to the data on this
       * page.</br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For
       * custom tabs, you have to read the state of your controls inside the callback of this event.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachConfirm(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>filterDetailPageOpened</code> event of
       * this <code>sap.m.ViewSettingsDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsDialog</code> itself.Fired when the filter detail page is opened.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFilterDetailPageOpened(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsDialog;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>resetFilters</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsDialog</code> itself.Called when the reset filters button is
       * pressed. It can be used to clear the state of custom filter controls.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsDialog</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachResetFilters(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsDialog;

      /**
       * Binds aggregation <code>customTabs</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.30
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindCustomTabs(oBindingInfo: any): sap.m.ViewSettingsDialog;

      /**
       * Binds aggregation <code>filterItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.16
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindFilterItems(oBindingInfo: any): sap.m.ViewSettingsDialog;

      /**
       * Binds aggregation <code>groupItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.16
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindGroupItems(oBindingInfo: any): sap.m.ViewSettingsDialog;

      /**
       * Binds aggregation <code>presetFilterItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.16
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindPresetFilterItems(oBindingInfo: any): sap.m.ViewSettingsDialog;

      /**
       * Binds aggregation <code>sortItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.16
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindSortItems(oBindingInfo: any): sap.m.ViewSettingsDialog;

      /**
       * Destroys all the customTabs in the aggregation <code>customTabs</code>.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomTabs(): sap.m.ViewSettingsDialog;

      /**
       * Destroys all the filterItems in the aggregation <code>filterItems</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyFilterItems(): sap.m.ViewSettingsDialog;

      /**
       * Destroys all the groupItems in the aggregation <code>groupItems</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyGroupItems(): sap.m.ViewSettingsDialog;

      /**
       * Destroys all the presetFilterItems in the aggregation <code>presetFilterItems</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPresetFilterItems(): sap.m.ViewSettingsDialog;

      /**
       * Destroys all the sortItems in the aggregation <code>sortItems</code>.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroySortItems(): sap.m.ViewSettingsDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachCancel(fnFunction: any, oListener: any): sap.m.ViewSettingsDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachConfirm(fnFunction: any, oListener: any): sap.m.ViewSettingsDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>filterDetailPageOpened</code> event of
       * this <code>sap.m.ViewSettingsDialog</code>.The passed function and listener object must match the
       * ones used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFilterDetailPageOpened(fnFunction: any, oListener: any): sap.m.ViewSettingsDialog;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>resetFilters</code> event of this
       * <code>sap.m.ViewSettingsDialog</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachResetFilters(fnFunction: any, oListener: any): sap.m.ViewSettingsDialog;


      /**
       * Fires event <code>cancel</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireCancel(mArguments: any): sap.m.ViewSettingsDialog;

      /**
       * Fires event <code>confirm</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>sortItem</code> of type <code>sap.m.ViewSettingsItem</code>The selected
       * sort item.</li><li><code>sortDescending</code> of type <code>boolean</code>The selected sort order
       * (true = descending, false = ascending).</li><li><code>groupItem</code> of type
       * <code>sap.m.ViewSettingsItem</code>The selected group item.</li><li><code>groupDescending</code> of
       * type <code>boolean</code>The selected group order (true = descending, false =
       * ascending).</li><li><code>presetFilterItem</code> of type <code>sap.m.ViewSettingsItem</code>The
       * selected preset filter item.</li><li><code>filterItems</code> of type
       * <code>sap.m.ViewSettingsItem[]</code>The selected filters in an array of
       * ViewSettingsItem.</li><li><code>filterKeys</code> of type <code>object</code>The selected filter
       * items in an object notation format: { key: boolean }. If a custom control filter was displayed (for
       * example, the user clicked on the filter item), the value for its key is set to true to indicate that
       * there has been an interaction with the control.</li><li><code>filterString</code> of type
       * <code>string</code>The selected filter items in a string format to display in the control's header
       * bar in format "Filtered by: key (subkey1, subkey2, subkey3)".</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireConfirm(mArguments: any): sap.m.ViewSettingsDialog;

      /**
       * Fires event <code>filterDetailPageOpened</code> to attached listeners.Expects the following event
       * parameters:<ul><li><code>parentFilterItem</code> of type
       * <code>sap.m.ViewSettingsFilterItem</code>The filter item for which the details are opened.</li></ul>
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFilterDetailPageOpened(mArguments: any): sap.m.ViewSettingsDialog;

      /**
       * Fires event <code>resetFilters</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireResetFilters(mArguments: any): sap.m.ViewSettingsDialog;

      /**
       * Gets content of aggregation <code>customTabs</code>.The list of all the custom tabs.
       * @since 1.30
      */
      getCustomTabs(): sap.m.ViewSettingsCustomTab[];

      /**
       * Forward method to the inner dialog method: getDomRef.
       * @returns The Element's DOM Element sub DOM Element or null
      */
      getDomRef(): sap.ui.core.Element;

      /**
       * Gets content of aggregation <code>filterItems</code>.The list of items with key and value that can
       * be filtered on (for example, a list of columns for a table). A filterItem is associated with one or
       * more detail filters.
       * @since 1.16
      */
      getFilterItems(): sap.m.ViewSettingsItem[];

      /**
       * Gets current value of property <code>groupDescending</code>.Determines whether the group order is
       * descending or ascending (default).Default value is <code>false</code>.
       * @returns Value of property <code>groupDescending</code>
      */
      getGroupDescending(): boolean;

      /**
       * Gets content of aggregation <code>groupItems</code>.The list of items with key and value that can be
       * grouped on (for example, a list of columns for a table).
       * @since 1.16
      */
      getGroupItems(): sap.m.ViewSettingsItem[];

      /**
       * Returns a metadata object for class sap.m.ViewSettingsDialog.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>presetFilterItems</code>.The list of preset filter items that
       * allows the selection of more complex or custom filters. These entries are displayed at the top of
       * the filter tab.
       * @since 1.16
      */
      getPresetFilterItems(): sap.m.ViewSettingsItem[];

      /**
       * Returns the selected filters as an array of ViewSettingsItems.It can be used to create matching
       * sorters and filters to apply the selected settings to the data.
       * @returns An array of selected filter items
      */
      getSelectedFilterItems(): sap.m.ViewSettingsItem[];

      /**
       * Gets the selected filter object in format {key: boolean}.It can be used to create matching sorters
       * and filters to apply the selected settings to the data.
       * @returns An object with item and subitem keys
      */
      getSelectedFilterKeys(): any;

      /**
       * Gets the filter string in format: "filter name (subfilter1 name, subfilter2name, ...), ...".For
       * custom and preset filters it will only add the filter name to the resulting string.
       * @returns The selected filter string
      */
      getSelectedFilterString(): string;

      /**
       * ID of the element which is the current target of the association <code>selectedGroupItem</code>, or
       * <code>null</code>.
      */
      getSelectedGroupItem(): any;

      /**
       * ID of the element which is the current target of the association
       * <code>selectedPresetFilterItem</code>, or <code>null</code>.
      */
      getSelectedPresetFilterItem(): any;

      /**
       * ID of the element which is the current target of the association <code>selectedSortItem</code>, or
       * <code>null</code>.
      */
      getSelectedSortItem(): any;

      /**
       * Gets current value of property <code>sortDescending</code>.Determines whether the sort order is
       * descending or ascending (default).Default value is <code>false</code>.
       * @returns Value of property <code>sortDescending</code>
      */
      getSortDescending(): boolean;

      /**
       * Gets content of aggregation <code>sortItems</code>.The list of items with key and value that can be
       * sorted over (for example, a list of columns for a table).
       * @since 1.16
      */
      getSortItems(): sap.m.ViewSettingsItem[];

      /**
       * Gets current value of property <code>title</code>.Defines the title of the dialog. If not set and
       * there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter"
       * respectively.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Forward method to the inner dialog method: hasStyleClass.
       * @returns true if the class is set, false otherwise
      */
      hasStyleClass(): boolean;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsCustomTab</code> in the aggregation
       * <code>customTabs</code>.and returns its index if found or -1 otherwise.
       * @since 1.30
       * @param oCustomTab The customTab whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfCustomTab(oCustomTab: sap.m.ViewSettingsCustomTab): number;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation
       * <code>filterItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.16
       * @param oFilterItem The filterItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfFilterItem(oFilterItem: sap.m.ViewSettingsItem): number;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation
       * <code>groupItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.16
       * @param oGroupItem The groupItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfGroupItem(oGroupItem: sap.m.ViewSettingsItem): number;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation
       * <code>presetFilterItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.16
       * @param oPresetFilterItem The presetFilterItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfPresetFilterItem(oPresetFilterItem: sap.m.ViewSettingsItem): number;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation
       * <code>sortItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.16
       * @param oSortItem The sortItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfSortItem(oSortItem: sap.m.ViewSettingsItem): number;

      /**
       * Inserts a customTab into the aggregation <code>customTabs</code>.
       * @since 1.30
       * @param oCustomTab the customTab to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the customTab should be inserted at; for             a
       * negative value of <code>iIndex</code>, the customTab is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the customTab is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertCustomTab(oCustomTab: sap.m.ViewSettingsCustomTab, iIndex: number): sap.m.ViewSettingsDialog;

      /**
       * Inserts a filterItem into the aggregation <code>filterItems</code>.
       * @since 1.16
       * @param oFilterItem the filterItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the filterItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value        
       *     greater than the current size of the aggregation, the filterItem is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertFilterItem(oFilterItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;

      /**
       * Inserts a groupItem into the aggregation <code>groupItems</code>.
       * @since 1.16
       * @param oGroupItem the groupItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the groupItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the groupItem is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertGroupItem(oGroupItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;

      /**
       * Inserts a presetFilterItem into the aggregation <code>presetFilterItems</code>.
       * @since 1.16
       * @param oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for        
       *     a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a
       * value             greater than the current size of the aggregation, the presetFilterItem is inserted
       * at             the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertPresetFilterItem(oPresetFilterItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;

      /**
       * Inserts a sortItem into the aggregation <code>sortItems</code>.
       * @since 1.16
       * @param oSortItem the sortItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the sortItem should be inserted at; for             a
       * negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value          
       *   greater than the current size of the aggregation, the sortItem is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertSortItem(oSortItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;

      /**
       * Invalidates the control (suppressed as there is no renderer).
      */
      invalidate(oOrigin?: any): void;

      /**
       * Opens the ViewSettingsDialog relative to the parent control.
       * @param sPageId The ID of the initial page to be opened in the dialog.    The available values are
       * "sort", "group", "filter" or IDs of custom tabs.
       * @returns this pointer for chaining
      */
      open(sPageId: string): sap.m.ViewSettingsDialog;

      /**
       * Removes all the controls from the aggregation <code>customTabs</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.30
       * @returns An array of the removed elements (might be empty)
      */
      removeAllCustomTabs(): sap.m.ViewSettingsCustomTab[];

      /**
       * Removes all filter Items and resets the remembered page if it was a filter detail page and all of
       * its filter items are being removed.
       * @returns this pointer for chaining
      */
      removeAllFilterItems(): sap.m.ViewSettingsDialog;

      /**
       * Removes all the controls from the aggregation <code>groupItems</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.16
       * @returns An array of the removed elements (might be empty)
      */
      removeAllGroupItems(): sap.m.ViewSettingsItem[];

      /**
       * Removes all the controls from the aggregation <code>presetFilterItems</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.16
       * @returns An array of the removed elements (might be empty)
      */
      removeAllPresetFilterItems(): sap.m.ViewSettingsItem[];

      /**
       * Removes all the controls from the aggregation <code>sortItems</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.16
       * @returns An array of the removed elements (might be empty)
      */
      removeAllSortItems(): sap.m.ViewSettingsItem[];

      /**
       * Removes a customTab from the aggregation <code>customTabs</code>.
       * @since 1.30
       * @param vCustomTab The customTab to remove or its index or id
       * @returns The removed customTab or <code>null</code>
      */
      removeCustomTab(vCustomTab: number | string | sap.m.ViewSettingsCustomTab): sap.m.ViewSettingsCustomTab;

      /**
       * Removes a filter Item and resets the remembered page if it was the filter detail page of the removed
       * filter.
       * @param vFilterItem The filter item's index, or the item itself, or its id
       * @returns this pointer for chaining
      */
      removeFilterItem(vFilterItem: number | sap.m.ViewSettingsFilterItem | string): sap.m.ViewSettingsDialog;

      /**
       * Removes a groupItem from the aggregation <code>groupItems</code>.
       * @since 1.16
       * @param vGroupItem The groupItem to remove or its index or id
       * @returns The removed groupItem or <code>null</code>
      */
      removeGroupItem(vGroupItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;

      /**
       * Removes a presetFilterItem from the aggregation <code>presetFilterItems</code>.
       * @since 1.16
       * @param vPresetFilterItem The presetFilterItem to remove or its index or id
       * @returns The removed presetFilterItem or <code>null</code>
      */
      removePresetFilterItem(vPresetFilterItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;

      /**
       * Removes a sortItem from the aggregation <code>sortItems</code>.
       * @since 1.16
       * @param vSortItem The sortItem to remove or its index or id
       * @returns The removed sortItem or <code>null</code>
      */
      removeSortItem(vSortItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;

      /**
       * Forward method to the inner dialog method: removeStyleClass.
       * @returns this pointer for chaining
      */
      removeStyleClass(): sap.m.ViewSettingsDialog;

      /**
       * Forward the busy state setting to the internal dialog instance.Needed because of the not-bullet
       * proof implementation of setBusy in sap.ui.core.Control
       * @param bBusy The busy state flag
       * @returns this Instance for chaining
      */
      setBusy(bBusy: boolean): sap.m.ViewSettingsDialog;

      /**
       * Sets a new value for property <code>groupDescending</code>.Determines whether the group order is
       * descending or ascending (default).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bGroupDescending New value for property <code>groupDescending</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGroupDescending(bGroupDescending: boolean): sap.m.ViewSettingsDialog;

      /**
       * Sets the selected filter object in format {key: boolean}.
       * @param oSelectedFilterKeys A configuration object with filter item and sub item keys in the format:
       * { key: boolean }.        Setting boolean to true will set the filter to true, false or omitting an
       * entry will set the filter to false.        It can be used to set the dialog state based on presets.
       * @returns this pointer for chaining
      */
      setSelectedFilterKeys(oSelectedFilterKeys: any): sap.m.ViewSettingsDialog;

      /**
       * Sets the selected group item (either by key or by item).
       * @param vItemOrKey The selected item or the item's key string
       * @returns this pointer for chaining
      */
      setSelectedGroupItem(vItemOrKey: sap.m.ViewSettingsItem | string): sap.m.ViewSettingsDialog;

      /**
       * Sets the selected preset filter item.
       * @param vItemOrKey The selected item or the item's key string
       * @returns this pointer for chaining
      */
      setSelectedPresetFilterItem(vItemOrKey: sap.m.ViewSettingsItem | string): sap.m.ViewSettingsDialog;

      /**
       * Sets the selected sort item (either by key or by item).
       * @param vItemOrKey The selected item or the item's key string
       * @returns this pointer for chaining
      */
      setSelectedSortItem(vItemOrKey: sap.m.ViewSettingsItem | string): sap.m.ViewSettingsDialog;

      /**
       * Sets a new value for property <code>sortDescending</code>.Determines whether the sort order is
       * descending or ascending (default).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bSortDescending New value for property <code>sortDescending</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSortDescending(bSortDescending: boolean): sap.m.ViewSettingsDialog;

      /**
       * Sets the title of the internal dialog.
       * @param sTitle The title text for the dialog
       * @returns this pointer for chaining
      */
      setTitle(sTitle: string): sap.m.ViewSettingsDialog;

      /**
       * Forward method to the inner dialog method: toggleStyleClass.
       * @returns this pointer for chaining
      */
      toggleStyleClass(): sap.m.ViewSettingsDialog;

      /**
       * Unbinds aggregation <code>customTabs</code> from model data.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindCustomTabs(): sap.m.ViewSettingsDialog;

      /**
       * Unbinds aggregation <code>filterItems</code> from model data.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindFilterItems(): sap.m.ViewSettingsDialog;

      /**
       * Unbinds aggregation <code>groupItems</code> from model data.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindGroupItems(): sap.m.ViewSettingsDialog;

      /**
       * Unbinds aggregation <code>presetFilterItems</code> from model data.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindPresetFilterItems(): sap.m.ViewSettingsDialog;

      /**
       * Unbinds aggregation <code>sortItems</code> from model data.
       * @since 1.16
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindSortItems(): sap.m.ViewSettingsDialog;
    }
    /**
     * This is a date range input control with a calendar as date picker.A date range can be entered using
     * a calendar that opens in a popup. Alternatively a value can be entered directly in the input field
     * by typing it in.(This is only possible on desktop devices, on mobile devices keyboard input is not
     * possible.)If a date range is entered by typing it into the input field, it must fit to the used date
     * format and locale. (See <code>sap.ui.core.format.DateFormat</code>)There are two options to provide
     * a date for the <code>DateRangeSelection</code>.You can put a date range as a string to the property
     * <code>value</code> or you can put JavaScript Date objects to the properties <code>dateValue</code>
     * and <code>secondDateValue</code>.Only one of the properties should be used at one time, but they are
     * synchronized internally.What property to use depends on the use case of the application.<ul><li>Use
     * the <code>value</code> property if the date range is already provided as a formatted
     * string.</li><li>Use the <code>dateValue</code> and <code>secondDateValue</code> properties if the
     * date range is already provided as JavaScript Date objects or you want to work with JavaScript Date
     * objects.</li></ul>All formatting and parsing of dates from and to strings is done using the {@link
     * sap.ui.core.format.DateFormat}, so read the corresponding documentation if you need some information
     * about this.Supported format options are pattern-based on Unicode LDML Date Format notation. {@link
     * http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}For example, if the
     * <code>displayFormat</code> is "MMM d, y", <code>delimiter</code> is "-" and the used locale is
     * English,a valid <code>value</code> string is "Jul 29, 2015 - Jul 31, 2015" and it will be displayed
     * in the same way in the input field.If no <code>placeholder</code> is set to the
     * <code>DatePicker</code> the used <code>displayFormat</code> is shown as placeholder.If another
     * placeholder is needed, it must be set.Internally the <code>sap.ui.unified.Calendar</code> is used,
     * but it is only needed if the <code>DateRangeSelection</code> is opened. This means that it is not
     * needed for the initial rendering.If the <code>sap.ui.unified</code> library is not loaded before the
     * <code>DateRangeSelection</code> is opened, it will be loaded upon opening.This could lead to a
     * waiting time before a <code>DateRangeSelection</code> is opened the first time. To prevent this,
     * applications using the <code>DateRangeSelection</code> should also loadthe
     * <code>sap.ui.unified</code> library.
     * @resource sap/m/DateRangeSelection.js
    */
    export class DateRangeSelection extends sap.m.DatePicker {


      /**
       * Constructor for a new DateRangeSelection.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Fire event change to attached listeners.Expects following event parameters:<ul><li>'value' of type
       * <code>string</code> The new value of the <code>sap.m.DateRangeSelection</code>.</li><li>'valid' of
       * type <code>boolean</code> Indicator for a valid date.</li><li>'from' of type <code>object</code>
       * Current start date after change.</li><li>'to' of type <code>object</code> Current end date after
       * change.</li></ul>
       * @param mArguments The arguments to pass along with the event.
       * @returns <code>this</code> to allow method chaining
      */
      fireChange(mArguments: any): sap.m.DateRangeSelection;

      /**
      */
      getAccessibilityInfo(): void;

      /**
       * Getter for property <code>dateValue</code>.The start date of the range as JavaScript Date object.
       * This is independent from any formatter.<b>Note:</b> If this property is used, the <code>value</code>
       * property should not be changed from the caller.
       * @returns the value of property <code>dateValue</code>
      */
      getDateValue(): any;

      /**
       * Gets current value of property <code>delimiter</code>.Delimiter between start and end date. Default
       * value is "-".If no delimiter is given, the one defined for the used locale is used.Default value is
       * <code>-</code>.
       * @returns Value of property <code>delimiter</code>
      */
      getDelimiter(): string;

      /**
       * Gets current value of property <code>from</code>.Start date of the range.
       * @returns Value of property <code>from</code>
      */
      getFrom(): any;

      /**
       * Returns a metadata object for class sap.m.DateRangeSelection.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>secondDateValue</code>.The end date of the range as JavaScript
       * Date object. This is independent from any formatter.<b>Note:</b> If this property is used, the
       * <code>value</code> property should not be changed from the caller.
       * @returns Value of property <code>secondDateValue</code>
      */
      getSecondDateValue(): any;

      /**
       * Gets current value of property <code>to</code>.End date of the range.
       * @returns Value of property <code>to</code>
      */
      getTo(): any;

      /**
       * Getter for property <code>value</code>.Returns a date as a string in the format defined in property
       * <code>displayFormat</code>.<b>Note:</b> As the value string always used the
       * <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.If this property
       * is used, the <code>dateValue</code> property should not be changed from the caller.
       * @returns the value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Getter for property <code>valueFormat</code>.<b>Note:</b> Property <code>valueFormat</code> is not
       * supported in the <code>sap.m.DateRangeSelection</code> control.
       * @returns the value of property valueFormat
      */
      getValueFormat(): string;

      /**
       * This file defines behavior for the control
      */
      init(): void;

      /**
       * Setter for property <code>dateValue</code>.The start date of the range as JavaScript Date object.
       * This is independent from any formatter.<b>Note:</b> If this property is used, the <code>value</code>
       * property should not be changed from the caller.
       * @param oDateValue New value for property <code>dateValue</code>
       * @returns <code>this</code> to allow method chaining.
      */
      setDateValue(oDateValue: any): sap.m.DatePicker;

      /**
       * Sets a new value for property <code>delimiter</code>.Delimiter between start and end date. Default
       * value is "-".If no delimiter is given, the one defined for the used locale is used.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>-</code>.
       * @param sDelimiter New value for property <code>delimiter</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDelimiter(sDelimiter: string): sap.m.DateRangeSelection;

      /**
       * Sets a new value for property <code>from</code>.Start date of the range.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oFrom New value for property <code>from</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFrom(oFrom: any): sap.m.DateRangeSelection;

      /**
       * Sets a new value for property <code>secondDateValue</code>.The end date of the range as JavaScript
       * Date object. This is independent from any formatter.<b>Note:</b> If this property is used, the
       * <code>value</code> property should not be changed from the caller.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oSecondDateValue New value for property <code>secondDateValue</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSecondDateValue(oSecondDateValue: any): sap.m.DateRangeSelection;

      /**
       * Sets a new value for property <code>to</code>.End date of the range.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param oTo New value for property <code>to</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTo(oTo: any): sap.m.DateRangeSelection;

      /**
       * Setter for property <code>value</code>.Expects a date as a string in the format defined in property
       * <code>displayFormat</code>.<b>Note:</b> As the value string always used the
       * <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.If this property
       * is used, the <code>dateValue</code> property should not be changed from the caller.
       * @param sValue The new value of the input.
       * @returns <code>this</code> to allow method chaining.
      */
      setValue(sValue: string): sap.m.DatePicker;

      /**
       * Setter for property <code>valueFormat</code>.<b>Note:</b> Property <code>valueFormat</code> is not
       * supported in the <code>sap.m.DateRangeSelection</code> control.
       * @param sValueFormat New value for property valueFormat
       * @returns <code>this</code> to allow method chaining
      */
      setValueFormat(sValueFormat: string): sap.m.DateRangeSelection;
    }
    /**
     * The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of
     * the new Personalization dialog.
     * @resource sap/m/P13nConditionPanel.js
    */
    export class P13nConditionPanel extends sap.ui.core.Control {


      /**
       * Constructor for a new P13nConditionPanel.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * add a single condition.
       * @since 1.26.0
       * @param oCondition the new condition of type { "key": "007", "operation":
       * sap.m.P13nConditionOperation.Ascending, "keyField":       "keyFieldKey", "value1": "", "value2":
       * ""};
      */
      addCondition(oCondition: any): void;

      /**
       * add a single KeyField
       * @since 1.26.0
       * @param oKeyField {key: "CompanyCode", text: "ID"}
      */
      addKeyField(oKeyField: any): void;

      /**
       * add a single operation
       * @since 1.26.0
       * @param oOperation undefined
       * @param sType defines the type for which this operations will be used.
      */
      addOperation(oOperation: any, sType: string): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>dataChange</code> event of this
       * <code>sap.m.P13nConditionPanel</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.P13nConditionPanel</code> itself.Workaround for updating the binding
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.P13nConditionPanel</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachDataChange(oData: any, fnFunction: any, oListener?: any): sap.m.P13nConditionPanel;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>dataChange</code> event of this
       * <code>sap.m.P13nConditionPanel</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachDataChange(fnFunction: any, oListener: any): sap.m.P13nConditionPanel;


      /**
       * Fires event <code>dataChange</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireDataChange(mArguments: any): sap.m.P13nConditionPanel;

      /**
       * Gets current value of property <code>alwaysShowAddIcon</code>.makes the Add icon visible on each
       * condition row. If is set to false the Add is only visible at the end and you can only append anew
       * condition.Default value is <code>true</code>.
       * @returns Value of property <code>alwaysShowAddIcon</code>
      */
      getAlwaysShowAddIcon(): boolean;

      /**
       * Gets current value of property <code>autoAddNewRow</code>.adds initial a new empty condition
       * rowDefault value is <code>false</code>.
       * @returns Value of property <code>autoAddNewRow</code>
      */
      getAutoAddNewRow(): boolean;

      /**
       * Gets current value of property <code>autoReduceKeyFieldItems</code>.KeyField value can only be
       * selected once. When you set the property to true the ConditionPanel will automatically offers on
       * theKeyField drop down only the keyFields which are not used. The default behavior is that in each
       * keyField dropdown all keyfields arelisted.Default value is <code>false</code>.
       * @returns Value of property <code>autoReduceKeyFieldItems</code>
      */
      getAutoReduceKeyFieldItems(): boolean;

      /**
       * returns array of all defined conditions.
       * @since 1.26.0
       * @returns array of Conditions
      */
      getConditions(): any[];

      /**
       * Gets current value of property <code>containerQuery</code>.defines if the mediaQuery or a
       * ContainerResize will be used for layout update. When the P13nConditionPanel is used on a dialog
       * theproperty should be set to true!Default value is <code>false</code>.
       * @returns Value of property <code>containerQuery</code>
      */
      getContainerQuery(): boolean;

      /**
       * Gets current value of property <code>disableFirstRemoveIcon</code>.makes the remove icon on the
       * first condition row disabled when only one condition exist.Default value is <code>false</code>.
       * @returns Value of property <code>disableFirstRemoveIcon</code>
      */
      getDisableFirstRemoveIcon(): boolean;

      /**
       * Gets current value of property <code>displayFormat</code>.This represents the displayFormat of the
       * condition Values. With the value "UpperCase" the entered value of the condition will beconverted to
       * upperCase.
       * @returns Value of property <code>displayFormat</code>
      */
      getDisplayFormat(): string;

      /**
       * Gets current value of property <code>exclude</code>.exclude options for filterDefault value is
       * <code>false</code>.
       * @returns Value of property <code>exclude</code>
      */
      getExclude(): boolean;

      /**
       * getter for KeyFields array
       * @since 1.26.0
       * @returns array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]
      */
      getKeyFields(): any[];

      /**
       * Gets current value of property <code>layoutMode</code>.can be used to control the layout behavior.
       * Default is "" which will automatically change the layout. With "Desktop", "Table"or"Phone" you can
       * set a fixed layout.
       * @returns Value of property <code>layoutMode</code>
      */
      getLayoutMode(): string;

      /**
       * Gets current value of property <code>maxConditions</code>.defines the max number of conditions on
       * the ConditionPanelDefault value is <code>-1</code>.
       * @returns Value of property <code>maxConditions</code>
      */
      getMaxConditions(): string;

      /**
       * Returns a metadata object for class sap.m.P13nConditionPanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * returns the default array of operations
       * @since 1.26.0
       * @param sType defines the type for which the operations should be returned.
       * @returns array of operations
      */
      getOperations(sType: string): any[];

      /**
       * Gets current value of property <code>showLabel</code>.show additional labels in the conditionDefault
       * value is <code>false</code>.
       * @returns Value of property <code>showLabel</code>
      */
      getShowLabel(): boolean;

      /**
       * Gets current value of property <code>usePrevConditionSetting</code>.new added condition use the
       * settings from the previous condition as default.Default value is <code>true</code>.
       * @returns Value of property <code>usePrevConditionSetting</code>
      */
      getUsePrevConditionSetting(): boolean;

      /**
       * Gets current value of property <code>validationExecutor</code>.Calls the validation listener tbd...
       * @returns Value of property <code>validationExecutor</code>
      */
      getValidationExecutor(): any;

      /**
       * insert a single condition.
       * @since 1.26.0
       * @param oCondition the new condition of type { "key": "007", "operation":
       * sap.m.P13nConditionOperation.Ascending, "keyField":       "keyFieldKey", "value1": "", "value2":
       * ""};
       * @param index of the new condition
      */
      insertCondition(oCondition: any, index: number): void;

      /**
       * remove all conditions.
       * @since 1.26.0
      */
      removeAllConditions(): void;

      /**
       * removes all KeyFields
       * @since 1.26.0
      */
      removeAllKeyFields(): void;

      /**
       * remove all operations
       * @since 1.26.0
       * @param sType defines the type for which all operations should be removed
      */
      removeAllOperations(sType: string): void;

      /**
       * remove a single condition.
       * @since 1.26.0
       * @param vCondition is the condition which should be removed. can be either a string with the key of
       * the condition of the condition       object itself.
      */
      removeCondition(vCondition: any): void;

      /**
       * removes all invalid conditions.
       * @since 1.28.0
      */
      removeInvalidConditions(): void;

      /**
       * removes all errors/warning states from the value1/2 fields of all conditions.
       * @since 1.28.0
      */
      removeValidationErrors(): void;

      /**
       * Sets a new value for property <code>autoAddNewRow</code>.adds initial a new empty condition rowWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bAutoAddNewRow New value for property <code>autoAddNewRow</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAutoAddNewRow(bAutoAddNewRow: boolean): sap.m.P13nConditionPanel;

      /**
       * Sets a new value for property <code>autoReduceKeyFieldItems</code>.KeyField value can only be
       * selected once. When you set the property to true the ConditionPanel will automatically offers on
       * theKeyField drop down only the keyFields which are not used. The default behavior is that in each
       * keyField dropdown all keyfields arelisted.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bAutoReduceKeyFieldItems New value for property <code>autoReduceKeyFieldItems</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAutoReduceKeyFieldItems(bAutoReduceKeyFieldItems: boolean): sap.m.P13nConditionPanel;

      /**
       * This method must be used to assign a list of conditions.
       * @since 1.26.0
       * @param aConditions array of Conditions.
      */
      setConditions(aConditions: any[]): void;

      /**
       * Sets a new value for property <code>disableFirstRemoveIcon</code>.makes the remove icon on the first
       * condition row disabled when only one condition exist.When called with a value of <code>null</code>
       * or <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>false</code>.
       * @param bDisableFirstRemoveIcon New value for property <code>disableFirstRemoveIcon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisableFirstRemoveIcon(bDisableFirstRemoveIcon: boolean): sap.m.P13nConditionPanel;

      /**
       * Sets a new value for property <code>displayFormat</code>.This represents the displayFormat of the
       * condition Values. With the value "UpperCase" the entered value of the condition will beconverted to
       * upperCase.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sDisplayFormat New value for property <code>displayFormat</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDisplayFormat(sDisplayFormat: string): sap.m.P13nConditionPanel;

      /**
       * Sets a new value for property <code>exclude</code>.exclude options for filterWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>false</code>.
       * @param bExclude New value for property <code>exclude</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setExclude(bExclude: boolean): sap.m.P13nConditionPanel;

      /**
       * This method allows you to specify the KeyFields for the conditions. You can set an array of object
       * with Key and Text properties to define thekeyfields.
       * @since 1.26.0
       * @param aKeyFields array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text :
       * "Name"}]
      */
      setKeyFields(aKeyFields: any[]): void;

      /**
       * Sets a new value for property <code>maxConditions</code>.defines the max number of conditions on the
       * ConditionPanelWhen called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>-1</code>.
       * @param sMaxConditions New value for property <code>maxConditions</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMaxConditions(sMaxConditions: string): sap.m.P13nConditionPanel;

      /**
       * setter for the supported operations which we show per condition row. This array of "default"
       * operations will only be used when we do not haveon the keyfield itself some specific operations and
       * a keyfield is of not of type date or numeric.
       * @since 1.26.0
       * @param aOperations array of operations [sap.m.P13nConditionOperation.BT,
       * sap.m.P13nConditionOperation.EQ]
       * @param sType defines the type for which this operations will be used. is sType is not defined the
       * operations will be used as default       operations.
      */
      setOperations(aOperations: any[], sType: string): void;

      /**
       * Sets a new value for property <code>showLabel</code>.show additional labels in the conditionWhen
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bShowLabel New value for property <code>showLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowLabel(bShowLabel: boolean): sap.m.P13nConditionPanel;

      /**
       * Sets a new value for property <code>usePrevConditionSetting</code>.new added condition use the
       * settings from the previous condition as default.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bUsePrevConditionSetting New value for property <code>usePrevConditionSetting</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUsePrevConditionSetting(bUsePrevConditionSetting: boolean): sap.m.P13nConditionPanel;

      /**
       * Sets a new value for property <code>validationExecutor</code>.Calls the validation listener
       * tbd...When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param oValidationExecutor New value for property <code>validationExecutor</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValidationExecutor(oValidationExecutor: any): sap.m.P13nConditionPanel;
    }
    /**
     * Type for <code>columnsItems</code> aggregation in P13nDimMeasurePanel control.
     * @resource sap/m/P13nDimMeasureItem.js
    */
    export class P13nDimMeasureItem extends sap.ui.core.Item {


      /**
       * Constructor for a new P13nDimMeasureItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>columnKey</code>.Specifies the unique chart column key. In this
       * context a column refers to dimensions or measures of a chart.
       * @since 1.34.0
       * @returns Value of property <code>columnKey</code>
      */
      getColumnKey(): string;

      /**
       * Gets current value of property <code>index</code>.Specifies the order of visible dimensions or
       * measures of a chart.Default value is <code>-1</code>.
       * @since 1.34.0
       * @returns Value of property <code>index</code>
      */
      getIndex(): number;

      /**
       * Returns a metadata object for class sap.m.P13nDimMeasureItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>role</code>.Specifies the role of dimensions or measures. The
       * role determines how dimensions and measures influence the chart.
       * @since 1.34.0
       * @returns Value of property <code>role</code>
      */
      getRole(): string;

      /**
       * Gets current value of property <code>visible</code>.Specifies the visibility of dimensions or
       * measures.
       * @since 1.34.0
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Sets a new value for property <code>columnKey</code>.Specifies the unique chart column key. In this
       * context a column refers to dimensions or measures of a chart.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.34.0
       * @param sColumnKey New value for property <code>columnKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setColumnKey(sColumnKey: string): sap.m.P13nDimMeasureItem;

      /**
       * Sets a new value for property <code>index</code>.Specifies the order of visible dimensions or
       * measures of a chart.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>-1</code>.
       * @since 1.34.0
       * @param iIndex New value for property <code>index</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIndex(iIndex: number): sap.m.P13nDimMeasureItem;

      /**
       * Sets a new value for property <code>role</code>.Specifies the role of dimensions or measures. The
       * role determines how dimensions and measures influence the chart.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @since 1.34.0
       * @param sRole New value for property <code>role</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRole(sRole: string): sap.m.P13nDimMeasureItem;

      /**
       * Sets a new value for property <code>visible</code>.Specifies the visibility of dimensions or
       * measures.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @since 1.34.0
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.P13nDimMeasureItem;
    }
    /**
     * Items provide information about Error Messages in the page.
     * @resource sap/m/MessagePopoverItem.js
    */
    export class MessagePopoverItem extends sap.ui.core.Element {


      /**
       * Constructor for a new MessagePopoverItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Destroys the link in the aggregation <code>link</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyLink(): sap.m.MessagePopoverItem;


      /**
       * Gets current value of property <code>counter</code>.Defines the number of messages for a given
       * message.
       * @returns Value of property <code>counter</code>
      */
      getCounter(): number;

      /**
       * Gets current value of property <code>description</code>.Specifies detailed description of the
       * messageDefault value is <code></code>.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets content of aggregation <code>link</code>.Adds a sap.m.Link control which will be displayed at
       * the end of the description of a message.
      */
      getLink(): sap.m.Link;

      /**
       * Gets current value of property <code>longtextUrl</code>.Specifies long text description location URL
       * @returns Value of property <code>longtextUrl</code>
      */
      getLongtextUrl(): any;

      /**
       * Gets current value of property <code>markupDescription</code>.Specifies if description should be
       * interpreted as markupDefault value is <code>false</code>.
       * @returns Value of property <code>markupDescription</code>
      */
      getMarkupDescription(): boolean;

      /**
       * Returns a metadata object for class sap.m.MessagePopoverItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>subtitle</code>.Specifies the subtitle of the
       * message<b>Note:</b> This is only visible when the <code>title</code> property is not empty.
       * @returns Value of property <code>subtitle</code>
      */
      getSubtitle(): string;

      /**
       * Gets current value of property <code>title</code>.Specifies the title of the messageDefault value is
       * <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>type</code>.Specifies the type of the messageDefault value is
       * <code>Error</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.ui.core.MessageType;

      /**
       * Sets a new value for property <code>counter</code>.Defines the number of messages for a given
       * message.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param iCounter New value for property <code>counter</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCounter(iCounter: number): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>description</code>.Specifies detailed description of the
       * messageWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.MessagePopoverItem;

      /**
       * Sets the aggregated <code>link</code>.
       * @param oLink The link to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLink(oLink: sap.m.Link): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>longtextUrl</code>.Specifies long text description location
       * URLWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sLongtextUrl New value for property <code>longtextUrl</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLongtextUrl(sLongtextUrl: any): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>markupDescription</code>.Specifies if description should be
       * interpreted as markupWhen called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bMarkupDescription New value for property <code>markupDescription</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMarkupDescription(bMarkupDescription: boolean): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>subtitle</code>.Specifies the subtitle of the
       * message<b>Note:</b> This is only visible when the <code>title</code> property is not empty.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sSubtitle New value for property <code>subtitle</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubtitle(sSubtitle: string): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>title</code>.Specifies the title of the messageWhen called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.MessagePopoverItem;

      /**
       * Sets a new value for property <code>type</code>.Specifies the type of the messageWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>Error</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.ui.core.MessageType): sap.m.MessagePopoverItem;
    }
    /**
     * The <code>sap.m.TabStripSelectList</code> displays a list of items that allows the user to select an
     * item.
     * @resource sap/m/TabStripSelectList.js
    */
    export class TabStripSelectList extends sap.m.SelectList {


      /**
       * Constructor for a new <code>TabStripSelectList</code>.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.TabStripSelectList.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Initializes the control.
      */
      init(): void;
    }
    /**
     * Table Personalization Provider
     * @resource sap/m/TablePersoProvider.js
    */
    export abstract class TablePersoProvider extends sap.ui.base.ManagedObject {


      /**
       * This is an abstract TablePersoProvider, describing the interface for a realTablePersoProvider.
      */
      constructor();



      /**
       * Removes the personalization bundleThis must return a jQuery promise (see
       * http://api.jquery.com/promise/)
      */
      delPersData(): void;


      /**
       * Callback function which can be used to determine the title of a given columnwithin the
       * TablePersoDialog. As a default, the column header controls areasked for their 'text' or 'title'
       * property. This works in most cases, for exampleif the header control is a sap.m.Label (has 'text'
       * property) or a sap.m.ObjectListItem(has 'title' property).If the header control used in a column has
       * neither 'text' nor 'title' property, or if you would like todisplay a modified column name for a
       * certain column, this callback function can be used.If the callback delivers null for a column (which
       * is the default implementation), the defaulttexts described above are displayed for that column in
       * the TablePersoDialog.In case neither the callback delivers null and neither 'text' nor ' title'
       * property are at hand,the TablePersoDialog will display the column id and a warning message is
       * logged.
       * @param oColumn column whose caption shall be determined
      */
      getCaption(oColumn: sap.m.Column): void;

      /**
       * Callback function which can be used to determine the group of a given columnwithin the
       * TablePersoDialog. As a default, the columns are not assigned to a group.This information is used to
       * group the columns within the TablePersoDialog if the TablePersoController's'group' flag is set,
       * otherwise, the groups are ignored.
       * @param oColumn column whose group shall be determined
      */
      getGroup(oColumn: sap.m.Column): void;

      /**
       * Returns a metadata object for class sap.m.TablePersoProvider.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Retrieves the personalization bundle.This must return a jQuery promise (see
       * http://api.jquery.com/promise/)
      */
      getPersData(): void;

      /**
       * Initializes the TablePersoProvider instance after creation.
      */
      init(): void;

      /**
       * Resets user’s personalization for a given table so that ‘getPersData’ willdeliver its initial state.
       * If no table is specified, all personalizationsof the currently logged on user are reset.This must
       * return a jQuery promise (see http://api.jquery.com/promise/)
      */
      resetPersData(): void;

      /**
       * Stores the personalization bundle, overwriting anyprevious bundle completelyThis must return a
       * jQuery promise (see http://api.jquery.com/promise/)
       * @param oBundle undefined
      */
      setPersData(oBundle: any): void;
    }
    /**
     * The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the
     * visibility, the order and roles of       dimensions and measures for table personalization.
     * @resource sap/m/P13nDimMeasurePanel.js
    */
    export class P13nDimMeasurePanel extends sap.m.P13nPanel {


      /**
       * Constructor for a new P13nDimMeasurePanel.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some availableChartType to the aggregation <code>availableChartTypes</code>.
       * @since 1.34.0
       * @param oAvailableChartType the availableChartType to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAvailableChartType(oAvailableChartType: sap.ui.core.Item): sap.m.P13nDimMeasurePanel;

      /**
       * Adds some dimMeasureItem to the aggregation <code>dimMeasureItems</code>.
       * @since 1.34.0
       * @param oDimMeasureItem the dimMeasureItem to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem): sap.m.P13nDimMeasurePanel;

      /**
       * Binds aggregation <code>dimMeasureItems</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.34.0
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindDimMeasureItems(oBindingInfo: any): sap.m.P13nDimMeasurePanel;

      /**
       * Destroys all the availableChartTypes in the aggregation <code>availableChartTypes</code>.
       * @since 1.34.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAvailableChartTypes(): sap.m.P13nDimMeasurePanel;

      /**
       * Destroys all the dimMeasureItems in the aggregation <code>dimMeasureItems</code>.
       * @since 1.34.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyDimMeasureItems(): sap.m.P13nDimMeasurePanel;


      /**
       * Gets content of aggregation <code>availableChartTypes</code>.Specifies available chart types.
       * @since 1.34.0
      */
      getAvailableChartTypes(): sap.ui.core.Item[];

      /**
       * Gets current value of property <code>chartTypeKey</code>.Specifies a chart type key.Default value is
       * <code></code>.
       * @since 1.34.0
       * @returns Value of property <code>chartTypeKey</code>
      */
      getChartTypeKey(): string;

      /**
       * Gets content of aggregation <code>dimMeasureItems</code>.List of columns that has been changed.
       * @since 1.34.0
      */
      getDimMeasureItems(): sap.m.P13nDimMeasureItem[];

      /**
       * Returns a metadata object for class sap.m.P13nDimMeasurePanel.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation
       * <code>availableChartTypes</code>.and returns its index if found or -1 otherwise.
       * @since 1.34.0
       * @param oAvailableChartType The availableChartType whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAvailableChartType(oAvailableChartType: sap.ui.core.Item): number;

      /**
       * Checks for the provided <code>sap.m.P13nDimMeasureItem</code> in the aggregation
       * <code>dimMeasureItems</code>.and returns its index if found or -1 otherwise.
       * @since 1.34.0
       * @param oDimMeasureItem The dimMeasureItem whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem): number;

      /**
       * Inserts a availableChartType into the aggregation <code>availableChartTypes</code>.
       * @since 1.34.0
       * @param oAvailableChartType the availableChartType to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the availableChartType should be inserted at; for      
       *       a negative value of <code>iIndex</code>, the availableChartType is inserted at position 0; for
       * a value             greater than the current size of the aggregation, the availableChartType is
       * inserted at             the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAvailableChartType(oAvailableChartType: sap.ui.core.Item, iIndex: number): sap.m.P13nDimMeasurePanel;

      /**
       * Inserts a dimMeasureItem into the aggregation <code>dimMeasureItems</code>.
       * @since 1.34.0
       * @param oDimMeasureItem the dimMeasureItem to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the dimMeasureItem should be inserted at; for          
       *   a negative value of <code>iIndex</code>, the dimMeasureItem is inserted at position 0; for a value
       *             greater than the current size of the aggregation, the dimMeasureItem is inserted at     
       *        the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem, iIndex: number): sap.m.P13nDimMeasurePanel;

      /**
       * Removes all the controls from the aggregation <code>availableChartTypes</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.34.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAvailableChartTypes(): sap.ui.core.Item[];

      /**
       * Removes all the controls from the aggregation <code>dimMeasureItems</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @since 1.34.0
       * @returns An array of the removed elements (might be empty)
      */
      removeAllDimMeasureItems(): sap.m.P13nDimMeasureItem[];

      /**
       * Removes a availableChartType from the aggregation <code>availableChartTypes</code>.
       * @since 1.34.0
       * @param vAvailableChartType The availableChartType to remove or its index or id
       * @returns The removed availableChartType or <code>null</code>
      */
      removeAvailableChartType(vAvailableChartType: number | string | sap.ui.core.Item): sap.ui.core.Item;

      /**
       * Removes a dimMeasureItem from the aggregation <code>dimMeasureItems</code>.
       * @since 1.34.0
       * @param vDimMeasureItem The dimMeasureItem to remove or its index or id
       * @returns The removed dimMeasureItem or <code>null</code>
      */
      removeDimMeasureItem(vDimMeasureItem: number | string | sap.m.P13nDimMeasureItem): sap.m.P13nDimMeasureItem;

      /**
       * Sets a new value for property <code>chartTypeKey</code>.Specifies a chart type key.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @since 1.34.0
       * @param sChartTypeKey New value for property <code>chartTypeKey</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setChartTypeKey(sChartTypeKey: string): sap.m.P13nDimMeasurePanel;

      /**
       * Unbinds aggregation <code>dimMeasureItems</code> from model data.
       * @since 1.34.0
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindDimMeasureItems(): sap.m.P13nDimMeasurePanel;
    }
    /**
     * <code>sap.m.GroupHeaderListItem</code> is used to display the title of a group and act as separator
     * between groups in <code>sap.m.List</code> and <code>sap.m.Table</code>.<b>Note:</b> The inherited
     * properties <code>unread</code>, <code>selected</code>, <code>counter</code> and <code>press</code>
     * event from <code>sap.m.ListItemBase</code> are not supported.
     * @resource sap/m/GroupHeaderListItem.js
    */
    export class GroupHeaderListItem extends sap.m.ListItemBase {


      /**
       * Constructor for a new GroupHeaderListItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId Id for the new control, generated automatically if no id is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>count</code>.Defines the count of items in the group, but it
       * could also be an amount which represents the sum of all amounts in the group.<b>Note:</b> Will not
       * be displayed if not set.
       * @returns Value of property <code>count</code>
      */
      getCount(): string;

      /**
       * Returns a metadata object for class sap.m.GroupHeaderListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>title</code>.Defines the title of the group header.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Gets current value of property <code>titleTextDirection</code>.Defines the title text directionality
       * with enumerated options. By default, the control inherits text direction from the DOM.Default value
       * is <code>Inherit</code>.
       * @since 1.28.0
       * @returns Value of property <code>titleTextDirection</code>
      */
      getTitleTextDirection(): sap.ui.core.TextDirection;

      /**
       * Gets current value of property <code>upperCase</code>.Allows to uppercase the group title.Default
       * value is <code>false</code>.
       * @since 1.13.2
       * @returns Value of property <code>upperCase</code>
      */
      getUpperCase(): boolean;

      /**
       * Sets a new value for property <code>count</code>.Defines the count of items in the group, but it
       * could also be an amount which represents the sum of all amounts in the group.<b>Note:</b> Will not
       * be displayed if not set.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sCount New value for property <code>count</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCount(sCount: string): sap.m.GroupHeaderListItem;

      /**
       * Sets a new value for property <code>title</code>.Defines the title of the group header.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.GroupHeaderListItem;

      /**
       * Sets a new value for property <code>titleTextDirection</code>.Defines the title text directionality
       * with enumerated options. By default, the control inherits text direction from the DOM.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>Inherit</code>.
       * @since 1.28.0
       * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.GroupHeaderListItem;

      /**
       * Sets a new value for property <code>upperCase</code>.Allows to uppercase the group title.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>false</code>.
       * @since 1.13.2
       * @param bUpperCase New value for property <code>upperCase</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUpperCase(bUpperCase: boolean): sap.m.GroupHeaderListItem;
    }
    /**
     * The SegmentedButtonItem control is used for creating buttons for the sap.m.SegmentedButton.It is
     * derived from a core sap.ui.core.Item.
     * @resource sap/m/SegmentedButtonItem.js
    */
    export class SegmentedButtonItem extends sap.ui.core.Item {


      /**
       * Constructor for a new SegmentedButtonItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this
       * <code>sap.m.SegmentedButtonItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.SegmentedButtonItem</code> itself.Fires when the user clicks on an individual
       * button.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.SegmentedButtonItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPress(oData: any, fnFunction: any, oListener?: any): sap.m.SegmentedButtonItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this
       * <code>sap.m.SegmentedButtonItem</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPress(fnFunction: any, oListener: any): sap.m.SegmentedButtonItem;


      /**
       * Fires event <code>press</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePress(mArguments: any): sap.m.SegmentedButtonItem;

      /**
       * Gets current value of property <code>icon</code>.The icon, which belongs to the button.This can be
       * an URI to an image or an icon font URI.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): string;

      /**
       * Returns a metadata object for class sap.m.SegmentedButtonItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>visible</code>.Whether the button should be visible on the
       * screen. If set to false, a placeholder is rendered instead of the real button.Default value is
       * <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Gets current value of property <code>width</code>.Sets the width of the buttons.
       * @returns Value of property <code>width</code>
      */
      getWidth(): any;

      /**
       * Sets a new value for property <code>icon</code>.The icon, which belongs to the button.This can be an
       * URI to an image or an icon font URI.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: string): sap.m.SegmentedButtonItem;

      /**
       * Sets a new value for property <code>visible</code>.Whether the button should be visible on the
       * screen. If set to false, a placeholder is rendered instead of the real button.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.SegmentedButtonItem;

      /**
       * Sets a new value for property <code>width</code>.Sets the width of the buttons.When called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @param sWidth New value for property <code>width</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setWidth(sWidth: any): sap.m.SegmentedButtonItem;
    }
    /**
     * Row in the <code>PlanningCalendar</code>.This element holds the data of one row in the
     * <code>PlanningCalendar</code>. Once the header information (e.g. person information)is assigned, the
     * appointments are assigned.
     * @resource sap/m/PlanningCalendarRow.js
    */
    export class PlanningCalendarRow extends sap.ui.core.Element {


      /**
       * Constructor for a new <code>PlanningCalendarRow</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some appointment to the aggregation <code>appointments</code>.
       * @param oAppointment the appointment to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAppointment(oAppointment: sap.ui.unified.CalendarAppointment): sap.m.PlanningCalendarRow;

      /**
       * Adds some intervalHeader to the aggregation <code>intervalHeaders</code>.
       * @param oIntervalHeader the intervalHeader to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): sap.m.PlanningCalendarRow;

      /**
       * Destroys all the appointments in the aggregation <code>appointments</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAppointments(): sap.m.PlanningCalendarRow;

      /**
       * Destroys all the intervalHeaders in the aggregation <code>intervalHeaders</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyIntervalHeaders(): sap.m.PlanningCalendarRow;


      /**
       * Gets content of aggregation <code>appointments</code>.Appointments to be displayed in the row.
       * Appointments outside the visible time frame are not rendered.<b>Note:</b> For performance reasons
       * only appointments in the visible time range or nearby should be assigned.
      */
      getAppointments(): sap.ui.unified.CalendarAppointment[];

      /**
       * Gets current value of property <code>icon</code>.Icon of the header (e.g. picture of the person)URI
       * of an image or an icon registered in sap.ui.core.IconPool.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Gets content of aggregation <code>intervalHeaders</code>.Appointments to be displayed in the top of
       * the intervals. The <code>intervalHeaders</code> are used to visualizepublic holidays and similar
       * things.Appointments outside the visible time frame are not rendered.The <code>intervalHeaders</code>
       * always fill whole intervals. If they are shorter than one interval they are not
       * displayed.<b>Note:</b> For performance reasons only appointments in the visible time range or nearby
       * should be assigned.
      */
      getIntervalHeaders(): sap.ui.unified.CalendarAppointment[];

      /**
       * Gets current value of property <code>key</code>.Can be used as an identifier of the row
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.PlanningCalendarRow.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>nonWorkingDays</code>.If set, the provided weekdays are
       * displayed as non-working days.Valid values inside the array are 0 to 6. (other values will just be
       * ignored.)If not set, the weekend defined in the locale settings is displayed as non-working
       * days.<b>Note:</b> The non-working days are only visualized if <code>intervalType</code> is set to
       * day.
       * @returns Value of property <code>nonWorkingDays</code>
      */
      getNonWorkingDays(): number;

      /**
       * Gets current value of property <code>nonWorkingHours</code>.If set, the provided hours are displayed
       * as non-working hours.Valid values inside the array are 0 to 23. (other values will just be
       * ignored.)<b>Note:</b> The non-working hours are only visualized if <code>intervalType</code> is set
       * to hour.
       * @returns Value of property <code>nonWorkingHours</code>
      */
      getNonWorkingHours(): number;

      /**
       * Gets current value of property <code>selected</code>.Defines the selected state of the
       * <code>PlanningCalendarRow</code>.<b>Note:</b> Binding the <code>selected</code> property in single
       * selection modes may cause unwanted results if you have more than one selected row in your
       * binding.Default value is <code>false</code>.
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Gets current value of property <code>text</code>.Text of the header (e.g. department of the person)
       * @returns Value of property <code>text</code>
      */
      getText(): string;

      /**
       * Gets current value of property <code>title</code>.Title of the header (e.g. name of the person)
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation
       * <code>appointments</code>.and returns its index if found or -1 otherwise.
       * @param oAppointment The appointment whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAppointment(oAppointment: sap.ui.unified.CalendarAppointment): number;

      /**
       * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation
       * <code>intervalHeaders</code>.and returns its index if found or -1 otherwise.
       * @param oIntervalHeader The intervalHeader whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): number;

      /**
       * Inserts a appointment into the aggregation <code>appointments</code>.
       * @param oAppointment the appointment to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the appointment should be inserted at; for            
       * a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value     
       *        greater than the current size of the aggregation, the appointment is inserted at            
       * the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAppointment(oAppointment: sap.ui.unified.CalendarAppointment, iIndex: number): sap.m.PlanningCalendarRow;

      /**
       * Inserts a intervalHeader into the aggregation <code>intervalHeaders</code>.
       * @param oIntervalHeader the intervalHeader to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the intervalHeader should be inserted at; for          
       *   a negative value of <code>iIndex</code>, the intervalHeader is inserted at position 0; for a value
       *             greater than the current size of the aggregation, the intervalHeader is inserted at     
       *        the last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment, iIndex: number): sap.m.PlanningCalendarRow;

      /**
       * Removes all the controls from the aggregation <code>appointments</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAppointments(): sap.ui.unified.CalendarAppointment[];

      /**
       * Removes all the controls from the aggregation <code>intervalHeaders</code>.Additionally, it
       * unregisters them from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllIntervalHeaders(): sap.ui.unified.CalendarAppointment[];

      /**
       * Removes a appointment from the aggregation <code>appointments</code>.
       * @param vAppointment The appointment to remove or its index or id
       * @returns The removed appointment or <code>null</code>
      */
      removeAppointment(vAppointment: number | string | sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;

      /**
       * Removes a intervalHeader from the aggregation <code>intervalHeaders</code>.
       * @param vIntervalHeader The intervalHeader to remove or its index or id
       * @returns The removed intervalHeader or <code>null</code>
      */
      removeIntervalHeader(vIntervalHeader: number | string | sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;

      /**
       * Sets a new value for property <code>icon</code>.Icon of the header (e.g. picture of the person)URI
       * of an image or an icon registered in sap.ui.core.IconPool.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>key</code>.Can be used as an identifier of the rowWhen called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>nonWorkingDays</code>.If set, the provided weekdays are
       * displayed as non-working days.Valid values inside the array are 0 to 6. (other values will just be
       * ignored.)If not set, the weekend defined in the locale settings is displayed as non-working
       * days.<b>Note:</b> The non-working days are only visualized if <code>intervalType</code> is set to
       * day.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sNonWorkingDays New value for property <code>nonWorkingDays</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNonWorkingDays(sNonWorkingDays: number): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>nonWorkingHours</code>.If set, the provided hours are displayed
       * as non-working hours.Valid values inside the array are 0 to 23. (other values will just be
       * ignored.)<b>Note:</b> The non-working hours are only visualized if <code>intervalType</code> is set
       * to hour.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sNonWorkingHours New value for property <code>nonWorkingHours</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setNonWorkingHours(sNonWorkingHours: number): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>selected</code>.Defines the selected state of the
       * <code>PlanningCalendarRow</code>.<b>Note:</b> Binding the <code>selected</code> property in single
       * selection modes may cause unwanted results if you have more than one selected row in your
       * binding.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @param bSelected New value for property <code>selected</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSelected(bSelected: boolean): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>text</code>.Text of the header (e.g. department of the
       * person)When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sText New value for property <code>text</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setText(sText: string): sap.m.PlanningCalendarRow;

      /**
       * Sets a new value for property <code>title</code>.Title of the header (e.g. name of the person)When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.PlanningCalendarRow;
    }
    /**
     * The NotificationListBase is the base class for NotificationListItem and NotificationListGroup.
     * @resource sap/m/NotificationListBase.js
    */
    export class NotificationListBase extends sap.m.ListItemBase {


      /**
       * Constructor for a new NotificationListBase.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Returns the sap.m.Image or the sap.ui.core.Control used in the NotificationListBase's author
       * picture.
       * @returns The notification author picture text
      */
      _getAuthorImage(): sap.m.Image | sap.ui.core.Control;

      /**
       * Returns the sap.m.Text control used in the NotificationListBase's author name.
       * @returns The notification author name text
      */
      _getAuthorName(): sap.m.Text;

      /**
       * Returns the sap.m.Text control used in the NotificationListBase's header title.
       * @returns The datetime control inside the Notification List Base control
      */
      _getDateTimeText(): sap.m.Text;

      /**
       * Returns the sap.m.Text control used in the NotificationListBase's header title.
       * @returns The title control inside the Notification List Base control
      */
      _getHeaderTitle(): sap.m.Text;

      /**
       * Returns the sap.m.OverflowToolbar control used in the NotificationListBase.
       * @returns The footer toolbar
      */
      _getToolbar(): sap.m.OverflowToolbar;

      /**
       * Adds some button to the aggregation <code>buttons</code>.
       * @param oButton the button to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addButton(oButton: sap.m.Button): sap.m.NotificationListBase;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this
       * <code>sap.m.NotificationListBase</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.NotificationListBase</code> itself.Fired when the close button of the
       * notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification
       * automatically.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.NotificationListBase</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachClose(oData: any, fnFunction: any, oListener?: any): sap.m.NotificationListBase;

      /**
       * Destroys all the buttons in the aggregation <code>buttons</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyButtons(): sap.m.NotificationListBase;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this
       * <code>sap.m.NotificationListBase</code>.The passed function and listener object must match the ones
       * used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachClose(fnFunction: any, oListener: any): sap.m.NotificationListBase;


      /**
       * Fires event <code>close</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireClose(mArguments: any): sap.m.NotificationListBase;

      /**
       * Gets current value of property <code>authorName</code>.Determines the notification group's author
       * name.Default value is <code></code>.
       * @returns Value of property <code>authorName</code>
      */
      getAuthorName(): string;

      /**
       * Gets current value of property <code>authorPicture</code>.Determines the URL of the notification
       * group's author picture.
       * @returns Value of property <code>authorPicture</code>
      */
      getAuthorPicture(): any;

      /**
       * Gets content of aggregation <code>buttons</code>.Action buttons.
      */
      getButtons(): sap.m.Button[];

      /**
       * Gets current value of property <code>datetime</code>.Determines the due date of the
       * NotificationListItem.Default value is <code></code>.
       * @returns Value of property <code>datetime</code>
      */
      getDatetime(): string;

      /**
       * Returns a metadata object for class sap.m.NotificationListBase.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>priority</code>.Determines the priority of the
       * Notification.Default value is <code>None</code>.
       * @returns Value of property <code>priority</code>
      */
      getPriority(): sap.ui.core.Priority;

      /**
       * Gets current value of property <code>showButtons</code>.Determines the action buttons
       * visibility.Default value is <code>true</code>.
       * @returns Value of property <code>showButtons</code>
      */
      getShowButtons(): boolean;

      /**
       * Gets current value of property <code>showCloseButton</code>.Determines the visibility of the close
       * button.Default value is <code>true</code>.
       * @returns Value of property <code>showCloseButton</code>
      */
      getShowCloseButton(): boolean;

      /**
       * Gets current value of property <code>title</code>.Determines the title of the NotificationListBase
       * item.Default value is <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.and
       * returns its index if found or -1 otherwise.
       * @param oButton The button whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfButton(oButton: sap.m.Button): number;

      /**
       * Inserts a button into the aggregation <code>buttons</code>.
       * @param oButton the button to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the button should be inserted at; for             a
       * negative value of <code>iIndex</code>, the button is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the button is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertButton(oButton: sap.m.Button, iIndex: number): sap.m.NotificationListBase;

      /**
       * Removes all the controls from the aggregation <code>buttons</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllButtons(): sap.m.Button[];

      /**
       * Removes a button from the aggregation <code>buttons</code>.
       * @param vButton The button to remove or its index or id
       * @returns The removed button or <code>null</code>
      */
      removeButton(vButton: number | string | sap.m.Button): sap.m.Button;

      /**
       * Sets a new value for property <code>authorName</code>.Determines the notification group's author
       * name.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sAuthorName New value for property <code>authorName</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAuthorName(sAuthorName: string): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>authorPicture</code>.Determines the URL of the notification
       * group's author picture.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.
       * @param sAuthorPicture New value for property <code>authorPicture</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAuthorPicture(sAuthorPicture: any): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>datetime</code>.Determines the due date of the
       * NotificationListItem.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sDatetime New value for property <code>datetime</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDatetime(sDatetime: string): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>priority</code>.Determines the priority of the Notification.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>None</code>.
       * @param sPriority New value for property <code>priority</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPriority(sPriority: sap.ui.core.Priority): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>showButtons</code>.Determines the action buttons visibility.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bShowButtons New value for property <code>showButtons</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowButtons(bShowButtons: boolean): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>showCloseButton</code>.Determines the visibility of the close
       * button.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>true</code>.
       * @param bShowCloseButton New value for property <code>showCloseButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowCloseButton(bShowCloseButton: boolean): sap.m.NotificationListBase;

      /**
       * Sets a new value for property <code>title</code>.Determines the title of the NotificationListBase
       * item.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.NotificationListBase;
    }
    /**
     * View of the <code>PlanningCalendar</code>.The <code>PlanningCalendarView</code> defines the
     * granularity of the output. It defines what type of intervals (hours, days or months)and how many
     * intervals are shown.
     * @resource sap/m/PlanningCalendarView.js
    */
    export class PlanningCalendarView extends sap.ui.core.Element {


      /**
       * Constructor for a new <code>PlanningCalendarView</code>.Accepts an object literal
       * <code>mSettings</code> that defines initialproperty values, aggregated and associated objects as
       * well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>description</code>.Description of the
       * <code>PlanningCalendarView</code>
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>intervalsL</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on large size (desktop)<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.Default value is <code>12</code>.
       * @returns Value of property <code>intervalsL</code>
      */
      getIntervalsL(): number;

      /**
       * Gets current value of property <code>intervalsM</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on medium size (tablet)<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.Default value is <code>8</code>.
       * @returns Value of property <code>intervalsM</code>
      */
      getIntervalsM(): number;

      /**
       * Gets current value of property <code>intervalsS</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on small size (phones).<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.Default value is <code>6</code>.
       * @returns Value of property <code>intervalsS</code>
      */
      getIntervalsS(): number;

      /**
       * Gets current value of property <code>intervalType</code>.Type of the intervals of the row. Default
       * is Hour.Default value is <code>Hour</code>.
       * @returns Value of property <code>intervalType</code>
      */
      getIntervalType(): sap.ui.unified.CalendarIntervalType;

      /**
       * Gets current value of property <code>key</code>.Key of the view. This must be set to identify the
       * used view in the <code>PlanningCalendar</code>
       * @returns Value of property <code>key</code>
      */
      getKey(): string;

      /**
       * Returns a metadata object for class sap.m.PlanningCalendarView.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showSubIntervals</code>.If set subintervals are shown.If the
       * interval type is <code>Hour</code>, quarter hours are shown.If the interval type is
       * <code>Day</code>, hours are shown.If the interval type is <code>Month</code>, days are shown.Default
       * value is <code>false</code>.
       * @returns Value of property <code>showSubIntervals</code>
      */
      getShowSubIntervals(): boolean;

      /**
       * Sets a new value for property <code>description</code>.Description of the
       * <code>PlanningCalendarView</code>When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>intervalsL</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on large size (desktop)<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>12</code>.
       * @param iIntervalsL New value for property <code>intervalsL</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntervalsL(iIntervalsL: number): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>intervalsM</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on medium size (tablet)<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>8</code>.
       * @param iIntervalsM New value for property <code>intervalsM</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntervalsM(iIntervalsM: number): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>intervalsS</code>.Number of intervals (defined with
       * <code>intervalType</code>) that are displayed on small size (phones).<b>Note:</b> It is not only the
       * screen size which is used to determine the available space, the size of the
       * <code>PlanningCalendar</code> is used as well.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>6</code>.
       * @param iIntervalsS New value for property <code>intervalsS</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntervalsS(iIntervalsS: number): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>intervalType</code>.Type of the intervals of the row. Default is
       * Hour.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>Hour</code>.
       * @param sIntervalType New value for property <code>intervalType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIntervalType(sIntervalType: sap.ui.unified.CalendarIntervalType): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>key</code>.Key of the view. This must be set to identify the
       * used view in the <code>PlanningCalendar</code>When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sKey New value for property <code>key</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setKey(sKey: string): sap.m.PlanningCalendarView;

      /**
       * Sets a new value for property <code>showSubIntervals</code>.If set subintervals are shown.If the
       * interval type is <code>Hour</code>, quarter hours are shown.If the interval type is
       * <code>Day</code>, hours are shown.If the interval type is <code>Month</code>, days are shown.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bShowSubIntervals New value for property <code>showSubIntervals</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowSubIntervals(bShowSubIntervals: boolean): sap.m.PlanningCalendarView;
    }
    /**
     * Table Personalization Controller
     * @resource sap/m/TablePersoController.js
    */
    export class TablePersoController extends sap.ui.base.ManagedObject {


      /**
       * The TablePersoController can be used to connect a table that you want to providea personalization
       * dialog for, with a persistence service such as one provided bythe unified shell.Accepts an object
       * literal <code>mSettings</code> that defines initialproperty values, aggregated and associated
       * objects as well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general
       * description of the syntax of the settings object.
       * @param sId optional id for the new control; generated automatically if            no non-empty id is given
       * Note: this can be omitted, no matter            whether <code>mSettings</code> will be given or not!
       * @param mSettings optional map/JSON-object with initial settings for the            new component instance
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Activates the controller, i.e. tries to retrieve existing persistedpersonalizations, creates a
       * TablePersoDialog for the associatedtable and attaches a close handler to apply the personalizations
       * tothe table and persist them.This method should be called when the table to be personalized knowsits
       * columns. Usually, this is when that table's view has set its model,which is typically done in the
       * corresponding controller's init method.For example<pre><code> onInit: function () {        // set explored
       * app's demo model on this sample        var oModel = new
       * JSONModel(jQuery.sap.getModulePath("sap.ui.demo.mock", "/products.json"));        var oGroupingModel = new
       * JSONModel({ hasGrouping: false});        this.getView().setModel(oModel);    
       * this.getView().setModel(oGroupingModel, 'Grouping');        // init and activate controller        this._oTPC =
       * new TablePersoController({            table: this.getView().byId("productsTable"),            //specify the first part
       * of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'            componentName: "demoApp",        
       * persoService: DemoPersoService,        }).activate();    }</code></pre>
       * @returns the TablePersoController instance.
      */
      activate(): TablePersoController;

      /**
       * Adds some table into the association <code>tables</code>.
       * @param vTable the tables to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addTable(vTable: any | sap.m.Table): sap.m.TablePersoController;

      /**
       * Applies the personalizations by getting the existing personalizationsand adjusting to the table.
       * @param oTable the table to be personalized.
      */
      applyPersonalizations(oTable: sap.m.Table): void;

      /**
       * Attaches event handler <code>fnFunction</code> to the <code>personalizationsDone</code> event of
       * this <code>sap.m.TablePersoController</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.TablePersoController</code> itself.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.TablePersoController</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachPersonalizationsDone(oData: any, fnFunction: any, oListener?: any): sap.m.TablePersoController;

      /**
       * Destroys the persoService in the aggregation <code>persoService</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyPersoService(): sap.m.TablePersoController;

      /**
       * Detaches event handler <code>fnFunction</code> from the <code>personalizationsDone</code> event of
       * this <code>sap.m.TablePersoController</code>.The passed function and listener object must match the
       * ones used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachPersonalizationsDone(fnFunction: any, oListener: any): sap.m.TablePersoController;

      /**
       * Do some clean up: remove event delegates, etc
      */
      exit(): void;


      /**
       * Fires event <code>personalizationsDone</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      firePersonalizationsDone(mArguments: any): sap.m.TablePersoController;

      /**
       * Gets current value of property <code>componentName</code>.Available options for the text direction
       * are LTR and RTL. By default the control inherits the text direction from its parent control.
       * @returns Value of property <code>componentName</code>
      */
      getComponentName(): string;

      /**
       * Gets current value of property <code>contentHeight</code>.Default value is <code>20rem</code>.
       * @returns Value of property <code>contentHeight</code>
      */
      getContentHeight(): any;

      /**
       * Gets current value of property <code>contentWidth</code>.
       * @returns Value of property <code>contentWidth</code>
      */
      getContentWidth(): any;

      /**
       * Gets current value of property <code>hasGrouping</code>.Default value is <code>false</code>.
       * @returns Value of property <code>hasGrouping</code>
      */
      getHasGrouping(): boolean;

      /**
       * Returns a metadata object for class sap.m.TablePersoController.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets content of aggregation <code>persoService</code>.
      */
      getPersoService(): any;

      /**
       * Gets current value of property <code>showResetAll</code>.Default value is <code>true</code>.
       * @returns Value of property <code>showResetAll</code>
      */
      getShowResetAll(): boolean;

      /**
       * Gets current value of property <code>showSelectAll</code>.Default value is <code>true</code>.
       * @returns Value of property <code>showSelectAll</code>
      */
      getShowSelectAll(): boolean;

      /**
       * ID of the element which is the current target of the association <code>table</code>, or
       * <code>null</code>.
      */
      getTable(): any;

      /**
       * Returns a  _tablePersoDialog instance if available. It can be NULL ifthe controller has not been
       * activated yet.This function makes a private aggregate publicly accessable. This isnecessary for
       * downward compatibility reasons: in the first versionsof the tablePersoProvider developers still
       * worked with the TablePersoDialogdirectly, which is now not necessary any longer.
       * @returns the TablePersoDialog instance.
      */
      getTablePersoDialog(): TablePersoDialog;

      /**
       * Returns array of IDs of the elements which are the current targets of the association
       * <code>tables</code>.
      */
      getTables(): any[];

      /**
       * Initializes the TablePersoController instance after creation.
      */
      init(): void;

      /**
       * Opens the TablePersoDialog, stores the personalized settings on close,modifies the table columns,
       * and sends them to the persistence service
      */
      openDialog(): void;

      /**
       * Refresh the personalizations: reloads the personalization information from the table persoprovider,
       * applies it to the controller's table and updates the controller's table perso dialog.Use case for a
       * 'refresh' call would be that the table which si personalized changed its columnsduring runtime,
       * after personalization has been activated.
      */
      refresh(): void;

      /**
       * Removes all the controls in the association named <code>tables</code>.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllTables(): any[];

      /**
       * Removes an table from the association named <code>tables</code>.
       * @param vTable The table to be removed or its index or ID
       * @returns The removed table or <code>null</code>
      */
      removeTable(vTable: number | any | sap.m.Table): any;

      /**
       * Persist the personalizations
      */
      savePersonalizations(): void;

      /**
       * Using this method, the first part of tablePerso persistence ids can beprovided, in case the table's
       * app does not provide that part itself.If a component name is set using this method, it will be used,
       * regardless ofwhether the table's app has a different component name or not.
       * @param sCompName the new component name.
       * @returns the TablePersoController instance.
      */
      setComponentName(sCompName: string): TablePersoController;

      /**
       * Reflector for the controller's 'contentHeight' property.
       * @param sHeight the new height of the TablePersoDialog.
       * @returns the TablePersoController instance.
      */
      setContentHeight(sHeight: any): TablePersoController;

      /**
       * Reflector for the controller's 'contentWidth' property.
       * @param sWidth the new width of the tablePersoDialog
       * @returns the TablePersoController instance.
      */
      setContentWidth(sWidth: any): TablePersoController;

      /**
       * Reflector for the controller's 'hasGrouping' property.
       * @param bHasGrouping is the tablePersoDialog displayed in grouping mode or not.
       * @returns the TablePersoController instance.
      */
      setHasGrouping(bHasGrouping: boolean): TablePersoController;

      /**
       * Sets the aggregated <code>persoService</code>.
       * @param oPersoService The persoService to set
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPersoService(oPersoService: any): sap.m.TablePersoController;

      /**
       * Reflector for the controller's 'showResetAll' property.
       * @param bShowResetAll is the tablePersoDialog's 'UndoPersonalization' button displayed or not.
       * @returns the TablePersoController instance.
      */
      setShowResetAll(bShowResetAll: boolean): TablePersoController;

      /**
       * Reflector for the controller's 'showSelectAll' property.
       * @param bShowSelectAll is the tablePersoDialog's 'Display All' checkbox displayed or not.
       * @returns the TablePersoController instance.
      */
      setShowSelectAll(bShowSelectAll: boolean): TablePersoController;

      /**
       * Sets the associated <code>table</code>.
       * @param oTable ID of an element which becomes the new target of this table association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTable(oTable: any | sap.m.Table): sap.m.TablePersoController;
    }
    /**
     * The NotificationListItem control is suitable for showing notifications to the user.
     * @resource sap/m/NotificationListItem.js
    */
    export class NotificationListItem extends sap.m.NotificationListBase {


      /**
       * Constructor for a new NotificationListItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>description</code>.Determines the description of the
       * NotificationListItem.Default value is <code></code>.
       * @returns Value of property <code>description</code>
      */
      getDescription(): string;

      /**
       * Gets current value of property <code>hideShowMoreButton</code>.Determines it the "Show More" button
       * should be hidden.Default value is <code>false</code>.
       * @returns Value of property <code>hideShowMoreButton</code>
      */
      getHideShowMoreButton(): boolean;

      /**
       * Returns a metadata object for class sap.m.NotificationListItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>truncate</code>.Determines if the text in the title and the
       * description of the notification are truncated to the first two lines.Default value is
       * <code>true</code>.
       * @returns Value of property <code>truncate</code>
      */
      getTruncate(): boolean;

      /**
       * Sets a new value for property <code>description</code>.Determines the description of the
       * NotificationListItem.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code></code>.
       * @param sDescription New value for property <code>description</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDescription(sDescription: string): sap.m.NotificationListItem;

      /**
       * Sets a new value for property <code>hideShowMoreButton</code>.Determines it the "Show More" button
       * should be hidden.When called with a value of <code>null</code> or <code>undefined</code>, the
       * default value of the property will be restored.Default value is <code>false</code>.
       * @param bHideShowMoreButton New value for property <code>hideShowMoreButton</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHideShowMoreButton(bHideShowMoreButton: boolean): sap.m.NotificationListItem;

      /**
       * Sets a new value for property <code>truncate</code>.Determines if the text in the title and the
       * description of the notification are truncated to the first two lines.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @param bTruncate New value for property <code>truncate</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTruncate(bTruncate: boolean): sap.m.NotificationListItem;
    }
    /**
     * Items provide information about the uploaded files.
     * @resource sap/m/UploadCollectionItem.js
    */
    export class UploadCollectionItem extends sap.ui.core.Element {


      /**
       * Constructor for a new UploadCollectionItemAccepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, will be generated automatically if no ID is provided.
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some attribute to the aggregation <code>attributes</code>.
       * @since 1.30
       * @param oAttribute the attribute to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.UploadCollectionItem;

      /**
       * Adds some marker to the aggregation <code>markers</code>.
       * @since 1.40
       * @param oMarker the marker to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addMarker(oMarker: sap.m.ObjectMarker): sap.m.UploadCollectionItem;

      /**
       * Adds some status to the aggregation <code>statuses</code>.
       * @since 1.30
       * @param oStatus the status to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addStatus(oStatus: sap.m.ObjectStatus): sap.m.UploadCollectionItem;

      /**
       * Binds aggregation <code>attributes</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.30
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindAttributes(oBindingInfo: any): sap.m.UploadCollectionItem;

      /**
       * Binds aggregation <code>markers</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.40
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindMarkers(oBindingInfo: any): sap.m.UploadCollectionItem;

      /**
       * Binds aggregation <code>statuses</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @since 1.30
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindStatuses(oBindingInfo: any): sap.m.UploadCollectionItem;

      /**
       * Destroys all the attributes in the aggregation <code>attributes</code>.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyAttributes(): sap.m.UploadCollectionItem;

      /**
       * Destroys all the markers in the aggregation <code>markers</code>.
       * @since 1.40
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyMarkers(): sap.m.UploadCollectionItem;

      /**
       * Destroys all the statuses in the aggregation <code>statuses</code>.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyStatuses(): sap.m.UploadCollectionItem;

      /**
       * Downloads the item.The sap.ui.core.util.File method is used here. For further details on this
       * method, see {sap.ui.core.util.File.save}.
       * @since 1.36.0
       * @param askForLocation Decides whether to ask for a location to download or not.
      */
      download(askForLocation: boolean): void;


      /**
       * Gets current value of property <code>ariaLabelForPicture</code>.Aria label for the icon (or for the
       * image).
       * @returns Value of property <code>ariaLabelForPicture</code>
      */
      getAriaLabelForPicture(): string;

      /**
       * Gets content of aggregation <code>attributes</code>.Attributes of an uploaded item, for example,
       * 'Uploaded By', 'Uploaded On', 'File Size'attributes are displayed after an item has been
       * uploaded.Additionally, the Active property of sap.m.ObjectAttribute is supported.<br>Note that if
       * one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this
       * attribute, two attributes with the same titleare displayed as these properties get displayed as an
       * attribute.Example: An application passes the property ‘contributor’ with the value ‘A’ and the
       * aggregation attributes ‘contributor’: ‘B’. As a result, the attributes‘contributor’:’A’ and
       * ‘contributor’:’B’ are displayed. To make sure the title does not appear twice, check if one of the
       * properties is filled.
       * @since 1.30
      */
      getAttributes(): sap.m.ObjectAttribute[];

      /**
       * Gets current value of property <code>contributor</code>.Specifies the name of the user who uploaded
       * the file.
       * @returns Value of property <code>contributor</code>
      */
      getContributor(): string;

      /**
       * Gets current value of property <code>documentId</code>.Specifies a unique identifier of the file
       * (created by the application).
       * @returns Value of property <code>documentId</code>
      */
      getDocumentId(): string;

      /**
       * Gets current value of property <code>enableDelete</code>.Enables/Disables the Edit button.If the
       * value is true, the Edit button is enabled and the edit function can be used.If the value is false,
       * the edit function is not available.Default value is <code>true</code>.
       * @returns Value of property <code>enableDelete</code>
      */
      getEnableDelete(): boolean;

      /**
       * Gets current value of property <code>enableEdit</code>.Enables/Disables the Edit button.If the value
       * is true, the Edit button is enabled and the edit function can be used.If the value is false, the
       * edit function is not available.Default value is <code>true</code>.
       * @returns Value of property <code>enableEdit</code>
      */
      getEnableEdit(): boolean;

      /**
       * Gets current value of property <code>fileName</code>.Specifies the name of the uploaded file.
       * @returns Value of property <code>fileName</code>
      */
      getFileName(): string;

      /**
       * Gets current value of property <code>fileSize</code>.Specifies the size of the uploaded file (in
       * megabytes).
       * @returns Value of property <code>fileSize</code>
      */
      getFileSize(): number;

      /**
       * ID of the element which is the current target of the association <code>fileUploader</code>, or
       * <code>null</code>.
      */
      getFileUploader(): any;

      /**
       * Gets content of aggregation <code>markers</code>.Markers of an uploaded itemMarkers will be
       * displayed after an item has been uploadedBut not in Edit mode
       * @since 1.40
      */
      getMarkers(): sap.m.ObjectMarker[];

      /**
       * Returns a metadata object for class sap.m.UploadCollectionItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>mimeType</code>.Specifies the MIME type of the file.
       * @returns Value of property <code>mimeType</code>
      */
      getMimeType(): string;

      /**
       * Gets current value of property <code>selected</code>.Defines the selected state of the
       * UploadCollectionItem.Default value is <code>false</code>.
       * @since 1.34
       * @returns Value of property <code>selected</code>
      */
      getSelected(): boolean;

      /**
       * Gets content of aggregation <code>statuses</code>.Statuses of an uploaded itemStatuses will be
       * displayed after an item has been uploaded
       * @since 1.30
      */
      getStatuses(): sap.m.ObjectStatus[];

      /**
       * Gets current value of property <code>thumbnailUrl</code>.Specifies the URL where the thumbnail of
       * the file is located.
       * @returns Value of property <code>thumbnailUrl</code>
      */
      getThumbnailUrl(): string;

      /**
       * Gets current value of property <code>uploadedDate</code>.Specifies the date on which the file was
       * uploaded.The application has to define the date format.
       * @returns Value of property <code>uploadedDate</code>
      */
      getUploadedDate(): string;

      /**
       * Gets current value of property <code>url</code>.Specifies the URL where the file is located.If the
       * application doesn't provide a value for this property, the icon and the file name of the
       * UploadCollectionItem are not clickable.
       * @returns Value of property <code>url</code>
      */
      getUrl(): string;

      /**
       * Gets current value of property <code>visibleDelete</code>.Show/Hide the Delete button.If the value
       * is true, the Delete button is visible.If the value is false, the Delete button is not
       * visible.Default value is <code>true</code>.
       * @returns Value of property <code>visibleDelete</code>
      */
      getVisibleDelete(): boolean;

      /**
       * Gets current value of property <code>visibleEdit</code>.Show/Hide the Edit button.If the value is
       * true, the Edit button is visible.If the value is false, the Edit button is not visible.Default value
       * is <code>true</code>.
       * @returns Value of property <code>visibleEdit</code>
      */
      getVisibleEdit(): boolean;

      /**
       * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation
       * <code>attributes</code>.and returns its index if found or -1 otherwise.
       * @since 1.30
       * @param oAttribute The attribute whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;

      /**
       * Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <code>markers</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.40
       * @param oMarker The marker whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfMarker(oMarker: sap.m.ObjectMarker): number;

      /**
       * Checks for the provided <code>sap.m.ObjectStatus</code> in the aggregation <code>statuses</code>.and
       * returns its index if found or -1 otherwise.
       * @since 1.30
       * @param oStatus The status whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfStatus(oStatus: sap.m.ObjectStatus): number;

      /**
       * Inserts a attribute into the aggregation <code>attributes</code>.
       * @since 1.30
       * @param oAttribute the attribute to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for             a
       * negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value         
       *    greater than the current size of the aggregation, the attribute is inserted at             the
       * last position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.UploadCollectionItem;

      /**
       * Inserts a marker into the aggregation <code>markers</code>.
       * @since 1.40
       * @param oMarker the marker to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the marker should be inserted at; for             a
       * negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the marker is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertMarker(oMarker: sap.m.ObjectMarker, iIndex: number): sap.m.UploadCollectionItem;

      /**
       * Inserts a status into the aggregation <code>statuses</code>.
       * @since 1.30
       * @param oStatus the status to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the status should be inserted at; for             a
       * negative value of <code>iIndex</code>, the status is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the status is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertStatus(oStatus: sap.m.ObjectStatus, iIndex: number): sap.m.UploadCollectionItem;

      /**
       * Removes all the controls from the aggregation <code>attributes</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.30
       * @returns An array of the removed elements (might be empty)
      */
      removeAllAttributes(): sap.m.ObjectAttribute[];

      /**
       * Removes all the controls from the aggregation <code>markers</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @since 1.40
       * @returns An array of the removed elements (might be empty)
      */
      removeAllMarkers(): sap.m.ObjectMarker[];

      /**
       * Removes all the controls from the aggregation <code>statuses</code>.Additionally, it unregisters
       * them from the hosting UIArea.
       * @since 1.30
       * @returns An array of the removed elements (might be empty)
      */
      removeAllStatuses(): sap.m.ObjectStatus[];

      /**
       * Removes a attribute from the aggregation <code>attributes</code>.
       * @since 1.30
       * @param vAttribute The attribute to remove or its index or id
       * @returns The removed attribute or <code>null</code>
      */
      removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;

      /**
       * Removes a marker from the aggregation <code>markers</code>.
       * @since 1.40
       * @param vMarker The marker to remove or its index or id
       * @returns The removed marker or <code>null</code>
      */
      removeMarker(vMarker: number | string | sap.m.ObjectMarker): sap.m.ObjectMarker;

      /**
       * Removes a status from the aggregation <code>statuses</code>.
       * @since 1.30
       * @param vStatus The status to remove or its index or id
       * @returns The removed status or <code>null</code>
      */
      removeStatus(vStatus: number | string | sap.m.ObjectStatus): sap.m.ObjectStatus;

      /**
       * Sets a new value for property <code>ariaLabelForPicture</code>.Aria label for the icon (or for the
       * image).When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAriaLabelForPicture(sAriaLabelForPicture: string): sap.m.UploadCollectionItem;

      /**
       * Setter of the deprecated contributor property. The property is mapped to the aggregation attributes.
      */
      setContributor(): void;

      /**
       * Sets a new value for property <code>documentId</code>.Specifies a unique identifier of the file
       * (created by the application).When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sDocumentId New value for property <code>documentId</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setDocumentId(sDocumentId: string): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>enableDelete</code>.Enables/Disables the Edit button.If the
       * value is true, the Edit button is enabled and the edit function can be used.If the value is false,
       * the edit function is not available.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bEnableDelete New value for property <code>enableDelete</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableDelete(bEnableDelete: boolean): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>enableEdit</code>.Enables/Disables the Edit button.If the value
       * is true, the Edit button is enabled and the edit function can be used.If the value is false, the
       * edit function is not available.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bEnableEdit New value for property <code>enableEdit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEnableEdit(bEnableEdit: boolean): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>fileName</code>.Specifies the name of the uploaded file.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sFileName New value for property <code>fileName</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFileName(sFileName: string): sap.m.UploadCollectionItem;

      /**
       * Setter of the deprecated fileSize property. The property is mapped to the aggregation attributes.
      */
      setFileSize(): void;

      /**
       * Sets the associated <code>fileUploader</code>.
       * @param oFileUploader ID of an element which becomes the new target of this fileUploader association;
       * alternatively, an element instance may be given
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFileUploader(oFileUploader: any | sap.ui.unified.FileUploader): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>mimeType</code>.Specifies the MIME type of the file.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @param sMimeType New value for property <code>mimeType</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMimeType(sMimeType: string): sap.m.UploadCollectionItem;

      /**
       * Setter of the selected property.
       * @since 1.34
       * @param selected value to set on Selected property
       * @returns The current UploadCollectionItem
      */
      setSelected(selected: boolean): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>thumbnailUrl</code>.Specifies the URL where the thumbnail of the
       * file is located.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.
       * @param sThumbnailUrl New value for property <code>thumbnailUrl</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setThumbnailUrl(sThumbnailUrl: string): sap.m.UploadCollectionItem;

      /**
       * Setter of the deprecated uploadedDate property. The property is mapped to the aggregation
       * attributes.
      */
      setUploadedDate(): void;

      /**
       * Sets a new value for property <code>url</code>.Specifies the URL where the file is located.If the
       * application doesn't provide a value for this property, the icon and the file name of the
       * UploadCollectionItem are not clickable.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.
       * @param sUrl New value for property <code>url</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUrl(sUrl: string): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>visibleDelete</code>.Show/Hide the Delete button.If the value is
       * true, the Delete button is visible.If the value is false, the Delete button is not visible.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>true</code>.
       * @param bVisibleDelete New value for property <code>visibleDelete</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisibleDelete(bVisibleDelete: boolean): sap.m.UploadCollectionItem;

      /**
       * Sets a new value for property <code>visibleEdit</code>.Show/Hide the Edit button.If the value is
       * true, the Edit button is visible.If the value is false, the Edit button is not visible.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.Default value is <code>true</code>.
       * @param bVisibleEdit New value for property <code>visibleEdit</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisibleEdit(bVisibleEdit: boolean): sap.m.UploadCollectionItem;

      /**
       * Unbinds aggregation <code>attributes</code> from model data.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindAttributes(): sap.m.UploadCollectionItem;

      /**
       * Unbinds aggregation <code>markers</code> from model data.
       * @since 1.40
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindMarkers(): sap.m.UploadCollectionItem;

      /**
       * Unbinds aggregation <code>statuses</code> from model data.
       * @since 1.30
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindStatuses(): sap.m.UploadCollectionItem;
    }
    /**
     * The NotificationListItemGroup control is used for grouping NotificationListItems of the same type.
     * @resource sap/m/NotificationListGroup.js
    */
    export class NotificationListGroup extends sap.m.NotificationListBase {


      /**
       * Constructor for a new NotificationListGroup.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.NotificationListItem): sap.m.NotificationListGroup;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.NotificationListGroup;


      /**
       * Gets current value of property <code>autoPriority</code>.Determines if the group will automatically
       * set the priority based on the highest priority of its notifications or get its priority from the
       * developer.Default value is <code>true</code>.
       * @returns Value of property <code>autoPriority</code>
      */
      getAutoPriority(): boolean;

      /**
       * Gets current value of property <code>collapsed</code>.Determines if the group is collapsed or
       * expanded.Default value is <code>false</code>.
       * @returns Value of property <code>collapsed</code>
      */
      getCollapsed(): boolean;

      /**
       * Gets content of aggregation <code>items</code>.The NotificationListItems inside the group.
      */
      getItems(): sap.m.NotificationListItem[];

      /**
       * Returns a metadata object for class sap.m.NotificationListGroup.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>showEmptyGroup</code>.Determines if the group header/footer of
       * the empty group will be always shown. By default groups with 0 notifications are not shown.Default
       * value is <code>false</code>.
       * @returns Value of property <code>showEmptyGroup</code>
      */
      getShowEmptyGroup(): boolean;

      /**
       * Checks for the provided <code>sap.m.NotificationListItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.NotificationListItem): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.NotificationListItem, iIndex: number): sap.m.NotificationListGroup;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.NotificationListItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.NotificationListItem): sap.m.NotificationListItem;

      /**
       * Sets a new value for property <code>autoPriority</code>.Determines if the group will automatically
       * set the priority based on the highest priority of its notifications or get its priority from the
       * developer.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>true</code>.
       * @param bAutoPriority New value for property <code>autoPriority</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setAutoPriority(bAutoPriority: boolean): sap.m.NotificationListGroup;

      /**
       * Sets a new value for property <code>collapsed</code>.Determines if the group is collapsed or
       * expanded.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>false</code>.
       * @param bCollapsed New value for property <code>collapsed</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCollapsed(bCollapsed: boolean): sap.m.NotificationListGroup;

      /**
       * Sets a new value for property <code>showEmptyGroup</code>.Determines if the group header/footer of
       * the empty group will be always shown. By default groups with 0 notifications are not shown.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>false</code>.
       * @param bShowEmptyGroup New value for property <code>showEmptyGroup</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setShowEmptyGroup(bShowEmptyGroup: boolean): sap.m.NotificationListGroup;
    }
    /**
     * QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to
     * this label.
     * @resource sap/m/QuickViewGroupElement.js
    */
    export class QuickViewGroupElement extends sap.ui.core.Element {


      /**
       * Constructor for a new QuickViewGroupElement.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>emailSubject</code>.The subject of the email.Works only with
       * QuickViewGroupElement of type email.Default value is <code></code>.
       * @returns Value of property <code>emailSubject</code>
      */
      getEmailSubject(): string;

      /**
       * Gets current value of property <code>label</code>.Specifies the text displayed below the associated
       * label.Default value is <code></code>.
       * @returns Value of property <code>label</code>
      */
      getLabel(): string;

      /**
       * Returns a metadata object for class sap.m.QuickViewGroupElement.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>pageLinkId</code>.Specifies the ID of the QuickViewPage, which
       * is opened from the link in the QuickViewGroupElement.Works only with QuickViewGroupElement of type
       * pageLink.Default value is <code></code>.
       * @returns Value of property <code>pageLinkId</code>
      */
      getPageLinkId(): string;

      /**
       * Gets current value of property <code>target</code>.Specifies the target of the link – it works like
       * the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.Default
       * value is <code>_blank</code>.
       * @returns Value of property <code>target</code>
      */
      getTarget(): string;

      /**
       * Gets current value of property <code>type</code>.Specifies the type of the displayed information –
       * phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is
       * ‘text’.Default value is <code>GroupElementType.text</code>.
       * @returns Value of property <code>type</code>
      */
      getType(): sap.m.QuickViewGroupElementType;

      /**
       * Gets current value of property <code>url</code>.Specifies the address of the QuickViewGroupElement
       * link. Works only with QuickViewGroupElement of type link.Default value is <code></code>.
       * @returns Value of property <code>url</code>
      */
      getUrl(): string;

      /**
       * Gets current value of property <code>value</code>.Specifies the text of the control that associates
       * with the label.Default value is <code></code>.
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Gets current value of property <code>visible</code>.Determines whether the element should be visible
       * on the screen.Default value is <code>true</code>.
       * @returns Value of property <code>visible</code>
      */
      getVisible(): boolean;

      /**
       * Sets a new value for property <code>emailSubject</code>.The subject of the email.Works only with
       * QuickViewGroupElement of type email.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code></code>.
       * @param sEmailSubject New value for property <code>emailSubject</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setEmailSubject(sEmailSubject: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>label</code>.Specifies the text displayed below the associated
       * label.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code></code>.
       * @param sLabel New value for property <code>label</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setLabel(sLabel: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>pageLinkId</code>.Specifies the ID of the QuickViewPage, which
       * is opened from the link in the QuickViewGroupElement.Works only with QuickViewGroupElement of type
       * pageLink.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code></code>.
       * @param sPageLinkId New value for property <code>pageLinkId</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPageLinkId(sPageLinkId: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>target</code>.Specifies the target of the link – it works like
       * the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.Default value is <code>_blank</code>.
       * @param sTarget New value for property <code>target</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTarget(sTarget: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>type</code>.Specifies the type of the displayed information –
       * phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is
       * ‘text’.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.Default value is <code>GroupElementType.text</code>.
       * @param sType New value for property <code>type</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setType(sType: sap.m.QuickViewGroupElementType): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>url</code>.Specifies the address of the QuickViewGroupElement
       * link. Works only with QuickViewGroupElement of type link.When called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sUrl New value for property <code>url</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setUrl(sUrl: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>value</code>.Specifies the text of the control that associates
       * with the label.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code></code>.
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.QuickViewGroupElement;

      /**
       * Sets a new value for property <code>visible</code>.Determines whether the element should be visible
       * on the screen.When called with a value of <code>null</code> or <code>undefined</code>, the default
       * value of the property will be restored.Default value is <code>true</code>.
       * @param bVisible New value for property <code>visible</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setVisible(bVisible: boolean): sap.m.QuickViewGroupElement;
    }
    /**
     * The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.
     * @resource sap/m/ViewSettingsCustomTab.js
    */
    export class ViewSettingsCustomTab extends sap.ui.core.Item {


      /**
       * Constructor for a new ViewSettingsCustomTab.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some content to the aggregation <code>content</code>.
       * @param oContent the content to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addContent(oContent: sap.ui.core.Control): sap.m.ViewSettingsCustomTab;

      /**
       * Destroys all the content in the aggregation <code>content</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyContent(): sap.m.ViewSettingsCustomTab;


      /**
       * Gets content of aggregation <code>content</code>.The content of this Custom tab
      */
      getContent(): sap.ui.core.Control[];

      /**
       * Gets current value of property <code>icon</code>.Custom tab button iconDefault value is
       * <code>sap-icon://competitor</code>.
       * @returns Value of property <code>icon</code>
      */
      getIcon(): any;

      /**
       * Returns a metadata object for class sap.m.ViewSettingsCustomTab.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets or creates the sap.m.Button instance for the custom tab.
       * @param oOptions undefined
      */
      getTabButton(oOptions: any): sap.m.Button;

      /**
       * Gets current value of property <code>title</code>.Custom tab titleDefault value is <code></code>.
       * @returns Value of property <code>title</code>
      */
      getTitle(): string;

      /**
       * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.and
       * returns its index if found or -1 otherwise.
       * @param oContent The content whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfContent(oContent: sap.ui.core.Control): number;

      /**
       * Inserts a content into the aggregation <code>content</code>.
       * @param oContent the content to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the content should be inserted at; for             a
       * negative value of <code>iIndex</code>, the content is inserted at position 0; for a value           
       *  greater than the current size of the aggregation, the content is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ViewSettingsCustomTab;

      /**
       * Removes all the controls from the aggregation <code>content</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllContent(): sap.ui.core.Control[];

      /**
       * Removes a content from the aggregation <code>content</code>.
       * @param vContent The content to remove or its index or id
       * @returns The removed content or <code>null</code>
      */
      removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;

      /**
       * Sets a new value for property <code>icon</code>.Custom tab button iconWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>sap-icon://competitor</code>.
       * @param sIcon New value for property <code>icon</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setIcon(sIcon: any): sap.m.ViewSettingsCustomTab;

      /**
       * Sets a new value for property <code>title</code>.Custom tab titleWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code></code>.
       * @param sTitle New value for property <code>title</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setTitle(sTitle: string): sap.m.ViewSettingsCustomTab;
    }
    /**
     * The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.
     * @resource sap/m/ViewSettingsCustomItem.js
    */
    export class ViewSettingsCustomItem extends sap.m.ViewSettingsItem {


      /**
       * Constructor for a new ViewSettingsCustomItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Creates a clone of the ViewSettingsCustomItem instance.
       * @param sIdSuffix a suffix to be appended to the cloned object id
       * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)
       * @param oOptions configuration object
       * @returns reference to the newly created clone
      */
      clone(sIdSuffix: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;

      /**
       * Destroys the customControl in the aggregation <code>customControl</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyCustomControl(): sap.m.ViewSettingsCustomItem;


      /**
       * Internally the control is handled as a managed object instead of an aggregationbecause this control
       * is sometimes aggregated in other controls like a popover or a dialog.
       * @returns oControl a control used for filtering purposes
      */
      getCustomControl(): sap.ui.core.Control;

      /**
       * Gets current value of property <code>filterCount</code>.The number of currently active filters for
       * this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to
       * represent the filter state of the custom control.Default value is <code>0</code>.
       * @returns Value of property <code>filterCount</code>
      */
      getFilterCount(): number;

      /**
       * Returns a metadata object for class sap.m.ViewSettingsCustomItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Internally the control is handled as a managed object instead of an aggregationas this control is
       * sometimes aggregated in other controls like a popover or a dialog.
       * @param oControl A control used for filtering purposes
       * @returns this pointer for chaining
      */
      setCustomControl(oControl: sap.ui.core.Control): sap.m.ViewSettingsCustomItem;

      /**
       * Sets the filterCount without invalidating the control as it is never rendered directly.
       * @param iValue The new value for property filterCount
       * @returns this pointer for chaining
      */
      setFilterCount(iValue: number): sap.m.ViewSettingsItem;
    }
    /**
     * A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog.It
     * is derived from a core Item, but does not support the base class properties like textDirection and
     * enabled.Setting these properties will not have any effects.
     * @resource sap/m/ViewSettingsFilterItem.js
    */
    export class ViewSettingsFilterItem extends sap.m.ViewSettingsItem {


      /**
       * Constructor for a new ViewSettingsFilterItem.Accepts an object literal <code>mSettings</code> that
       * defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings Initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);



      /**
       * Adds some item to the aggregation <code>items</code>.
       * @param oItem the item to add; if empty, nothing is inserted
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      addItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsFilterItem;

      /**
       * Attaches event handler <code>fnFunction</code> to the
       * <code>filterDetailItemsAggregationChange</code> event of this
       * <code>sap.m.ViewSettingsFilterItem</code>.When called, the context of the event handler (its
       * <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound
       * to this <code>sap.m.ViewSettingsFilterItem</code> itself.Let the outside world know that the filter
       * detail aggregation was changed.
       * @param oData An application-specific payload object that will be passed to the event handler along
       * with the event object when firing the event
       * @param fnFunction The function to be called when the event occurs
       * @param oListener Context object to call the event handler with. Defaults to this
       * <code>sap.m.ViewSettingsFilterItem</code> itself
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      attachFilterDetailItemsAggregationChange(oData: any, fnFunction: any, oListener?: any): sap.m.ViewSettingsFilterItem;

      /**
       * Binds aggregation <code>items</code> to model data.See {@link
       * sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of <code>oBindingInfo</code>.
       * @param oBindingInfo The binding information
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      bindItems(oBindingInfo: any): sap.m.ViewSettingsFilterItem;

      /**
       * Destroys all the items in the aggregation <code>items</code>.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      destroyItems(): sap.m.ViewSettingsFilterItem;

      /**
       * Detaches event handler <code>fnFunction</code> from the
       * <code>filterDetailItemsAggregationChange</code> event of this
       * <code>sap.m.ViewSettingsFilterItem</code>.The passed function and listener object must match the
       * ones used for event registration.
       * @param fnFunction The function to be called, when the event occurs
       * @param oListener Context object on which the given function had to be called
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      detachFilterDetailItemsAggregationChange(fnFunction: any, oListener: any): sap.m.ViewSettingsFilterItem;


      /**
       * Fires event <code>filterDetailItemsAggregationChange</code> to attached listeners.
       * @param mArguments The arguments to pass along with the event
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      fireFilterDetailItemsAggregationChange(mArguments: any): sap.m.ViewSettingsFilterItem;

      /**
       * Gets content of aggregation <code>items</code>.Items that are logically grouped under this filter
       * item. They are used to display filter details in the ViewSettingsDialog.
      */
      getItems(): sap.m.ViewSettingsItem[];

      /**
       * Returns a metadata object for class sap.m.ViewSettingsFilterItem.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>multiSelect</code>.If set to (true), multi selection will be
       * allowed for the items aggregation.Default value is <code>true</code>.
       * @returns Value of property <code>multiSelect</code>
      */
      getMultiSelect(): boolean;

      /**
       * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation
       * <code>items</code>.and returns its index if found or -1 otherwise.
       * @param oItem The item whose index is looked for
       * @returns The index of the provided control in the aggregation if found, or -1 otherwise
      */
      indexOfItem(oItem: sap.m.ViewSettingsItem): number;

      /**
       * Inserts a item into the aggregation <code>items</code>.
       * @param oItem the item to insert; if empty, nothing is inserted
       * @param iIndex the <code>0</code>-based index the item should be inserted at; for             a
       * negative value of <code>iIndex</code>, the item is inserted at position 0; for a value            
       * greater than the current size of the aggregation, the item is inserted at             the last
       * position
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      insertItem(oItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsFilterItem;

      /**
       * Removes all the controls from the aggregation <code>items</code>.Additionally, it unregisters them
       * from the hosting UIArea.
       * @returns An array of the removed elements (might be empty)
      */
      removeAllItems(): sap.m.ViewSettingsItem[];

      /**
       * Removes a item from the aggregation <code>items</code>.
       * @param vItem The item to remove or its index or id
       * @returns The removed item or <code>null</code>
      */
      removeItem(vItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;

      /**
       * Sets a new value for property <code>multiSelect</code>.If set to (true), multi selection will be
       * allowed for the items aggregation.When called with a value of <code>null</code> or
       * <code>undefined</code>, the default value of the property will be restored.Default value is
       * <code>true</code>.
       * @param bMultiSelect New value for property <code>multiSelect</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMultiSelect(bMultiSelect: boolean): sap.m.ViewSettingsFilterItem;

      /**
       * Unbinds aggregation <code>items</code> from model data.
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      unbindItems(): sap.m.ViewSettingsFilterItem;
    }
    /**
     * Represents a parameter for the UploadCollection.
     * @resource sap/m/UploadCollectionParameter.js
    */
    export class UploadCollectionParameter extends sap.ui.core.Element {


      /**
       * Constructor for a new UploadCollectionParameter.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new control, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.UploadCollectionParameter.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>name</code>.Specifies the name of the parameter.
       * @since 1.12.2
       * @returns Value of property <code>name</code>
      */
      getName(): string;

      /**
       * Gets current value of property <code>value</code>.Specifies the value of the parameter.
       * @since 1.12.2
       * @returns Value of property <code>value</code>
      */
      getValue(): string;

      /**
       * Sets a new value for property <code>name</code>.Specifies the name of the parameter.When called with
       * a value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.
       * @since 1.12.2
       * @param sName New value for property <code>name</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setName(sName: string): sap.m.UploadCollectionParameter;

      /**
       * Sets a new value for property <code>value</code>.Specifies the value of the parameter.When called
       * with a value of <code>null</code> or <code>undefined</code>, the default value of the property will
       * be restored.
       * @since 1.12.2
       * @param sValue New value for property <code>value</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setValue(sValue: string): sap.m.UploadCollectionParameter;
    }
    /**
     * Holds layout data for the OverflowToolbar items.
     * @resource sap/m/OverflowToolbarLayoutData.js
    */
    export class OverflowToolbarLayoutData extends sap.m.ToolbarLayoutData {


      /**
       * Constructor for a new OverflowToolbarLayoutData.Accepts an object literal <code>mSettings</code>
       * that defines initialproperty values, aggregated and associated objects as well as event handlers.See
       * {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the
       * settings object.
       * @param sId id for the new element, generated automatically if no id is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>closeOverflowOnInteraction</code>.Defines whether the overflow
       * area is automatically closed when interacting with a control in itDefault value is
       * <code>true</code>.
       * @since 1.40
       * @returns Value of property <code>closeOverflowOnInteraction</code>
      */
      getCloseOverflowOnInteraction(): boolean;

      /**
       * Gets current value of property <code>group</code>.Defines OverflowToolbar items group number.Default
       * value is 0, which means that the control does not belong to any group.Elements that belong to a
       * group overflow together. The overall priority of the group is defined by the element with highest
       * priority.Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow
       * priority.Default value is <code>0</code>.
       * @since 1.32
       * @returns Value of property <code>group</code>
      */
      getGroup(): number;

      /**
       * Returns a metadata object for class sap.m.OverflowToolbarLayoutData.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>moveToOverflow</code>.The OverflowToolbar item can or cannot
       * move to the overflow areaDefault value is <code>true</code>.
       * @returns Value of property <code>moveToOverflow</code>
      */
      getMoveToOverflow(): boolean;

      /**
       * Gets current value of property <code>priority</code>.Defines OverflowToolbar items priority,
       * Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflowDefault value is
       * <code>High</code>.
       * @since 1.32
       * @returns Value of property <code>priority</code>
      */
      getPriority(): sap.m.OverflowToolbarPriority;

      /**
       * Gets current value of property <code>stayInOverflow</code>.The OverflowToolbar item can or cannot
       * stay in the overflow areaDefault value is <code>false</code>.
       * @returns Value of property <code>stayInOverflow</code>
      */
      getStayInOverflow(): boolean;

      /**
       * Sets a new value for property <code>closeOverflowOnInteraction</code>.Defines whether the overflow
       * area is automatically closed when interacting with a control in itWhen called with a value of
       * <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>true</code>.
       * @since 1.40
       * @param bCloseOverflowOnInteraction New value for property <code>closeOverflowOnInteraction</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setCloseOverflowOnInteraction(bCloseOverflowOnInteraction: boolean): sap.m.OverflowToolbarLayoutData;

      /**
       * Sets a new value for property <code>group</code>.Defines OverflowToolbar items group number.Default
       * value is 0, which means that the control does not belong to any group.Elements that belong to a
       * group overflow together. The overall priority of the group is defined by the element with highest
       * priority.Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow
       * priority.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>0</code>.
       * @since 1.32
       * @param iGroup New value for property <code>group</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setGroup(iGroup: number): sap.m.OverflowToolbarLayoutData;

      /**
       * Sets a new value for property <code>moveToOverflow</code>.The OverflowToolbar item can or cannot
       * move to the overflow areaWhen called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>true</code>.
       * @param bMoveToOverflow New value for property <code>moveToOverflow</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setMoveToOverflow(bMoveToOverflow: boolean): sap.m.OverflowToolbarLayoutData;

      /**
       * Sets a new value for property <code>priority</code>.Defines OverflowToolbar items priority,
       * Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflowWhen called with a
       * value of <code>null</code> or <code>undefined</code>, the default value of the property will be
       * restored.Default value is <code>High</code>.
       * @since 1.32
       * @param sPriority New value for property <code>priority</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setPriority(sPriority: sap.m.OverflowToolbarPriority): sap.m.OverflowToolbarLayoutData;

      /**
       * Sets a new value for property <code>stayInOverflow</code>.The OverflowToolbar item can or cannot
       * stay in the overflow areaWhen called with a value of <code>null</code> or <code>undefined</code>,
       * the default value of the property will be restored.Default value is <code>false</code>.
       * @param bStayInOverflow New value for property <code>stayInOverflow</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setStayInOverflow(bStayInOverflow: boolean): sap.m.OverflowToolbarLayoutData;
    }
    /**
     * Settings for accessible landmarks which can be applied to the container elements of a
     * <code>sap.m.Page</code> control.These landmarks are e.g. used by assistive technologies (like
     * screenreaders) to provide a meaningful page overview.
     * @resource sap/m/PageAccessibleLandmarkInfo.js
    */
    export class PageAccessibleLandmarkInfo extends sap.ui.core.Element {


      /**
       * Constructor for a new <code>sap.m.PageAccessibleLandmarkInfo</code> element.Accepts an object
       * literal <code>mSettings</code> that defines initialproperty values, aggregated and associated
       * objects as well as event handlers.See {@link sap.ui.base.ManagedObject#constructor} for a general
       * description of the syntax of the settings object.
       * @param sId Id for the new element, generated automatically if no id is given
       * @param mSettings Initial settings for the new element
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Gets current value of property <code>contentLabel</code>.Texts which describes the landmark of the
       * content container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.
       * @returns Value of property <code>contentLabel</code>
      */
      getContentLabel(): string;

      /**
       * Gets current value of property <code>contentRole</code>.Landmark role of the content container of
       * the corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.Default value is <code>Main</code>.
       * @returns Value of property <code>contentRole</code>
      */
      getContentRole(): sap.ui.core.AccessibleLandmarkRole;

      /**
       * Gets current value of property <code>footerLabel</code>.Texts which describes the landmark of the
       * header container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.
       * @returns Value of property <code>footerLabel</code>
      */
      getFooterLabel(): string;

      /**
       * Gets current value of property <code>footerRole</code>.Landmark role of the footer container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.Default value is <code>Region</code>.
       * @returns Value of property <code>footerRole</code>
      */
      getFooterRole(): sap.ui.core.AccessibleLandmarkRole;

      /**
       * Gets current value of property <code>headerLabel</code>.Texts which describes the landmark of the
       * header container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.
       * @returns Value of property <code>headerLabel</code>
      */
      getHeaderLabel(): string;

      /**
       * Gets current value of property <code>headerRole</code>.Landmark role of the header container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.Default value is <code>Region</code>.
       * @returns Value of property <code>headerRole</code>
      */
      getHeaderRole(): sap.ui.core.AccessibleLandmarkRole;

      /**
       * Returns a metadata object for class sap.m.PageAccessibleLandmarkInfo.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;

      /**
       * Gets current value of property <code>rootLabel</code>.Texts which describes the landmark of the root
       * container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark different
       * than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis used.
       * @returns Value of property <code>rootLabel</code>
      */
      getRootLabel(): string;

      /**
       * Gets current value of property <code>rootRole</code>.Landmark role of the root container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.Default value is <code>Region</code>.
       * @returns Value of property <code>rootRole</code>
      */
      getRootRole(): sap.ui.core.AccessibleLandmarkRole;

      /**
       * Gets current value of property <code>subHeaderLabel</code>.Texts which describes the landmark of the
       * subheader container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.
       * @returns Value of property <code>subHeaderLabel</code>
      */
      getSubHeaderLabel(): string;

      /**
       * Gets current value of property <code>subHeaderRole</code>.Landmark role of the subheader container
       * of the corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
       * @returns Value of property <code>subHeaderRole</code>
      */
      getSubHeaderRole(): sap.ui.core.AccessibleLandmarkRole;

      /**
       * Sets a new value for property <code>contentLabel</code>.Texts which describes the landmark of the
       * content container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sContentLabel New value for property <code>contentLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentLabel(sContentLabel: string): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>contentRole</code>.Landmark role of the content container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Main</code>.
       * @param sContentRole New value for property <code>contentRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setContentRole(sContentRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>footerLabel</code>.Texts which describes the landmark of the
       * header container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sFooterLabel New value for property <code>footerLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooterLabel(sFooterLabel: string): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>footerRole</code>.Landmark role of the footer container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Region</code>.
       * @param sFooterRole New value for property <code>footerRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setFooterRole(sFooterRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>headerLabel</code>.Texts which describes the landmark of the
       * header container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sHeaderLabel New value for property <code>headerLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderLabel(sHeaderLabel: string): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>headerRole</code>.Landmark role of the header container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Region</code>.
       * @param sHeaderRole New value for property <code>headerRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setHeaderRole(sHeaderRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>rootLabel</code>.Texts which describes the landmark of the root
       * container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark different
       * than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis used.When
       * called with a value of <code>null</code> or <code>undefined</code>, the default value of the
       * property will be restored.
       * @param sRootLabel New value for property <code>rootLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRootLabel(sRootLabel: string): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>rootRole</code>.Landmark role of the root container of the
       * corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.Default value is <code>Region</code>.
       * @param sRootRole New value for property <code>rootRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setRootRole(sRootRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>subHeaderLabel</code>.Texts which describes the landmark of the
       * subheader container of the corresponding <code>sap.m.Page</code> control.If not set (and a landmark
       * different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined textis
       * used.When called with a value of <code>null</code> or <code>undefined</code>, the default value of
       * the property will be restored.
       * @param sSubHeaderLabel New value for property <code>subHeaderLabel</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeaderLabel(sSubHeaderLabel: string): sap.m.PageAccessibleLandmarkInfo;

      /**
       * Sets a new value for property <code>subHeaderRole</code>.Landmark role of the subheader container of
       * the corresponding <code>sap.m.Page</code> control.If set to
       * <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the
       * container.When called with a value of <code>null</code> or <code>undefined</code>, the default value
       * of the property will be restored.
       * @param sSubHeaderRole New value for property <code>subHeaderRole</code>
       * @returns Reference to <code>this</code> in order to allow method chaining
      */
      setSubHeaderRole(sSubHeaderRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
    }
    /**
     * This control needs to be used when you would like to create a customizable toolbar for the
     * UploadCollection. Always a FileUploader instance isrequired in the toolbar, the FileUploader will be
     * placed in the position defined by the application.
     * @resource sap/m/UploadCollectionToolbarPlaceholder.js
    */
    export class UploadCollectionToolbarPlaceholder extends sap.ui.core.Control {


      /**
       * Constructor for a new UploadCollectionToolbarPlaceholder.
       * @param sId ID for the new control, generated automatically if no ID is given
       * @param mSettings initial settings for the new control
      */
      constructor(sId: string, mSettings?: any);




      /**
       * Returns a metadata object for class sap.m.UploadCollectionToolbarPlaceholder.
       * @returns Metadata object describing this class
      */
      getMetadata(): sap.ui.base.Metadata;
    }
    /**
     *   Interface for controls which are suitable as a Header, Subheader or Footer of a Page.  If the
     * control does not want to get a context base style class, it has to implement the isContextSensitive
     * method and return false
     * @resource sap/m/library.js
    */
    interface IBar {


    }
    /**
     * Represents an interface for controls, which are suitable as items for the sap.m.IconTabBar.The
     * classes which implement this interface are:- sap.m.IconTabFilter- sap.m.IconTabSeparator
     * @resource sap/m/library.js
    */
    interface IconTab {


    }
    /**
     *   Interface for controls which are suitable as a Header in sap.m.DynamicPage.  If the control wants
     * to get have the pin/unpin functionality, it must fire the pinUnpinPress event
     * @resource sap/m/library.js
    */
    interface ISnappable {


    }
    /**
     * sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation
     * ofpseudo events triggered by sap.m.NavContainer on its child controls when navigation occurs and
     * child controls are displayed/hidden.Interested parties outside the child control can listen to one
     * or more of these events by registering a Delegate:<pre>page1.addEventDelegate({   onBeforeShow:
     * function(evt) {      // page1 is about to be shown; act accordingly - if required you can read event
     * information from the evt object   },   onAfterHide: function(evt) {      // ...   }});</pre>
     * @resource sap/m/NavContainer.js
    */
    interface NavContainerChild {


    }
    /**
     * Marker interface for controls which are suitable as items for the ObjectHeader.
     * @resource sap/m/library.js
    */
    interface ObjectHeaderContainer {


    }
    /**
     * Enumeration of possible size settings.
    */
    enum Size {
      "Auto",
      "L",
      "M",
      "S",
      "XS"
    }
    /**
     * Defines the visual indication and behaviour of the list items.
    */
    enum ListType {
      "Active",
      "Detail",
      "DetailAndActive",
      "Inactive",
      "Navigation"
    }
    /**
     * Defines the mode of the list.
    */
    enum ListMode {
      "Delete",
      "MultiSelect",
      "None",
      "SingleSelect",
      "SingleSelectLeft",
      "SingleSelectMaster"
    }
    /**
     * Available options for the wrapping behavior of a flex container.
    */
    enum FlexWrap {
      "NoWrap",
      "Wrap",
      "WrapReverse"
    }
    /**
     * Enumeration of possible load statuses.
    */
    enum LoadState {
      "Disabled",
      "Failed",
      "Loaded",
      "Loading"
    }
    /**
     * A subset of input types that fits to a simple API returning one string.Not available on purpose:
     * button, checkbox, hidden, image, password, radio, range, reset, search, submit.
    */
    enum InputType {
      "Date",
      "Datetime",
      "DatetimeLocale",
      "Email",
      "Month",
      "Number",
      "Password",
      "Tel",
      "Text",
      "Time",
      "Url",
      "Week"
    }
    /**
     * Determines how the source image is used on the output DOM element.
    */
    enum ImageMode {
      "Background",
      "Image"
    }
    /**
     * Enum for possible frame size types for sap.m.DynamicContent and sap.m.GenricTile control.
    */
    enum FrameType {
      "Auto",
      "OneByOne",
      "TwoByOne",
      "TwoThirds"
    }
    /**
     * Types of the Bar design
    */
    enum BarDesign {
      "Auto",
      "Footer",
      "Header",
      "SubHeader"
    }
    /**
     * Enumaration for different switch types.
    */
    enum SwitchType {
      "AcceptReject",
      "Default"
    }
    /**
     * Enumeration for different Select types.
    */
    enum SelectType {
      "Default",
      "IconOnly"
    }
    /**
     * Enum for the type of sap.m.Dialog control.
    */
    enum DialogType {
      "Message",
      "Standard"
    }
    /**
     * Enumeration of possible value color settings.
    */
    enum ValueColor {
      "Critical",
      "Error",
      "Good",
      "Neutral"
    }
    /**
     * Different types for a button (predefined types)
    */
    enum ButtonType {
      "Accept",
      "Back",
      "Default",
      "Emphasized",
      "Reject",
      "Transparent",
      "Unstyled",
      "Up"
    }
    /**
     * Breakpoint names for different screen sizes.
    */
    enum ScreenSize {
      "Desktop",
      "Large",
      "Medium",
      "Phone",
      "Small",
      "Tablet",
      "XLarge",
      "XSmall",
      "XXLarge",
      "XXSmall"
    }
    /**
     * Available label display modes.
    */
    enum LabelDesign {
      "Bold",
      "Standard"
    }
    /**
     * Allowed tags for the implementation of the IBar interface.
    */
    enum IBarHTMLTag {
      "Div",
      "Footer",
      "Header"
    }
    /**
     * Different levels for headers
    */
    enum HeaderLevel {
      "H1",
      "H2",
      "H3",
      "H4",
      "H5",
      "H6"
    }
    /**
     * Defines the display of table pop-ins
    */
    enum PopinDisplay {
      "Block",
      "Inline",
      "WithoutHeader"
    }
    /**
     * The mode of SplitContainer or SplitApp control to show/hide the master area.
    */
    enum SplitAppMode {
      "HideMode",
      "PopoverMode",
      "ShowHideMode",
      "StretchCompressMode"
    }
    /**
     * Available directions for flex layouts.
    */
    enum FlexDirection {
      "Column",
      "ColumnReverse",
      "Inherit",
      "Row",
      "RowReverse"
    }
    /**
     * Types of the Toolbar Design.
    */
    enum ToolbarDesign {
      "Auto",
      "Info",
      "Solid",
      "Transparent"
    }
    /**
     * Available options for the layout of individual elements along the cross axis of the flexbox layout
     * overriding the default alignment.
    */
    enum FlexAlignSelf {
      "Auto",
      "Baseline",
      "Center",
      "End",
      "Inherit",
      "Start",
      "Stretch"
    }
    /**
     * Type of panels used in the personalization dialog.
    */
    enum P13nPanelType {
      "columns",
      "dimeasure",
      "filter",
      "group",
      "sort"
    }
    /**
     * Types for the placement of popover control.
    */
    enum PlacementType {
      "Auto",
      "Bottom",
      "Horizontal",
      "HorizontalPreferedLeft",
      "HorizontalPreferedRight",
      "HorizontalPreferredLeft",
      "HorizontalPreferredRight",
      "Left",
      "PreferredBottomOrFlip",
      "PreferredLeftOrFlip",
      "PreferredRightOrFlip",
      "PreferredTopOrFlip",
      "Right",
      "Top",
      "Vertical",
      "VerticalPreferedBottom",
      "VerticalPreferedTop",
      "VerticalPreferredBottom",
      "VerticalPreferredTop"
    }
    /**
     * Available options for the layout of all elements along the cross axis of the flexbox layout.
    */
    enum FlexAlignItems {
      "Baseline",
      "Center",
      "End",
      "Inherit",
      "Start",
      "Stretch"
    }
    /**
     * Different mode for a MenuButton (predefined types)
    */
    enum MenuButtonMode {
      "Regular",
      "Split"
    }
    /**
     * Defines which separator style will be applied for the items.
    */
    enum ListSeparators {
      "All",
      "Inner",
      "None"
    }
    /**
     * Determines the type of HTML elements used for rendering controls.
    */
    enum FlexRendertype {
      "Div",
      "List"
    }
    /**
     * Directions for swipe event.
    */
    enum SwipeDirection {
      "Both",
      "LeftToRight",
      "RightToLeft"
    }
    /**
     * Used by the FacetFilter control to adapt its design according to type.
    */
    enum FacetFilterType {
      "Light",
      "Simple"
    }
    /**
     * Defines the mode of GenericTile.
    */
    enum GenericTileMode {
      "ContentMode",
      "HeaderMode"
    }
    /**
     * Predefined types for ObjectMarker.
    */
    enum ObjectMarkerType {
      "Draft",
      "Favorite",
      "Flagged",
      "Locked",
      "Unsaved"
    }
    /**
     * Types for StandardTile
    */
    enum StandardTileType {
      "Create",
      "Monitor",
      "None"
    }
    /**
     * Available options for the layout of container lines along the cross axis of the flexbox layout.
     * <b>Note:</b> This property has no effect in Internet Explorer 10.
    */
    enum FlexAlignContent {
      "Center",
      "End",
      "Inherit",
      "SpaceAround",
      "SpaceBetween",
      "Start",
      "Stretch"
    }
    /**
     * Defines the different header styles.
    */
    enum ListHeaderDesign {
      "Plain",
      "Standard"
    }
    /**
     * Defines the keyboard handling behavior of the <code>sap.m.List</code> or <code>sap.m.Table</code>.
    */
    enum ListKeyboardMode {
      "Edit",
      "Navigation"
    }
    /**
     * Available Background Design.
    */
    enum BackgroundDesign {
      "Solid",
      "Translucent",
      "Transparent"
    }
    /**
     * Specifies <code>IconTabBar</code> header mode.
    */
    enum IconTabHeaderMode {
    }
    /**
     * A subset of DateTimeInput types that fit to a simple API returning one string.
    */
    enum DateTimeInputType {
      "Date",
      "DateTime",
      "Time"
    }
    /**
     * Enum of the available deviation markers for the NumericContent control.
    */
    enum DeviationIndicator {
      "Down",
      "None",
      "Up"
    }
    /**
     * Available options for the layout of elements along the main axis of the flexbox layout.
    */
    enum FlexJustifyContent {
      "Center",
      "End",
      "Inherit",
      "SpaceAround",
      "SpaceBetween",
      "Start"
    }
    /**
     * Enum for the state of sap.m.DraftIndicator control.
    */
    enum DraftIndicatorState {
      "Clear",
      "Saved",
      "Saving"
    }
    /**
     * Available Filter Item Design.
    */
    enum IconTabFilterDesign {
      "Horizontal",
      "Vertical"
    }
    /**
     * Defines the growing direction of the <code>sap.m.List</code> or <code>sap.m.Table</code>.
    */
    enum ListGrowingDirection {
      "Downwards",
      "Upwards"
    }
    /**
     * Available Page Background Design.
    */
    enum PageBackgroundDesign {
      "List",
      "Solid",
      "Standard",
      "Transparent"
    }
    /**
     * Types for the placement of message popover control.
    */
    enum VerticalPlacementType {
      "Bottom",
      "Top",
      "Vertical"
    }
    /**
     * Types of three-column layout for the sap.m.FlexibleColumnLayout control
    */
    enum ThreeColumnLayoutType {
      "EndColumnEmphasized",
      "MidColumnEmphasized"
    }
    /**
     * Predefined visibility for ObjectMarker.
    */
    enum ObjectMarkerVisibility {
      "IconAndText",
      "IconOnly",
      "TextOnly"
    }
    /**
     * FacetFilterList data types.
    */
    enum FacetFilterListDataType {
      "Boolean",
      "Date",
      "DateTime",
      "Float",
      "Integer",
      "String",
      "Time"
    }
    /**
     * Defines the priorities of the controls within sap.m.OverflowToolbar
    */
    enum OverflowToolbarPriority {
      "AlwaysOverflow",
      "Disappear",
      "High",
      "Low",
      "NeverOverflow"
    }
    /**
     * QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to
     * this label
    */
    enum QuickViewGroupElementType {
      "email",
      "link",
      "mobile",
      "pageLink",
      "phone",
      "text"
    }
    /**
     * Possible values for the visualization of float values in the RatingIndicator Control.
    */
    enum RatingIndicatorVisualMode {
      "Full",
      "Half"
    }
    /**
     * Defines the keyboard navigation mode.
    */
    enum SelectListKeyboardNavigationMode {
      "Delimited",
      "None"
    }
  }
}
