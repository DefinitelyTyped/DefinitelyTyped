// For Library Version: 1.91.0

declare module "sap/f/library" {
  export interface IShellBar {
    __implements__sap_f_IShellBar: boolean;
  }

  export interface IDynamicPageStickyContent {
    __implements__sap_f_IDynamicPageStickyContent: boolean;
  }
}

declare module "sap/m/library" {
  import Control from "sap/ui/core/Control";

  import Locale from "sap/ui/core/Locale";

  import LocaleData from "sap/ui/core/LocaleData";

  import Slider from "sap/m/Slider";

  import RangeSlider from "sap/m/RangeSlider";

  import RenderManager from "sap/ui/core/RenderManager";

  import { CSSColor, URI } from "sap/ui/core/library";

  import Image from "sap/m/Image";

  import Icon from "sap/ui/core/Icon";

  import Event from "sap/ui/base/Event";

  /**
   * @SINCE 1.20
   *
   * Hide the soft keyboard.
   */
  export function closeKeyboard(): void;
  /**
   * @SINCE 1.10
   * @deprecated (since 1.12) - UI5 returns null for invalid date
   *
   * Returns invalid date value of UI5.
   */
  export function getInvalidDate(): null;
  /**
   * @SINCE 1.11
   *
   * Search given control's parents and try to find iScroll.
   */
  export function getIScroll(
    /**
     * Control to start the search at
     */
    oControl: Control
  ): Object | undefined;
  /**
   * @SINCE 1.10
   *
   * Finds default locale settings once and returns always the same.
   *
   * We should not need to create new instance to get same locale settings This method keeps the locale instance
   * in the scope and returns the same after first run
   */
  export function getLocale(): Locale;
  /**
   * @SINCE 1.10
   *
   * Finds default locale data once and returns always the same.
   */
  export function getLocaleData(): LocaleData;
  /**
   * @SINCE 1.11
   *
   * Search given control's parents and try to find a ScrollDelegate.
   */
  export function getScrollDelegate(
    /**
     * Starting point for the search
     */
    oControl: Control,
    /**
     * Whether the search should stop on component level (`false`) or not
     */
    bGlobal: boolean
  ): Object | undefined;
  /**
   * @SINCE 1.10
   *
   * Checks if the given parameter is a valid JsDate Object.
   */
  export function isDate(
    /**
     * Any variable to test.
     */
    value: any
  ): boolean;

  /**
   * Available Background Design.
   */
  export enum BackgroundDesign {
    /**
     * A solid background color dependent on the theme.
     */
    Solid = "Solid",
    /**
     * A translucent background depending on the opacity value of the theme.
     */
    Translucent = "Translucent",
    /**
     * Transparent background.
     */
    Transparent = "Transparent",
  }

  /**
   * @SINCE 1.87
   *
   * Types of animation performed by {@link sap.m.BadgeEnabler}.
   */
  export enum BadgeAnimationType {
    /**
     * Badge indicator will perform Appear,Update,and Disappear animation.
     */
    Full = "Full",
    /**
     * No animation is performed.
     */
    None = "None",
    /**
     * Badge indicator will perform only Update animation (suitable for controls, which invalidate often).
     */
    Update = "Update",
  }
  /**
   * @SINCE 1.81
   *
   * Types of state of {@link sap.m.BadgeEnabler} to expose its current state.
   */
  export enum BadgeState {
    /**
     * Informing interested parties that the badge has appeared.
     */
    Appear = "Appear",
    /**
     * Informing interested parties that the badge has disappeared.
     */
    Disappear = "Disappear",
    /**
     * Informing interested parties that the badge has been updated.
     */
    Updated = "Updated",
  }
  /**
   * @SINCE 1.20
   *
   * Types of the Bar design.
   */
  export enum BarDesign {
    /**
     * The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from
     * parent control.
     */
    Auto = "Auto",
    /**
     * The bar will be styled like a footer of the page.
     */
    Footer = "Footer",
    /**
     * The bar will be styled like a header of the page.
     */
    Header = "Header",
    /**
     * The bar will be styled like a subheader of the page.
     */
    SubHeader = "SubHeader",
  }
  /**
   * @SINCE 1.69
   *
   * Variations of the {@link sap.m.Breadcrumbs} separators.
   */
  export enum BreadcrumbsSeparatorStyle {
    /**
     * The separator will appear as "\"
     */
    BackSlash = "BackSlash",
    /**
     * The separator will appear as "\\"
     */
    DoubleBackSlash = "DoubleBackSlash",
    /**
     * The separator will appear as ">>"
     */
    DoubleGreaterThan = "DoubleGreaterThan",
    /**
     * The separator will appear as "//"
     */
    DoubleSlash = "DoubleSlash",
    /**
     * The separator will appear as ">"
     */
    GreaterThan = "GreaterThan",
    /**
     * The separator will appear as "/"
     */
    Slash = "Slash",
  }
  /**
   * Different predefined button types for the {@link sap.m.Button sap.m.Button}.
   */
  export enum ButtonType {
    /**
     * Accept type
     */
    Accept = "Accept",
    /**
     * @SINCE 1.77
     *
     * Attention type
     */
    Attention = "Attention",
    /**
     * Back type (back navigation button for header)
     */
    Back = "Back",
    /**
     * @SINCE 1.73
     *
     * Critical type
     *
     * **Note:** To be used only in controls of type `sap.m.Button`. When the button opens a `sap.m.MessagePopover`
     * list, use this `ButtonType` if the message with the highest severity is `Warning` type.
     */
    Critical = "Critical",
    /**
     * Default type (no special styling)
     */
    Default = "Default",
    /**
     * Emphasized type
     */
    Emphasized = "Emphasized",
    /**
     * Ghost type
     */
    Ghost = "Ghost",
    /**
     * @SINCE 1.73
     *
     * Negative type
     *
     * **Note:** To be used only in controls of type `sap.m.Button`. When the button opens a `sap.m.MessagePopover`
     * list, use this `ButtonType` if the message with the highest severity is `Error` type.
     */
    Negative = "Negative",
    /**
     * @SINCE 1.73
     *
     * Neutral type
     *
     * **Note:** To be used only in controls of type `sap.m.Button`. When the button opens a `sap.m.MessagePopover`
     * list, use this `ButtonType` if the message with the highest severity is `Information` type.
     */
    Neutral = "Neutral",
    /**
     * Reject style
     */
    Reject = "Reject",
    /**
     * @SINCE 1.73
     *
     * Success type
     *
     * **Note:** To be used only in controls of type `sap.m.Button`. When the button opens a `sap.m.MessagePopover`
     * list, use this `ButtonType` if the message with the highest severity is `Success` type.
     */
    Success = "Success",
    /**
     * Transparent type
     */
    Transparent = "Transparent",
    /**
     * Unstyled type (no styling)
     */
    Unstyled = "Unstyled",
    /**
     * Up type (up navigation button for header)
     */
    Up = "Up",
  }
  /**
   * Carousel arrows align.
   */
  export enum CarouselArrowsPlacement {
    /**
     * Carousel arrows are placed on the sides of the current Carousel page.
     */
    Content = "Content",
    /**
     * Carousel arrows are placed on the sides of the page indicator of the Carousel.
     */
    PageIndicator = "PageIndicator",
  }
  /**
   * @deprecated (since 1.32.8) - Instead, use dedicated `sap.m.DatePicker` and/or `sap.m.TimePicker` controls.
   *
   * A subset of DateTimeInput types that fit to a simple API returning one string.
   */
  export enum DateTimeInputType {
    /**
     * @deprecated (since 1.22.0) - Instead, use dedicated `sap.m.DatePicker` control.
     *
     * An input control for specifying a date value. The user can select a month, day of the month, and year.
     */
    Date = "Date",
    /**
     * @deprecated (since 1.32.8) - Instead, use dedicated `sap.m.DatePicker` and `sap.m.TimePicker` controls.
     *
     * An input control for specifying a date and time value. The user can select a month, day of the month,
     * year, and time of day.
     */
    DateTime = "DateTime",
    /**
     * @deprecated (since 1.32.8) - Instead, use dedicated `sap.m.TimePicker` control.
     *
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM
     * or PM.
     */
    Time = "Time",
  }
  /**
   * @SINCE 1.34
   *
   * Enum of the available deviation markers for the NumericContent control.
   */
  export enum DeviationIndicator {
    /**
     * The actual value is less than the target value.
     */
    Down = "Down",
    /**
     * No value.
     */
    None = "None",
    /**
     * The actual value is more than the target value.
     */
    Up = "Up",
  }
  /**
   * @SINCE 1.65
   *
   * Enum for the ARIA role of {@link sap.m.Dialog} control.
   */
  export enum DialogRoleType {
    /**
     * Represents the ARIA role `alertdialog`.
     */
    AlertDialog = "alertdialog",
    /**
     * Represents the ARIA role `dialog`.
     */
    Dialog = "dialog",
  }
  /**
   * Enum for the type of {@link sap.m.Dialog} control.
   */
  export enum DialogType {
    /**
     * Dialog with type Message looks the same as the Standard Dialog in Android. It puts the Left and the Right
     * buttons at the bottom of the Dialog in iOS.
     */
    Message = "Message",
    /**
     * This is the default value for Dialog type.
     *
     * The Standard Dialog in iOS has a header on the top. The Left and the Right buttons are put inside the
     * header. In Android, the Left and the Right buttons are put at the bottom of the Dialog.
     */
    Standard = "Standard",
  }
  /**
   * Enum for the state of {@link sap.m.DraftIndicator} control.
   */
  export enum DraftIndicatorState {
    /**
     * This is the default value for DraftIndicatorState type. This state has no visual information displayed.
     */
    Clear = "Clear",
    /**
     * Indicates that the draft is already saved
     */
    Saved = "Saved",
    /**
     * Indicates that the draft currently is being saved
     */
    Saving = "Saving",
  }
  /**
   * @SINCE 1.87
   *
   * Modes in which a control will render empty indicator if its content is empty.
   */
  export enum EmptyIndicatorMode {
    /**
     * Empty indicator will be rendered depending on the context in which the control is placed. If one of the
     * parents has the context class sapMShowEmpty-CTX then the empty indicator will be shown.
     */
    Auto = "Auto",
    /**
     * Empty indicator is never rendered.
     */
    Off = "Off",
    /**
     * Empty indicator is rendered always when the control's content is empty.
     */
    On = "On",
  }
  /**
   * Expandable text overflow mode
   */
  export enum ExpandableTextOverflowMode {
    /**
     * InPlace
     */
    InPlace = "InPlace",
    /**
     * Popover
     */
    Popover = "Popover",
  }
  /**
   * FacetFilterList data types.
   */
  export enum FacetFilterListDataType {
    /**
     * An input control for specifying a Boolean value
     */
    Boolean = "Boolean",
    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year.
     */
    Date = "Date",
    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month,
     * year, and time of day.
     */
    DateTime = "DateTime",
    /**
     * An input control for specifying a Float value
     */
    Float = "Float",
    /**
     * >An input control for specifying an Integer value
     */
    Integer = "Integer",
    /**
     * An input control for specifying a String value
     */
    String = "String",
    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM
     * or PM.
     */
    Time = "Time",
  }
  /**
   * Used by the FacetFilter control to adapt its design according to type.
   */
  export enum FacetFilterType {
    /**
     * Forces FacetFilter to display in light mode.
     */
    Light = "Light",
    /**
     * Forces FacetFilter to display facet lists as a row of buttons, one button per facet.
     *
     * The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.
     */
    Simple = "Simple",
  }
  /**
   * Available options for the layout of container lines along the cross axis of the flexbox layout.
   *
   * **Note:** This property has no effect in Internet Explorer 10.
   */
  export enum FlexAlignContent {
    /**
     * Line are packed toward the center of the line.
     */
    Center = "Center",
    /**
     * Lines are packed toward the end of the line.
     */
    End = "End",
    /**
     * Inherits the value from its parent.
     */
    Inherit = "Inherit",
    /**
     * Lines are evenly distributed in the line, with half-size spaces on either end. **Note:** This value behaves
     * like SpaceBetween in Internet Explorer 10.
     */
    SpaceAround = "SpaceAround",
    /**
     * Lines are evenly distributed in the line.
     */
    SpaceBetween = "SpaceBetween",
    /**
     * Lines are packed toward the start of the line.
     */
    Start = "Start",
    /**
     * Lines stretch to take up the remaining space.
     */
    Stretch = "Stretch",
  }
  /**
   * Available options for the layout of all elements along the cross axis of the flexbox layout.
   */
  export enum FlexAlignItems {
    /**
     * If the flex item`s inline axes are the same as the cross axis, this value is identical to "Start".
     *
     * Otherwise, it participates in baseline alignment: all participating box items on the line are aligned
     * such that their baselines align, and the item with the largest distance between its baseline and its
     * cross-start margin edge is placed flush against the cross-start edge of the line.
     */
    Baseline = "Baseline",
    /**
     * The flex item's margin boxes are centered in the cross axis within the line.
     */
    Center = "Center",
    /**
     * The cross-start margin edges of the flex items are placed flush with the cross-end edge of the line.
     */
    End = "End",
    /**
     * Inherits the value from its parent.
     */
    Inherit = "Inherit",
    /**
     * The cross-start margin edges of the flex items are placed flush with the cross-start edge of the line.
     */
    Start = "Start",
    /**
     * Make the cross size of the item's margin boxes as close to the same size as the line as possible.
     */
    Stretch = "Stretch",
  }
  /**
   * Available options for the layout of individual elements along the cross axis of the flexbox layout overriding
   * the default alignment.
   */
  export enum FlexAlignSelf {
    /**
     * Takes up the value of alignItems from the parent FlexBox
     */
    Auto = "Auto",
    /**
     * If the flex item's inline axis is the same as the cross axis, this value is identical to "Start".
     *
     * Otherwise, it participates in baseline alignment: all participating box items on the line are aligned
     * such that their baselines align, and the item with the largest distance between its baseline and its
     * cross-start margin edge is placed flush against the cross-start edge of the line.
     */
    Baseline = "Baseline",
    /**
     * The flex item's margin box is centered in the cross axis within the line.
     */
    Center = "Center",
    /**
     * The cross-start margin edges of the flex item is placed flush with the cross-end edge of the line.
     */
    End = "End",
    /**
     * Inherits the value from its parent.
     */
    Inherit = "Inherit",
    /**
     * The cross-start margin edges of the flex item is placed flush with the cross-start edge of the line.
     */
    Start = "Start",
    /**
     * Make the cross size of the item's margin box as close to the same size as the line as possible.
     */
    Stretch = "Stretch",
  }
  /**
   * Available directions for flex layouts.
   */
  export enum FlexDirection {
    /**
     * Flex items are laid out along the direction of the block axis (usually top to bottom).
     */
    Column = "Column",
    /**
     * Flex items are laid out along the reverse direction of the block axis (usually bottom to top).
     */
    ColumnReverse = "ColumnReverse",
    /**
     * Inherits the value from its parent.
     */
    Inherit = "Inherit",
    /**
     * Flex items are laid out along the direction of the inline axis (text direction).
     */
    Row = "Row",
    /**
     * Flex items are laid out along the reverse direction of the inline axis (against the text direction).
     */
    RowReverse = "RowReverse",
  }
  /**
   * Available options for the layout of elements along the main axis of the flexbox layout.
   */
  export enum FlexJustifyContent {
    /**
     * Flex items are packed toward the center of the line.
     */
    Center = "Center",
    /**
     * Flex items are packed toward the end of the line.
     */
    End = "End",
    /**
     * Inherits the value from its parent.
     */
    Inherit = "Inherit",
    /**
     * Flex items are evenly distributed in the line, with half-size spaces on either end. **Note:** This value
     * behaves like SpaceBetween in Internet Explorer 10.
     */
    SpaceAround = "SpaceAround",
    /**
     * Flex items are evenly distributed in the line.
     */
    SpaceBetween = "SpaceBetween",
    /**
     * Flex items are packed toward the start of the line.
     */
    Start = "Start",
  }
  /**
   * Determines the type of HTML elements used for rendering controls.
   */
  export enum FlexRendertype {
    /**
     * @SINCE 1.42.1
     *
     * The UI5 controls are not wrapped in an additional HTML element, the surrounding Flex Box is a DIV element.
     */
    Bare = "Bare",
    /**
     * The UI5 controls are wrapped in DIV elements.
     */
    Div = "Div",
    /**
     * The UI5 controls are wrapped in LI elements, the surrounding Flex Box is an unordered list (UL).
     */
    List = "List",
  }
  /**
   * Available options for the wrapping behavior of a flex container.
   */
  export enum FlexWrap {
    /**
     * The flex container is single-line.
     */
    NoWrap = "NoWrap",
    /**
     * The flex container is multi-line.
     */
    Wrap = "Wrap",
    /**
     * The flex container is multi-line with the cross-axis start and end being swapped.
     */
    WrapReverse = "WrapReverse",
  }
  /**
   * @SINCE 1.34.0
   *
   * Enum for possible frame size types for sap.m.TileContent and sap.m.GenericTile control.
   */
  export enum FrameType {
    /**
     * The Auto frame type that adjusts the size of the control to the content. Support for this type in sap.m.GenericTile
     * is deprecated since 1.48.0.
     */
    Auto = "Auto",
    /**
     * @SINCE 1.83
     *
     * The 2x1 frame type. **Note:** The 2x1 frame type is currently only supported for Generic tile.
     */
    OneByHalf = "OneByHalf",
    /**
     * The 2x2 frame type.
     */
    OneByOne = "OneByOne",
    /**
     * @SINCE 1.83
     *
     * The 4x1 frame type. **Note:** The 4x1 frame type is currently only supported for Generic tile.
     */
    TwoByHalf = "TwoByHalf",
    /**
     * The 4x2 frame type.
     */
    TwoByOne = "TwoByOne",
    /**
     * @deprecated (since 1.48.0)
     *
     * The 2/3 frame type.
     */
    TwoThirds = "TwoThirds",
  }
  /**
   * @SINCE 1.62.0
   *
   * Design modes for the `GenericTag` control.
   */
  export enum GenericTagDesign {
    /**
     * Everything from the control is rendered.
     */
    Full = "Full",
    /**
     * Everything from the control is rendered except the status icon.
     */
    StatusIconHidden = "StatusIconHidden",
  }
  /**
   * @SINCE 1.62.0
   *
   * Value states for the `GenericTag` control.
   */
  export enum GenericTagValueState {
    /**
     * Warning icon is rendered that overrides the control set in the `value` aggregation of the `GenericTag`
     * control.
     */
    Error = "Error",
    /**
     * The value is rendered in its normal state.
     */
    None = "None",
  }
  /**
   * @SINCE 1.38.0
   *
   * Defines the mode of GenericTile.
   */
  export enum GenericTileMode {
    /**
     * Default mode (Two lines for the header and one line for the subtitle).
     */
    ContentMode = "ContentMode",
    /**
     * Header mode (Four lines for the header and one line for the subtitle).
     */
    HeaderMode = "HeaderMode",
    /**
     * @SINCE 1.44.0
     *
     * Line mode (Implemented for both, cozy and compact densities).
     *
     * Generic Tile is displayed as in-line element, header and subheader are displayed in one line. In case
     * the texts need more than one line, the representation depends on the used density. **Cozy:** The text
     * will be truncated and the full text is shown in a tooltip as soon as the tile is hovered (desktop only).
     * **Compact:** Header and subheader are rendered continuously spanning multiple lines, no tooltip is provided).
     */
    LineMode = "LineMode",
  }
  /**
   * @SINCE 1.46.0
   *
   * Defines the scopes of GenericTile enabling the developer to implement different "flavors" of tiles.
   */
  export enum GenericTileScope {
    /**
     * @SINCE 1.76
     *
     * More action scope (Only the More icon is added to the tile)
     */
    ActionMore = "ActionMore",
    /**
     * @SINCE 1.76
     *
     * Remove action scope (Only the Remove icon is added to the tile)
     */
    ActionRemove = "ActionRemove",
    /**
     * Action scope (Possible footer and Error State information is overlaid, "Remove" and "More" icons are
     * added to the tile).
     */
    Actions = "Actions",
    /**
     * Default scope (The default scope of the tile, no action icons are rendered).
     */
    Display = "Display",
  }
  /**
   * Different levels for headers.
   */
  export enum HeaderLevel {
    /**
     * Header level 1
     */
    H1 = "H1",
    /**
     * Header level 2
     */
    H2 = "H2",
    /**
     * Header level 3
     */
    H3 = "H3",
    /**
     * Header level 4
     */
    H4 = "H4",
    /**
     * Header level 5
     */
    H5 = "H5",
    /**
     * Header level 6
     */
    H6 = "H6",
  }
  /**
   * @SINCE 1.80
   *
   * Interface for controls which implement the notification badge concept.
   */
  export interface IBadge {
    __implements__sap_m_IBadge: boolean;
  }

  /**
   * @SINCE 1.22
   *
   * Interface for controls which are suitable as a Header, Subheader or Footer of a Page. If the control
   * does not want to get a context base style class, it has to implement the isContextSensitive method and
   * return false
   */
  export interface IBar {
    __implements__sap_m_IBar: boolean;
  }

  /**
   * @SINCE 1.22
   *
   * Allowed tags for the implementation of the IBar interface.
   */
  export enum IBarHTMLTag {
    /**
     * Renders as a div element.
     */
    Div = "Div",
    /**
     * Renders as a footer element.
     */
    Footer = "Footer",
    /**
     * Renders as a header element.
     */
    Header = "Header",
  }
  /**
   * @SINCE 1.52
   *
   * Interface for controls which have the meaning of a breadcrumbs navigation.
   */
  export interface IBreadcrumbs {
    __implements__sap_m_IBreadcrumbs: boolean;
  }

  /**
   * Represents an interface for controls, which are suitable as items for the sap.m.IconTabBar.
   */
  export interface IconTab {
    __implements__sap_m_IconTab: boolean;
  }

  /**
   * Specifies `IconTabBar` tab density mode.
   */
  export enum IconTabDensityMode {
    /**
     * Compact. In this mode the tabs will be set explicitly to compact mode independent of what mode is applied
     * globally.
     */
    Compact = "Compact",
    /**
     * Cozy. In this mode the tabs will be set explicitly to compact mode independent of what mode is applied
     * globally.
     */
    Cozy = "Cozy",
    /**
     * Inherit. In this mode the global configuration of the density mode will be applied.
     */
    Inherit = "Inherit",
  }
  /**
   * Available Filter Item Design.
   */
  export enum IconTabFilterDesign {
    /**
     * A horizontally layouted design providing more space for texts.
     */
    Horizontal = "Horizontal",
    /**
     * A vertically layouted design using minimum horizontal space.
     */
    Vertical = "Vertical",
  }
  /**
   * Specifies `IconTabBar` header mode.
   */
  export enum IconTabHeaderMode {
    /**
     * Inline. In this mode when the `count` and the `text` are set, they are displayed in one line.
     */
    Inline = "Inline",
    /**
     * Standard. In this mode when the `count` and the `text` are set, they are displayed in two separate lines.
     */
    Standard = "Standard",
  }

  /**
   * @SINCE 1.30.0
   *
   * Determines how the source image is used on the output DOM element.
   */
  export enum ImageMode {
    /**
     * The image is rendered with 'span' tag and the 'src' property is set to the 'background-image' CSS style
     * on the output DOM element
     */
    Background = "Background",
    /**
     * The image is rendered with 'img' tag and the 'src' property is set to the src attribute on the output
     * DOM element.
     */
    Image = "Image",
  }

  /**
   * @SINCE 1.44.0
   *
   * Defines how the input display text should be formatted.
   */
  export enum InputTextFormatMode {
    /**
     * Key
     */
    Key = "Key",
    /**
     * A key-value pair formatted like "(key) text"
     */
    KeyValue = "KeyValue",
    /**
     * Text
     */
    Value = "Value",
    /**
     * A value-key pair formatted like "text (key)"
     */
    ValueKey = "ValueKey",
  }
  /**
   * A subset of input types that fits to a simple API returning one string.
   *
   * Not available on purpose: button, checkbox, hidden, image, password, radio, range, reset, search, submit.
   */
  export enum InputType {
    /**
     * @deprecated (since 1.9.1) - Please use dedicated {@link sap.m.DatePicker} to create date input.
     *
     * An input control for specifying a date value. The user can select a month, day of the month, and year.
     */
    Date = "Date",
    /**
     * @deprecated (since 1.9.1) - Please use dedicated {@link sap.m.DateTimePicker} control to create date-time
     * input.
     *
     * An input control for specifying a date and time value. The user can select a month, day of the month,
     * year, and time of day.
     */
    Datetime = "Datetime",
    /**
     * @deprecated (since 1.9.1) - Please use dedicated {@link sap.m.DateTimePicker} control create date-time
     * input.
     *
     * An input control for specifying a date and time value where the format depends on the locale.
     */
    DatetimeLocale = "DatetimeLocale",
    /**
     * A text field for specifying an email address. Brings up a keyboard optimized for email address entry.
     */
    Email = "Email",
    /**
     * @deprecated (since 1.9.1) - There is no cross-platform support. Please do not use this Input type.
     *
     * An input control for selecting a month.
     */
    Month = "Month",
    /**
     * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d*
     * or [0-9]* is equivalent to using this type.
     */
    Number = "Number",
    /**
     * Password input where the user entry cannot be seen.
     */
    Password = "Password",
    /**
     * A text field for specifying a phone number. Brings up a phone pad keyboard.
     */
    Tel = "Tel",
    /**
     * default (text)
     */
    Text = "Text",
    /**
     * @deprecated (since 1.9.1) - Please use dedicated {@link sap.m.TimePicker} control to create time input.
     *
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM
     * or PM.
     */
    Time = "Time",
    /**
     * A text field for specifying a URL. Brings up a keyboard optimized for URL entry.
     */
    Url = "Url",
    /**
     * @deprecated (since 1.9.1) - There is no cross-platform support. Please do not use this Input type.
     *
     * An input control for selecting a week.
     */
    Week = "Week",
  }
  /**
   * @SINCE 1.52
   *
   * Interface for controls which can have special behavior inside `sap.m.OverflowToolbar`. Controls that
   * implement this interface must provide a `getOverflowToolbarConfig` method that accepts no arguments and
   * returns an object with the following fields:
   * 	`canOverflow` - A boolean that tells whether the control can move to the overflow menu or not.
   *
   * **Note:** Even if `canOverflow` is set to `false`, the `propsUnrelatedToSize` field is taken into account,
   * allowing to optimize the behavior of controls that do not need to overflow, but are used in an `sap.m.OverflowToolbar`
   * regardless.
   *
   *
   * 	 - `autoCloseEvents` - An array of strings, listing all of the control's events that should trigger
   * 			the closing of the overflow menu, when fired.
   *
   *
   * 	 - `invalidationEvents` - An array of strings, listing all of the control's events that should trigger
   * 			the invalidation of the `sap.m.OverflowToolbar`, when fired.
   *
   * `propsUnrelatedToSize` - An array of strings, listing all of the control's properties that, when
   * changed, should not cause the overflow toolbar to invalidate.
   *
   * **Note:** By default `sap.m.OverflowToolbar` invalidates whenever any property of a child control changes.
   * This is to ensure that whenever the size of a child control changes, the overflow toolbar's layout is
   * recalculated. Some properties however do not affect control size, making it unnecessary to invalidate
   * the overflow toolbar when they change. You can list them here for optimization purposes.
   *
   * `onBeforeEnterOverflow(oControl)` - A callback function that will be invoked before moving the control
   * into the overflow menu. The control instance will be passed as an argument.
   *
   * **Note:** The context of the function is not the control instance (use the `oControl` parameter for this
   * purpose), but rather an internal helper object, associated with the current `sap.m.OverflowToolbar` instance.
   * This object only needs to be manipulated in special cases (e.g. when you want to store state on it, rather
   * than on the control instance).
   *
   * `onAfterExitOverflow(oControl)` - A callback function that will be invoked after taking the control
   * out of the overflow menu (before moving it back to the toolbar itself). The control instance will be
   * passed as an argument.
   *
   * **Note:** See: `onBeforeEnterOverflow` for details about the function's context.
   *
   * `getCustomImportance()` - A function that, if provided, will be called to determine the priority
   * of the control. This function must return a value of type `sap.m.OverflowToolbarPriority`. The string
   * "Medium" is also accepted and interpreted as priority between `Low` and `High`.
   *
   * **Note:** Normally priority in `sap.m.OverflowToolbar` is managed with the `priority` property of `sap.m.OverflowToolbarLayoutData`.
   * However, some controls may have other means of defining priority, such as dedicated properties or other
   * types of layout data for that purpose. In summary, implementing this function allows a control to override
   * the default priority logic (`sap.m.OverflowToolbarLayoutData`) by providing its own.
   *
   * **Important:** In addition, the control can implement a CSS class, scoped with the `.sapMOverflowToolbarMenu-CTX`
   * context selector, that will be applied whenever the control is inside the overflow menu. For example,
   * to make your control take up the whole width of the overflow menu, you can add a context class to your
   * control's base CSS file like this:
   *
   *
   * ```javascript
   *
   *       .sapMOverflowToolbarMenu-CTX .sapMyControlClass {
   *       	width: 100%;
   *       }
   *   ```
   */
  export interface IOverflowToolbarContent {
    __implements__sap_m_IOverflowToolbarContent: boolean;
  }

  /**
   * @SINCE 1.46
   *
   * Interface for controls which are suitable as a Scale for the Slider/RangeSlider. Implementation of this
   * interface should implement the following methods:
   * 	 - `getTickmarksBetweenLabels`
   * 	 - `calcNumberOfTickmarks`
   * 	 - `handleResize`
   * 	 - `getLabel`
   */
  export interface IScale {
    __implements__sap_m_IScale: boolean;

    /**
     * Returns how many tickmarks would be drawn on the screen.
     *
     * **Note:** There would always be a tickmark in the beginning and in the end of the slider, regardless
     * of the value this method returns. The start and the end tickmark are taken into account for the later
     * calculations.
     */
    calcNumberOfTickmarks(
      /**
       * Size of the scale. This is the distance between the start and end point i.e. 0..100
       */
      fSize: float,
      /**
       * The step walking from start to end.
       */
      fStep: float,
      /**
       * Limits the number of tickmarks.
       */
      iTickmarksThreshold: int
    ): int;
    /**
     * Provides a custom tickmark label.
     *
     * This method is optional. If it is not provided, the slider values will be placed as labels. If provided,
     * the value of the tickmark labels and accessibility attributes (aria-valuenow and aria-valuetext) of the
     * slider are changed accordingly.
     */
    getLabel?(
      /**
       * Value represented by the tickmark
       */
      fValue: float,
      /**
       * Slider control that asks for a label
       */
      oSlider: Slider | RangeSlider
    ): string | number;
    /**
     * Returns the number of tickmarks, which should be placed between labels.
     *
     * **Note:** There would always be a tickmark in the beginning and in the end of the slider, regardless
     * of the value that this method returns.
     */
    getTickmarksBetweenLabels(
      /**
       * The option array
       */
      mOptions: object
    ): int;
    /**
     * Called, when the slider is getting resized.
     *
     * The Slider/RangeSlider control could be accessed via the oEvent.control parameter.
     *
     * Implementing this method is optional.
     */
    handleResize?(
      /**
       * The event object passed.
       */
      oEvent: jQuery.Event
    ): void;
  }

  /**
   * Available label display modes.
   */
  export enum LabelDesign {
    /**
     * Displays the label in bold.
     */
    Bold = "Bold",
    /**
     * Displays the label in normal mode.
     */
    Standard = "Standard",
  }
  /**
   * @SINCE 1.40
   *
   * Types of LightBox loading stages.
   */
  export enum LightBoxLoadingStates {
    /**
     * The LightBox image could not load.
     */
    Error = "ERROR",
    /**
     * The LightBox image has loaded.
     */
    Loaded = "LOADED",
    /**
     * The LightBox image is still loading.
     */
    Loading = "LOADING",
    /**
     * The LightBox image has timed out, could not load.
     */
    TimeOutError = "TIME_OUT_ERROR",
  }
  /**
   * @SINCE 1.45.5
   *
   * Enumeration for possible link-to-anchor conversion strategy.
   */
  export enum LinkConversion {
    /**
     * Valid links with protocols, such as http, https, ftp and those starting with the string "www".
     */
    All = "All",
    /**
     * Default mode (no conversion).
     */
    None = "None",
    /**
     * Valid links with protocols, such as http, https, ftp.
     */
    ProtocolOnly = "ProtocolOnly",
  }
  /**
   * @SINCE 1.40.0
   *
   * Defines the growing direction of the `sap.m.List` or `sap.m.Table`.
   */
  export enum ListGrowingDirection {
    /**
     * User has to scroll down to load more items or the growing button is displayed at the bottom.
     */
    Downwards = "Downwards",
    /**
     * User has to scroll up to load more items or the growing button is displayed at the top.
     *
     * **Note:** If this option is active, there should not be any other control than `sap.m.List` inside its
     * `ScollContainer`.
     */
    Upwards = "Upwards",
  }
  /**
   * @deprecated (since 1.16) - Has no functionality since 1.16.
   *
   * Defines the different header styles.
   */
  export enum ListHeaderDesign {
    /**
     * Plain header style
     */
    Plain = "Plain",
    /**
     * Standard header style
     */
    Standard = "Standard",
  }
  /**
   * @SINCE 1.38.0
   *
   * Defines the keyboard handling behavior of the `sap.m.List` or `sap.m.Table`.
   */
  export enum ListKeyboardMode {
    /**
     * This mode is suitable if the number of items is limited and if there are editable fields within the item.
     *
     * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the
     * focus to the next/previous element in the tab chain after/before the item .
     */
    Edit = "Edit",
    /**
     * This default mode is suitable if the number of items is unlimited or if there is no editable field within
     * the item.
     *
     * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the
     * focus to the next/previous element in the tab chain after/before the `sap.m.List` or `sap.m.Table`.
     */
    Navigation = "Navigation",
  }
  /**
   * Defines the mode of the list.
   */
  export enum ListMode {
    /**
     * Delete mode (only one list item can be deleted via provided delete button)
     */
    Delete = "Delete",
    /**
     * Multi selection mode (more than one list item can be selected).
     */
    MultiSelect = "MultiSelect",
    /**
     * Default mode (no selection).
     */
    None = "None",
    /**
     * Right-positioned single selection mode (only one list item can be selected).
     */
    SingleSelect = "SingleSelect",
    /**
     * Left-positioned single selection mode (only one list item can be selected).
     */
    SingleSelectLeft = "SingleSelectLeft",
    /**
     * Selected item is highlighted but no selection control is visible (only one list item can be selected).
     */
    SingleSelectMaster = "SingleSelectMaster",
  }
  /**
   * Defines which separator style will be applied for the items.
   */
  export enum ListSeparators {
    /**
     * Separators between the items including the last and the first one.
     */
    All = "All",
    /**
     * Separators between the items. **Note:** This enumeration depends on the theme.
     */
    Inner = "Inner",
    /**
     * No item separators.
     */
    None = "None",
  }
  /**
   * Defines the visual indication and behaviour of the list items.
   */
  export enum ListType {
    /**
     * Indicates that the item is clickable via active feedback when item is pressed.
     */
    Active = "Active",
    /**
     * Enables detail button of the list item that fires `detailPress` event. Also see {@link sap.m.ListItemBase#attachDetailPress}.
     */
    Detail = "Detail",
    /**
     * Enables {@link sap.m.ListType.Detail} and {@link sap.m.ListType.Active} enumerations together.
     */
    DetailAndActive = "DetailAndActive",
    /**
     * Indicates the list item does not have any active feedback when item is pressed. **Note:** `Inactive`
     * type cannot be used to disable list items.
     */
    Inactive = "Inactive",
    /**
     * Indicates the list item is navigable to show extra information about the item.
     */
    Navigation = "Navigation",
  }
  /**
   * @SINCE 1.34.0
   *
   * Enumeration of possible load statuses.
   */
  export enum LoadState {
    /**
     * The control is disabled.
     */
    Disabled = "Disabled",
    /**
     * The control failed to load.
     */
    Failed = "Failed",
    /**
     * The control has loaded.
     */
    Loaded = "Loaded",
    /**
     * The control is loading.
     */
    Loading = "Loading",
  }
  /**
   * @SINCE 1.38.0
   *
   * Different modes for a MenuButton (predefined types).
   */
  export enum MenuButtonMode {
    /**
     * Default regular type (Menu button appears as a regular button, pressing opens a menu)
     */
    Regular = "Regular",
    /**
     * Split type (Menu button appears as a split button, pressing fires the default action a menu, pressing
     * the arrow part opens a menu)
     */
    Split = "Split",
  }
  /**
   * Marker interface for controls which are suitable as items for the ObjectHeader.
   */
  export interface ObjectHeaderContainer {
    __implements__sap_m_ObjectHeaderContainer: boolean;
  }

  /**
   * @SINCE 1.61
   *
   * Used by the `ObjectHeader` control to define which shape to use for the image.
   */
  export enum ObjectHeaderPictureShape {
    /**
     * Circle shape for the images in the `ObjectHeader`.
     */
    Circle = "Circle",
    /**
     * Square shape for the images in the `ObjectHeader`.
     */
    Square = "Square",
  }
  /**
   * Predefined types for ObjectMarker.
   */
  export enum ObjectMarkerType {
    /**
     * Draft type
     */
    Draft = "Draft",
    /**
     * Favorite type
     */
    Favorite = "Favorite",
    /**
     * Flagged type
     */
    Flagged = "Flagged",
    /**
     * Locked type
     */
    Locked = "Locked",
    /**
     * LockedBy type Use when you need to display the name of the user who locked the object.
     */
    LockedBy = "LockedBy",
    /**
     * Unsaved type
     */
    Unsaved = "Unsaved",
    /**
     * UnsavedBy type Use when you need to display the name of the user whose changes were unsaved.
     */
    UnsavedBy = "UnsavedBy",
  }
  /**
   * Predefined visibility for ObjectMarker.
   */
  export enum ObjectMarkerVisibility {
    /**
     * Shows icon and text
     */
    IconAndText = "IconAndText",
    /**
     * Shows only icon
     */
    IconOnly = "IconOnly",
    /**
     * Shows only text
     */
    TextOnly = "TextOnly",
  }
  /**
   * @SINCE 1.32
   *
   * Defines the priorities of the controls within {@link sap.m.OverflowToolbar}.
   */
  export enum OverflowToolbarPriority {
    /**
     * @deprecated (since 1.48)
     *
     * Deprecated - Use `sap.m.OverflowToolbarPriority.AlwaysOverflow` instead
     */
    Always = "Always",
    /**
     * Forces `OverflowToolbar` items to remain always in the overflow area.
     */
    AlwaysOverflow = "AlwaysOverflow",
    /**
     * Items with priority `Disappear` overflow before the items with higher priority, such as `Low` and `High`,
     * and remain hidden in the overflow area.
     */
    Disappear = "Disappear",
    /**
     * Items with priority `High` overflow after the items with lower priority.
     */
    High = "High",
    /**
     * Items with priority `Low` overflow before the items with higher priority, such as `High` priority items.
     */
    Low = "Low",
    /**
     * @deprecated (since 1.48)
     *
     * Deprecated - Use `sap.m.OverflowToolbarPriority.NeverOverflow` instead.
     */
    Never = "Never",
    /**
     * Forces `OverflowToolbar` items to remain always in the toolbar.
     */
    NeverOverflow = "NeverOverflow",
  }

  export enum P13nConditionOperation {
    Ascending = "Ascending",

    Average = "Average",

    BT = "BT",

    Contains = "Contains",

    Descending = "Descending",

    Empty = "Empty",

    EndsWith = "EndsWith",

    EQ = "EQ",

    GE = "GE",

    GroupAscending = "GroupAscending",

    GroupDescending = "GroupDescending",

    GT = "GT",

    Initial = "Initial",

    LE = "LE",

    LT = "LT",

    Maximum = "Maximum",

    Minimum = "Minimum",

    NotBT = "NotBT",

    NotContains = "NotContains",

    NotEmpty = "NotEmpty",

    NotEndsWith = "NotEndsWith",

    NotEQ = "NotEQ",

    NotGE = "NotGE",

    NotGT = "NotGT",

    NotInitial = "NotInitial",

    NotLE = "NotLE",

    NotLT = "NotLT",

    NotStartsWith = "NotStartsWith",

    StartsWith = "StartsWith",

    Total = "Total",
  }
  /**
   * Type of panels used in the personalization dialog.
   */
  export enum P13nPanelType {
    /**
     * Panel type for column settings.
     */
    columns = "columns",
    /**
     * Panel type for dimension and measure settings.
     */
    dimeasure = "dimeasure",
    /**
     * Panel type for filtering.
     */
    filter = "filter",
    /**
     * Panel type for grouping.
     */
    group = "group",
    /**
     * Panel type for sorting.
     */
    sort = "sort",
  }
  /**
   * Available Page Background Design.
   */
  export enum PageBackgroundDesign {
    /**
     * Page background color when a List is set as the Page content.
     */
    List = "List",
    /**
     * A solid background color dependent on the theme.
     */
    Solid = "Solid",
    /**
     * Standard Page background color.
     */
    Standard = "Standard",
    /**
     * Transparent background for the page.
     */
    Transparent = "Transparent",
  }
  /**
   * Available Panel Accessible Landmark Roles.
   */
  export enum PanelAccessibleRole {
    /**
     * Represents the ARIA role `complementary`. A section of the page, designed to be complementary to the
     * main content at a similar level in the DOM hierarchy.
     */
    Complementary = "Complementary",
    /**
     * Represents the ARIA role `Form`. A landmark region that contains a collection of items and objects that,
     * as a whole, create a form.
     */
    Form = "Form",
    /**
     * Represents the ARIA role `Region`. A section of a page, that is important enough to be included in a
     * page summary or table of contents.
     */
    Region = "Region",
  }
  /**
   * PDF viewer display types.
   */
  export enum PDFViewerDisplayType {
    /**
     * The PDF viewer switches between the `Link` display type and the `Embedded` display type, depending on
     * the device being used.
     */
    Auto = "Auto",
    /**
     * The PDF viewer appears embedded in the parent container and displays the PDF file.
     */
    Embedded = "Embedded",
    /**
     * The PDF viewer appears as a toolbar with a download button that can be used to download the PDF file
     * or open it in a new tab.
     */
    Link = "Link",
  }
  /**
   * Types for the placement of Popover control.
   */
  export enum PlacementType {
    /**
     * Popover will be placed automatically at the reference control.
     */
    Auto = "Auto",
    /**
     * Popover will be placed at the bottom of the reference control.
     */
    Bottom = "Bottom",
    /**
     * Popover will be placed at the right or left side of the reference control.
     */
    Horizontal = "Horizontal",
    /**
     * @SINCE 1.29
     * @deprecated (since 1.36) - Instead, use `sap.m.PlacementType.HorizontalPreferredLeft` type.
     *
     * Deprecated - use `sap.m.PlacementType.HorizontalPreferredLeft` type.
     */
    HorizontalPreferedLeft = "HorizontalPreferedLeft",
    /**
     * @SINCE 1.29
     * @deprecated (since 1.36) - Instead, use `sap.m.PlacementType.HorizontalPreferredRight` type.
     *
     * Deprecated - use `sap.m.PlacementType.HorizontalPreferredRight` type.
     */
    HorizontalPreferedRight = "HorizontalPreferedRight",
    /**
     * @SINCE 1.36
     *
     * Popover will be placed at the right or left side of the reference control but will try to position on
     * the left side if the space is greater than the Popover's width.
     */
    HorizontalPreferredLeft = "HorizontalPreferredLeft",
    /**
     * @SINCE 1.36
     *
     * Popover will be placed at the right or left side of the reference control but will try to position on
     * the right side if the space is greater than the Popover's width.
     */
    HorizontalPreferredRight = "HorizontalPreferredRight",
    /**
     * Popover will be placed at the left side of the reference control.
     */
    Left = "Left",
    /**
     * @SINCE 1.38
     *
     * Popover will be placed to the bottom of the reference control. If the available space is less than the
     * Popover's height, it will appear to the top of the same reference control bottom border.
     */
    PreferredBottomOrFlip = "PreferredBottomOrFlip",
    /**
     * @SINCE 1.38
     *
     * Popover will be placed to the left of the reference control. If the available space is less than the
     * Popover's width, it will appear to the right of the same reference control left border.
     */
    PreferredLeftOrFlip = "PreferredLeftOrFlip",
    /**
     * @SINCE 1.38
     *
     * Popover will be placed to the right of the reference control. If the available space is less than the
     * Popover's width, it will appear to the left of the same reference control right border.
     */
    PreferredRightOrFlip = "PreferredRightOrFlip",
    /**
     * @SINCE 1.38
     *
     * Popover will be placed to the top of the reference control. If the available space is less than the Popover's
     * height, it will appear to the bottom of the same reference control top border.
     */
    PreferredTopOrFlip = "PreferredTopOrFlip",
    /**
     * Popover will be placed at the right side of the reference control.
     */
    Right = "Right",
    /**
     * Popover will be placed at the top of the reference control.
     */
    Top = "Top",
    /**
     * Popover will be placed at the top or bottom of the reference control.
     */
    Vertical = "Vertical",
    /**
     * @SINCE 1.29
     * @deprecated (since 1.36) - Instead, use `sap.m.PlacementType.VerticalPreferredBottom` type.
     *
     * Deprecated - use `sap.m.PlacementType.VerticalPreferredBottom` type.
     */
    VerticalPreferedBottom = "VerticalPreferedBottom",
    /**
     * @SINCE 1.29
     * @deprecated (since 1.36) - Instead, use `sap.m.PlacementType.VerticalPreferredTop` type.
     *
     * Deprecated - use `sap.m.PlacementType.VerticalPreferredTop` type.
     */
    VerticalPreferedTop = "VerticalPreferedTop",
    /**
     * @SINCE 1.36
     *
     * Popover will be placed at the top or bottom of the reference control but will try to position on the
     * bottom side if the space is greater than the Popover's height.
     */
    VerticalPreferredBottom = "VerticalPreferredBottom",
    /**
     * @SINCE 1.36
     *
     * Popover will be placed at the top or bottom of the reference control but will try to position on the
     * top side if the space is greater than the Popover's height.
     */
    VerticalPreferredTop = "VerticalPreferredTop",
  }
  /**
   * @SINCE 1.50
   *
   * A list of the default built-in views in a {@link sap.m.PlanningCalendar}, described by their keys.
   */
  export enum PlanningCalendarBuiltInView {
    /**
     * Represents the key of the built-in view, in which the intervals have the size of one day.
     */
    Day = "Day",
    /**
     * Represents the key of the built-in view, in which the intervals have the size of one hour.
     */
    Hour = "Hour",
    /**
     * Represents the key of the built-in view, in which the intervals have the size of one month.
     */
    Month = "Month",
    /**
     * Represents the key of the built-in view, in which the intervals have the size of one day where 31 days
     * are displayed, starting with the first day of the month.
     */
    OneMonth = "One Month",
    /**
     * Represents the key of the built-in view, in which the intervals have the size of one day where 7 days
     * are displayed, starting with the first day of the week.
     */
    Week = "Week",
  }
  /**
   * @SINCE 1.62
   *
   * Available sticky modes for the {@link sap.m.SinglePlanningCalendar}
   */
  export enum PlanningCalendarStickyMode {
    /**
     * Actions toolbar, navigation toolbar and the column headers will be sticky.
     */
    All = "All",
    /**
     * Only the navigation toolbar and column headers will be sticky.
     */
    NavBarAndColHeaders = "NavBarAndColHeaders",
    /**
     * Nothing will stick at the top.
     */
    None = "None",
  }
  /**
   * @SINCE 1.13.2
   *
   * Defines the display of table pop-ins.
   */
  export enum PopinDisplay {
    /**
     * Inside the table popin, header is displayed at the first line and cell content is displayed at the next
     * line.
     */
    Block = "Block",
    /**
     * Inside the table popin, cell content is displayed next to the header in the same line. **Note:** If there
     * is not enough space for the cell content then it jumps to the next line.
     */
    Inline = "Inline",
    /**
     * @SINCE 1.28
     *
     * Inside the table popin, only the cell content will be visible.
     */
    WithoutHeader = "WithoutHeader",
  }
  /**
   * @SINCE 1.52
   *
   * Defines the layout options of the table popins.
   */
  export enum PopinLayout {
    /**
     * @SINCE 1.52
     *
     * Sets block layout for rendering the table popins. The elements inside the popin container are rendered
     * one below the other. **Note:** This option enables the former rendering behavior of the table popins.
     */
    Block = "Block",
    /**
     * @SINCE 1.52
     *
     * Sets grid layout for rendering the table popins. The grid width for each table popin is comparatively
     * larger than `GridSmall`, hence this allows less content to be rendered in a single popin row.
     *
     * **Note:** This feature is currently not supported with Internet Explorer and Edge (version lower than
     * 16) browsers.
     */
    GridLarge = "GridLarge",
    /**
     * @SINCE 1.52
     *
     * Sets grid layout for rendering the table popins. The grid width for each table popin is small, hence
     * this allows more content to be rendered in a single popin row. This value defines small grid width for
     * the table popins.
     *
     * **Note:** This feature is currently not supported with Internet Explorer and Edge (version lower than
     * 16) browsers.
     */
    GridSmall = "GridSmall",
  }

  /**
   * QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to
   * this label.
   */
  export enum QuickViewGroupElementType {
    /**
     * Displays an e-mail link
     */
    email = "email",
    /**
     * Displays a regular HTML link
     */
    link = "link",
    /**
     * Displays a phone number link for direct dialing and an icon for sending a text message
     */
    mobile = "mobile",
    /**
     * Displays a link for navigating to another QuickViewPage
     */
    pageLink = "pageLink",
    /**
     * Displays a phone number link for direct dialing
     */
    phone = "phone",
    /**
     * Displays text
     */
    text = "text",
  }
  /**
   * Possible values for the visualization of float values in the RatingIndicator control.
   */
  export enum RatingIndicatorVisualMode {
    /**
     * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
     */
    Full = "Full",
    /**
     * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
     */
    Half = "Half",
  }
  /**
   * Enumeration of the `ResetAllMode>/code> that can be used in a TablePersoController`.
   */
  export enum ResetAllMode {
    /**
     * Default behavior of the `TablePersoDialog` Reset All button.
     */
    Default = "Default",
    /**
     * Resets the table to the default of the attached `PersoService`.
     */
    ServiceDefault = "ServiceDefault",
    /**
     * Resets the table to the result of `getResetPersData` of the attached `PersoService`.
     */
    ServiceReset = "ServiceReset",
  }
  /**
   * Breakpoint names for different screen sizes.
   */
  export enum ScreenSize {
    /**
     * 1024px wide
     */
    Desktop = "Desktop",
    /**
     * 768px wide
     */
    Large = "Large",
    /**
     * 560px wide
     */
    Medium = "Medium",
    /**
     * 240px wide
     */
    Phone = "Phone",
    /**
     * 480px wide
     */
    Small = "Small",
    /**
     * 600px wide
     */
    Tablet = "Tablet",
    /**
     * 960px wide
     */
    XLarge = "XLarge",
    /**
     * 320px wide
     */
    XSmall = "XSmall",
    /**
     * 1120px wide
     */
    XXLarge = "XXLarge",
    /**
     * 240px wide
     */
    XXSmall = "XXSmall",
  }
  /**
   * @SINCE 1.86
   *
   * A string type that represents column ratio.
   *
   * Allowed values are strings that follow the number:number (3:2) format.
   */
  export type SelectColumnRatio = string;

  /**
   * @SINCE 1.48
   *
   * Enumeration for different action levels in sap.m.SelectionDetails control.
   */
  export enum SelectionDetailsActionLevel {
    /**
     * ActionGroup on SelectionDetails list level.
     */
    Group = "Group",
    /**
     * Action on SelectionDetailsItem level.
     */
    Item = "Item",
    /**
     * Action on SelectionDetails list level.
     */
    List = "List",
  }
  /**
   * @SINCE 1.38
   *
   * Defines the keyboard navigation mode.
   */
  export enum SelectListKeyboardNavigationMode {
    /**
     * Keyboard navigation is delimited at the last item or first item of the list.
     */
    Delimited = "Delimited",
    /**
     * Keyboard navigation is disabled.
     */
    None = "None",
  }
  /**
   * @SINCE 1.16
   *
   * Enumeration for different Select types.
   */
  export enum SelectType {
    /**
     * Will show the text.
     */
    Default = "Default",
    /**
     * Will show only the specified icon.
     */
    IconOnly = "IconOnly",
  }
  /**
   * @SINCE 1.34.0
   *
   * Enumeration of possible size settings.
   */
  export enum Size {
    /**
     * The size depends on the device it is running on. It is medium size for desktop and tablet and small size
     * for phone.
     */
    Auto = "Auto",
    /**
     * Large size.
     */
    L = "L",
    /**
     * Medium size.
     */
    M = "M",
    /**
     * @SINCE 1.44.0
     *
     * The width and height of the control are determined by the width and height of the container the control
     * is placed in. Please note: it is decided by the control whether or not sap.m.Size.Responsive is supported.
     */
    Responsive = "Responsive",
    /**
     * Small size.
     */
    S = "S",
    /**
     * Extra small size.
     */
    XS = "XS",
  }
  /**
   * The mode of SplitContainer or SplitApp control to show/hide the master area.
   */
  export enum SplitAppMode {
    /**
     * Master area is hidden initially both in portrait and landscape.
     *
     * Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled
     * on mobile devices. Master will keep the open state when changing the orientation of the device.
     */
    HideMode = "HideMode",
    /**
     * Master will be shown inside a Popover when in portrait mode
     */
    PopoverMode = "PopoverMode",
    /**
     * Master will automatically be hidden in portrait mode.
     */
    ShowHideMode = "ShowHideMode",
    /**
     * Master will always be shown but in a compressed version when in portrait mode.
     */
    StretchCompressMode = "StretchCompressMode",
  }
  /**
   * Types for StandardTile.
   */
  export enum StandardTileType {
    /**
     * Tile representing that something needs to be created
     */
    Create = "Create",
    /**
     * Monitor tile
     */
    Monitor = "Monitor",
    /**
     * Default type
     */
    None = "None",
  }
  /**
   * @SINCE 1.54
   *
   * Available step modes for {@link sap.m.StepInput}.
   */
  export enum StepInputStepModeType {
    /**
     * Choosing increase/decrease button will add/subtract the `step` value to/from the current value. For example,
     * if `step` is 5, current `value` is 17 and increase button is chosen, the result will be 22 (5+17).
     *
     * **Note:** Using keyboard PageUp/PageDown will add/subtract the `step` multiplied by the `largerStep`
     * values to/from the current `value`. For example, if `step` is 5, `largerStep` is 3, current `value` is
     * 17 and PageUp is chosen, the result would be 32 (5*3+17).
     *
     * For more information, see {@link sap.m.StepInput}'s `step`, `largerStep` and `stepMode` properties.
     */
    AdditionAndSubtraction = "AdditionAndSubtraction",
    /**
     * Pressing increase/decrease button will increase/decrease the current `value` to the closest number that
     * is divisible by the `step`.
     *
     * For example, if `step` is 5, current `value` is 17 and increase button is chosen, the result will be
     * 20 as it is the closest larger number that is divisible by 5.
     *
     * **Note:** Using keyboard PageUp/PageDown will increase/decrease the current `value` to the closest number
     * that is divisible by the multiplication of the `step` and the `largerStep` values. For example, if `step`
     * is 5, `largerStep` is 3, current `value` is 17 and PageUp is chosen, the result would be 30 as it is
     * the closest larger number that is divisible by 15.
     *
     * The logic above will work only if both `step` and `largerStep` are integers.
     *
     * For more information, see {@link sap.m.StepInput}'s `step`, `largerStep` and `stepMode` properties.
     */
    Multiple = "Multiple",
  }
  /**
   * Available validation modes for {@link sap.m.StepInput}.
   */
  export enum StepInputValidationMode {
    /**
     * Validation happens on `FocusOut`.
     */
    FocusOut = "FocusOut",
    /**
     * Validation happens on `LiveChange`.
     */
    LiveChange = "LiveChange",
  }
  /**
   * @SINCE 1.54
   *
   * Defines which area of the control remains fixed at the top of the page during vertical scrolling as long
   * as the control is in the viewport.
   */
  export enum Sticky {
    /**
     * The column headers remain in a fixed position.
     */
    ColumnHeaders = "ColumnHeaders",
    /**
     * @SINCE 1.56
     *
     * The header toolbar remains in a fixed position.
     */
    HeaderToolbar = "HeaderToolbar",
    /**
     * @SINCE 1.56
     *
     * The info toolbar remains in a fixed position.
     */
    InfoToolbar = "InfoToolbar",
  }
  /**
   * @SINCE 1.42
   *
   * Types of string filter operators.
   */
  export enum StringFilterOperator {
    /**
     * Checks if any word in the text starts with the search string.
     */
    AnyWordStartsWith = "AnyWordStartsWith",
    /**
     * Checks if the text contains the search string.
     */
    Contains = "Contains",
    /**
     * Checks if the text is equal with the search string.
     */
    Equals = "Equals",
    /**
     * Checks if the text starts with the search string.
     */
    StartsWith = "StartsWith",
  }
  /**
   * Directions for swipe event.
   */
  export enum SwipeDirection {
    /**
     * @SINCE 1.72
     *
     * Swipe from the beginning to the end - left to right in LTR languages and right to left in RTL languages.
     */
    BeginToEnd = "BeginToEnd",
    /**
     * Both directions (left to right or right to left)
     */
    Both = "Both",
    /**
     * @SINCE 1.72
     *
     * Swipe from the end to the beginning - right to left in LTR languages and left to right in RTL languages.
     */
    EndToBegin = "EndToBegin",
    /**
     * @deprecated (since 1.72) - replaced by {@link BeginToEnd}
     *
     * Swipe from left to right
     */
    LeftToRight = "LeftToRight",
    /**
     * @deprecated (since 1.72) - replaced by {@link EndToBegin}
     *
     * Swipe from right to left.
     */
    RightToLeft = "RightToLeft",
  }
  /**
   * Enumeration for different switch types.
   */
  export enum SwitchType {
    /**
     * Switch with accept and reject icons
     */
    AcceptReject = "AcceptReject",
    /**
     * Will show "ON" and "OFF" translated to the current language or the custom text if provided
     */
    Default = "Default",
  }
  /**
   * @SINCE 1.90.0
   *
   * Specifies `IconTabBar` tab overflow mode.
   */
  export enum TabsOverflowMode {
    /**
     * Default behavior: One overflow tab at the end of the header.
     */
    End = "End",
    /**
     * Two overflow tabs at both ends of the header to keep tabs order intact.
     */
    StartAndEnd = "StartAndEnd",
  }
  /**
   * @SINCE 1.56.0
   *
   * Describes the behavior of tiles when displayed on a small-screened phone (374px wide and lower).
   */
  export enum TileSizeBehavior {
    /**
     * Default behavior: Tiles adapt to the size of the screen, getting smaller on small screens.
     */
    Responsive = "Responsive",
    /**
     * Tiles are small all the time, regardless of the actual screen size.
     */
    Small = "Small",
  }
  /**
   * @SINCE 1.54
   *
   * Different modes for the `sap.m.TimePicker` mask.
   */
  export enum TimePickerMaskMode {
    /**
     * `MaskInput` is disabled for the `sap.m.TimePicker`.
     */
    Off = "Off",
    /**
     * `MaskInput` is enabled for the `sap.m.TimePicker`.
     */
    On = "On",
  }
  /**
   * Declares the type of title alignment for some controls
   */
  export enum TitleAlignment {
    /**
     * The default type (if specified in the theme)
     */
    Auto = "Auto",
    /**
     * Explicitly sets the alignment to the start (left or right depending on LTR/RTL)
     */
    Center = "Center",
    /**
     * Disables an automatic title alignment depending on theme Mostly used in sap.m.Bar
     */
    None = "None",
    /**
     * Explicitly sets the alignment to the start (left or right depending on LTR/RTL)
     */
    Start = "Start",
  }
  /**
   * @SINCE 1.80
   *
   * Types of the `sap.m.Tokenizer` responsive modes.
   */
  export enum TokenizerRenderMode {
    /**
     * In `Loose` mode, the `sap.m.Tokenizer` will show all its tokens, even if this means that scrolling needs
     * to be used.
     */
    Loose = "Loose",
    /**
     * In `Narrow` mode, the `sap.m.Tokenizer` will show as many tokens as its width allows, as well as an n-More
     * indicator with the count of the hidden tokens. The rest tokens will be hidden.
     */
    Narrow = "Narrow",
  }
  /**
   * @SINCE 1.16.8
   *
   * Types of the Toolbar Design.
   *
   * To preview the different combinations of `sap.m.ToolbarDesign` and `sap.m.ToolbarStyle`, see the **OverflowToolbar
   * - Design and styling** sample of the {@link sap.m.OverflowToolbar} control.
   */
  export enum ToolbarDesign {
    /**
     * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design
     * from parent control.
     */
    Auto = "Auto",
    /**
     * The toolbar appears smaller than the regular size to show information(e.g: text, icon).
     */
    Info = "Info",
    /**
     * @SINCE 1.22
     *
     * The toolbar has a solid background. Its content will be rendered in a standard way.
     */
    Solid = "Solid",
    /**
     * The toolbar and its content will be displayed transparent.
     */
    Transparent = "Transparent",
  }
  /**
   * @SINCE 1.54
   *
   * Types of visual styles for the {@link sap.m.Toolbar}.
   *
   * **Note:** Keep in mind that the styles are theme-dependent and can differ based on the currently used
   * theme.
   *
   * To preview the different combinations of `sap.m.ToolbarDesign` and `sap.m.ToolbarStyle`, see the **OverflowToolbar
   * - Design and styling** sample of the {@link sap.m.OverflowToolbar} control.
   */
  export enum ToolbarStyle {
    /**
     * Simplified visual style dependent on the used theme.
     *
     * **Note:** For the Belize themes, the `sap.m.Toolbar` is displayed with no border.
     */
    Clear = "Clear",
    /**
     * Default visual style dependent on the used theme.
     */
    Standard = "Standard",
  }

  /**
   * States of the upload process of {@link sap.m.UploadCollectionItem}.
   */
  export enum UploadState {
    /**
     * The file has been uploaded successfully.
     */
    Complete = "Complete",
    /**
     * The file cannot be uploaded due to an error.
     */
    Error = "Error",
    /**
     * The file is awaiting an explicit command to start being uploaded.
     */
    Ready = "Ready",
    /**
     * The file is currently being uploaded.
     */
    Uploading = "Uploading",
  }
  /**
   * @SINCE 1.10
   *
   * URL (Uniform Resource Locator) Helper.
   *
   * This helper can be used to trigger a native application (e.g. email, sms, phone) from the browser. That
   * means we are restricted of browser or application implementation. e.g.
   * 	 - Some browsers do not let you pass more than 2022 characters in the URL
   * 	 - MAPI (Outlook) limit is 2083, max. path under Internet Explorer is 2048
   * 	 - Different Internet Explorer versions have a different URL length limits (IE9 approximately 1000 characters)
   *
   * 	 - MS mail app under Windows 8 cuts mail links after approximately 100 characters
   * 	 - Safari gets a confirmation from user before opening a native application and can block other triggers
   * 			if the user cancels it
   * 	 - Some mail applications(Outlook) do not respect all encodings (e.g. Cyrillic texts are not encoded
   * 			correctly)
   *
   * **Note:** all the given maximum lengths are for URL encoded text (e.g a space character will be encoded
   * as "%20").
   *
   * It has been reported by some users that the content send through the `URLHelper` is not correctly displayed
   * by the native applications (e.g. a native mail application).
   *
   * After sending the body to the application, `URLHelper` cannot affect its rendering and the application
   * takes responsibility to correctly display the content. Inconsistencies between different native applications
   * or operative systems (OS) can lead to different behaviors and differences in the displayed content.
   *
   * **Example:**
   *
   * What happens with a link added to the content of an email using the `URLHelper` ?
   *
   * Apart from the correct generation of URL, everything else is outside of the scope of `URLHelper` as responsibility
   * from then on is passed to the browser and the native applications handling the URL. For instance, clicking
   * on an email link should result in triggering an action in the default mail application for the user's
   * OS and it is this application's responsibility to correctly handle the URL, given it is generated correctly.
   * See:
   * 	{@link topic:4f1c1075d88c41a5904389fa12b28f6b URL Helper}
   */
  export interface URLHelper {
    /**
     * Adds an event listener for the `redirect` event.
     */
    attachRedirect(
      /**
       * The function to call, when the event occurs.
       */
      fnFunction: Function,
      /**
       * The object that wants to be notified when the event occurs.
       */
      oListener?: Object
    ): URLHelper;
    /**
     * Detach an already registered listener of the `redirect` event.
     */
    detachRedirect(
      /**
       * The function to call, when the event occurs.
       */
      fnFunction: Function,
      /**
       * The object, that wants to be notified, when the event occurs.
       */
      oListener?: Object
    ): URLHelper;
    /**
     * Builds Email URI from given parameter. Trims spaces from email addresses.
     */
    normalizeEmail(
      /**
       * Destination email address
       */
      sEmail?: string,
      /**
       * Subject of the email address
       */
      sSubject?: string,
      /**
       * Default message text
       */
      sBody?: string,
      /**
       * Carbon Copy email address
       */
      sCC?: string,
      /**
       * Blind carbon copy email address
       */
      sBCC?: string
    ): string;
    /**
     * Sanitizes the given telephone number and returns a URI using the `sms:` scheme.
     */
    normalizeSms(
      /**
       * Telephone number
       */
      sTel?: string
    ): string;
    /**
     * Sanitizes the given telephone number and returns a URI using the `tel:` scheme.
     */
    normalizeTel(
      /**
       * Telephone number
       */
      sTel?: string
    ): string;
    /**
     * Redirects to the given URL.
     *
     * This method fires "redirect" event before opening the URL.
     */
    redirect(
      /**
       * Uniform resource locator
       */
      sURL: string,
      /**
       * Opens URL in a new browser window or tab. Please note that, opening a new window/tab can be ignored by
       * browsers (e.g. on Windows Phone) or by popup blockers. NOTE: On Windows Phone the URL will be enforced
       * to open in the same window if opening in a new window/tab fails (because of a known system restriction
       * on cross-window communications). Use sap.m.Link instead (with blank target) if you necessarily need to
       * open URL in a new window.
       */
      bNewWindow?: boolean
    ): void;
    /**
     * Trigger email application to send email. Trims spaces from email addresses.
     */
    triggerEmail(
      /**
       * Destination email address
       */
      sEmail?: string,
      /**
       * Subject of the email address
       */
      sSubject?: string,
      /**
       * Default message text
       */
      sBody?: string,
      /**
       * Carbon Copy email address
       */
      sCC?: string,
      /**
       * Blind carbon copy email address
       */
      sBCC?: string,
      /**
       * Opens email template in a new browser window or tab.
       */
      bNewWindow?: boolean
    ): void;
    /**
     * Trigger SMS application to send SMS to given telephone number.
     */
    triggerSms(
      /**
       * Telephone number
       */
      sTel?: string
    ): void;
    /**
     * Trigger telephone app to call the given telephone number.
     */
    triggerTel(
      /**
       * Telephone number
       */
      sTel?: string
    ): void;
  }
  export const URLHelper: URLHelper;

  /**
   * Enumeration of possible value color settings.
   */
  export enum ValueColor {
    /**
     * Critical value color.
     */
    Critical = "Critical",
    /**
     * Error value color.
     */
    Error = "Error",
    /**
     * Good value color.
     */
    Good = "Good",
    /**
     * Neutral value color.
     */
    Neutral = "Neutral",
    /**
     * @SINCE 1.84
     *
     * None value color.
     *
     * **Note:** The None value color is set to prevent the display of tooltip 'Neutral' for numeric content.
     */
    None = "None",
  }
  /**
   * A string type that represents CSS color values, sap.m.ValueColor or less parameter values.
   *
   * Allowed values are {@link sap.ui.core.CSSColor}, {@link sap.m.ValueColor} or a less parameter name (string).
   * In case the less parameter color cannot be determined, the validation fails. You need to check if less
   * parameters are supported on control level. An empty string is also allowed and has the same effect as
   * setting no color.
   */
  export type ValueCSSColor = string;

  /**
   * Types for the placement of message Popover control.
   */
  export enum VerticalPlacementType {
    /**
     * Popover will be placed at the bottom of the reference control.
     */
    Bottom = "Bottom",
    /**
     * Popover will be placed at the top of the reference control.
     */
    Top = "Top",
    /**
     * Popover will be placed at the top or bottom of the reference control.
     */
    Vertical = "Vertical",
  }
  /**
   * @EXPERIMENTAL (since 1.83)
   *
   * Wizard rendering mode.
   */
  export enum WizardRenderMode {
    /**
     * Display steps as separate, single pages.
     */
    Page = "Page",
    /**
     * Display all steps into a scroll section.
     */
    Scroll = "Scroll",
  }
  /**
   * @SINCE 1.60
   *
   * Available wrapping types for text controls that can be wrapped that enable you to display the text as
   * hyphenated.
   *
   * For more information about text hyphenation, see {@link sap.ui.core.hyphenation.Hyphenation} and {@link
   * topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.
   */
  export enum WrappingType {
    /**
     * Hyphenation will be used to break words on syllables where possible.
     */
    Hyphenated = "Hyphenated",
    /**
     * Normal text wrapping will be used. Words won't break based on hyphenation.
     */
    Normal = "Normal",
  }

  export namespace BackgroundHelper {
    /**
     * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background
     * color and background image. To be called by control renderers supporting the global themable background
     * image within their root tag, before they call openEnd, voidEnd, writeClasses() and writeStyles().
     */
    function addBackgroundColorStyles(
      /**
       * The RenderManager
       */
      rm: RenderManager,
      /**
       * A configured custom background color for the control, if any
       */
      sBgColor?: CSSColor,
      /**
       * The configured custom background image for the control, if any
       */
      sBgImgUrl?: URI
    ): void;
    /**
     * Renders an HTML tag into the given RenderManager which carries the background image which is either configured
     * and given or coming from the current theme. Should be called right after the opening root tag has been
     * completed, so this is the first child element inside the control.
     */
    function renderBackgroundImageTag(
      /**
       * The RenderManager
       */
      rm: RenderManager,
      /**
       * Control within which the tag will be rendered; its ID will be used to generate the element ID
       */
      oControl: Control,
      /**
       * A CSS class or an array of CSS classes to add to the element
       */
      vCssClass: string | string[],
      /**
       * The image of a configured background image; if this is not given, the theme background will be used and
       * also the other settings are ignored.
       */
      sBgImgUrl?: URI,
      /**
       * Whether the background image should be repeated/tiled (or stretched)
       */
      bRepeat?: boolean,
      /**
       * The background image opacity, if any
       */
      fOpacity?: float
    ): void;
  }

  export namespace ImageHelper {
    /**
     * Creates or updates an image control.
     */
    function getImageControl(
      /**
       * UD of the image to be dealt with.
       */
      sImgId: string,
      /**
       * The image to update. If undefined, a new image will be created.
       */
      oImageControl: Image,
      /**
       * oImageControl's parentControl.
       */
      oParent: Control,
      /**
       * Settings for the image control; the `src` property MUST be contained; the keys of the object must be
       * valid names of image settings
       */
      mProperties: object,
      /**
       * Array of CSS classes which will be added if the image needs to be created.
       */
      aCssClassesToAdd: string[],
      /**
       * All CSS classes that oImageControl has and which are contained in this array are removed before adding
       * the CSS classes listed in aCssClassesToAdd.
       */
      aCssClassesToRemove: string[]
    ): Image | Icon;
  }

  export namespace InputODataSuggestProvider {
    /**/
    function suggest(
      oEvent: Event,
      /**
       * SuggestProvider resolves all input parameters for the data query
       */
      bResolveInput: boolean,
      /**
       * SuggestProvider writes back all output parameters.
       */
      bResolveOutput: boolean,
      /**
       * If iLength is provided only these number of entries will be requested.
       */
      iLength: int
    ): void;
  }

  export namespace PopupHelper {
    /**
     * Converts the given percentage value to an absolute number based on the given base size.
     */
    function calcPercentageSize(
      /**
       * A percentage value in string format, for example "25%"
       */
      sPercentage: string,
      /**
       * A float number which the calculation is based on.
       */
      fBaseSize: float
    ): int;
  }

  export namespace semantic {
    /**
     * Marker interface for controls which are suitable as items of the filter aggregation of sap.m.Semantic.MasterPage.
     */
    interface IFilter {
      __implements__sap_m_semantic_IFilter: boolean;
    }

    /**
     * Marker interface for controls which are suitable as items of the group aggregation of sap.m.Semantic.MasterPage.
     */
    interface IGroup {
      __implements__sap_m_semantic_IGroup: boolean;
    }

    /**
     * Marker interface for controls which are suitable as items of the sort aggregation of sap.m.Semantic.MasterPage.
     */
    interface ISort {
      __implements__sap_m_semantic_ISort: boolean;
    }

    /**
     * @SINCE 1.44
     *
     * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
     */
    enum SemanticRuleSetType {
      /**
       * The default ruleset type, for which the Share Menu is always in the footer of the page.
       */
      Classic = "Classic",
      /**
       * Offers an optimized user experience, with displaying the Share Menu in the header, rather than the footer,
       * for Fullscreen mode.
       */
      Optimized = "Optimized",
    }
  }

  export namespace touch {
    /**
     * Given a list of touches, count the number of touches related with the given element.
     */
    function countContained(
      /**
       * The list of touch objects to search.
       */
      oTouchList: TouchList,
      /**
       * A jQuery element or an element reference or an element id.
       */
      vElement: jQuery | Element | string
    ): number;
    /**
     * Given a list of touch objects, find the touch that matches the given one.
     */
    function find(
      /**
       * The list of touch objects to search.
       */
      oTouchList: TouchList,
      /**
       * A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch
       * session.
       */
      oTouch: Touch | number
    ): object | undefined;
  }
}

declare module "sap/m/ActionListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ListMode } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * The `sap.m.ActionListItem` can be used like a `button` to fire actions when pressed. **Note:** The inherited
   * `selected` property of the `sap.m.ListItemBase` is not supported.
   */
  export default class ActionListItem extends ListItemBase {
    /**
     * Constructor for a new ActionListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/action-list-item/ Action List Item}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ActionListItemSettings
    );
    /**
     * Constructor for a new ActionListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/action-list-item/ Action List Item}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ActionListItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.ActionListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ActionListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.ActionListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Determines item specific mode.
     *
     * ActionListItems are not selectable because they are command controls (like Button or Link), so triggering
     * the associated command, rather than selection is appropriate to happen upon user action on these items.
     *
     * By overwriting `getMode` (inherited from `ListItemBase`), we exclude the item from processing steps that
     * are specific for selectable list-items.
     */
    getMode(): (ListMode | keyof typeof ListMode) | "";
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text that appears in the control.
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text that appears in the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $ActionListItemSettings extends $ListItemBaseSettings {
    /**
     * Defines the text that appears in the control.
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/ActionSelect" {
  import { default as Select, $SelectSettings } from "sap/m/Select";

  import { ID } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.16
   *
   * The ActionSelect control provides a list of predefined items that allows end users to choose options
   * and additionally trigger some actions.
   */
  export default class ActionSelect extends Select {
    /**
     * Constructor for a new ActionSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ActionSelectSettings
    );
    /**
     * Constructor for a new ActionSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ActionSelectSettings
    );

    /**
     * Adds some button into the association {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The buttons to add; if empty, nothing is inserted
       */
      vButton: ID | Button
    ): this;
    /**
     * Creates a new subclass of class sap.m.ActionSelect with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Select.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ActionSelect>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getButtons
     * buttons}.
     */
    getButtons(): ID[];
    /**
     * Returns a metadata object for class sap.m.ActionSelect.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Remove all buttons from the ActionSelect.
     */
    removeAllButtons(): string[];
    /**
     * Button to be removed from the ActionSelect content.
     */
    removeButton(
      /**
       * The button to remove or its index or id.
       */
      vButton: int | string | Button
    ): string;
  }

  export interface $ActionSelectSettings extends $SelectSettings {
    /**
     * Buttons to be added to the ActionSelect content.
     */
    buttons?: Array<Button | string>;
  }
}

declare module "sap/m/ActionSheet" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PlacementType } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.9.1
   *
   * The action sheet holds a list of options from which the user can select to complete an action. Overview:
   * The options of the action sheet are represented as {@link sap.m.Button buttons} with icons. Elements
   * in the action sheet are left-aligned. Actions should be arranged in order of importance, from top to
   * bottom. Guidelines:
   * 	 - Always display text or text and icons for the actions. Do not use icons only.
   * 	 - Always provide a Cancel button on mobile phones.
   * 	 - Avoid scrolling on action sheets.  Responsive Behavior: On mobile phones the action sheet is
   * 			displayed in a {@link sap.m.Dialog dialog}.
   *
   * On tablets and desktop the action sheet is displayed in a {@link sap.m.Popover popover}.
   *
   * When an action is triggered, the action sheet closes and you can display a confirmation as a {@link sap.m.MessageToast
   * message toast}.
   */
  export default class ActionSheet extends Control {
    /**
     * Constructor for a new ActionSheet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/action-sheet/ Action Sheet}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ActionSheetSettings
    );
    /**
     * Constructor for a new ActionSheet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/action-sheet/ Action Sheet}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ActionSheetSettings
    );

    /**
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: Button
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired after the ActionSheet is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired after the ActionSheet is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired before the ActionSheet is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired before the ActionSheet is opened.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancelButtonPress cancelButtonPress} event of
     * this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event is fired when the cancelButton is clicked.
     *
     * **Note: ** For any device other than phones, this event would be fired always when the Popover closes.
     * To prevent this behavior, the `showCancelButton` property needs to be set to `false`.
     */
    attachCancelButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - This event is deprecated, use the cancelButtonPress event instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:cancelButtonTap cancelButtonTap} event of this
     * `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton
     * is set to true, and Popover is closed by tapping outside.
     */
    attachCancelButtonTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Calling this method will make the ActionSheet disappear from the screen.
     */
    close(): void;
    /**
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancelButtonPress cancelButtonPress} event
     * of this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancelButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - This event is deprecated, use the cancelButtonPress event instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:cancelButtonTap cancelButtonTap} event of
     * this `sap.m.ActionSheet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancelButtonTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ActionSheet with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ActionSheet>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This indicates the trigger of closing the control. If dialog is closed by either selection or closeButton
         * (on mobile device), the button that closes the dialog is set to this parameter. Otherwise this parameter
         * is set to null.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton,
         * the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
         * This is valid only for Phone mode of the ActionSheet
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:cancelButtonPress cancelButtonPress} to attached listeners.
     */
    fireCancelButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - This event is deprecated, use the cancelButtonPress event instead.
     *
     * Fires event {@link #event:cancelButtonTap cancelButtonTap} to attached listeners.
     */
    fireCancelButtonTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet
     * is closed before the tap event listener is called.
     */
    getButtons(): Button[];
    /**
     * Gets current value of property {@link #getCancelButtonText cancelButtonText}.
     *
     * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according
     * to the current locale setting. This property will be ignored when running either in iPad or showCancelButton
     * is set to false.
     */
    getCancelButtonText(): string;
    /**
     * Returns a metadata object for class sap.m.ActionSheet.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which
     * side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right,
     * sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft,
     * sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop,
     * sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
     *
     * Default value is `Bottom`.
     */
    getPlacement(): PlacementType | keyof typeof PlacementType;
    /**
     * Gets the ID of the hidden label
     */
    getPopupHiddenLabelId(): string;
    /**
     * Gets current value of property {@link #getShowCancelButton showCancelButton}.
     *
     * If this is set to true, there will be a cancel button shown below the action buttons. There won't be
     * any cancel button shown in iPad regardless of this property. The default value is set to true.
     *
     * Default value is `true`.
     */
    getShowCancelButton(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored
     * in tablets and desktop browser.
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getButtons buttons}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: Button
    ): int;
    /**
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: Button,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open
     * (this includes opening and closing animations), otherwise it returns false.
     */
    isOpen(): boolean;
    /**
     * Calling this method will make the ActionSheet visible on the screen. The control parameter is the object
     * to which the ActionSheet will be placed. It can be not only a UI5 control, but also an existing DOM reference.
     * The side of the placement depends on the `placement` property set in the Popover (on tablet and desktop).
     * On other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog
     * is aligned to the screen.
     */
    openBy(
      /**
       * The control to which the ActionSheet is opened
       */
      oControl: object
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): Button[];
    /**
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | Button
    ): Button;
    /**
     * Sets a new value for property {@link #getCancelButtonText cancelButtonText}.
     *
     * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according
     * to the current locale setting. This property will be ignored when running either in iPad or showCancelButton
     * is set to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCancelButtonText(
      /**
       * New value for property `cancelButtonText`
       */
      sCancelButtonText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlacement placement}.
     *
     * The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which
     * side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right,
     * sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft,
     * sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop,
     * sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Bottom`.
     */
    setPlacement(
      /**
       * New value for property `placement`
       */
      sPlacement?: PlacementType | keyof typeof PlacementType
    ): this;
    /**
     * Sets a new value for property {@link #getShowCancelButton showCancelButton}.
     *
     * If this is set to true, there will be a cancel button shown below the action buttons. There won't be
     * any cancel button shown in iPad regardless of this property. The default value is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowCancelButton(
      /**
       * New value for property `showCancelButton`
       */
      bShowCancelButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored
     * in tablets and desktop browser.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired after the ActionSheet is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired after the ActionSheet is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired before the ActionSheet is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event will be fired before the ActionSheet is opened.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancelButtonPress cancelButtonPress} event of
     * this `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event is fired when the cancelButton is clicked.
     *
     * **Note: ** For any device other than phones, this event would be fired always when the Popover closes.
     * To prevent this behavior, the `showCancelButton` property needs to be set to `false`.
     */
    attachCancelButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - This event is deprecated, use the cancelButtonPress event instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:cancelButtonTap cancelButtonTap} event of this
     * `sap.m.ActionSheet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ActionSheet` itself.
     *
     * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton
     * is set to true, and Popover is closed by tapping outside.
     */
    attachCancelButtonTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ActionSheet` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ActionSheetSettings extends $ControlSettings {
    /**
     * The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which
     * side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right,
     * sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft,
     * sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop,
     * sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
     */
    placement?:
      | (PlacementType | keyof typeof PlacementType)
      | PropertyBindingInfo;

    /**
     * If this is set to true, there will be a cancel button shown below the action buttons. There won't be
     * any cancel button shown in iPad regardless of this property. The default value is set to true.
     */
    showCancelButton?: boolean | PropertyBindingInfo;

    /**
     * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according
     * to the current locale setting. This property will be ignored when running either in iPad or showCancelButton
     * is set to false.
     */
    cancelButtonText?: string | PropertyBindingInfo;

    /**
     * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored
     * in tablets and desktop browser.
     */
    title?: string | PropertyBindingInfo;

    /**
     * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet
     * is closed before the tap event listener is called.
     */
    buttons?: Button[] | Button | AggregationBindingInfo;

    /**
     * @deprecated (since 1.20.0) - This event is deprecated, use the cancelButtonPress event instead.
     *
     * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton
     * is set to true, and Popover is closed by tapping outside.
     */
    cancelButtonTap?: Function;

    /**
     * This event will be fired before the ActionSheet is opened.
     */
    beforeOpen?: Function;

    /**
     * This event will be fired after the ActionSheet is opened.
     */
    afterOpen?: Function;

    /**
     * This event will be fired before the ActionSheet is closed.
     */
    beforeClose?: Function;

    /**
     * This event will be fired after the ActionSheet is closed.
     */
    afterClose?: Function;

    /**
     * This event is fired when the cancelButton is clicked.
     *
     * **Note: ** For any device other than phones, this event would be fired always when the Popover closes.
     * To prevent this behavior, the `showCancelButton` property needs to be set to `false`.
     */
    cancelButtonPress?: Function;
  }
}

declare module "sap/m/App" {
  import {
    default as NavContainer,
    $NavContainerSettings,
  } from "sap/m/NavContainer";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * The root element of a UI5 mobile app.
   *
   * Overview:
   *
   * The `App` inherits from {@link sap.m.NavContainer} and thus provides its navigation capabilities. It
   * adds certain header tags to the HTML page which are considered useful for mobile apps.
   *
   * Usage:
   *
   * You can configure the home icon of the `App`. For more information, see the `homeIcon` property.
   *
   * There are options for setting the background color and a background image with the use of the `backgroundColor`
   * and `backgroundImage` properties.
   *
   * **Note**: Keep in mind that by default (`isTopLevel` is set to `true`) `sap.m.App` traverses its parent
   * elements and automatically sets their height to 100%.
   */
  export default class App extends NavContainer {
    /**
     * Constructor for a new `App`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a4afb138acf64a61a038aa5b91a4f082 App}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $AppSettings
    );
    /**
     * Constructor for a new `App`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a4afb138acf64a61a038aa5b91a4f082 App}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $AppSettings
    );

    /**
     * @deprecated (since 1.20.0) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:orientationChange orientationChange} event of
     * this `sap.m.App`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.App` itself.
     *
     * Fired when the orientation (portrait/landscape) of the device is changed.
     */
    attachOrientationChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.App` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:orientationChange orientationChange} event
     * of this `sap.m.App`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOrientationChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.App with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.NavContainer.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, App>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.20.0) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Fires event {@link #event:orientationChange orientationChange} to attached listeners.
     */
    fireOrientationChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Whether the device is in landscape orientation.
         */
        landscape?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color of the App. If set, this color will override the default background defined by the theme.
     * So this should only be set when really required. Any configured background image will be placed above
     * this colored background. But any theme adaptation in the Theme Designer will override this setting. Use
     * the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     */
    getBackgroundColor(): string;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * Background image of the App. If set, this image will override the default background defined by the theme.
     * So this should only be set when really required. This background image will be placed above any color
     * set for the background. But any theme adaptation in the Theme Designer will override this image setting.
     * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     */
    getBackgroundImage(): URI;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
     * This can be used to make the application content better readable by making the background image partly
     * transparent.
     *
     * Default value is `1`.
     */
    getBackgroundOpacity(): float;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Whether the background image (if configured) should be proportionally stretched to cover the whole App
     * (false) or whether it should be tiled (true).
     *
     * Default value is `false`.
     */
    getBackgroundRepeat(): boolean;
    /**
     * Gets current value of property {@link #getHomeIcon homeIcon}.
     *
     * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
     *
     * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
     *
     * This icon must be in PNG format. The property can either hold the URL of one single icon which is used
     * for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the
     * different required sizes.
     *
     * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires
     * an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
     * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers.
     * ICO is also preferred for this desktop icon setting because the file can contain different images for
     * different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet. If an object is
     * given but one of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding
     * glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting
     * the "homeIconPrecomposed" property to "true".
     */
    getHomeIcon(): any;
    /**
     * @SINCE 1.91
     *
     * Gets current value of property {@link #getIsTopLevel isTopLevel}.
     *
     * Determines whether `sap.m.App` is used as a top level control.
     *
     * **Note**: When the `isTopLevel` property set to `true`, `sap.m.App` traverses its parent DOM elements
     * and sets their height to 100%.
     *
     * Default value is `true`.
     */
    getIsTopLevel(): boolean;
    /**
     * Returns a metadata object for class sap.m.App.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.58.0
     *
     * Gets current value of property {@link #getMobileWebAppCapable mobileWebAppCapable}.
     *
     * Determines whether the `App` is displayed without address bar when opened from an exported home screen
     * icon on a mobile device.
     *
     * Keep in mind that if enabled, there is no back button provided by the browser and the app must provide
     * own navigation on all displayed pages to avoid dead ends.
     *
     * **Note** The property can be toggled, but it doesn't take effect in real time. It takes the set value
     * at the moment when the home screen icon is exported by the user. For example, if the icon is exported
     * while the property is set to `true`, the `App` will have no address bar when opened from that same icon
     * regardless of a changed property value to `false` at a later time.
     *
     * Default value is `true`.
     */
    getMobileWebAppCapable(): boolean;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Background color of the App. If set, this color will override the default background defined by the theme.
     * So this should only be set when really required. Any configured background image will be placed above
     * this colored background. But any theme adaptation in the Theme Designer will override this setting. Use
     * the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: string
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * Background image of the App. If set, this image will override the default background defined by the theme.
     * So this should only be set when really required. This background image will be placed above any color
     * set for the background. But any theme adaptation in the Theme Designer will override this image setting.
     * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
     * This can be used to make the application content better readable by making the background image partly
     * transparent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setBackgroundOpacity(
      /**
       * New value for property `backgroundOpacity`
       */
      fBackgroundOpacity?: float
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Whether the background image (if configured) should be proportionally stretched to cover the whole App
     * (false) or whether it should be tiled (true).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setBackgroundRepeat(
      /**
       * New value for property `backgroundRepeat`
       */
      bBackgroundRepeat?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHomeIcon homeIcon}.
     *
     * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
     *
     * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
     *
     * This icon must be in PNG format. The property can either hold the URL of one single icon which is used
     * for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the
     * different required sizes.
     *
     * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires
     * an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
     * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers.
     * ICO is also preferred for this desktop icon setting because the file can contain different images for
     * different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet. If an object is
     * given but one of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding
     * glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting
     * the "homeIconPrecomposed" property to "true".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHomeIcon(
      /**
       * New value for property `homeIcon`
       */
      oHomeIcon?: any
    ): this;
    /**
     * @SINCE 1.91
     *
     * Sets a new value for property {@link #getIsTopLevel isTopLevel}.
     *
     * Determines whether `sap.m.App` is used as a top level control.
     *
     * **Note**: When the `isTopLevel` property set to `true`, `sap.m.App` traverses its parent DOM elements
     * and sets their height to 100%.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIsTopLevel(
      /**
       * New value for property `isTopLevel`
       */
      bIsTopLevel?: boolean
    ): this;
    /**
     * @SINCE 1.58.0
     *
     * Sets a new value for property {@link #getMobileWebAppCapable mobileWebAppCapable}.
     *
     * Determines whether the `App` is displayed without address bar when opened from an exported home screen
     * icon on a mobile device.
     *
     * Keep in mind that if enabled, there is no back button provided by the browser and the app must provide
     * own navigation on all displayed pages to avoid dead ends.
     *
     * **Note** The property can be toggled, but it doesn't take effect in real time. It takes the set value
     * at the moment when the home screen icon is exported by the user. For example, if the icon is exported
     * while the property is set to `true`, the `App` will have no address bar when opened from that same icon
     * regardless of a changed property value to `false` at a later time.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setMobileWebAppCapable(
      /**
       * New value for property `mobileWebAppCapable`
       */
      bMobileWebAppCapable?: boolean
    ): this;
    /**
     * @deprecated (since 1.20.0) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:orientationChange orientationChange} event of
     * this `sap.m.App`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.App` itself.
     *
     * Fired when the orientation (portrait/landscape) of the device is changed.
     */
    attachOrientationChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.App` itself
       */
      oListener?: object
    ): this;
  }

  export interface $AppSettings extends $NavContainerSettings {
    /**
     * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
     *
     * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
     *
     * This icon must be in PNG format. The property can either hold the URL of one single icon which is used
     * for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the
     * different required sizes.
     *
     * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires
     * an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
     * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers.
     * ICO is also preferred for this desktop icon setting because the file can contain different images for
     * different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet. If an object is
     * given but one of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding
     * glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting
     * the "homeIconPrecomposed" property to "true".
     */
    homeIcon?: any | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Background color of the App. If set, this color will override the default background defined by the theme.
     * So this should only be set when really required. Any configured background image will be placed above
     * this colored background. But any theme adaptation in the Theme Designer will override this setting. Use
     * the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     */
    backgroundColor?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Background image of the App. If set, this image will override the default background defined by the theme.
     * So this should only be set when really required. This background image will be placed above any color
     * set for the background. But any theme adaptation in the Theme Designer will override this image setting.
     * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete
     * App or whether it should be tiled.
     */
    backgroundImage?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Whether the background image (if configured) should be proportionally stretched to cover the whole App
     * (false) or whether it should be tiled (true).
     */
    backgroundRepeat?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
     * This can be used to make the application content better readable by making the background image partly
     * transparent.
     */
    backgroundOpacity?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.58.0
     *
     * Determines whether the `App` is displayed without address bar when opened from an exported home screen
     * icon on a mobile device.
     *
     * Keep in mind that if enabled, there is no back button provided by the browser and the app must provide
     * own navigation on all displayed pages to avoid dead ends.
     *
     * **Note** The property can be toggled, but it doesn't take effect in real time. It takes the set value
     * at the moment when the home screen icon is exported by the user. For example, if the icon is exported
     * while the property is set to `true`, the `App` will have no address bar when opened from that same icon
     * regardless of a changed property value to `false` at a later time.
     */
    mobileWebAppCapable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.91
     *
     * Determines whether `sap.m.App` is used as a top level control.
     *
     * **Note**: When the `isTopLevel` property set to `true`, `sap.m.App` traverses its parent DOM elements
     * and sets their height to 100%.
     */
    isTopLevel?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.20.0) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Fired when the orientation (portrait/landscape) of the device is changed.
     */
    orientationChange?: Function;
  }
}

declare module "sap/m/Avatar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI, CSSSize } from "sap/ui/core/library";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import AvatarColor from "sap/m/AvatarColor";

  import LightBox from "sap/m/LightBox";

  import AvatarShape from "sap/m/AvatarShape";

  import AvatarSize from "sap/m/AvatarSize";

  import AvatarImageFitType from "sap/m/AvatarImageFitType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.73
   *
   * An image-like control that has different display options for representing images, initials, and icons.
   *
   * Overview:
   *
   * The `Avatar` control allows the usage of different content, shapes, and sizes depending on the use case.
   *
   * The content types that can be displayed are either images, icons, or initials. The shape can be circular
   * or square. There are several predefined sizes, as well as an option to set a custom size.
   *
   * Usage:
   *
   * Up to two Latin letters can be displayed as initials in an `Avatar`. If there are more than two letters,
   * or if there's a non-Latin character present, a default image placeholder will be created.
   *
   * There are two options for how the displayed image can fit inside the available area:
   * 	 - Cover - the image is scaled to cover all of the available area
   * 	 - Contain - the image is scaled as large as possible while both its height and width fit inside the
   * 			avalable area  **Note:** To set a custom size for the `Avatar`, you have to choose the `Custom`
   * 			value for the `displaySize` property. Then, you have to set both the `customDisplaySize` and `customFontSize`
   * 			properties.
   */
  export default class Avatar extends Control {
    /**
     * Constructor for a new `Avatar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/avatar/ Avatar}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarSettings
    );
    /**
     * Constructor for a new `Avatar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/avatar/ Avatar}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $AvatarSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Avatar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Avatar` itself.
     *
     * Fired when the user selects the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Avatar` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getDetailBox detailBox} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindDetailBox(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys the detailBox in the aggregation {@link #getDetailBox detailBox}.
     */
    destroyDetailBox(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Avatar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Avatar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Avatar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Determines the background color of the control.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     *
     * Default value is `Accent6`.
     */
    getBackgroundColor(): AvatarColor | keyof typeof AvatarColor;
    /**
     * @SINCE 1.77
     *
     * Gets current value of property {@link #getBadgeIcon badgeIcon}.
     *
     * Defines what type of icon is displayed as visual affordance. It can be predefined or custom.
     *
     * The predefined icons are recommended for:
     * 	 - Suggesting a zooming action: `sap-icon://zoom-in`
     * 	 - Suggesting an image change: `sap-icon://camera`
     * 	 - Suggesting an editing action: `sap-icon://edit`
     *
     * Default value is `empty string`.
     */
    getBadgeIcon(): URI;
    /**
     * @SINCE 1.77
     *
     * Gets current value of property {@link #getBadgeTooltip badgeTooltip}.
     *
     * Defines a custom tooltip for the `badgeIcon`. If set, it overrides the available default values.
     *
     * If not set, default tooltips are used as follows:
     * 	 - Specific default tooltips are displayed for each of the predefined `badgeIcons`.
     * 	 - For any other icons, the displayed tooltip is the same as the main control tooltip.
     */
    getBadgeTooltip(): string;
    /**
     * Gets current value of property {@link #getCustomDisplaySize customDisplaySize}.
     *
     * Specifies custom display size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     *
     * Default value is `"3rem"`.
     */
    getCustomDisplaySize(): CSSSize;
    /**
     * Gets current value of property {@link #getCustomFontSize customFontSize}.
     *
     * Specifies custom font size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     *
     * Default value is `"1.125rem"`.
     */
    getCustomFontSize(): CSSSize;
    /**
     * Gets content of aggregation {@link #getDetailBox detailBox}.
     *
     * A `sap.m.LightBox` instance, that will be opened automatically when the user interacts with the `Avatar`
     * control.
     *
     * The `press` event will still be fired.
     */
    getDetailBox(): LightBox;
    /**
     * Gets current value of property {@link #getDisplayShape displayShape}.
     *
     * Defines the shape of the `Avatar`.
     *
     * Default value is `Circle`.
     */
    getDisplayShape(): AvatarShape | keyof typeof AvatarShape;
    /**
     * Gets current value of property {@link #getDisplaySize displaySize}.
     *
     * Sets a predefined display size of the `Avatar`.
     *
     * Default value is `S`.
     */
    getDisplaySize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Gets current value of property {@link #getFallbackIcon fallbackIcon}.
     *
     * Defines the fallback icon displayed in case of wrong image src and no initials set.
     *
     * **Notes:**
     * 	 - If not set, a default fallback icon is displayed depending on the set `displayShape` property.
     * 	 - Accepted values are only icons from the SAP icon font.
     */
    getFallbackIcon(): string;
    /**
     * Gets current value of property {@link #getImageFitType imageFitType}.
     *
     * Specifies how an image would fit in the `Avatar`.
     *
     * Default value is `Cover`.
     */
    getImageFitType(): AvatarImageFitType | keyof typeof AvatarImageFitType;
    /**
     * Gets current value of property {@link #getInitials initials}.
     *
     * Defines the displayed initials.
     */
    getInitials(): string;
    /**
     * Returns a metadata object for class sap.m.Avatar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowBorder showBorder}.
     *
     * Determines whether the control is displayed with border.
     *
     * Default value is `false`.
     */
    getShowBorder(): boolean;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * Determines the path to the desired image or icon.
     */
    getSrc(): URI;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Determines the background color of the control.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Accent6`.
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: AvatarColor | keyof typeof AvatarColor
    ): this;
    /**
     * @SINCE 1.77
     *
     * Sets a new value for property {@link #getBadgeIcon badgeIcon}.
     *
     * Defines what type of icon is displayed as visual affordance. It can be predefined or custom.
     *
     * The predefined icons are recommended for:
     * 	 - Suggesting a zooming action: `sap-icon://zoom-in`
     * 	 - Suggesting an image change: `sap-icon://camera`
     * 	 - Suggesting an editing action: `sap-icon://edit`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setBadgeIcon(
      /**
       * New value for property `badgeIcon`
       */
      sBadgeIcon?: URI
    ): this;
    /**
     * @SINCE 1.77
     *
     * Sets a new value for property {@link #getBadgeTooltip badgeTooltip}.
     *
     * Defines a custom tooltip for the `badgeIcon`. If set, it overrides the available default values.
     *
     * If not set, default tooltips are used as follows:
     * 	 - Specific default tooltips are displayed for each of the predefined `badgeIcons`.
     * 	 - For any other icons, the displayed tooltip is the same as the main control tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBadgeTooltip(
      /**
       * New value for property `badgeTooltip`
       */
      sBadgeTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getCustomDisplaySize customDisplaySize}.
     *
     * Specifies custom display size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"3rem"`.
     */
    setCustomDisplaySize(
      /**
       * New value for property `customDisplaySize`
       */
      sCustomDisplaySize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getCustomFontSize customFontSize}.
     *
     * Specifies custom font size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"1.125rem"`.
     */
    setCustomFontSize(
      /**
       * New value for property `customFontSize`
       */
      sCustomFontSize?: CSSSize
    ): this;
    /**
     * Sets the `detailBox` aggregation.
     */
    setDetailBox(
      /**
       * Instance of the `LightBox` control or undefined
       */
      oLightBox: LightBox | undefined
    ): object;
    /**
     * Sets a new value for property {@link #getDisplayShape displayShape}.
     *
     * Defines the shape of the `Avatar`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     */
    setDisplayShape(
      /**
       * New value for property `displayShape`
       */
      sDisplayShape?: AvatarShape | keyof typeof AvatarShape
    ): this;
    /**
     * Sets a new value for property {@link #getDisplaySize displaySize}.
     *
     * Sets a predefined display size of the `Avatar`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `S`.
     */
    setDisplaySize(
      /**
       * New value for property `displaySize`
       */
      sDisplaySize?: AvatarSize | keyof typeof AvatarSize
    ): this;
    /**
     * Sets a new value for property {@link #getFallbackIcon fallbackIcon}.
     *
     * Defines the fallback icon displayed in case of wrong image src and no initials set.
     *
     * **Notes:**
     * 	 - If not set, a default fallback icon is displayed depending on the set `displayShape` property.
     * 	 - Accepted values are only icons from the SAP icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFallbackIcon(
      /**
       * New value for property `fallbackIcon`
       */
      sFallbackIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getImageFitType imageFitType}.
     *
     * Specifies how an image would fit in the `Avatar`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Cover`.
     */
    setImageFitType(
      /**
       * New value for property `imageFitType`
       */
      sImageFitType?: AvatarImageFitType | keyof typeof AvatarImageFitType
    ): this;
    /**
     * Sets a new value for property {@link #getInitials initials}.
     *
     * Defines the displayed initials.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInitials(
      /**
       * New value for property `initials`
       */
      sInitials?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowBorder showBorder}.
     *
     * Determines whether the control is displayed with border.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowBorder(
      /**
       * New value for property `showBorder`
       */
      bShowBorder?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * Determines the path to the desired image or icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSrc(
      /**
       * New value for property `src`
       */
      sSrc?: URI
    ): this;
    /**
     * Unbinds aggregation {@link #getDetailBox detailBox} from model data.
     */
    unbindDetailBox(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Avatar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Avatar` itself.
     *
     * Fired when the user selects the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Avatar` itself
       */
      oListener?: object
    ): this;
  }

  export interface $AvatarSettings extends $ControlSettings {
    /**
     * Determines the path to the desired image or icon.
     */
    src?: URI | PropertyBindingInfo;

    /**
     * Defines the displayed initials.
     */
    initials?: string | PropertyBindingInfo;

    /**
     * Defines the shape of the `Avatar`.
     */
    displayShape?:
      | (AvatarShape | keyof typeof AvatarShape)
      | PropertyBindingInfo;

    /**
     * Sets a predefined display size of the `Avatar`.
     */
    displaySize?: (AvatarSize | keyof typeof AvatarSize) | PropertyBindingInfo;

    /**
     * Specifies custom display size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     */
    customDisplaySize?: CSSSize | PropertyBindingInfo;

    /**
     * Specifies custom font size of the `Avatar`.
     *
     * **Note:** It takes effect if the `displaySize` property is set to `Custom`.
     */
    customFontSize?: CSSSize | PropertyBindingInfo;

    /**
     * Specifies how an image would fit in the `Avatar`.
     */
    imageFitType?:
      | (AvatarImageFitType | keyof typeof AvatarImageFitType)
      | PropertyBindingInfo;

    /**
     * Defines the fallback icon displayed in case of wrong image src and no initials set.
     *
     * **Notes:**
     * 	 - If not set, a default fallback icon is displayed depending on the set `displayShape` property.
     * 	 - Accepted values are only icons from the SAP icon font.
     */
    fallbackIcon?: string | PropertyBindingInfo;

    /**
     * Determines the background color of the control.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     */
    backgroundColor?:
      | (AvatarColor | keyof typeof AvatarColor)
      | PropertyBindingInfo;

    /**
     * Determines whether the control is displayed with border.
     */
    showBorder?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.77
     *
     * Defines what type of icon is displayed as visual affordance. It can be predefined or custom.
     *
     * The predefined icons are recommended for:
     * 	 - Suggesting a zooming action: `sap-icon://zoom-in`
     * 	 - Suggesting an image change: `sap-icon://camera`
     * 	 - Suggesting an editing action: `sap-icon://edit`
     */
    badgeIcon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.77
     *
     * Defines a custom tooltip for the `badgeIcon`. If set, it overrides the available default values.
     *
     * If not set, default tooltips are used as follows:
     * 	 - Specific default tooltips are displayed for each of the predefined `badgeIcons`.
     * 	 - For any other icons, the displayed tooltip is the same as the main control tooltip.
     */
    badgeTooltip?: string | PropertyBindingInfo;

    /**
     * A `sap.m.LightBox` instance, that will be opened automatically when the user interacts with the `Avatar`
     * control.
     *
     * The `press` event will still be fired.
     */
    detailBox?: LightBox;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledBy).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Fired when the user selects the control.
     */
    press?: Function;
  }
}

declare module "sap/m/AvatarColor" {
  /**
   * @SINCE 1.73
   *
   * Possible background color options for the {@link sap.m.Avatar} control.
   *
   * **Notes:**
   * 	 - Keep in mind that the colors are theme-dependent and can differ based on the currently used theme.
   *
   * 	 -  If the `Random` value is assigned, a random color is chosen from the accent options (Accent1 to
   * 			Accent10).
   */
  enum AvatarColor {
    /**
     * Accent 1
     */
    Accent1 = "Accent1",
    /**
     * Accent 10
     */
    Accent10 = "Accent10",
    /**
     * Accent 2
     */
    Accent2 = "Accent2",
    /**
     * Accent 3
     */
    Accent3 = "Accent3",
    /**
     * Accent 4
     */
    Accent4 = "Accent4",
    /**
     * Accent 5
     */
    Accent5 = "Accent5",
    /**
     * Accent 6
     */
    Accent6 = "Accent6",
    /**
     * Accent 7
     */
    Accent7 = "Accent7",
    /**
     * Accent 8
     */
    Accent8 = "Accent8",
    /**
     * Accent 9
     */
    Accent9 = "Accent9",
    /**
     * Recommended when used as a placeholder (no image or initials are provided).
     */
    Placeholder = "Placeholder",
    /**
     * Random color, chosen from the accent options (Accent1 to Accent10)
     */
    Random = "Random",
    /**
     * Recommended when used as an icon in a tile.
     */
    TileIcon = "TileIcon",
    /**
     * Transparent
     */
    Transparent = "Transparent",
  }
  export default AvatarColor;
}

declare module "sap/m/AvatarImageFitType" {
  /**
   * @SINCE 1.73
   *
   * Types of image size and position that determine how an image fits in the {@link sap.m.Avatar} control
   * area.
   */
  enum AvatarImageFitType {
    /**
     * The image is scaled to the largest size so that both its width and height can fit in the control area.
     */
    Contain = "Contain",
    /**
     * The image is scaled to be large enough so that the control area is completely covered.
     */
    Cover = "Cover",
  }
  export default AvatarImageFitType;
}

declare module "sap/m/AvatarShape" {
  /**
   * @SINCE 1.73
   *
   * Types of shape for the {@link sap.m.Avatar} control.
   */
  enum AvatarShape {
    /**
     * Circular shape.
     */
    Circle = "Circle",
    /**
     * Square shape.
     */
    Square = "Square",
  }
  export default AvatarShape;
}

declare module "sap/m/AvatarSize" {
  /**
   * @SINCE 1.73
   *
   * Predefined sizes for the {@link sap.m.Avatar} control.
   */
  enum AvatarSize {
    /**
     * Custom size
     */
    Custom = "Custom",
    /**
     * Control size - 5rem Font size - 2rem
     */
    L = "L",
    /**
     * Control size - 4rem Font size - 1.625rem
     */
    M = "M",
    /**
     * Control size - 3rem Font size - 1.125rem
     */
    S = "S",
    /**
     * Control size - 7rem Font size - 2.75rem
     */
    XL = "XL",
    /**
     * Control size - 2rem Font size - 0.75rem
     */
    XS = "XS",
  }
  export default AvatarSize;
}

declare module "sap/m/AvatarType" {
  /**
   * @SINCE 1.73
   *
   * Types of {@link sap.m.Avatar} based on the displayed content.
   */
  enum AvatarType {
    /**
     * The displayed content is an icon.
     */
    Icon = "Icon",
    /**
     * The displayed content is an image.
     */
    Image = "Image",
    /**
     * The displayed content is initials.
     */
    Initials = "Initials",
  }
  export default AvatarType;
}

declare module "sap/m/BadgeCustomData" {
  import {
    default as CustomData,
    $CustomDataSettings,
  } from "sap/ui/core/CustomData";

  import { BadgeAnimationType } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.80
   *
   * Contains a single key/value pair of custom data attached to an `Element`.
   *
   * For more information, see {@link sap.ui.core.Element#data Element.prototype.data} and {@link topic:91f0c3ee6f4d1014b6dd926db0e91070
   * Custom Data - Attaching Data Objects to Controls}.
   */
  export default class BadgeCustomData extends CustomData {
    /**
     * Constructor for a new `BadgeCustomData` element.
     */
    constructor(
      /**
       * Initial settings for the new element
       */
      mSettings?: $BadgeCustomDataSettings
    );
    /**
     * Constructor for a new `BadgeCustomData` element.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new element
       */
      mSettings?: $BadgeCustomDataSettings
    );

    /**
     * Creates a new subclass of class sap.m.BadgeCustomData with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.CustomData.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BadgeCustomData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.87
     *
     * Gets current value of property {@link #getAnimation animation}.
     *
     * Determines the type of animation to be performed by the Badge DOM element.
     *
     * Default value is `Full`.
     */
    getAnimation(): BadgeAnimationType | keyof typeof BadgeAnimationType;
    /**
     * Returns a metadata object for class sap.m.BadgeCustomData.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * @SINCE 1.87
     *
     * Sets a new value for property {@link #getAnimation animation}.
     *
     * Determines the type of animation to be performed by the Badge DOM element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Full`.
     */
    setAnimation(
      /**
       * New value for property `animation`
       */
      sAnimation?: BadgeAnimationType | keyof typeof BadgeAnimationType
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $BadgeCustomDataSettings extends $CustomDataSettings {
    visible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.87
     *
     * Determines the type of animation to be performed by the Badge DOM element.
     */
    animation?:
      | (BadgeAnimationType | keyof typeof BadgeAnimationType)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/BadgeEnabler" {
  /**
   * @SINCE 1.80
   *
   * A helper class for implementing the {@link sap.m.IBadge} interface.
   *
   * The class represents a utility for visualising and updating the `badge` indicator for `sap.ui.core.Control`
   * instances. It should be created once per `IBadge` instance.
   *
   * On its initialization,  can accept a settings object. The settings object contains
   * the following properties:
   *
   *
   * 	 - `position` - accepts three predefined string values which add relative CSS classes to the badge element
   * 			and position it accordingly: `topLeft`, `topRight` and `inline`
   *
   *
   * 	 - `accentColor` - accepts string values equal to theme-specific accent colors. For more information,
   * 			see the {@link https://experience.sap.com/fiori-design-web/quartz-light-colors/#accent-colors SAP Fiori
   * 			Design Guidelines}.
   *
   *
   * 	 - `selector` - accepts Object, containing one property which is named either `selector` or `suffix`.
   * 			If no selector is passed, the main ID of the control is automatically set as selector value.
   */
  export default class BadgeEnabler {
    /**/
    constructor();
  }
}

declare module "sap/m/Bar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IBar, BarDesign, TitleAlignment } from "sap/m/library";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Used as a header, sub-header and a footer of a page.
   *
   * Overview:
   *
   * The `Bar` control consists of three areas to hold its content. It has the capability to center content,
   * such as a title, while having other controls on the left and right side.
   *
   * Usage:
   *
   * With the use of the `design` property, you can set the style of the `Bar` to appear as a header, sub-header
   * and footer.
   *
   * **Note:** Do not place a `sap.m.Bar` inside another `sap.m.Bar` or inside any bar-like control. Doing
   * so causes unpredictable behavior.
   *
   * Responsive Behavior:
   *
   * The content in the middle area is centrally positioned if there is enough space. If the right or left
   * content overlaps the middle content, the middle content will be centered in the space between.
   */
  export default class Bar extends Control implements IBar {
    __implements__sap_m_IBar: boolean;
    /**
     * Constructor for a new `Bar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BarSettings
    );
    /**
     * Constructor for a new `Bar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BarSettings
    );
    /**
     * Sets classes according to the context of the page. Possible contexts are header, footer and subheader.
     */
    _applyContextClassFor: undefined;

    /**
     * Sets HTML tag according to the context of the page. Possible contexts are header, footer and subheader.
     */
    _applyTag: undefined;

    /**
     * Sets classes and HTML tag according to the context of the page. Possible contexts are header, footer
     * and subheader.
     */
    applyTagAndContextClassFor: undefined;

    /**
     * Gets the available Bar contexts.
     */
    getContext: undefined;

    /**
     * Gets the HTML tag of the root element.
     */
    getHTMLTag: undefined;

    /**
     * Determines whether the Bar is sensitive to the container context.
     *
     * Implementation of the IBar interface.
     */
    isContextSensitive: undefined;

    /**
     * Sets the HTML tag of the root element.
     */
    setHTMLTag: undefined;

    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some contentLeft to the aggregation {@link #getContentLeft contentLeft}.
     */
    addContentLeft(
      /**
       * The contentLeft to add; if empty, nothing is inserted
       */
      oContentLeft: Control
    ): this;
    /**
     * Adds some contentMiddle to the aggregation {@link #getContentMiddle contentMiddle}.
     */
    addContentMiddle(
      /**
       * The contentMiddle to add; if empty, nothing is inserted
       */
      oContentMiddle: Control
    ): this;
    /**
     * Adds some contentRight to the aggregation {@link #getContentRight contentRight}.
     */
    addContentRight(
      /**
       * The contentRight to add; if empty, nothing is inserted
       */
      oContentRight: Control
    ): this;
    /**
     * Destroys all the contentLeft in the aggregation {@link #getContentLeft contentLeft}.
     */
    destroyContentLeft(): this;
    /**
     * Destroys all the contentMiddle in the aggregation {@link #getContentMiddle contentMiddle}.
     */
    destroyContentMiddle(): this;
    /**
     * Destroys all the contentRight in the aggregation {@link #getContentRight contentRight}.
     */
    destroyContentRight(): this;
    /**
     * Creates a new subclass of class sap.m.Bar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Bar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getContentLeft contentLeft}.
     *
     * Represents the left content area, usually containing a button or an app icon. If it is overlapped by
     * the right content, its content will disappear and the text will show an ellipsis.
     */
    getContentLeft(): Control[];
    /**
     * Gets content of aggregation {@link #getContentMiddle contentMiddle}.
     *
     * Represents the middle content area. Controls such as label, segmented buttons or select can be placed
     * here. The content is centrally positioned if there is enough space. If the right or left content overlaps
     * the middle content, the middle content will be centered in the space between the left and the right content.
     */
    getContentMiddle(): Control[];
    /**
     * Gets content of aggregation {@link #getContentRight contentRight}.
     *
     * Represents the right content area. Controls such as action buttons or search field can be placed here.
     */
    getContentRight(): Control[];
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getDesign design}.
     *
     * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is
     * placed.
     *
     * Default value is `Auto`.
     */
    getDesign(): BarDesign | keyof typeof BarDesign;
    /**
     * @deprecated (since 1.16) - replaced by `contentMiddle` aggregation. `contentMiddle` will always occupy
     * of the 100% width when no `contentLeft` and `contentRight` are being set.
     *
     * Gets current value of property {@link #getEnableFlexBox enableFlexBox}.
     *
     * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate
     * available space.
     *
     * Default value is `false`.
     */
    getEnableFlexBox(): boolean;
    /**
     * Returns a metadata object for class sap.m.Bar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.85
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `None`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * @SINCE 1.12
     * @deprecated (since 1.18.6) - This property has no effect since release 1.18.6 and should not be used.
     * Translucent bar may overlay an input and make it difficult to edit.
     *
     * Gets current value of property {@link #getTranslucent translucent}.
     *
     * Indicates whether the Bar is partially translucent. It is only applied for touch devices.
     *
     * Default value is `false`.
     */
    getTranslucent(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContentLeft contentLeft}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfContentLeft(
      /**
       * The contentLeft whose index is looked for
       */
      oContentLeft: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContentMiddle contentMiddle}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfContentMiddle(
      /**
       * The contentMiddle whose index is looked for
       */
      oContentMiddle: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContentRight contentRight}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfContentRight(
      /**
       * The contentRight whose index is looked for
       */
      oContentRight: Control
    ): int;
    /**
     * Inserts a contentLeft into the aggregation {@link #getContentLeft contentLeft}.
     */
    insertContentLeft(
      /**
       * The contentLeft to insert; if empty, nothing is inserted
       */
      oContentLeft: Control,
      /**
       * The `0`-based index the contentLeft should be inserted at; for a negative value of `iIndex`, the contentLeft
       * is inserted at position 0; for a value greater than the current size of the aggregation, the contentLeft
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a contentMiddle into the aggregation {@link #getContentMiddle contentMiddle}.
     */
    insertContentMiddle(
      /**
       * The contentMiddle to insert; if empty, nothing is inserted
       */
      oContentMiddle: Control,
      /**
       * The `0`-based index the contentMiddle should be inserted at; for a negative value of `iIndex`, the contentMiddle
       * is inserted at position 0; for a value greater than the current size of the aggregation, the contentMiddle
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a contentRight into the aggregation {@link #getContentRight contentRight}.
     */
    insertContentRight(
      /**
       * The contentRight to insert; if empty, nothing is inserted
       */
      oContentRight: Control,
      /**
       * The `0`-based index the contentRight should be inserted at; for a negative value of `iIndex`, the contentRight
       * is inserted at position 0; for a value greater than the current size of the aggregation, the contentRight
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContentLeft contentLeft}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContentLeft(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getContentMiddle contentMiddle}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContentMiddle(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getContentRight contentRight}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContentRight(): Control[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a contentLeft from the aggregation {@link #getContentLeft contentLeft}.
     */
    removeContentLeft(
      /**
       * The contentLeft to remove or its index or id
       */
      vContentLeft: int | string | Control
    ): Control;
    /**
     * Removes a contentMiddle from the aggregation {@link #getContentMiddle contentMiddle}.
     */
    removeContentMiddle(
      /**
       * The contentMiddle to remove or its index or id
       */
      vContentMiddle: int | string | Control
    ): Control;
    /**
     * Removes a contentRight from the aggregation {@link #getContentRight contentRight}.
     */
    removeContentRight(
      /**
       * The contentRight to remove or its index or id
       */
      vContentRight: int | string | Control
    ): Control;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getDesign design}.
     *
     * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is
     * placed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: BarDesign | keyof typeof BarDesign
    ): this;
    /**
     * @deprecated (since 1.16) - replaced by `contentMiddle` aggregation. `contentMiddle` will always occupy
     * of the 100% width when no `contentLeft` and `contentRight` are being set.
     *
     * Sets a new value for property {@link #getEnableFlexBox enableFlexBox}.
     *
     * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate
     * available space.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableFlexBox(
      /**
       * New value for property `enableFlexBox`
       */
      bEnableFlexBox?: boolean
    ): this;
    /**
     * @SINCE 1.85
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * @SINCE 1.12
     * @deprecated (since 1.18.6) - This property has no effect since release 1.18.6 and should not be used.
     * Translucent bar may overlay an input and make it difficult to edit.
     *
     * Sets a new value for property {@link #getTranslucent translucent}.
     *
     * Indicates whether the Bar is partially translucent. It is only applied for touch devices.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setTranslucent(
      /**
       * New value for property `translucent`
       */
      bTranslucent?: boolean
    ): this;
  }

  export interface $BarSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.16) - replaced by `contentMiddle` aggregation. `contentMiddle` will always occupy
     * of the 100% width when no `contentLeft` and `contentRight` are being set.
     *
     * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate
     * available space.
     */
    enableFlexBox?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.12
     * @deprecated (since 1.18.6) - This property has no effect since release 1.18.6 and should not be used.
     * Translucent bar may overlay an input and make it difficult to edit.
     *
     * Indicates whether the Bar is partially translucent. It is only applied for touch devices.
     */
    translucent?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is
     * placed.
     */
    design?: (BarDesign | keyof typeof BarDesign) | PropertyBindingInfo;

    /**
     * @SINCE 1.85
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * Represents the left content area, usually containing a button or an app icon. If it is overlapped by
     * the right content, its content will disappear and the text will show an ellipsis.
     */
    contentLeft?: Control[] | Control | AggregationBindingInfo;

    /**
     * Represents the middle content area. Controls such as label, segmented buttons or select can be placed
     * here. The content is centrally positioned if there is enough space. If the right or left content overlaps
     * the middle content, the middle content will be centered in the space between the left and the right content.
     */
    contentMiddle?: Control[] | Control | AggregationBindingInfo;

    /**
     * Represents the right content area. Controls such as action buttons or search field can be placed here.
     */
    contentRight?: Control[] | Control | AggregationBindingInfo;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;
  }
}

declare module "sap/m/Breadcrumbs" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IBreadcrumbs, BreadcrumbsSeparatorStyle } from "sap/m/library";

  import Link from "sap/m/Link";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Enables users to navigate between items by providing a list of links to previous steps in the user's
   * navigation path. The last three steps can be accessed as links directly, while the remaining links prior
   * to them are available in a drop-down menu.
   */
  export default class Breadcrumbs extends Control implements IBreadcrumbs {
    __implements__sap_m_IBreadcrumbs: boolean;
    /**
     * Constructor for a new `Breadcrumbs`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/breadcrumb/ Breadcrumbs}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BreadcrumbsSettings
    );
    /**
     * Constructor for a new `Breadcrumbs`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/breadcrumb/ Breadcrumbs}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BreadcrumbsSettings
    );

    /**
     * @SINCE 1.34
     *
     * Adds some link to the aggregation {@link #getLinks links}.
     */
    addLink(
      /**
       * The link to add; if empty, nothing is inserted
       */
      oLink: Link
    ): this;
    /**
     * @SINCE 1.34
     *
     * Destroys all the links in the aggregation {@link #getLinks links}.
     */
    destroyLinks(): this;
    /**
     * Creates a new subclass of class sap.m.Breadcrumbs with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Breadcrumbs>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.34
     *
     * Gets current value of property {@link #getCurrentLocationText currentLocationText}.
     *
     * Determines the text of current/last element in the Breadcrumbs path.
     */
    getCurrentLocationText(): string;
    /**
     * @SINCE 1.34
     *
     * Gets content of aggregation {@link #getLinks links}.
     *
     * A list of all the active link elements in the Breadcrumbs control. **Note:** Enabling the property `wrapping`
     * of the link will not work since it's incompatible with the concept of the control. The other properties
     * will work, but their effect may be undesirable.
     */
    getLinks(): Link[];
    /**
     * Returns a metadata object for class sap.m.Breadcrumbs.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.69
     *
     * Gets current value of property {@link #getSeparatorStyle separatorStyle}.
     *
     * Determines the visual style of the separator between the `Breadcrumbs` elements.
     *
     * Default value is `Slash`.
     */
    getSeparatorStyle():
      | BreadcrumbsSeparatorStyle
      | keyof typeof BreadcrumbsSeparatorStyle;
    /**
     * @SINCE 1.34
     *
     * Checks for the provided `sap.m.Link` in the aggregation {@link #getLinks links}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfLink(
      /**
       * The link whose index is looked for
       */
      oLink: Link
    ): int;
    /**
     * @SINCE 1.34
     *
     * Inserts a link into the aggregation {@link #getLinks links}.
     */
    insertLink(
      /**
       * The link to insert; if empty, nothing is inserted
       */
      oLink: Link,
      /**
       * The `0`-based index the link should be inserted at; for a negative value of `iIndex`, the link is inserted
       * at position 0; for a value greater than the current size of the aggregation, the link is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.34
     *
     * Removes all the controls from the aggregation {@link #getLinks links}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllLinks(): Link[];
    /**
     * @SINCE 1.34
     *
     * Removes a link from the aggregation {@link #getLinks links}.
     */
    removeLink(
      /**
       * The link to remove or its index or id
       */
      vLink: int | string | Link
    ): Link;
    /**
     * @SINCE 1.34
     *
     * Sets a new value for property {@link #getCurrentLocationText currentLocationText}.
     *
     * Determines the text of current/last element in the Breadcrumbs path.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCurrentLocationText(
      /**
       * New value for property `currentLocationText`
       */
      sCurrentLocationText?: string
    ): this;
    /**
     * @SINCE 1.71
     *
     * Custom setter for the `Breadcrumbs` separator style.
     */
    setSeparatorStyle(
      sSeparatorStyle:
        | BreadcrumbsSeparatorStyle
        | keyof typeof BreadcrumbsSeparatorStyle
    ): Breadcrumbs;
  }

  export interface $BreadcrumbsSettings extends $ControlSettings {
    /**
     * @SINCE 1.34
     *
     * Determines the text of current/last element in the Breadcrumbs path.
     */
    currentLocationText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.69
     *
     * Determines the visual style of the separator between the `Breadcrumbs` elements.
     */
    separatorStyle?:
      | (BreadcrumbsSeparatorStyle | keyof typeof BreadcrumbsSeparatorStyle)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.34
     *
     * A list of all the active link elements in the Breadcrumbs control. **Note:** Enabling the property `wrapping`
     * of the link will not work since it's incompatible with the concept of the control. The other properties
     * will work, but their effect may be undesirable.
     */
    links?: Link[] | Link | AggregationBindingInfo;
  }
}

declare module "sap/m/BusyDialog" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TitleAlignment } from "sap/m/library";

  import TooltipBase from "sap/ui/core/TooltipBase";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * BusyDialog is used to indicate that the system is busy. Overview: When the busy dialog is displayed,
   * the whole application is blocked. Structure: The busy dialog can hold several elements, most of which
   * are optional.
   * 	 - `title` - A title for the dialog. By default, there is no title.
   * 	 - `text` - A text displayed above the busy animation.
   * 	 - `showCancelButton` - An optional Cancel button to stop the execution.
   * 	 - `customIcon` - An optional alternative icon to use as a busy animation.  Usage: When to use:
   *
   * 	 - The operation lasts more than one second.
   * 	 - You want to indicate loading in a page-to-page navigation (lightweight version).
   * 	 - Offer a Cancel button if you expect the process to run more than 10 seconds.
   * 	 -  If you do not show a title or text, use the {@link sap.ui.core.InvisibleText invisible text} control
   * 			to provide the reason for users with assistive technologies.  When not to use:
   * 	 - The screen is not supposed to be blocked. Use a {@link sap.m.BusyIndicator} for the specific application
   * 			part.
   * 	 - Do not use the title of the busy dialog. Provide a precise text describing the operation in `text`.
   */
  export default class BusyDialog extends Control {
    /**
     * Constructor for a new BusyDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/busydialog Busy Dialog}
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $BusyDialogSettings
    );
    /**
     * Constructor for a new BusyDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/busydialog Busy Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $BusyDialogSettings
    );

    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.BusyDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.BusyDialog` itself.
     *
     * Fires when the busy dialog is closed. Note: the BusyDialog will not be closed by the InstanceManager.closeAllDialogs
     * method
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.BusyDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the BusyDialog.
     */
    close(
      /**
       * Indicates if the BusyDialog is closed from a user interaction.
       */
      isClosedFromUserInteraction?: boolean
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.m.BusyDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.BusyDialog with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BusyDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:close close} to attached listeners.
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates if the close events are triggered by a user, pressing a cancel button or because the operation
         * was terminated. This parameter is set to true if the close event is fired by user interaction.
         */
        cancelPressed?: boolean;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getCancelButtonText cancelButtonText}.
     *
     * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
     *
     * Default value is `empty string`.
     */
    getCancelButtonText(): string;
    /**
     * Gets current value of property {@link #getCustomIcon customIcon}.
     *
     * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You
     * can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density
     * screens.
     *
     * Default value is `empty string`.
     */
    getCustomIcon(): URI;
    /**
     * Gets current value of property {@link #getCustomIconDensityAware customIconDensityAware}.
     *
     * If this is set to `false`, the source image will be loaded directly without attempting to fetch the density
     * perfect image for high density devices. By default, this is set to `true` but then one or more requests
     * are sent trying to get the density perfect version of the image.
     *
     * If bandwidth is the key for the application, set this value to `false`.
     *
     * Default value is `true`.
     */
    getCustomIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getCustomIconHeight customIconHeight}.
     *
     * Height of the provided icon with default value "44px".
     *
     * Default value is `"44px"`.
     */
    getCustomIconHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
     *
     * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The
     * value is in milliseconds.
     *
     * Default value is `1000`.
     */
    getCustomIconRotationSpeed(): int;
    /**
     * Gets current value of property {@link #getCustomIconWidth customIconWidth}.
     *
     * Width of the provided icon with default value "44px".
     *
     * Default value is `"44px"`.
     */
    getCustomIconWidth(): CSSSize;
    /**
     * Gets the DOM reference for the BusyDialog.
     */
    getDomRef(): Element;
    /**
     * Returns a metadata object for class sap.m.BusyDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowCancelButton showCancelButton}.
     *
     * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to `false`.
     *
     * Default value is `false`.
     */
    getShowCancelButton(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Optional text displayed inside the dialog.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Sets the title of the BusyDialog. The default value is an empty string.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Gets the tooltip of the BusyDialog.
     */
    getTooltip(): string | TooltipBase;
    /**
     * Opens the BusyDialog.
     */
    open(): this;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Shows the text for the cancel button.
     */
    setCancelButtonText(
      /**
       * Text for the cancel button.
       */
      sText: string
    ): this;
    /**
     * Sets custom icon.
     */
    setCustomIcon(
      /**
       * Icon to use as a busy animation.
       */
      sIcon: string
    ): this;
    /**
     * Sets the density of the custom icon.
     */
    setCustomIconDensityAware(
      /**
       * Determines if the source image will be loaded directly without attempting to fetch the density for high
       * density devices.
       */
      bIsDensityAware: boolean
    ): this;
    /**
     * Sets the height of the custom icon.
     */
    setCustomIconHeight(
      /**
       * Height of the provided icon in CSSSize.
       */
      sHeight: string
    ): this;
    /**
     * Sets the rotation speed of the custom icon.
     */
    setCustomIconRotationSpeed(
      /**
       * Defines the rotation speed of the given image.
       */
      iSpeed: int
    ): this;
    /**
     * Sets the width of the custom icon.
     */
    setCustomIconWidth(
      /**
       * Width of the provided icon in CSSSize.
       */
      sWidth: string
    ): this;
    /**
     * Shows the cancel button.
     */
    setShowCancelButton(
      /**
       * Determines if the Cancel button is shown.
       */
      bIsCancelButtonShown: boolean
    ): this;
    /**
     * Sets the text for the BusyDialog.
     */
    setText(
      /**
       * The text for the BusyDialog.
       */
      sText: string
    ): this;
    /**
     * Sets the title for the BusyDialog.
     */
    setTitle(
      /**
       * The title for the BusyDialog.
       */
      sTitle: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Sets the tooltip for the BusyDialog.
     */
    setTooltip(
      /**
       * The tooltip for the BusyDialog.
       */
      sTooltip: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.BusyDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.BusyDialog` itself.
     *
     * Fires when the busy dialog is closed. Note: the BusyDialog will not be closed by the InstanceManager.closeAllDialogs
     * method
     */
    attachClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.BusyDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $BusyDialogSettings extends $ControlSettings {
    /**
     * Optional text displayed inside the dialog.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Sets the title of the BusyDialog. The default value is an empty string.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You
     * can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density
     * screens.
     */
    customIcon?: URI | PropertyBindingInfo;

    /**
     * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The
     * value is in milliseconds.
     */
    customIconRotationSpeed?: int | PropertyBindingInfo;

    /**
     * If this is set to `false`, the source image will be loaded directly without attempting to fetch the density
     * perfect image for high density devices. By default, this is set to `true` but then one or more requests
     * are sent trying to get the density perfect version of the image.
     *
     * If bandwidth is the key for the application, set this value to `false`.
     */
    customIconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Width of the provided icon with default value "44px".
     */
    customIconWidth?: CSSSize | PropertyBindingInfo;

    /**
     * Height of the provided icon with default value "44px".
     */
    customIconHeight?: CSSSize | PropertyBindingInfo;

    /**
     * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
     */
    cancelButtonText?: string | PropertyBindingInfo;

    /**
     * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to `false`.
     */
    showCancelButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Fires when the busy dialog is closed. Note: the BusyDialog will not be closed by the InstanceManager.closeAllDialogs
     * method
     */
    close?: Function;
  }
}

declare module "sap/m/BusyIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI, CSSSize, TextDirection } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Informs the user about an ongoing operation. Overview: The busy indicator implies that an action is taking
   * place within a single control. You can set the size of the icon, the text, but also define a custom icon
   * to be used instead. Usage: When to use:
   * 	 - The user needs to be able to cancel the operation.
   * 	 - Only part of the application or a particular control is affected.  When not to use:
   * 	 - The operation takes less than one second.
   * 	 - You need to block the screen and prevent the user from starting another activity. In this case, use
   * 			the {@link sap.m.BusyDialog busy dialog}.
   * 	 - Do not change the mouse cursor to indicate the ongoing operation.
   * 	 - Do not show multiple busy indicators at once
   */
  export default class BusyIndicator extends Control {
    /**
     * Constructor for a new BusyIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/busy-indicator/ Busy Indicator}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $BusyIndicatorSettings
    );
    /**
     * Constructor for a new BusyIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/busy-indicator/ Busy Indicator}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $BusyIndicatorSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Creates a new subclass of class sap.m.BusyIndicator with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, BusyIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getCustomIcon customIcon}.
     *
     * Icon URL if an icon is used as the busy indicator.
     *
     * Default value is `empty string`.
     */
    getCustomIcon(): URI;
    /**
     * Gets current value of property {@link #getCustomIconDensityAware customIconDensityAware}.
     *
     * If this is set to false, the src image will be loaded directly without attempting to fetch the density
     * perfect image for high density device. By default, this is set to true but then one or more requests
     * are sent to the server, trying to get the density perfect version of the specified image. If bandwidth
     * is the key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getCustomIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getCustomIconHeight customIconHeight}.
     *
     * Height of the provided icon. By default 44px are used.
     *
     * Default value is `"44px"`.
     */
    getCustomIconHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
     *
     * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit
     * is in ms. **Note:** Values are considered valid when greater than or equal to 0. If invalid value is
     * provided the speed defaults to 0.
     *
     * Default value is `1000`.
     */
    getCustomIconRotationSpeed(): int;
    /**
     * Gets current value of property {@link #getCustomIconWidth customIconWidth}.
     *
     * Width of the provided icon. By default 44px are used.
     *
     * Default value is `"44px"`.
     */
    getCustomIconWidth(): CSSSize;
    /**
     * @deprecated (since 1.32.1)
     *
     * Gets current value of property {@link #getDesign design}.
     *
     * Setting this property will not have any effect on the appearance of the BusyIndicator in versions greater
     * than or equal to 1.32.1
     *
     * Default value is `"auto"`.
     */
    getDesign(): string;
    /**
     * Returns a metadata object for class sap.m.BusyIndicator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSize size}.
     *
     * Defines the size of the busy indicator. The animation consists of three circles, each of which will be
     * this size. Therefore the total width of the control amounts to three times the given size.
     *
     * Default value is `"1rem"`.
     */
    getSize(): CSSSize;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines text to be displayed below the busy indicator. It can be used to inform the user of the current
     * operation.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getCustomIcon customIcon}.
     *
     * Icon URL if an icon is used as the busy indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setCustomIcon(
      /**
       * New value for property `customIcon`
       */
      sCustomIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getCustomIconDensityAware customIconDensityAware}.
     *
     * If this is set to false, the src image will be loaded directly without attempting to fetch the density
     * perfect image for high density device. By default, this is set to true but then one or more requests
     * are sent to the server, trying to get the density perfect version of the specified image. If bandwidth
     * is the key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setCustomIconDensityAware(
      /**
       * New value for property `customIconDensityAware`
       */
      bCustomIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getCustomIconHeight customIconHeight}.
     *
     * Height of the provided icon. By default 44px are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"44px"`.
     */
    setCustomIconHeight(
      /**
       * New value for property `customIconHeight`
       */
      sCustomIconHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
     *
     * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit
     * is in ms. **Note:** Values are considered valid when greater than or equal to 0. If invalid value is
     * provided the speed defaults to 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1000`.
     */
    setCustomIconRotationSpeed(
      /**
       * New value for property `customIconRotationSpeed`
       */
      iCustomIconRotationSpeed?: int
    ): this;
    /**
     * Sets a new value for property {@link #getCustomIconWidth customIconWidth}.
     *
     * Width of the provided icon. By default 44px are used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"44px"`.
     */
    setCustomIconWidth(
      /**
       * New value for property `customIconWidth`
       */
      sCustomIconWidth?: CSSSize
    ): this;
    /**
     * @deprecated (since 1.32.1)
     *
     * Sets a new value for property {@link #getDesign design}.
     *
     * Setting this property will not have any effect on the appearance of the BusyIndicator in versions greater
     * than or equal to 1.32.1
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"auto"`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSize size}.
     *
     * Defines the size of the busy indicator. The animation consists of three circles, each of which will be
     * this size. Therefore the total width of the control amounts to three times the given size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"1rem"`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines text to be displayed below the busy indicator. It can be used to inform the user of the current
     * operation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
  }

  export interface $BusyIndicatorSettings extends $ControlSettings {
    /**
     * Defines text to be displayed below the busy indicator. It can be used to inform the user of the current
     * operation.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Icon URL if an icon is used as the busy indicator.
     */
    customIcon?: URI | PropertyBindingInfo;

    /**
     * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit
     * is in ms. **Note:** Values are considered valid when greater than or equal to 0. If invalid value is
     * provided the speed defaults to 0.
     */
    customIconRotationSpeed?: int | PropertyBindingInfo;

    /**
     * If this is set to false, the src image will be loaded directly without attempting to fetch the density
     * perfect image for high density device. By default, this is set to true but then one or more requests
     * are sent to the server, trying to get the density perfect version of the specified image. If bandwidth
     * is the key for the application, set this value to false.
     */
    customIconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Width of the provided icon. By default 44px are used.
     */
    customIconWidth?: CSSSize | PropertyBindingInfo;

    /**
     * Height of the provided icon. By default 44px are used.
     */
    customIconHeight?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the size of the busy indicator. The animation consists of three circles, each of which will be
     * this size. Therefore the total width of the control amounts to three times the given size.
     */
    size?: CSSSize | PropertyBindingInfo;

    /**
     * @deprecated (since 1.32.1)
     *
     * Setting this property will not have any effect on the appearance of the BusyIndicator in versions greater
     * than or equal to 1.32.1
     */
    design?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;
  }
}

declare module "sap/m/Button" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    URI,
    aria,
    TextDirection,
    CSSSize,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ButtonType } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Enables users to trigger actions.
   *
   * Overview:
   *
   * The user triggers an action by clicking or tapping the `Button` or by pressing certain keyboard keys,
   * such as Enter.
   *
   * Usage:
   *
   * For the `Button` UI, you can define text, icon, or both. You can also specify whether the text or the
   * icon is displayed first.
   *
   * You can choose from a set of predefined {@link sap.m.ButtonType ButtonTypes} that offer different styling
   * to correspond to the triggered action.
   *
   * You can set the `Button` as enabled or disabled. An enabled `Button` can be pressed by clicking or tapping
   * it and it changes its style to provide visual feedback to the user that it is pressed or hovered over
   * with the mouse cursor. A disabled `Button` appears inactive and cannot be pressed.
   */
  export default class Button extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new `Button`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Button}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ButtonSettings
    );
    /**
     * Constructor for a new `Button`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Button}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ButtonSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Button` itself.
     *
     * Fired when the user clicks or taps on the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Button` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20) - replaced by `press` event
     *
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Button` itself.
     *
     * Fired when the user taps the control.
     */
    attachTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Button` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Button`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20) - replaced by `press` event
     *
     * Detaches event handler `fnFunction` from the {@link #event:tap tap} event of this `sap.m.Button`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Button with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Button>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.20) - replaced by `press` event
     *
     * Fires event {@link #event:tap tap} to attached listeners.
     */
    fireTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * The source property of an alternative icon for the active (depressed) state of the button. Both active
     * and default icon properties should be defined and have the same type: image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     */
    getActiveIcon(): URI;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.84.0
     *
     * Gets current value of property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered with the selected
     * value.
     *
     * Default value is `None`.
     */
    getAriaHasPopup(): aria.HasPopup | keyof typeof aria.HasPopup;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Determines whether the `Button` is enabled (default is set to `true`). A disabled `Button` has different
     * colors depending on the {@link sap.m.ButtonType ButtonType}.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the `Button`. It can be an image or an icon
     * from the icon font.
     *
     * Default value is `empty string`.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If only one version of image is provided, set this value to false to avoid the attempt of fetching density
     * perfect image.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getIconFirst iconFirst}.
     *
     * Determines whether the icon is displayed before the text.
     *
     * Default value is `true`.
     */
    getIconFirst(): boolean;
    /**
     * Returns a metadata object for class sap.m.Button.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Defines to which DOM reference the Popup should be docked
     */
    getPopupAnchorDomRef(): Element;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Determines the text of the `Button`.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the `Button` type.
     *
     * Default value is `Default`.
     */
    getType(): ButtonType | keyof typeof ButtonType;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the `Button` width.
     */
    getWidth(): CSSSize;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * The source property of an alternative icon for the active (depressed) state of the button. Both active
     * and default icon properties should be defined and have the same type: image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * @SINCE 1.84.0
     *
     * Sets a new value for property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered with the selected
     * value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAriaHasPopup(
      /**
       * New value for property `ariaHasPopup`
       */
      sAriaHasPopup?: aria.HasPopup | keyof typeof aria.HasPopup
    ): this;
    /**
     * Badge minimum value setter - called when someone wants to change the value above which the badge value
     * is displayed with + after the value (ex. 999+)
     */
    setBadgeMaxValue(
      /**
       * maximum visible value of the badge (not greater than maximum Badge value - 9999)
       */
      iMax: number
    ): this;
    /**
     * Badge minimum value setter - called when someone wants to change the value below which the badge is hidden.
     */
    setBadgeMinValue(
      /**
       * minimum visible value of the badge (not less than minimum Badge value - 1)
       */
      iMin: number
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Determines whether the `Button` is enabled (default is set to `true`). A disabled `Button` has different
     * colors depending on the {@link sap.m.ButtonType ButtonType}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the `Button`. It can be an image or an icon
     * from the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If only one version of image is provided, set this value to false to avoid the attempt of fetching density
     * perfect image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconFirst iconFirst}.
     *
     * Determines whether the icon is displayed before the text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconFirst(
      /**
       * New value for property `iconFirst`
       */
      bIconFirst?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the text of the `Button`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the `Button` type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ButtonType | keyof typeof ButtonType
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the `Button` width.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Button` itself.
     *
     * Fired when the user clicks or taps on the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Button` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20) - replaced by `press` event
     *
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.Button`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Button` itself.
     *
     * Fired when the user taps the control.
     */
    attachTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Button` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ButtonSettings extends $ControlSettings {
    /**
     * Determines the text of the `Button`.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the `Button` type.
     */
    type?: (ButtonType | keyof typeof ButtonType) | PropertyBindingInfo;

    /**
     * Defines the `Button` width.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the `Button` is enabled (default is set to `true`). A disabled `Button` has different
     * colors depending on the {@link sap.m.ButtonType ButtonType}.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed as graphical element within the `Button`. It can be an image or an icon
     * from the icon font.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Determines whether the icon is displayed before the text.
     */
    iconFirst?: boolean | PropertyBindingInfo;

    /**
     * The source property of an alternative icon for the active (depressed) state of the button. Both active
     * and default icon properties should be defined and have the same type: image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If only one version of image is provided, set this value to false to avoid the attempt of fetching density
     * perfect image.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.84.0
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered with the selected
     * value.
     */
    ariaHasPopup?:
      | (aria.HasPopup | keyof typeof aria.HasPopup)
      | PropertyBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.20) - replaced by `press` event
     *
     * Fired when the user taps the control.
     */
    tap?: Function;

    /**
     * Fired when the user clicks or taps on the control.
     */
    press?: Function;
  }
}

declare module "sap/m/Carousel" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import { CarouselArrowsPlacement, PlacementType } from "sap/m/library";

  import CarouselLayout from "sap/m/CarouselLayout";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * The carousel allows the user to browse through a set of items by swiping right or left. Overview: The
   * control is mostly used for showing a gallery of images, but can hold any sap.m control. Structure: The
   * carousel consists of a the following elements:
   * 	 - Content area - displays the different items.
   * 	 - Navigation - arrows to the left and right for switching between items.
   * 	 - (optional) Paging - indicator at the bottom to show the current position in the set.  The paging
   * 			indicator can be configured as follows:
   * 	 - `showPageIndicator` - determines if the indicator is displayed.
   * 	 - If the pages are less than 9, the page indicator is represented with bullets.
   * 	 - If the pages are 9 or more, the page indicator is numeric.
   * 	 - `pageIndicatorPlacement` - determines where the indicator is located. Default (`sap.m.PlacementType.Bottom`)
   * 			- below the content.  Additionally, you can also change the location of the navigation arrows. By
   * 			setting `arrowsPlacement` to `sap.m.CarouselArrowsPlacement.PageIndicator`, the arrows will be located
   * 			at the bottom by the paging indicator. Note: When the content is of type `sap.m.Image` add "Image" text
   * 			at the end of the `"alt"` description in order to provide accessibility info for the UI element. Usage:
   * 			 When to use:
   * 	 - The items you want to display are very different from each other.
   * 	 - You want to display the items one after the other.   When not to use:
   * 	 - The items you want to display need to be visible at the same time.
   * 	 - The items you want to display are uniform and very similar  Responsive Behavior:
   * 	 - On touch devices, navigation is performed with swipe gestures (swipe right or swipe left).
   * 	 - On desktop, navigation is done with the navigation arrows.
   * 	 - The paging indicator (when activated) is visible on each form factor.
   */
  export default class Carousel extends Control {
    /**
     * Constructor for a new Carousel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/carousel/ Carousel}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselSettings
    );
    /**
     * Constructor for a new Carousel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/carousel/ Carousel}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselSettings
    );

    /**
     * Adds some page to the aggregation {@link #getPages pages}.
     */
    addPage(
      /**
       * The page to add; if empty, nothing is inserted
       */
      oPage: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforePageChanged beforePageChanged} event of
     * this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * This event is fired before a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    attachBeforePageChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Attaches event handler `fnFunction` to the {@link #event:loadPage loadPage} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
     */
    attachLoadPage(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:pageChanged pageChanged} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    attachPageChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Attaches event handler `fnFunction` to the {@link #event:unloadPage unloadPage} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content
     * of that page.
     */
    attachUnloadPage(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.62
     *
     * Destroys the customLayout in the aggregation {@link #getCustomLayout customLayout}.
     */
    destroyCustomLayout(): this;
    /**
     * Destroys all the pages in the aggregation {@link #getPages pages}.
     */
    destroyPages(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforePageChanged beforePageChanged} event
     * of this `sap.m.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforePageChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Detaches event handler `fnFunction` from the {@link #event:loadPage loadPage} event of this `sap.m.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoadPage(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:pageChanged pageChanged} event of this `sap.m.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPageChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Detaches event handler `fnFunction` from the {@link #event:unloadPage unloadPage} event of this `sap.m.Carousel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUnloadPage(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Carousel with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Carousel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:beforePageChanged beforePageChanged} to attached listeners.
     */
    fireBeforePageChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indexes of all active pages after the page change.
         */
        activePages?: Array<any>;
      }
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Fires event {@link #event:loadPage loadPage} to attached listeners.
     */
    fireLoadPage(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Id of the page which will be loaded
         */
        pageId?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:pageChanged pageChanged} to attached listeners.
     */
    firePageChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * ID of the page which was active before the page change.
         */
        oldActivePageId?: string;
        /**
         * ID of the page which will be active after the page change.
         */
        newActivePageId?: string;
        /**
         * Indexes of all active pages after the page change.
         */
        activePages?: Array<any>;
      }
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Fires event {@link #event:unloadPage unloadPage} to attached listeners.
     */
    fireUnloadPage(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Id of the page which will be unloaded
         */
        pageId?: string;
      }
    ): this;
    /**
     * ID of the element which is the current target of the association {@link #getActivePage activePage}, or
     * `null`.
     */
    getActivePage(): ID;
    /**
     * Gets current value of property {@link #getArrowsPlacement arrowsPlacement}.
     *
     * Defines where the carousel's arrows are placed. Default is `sap.m.CarouselArrowsPlacement.Content` used
     * to place the arrows on the sides of the carousel. Alternatively `sap.m.CarouselArrowsPlacement.PageIndicator`
     * can be used to place the arrows on the sides of the page indicator.
     *
     * Default value is `Content`.
     */
    getArrowsPlacement():
      | CarouselArrowsPlacement
      | keyof typeof CarouselArrowsPlacement;
    /**
     * @SINCE 1.62
     *
     * Gets content of aggregation {@link #getCustomLayout customLayout}.
     *
     * Defines how many pages are displayed in the visible area of the `Carousel` control.
     *
     * **Note:** When this property is used, the `loop` property is ignored.
     */
    getCustomLayout(): CarouselLayout;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the carousel. Note that when a percentage value is used, the height of the surrounding
     * container must be defined.
     *
     * Default value is `'100%'`.
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getLoop loop}.
     *
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     *
     * Default value is `false`.
     */
    getLoop(): boolean;
    /**
     * Returns a metadata object for class sap.m.Carousel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPageIndicatorPlacement pageIndicatorPlacement}.
     *
     * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top,
     * sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default
     * value is sap.m.PlacementType.Bottom.
     *
     * Default value is `Bottom`.
     */
    getPageIndicatorPlacement(): PlacementType | keyof typeof PlacementType;
    /**
     * Gets content of aggregation {@link #getPages pages}.
     *
     * The content which the carousel displays.
     */
    getPages(): Control[];
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator
     * is not necessary any longer.
     *
     * Gets current value of property {@link #getShowBusyIndicator showBusyIndicator}.
     *
     * Show or hide busy indicator in the carousel when loading pages after swipe.
     *
     * Default value is `true`.
     */
    getShowBusyIndicator(): boolean;
    /**
     * Gets current value of property {@link #getShowPageIndicator showPageIndicator}.
     *
     * Show or hide carousel's page indicator.
     *
     * Default value is `true`.
     */
    getShowPageIndicator(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container
     * must be defined.
     *
     * Default value is `'100%'`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getPages pages}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfPage(
      /**
       * The page whose index is looked for
       */
      oPage: Control
    ): int;
    /**
     * Inserts a page into the aggregation {@link #getPages pages}.
     */
    insertPage(
      /**
       * The page to insert; if empty, nothing is inserted
       */
      oPage: Control,
      /**
       * The `0`-based index the page should be inserted at; for a negative value of `iIndex`, the page is inserted
       * at position 0; for a value greater than the current size of the aggregation, the page is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
     */
    next(): this;
    /**
     * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method
     * chaining.
     */
    previous(): this;
    /**
     * Removes all the controls from the aggregation {@link #getPages pages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPages(): Control[];
    /**
     * Removes a page from the aggregation {@link #getPages pages}.
     */
    removePage(
      /**
       * The page to remove or its index or id
       */
      vPage: int | string | Control
    ): Control;
    /**
     * Sets the associated {@link #getActivePage activePage}.
     */
    setActivePage(
      /**
       * ID of an element which becomes the new target of this activePage association; alternatively, an element
       * instance may be given
       */
      oActivePage: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getArrowsPlacement arrowsPlacement}.
     *
     * Defines where the carousel's arrows are placed. Default is `sap.m.CarouselArrowsPlacement.Content` used
     * to place the arrows on the sides of the carousel. Alternatively `sap.m.CarouselArrowsPlacement.PageIndicator`
     * can be used to place the arrows on the sides of the page indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Content`.
     */
    setArrowsPlacement(
      /**
       * New value for property `arrowsPlacement`
       */
      sArrowsPlacement?:
        | CarouselArrowsPlacement
        | keyof typeof CarouselArrowsPlacement
    ): this;
    /**
     * @SINCE 1.62
     *
     * Sets the aggregated {@link #getCustomLayout customLayout}.
     */
    setCustomLayout(
      /**
       * The customLayout to set
       */
      oCustomLayout: CarouselLayout
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the carousel. Note that when a percentage value is used, the height of the surrounding
     * container must be defined.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLoop loop}.
     *
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setLoop(
      /**
       * New value for property `loop`
       */
      bLoop?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPageIndicatorPlacement pageIndicatorPlacement}.
     *
     * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top,
     * sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default
     * value is sap.m.PlacementType.Bottom.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Bottom`.
     */
    setPageIndicatorPlacement(
      /**
       * New value for property `pageIndicatorPlacement`
       */
      sPageIndicatorPlacement?: PlacementType | keyof typeof PlacementType
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator
     * is not necessary any longer.
     *
     * Sets a new value for property {@link #getShowBusyIndicator showBusyIndicator}.
     *
     * Show or hide busy indicator in the carousel when loading pages after swipe.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowBusyIndicator(
      /**
       * New value for property `showBusyIndicator`
       */
      bShowBusyIndicator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowPageIndicator showPageIndicator}.
     *
     * Show or hide carousel's page indicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowPageIndicator(
      /**
       * New value for property `showPageIndicator`
       */
      bShowPageIndicator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container
     * must be defined.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforePageChanged beforePageChanged} event of
     * this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * This event is fired before a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    attachBeforePageChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Attaches event handler `fnFunction` to the {@link #event:loadPage loadPage} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
     */
    attachLoadPage(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:pageChanged pageChanged} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    attachPageChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Attaches event handler `fnFunction` to the {@link #event:unloadPage unloadPage} event of this `sap.m.Carousel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Carousel` itself.
     *
     * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content
     * of that page.
     */
    attachUnloadPage(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Carousel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $CarouselSettings extends $ControlSettings {
    /**
     * The height of the carousel. Note that when a percentage value is used, the height of the surrounding
     * container must be defined.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container
     * must be defined.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines whether the carousel should loop, i.e show the first page after the last page is reached and
     * vice versa.
     */
    loop?: boolean | PropertyBindingInfo;

    /**
     * Show or hide carousel's page indicator.
     */
    showPageIndicator?: boolean | PropertyBindingInfo;

    /**
     * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top,
     * sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default
     * value is sap.m.PlacementType.Bottom.
     */
    pageIndicatorPlacement?:
      | (PlacementType | keyof typeof PlacementType)
      | PropertyBindingInfo;

    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator
     * is not necessary any longer.
     *
     * Show or hide busy indicator in the carousel when loading pages after swipe.
     */
    showBusyIndicator?: boolean | PropertyBindingInfo;

    /**
     * Defines where the carousel's arrows are placed. Default is `sap.m.CarouselArrowsPlacement.Content` used
     * to place the arrows on the sides of the carousel. Alternatively `sap.m.CarouselArrowsPlacement.PageIndicator`
     * can be used to place the arrows on the sides of the page indicator.
     */
    arrowsPlacement?:
      | (CarouselArrowsPlacement | keyof typeof CarouselArrowsPlacement)
      | PropertyBindingInfo;

    /**
     * The content which the carousel displays.
     */
    pages?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.62
     *
     * Defines how many pages are displayed in the visible area of the `Carousel` control.
     *
     * **Note:** When this property is used, the `loop` property is ignored.
     */
    customLayout?: CarouselLayout;

    /**
     * Provides getter and setter for the currently displayed page. For the setter, argument may be the control
     * itself, which must be member of the carousel's page list, or the control's id. The getter will return
     * the control id
     */
    activePage?: Control | string;

    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
     */
    loadPage?: Function;

    /**
     * @deprecated (since 1.18.7) - Since 1.18.7 pages are no longer loaded or unloaded
     *
     * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content
     * of that page.
     */
    unloadPage?: Function;

    /**
     * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    pageChanged?: Function;

    /**
     * This event is fired before a carousel swipe has been completed. It is triggered both by physical swipe
     * events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId'
     * functions.
     */
    beforePageChanged?: Function;
  }
}

declare module "sap/m/CarouselLayout" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * @SINCE 1.62
   *
   * Applies a `sap.m.CarouselLayout` to a provided DOM element or Control.
   */
  export default class CarouselLayout extends ManagedObject {
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselLayoutSettings
    );
    /**
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CarouselLayoutSettings
    );

    /**
     * Creates a new subclass of class sap.m.CarouselLayout with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CarouselLayout>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.CarouselLayout.
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets current value of property {@link #getVisiblePagesCount visiblePagesCount}.
     *
     * Defines how many pages are displayed in the visible area of the `Carousel` control. Value should be a
     * positive number.
     *
     * **Note:** When this property is set to something different than the default value, the `loop` property
     * of `Carousel` is ignored.
     *
     * Default value is `1`.
     */
    getVisiblePagesCount(): int;
    /**
     * Sets a new value for property {@link #getVisiblePagesCount visiblePagesCount}.
     *
     * Defines how many pages are displayed in the visible area of the `Carousel` control. Value should be a
     * positive number.
     *
     * **Note:** When this property is set to something different than the default value, the `loop` property
     * of `Carousel` is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setVisiblePagesCount(
      /**
       * New value for property `visiblePagesCount`
       */
      iVisiblePagesCount?: int
    ): this;
  }

  export interface $CarouselLayoutSettings extends $ManagedObjectSettings {
    /**
     * Defines how many pages are displayed in the visible area of the `Carousel` control. Value should be a
     * positive number.
     *
     * **Note:** When this property is set to something different than the default value, the `loop` property
     * of `Carousel` is ignored.
     */
    visiblePagesCount?: int | PropertyBindingInfo;
  }
}

declare module "sap/m/CheckBox" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    TextAlign,
    TextDirection,
    ValueState,
    CSSSize,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Allows the user to set a binary value, such as true/false or yes/no for an item.
   *
   * Overview:
   *
   * The `CheckBox` control consists of a box and a label that describes its purpose. If it's checked, an
   * indicator is displayed inside the box.
   *
   * To select/deselect the `CheckBox`, the user has to click or tap the square box or its label. Clicking
   * or tapping toggles the `CheckBox` between checked and unchecked state. The `CheckBox` control only has
   * 3 states - checked, unchecked and partially selected.
   *
   * Usage:
   *
   * You can set the width of the element containing the box and the label manually with the use of the `width`
   * property. If the text exceeds the available width, it is truncated.
   *
   * **Note:** When `useEntireWidth` property is set to `true`, the value of the `width` property is applied
   * to the control as a whole (box and label). If `useEntireWidth` is set to `false`, the `width` is applied
   * to the label only.
   *
   * The touchable area for toggling the `CheckBox` ends where the text ends.
   *
   * If the width allows more space than the text requires, white space is added. The text can be positioned
   * manually in this space using the `textAlign` property.
   *
   * **Note:** Keep in mind that setting the `textAlign` property to `Right` can result in a large amount
   * of white space between the box and the text.
   *
   * You can disable the `CheckBox` by setting the `enabled` property to `false`, or use the `CheckBox` in
   * read-only mode by setting the `editable` property to false.
   *
   * **Note:** Disabled and read-only states shouldn't be used together.
   */
  export default class CheckBox extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new `CheckBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/checkbox/ Check Box}
     */
    constructor(
      /**
       * The Initial settings for the new control
       */
      mSettings?: $CheckBoxSettings
    );
    /**
     * Constructor for a new `CheckBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/checkbox/ Check Box}
     */
    constructor(
      /**
       * The ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * The Initial settings for the new control
       */
      mSettings?: $CheckBoxSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.CheckBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.CheckBox` itself.
     *
     * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.CheckBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.CheckBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.CheckBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CheckBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Checks whether the CheckBox is marked or not .
         */
        selected?: boolean;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Gets current value of property {@link #getActiveHandling activeHandling}.
     *
     * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active
     * state. Default value is 'true'
     *
     * Default value is `true`.
     */
    getActiveHandling(): boolean;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getDisplayOnly displayOnly}.
     *
     * Determines whether the `CheckBox` is in display only state.
     *
     * When set to `true`, the `CheckBox` is not interactive, not editable, not focusable and not in the tab
     * chain. This setting is used for forms in review mode.
     *
     *  When the property `enabled` is set to `false` this property has no effect.
     *
     * Default value is `false`.
     */
    getDisplayOnly(): boolean;
    /**
     * @SINCE 1.25
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Specifies whether the user shall be allowed to edit the state of the checkbox
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to
     * the theme.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns a metadata object for class sap.m.CheckBox.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server
     * via submit.
     */
    getName(): string;
    /**
     * @SINCE 1.58
     *
     * Gets current value of property {@link #getPartiallySelected partiallySelected}.
     *
     * Determines whether the `CheckBox` is displayed as partially selected.
     *
     * **Note:** This property leads only to visual change of the checkbox and the state cannot be achieved
     * by user interaction. The visual state depends on the value of the `selected` property:
     * 	 - If `selected` = `true` and `partiallySelected` = `true`, the control is displayed as partially selected
     *
     * 	 - If `selected` = `true` and `partiallySelected` = `false`, the control is displayed as selected
     * 	 - If `selected` = `false`, the control is displayed as not selected regardless of what is set for `partiallySelected`
     *
     *
     * Default value is `false`.
     */
    getPartiallySelected(): boolean;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Determines whether the `CheckBox` is selected (checked).
     *
     * When this property is set to `true`, the control is displayed as selected, unless the value of the `partiallySelected`
     * property is also set to `true`. In this case, the control is displayed as partially selected.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * @SINCE 1.22
     *
     * Returns the CheckBox`s tab index.
     */
    getTabIndex(): int;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text displayed next to the checkbox
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and
     * "Right".
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getUseEntireWidth useEntireWidth}.
     *
     * Indicates if the given width will be applied to the control as a whole or to its label only.
     *
     * **Note:** by default the width is set to the label
     *
     * Default value is `false`.
     */
    getUseEntireWidth(): boolean;
    /**
     * @SINCE 1.38
     *
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and
     * 'Information'.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Determines the total width of the control or the width of its label only, depending on the value of `useEntireWidth`.
     *
     * **Note:** When `useEntireWidth` is set to `true`, `width` is applied to the control as a whole (checkbox
     * and label). Otherwise, `width` is applied to the label only.
     *
     * Default value is `empty string`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Determines whether the label's text is wrapped.
     *
     * When set to `false` (default), the label's text is truncated with ellipsis at the end.
     *
     * Default value is `false`.
     */
    getWrapping(): boolean;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveHandling activeHandling}.
     *
     * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active
     * state. Default value is 'true'
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setActiveHandling(
      /**
       * New value for property `activeHandling`
       */
      bActiveHandling?: boolean
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getDisplayOnly displayOnly}.
     *
     * Determines whether the `CheckBox` is in display only state.
     *
     * When set to `true`, the `CheckBox` is not interactive, not editable, not focusable and not in the tab
     * chain. This setting is used for forms in review mode.
     *
     *  When the property `enabled` is set to `false` this property has no effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisplayOnly(
      /**
       * New value for property `displayOnly`
       */
      bDisplayOnly?: boolean
    ): this;
    /**
     * @SINCE 1.25
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Specifies whether the user shall be allowed to edit the state of the checkbox
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to
     * the theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server
     * via submit.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * @SINCE 1.58
     *
     * Sets a new value for property {@link #getPartiallySelected partiallySelected}.
     *
     * Determines whether the `CheckBox` is displayed as partially selected.
     *
     * **Note:** This property leads only to visual change of the checkbox and the state cannot be achieved
     * by user interaction. The visual state depends on the value of the `selected` property:
     * 	 - If `selected` = `true` and `partiallySelected` = `true`, the control is displayed as partially selected
     *
     * 	 - If `selected` = `true` and `partiallySelected` = `false`, the control is displayed as selected
     * 	 - If `selected` = `false`, the control is displayed as not selected regardless of what is set for `partiallySelected`
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPartiallySelected(
      /**
       * New value for property `partiallySelected`
       */
      bPartiallySelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Determines whether the `CheckBox` is selected (checked).
     *
     * When this property is set to `true`, the control is displayed as selected, unless the value of the `partiallySelected`
     * property is also set to `true`. In this case, the control is displayed as partially selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the tab index of the control
     */
    setTabIndex(
      /**
       * The tab index should be greater than or equal -1
       */
      iTabIndex: int
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text displayed next to the checkbox
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and
     * "Right".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getUseEntireWidth useEntireWidth}.
     *
     * Indicates if the given width will be applied to the control as a whole or to its label only.
     *
     * **Note:** by default the width is set to the label
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUseEntireWidth(
      /**
       * New value for property `useEntireWidth`
       */
      bUseEntireWidth?: boolean
    ): this;
    /**
     * @SINCE 1.38
     *
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and
     * 'Information'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Determines the total width of the control or the width of its label only, depending on the value of `useEntireWidth`.
     *
     * **Note:** When `useEntireWidth` is set to `true`, `width` is applied to the control as a whole (checkbox
     * and label). Otherwise, `width` is applied to the label only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Determines whether the label's text is wrapped.
     *
     * When set to `false` (default), the label's text is truncated with ellipsis at the end.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.CheckBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.CheckBox` itself.
     *
     * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.CheckBox` itself
       */
      oListener?: object
    ): this;
  }

  export interface $CheckBoxSettings extends $ControlSettings {
    /**
     * Determines whether the `CheckBox` is selected (checked).
     *
     * When this property is set to `true`, the control is displayed as selected, unless the value of the `partiallySelected`
     * property is also set to `true`. In this case, the control is displayed as partially selected.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.58
     *
     * Determines whether the `CheckBox` is displayed as partially selected.
     *
     * **Note:** This property leads only to visual change of the checkbox and the state cannot be achieved
     * by user interaction. The visual state depends on the value of the `selected` property:
     * 	 - If `selected` = `true` and `partiallySelected` = `true`, the control is displayed as partially selected
     *
     * 	 - If `selected` = `true` and `partiallySelected` = `false`, the control is displayed as selected
     * 	 - If `selected` = `false`, the control is displayed as not selected regardless of what is set for `partiallySelected`
     */
    partiallySelected?: boolean | PropertyBindingInfo;

    /**
     * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to
     * the theme.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server
     * via submit.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines the text displayed next to the checkbox
     */
    text?: string | PropertyBindingInfo;

    /**
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and
     * "Right".
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Determines the total width of the control or the width of its label only, depending on the value of `useEntireWidth`.
     *
     * **Note:** When `useEntireWidth` is set to `true`, `width` is applied to the control as a whole (checkbox
     * and label). Otherwise, `width` is applied to the label only.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Indicates if the given width will be applied to the control as a whole or to its label only.
     *
     * **Note:** by default the width is set to the label
     */
    useEntireWidth?: boolean | PropertyBindingInfo;

    /**
     * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active
     * state. Default value is 'true'
     */
    activeHandling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.25
     *
     * Specifies whether the user shall be allowed to edit the state of the checkbox
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38
     *
     * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and
     * 'Information'.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines whether the `CheckBox` is in display only state.
     *
     * When set to `true`, the `CheckBox` is not interactive, not editable, not focusable and not in the tab
     * chain. This setting is used for forms in review mode.
     *
     *  When the property `enabled` is set to `false` this property has no effect.
     */
    displayOnly?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines whether the label's text is wrapped.
     *
     * When set to `false` (default), the label's text is truncated with ellipsis at the end.
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
     */
    select?: Function;
  }
}

declare module "sap/m/ColorPalette" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSColor } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.54
   *
   * Represents a predefined range of colors for easier selection.
   *
   * Overview: The `ColorPalette` provides the users with a range of predefined colors.
   *
   * You can customize them with the use of the `colors` property. You can specify a `defaultColor` and display
   * a "Default color" button for the user to choose directly. You can display a "More colors..." button that
   * opens an additional color picker for the user to choose specific colors that are not present in the predefined
   * range.
   *
   * Usage:
   *
   * The palette is intended for users, who don't want to check and remember the different values of the colors
   * and spend large amount of time to configure the right color through the color picker.
   *
   * The control can be embedded in a form or can be opened as popover (by use of thin wrapper control `sap.m.ColorPalettePopover`).
   */
  export default class ColorPalette extends Control {
    /**
     * Constructor for a new `ColorPalette`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link sap.m.ColorPalettePopover}
     *
     * **Note:** The {@link sap.ui.unified.ColorPicker} is used internally only if the `ColorPicker`
     * is opened (not used for the initial rendering). If the `sap.ui.unified` library is not loaded
     * before the `ColorPicker` is opened, it will be loaded upon opening. This could lead to a waiting
     * time when the `ColorPicker` is opened for the first time. To prevent this, apps using the
     * `ColorPalette` should also load the `sap.ui.unified` library.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteSettings
    );
    /**
     * Constructor for a new `ColorPalette`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link sap.m.ColorPalettePopover}
     *
     * **Note:** The {@link sap.ui.unified.ColorPicker} is used internally only if the `ColorPicker`
     * is opened (not used for the initial rendering). If the `sap.ui.unified` library is not loaded
     * before the `ColorPicker` is opened, it will be loaded upon opening. This could lead to a waiting
     * time when the `ColorPicker` is opened for the first time. To prevent this, apps using the
     * `ColorPalette` should also load the `sap.ui.unified` library.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPaletteSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalette` itself.
     *
     * Fired when the user selects a color.
     */
    attachColorSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalette` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalette` itself.
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalette` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalette`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachColorSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalette`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ColorPalette with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColorPalette>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:colorSelect colorSelect} to attached listeners.
     */
    fireColorSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The color that is returned when user chooses the "Default color" button.
         */
        value?: CSSColor;
        /**
         * Denotes if the color has been chosen by selecting the "Default Color" button (true or false)
         */
        defaultAction?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.85
     *
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Parameter containing the RED value (0-255).
         */
        r?: int;
        /**
         * Parameter containing the GREEN value (0-255).
         */
        g?: int;
        /**
         * Parameter containing the BLUE value (0-255).
         */
        b?: int;
        /**
         * Parameter containing the HUE value (0-360).
         */
        h?: int;
        /**
         * Parameter containing the SATURATION value (0-100).
         */
        s?: int;
        /**
         * Parameter containing the VALUE value (0-100).
         */
        v?: int;
        /**
         * Parameter containing the LIGHTNESS value (0-100).
         */
        l?: int;
        /**
         * Parameter containing the Hexadecimal string (#FFFFFF).
         */
        hex?: string;
        /**
         * Parameter containing the alpha value (transparency).
         */
        alpha?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getColors colors}.
     *
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     *
     * Default value is `["gold", "darkorange", "indianred", "darkmagenta", "cornflowerblue", "deepskyblue",
     * "darkcyan", "olivedrab", "darkslategray", "azure", "white", "lightgray", "darkgray", "dimgray", "black"]`.
     */
    getColors(): CSSColor[];
    /**
     * Returns a metadata object for class sap.m.ColorPalette.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Sets a selected color for the ColorPicker control.
     */
    setColorPickerSelectedColor(
      /**
       * the selected color
       */
      color: CSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getColors colors}.
     *
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `["gold", "darkorange", "indianred", "darkmagenta", "cornflowerblue", "deepskyblue",
     * "darkcyan", "olivedrab", "darkslategray", "azure", "white", "lightgray", "darkgray", "dimgray", "black"]`.
     */
    setColors(
      /**
       * New value for property `colors`
       */
      sColors?: CSSColor[]
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalette` itself.
     *
     * Fired when the user selects a color.
     */
    attachColorSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalette` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalette`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalette` itself.
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalette` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ColorPaletteSettings extends $ControlSettings {
    /**
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     */
    colors?: CSSColor[] | PropertyBindingInfo;

    /**
     * Fired when the user selects a color.
     */
    colorSelect?: Function;

    /**
     * @SINCE 1.85
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker
     */
    liveChange?: Function;
  }
}

declare module "sap/m/ColorPalettePopover" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSColor } from "sap/ui/core/library";

  import ColorPickerDisplayMode from "sap/ui/unified/ColorPickerDisplayMode";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.54
   *
   * A thin wrapper over {@link sap.m.ColorPalette} allowing the latter to be used in a popover.
   */
  export default class ColorPalettePopover extends Control {
    /**
     * Constructor for a new `ColorPalettePopover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPalettePopoverSettings
    );
    /**
     * Constructor for a new `ColorPalettePopover`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColorPalettePopoverSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalettePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalettePopover` itself.
     *
     * Fired when the user selects a color.
     */
    attachColorSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalettePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalettePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalettePopover` itself.
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker of the ColorPalette
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalettePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the `ColorPalettePopover`.
     */
    close(): Control;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalettePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachColorSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalettePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ColorPalettePopover with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColorPalettePopover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:colorSelect colorSelect} to attached listeners.
     */
    fireColorSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The color that is returned when user chooses the "Default Color" button.
         */
        value?: CSSColor;
        /**
         * Denotes if the color has been chosen by selecting the "Default Color" button (true or false).
         */
        defaultAction?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.85
     *
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Parameter containing the RED value (0-255).
         */
        r?: int;
        /**
         * Parameter containing the GREEN value (0-255).
         */
        g?: int;
        /**
         * Parameter containing the BLUE value (0-255).
         */
        b?: int;
        /**
         * Parameter containing the HUE value (0-360).
         */
        h?: int;
        /**
         * Parameter containing the SATURATION value (0-100).
         */
        s?: int;
        /**
         * Parameter containing the VALUE value (0-100).
         */
        v?: int;
        /**
         * Parameter containing the LIGHTNESS value (0-100).
         */
        l?: int;
        /**
         * Parameter containing the Hexadecimal string (#FFFFFF).
         */
        hex?: string;
        /**
         * Parameter containing the alpha value (transparency).
         */
        alpha?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getColors colors}.
     *
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     *
     * Default value is `["gold", "darkorange", "indianred", "darkmagenta", "cornflowerblue", "deepskyblue",
     * "darkcyan", "olivedrab", "darkslategray", "azure", "white", "lightgray", "darkgray", "dimgray", "black"]`.
     */
    getColors(): CSSColor[];
    /**
     * Gets current value of property {@link #getDefaultColor defaultColor}.
     *
     * The color, which the app developer will receive when end-user chooses the "Default color" button. See
     * event {@link #event:colorSelect colorSelect}.
     */
    getDefaultColor(): CSSColor;
    /**
     * @SINCE 1.70
     *
     * Gets current value of property {@link #getDisplayMode displayMode}.
     *
     * Determines the `displayMode` of the `ColorPicker` among three types - Default, Large and Simplified
     *
     * Default value is `Default`.
     */
    getDisplayMode():
      | ColorPickerDisplayMode
      | keyof typeof ColorPickerDisplayMode;
    /**
     * Returns a metadata object for class sap.m.ColorPalettePopover.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowDefaultColorButton showDefaultColorButton}.
     *
     * Indicates if the button for default color selection is available.
     *
     * Default value is `true`.
     */
    getShowDefaultColorButton(): boolean;
    /**
     * Gets current value of property {@link #getShowMoreColorsButton showMoreColorsButton}.
     *
     * Denotes if the color has been chosen by selecting the "Default Color" button (true or false)
     *
     * Default value is `true`.
     */
    getShowMoreColorsButton(): boolean;
    /**
     * @SINCE 1.74
     *
     * Gets current value of property {@link #getShowRecentColorsSection showRecentColorsSection}.
     *
     * Indicates if the Recent Colors section is available
     *
     * Default value is `true`.
     */
    getShowRecentColorsSection(): boolean;
    /**
     * Sets a selected color for the ColorPicker control.
     */
    setColorPickerSelectedColor(
      /**
       * the selected color
       */
      color: CSSColor
    ): this;
    /**
     * Sets a new value for property {@link #getColors colors}.
     *
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `["gold", "darkorange", "indianred", "darkmagenta", "cornflowerblue", "deepskyblue",
     * "darkcyan", "olivedrab", "darkslategray", "azure", "white", "lightgray", "darkgray", "dimgray", "black"]`.
     */
    setColors(
      /**
       * New value for property `colors`
       */
      sColors?: CSSColor[]
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultColor defaultColor}.
     *
     * The color, which the app developer will receive when end-user chooses the "Default color" button. See
     * event {@link #event:colorSelect colorSelect}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDefaultColor(
      /**
       * New value for property `defaultColor`
       */
      sDefaultColor?: CSSColor
    ): this;
    /**
     * @SINCE 1.70
     *
     * Sets a new value for property {@link #getDisplayMode displayMode}.
     *
     * Determines the `displayMode` of the `ColorPicker` among three types - Default, Large and Simplified
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setDisplayMode(
      /**
       * New value for property `displayMode`
       */
      sDisplayMode?:
        | ColorPickerDisplayMode
        | keyof typeof ColorPickerDisplayMode
    ): this;
    /**
     * Sets a new value for property {@link #getShowDefaultColorButton showDefaultColorButton}.
     *
     * Indicates if the button for default color selection is available.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowDefaultColorButton(
      /**
       * New value for property `showDefaultColorButton`
       */
      bShowDefaultColorButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowMoreColorsButton showMoreColorsButton}.
     *
     * Denotes if the color has been chosen by selecting the "Default Color" button (true or false)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowMoreColorsButton(
      /**
       * New value for property `showMoreColorsButton`
       */
      bShowMoreColorsButton?: boolean
    ): this;
    /**
     * @SINCE 1.74
     *
     * Sets a new value for property {@link #getShowRecentColorsSection showRecentColorsSection}.
     *
     * Indicates if the Recent Colors section is available
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowRecentColorsSection(
      /**
       * New value for property `showRecentColorsSection`
       */
      bShowRecentColorsSection?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:colorSelect colorSelect} event of this `sap.m.ColorPalettePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalettePopover` itself.
     *
     * Fired when the user selects a color.
     */
    attachColorSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalettePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.85
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.ColorPalettePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ColorPalettePopover` itself.
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker of the ColorPalette
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ColorPalettePopover` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ColorPalettePopoverSettings extends $ControlSettings {
    /**
     * The color, which the app developer will receive when end-user chooses the "Default color" button. See
     * event {@link #event:colorSelect colorSelect}.
     */
    defaultColor?: CSSColor | PropertyBindingInfo;

    /**
     * Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
     */
    colors?: CSSColor[] | PropertyBindingInfo;

    /**
     * Indicates if the button for default color selection is available.
     */
    showDefaultColorButton?: boolean | PropertyBindingInfo;

    /**
     * Denotes if the color has been chosen by selecting the "Default Color" button (true or false)
     */
    showMoreColorsButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.74
     *
     * Indicates if the Recent Colors section is available
     */
    showRecentColorsSection?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.70
     *
     * Determines the `displayMode` of the `ColorPicker` among three types - Default, Large and Simplified
     */
    displayMode?:
      | (ColorPickerDisplayMode | keyof typeof ColorPickerDisplayMode)
      | PropertyBindingInfo;

    /**
     * Fired when the user selects a color.
     */
    colorSelect?: Function;

    /**
     * @SINCE 1.85
     *
     * Fired when the value is changed by user interaction in the internal ColorPicker of the ColorPalette
     */
    liveChange?: Function;
  }
}

declare module "sap/m/Column" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import {
    TextAlign,
    Priority,
    SortOrder,
    VerticalAlign,
    CSSSize,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PopinDisplay } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The `sap.m.Column` allows to define column specific properties that will be applied when rendering the
   * `sap.m.Table`.
   *
   * See section "{@link topic:6f778a805bc3453dbb66e246d8271839 Defining Column Width}" in the documentation
   * to understand how to define the `width` property of the `sap.m.Column` to render a `sap.m.Table` control
   * properly.
   */
  export default class Column extends UI5Element {
    /**
     * Constructor for a new Column.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ColumnSettings
    );
    /**
     * Constructor for a new Column.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ColumnSettings
    );

    /**
     * @SINCE 1.20.4
     *
     * Clears the last value of the column if mergeDuplicates property is true
     */
    clearLastValue(): this;
    /**
     * Destroys the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * Destroys the header in the aggregation {@link #getHeader header}.
     */
    destroyHeader(): this;
    /**
     * Creates a new subclass of class sap.m.Column with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Column>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.76
     *
     * Gets current value of property {@link #getAutoPopinWidth autoPopinWidth}.
     *
     * Defines the auto pop-in width for the column.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the `autoPopinWidth` property
     * is used to calculate the `minScreenWidth` property of the column in case a fixed width is not set for
     * the column. See {@link sap.m.Column#getWidth} and {@link sap.m.Table#getAutoPopinMode}. **Note:** A float
     * value is set for the `autoPopinWidth` property which is internally treated as a rem value.
     *
     * Default value is `8`.
     */
    getAutoPopinWidth(): float;
    /**
     * Returns CSS alignment according to column hAlign setting or given parameter for Begin/End values checks
     * the locale settings
     */
    getCssAlign(
      /**
       * TextAlign enumeration
       */
      sAlign?: String
    ): String;
    /**
     * Gets current value of property {@link #getDemandPopin demandPopin}.
     *
     * According to your minScreenWidth settings, the column can be hidden in different screen sizes. Setting
     * this property to true, shows this column as pop-in instead of hiding it. **Note:** This property gets
     * overwritten if the `sap.m.Table` control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     *
     * Default value is `false`.
     */
    getDemandPopin(): boolean;
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * Control to be displayed in the column footer.
     */
    getFooter(): Control;
    /**
     * Gets current value of property {@link #getHAlign hAlign}.
     *
     * Defines the horizontal alignment of the column content.
     *
     * **Note:** Text controls with a `textAlign` property inherits the horizontal alignment.
     *
     * Default value is `Begin`.
     */
    getHAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets content of aggregation {@link #getHeader header}.
     *
     * Control to be displayed in the column header.
     */
    getHeader(): Control;
    /**
     * @SINCE 1.76
     *
     * Gets current value of property {@link #getImportance importance}.
     *
     * Defines the column importance.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the column importance is taken
     * into consideration for calculating the `minScreenWidth` property and for setting the `demandPopin` property
     * of the column. See {@link sap.m.Table#getAutoPopinMode}
     *
     * Default value is `"None"`.
     */
    getImportance(): Priority | keyof typeof Priority;
    /**
     * Gets the initial order of the column
     */
    getInitialOrder(): int;
    /**
     * @SINCE 1.16
     *
     * Gets the last value of the column
     */
    getLastValue(): void;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getMergeDuplicates mergeDuplicates}.
     *
     * Set `true` to merge repeating/duplicate cells into one cell block. See `mergeFunctionName` property to
     * customize.
     *
     * **Note:** Merging only happens when rendering the `sap.m.Table` control, subsequent changes on the cell
     * or item do not have any effect on the merged state of the cells, therefore this feature should not be
     * used together with two-way binding. This property is ignored if any column is configured to be shown
     * as a pop-in. Merging is not supported if the `items` aggregation of the `sap.m.Table` control is bound
     * to an {@link sap.ui.model.odata.v4.ODataModel OData V4 model}.
     *
     * Default value is `false`.
     */
    getMergeDuplicates(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getMergeFunctionName mergeFunctionName}.
     *
     * Defines the control serialization function if `mergeDuplicates` property is set to `true`. The control
     * itself uses this function to compare values of two repeating cells. Default value "getText" is suitable
     * for `sap.m.Label` and `sap.m.Text` controls but for the `sap.ui.core.Icon` control "getSrc" function
     * should be used to merge icons. **Note:** You can pass one string parameter to given function after "#"
     * sign. e.g. "data#myparameter"
     *
     * Default value is `'getText'`.
     */
    getMergeFunctionName(): string;
    /**
     * Returns a metadata object for class sap.m.Column.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMinScreenWidth minScreenWidth}.
     *
     * Defines the minimum screen width to show or hide this column. By default column is always shown. The
     * responsive behavior of the `sap.m.Table` is determined by this property. As an example by setting `minScreenWidth`
     * property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile.
     * As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the {@link sap.m.ScreenSize}
     * enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....). Please also see `demandPopin`
     * property for further responsive design options. **Note:** This property gets overwritten if the `sap.m.Table`
     * control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     */
    getMinScreenWidth(): string;
    /**
     * Gets the order of the column
     */
    getOrder(): int;
    /**
     * @SINCE 1.13.2
     *
     * Gets current value of property {@link #getPopinDisplay popinDisplay}.
     *
     * Defines enumerated display options for the pop-in.
     *
     * Default value is `Block`.
     */
    getPopinDisplay(): PopinDisplay | keyof typeof PopinDisplay;
    /**
     * @deprecated (since 1.14) - Use popinDisplay property instead.
     *
     * Gets current value of property {@link #getPopinHAlign popinHAlign}.
     *
     * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     *
     * **Note:** Controls with a text align do not inherit the horizontal alignment.
     *
     * Default value is `Begin`.
     */
    getPopinHAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.61
     *
     * Gets current value of property {@link #getSortIndicator sortIndicator}.
     *
     * Defines if a column is sorted by setting the sort indicator for this column.
     *
     * **Note:** Defining this property does not trigger the sorting.
     *
     * Default value is `None`.
     */
    getSortIndicator(): SortOrder | keyof typeof SortOrder;
    /**
     * Gets current value of property {@link #getStyleClass styleClass}.
     *
     * CSS class name for column contents(header, cells and footer of column). This property can be used for
     * different column styling. If column is shown as pop-in then this class name is applied to related pop-in
     * row.
     */
    getStyleClass(): string;
    /**
     * Gets current value of property {@link #getVAlign vAlign}.
     *
     * Defines the vertical alignment of the cells in a column. This property does not affect the vertical alignment
     * of header and footer.
     *
     * Default value is `Inherit`.
     */
    getVAlign(): VerticalAlign | keyof typeof VerticalAlign;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies whether or not the column is visible. Invisible columns are not rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the column. If you leave it empty then this column covers the remaining space. **Note:**
     * When setting `autoPopinMode=true` on the table, the columns with a fixed width must either be in px,
     * rem, or em as the table internally calculates the `minScreenWidth` property for the column. If a column
     * has a fixed width, then this width is used to calculate the `minScreenWidth` for the `autoPopinMode`.
     * If a column has a flexible width, such as % or auto, the `autoPopinWidth` property is used to calculate
     * the `minScreenWidth`.
     */
    getWidth(): CSSSize;
    /**
     * Determines whether the column will be hidden via media queries or not
     */
    isHidden(): void;
    /**
     * Determines whether the column will be shown as pop-in or not
     */
    isPopin(): void;
    /**
     * @SINCE 1.16
     *
     * Gets called from the Table when the all items are removed
     */
    onItemsRemoved(): void;
    /**
     * @SINCE 1.76
     *
     * Sets a new value for property {@link #getAutoPopinWidth autoPopinWidth}.
     *
     * Defines the auto pop-in width for the column.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the `autoPopinWidth` property
     * is used to calculate the `minScreenWidth` property of the column in case a fixed width is not set for
     * the column. See {@link sap.m.Column#getWidth} and {@link sap.m.Table#getAutoPopinMode}. **Note:** A float
     * value is set for the `autoPopinWidth` property which is internally treated as a rem value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `8`.
     */
    setAutoPopinWidth(
      /**
       * New value for property `autoPopinWidth`
       */
      fAutoPopinWidth?: float
    ): this;
    /**
     * Sets a new value for property {@link #getDemandPopin demandPopin}.
     *
     * According to your minScreenWidth settings, the column can be hidden in different screen sizes. Setting
     * this property to true, shows this column as pop-in instead of hiding it. **Note:** This property gets
     * overwritten if the `sap.m.Table` control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDemandPopin(
      /**
       * New value for property `demandPopin`
       */
      bDemandPopin?: boolean
    ): this;
    /**
     * Display or hide the column from given table This does not set the visibility property of the column
     */
    setDisplay(
      /**
       * Table DOM reference
       */
      oTableDomRef: Object,
      /**
       * whether visible or not
       */
      bDisplay?: boolean
    ): void;
    /**
     * Sets the aggregated {@link #getFooter footer}.
     */
    setFooter(
      /**
       * The footer to set
       */
      oFooter: Control
    ): this;
    /**
     * Sets a new value for property {@link #getHAlign hAlign}.
     *
     * Defines the horizontal alignment of the column content.
     *
     * **Note:** Text controls with a `textAlign` property inherits the horizontal alignment.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setHAlign(
      /**
       * New value for property `hAlign`
       */
      sHAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets the aggregated {@link #getHeader header}.
     */
    setHeader(
      /**
       * The header to set
       */
      oHeader: Control
    ): this;
    /**
     * @SINCE 1.76
     *
     * Sets a new value for property {@link #getImportance importance}.
     *
     * Defines the column importance.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the column importance is taken
     * into consideration for calculating the `minScreenWidth` property and for setting the `demandPopin` property
     * of the column. See {@link sap.m.Table#getAutoPopinMode}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     */
    setImportance(
      /**
       * New value for property `importance`
       */
      sImportance?: Priority | keyof typeof Priority
    ): this;
    /**
     * Sets the visible column index Negative index values can be used to clear
     */
    setIndex(
      /**
       * index of the visible column
       */
      nIndex: int
    ): void;
    /**
     * Sets the initial order of the column
     */
    setInitialOrder(
      /**
       * initial order of the column
       */
      nOrder: int
    ): void;
    /**
     * @SINCE 1.16
     *
     * Sets the last value of the column if mergeDuplicates property is true
     */
    setLastValue(
      /**
       * Any Value
       */
      value: any
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getMergeDuplicates mergeDuplicates}.
     *
     * Set `true` to merge repeating/duplicate cells into one cell block. See `mergeFunctionName` property to
     * customize.
     *
     * **Note:** Merging only happens when rendering the `sap.m.Table` control, subsequent changes on the cell
     * or item do not have any effect on the merged state of the cells, therefore this feature should not be
     * used together with two-way binding. This property is ignored if any column is configured to be shown
     * as a pop-in. Merging is not supported if the `items` aggregation of the `sap.m.Table` control is bound
     * to an {@link sap.ui.model.odata.v4.ODataModel OData V4 model}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setMergeDuplicates(
      /**
       * New value for property `mergeDuplicates`
       */
      bMergeDuplicates?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getMergeFunctionName mergeFunctionName}.
     *
     * Defines the control serialization function if `mergeDuplicates` property is set to `true`. The control
     * itself uses this function to compare values of two repeating cells. Default value "getText" is suitable
     * for `sap.m.Label` and `sap.m.Text` controls but for the `sap.ui.core.Icon` control "getSrc" function
     * should be used to merge icons. **Note:** You can pass one string parameter to given function after "#"
     * sign. e.g. "data#myparameter"
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'getText'`.
     */
    setMergeFunctionName(
      /**
       * New value for property `mergeFunctionName`
       */
      sMergeFunctionName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMinScreenWidth minScreenWidth}.
     *
     * Defines the minimum screen width to show or hide this column. By default column is always shown. The
     * responsive behavior of the `sap.m.Table` is determined by this property. As an example by setting `minScreenWidth`
     * property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile.
     * As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the {@link sap.m.ScreenSize}
     * enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....). Please also see `demandPopin`
     * property for further responsive design options. **Note:** This property gets overwritten if the `sap.m.Table`
     * control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMinScreenWidth(
      /**
       * New value for property `minScreenWidth`
       */
      sMinScreenWidth?: string
    ): this;
    /**
     * Sets the order of the column Does not do the visual effect Table should be invalidate to re-render
     */
    setOrder(
      /**
       * order of the column
       */
      nOrder: int
    ): void;
    /**
     * @SINCE 1.13.2
     *
     * Sets a new value for property {@link #getPopinDisplay popinDisplay}.
     *
     * Defines enumerated display options for the pop-in.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Block`.
     */
    setPopinDisplay(
      /**
       * New value for property `popinDisplay`
       */
      sPopinDisplay?: PopinDisplay | keyof typeof PopinDisplay
    ): this;
    /**
     * @deprecated (since 1.14) - Use popinDisplay property instead.
     *
     * Sets a new value for property {@link #getPopinHAlign popinHAlign}.
     *
     * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     *
     * **Note:** Controls with a text align do not inherit the horizontal alignment.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setPopinHAlign(
      /**
       * New value for property `popinHAlign`
       */
      sPopinHAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.61
     *
     * Sets a new value for property {@link #getSortIndicator sortIndicator}.
     *
     * Defines if a column is sorted by setting the sort indicator for this column.
     *
     * **Note:** Defining this property does not trigger the sorting.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setSortIndicator(
      /**
       * New value for property `sortIndicator`
       */
      sSortIndicator?: SortOrder | keyof typeof SortOrder
    ): this;
    /**
     * Sets a new value for property {@link #getStyleClass styleClass}.
     *
     * CSS class name for column contents(header, cells and footer of column). This property can be used for
     * different column styling. If column is shown as pop-in then this class name is applied to related pop-in
     * row.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setStyleClass(
      /**
       * New value for property `styleClass`
       */
      sStyleClass?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVAlign vAlign}.
     *
     * Defines the vertical alignment of the cells in a column. This property does not affect the vertical alignment
     * of header and footer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setVAlign(
      /**
       * New value for property `vAlign`
       */
      sVAlign?: VerticalAlign | keyof typeof VerticalAlign
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies whether or not the column is visible. Invisible columns are not rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the column. If you leave it empty then this column covers the remaining space. **Note:**
     * When setting `autoPopinMode=true` on the table, the columns with a fixed width must either be in px,
     * rem, or em as the table internally calculates the `minScreenWidth` property for the column. If a column
     * has a fixed width, then this width is used to calculate the `minScreenWidth` for the `autoPopinMode`.
     * If a column has a flexible width, such as % or auto, the `autoPopinWidth` property is used to calculate
     * the `minScreenWidth`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ColumnSettings extends $ElementSettings {
    /**
     * Defines the width of the column. If you leave it empty then this column covers the remaining space. **Note:**
     * When setting `autoPopinMode=true` on the table, the columns with a fixed width must either be in px,
     * rem, or em as the table internally calculates the `minScreenWidth` property for the column. If a column
     * has a fixed width, then this width is used to calculate the `minScreenWidth` for the `autoPopinMode`.
     * If a column has a flexible width, such as % or auto, the `autoPopinWidth` property is used to calculate
     * the `minScreenWidth`.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the horizontal alignment of the column content.
     *
     * **Note:** Text controls with a `textAlign` property inherits the horizontal alignment.
     */
    hAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Defines the vertical alignment of the cells in a column. This property does not affect the vertical alignment
     * of header and footer.
     */
    vAlign?: (VerticalAlign | keyof typeof VerticalAlign) | PropertyBindingInfo;

    /**
     * CSS class name for column contents(header, cells and footer of column). This property can be used for
     * different column styling. If column is shown as pop-in then this class name is applied to related pop-in
     * row.
     */
    styleClass?: string | PropertyBindingInfo;

    /**
     * Specifies whether or not the column is visible. Invisible columns are not rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Defines the minimum screen width to show or hide this column. By default column is always shown. The
     * responsive behavior of the `sap.m.Table` is determined by this property. As an example by setting `minScreenWidth`
     * property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile.
     * As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the {@link sap.m.ScreenSize}
     * enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....). Please also see `demandPopin`
     * property for further responsive design options. **Note:** This property gets overwritten if the `sap.m.Table`
     * control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     */
    minScreenWidth?: string | PropertyBindingInfo;

    /**
     * According to your minScreenWidth settings, the column can be hidden in different screen sizes. Setting
     * this property to true, shows this column as pop-in instead of hiding it. **Note:** This property gets
     * overwritten if the `sap.m.Table` control is configured with `autoPopinMode=true`. See {@link sap.m.Table#getAutoPopinMode}
     */
    demandPopin?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.14) - Use popinDisplay property instead.
     *
     * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     *
     * **Note:** Controls with a text align do not inherit the horizontal alignment.
     */
    popinHAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.13.2
     *
     * Defines enumerated display options for the pop-in.
     */
    popinDisplay?:
      | (PopinDisplay | keyof typeof PopinDisplay)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Set `true` to merge repeating/duplicate cells into one cell block. See `mergeFunctionName` property to
     * customize.
     *
     * **Note:** Merging only happens when rendering the `sap.m.Table` control, subsequent changes on the cell
     * or item do not have any effect on the merged state of the cells, therefore this feature should not be
     * used together with two-way binding. This property is ignored if any column is configured to be shown
     * as a pop-in. Merging is not supported if the `items` aggregation of the `sap.m.Table` control is bound
     * to an {@link sap.ui.model.odata.v4.ODataModel OData V4 model}.
     */
    mergeDuplicates?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Defines the control serialization function if `mergeDuplicates` property is set to `true`. The control
     * itself uses this function to compare values of two repeating cells. Default value "getText" is suitable
     * for `sap.m.Label` and `sap.m.Text` controls but for the `sap.ui.core.Icon` control "getSrc" function
     * should be used to merge icons. **Note:** You can pass one string parameter to given function after "#"
     * sign. e.g. "data#myparameter"
     */
    mergeFunctionName?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.61
     *
     * Defines if a column is sorted by setting the sort indicator for this column.
     *
     * **Note:** Defining this property does not trigger the sorting.
     */
    sortIndicator?: (SortOrder | keyof typeof SortOrder) | PropertyBindingInfo;

    /**
     * @SINCE 1.76
     *
     * Defines the column importance.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the column importance is taken
     * into consideration for calculating the `minScreenWidth` property and for setting the `demandPopin` property
     * of the column. See {@link sap.m.Table#getAutoPopinMode}
     */
    importance?: (Priority | keyof typeof Priority) | PropertyBindingInfo;

    /**
     * @SINCE 1.76
     *
     * Defines the auto pop-in width for the column.
     *
     * If the `sap.m.Table` control is configured with `autoPopinMode=true`, then the `autoPopinWidth` property
     * is used to calculate the `minScreenWidth` property of the column in case a fixed width is not set for
     * the column. See {@link sap.m.Column#getWidth} and {@link sap.m.Table#getAutoPopinMode}. **Note:** A float
     * value is set for the `autoPopinWidth` property which is internally treated as a rem value.
     */
    autoPopinWidth?: float | PropertyBindingInfo;

    /**
     * Control to be displayed in the column header.
     */
    header?: Control;

    /**
     * Control to be displayed in the column footer.
     */
    footer?: Control;
  }
}

declare module "sap/m/ColumnListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import Control from "sap/ui/core/Control";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { VerticalAlign } from "sap/ui/core/library";

  /**
   * @SINCE 1.12
   *
   * `sap.m.ColumnListItem` can be used with the `cells` aggregation to create rows for the `sap.m.Table`
   * control. The `columns` aggregation of the `sap.m.Table` should match with the cells aggregation.
   *
   * **Note:** This control should only be used within the `sap.m.Table` control. The inherited `counter`
   * property of `sap.m.ListItemBase` is not supported.
   */
  export default class ColumnListItem extends ListItemBase {
    /**
     * Constructor for a new ColumnListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnListItemSettings
    );
    /**
     * Constructor for a new ColumnListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ColumnListItemSettings
    );

    /**
     * @SINCE 1.26
     *
     * Returns pop-in DOMRef as a jQuery Object
     */
    $Popin(): void;
    /**
     * Adds some cell to the aggregation {@link #getCells cells}.
     */
    addCell(
      /**
       * The cell to add; if empty, nothing is inserted
       */
      oCell: Control
    ): this;
    /**
     * Binds aggregation {@link #getCells cells} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindCells(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the cells in the aggregation {@link #getCells cells}.
     */
    destroyCells(): this;
    /**
     * Creates a new subclass of class sap.m.ColumnListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColumnListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getCells cells}.
     *
     * Every `control` inside the `cells` aggregation defines one cell of the row. **Note:** The order of the
     * `cells` aggregation must match the order of the `columns` aggregation of `sap.m.Table`.
     */
    getCells(): Control[];
    /**
     * Returns a metadata object for class sap.m.ColumnListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.30.9
     *
     * Returns the pop-in element.
     */
    getPopin(): void;
    /**
     * @SINCE 1.26
     *
     * Returns the tabbable DOM elements as a jQuery collection When popin is available this separated dom should
     * also be included
     */
    getTabbables(): jQuery;
    /**
     * @SINCE 1.20
     *
     * Gets current value of property {@link #getVAlign vAlign}.
     *
     * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
     * **Note:** `vAlign` property of `sap.m.Column` overrides the property for cell vertical alignment if both
     * are set.
     *
     * Default value is `Inherit`.
     */
    getVAlign(): VerticalAlign | keyof typeof VerticalAlign;
    /**
     * Determines whether control has pop-in or not.
     */
    hasPopin(): void;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getCells cells}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfCell(
      /**
       * The cell whose index is looked for
       */
      oCell: Control
    ): int;
    /**
     * Inserts a cell into the aggregation {@link #getCells cells}.
     */
    insertCell(
      /**
       * The cell to insert; if empty, nothing is inserted
       */
      oCell: Control,
      /**
       * The `0`-based index the cell should be inserted at; for a negative value of `iIndex`, the cell is inserted
       * at position 0; for a value greater than the current size of the aggregation, the cell is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCells cells}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCells(): Control[];
    /**
     * Removes a cell from the aggregation {@link #getCells cells}.
     */
    removeCell(
      /**
       * The cell to remove or its index or id
       */
      vCell: int | string | Control
    ): Control;
    /**
     * Pemove pop-in from DOM
     */
    removePopin(): void;
    /**
     * @SINCE 1.20
     *
     * Sets a new value for property {@link #getVAlign vAlign}.
     *
     * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
     * **Note:** `vAlign` property of `sap.m.Column` overrides the property for cell vertical alignment if both
     * are set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setVAlign(
      /**
       * New value for property `vAlign`
       */
      sVAlign?: VerticalAlign | keyof typeof VerticalAlign
    ): this;
    /**
     * Unbinds aggregation {@link #getCells cells} from model data.
     */
    unbindCells(): this;
  }

  export interface $ColumnListItemSettings extends $ListItemBaseSettings {
    /**
     * @SINCE 1.20
     *
     * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
     * **Note:** `vAlign` property of `sap.m.Column` overrides the property for cell vertical alignment if both
     * are set.
     */
    vAlign?: (VerticalAlign | keyof typeof VerticalAlign) | PropertyBindingInfo;

    /**
     * Every `control` inside the `cells` aggregation defines one cell of the row. **Note:** The order of the
     * `cells` aggregation must match the order of the `columns` aggregation of `sap.m.Table`.
     */
    cells?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/ComboBox" {
  import {
    default as ComboBoxBase,
    $ComboBoxBaseSettings,
  } from "sap/m/ComboBoxBase";

  import List from "sap/m/List";

  import Popover from "sap/m/Popover";

  import Dialog from "sap/m/Dialog";

  import Item from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22
   *
   * A drop-down list for selecting and filtering values. Overview: The control represents a drop-down menu
   * with a list of the available options and a text input field to narrow down the options. Structure: The
   * combo-box consists of the following elements:
   * 	 -  Input field - displays the selected option or a custom user entry. Users can type to narrow down
   * 			the list or enter their own value.
   * 	 -  Drop-down arrow - expands\collapses the option list.
   * 	 -  Option list - the list of available options. **Note:** Disabled items are not visualized in the
   * 			list with the available options, however they can still be accessed through the `items` aggregation.
   * 			 By setting the `showSecondaryValues` property, the combo box can display an additional value for
   * 			each option (if there is one). **Note:** The typeahead feature is not available on Android devices due
   * 			to a OS specific issue. Usage: When to use::
   * 	 - You need to select only one item in a long list of options (between 13 and 200) or your custom user
   * 			input.  When not to use::
   * 	 - You need to select between only two options. Use a {@link sap.m.Switch switch} control instead.
   * 	 - You need to select between up to 12 options. Use a {@link sap.m.Select select} control instead.
   * 	 - You need to select between more than 200 options. Use a {@link sap.m.Input input} control with value
   * 			help instead.
   *
   * Note:: The control has the following behavior regarding the `selectedKey` and `value` properties:
   *
   * 	 -  On initial loading, if the control has a `selectedKey` set which corresponds to a matching item,
   * 			and a set `value`, the `value` will be updated to the matching item's text.
   * 	 -  If a `selectedKey` is set and the user types an input which corresponds to an item's text, the `selectedKey`
   * 			will be updated with the matching item's key.
   * 	 -  If a `selectedKey` is set and the user types an input which does not correspond to any item's text,
   * 			the `selectedKey` will be set to an empty string ("")
   * 	 -  If a `selectedKey` is set and the user selects an item, the `selectedKey` will be updated to match
   * 			the selected item's key.
   * 	 -  If a `selectedKey` is bound and the user types before the data is loaded, the user's input will
   * 			be overwritten by the binding update.
   *
   * Responsive Behavior:
   * 	 - As the `sap.m.ComboBox` control allows free text, as well as has `selectedKey` / `selectedItem` properties,
   * 			here is brief explanation of how they are updated during model change:
   * 	 - If the ComboBox has `selectedKey` and `selectedItem` set, the model changes and the item key is no
   * 			longer amongst the newly added items, the value of the ComboBox will remain the same and the `selectedKey`
   * 			and `selectedItem` properties **will not** be changed.
   * 	 - If the ComboBox has `selectedKey` and `selectedItem` set, the model changes and the item key corresponds
   * 			to newly added item, with different text, the value of the ComboBox **will** be updated with the text
   * 			of the newly corresponding item.
   * 	 - If the ComboBox has only value, but no `selectedKey` and `selectedItem` set, the model changes, the
   * 			value **will** remain the same and the `selectedKey` and `selectedItem` properties **will not** be changed.
   *
   * 	 - The width of the option list adapts to its content. The minimum width is the input field plus the
   * 			drop-down arrow.
   * 	 - There is no horizontal scrolling in the option list. Entries in the list that are too long will be
   * 			truncated.
   * 	 - On phone devices the combo box option list opens a dialog.
   */
  export default class ComboBox extends ComboBoxBase {
    /**
     * Constructor for a new ComboBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/combo-box/ Combo Box}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxSettings
    );
    /**
     * Constructor for a new ComboBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/combo-box/ Combo Box}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ComboBoxSettings
    );

    /**
     * Configures the SuggestionsPopover's list.
     */
    _configureList(
      /**
       * The list instance to be configured
       */
      oList: List
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBox` itself.
     *
     * This event is fired when the value in the text input field is changed in combination with one of the
     * following actions:
     *
     *
     * 	 - The focus leaves the text input field
     * 	 - The Enter key is pressed
     * 	 - An item in the list is selected
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBox` itself.
     *
     * This event is fired when the user types something that matches with an item in the list; it is also fired
     * when the user presses on a list item, or when navigating via keyboard.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Clears the selection.
     */
    clearSelection(): void;
    /**
     * @SINCE 1.22.1
     *
     * Clones the `sap.m.ComboBox` control.
     */
    clone(
      /**
       * Suffix to be added to the IDs of the new control and its internal objects.
       */
      sIdSuffix?: string
    ): this;
    /**
     * `ComboBox` picker configuration
     */
    configPicker(
      /**
       * Picker instance
       */
      oPicker: Popover | Dialog
    ): void;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.ComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.ComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * This method will be called when the ComboBox is being destroyed.
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.ComboBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComboBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new `value` of the `control`
         */
        value?: string;
        /**
         * Indicates whether the change event was caused by selecting an item in the list
         */
        itemPressed?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item.
         */
        selectedItem?: Item;
      }
    ): this;
    /**
     * Gets the default selected item from the aggregation named `items`.
     */
    getDefaultSelectedItem(): null;
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getFilterSecondaryValues filterSecondaryValues}.
     *
     * Indicates whether the filter should check in both the `text` and the `additionalText` property of the
     * {@link sap.ui.core.ListItem} for the suggestion.
     *
     * Default value is `false`.
     */
    getFilterSecondaryValues(): boolean;
    /**
     * Returns a metadata object for class sap.m.ComboBox.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the selected item object from the aggregation named `items`.
     */
    getSelectedItem(): Item | null;
    /**
     * Gets current value of property {@link #getSelectedItemId selectedItemId}.
     *
     * ID of the selected item.
     *
     * Default value is `empty string`.
     */
    getSelectedItemId(): string;
    /**
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Key of the selected item.
     *
     * **Note:** If duplicate keys exist, the first item matching the key is used.
     *
     * Default value is `empty string`.
     */
    getSelectedKey(): string;
    /**
     * This method will be called when the ComboBox is initially created.
     */
    init(): void;
    /**
     * This event handler will be called after the ComboBox Picker's List is rendered.
     */
    onAfterRenderingList(): void;
    /**
     * This event handler will be called after the ComboBox's Picker is rendered.
     */
    onAfterRenderingPicker(): void;
    /**
     * This event handler is called before the picker popup is opened.
     */
    onBeforeOpen(): void;
    /**
     * This event handler will be called before the ComboBox is rendered.
     */
    onBeforeRendering(): void;
    /**
     * This event handler will be called before the ComboBox' Picker of type `sap.m.Popover` is rendered.
     */
    onBeforeRenderingDropdown(): void;
    /**
     * This event handler will be called before the ComboBox Picker's List is rendered.
     */
    onBeforeRenderingList(): void;
    /**
     * This event handler will be called before the ComboBox's Picker is rendered.
     */
    onBeforeRenderingPicker(): void;
    /**
     * Called when the `ComboBox` is clicked or tapped.
     */
    ontap(
      /**
       * The event object.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Opens the control's picker popup.
     */
    open(): this;
    /**
     * @SINCE 1.22.1
     *
     * Sets the start and end positions of the current text selection.
     */
    selectText(
      /**
       * The index of the first selected character.
       */
      iSelectionStart: int,
      /**
       * The index of the character after the last selected character.
       */
      iSelectionEnd: int
    ): this;
    /**
     * @SINCE 1.46
     *
     * Sets a new value for property {@link #getFilterSecondaryValues filterSecondaryValues}.
     *
     * Indicates whether the filter should check in both the `text` and the `additionalText` property of the
     * {@link sap.ui.core.ListItem} for the suggestion.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFilterSecondaryValues(
      /**
       * New value for property `filterSecondaryValues`
       */
      bFilterSecondaryValues?: boolean
    ): this;
    /**
     * Sets the `selectedItem` association.
     *
     * Default value is `null`.
     */
    setSelectedItem(
      /**
       * New value for the `selectedItem` association. If an ID of a `sap.ui.core.Item` is given, the item with
       * this ID becomes the `selectedItem` association. Alternatively, a `sap.ui.core.Item` instance may be given
       * or `null` to clear the selection.
       */
      vItem: string | Item | null
    ): this;
    /**
     * Sets the `selectedItemId` property.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedItemId(
      /**
       * New value for property `selectedItemId`. If the provided `vItem` is an empty string `""` or `undefined`,
       * the selection is cleared. If the ID has no corresponding aggregated item, the selected item is not changed.
       */
      vItem: string | undefined
    ): this;
    /**
     * Sets the `selectedKey` property.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`. If the provided `sKey` is an empty string `""` or `undefined`,
       * the selection is cleared. If duplicate keys exist, the first item matching the key is selected. If a
       * key is set and no item exists with that key, the visual selection remains the same.
       */
      sKey: string
    ): this;
    /**
     * Synchronizes the `selectedItem` association and the `selectedItemId` property.
     */
    synchronizeSelection(): void;
    /**
     * Creates picker if doesn't exist yet and sync with Control items
     */
    syncPickerContent(): Dialog | Popover;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBox` itself.
     *
     * This event is fired when the value in the text input field is changed in combination with one of the
     * following actions:
     *
     *
     * 	 - The focus leaves the text input field
     * 	 - The Enter key is pressed
     * 	 - An item in the list is selected
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.ComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBox` itself.
     *
     * This event is fired when the user types something that matches with an item in the list; it is also fired
     * when the user presses on a list item, or when navigating via keyboard.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBox` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ComboBoxSettings extends $ComboBoxBaseSettings {
    /**
     * Key of the selected item.
     *
     * **Note:** If duplicate keys exist, the first item matching the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * ID of the selected item.
     */
    selectedItemId?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Indicates whether the filter should check in both the `text` and the `additionalText` property of the
     * {@link sap.ui.core.ListItem} for the suggestion.
     */
    filterSecondaryValues?: boolean | PropertyBindingInfo;

    /**
     * Sets or retrieves the selected item from the aggregation named items.
     */
    selectedItem?: Item | string;

    /**
     * This event is fired when the value in the text input field is changed in combination with one of the
     * following actions:
     *
     *
     * 	 - The focus leaves the text input field
     * 	 - The Enter key is pressed
     * 	 - An item in the list is selected
     */
    change?: Function;

    /**
     * This event is fired when the user types something that matches with an item in the list; it is also fired
     * when the user presses on a list item, or when navigating via keyboard.
     */
    selectionChange?: Function;
  }
}

declare module "sap/m/ComboBoxBase" {
  import {
    default as ComboBoxTextField,
    $ComboBoxTextFieldSettings,
  } from "sap/m/ComboBoxTextField";

  import Item from "sap/ui/core/Item";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Popover from "sap/m/Popover";

  import Dialog from "sap/m/Dialog";

  import List from "sap/m/List";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Input from "sap/m/Input";

  import Event from "sap/ui/base/Event";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.22.0
   *
   * An abstract class for combo boxes.
   */
  export default class ComboBoxBase extends ComboBoxTextField {
    /**
     * Constructor for a new `sap.m.ComboBoxBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $ComboBoxBaseSettings
    );
    /**
     * Constructor for a new `sap.m.ComboBoxBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $ComboBoxBaseSettings
    );

    /**
     * Gets the ID of the hidden label for the group header items
     */
    _getGroupHeaderInvisibleText(): string;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Item
    ): this;
    /**
     * @SINCE 1.38
     *
     * Attaches event handler `fnFunction` to the {@link #event:loadItems loadItems} event of this `sap.m.ComboBoxBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBoxBase` itself.
     *
     * This event is fired when the end user clicks the combo box button to open the dropdown list and the data
     * used to display items is not already loaded. Alternatively, it is fired after the user moves the cursor
     * to the combo box text field and perform an action that requires data to be loaded. For example, pressing
     * F4 to open the dropdown list or typing something in the text field fires the event.
     *
     * **Note:** Use this feature in performance critical scenarios only. Loading the data lazily (on demand)
     * to defer initialization has several implications for the end user experience. For example, the busy indicator
     * has to be shown while the items are being loaded and assistive technology software also has to announce
     * the state changes (which may be confusing for some screen reader users).
     *
     * **Note**: Currently the `sap.m.MultiComboBox` does not support this event.
     */
    attachLoadItems(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBoxBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Clears the selection. To be overwritten by subclasses.
     */
    clearSelection(): void;
    /**
     * Closes the control's picker popup.
     */
    close(): this;
    /**
     * Base method for picker configuration
     */
    configPicker(
      /**
       * Picker instance
       */
      oPicker: Popover | Dialog
    ): void;
    /**
     * Creates a picker popup container where the selection should take place. To be overwritten by subclasses.
     */
    createPicker(
      /**
       * The picker type
       */
      sPickerType: string
    ): Popover | Dialog;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.38
     *
     * Detaches event handler `fnFunction` from the {@link #event:loadItems loadItems} event of this `sap.m.ComboBoxBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoadItems(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ComboBoxBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ComboBoxTextField.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComboBoxBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.38
     *
     * Fires event {@link #event:loadItems loadItems} to attached listeners.
     */
    fireLoadItems(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.86) - The enabled items should be managed by the application.
     *
     * Gets the enabled items from the aggregation named `items`.
     */
    getEnabledItems(
      /**
       * Items to filter.
       */
      aItems?: Item[]
    ): Item[];
    /**
     * Gets the first item from the aggregation named `items`.
     */
    getFirstItem(): Item;
    /**
     * @SINCE 1.66
     *
     * Gets the input properties, which should be forwarded from the combobox text field to the picker text
     * field
     */
    getInputForwardableProperties(): Array<any>;
    /**
     * Gets the item from the aggregation named `items` at the given 0-based index.
     */
    getItemAt(
      /**
       * Index of the item to return.
       */
      iIndex: int
    ): Item;
    /**
     * Gets the item with the given key from the aggregation named `items`.
     *  **Note:** If duplicate keys exist, the first item matching the key is returned.
     */
    getItemByKey(
      /**
       * An item key that specifies the item to retrieve.
       */
      sKey: string
    ): Item;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items contained within this control. **Note:** Disabled items are not visualized in the list
     * with the available options, however they can still be accessed through the aggregation.
     */
    getItems(): Item[];
    /**
     * Gets the last item from the aggregation named `items`.
     */
    getLastItem(): Item;
    /**
     * @deprecated (since 1.62) - The list structure should not be used as per SAP note: 2746748.
     *
     * Gets the `list`.
     */
    getList(): List;
    /**
     * Returns a metadata object for class sap.m.ComboBoxBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the control's picker popup.
     */
    getPicker(): Dialog | Popover | null;
    /**
     * Gets the ID of the hidden label
     */
    getPickerInvisibleTextId(): string;
    /**
     * @SINCE 1.42
     *
     * Gets the control's input from the picker.
     */
    getPickerTextField(): ComboBoxTextField | Input | null;
    /**
     * Gets the property `_sPickerType`
     */
    getPickerType(): string;
    /**
     * Gets the flag indicating whether the list items should be recreated
     */
    getRecreateItems(): void;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * Default value is `false`.
     */
    getShowSecondaryValues(): boolean;
    /**
     * Fires when an object gets inserted in the items aggregation
     */
    handleItemInsertion(): void;
    /**
     * Fires when an object gets removed from the items aggregation
     */
    handleItemRemoval(): void;
    /**
     * Determines whether the control has content or not.
     */
    hasContent(): boolean;
    /**
     * Handles highlighting of items after filtering.
     */
    highlightList(
      /**
       * The value of the item
       */
      sValue: string
    ): void;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Item
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Item,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Finds the common items of two arrays
     */
    intersectItems(
      /**
       * Array of Items
       */
      aItems: Item[],
      /**
       * Second array of items
       */
      aOtherItems: Item[]
    ): Item[];
    /**
     * Indicates whether the control's picker popup is open.
     */
    isOpen(): boolean;
    /**
     * Called when the composition of a passage of text has been completed or cancelled.
     */
    oncompositionend(
      /**
       * The event object.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * @SINCE 1.90
     *
     * Handles properties' changes of items in the aggregation named `items`.
     */
    onItemChange(
      /**
       * The change event
       */
      oControlEvent: Event,
      /**
       * Indicates whether second values should be shown
       */
      bShowSecondaryValues: boolean
    ): void;
    /**
     * Opens the control's picker popup.
     */
    open(): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): Item[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | Item
    ): Item;
    /**
     * @SINCE 1.58
     *
     * Sets a custom filter function for items. The function accepts two parameters: - currenly typed value
     * in the input field - item to be matched The function should return a Boolean value (true or false) which
     * represents whether an item will be shown in the dropdown or not.
     */
    setFilterFunction(
      /**
       * A callback function called when typing in a ComboBoxBase control or ancestor.
       */
      fnFilter: Function
    ): this;
    /**
     * Sets the property `_sPickerType`.
     */
    setPickerType(
      /**
       * The picker type
       */
      sPickerType: string
    ): void;
    /**
     * Sets whether the list items should be recreated
     */
    setRecreateItems(): void;
    /**
     * Sets the selectable property of `sap.ui.core.Item`
     */
    setSelectable(
      /**
       * The item to set the property
       */
      oItem: Item,
      /**
       * The selectable value
       */
      bSelectable: boolean
    ): void;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSecondaryValues(
      /**
       * New value for property `showSecondaryValues`
       */
      bShowSecondaryValues?: boolean
    ): this;
    /**
     * Sets the TextField handler
     */
    setTextFieldHandler(
      /**
       * Text field instance
       */
      oTextField: ComboBoxTextField | Input
    ): void;
    /**
     * @SINCE 1.64
     * @EXPERIMENTAL (since 1.64)
     *
     * Opens the `SuggestionsPopover` with the available items.
     */
    showItems(
      /**
       * Function to filter the items shown in the SuggestionsPopover
       */
      fnFilter: Function
    ): void;
    /**
     * Creates picker if doesn't exist yet and sync with Control items To be overwritten by subclasses.
     */
    syncPickerContent(): Control;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.38
     *
     * Attaches event handler `fnFunction` to the {@link #event:loadItems loadItems} event of this `sap.m.ComboBoxBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ComboBoxBase` itself.
     *
     * This event is fired when the end user clicks the combo box button to open the dropdown list and the data
     * used to display items is not already loaded. Alternatively, it is fired after the user moves the cursor
     * to the combo box text field and perform an action that requires data to be loaded. For example, pressing
     * F4 to open the dropdown list or typing something in the text field fires the event.
     *
     * **Note:** Use this feature in performance critical scenarios only. Loading the data lazily (on demand)
     * to defer initialization has several implications for the end user experience. For example, the busy indicator
     * has to be shown while the items are being loaded and assistive technology software also has to announce
     * the state changes (which may be confusing for some screen reader users).
     *
     * **Note**: Currently the `sap.m.MultiComboBox` does not support this event.
     */
    attachLoadItems(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ComboBoxBase` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ComboBoxBaseSettings extends $ComboBoxTextFieldSettings {
    /**
     * @SINCE 1.60
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     */
    showSecondaryValues?: boolean | PropertyBindingInfo;

    /**
     * Defines the items contained within this control. **Note:** Disabled items are not visualized in the list
     * with the available options, however they can still be accessed through the aggregation.
     */
    items?: Item[] | Item | AggregationBindingInfo;

    /**
     * @SINCE 1.38
     *
     * This event is fired when the end user clicks the combo box button to open the dropdown list and the data
     * used to display items is not already loaded. Alternatively, it is fired after the user moves the cursor
     * to the combo box text field and perform an action that requires data to be loaded. For example, pressing
     * F4 to open the dropdown list or typing something in the text field fires the event.
     *
     * **Note:** Use this feature in performance critical scenarios only. Loading the data lazily (on demand)
     * to defer initialization has several implications for the end user experience. For example, the busy indicator
     * has to be shown while the items are being loaded and assistive technology software also has to announce
     * the state changes (which may be confusing for some screen reader users).
     *
     * **Note**: Currently the `sap.m.MultiComboBox` does not support this event.
     */
    loadItems?: Function;
  }
}

declare module "sap/m/ComboBoxTextField" {
  import { default as InputBase, $InputBaseSettings } from "sap/m/InputBase";

  import Icon from "sap/ui/core/Icon";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * The `sap.m.ComboBoxTextField`.
   */
  export default class ComboBoxTextField extends InputBase {
    /**
     * Constructor for a new `sap.m.ComboBoxTextField`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $ComboBoxTextFieldSettings
    );
    /**
     * Constructor for a new `sap.m.ComboBoxTextField`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $ComboBoxTextFieldSettings
    );

    /**
     * Creates a new subclass of class sap.m.ComboBoxTextField with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ComboBoxTextField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the arrow icon
     */
    getIcon(): Icon;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the text field.
     *
     * Default value is `"100%"`.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.ComboBoxTextField.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.38
     *
     * Gets current value of property {@link #getShowButton showButton}.
     *
     * Indicates whether the dropdown downward-facing arrow button is shown.
     *
     * Default value is `true`.
     */
    getShowButton(): boolean;
    /**
     * Gets the `value`.
     *
     * Default value is an empty string.
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the text field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      sMaxWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.38
     *
     * Sets a new value for property {@link #getShowButton showButton}.
     *
     * Indicates whether the dropdown downward-facing arrow button is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowButton(
      /**
       * New value for property `showButton`
       */
      bShowButton?: boolean
    ): this;
    /**
     * Toggles the icon pressed style on or off.
     */
    toggleIconPressedStyle(
      /**
       * True if the icon pressed class should be applied.
       */
      bState?: boolean
    ): void;
  }

  export interface $ComboBoxTextFieldSettings extends $InputBaseSettings {
    /**
     * Sets the maximum width of the text field.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.38
     *
     * Indicates whether the dropdown downward-facing arrow button is shown.
     */
    showButton?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/CustomListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import Control from "sap/ui/core/Control";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * This control with a content aggregation can be used to customize standard list items that we don't provide.
   * List mode and ListItem type are applied to CustomListItems as well. **Note:** Even though the content
   * aggregation allows any control, complex responsive layout controls (e.g. `Table, Form`) should not be
   * aggregated as content.
   */
  export default class CustomListItem extends ListItemBase {
    /**
     * Constructor for a new CustomListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomListItemSettings
    );
    /**
     * Constructor for a new CustomListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomListItemSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Binds aggregation {@link #getContent content} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.CustomListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.84
     *
     * Gets current value of property {@link #getAccDescription accDescription}.
     *
     * Defines the custom accessibility announcement.
     *
     * **Note:** If defined, then only the provided custom accessibility description is announced when there
     * is a focus on the list item.
     */
    getAccDescription(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of this list item
     */
    getContent(): Control[];
    /**
     * Returns a metadata object for class sap.m.CustomListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.84
     *
     * Sets a new value for property {@link #getAccDescription accDescription}.
     *
     * Defines the custom accessibility announcement.
     *
     * **Note:** If defined, then only the provided custom accessibility description is announced when there
     * is a focus on the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAccDescription(
      /**
       * New value for property `accDescription`
       */
      sAccDescription: string
    ): this;
    /**
     * Unbinds aggregation {@link #getContent content} from model data.
     */
    unbindContent(): this;
  }

  export interface $CustomListItemSettings extends $ListItemBaseSettings {
    /**
     * @SINCE 1.84
     *
     * Defines the custom accessibility announcement.
     *
     * **Note:** If defined, then only the provided custom accessibility description is announced when there
     * is a focus on the list item.
     */
    accDescription?: string | PropertyBindingInfo;

    /**
     * The content of this list item
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/CustomTile" {
  import { default as Tile, $TileSettings } from "sap/m/Tile";

  import Control from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.12
   * @deprecated (since 1.50) - use {@link sap.m.GenericTile} instead
   *
   * Use the CustomTile control to display application specific content in the Tile control. The tile width
   * is 8.5em and height is 10em.
   */
  export default class CustomTile extends Tile {
    /**
     * Constructor for a new CustomTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomTileSettings
    );
    /**
     * Constructor for a new CustomTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomTileSettings
    );

    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.CustomTile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Tile.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Defines the content of the CustomTile.
     */
    getContent(): Control;
    /**
     * Returns a metadata object for class sap.m.CustomTile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Sets the aggregated {@link #getContent content}.
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
  }

  export interface $CustomTileSettings extends $TileSettings {
    /**
     * Defines the content of the CustomTile.
     */
    content?: Control;
  }
}

declare module "sap/m/CustomTreeItem" {
  import {
    default as TreeItemBase,
    $TreeItemBaseSettings,
  } from "sap/m/TreeItemBase";

  import Control from "sap/ui/core/Control";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.48.0
   *
   * The `CustomTreeItem` control with a content aggregation is used to customize the tree items within the
   * `Tree` control.
   * **Note:** Even though the content aggregation can be used for any control, complex responsive layout
   * controls, such as `Table, Form` etc, should not be aggregated as content.
   */
  export default class CustomTreeItem extends TreeItemBase {
    /**
     * Constructor for a new CustomTreeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomTreeItemSettings
    );
    /**
     * Constructor for a new CustomTreeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $CustomTreeItemSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Binds aggregation {@link #getContent content} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.CustomTreeItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.TreeItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CustomTreeItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of this tree item.
     */
    getContent(): Control[];
    /**
     * Returns a metadata object for class sap.m.CustomTreeItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Unbinds aggregation {@link #getContent content} from model data.
     */
    unbindContent(): this;
  }

  export interface $CustomTreeItemSettings extends $TreeItemBaseSettings {
    /**
     * The content of this tree item.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/DatePicker" {
  import {
    default as DateTimeField,
    $DateTimeFieldSettings,
  } from "sap/m/DateTimeField";

  import DateTypeRange from "sap/ui/unified/DateTypeRange";

  import DateRange from "sap/ui/unified/DateRange";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import CalendarType from "sap/ui/core/CalendarType";

  import UI5Element from "sap/ui/core/Element";

  import CalendarLegend from "sap/ui/unified/CalendarLegend";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.22.0
   *
   * Enables the users to select a localized date between 0001-01-01 and 9999-12-31.
   *
   * Overview:
   *
   * The `DatePicker` lets the users select a localized date using touch, mouse, or keyboard input. It consists
   * of two parts: the date input field and the date picker.
   *
   * **Note:** The {@link sap.ui.unified.Calendar} is used internally only if the `DatePicker` is opened (not
   * used for the initial rendering). If the `sap.ui.unified` library is not loaded before the `DatePicker`
   * is opened, it will be loaded upon opening. This could lead to a waiting time when the `DatePicker` is
   * opened for the first time. To prevent this, apps using the `DatePicker` should also load the `sap.ui.unified`
   * library.
   *
   * Usage:
   *
   * The user can enter a date by:
   * 	 - Using the calendar that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   * On app level, there are two options to provide a date for the `DatePicker` - as a string to the `value`
   * property or as a JavaScript Date object to the `dateValue` property (only one of these properties should
   * be used at a time):
   *
   *
   * 	 - Use the `value` property if you want to bind the `DatePicker` to a model using the `sap.ui.model.type.Date`
   *
   * 	 - Use the `value` property if the date is provided as a string from the backend or inside the app (for
   * 			example, as ABAP type DATS field)
   * 	 - Use the `dateValue` property if the date is already provided as a JavaScript Date object or you want
   * 			to work with a JavaScript Date object. Use `dateValue` as a helper property to easily obtain the day,
   * 			month and year of the chosen date. Although possible to bind it, the recommendation is not to do it.
   * 			When binding is needed, use `value` property instead
   *
   * Formatting:
   *
   * All formatting and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}.
   * If a date is entered by typing it into the input field, it must fit to the used date format and locale.
   *
   * Supported format options are pattern-based on Unicode LDML Date Format notation. See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
   *
   * For example, if the `valueFormat` is "yyyy-MM-dd", the `displayFormat` is "MMM d, y", and the used locale
   * is English, a valid value string is "2015-07-30", which leads to an output of "Jul 30, 2015".
   *
   * If no placeholder is set to the `DatePicker`, the used `displayFormat` is displayed as a placeholder.
   * If another placeholder is needed, it must be set.
   *
   * **Note:** If the string does NOT match the `displayFormat` (from user input) or the `valueFormat` (on
   * app level), the {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the locale
   * settings. For more information, see the respective documentation in the API Reference.
   *
   * Responsive behavior:
   *
   * The `DatePicker` is smaller in compact mode and provides a touch-friendly size in cozy mode.
   *
   * On mobile devices, one tap on the input field opens the `DatePicker` in full screen. To close the window,
   * the user can select a date (which triggers the close event), or select Cancel.
   */
  export default class DatePicker extends DateTimeField {
    /**
     * Constructor for a new `DatePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/date-picker/ Date Picker}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DatePickerSettings
    );
    /**
     * Constructor for a new `DatePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/date-picker/ Date Picker}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DatePickerSettings
    );

    /**
     * @SINCE 1.38.5
     *
     * Adds some `specialDate` to the aggregation `specialDates`.
     */
    addSpecialDate(
      /**
       * the specialDate to add; if empty, nothing is added
       */
      oSpecialDate: DateTypeRange
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.DatePicker` itself.
     *
     * Fired when navigating in `Calendar` popup.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.DatePicker` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.38.5
     *
     * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
     */
    destroySpecialDates(): this;
    /**
     * @SINCE 1.46.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.m.DatePicker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.DatePicker with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.DateTimeField.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DatePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fire event change to attached listeners.
     *
     * Expects following event parameters:
     * 	 - 'value' of type `string` The new value of the `sap.m.DatePicker`.
     * 	 - 'valid' of type `boolean` Indicator for a valid date.
     */
    fireChange(
      /**
       * the arguments to pass along with the event.
       */
      mArguments?: object
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Fires event {@link #event:navigate navigate} to attached listeners.
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Date range containing the start and end date displayed in the `Calendar` popup.
         */
        dateRange?: DateRange;
        /**
         * Indicates if the event is fired, due to popup being opened.
         */
        afterPopupOpened?: boolean;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * The date as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     */
    getDateValue(): object;
    /**
     * The date is displayed in the input field using this format. By default, the medium format of the used
     * locale is used.
     *
     * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
     * **Note:** If you use data binding on the `value` property with type `sap.ui.model.type.Date` this property
     * will be ignored. The format defined in the binding will be used.
     */
    getDisplayFormat(): string;
    /**
     * @SINCE 1.28.6
     *
     * Gets current value of property {@link #getDisplayFormatType displayFormatType}.
     *
     * Displays date in this given type in input field. Default value is taken from locale settings. Accepted
     * are values of `sap.ui.core.CalendarType` or an empty string. If no type is set, the default type of the
     * configuration is used. **Note:** If data binding on `value` property with type `sap.ui.model.type.Date`
     * is used, this property will be ignored.
     *
     * Default value is `empty string`.
     */
    getDisplayFormatType(): string;
    /**
     * @SINCE 1.38.5
     *
     * ID of the element which is the current target of the association {@link #getLegend legend}, or `null`.
     */
    getLegend(): ID;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Maximum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the `minDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     */
    getMaxDate(): object;
    /**
     * Returns a metadata object for class sap.m.DatePicker.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Minimum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the `maxDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     */
    getMinDate(): object;
    /**
     * @SINCE 1.34.1
     *
     * Gets current value of property {@link #getSecondaryCalendarType secondaryCalendarType}.
     *
     * If set, the days in the calendar popup are also displayed in this calendar type If not set, the dates
     * are only displayed in the primary calendar type
     */
    getSecondaryCalendarType(): CalendarType | keyof typeof CalendarType;
    /**
     * @SINCE 1.70
     *
     * Gets current value of property {@link #getShowFooter showFooter}.
     *
     * Hides or shows the popover's footer.
     *
     * Default value is `false`.
     */
    getShowFooter(): boolean;
    /**
     * @SINCE 1.38.5
     *
     * Gets content of aggregation {@link #getSpecialDates specialDates}.
     *
     * Date Range with type to visualize special days in the Calendar. If one day is assigned to more than one
     * Type, only the first one will be used.
     *
     * To set a single date (instead of a range), set only the startDate property of the sap.ui.unified.DateRange
     * class.
     *
     * **Note:** Since 1.48 you could set a non-working day via the sap.ui.unified.CalendarDayType.NonWorking
     * enum type just as any other special date type using sap.ui.unified.DateRangeType.
     */
    getSpecialDates(): UI5Element[];
    /**
     * Getter for property `value`.
     *
     * Returns a date as a string in the format defined in property `valueFormat`.
     *
     * **Note:** If there is no data binding, the value is expected and updated in Gregorian calendar type.
     * (Otherwise, the type of the binding is used.)
     *
     * If this property is used, the `dateValue` property should not be changed from the caller.
     */
    getValue(): string;
    /**
     * The date string expected and returned in the `value` property uses this format. By default the medium
     * format of the used locale is used.
     *
     * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
     *
     * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
     *
     * **Note:** If data binding on `value` property with type `sap.ui.model.type.Date` is used, this property
     * will be ignored. The format defined in the binding will be used.
     */
    getValueFormat(): string;
    /**
     * @SINCE 1.38.5
     *
     * Checks for the provided `sap.ui.core.Element` in the aggregation {@link #getSpecialDates specialDates}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSpecialDate(
      /**
       * The specialDate whose index is looked for
       */
      oSpecialDate: UI5Element
    ): int;
    /**
     * @SINCE 1.38.5
     *
     * Inserts a `specialDate` to the aggregation `specialDates`.
     */
    insertSpecialDate(
      /**
       * the specialDate to insert; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange,
      /**
       * the 0-based index the `specialDate` should be inserted at; for a negative value of `iIndex`, the `specialDate`
       * is inserted at position 0; for a value greater than the current size of the aggregation, the `specialDate`
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Checks if the picker is open
     */
    isOpen(): boolean;
    /**
     * @SINCE 1.64
     *
     * Returns if the last entered value is valid.
     */
    isValidValue(): boolean;
    /**
     * @SINCE 1.38.5
     *
     * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSpecialDates(): UI5Element[];
    /**
     * @SINCE 1.38.5
     *
     * Removes a `specialDate` from the aggregation `specialDates`.
     */
    removeSpecialDate(
      /**
       * The `specialDate` to remove or its index or id
       */
      oSpecialDate: DateTypeRange
    ): DateTypeRange;
    /**
     * Sets the displayFormat of the DatePicker.
     */
    setDisplayFormat(
      /**
       * new value for `displayFormat`
       */
      sDisplayFormat: string
    ): this;
    /**
     * @SINCE 1.28.6
     *
     * Sets a new value for property {@link #getDisplayFormatType displayFormatType}.
     *
     * Displays date in this given type in input field. Default value is taken from locale settings. Accepted
     * are values of `sap.ui.core.CalendarType` or an empty string. If no type is set, the default type of the
     * configuration is used. **Note:** If data binding on `value` property with type `sap.ui.model.type.Date`
     * is used, this property will be ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDisplayFormatType(
      /**
       * New value for property `displayFormatType`
       */
      sDisplayFormatType?: string
    ): this;
    /**
     * @SINCE 1.38.5
     *
     * Sets the associated legend.
     */
    setLegend(
      /**
       * ID of an element which becomes the new target of this `legend` association; alternatively, an element
       * instance may be given
       */
      oLegend: ID | CalendarLegend
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Maximum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the `minDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      oMaxDate?: object
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Minimum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the `maxDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      oMinDate?: object
    ): this;
    /**
     * @SINCE 1.34.1
     *
     * Sets a new value for property {@link #getSecondaryCalendarType secondaryCalendarType}.
     *
     * If set, the days in the calendar popup are also displayed in this calendar type If not set, the dates
     * are only displayed in the primary calendar type
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSecondaryCalendarType(
      /**
       * New value for property `secondaryCalendarType`
       */
      sSecondaryCalendarType?: CalendarType | keyof typeof CalendarType
    ): this;
    /**
     * @SINCE 1.70
     *
     * Sets `showFooter` property to the given boolean value
     */
    setShowFooter(
      /**
       * when true footer is displayed
       */
      bFlag: undefined
    ): void;
    /**
     * Setter for property `value`.
     *
     * Expects a date as a string in the format defined in property `valueFormat`.
     *
     * **Note:** If there is no data binding, the value is expected and updated in Gregorian calendar type.
     * (Otherwise, the type of the binding is used.)
     *
     * If this property is used, the `dateValue` property should not be changed from the caller.
     *
     * If Data binding using a `sap.ui.model.type.Date` is used, please set the `formatOption` `stricktParsing`
     * to `true`. This prevents unwanted automatic corrections of wrong input.
     */
    setValue(
      /**
       * The new value of the input.
       */
      sValue: string
    ): this;
    /**
     * Defines the width of the DatePicker. Default value is 100%
     */
    setWidth(
      /**
       * new value for `width`
       */
      sWidth: string
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.DatePicker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.DatePicker` itself.
     *
     * Fired when navigating in `Calendar` popup.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.DatePicker` itself
       */
      oListener?: object
    ): this;
  }

  export interface $DatePickerSettings extends $DateTimeFieldSettings {
    /**
     * @SINCE 1.28.6
     *
     * Displays date in this given type in input field. Default value is taken from locale settings. Accepted
     * are values of `sap.ui.core.CalendarType` or an empty string. If no type is set, the default type of the
     * configuration is used. **Note:** If data binding on `value` property with type `sap.ui.model.type.Date`
     * is used, this property will be ignored.
     */
    displayFormatType?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.34.1
     *
     * If set, the days in the calendar popup are also displayed in this calendar type If not set, the dates
     * are only displayed in the primary calendar type
     */
    secondaryCalendarType?:
      | (CalendarType | keyof typeof CalendarType)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Minimum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the `maxDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     */
    minDate?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Maximum date that can be shown and selected in the `DatePicker`. This must be a JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the `minDate`, the `maxDate` and the `minDate` are switched
     * before rendering.
     */
    maxDate?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.70
     *
     * Hides or shows the popover's footer.
     */
    showFooter?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38.5
     *
     * Date Range with type to visualize special days in the Calendar. If one day is assigned to more than one
     * Type, only the first one will be used.
     *
     * To set a single date (instead of a range), set only the startDate property of the sap.ui.unified.DateRange
     * class.
     *
     * **Note:** Since 1.48 you could set a non-working day via the sap.ui.unified.CalendarDayType.NonWorking
     * enum type just as any other special date type using sap.ui.unified.DateRangeType.
     */
    specialDates?: UI5Element[] | UI5Element | AggregationBindingInfo;

    /**
     * @SINCE 1.38.5
     *
     * Association to the `CalendarLegend` explaining the colors of the `specialDates`.
     *
     * **Note** The legend does not have to be rendered but must exist, and all required types must be assigned.
     */
    legend?: Control | string;

    /**
     * @SINCE 1.46.0
     *
     * Fired when navigating in `Calendar` popup.
     */
    navigate?: Function;
  }
}

declare module "sap/m/DateRangeSelection" {
  import { default as DatePicker, $DatePickerSettings } from "sap/m/DatePicker";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22.0
   *
   * A single-field input control that enables the users to enter a localized date range (between 0001-01-01
   * and 9999-12-31).
   *
   * Overview:
   *
   * The `DateRangeSelection` enables the users to enter a localized date range using touch, mouse, keyboard
   * input, or by selecting a date range in the calendar. They can also navigate directly from one month or
   * year to another.
   *
   * **Note:** The control is not UTC aware and the selected date range starts from 00:00:00:000 of the first
   * date and ends in 23:59:59:999 on the second date.
   *
   * The {@link sap.ui.unified.Calendar} is used internally only if the `DateRangeSelection` is opened (not
   * used for the initial rendering). If the `sap.ui.unified` library is not loaded before the `DateRangeSelection`
   * is opened, it will be loaded upon opening. This could lead to a waiting time when the `DateRangeSelection`
   * is opened for the first time. To prevent this, apps using the `DateRangeSelection` should also load the
   * `sap.ui.unified` library.
   *
   * Usage:
   *
   * When to use?
   *
   * If you need a date range and know that your user is a power user who has to input lots of data. If the
   * keyboard is the primary device used for navigating the app, use two input fields. This allows the user
   * to quickly jump from field to field. By selecting a date in one of the fields, the other field should
   * recognize the information and jump to the same selection.
   *
   * When not to use?
   *
   * If the user's primary goal is not to select ranges or if you just want to enter a date and a time. For
   * such cases, use the {@link sap.m.DatePicker} or {@link sap.m.TimePicker}.
   *
   * The user can enter a date by:
   * 	 - Using the calendar that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   * On app level, there are two options to provide a date for the `DateRangeSelection` - date range as a
   * string to the `value` property or JavaScript Date objects to the `dateValue` and `secondDateValue` properties
   * (only one of these options should be used at a time):
   *
   *
   * 	 - Use the `value` property if the date range is already provided as a formatted string
   * 	 - Use the `dateValue` and `secondDateValue` properties if the date range is already provided as JavaScript
   * 			Date objects or you want to work with JavaScript Date objects
   *
   * Formatting:
   *
   * All formatting and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}.
   * If a date is entered by typing it into the input field, it must fit to the used date format and locale.
   *
   * Supported format options are pattern-based on Unicode LDML Date Format notation. See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
   *
   * For example, if the `displayFormat` is "MMM d, y", delimiter is "-", and the used locale is English,
   * a valid value string is "Jul 29, 2015 - Jul 31, 2015" and it is displayed in the same way in the input
   * field.
   *
   * If no placeholder is set to the `DateRangeSelection`, the used `displayFormat` is displayed as a placeholder.
   * If another placeholder is needed, it must be set.
   *
   * **Note:** If the string does NOT match the `displayFormat` (from user input) or the `valueFormat` (on
   * app level), the {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the locale
   * settings. For more information, see the respective documentation in the API Reference.
   *
   * Responsive behavior:
   *
   * The `DateRangeSelection` is fully responsive. It is smaller in compact mode and provides a touch-friendly
   * size in cozy mode.
   */
  export default class DateRangeSelection extends DatePicker {
    /**
     * Constructor for a new `DateRangeSelection`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSelectionSettings
    );
    /**
     * Constructor for a new `DateRangeSelection`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateRangeSelectionSettings
    );

    /**
     * Creates a new subclass of class sap.m.DateRangeSelection with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateRangeSelection>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fire event change to attached listeners.
     *
     * Expects following event parameters:
     * 	 - 'value' of type `string` The new value of the `sap.m.DateRangeSelection`.
     * 	 - 'valid' of type `boolean` Indicator for a valid date.
     * 	 - 'from' of type `object` Current start date after change.
     * 	 - 'to' of type `object` Current end date after change.
     */
    fireChange(
      /**
       * The arguments to pass along with the event.
       */
      mArguments?: object
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Getter for property `dateValue`.
     *
     * The start date of the range as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     */
    getDateValue(): object;
    /**
     * Gets current value of property {@link #getDelimiter delimiter}.
     *
     * Delimiter between start and end date. Default value is "-". If no delimiter is given, the one defined
     * for the used locale is used.
     *
     * Default value is `'-'`.
     */
    getDelimiter(): string;
    /**
     * @deprecated (since 1.22.0) - replaced by `dateValue` property of the {@link sap.m.DateTimeField}
     *
     * Gets current value of property {@link #getFrom from}.
     *
     * Start date of the range.
     */
    getFrom(): object;
    /**
     * Returns a metadata object for class sap.m.DateRangeSelection.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSecondDateValue secondDateValue}.
     *
     * The end date of the range as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     */
    getSecondDateValue(): object;
    /**
     * @deprecated (since 1.22.0) - replaced by `secondDateValue` property
     *
     * Gets current value of property {@link #getTo to}.
     *
     * End date of the range.
     */
    getTo(): object;
    /**
     * Getter for property `value`.
     *
     * Returns a date as a string in the format defined in property `displayFormat`.
     *
     * **Note:** As the value string always used the `displayFormat`, it is both locale-dependent and calendar-type-dependent.
     *
     * If this property is used, the `dateValue` property should not be changed from the caller.
     */
    getValue(): string;
    /**
     * Getter for property `valueFormat`.
     *
     * **Note:** Property `valueFormat` is not supported in the `sap.m.DateRangeSelection` control.
     */
    getValueFormat(): string;
    /**
     * Setter for property `dateValue`.
     *
     * The start date of the range as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     */
    setDateValue(
      /**
       * New value for property `dateValue`
       */
      oDateValue: object
    ): this;
    /**
     * Sets a new value for property {@link #getDelimiter delimiter}.
     *
     * Delimiter between start and end date. Default value is "-". If no delimiter is given, the one defined
     * for the used locale is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'-'`.
     */
    setDelimiter(
      /**
       * New value for property `delimiter`
       */
      sDelimiter?: string
    ): this;
    /**
     * @deprecated (since 1.22.0) - replaced by `dateValue` property of the {@link sap.m.DateTimeField}
     *
     * Sets a new value for property {@link #getFrom from}.
     *
     * Start date of the range.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFrom(
      /**
       * New value for property `from`
       */
      oFrom?: object
    ): this;
    /**
     * Sets a new value for property {@link #getSecondDateValue secondDateValue}.
     *
     * The end date of the range as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSecondDateValue(
      /**
       * New value for property `secondDateValue`
       */
      oSecondDateValue?: object
    ): this;
    /**
     * @deprecated (since 1.22.0) - replaced by `secondDateValue` property
     *
     * Sets a new value for property {@link #getTo to}.
     *
     * End date of the range.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTo(
      /**
       * New value for property `to`
       */
      oTo?: object
    ): this;
    /**
     * Setter for property `value`.
     *
     * Expects a date as a string in the format defined in property `displayFormat`.
     *
     * **Note:** As the value string always used the `displayFormat`, it is both locale-dependent and calendar-type-dependent.
     *
     * If this property is used, the `dateValue` property should not be changed from the caller.
     */
    setValue(
      /**
       * The new value of the input.
       */
      sValue: string
    ): this;
    /**
     * Setter for property `valueFormat`.
     *
     * **Note:** Property `valueFormat` is not supported in the `sap.m.DateRangeSelection` control.
     */
    setValueFormat(
      /**
       * New value for property valueFormat
       */
      sValueFormat: string
    ): this;
  }

  export interface $DateRangeSelectionSettings extends $DatePickerSettings {
    /**
     * Delimiter between start and end date. Default value is "-". If no delimiter is given, the one defined
     * for the used locale is used.
     */
    delimiter?: string | PropertyBindingInfo;

    /**
     * The end date of the range as JavaScript Date object. This is independent from any formatter.
     *
     * **Note:** If this property is used, the `value` property should not be changed from the caller.
     */
    secondDateValue?: object | PropertyBindingInfo;

    /**
     * @deprecated (since 1.22.0) - replaced by `dateValue` property of the {@link sap.m.DateTimeField}
     *
     * Start date of the range.
     */
    from?: object | PropertyBindingInfo;

    /**
     * @deprecated (since 1.22.0) - replaced by `secondDateValue` property
     *
     * End date of the range.
     */
    to?: object | PropertyBindingInfo;
  }
}

declare module "sap/m/DateTimeField" {
  import { default as InputBase, $InputBaseSettings } from "sap/m/InputBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50.0
   *
   * The `sap.m.DateTimeField` control provides a basic functionality for date/time input controls.
   *
   * To be extended by date and time picker controls. For internal use only.
   */
  export default class DateTimeField extends InputBase {
    /**
     * Constructor for a new `sap.m.DateTimeField`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimeFieldSettings
    );
    /**
     * Constructor for a new `sap.m.DateTimeField`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimeFieldSettings
    );

    /**
     * Creates a new subclass of class sap.m.DateTimeField with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDateValue dateValue}.
     *
     * Holds a reference to a JavaScript Date Object. The `value` (string) property will be set according to
     * it. Alternatively, if the `value` and `valueFormat` pair properties are supplied instead, the `dateValue`
     * will be instantiated according to the parsed `value`. Use `dateValue` as a helper property to easily
     * obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible
     * to bind it, the recommendation is not to do it. When binding is needed, use `value` property instead.
     */
    getDateValue(): object;
    /**
     * Gets current value of property {@link #getDisplayFormat displayFormat}.
     *
     * Determines the format, displayed in the input field.
     */
    getDisplayFormat(): string;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getInitialFocusedDateValue initialFocusedDateValue}.
     *
     * Holds a reference to a JavaScript Date Object to define the initially focused date/time when the picker
     * popup is opened.
     *
     * **Notes:**
     * 	 - Setting this property does not change the `value` property.
     * 	 - Depending on the context this property is used in ({@link sap.m.TimePicker}, {@link sap.m.DatePicker}
     * 			or {@link sap.m.DateTimePicker}), it takes into account only the time part, only the date part or both
     * 			parts of the JavaScript Date Object.
     */
    getInitialFocusedDateValue(): object;
    /**
     * Returns a metadata object for class sap.m.DateTimeField.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getValueFormat valueFormat}.
     *
     * Determines the format of the value property.
     */
    getValueFormat(): string;
    /**
     * Sets a new value for property {@link #getDateValue dateValue}.
     *
     * Holds a reference to a JavaScript Date Object. The `value` (string) property will be set according to
     * it. Alternatively, if the `value` and `valueFormat` pair properties are supplied instead, the `dateValue`
     * will be instantiated according to the parsed `value`. Use `dateValue` as a helper property to easily
     * obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible
     * to bind it, the recommendation is not to do it. When binding is needed, use `value` property instead.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDateValue(
      /**
       * New value for property `dateValue`
       */
      oDateValue?: object
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayFormat displayFormat}.
     *
     * Determines the format, displayed in the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplayFormat(
      /**
       * New value for property `displayFormat`
       */
      sDisplayFormat?: string
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getInitialFocusedDateValue initialFocusedDateValue}.
     *
     * Holds a reference to a JavaScript Date Object to define the initially focused date/time when the picker
     * popup is opened.
     *
     * **Notes:**
     * 	 - Setting this property does not change the `value` property.
     * 	 - Depending on the context this property is used in ({@link sap.m.TimePicker}, {@link sap.m.DatePicker}
     * 			or {@link sap.m.DateTimePicker}), it takes into account only the time part, only the date part or both
     * 			parts of the JavaScript Date Object.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInitialFocusedDateValue(
      /**
       * New value for property `initialFocusedDateValue`
       */
      oInitialFocusedDateValue?: object
    ): this;
    /**
     * Sets a new value for property {@link #getValueFormat valueFormat}.
     *
     * Determines the format of the value property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueFormat(
      /**
       * New value for property `valueFormat`
       */
      sValueFormat?: string
    ): this;
  }

  export interface $DateTimeFieldSettings extends $InputBaseSettings {
    /**
     * Determines the format, displayed in the input field.
     */
    displayFormat?: string | PropertyBindingInfo;

    /**
     * Determines the format of the value property.
     */
    valueFormat?: string | PropertyBindingInfo;

    /**
     * Holds a reference to a JavaScript Date Object. The `value` (string) property will be set according to
     * it. Alternatively, if the `value` and `valueFormat` pair properties are supplied instead, the `dateValue`
     * will be instantiated according to the parsed `value`. Use `dateValue` as a helper property to easily
     * obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible
     * to bind it, the recommendation is not to do it. When binding is needed, use `value` property instead.
     */
    dateValue?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Holds a reference to a JavaScript Date Object to define the initially focused date/time when the picker
     * popup is opened.
     *
     * **Notes:**
     * 	 - Setting this property does not change the `value` property.
     * 	 - Depending on the context this property is used in ({@link sap.m.TimePicker}, {@link sap.m.DatePicker}
     * 			or {@link sap.m.DateTimePicker}), it takes into account only the time part, only the date part or both
     * 			parts of the JavaScript Date Object.
     */
    initialFocusedDateValue?: object | PropertyBindingInfo;
  }
}

declare module "sap/m/DateTimeInput" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    ID,
    TextAlign,
    TextDirection,
    ValueState,
    CSSSize,
  } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { DateTimeInputType } from "sap/m/library";

  /**
   * @SINCE 1.9.1
   * @deprecated (since 1.32.8) - replaced by {@link sap.m.DatePicker}, {@link sap.m.TimePicker} or {@link
   * sap.m.DateTimePicker}
   *
   * Allows end users to interact with date (between 0001-01-01 and 9999-12-31) and/or time and select from
   * a date and/or time pad.
   *
   * **Note:** This control should not be used any longer, instead please use the dedicated `sap.m.DatePicker`,
   * `sap.m.TimePicker` or `sap.m.DateTimePicker` control.
   */
  export default class DateTimeInput extends Control {
    /**
     * Constructor for a new DateTimeInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimeInputSettings
    );
    /**
     * Constructor for a new DateTimeInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimeInputSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.DateTimeInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.DateTimeInput` itself.
     *
     * This event gets fired when the selection has finished and the value has changed.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.DateTimeInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds property {@link #getValue value} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindValue(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.DateTimeInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.DateTimeInput with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimeInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The string value of the control in given valueFormat (or locale format).
         */
        value?: string;
        /**
         * The value of control as JavaScript Date Object or null if value is empty.
         */
        dateValue?: object;
        /**
         * if set, the entered value is a valid date. If not set the entered value cannot be converted to a date.
         */
        valid?: boolean;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getDateValue dateValue}.
     *
     * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
     */
    getDateValue(): object;
    /**
     * Gets current value of property {@link #getDisplayFormat displayFormat}.
     *
     * Displays date value in this given format in text field. Default value is taken from locale settings.
     * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property
     * or the latter wins. If the user's browser supports native picker then this property is overwritten by
     * browser with locale settings.
     */
    getDisplayFormat(): string;
    /**
     * @SINCE 1.12.0
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns a metadata object for class sap.m.DateTimeInput.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Defines the name of the control for the purposes of form submission.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    getPlaceholder(): string;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
     *
     * Indicates whether the value state message should be shown or not.
     *
     * Default value is `true`.
     */
    getShowValueStateMessage(): boolean;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     *
     * Default value is `Initial`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Type of DateTimeInput (e.g. Date, Time, DateTime)
     *
     * Default value is `Date`.
     */
    getType(): DateTimeInputType | keyof typeof DateTimeInputType;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the control.
     *
     * The new value must be in the format set by `valueFormat`.
     *
     * The "Now" literal can also be assigned as a parameter to show the current date and/or time.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueFormat valueFormat}.
     *
     * Given value property should match with valueFormat to parse date. Default value is taken from locale
     * settings. You can only set and get value in this format. If you use data-binding on value property with
     * type sap.ui.model.type.Date you can ignore this property or the latter wins.
     */
    getValueFormat(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     */
    getValueStateText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * Default value is `"100%"`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getDateValue dateValue}.
     *
     * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDateValue(
      /**
       * New value for property `dateValue`
       */
      oDateValue?: object
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayFormat displayFormat}.
     *
     * Displays date value in this given format in text field. Default value is taken from locale settings.
     * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property
     * or the latter wins. If the user's browser supports native picker then this property is overwritten by
     * browser with locale settings.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplayFormat(
      /**
       * New value for property `displayFormat`
       */
      sDisplayFormat?: string
    ): this;
    /**
     * @SINCE 1.12.0
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Defines the name of the control for the purposes of form submission.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
     *
     * Indicates whether the value state message should be shown or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowValueStateMessage(
      /**
       * New value for property `showValueStateMessage`
       */
      bShowValueStateMessage?: boolean
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Initial`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Type of DateTimeInput (e.g. Date, Time, DateTime)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Date`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: DateTimeInputType | keyof typeof DateTimeInputType
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the control.
     *
     * The new value must be in the format set by `valueFormat`.
     *
     * The "Now" literal can also be assigned as a parameter to show the current date and/or time.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueFormat valueFormat}.
     *
     * Given value property should match with valueFormat to parse date. Default value is taken from locale
     * settings. You can only set and get value in this format. If you use data-binding on value property with
     * type sap.ui.model.type.Date you can ignore this property or the latter wins.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueFormat(
      /**
       * New value for property `valueFormat`
       */
      sValueFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueStateText(
      /**
       * New value for property `valueStateText`
       */
      sValueStateText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds property {@link #getValue value} from model data.
     */
    unbindValue(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.DateTimeInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.DateTimeInput` itself.
     *
     * This event gets fired when the selection has finished and the value has changed.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.DateTimeInput` itself
       */
      oListener?: object
    ): this;
  }

  export interface $DateTimeInputSettings extends $ControlSettings {
    /**
     * Defines the value of the control.
     *
     * The new value must be in the format set by `valueFormat`.
     *
     * The "Now" literal can also be assigned as a parameter to show the current date and/or time.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.12.0
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     */
    valueStateText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Indicates whether the value state message should be shown or not.
     */
    showValueStateMessage?: boolean | PropertyBindingInfo;

    /**
     * Defines the name of the control for the purposes of form submission.
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Type of DateTimeInput (e.g. Date, Time, DateTime)
     */
    type?:
      | (DateTimeInputType | keyof typeof DateTimeInputType)
      | PropertyBindingInfo;

    /**
     * Displays date value in this given format in text field. Default value is taken from locale settings.
     * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property
     * or the latter wins. If the user's browser supports native picker then this property is overwritten by
     * browser with locale settings.
     */
    displayFormat?: string | PropertyBindingInfo;

    /**
     * Given value property should match with valueFormat to parse date. Default value is taken from locale
     * settings. You can only set and get value in this format. If you use data-binding on value property with
     * type sap.ui.model.type.Date you can ignore this property or the latter wins.
     */
    valueFormat?: string | PropertyBindingInfo;

    /**
     * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
     */
    dateValue?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event gets fired when the selection has finished and the value has changed.
     */
    change?: Function;
  }
}

declare module "sap/m/DateTimePicker" {
  import { default as DatePicker, $DatePickerSettings } from "sap/m/DatePicker";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38.0
   *
   * Enables the users to select date (between 0001-01-01 and 9999-12-31) and time values in a combined input.
   *
   * Overview:
   *
   * The `DateTimePicker` control consists of two parts: the input field and the date/time picker.
   *
   * **Note:** The {@link sap.ui.unified.Calendar} is used internally only if the `DateTimePicker` is opened
   * (not used for the initial rendering). If the `sap.ui.unified` library is not loaded before the `DateTimePicker`
   * is opened, it will be loaded upon opening. This could lead to a waiting time when the `DateTimePicker`
   * is opened for the first time. To prevent this, apps using the `DateTimePicker` should also load the `sap.ui.unified`
   * library.
   *
   * Usage:
   *
   * Use this control if you need a combined date and time input control.
   *
   * Don't use it if you want to use either a date or a time value. In this case, use the {@link sap.m.DatePicker}
   * or the {@link sap.m.TimePicker} controls instead.
   *
   * The user can enter a date by:
   * 	 - Using the calendar or a time selector that opens in a popup
   * 	 - Typing it in directly in the input field
   *
   * On app level, there are two options to provide a date for the `DateTimePicker` - as a string to the `value`
   * property or as a JavaScript Date object to the `dateValue` property (only one of these properties should
   * be used at a time):
   *
   *
   * 	 - Use the `value` property if you want to bind the `DateTimePicker` to a model using the `sap.ui.model.type.DateTime`
   *
   * 	 - Use the `value` property if the date is provided as a string from the backend or inside the app (for
   * 			example, as ABAP type DATS field)
   * 	 - Use the `dateValue` property if the date is already provided as a JavaScript Date object or you want
   * 			to work with a JavaScript Date object. Use `dateValue` as a helper property to easily obtain the day,
   * 			month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the
   * 			recommendation is not to do it. When binding is needed, use `value` property instead
   *
   * Formatting:
   *
   * All formatting and parsing of dates from and to strings is done using the {@link sap.ui.core.format.DateFormat}.
   * If a date is entered by typing it into the input field, it must fit to the used date format and locale.
   *
   * Supported format options are pattern-based on Unicode LDML Date Format notation. See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
   *
   * For example, if the `valueFormat` is "yyyy-MM-dd-HH-mm-ss", the `displayFormat` is "MMM d, y, HH:mm:ss",
   * and the used locale is English, a valid value string is "2015-07-30-10-30-15", which leads to an output
   * of "Jul 30, 2015, 10:30:15".
   *
   * If no placeholder is set to the `DateTimePicker`, the used `displayFormat` is displayed as a placeholder.
   * If another placeholder is needed, it must be set.
   *
   * **Note:** If the string does NOT match the `displayFormat` (from user input) or the `valueFormat` (on
   * app level), the {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the locale
   * settings. For more information, see the respective documentation in the API Reference.
   *
   * Responsive behavior:
   *
   * The `DateTimePicker` is responsive and fully adapts to all devices. For larger screens, such as tablet
   * or desktop, it opens as a popover. For mobile devices, it opens in full screen.
   */
  export default class DateTimePicker extends DatePicker {
    /**
     * Constructor for a new `DateTimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/datetime-picker/ Date/Time Picker}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimePickerSettings
    );
    /**
     * Constructor for a new `DateTimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/datetime-picker/ Date/Time Picker}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DateTimePickerSettings
    );

    /**
     * Creates a new subclass of class sap.m.DateTimePicker with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DateTimePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Apply the correct icon to the used Date control
     */
    getIconSrc(): void;
    /**
     * Returns a metadata object for class sap.m.DateTimePicker.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getMinutesStep minutesStep}.
     *
     * Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The minutes slider is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getMinutesStep(): int;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getSecondsStep secondsStep}.
     *
     * Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The seconds slider is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getSecondsStep(): int;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getMinutesStep minutesStep}.
     *
     * Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The minutes slider is populated only by multiples of the step.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setMinutesStep(
      /**
       * New value for property `minutesStep`
       */
      iMinutesStep?: int
    ): this;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getSecondsStep secondsStep}.
     *
     * Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The seconds slider is populated only by multiples of the step.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setSecondsStep(
      /**
       * New value for property `secondsStep`
       */
      iSecondsStep?: int
    ): this;
  }

  export interface $DateTimePickerSettings extends $DatePickerSettings {
    /**
     * @SINCE 1.56
     *
     * Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The minutes slider is populated only by multiples of the step.
     */
    minutesStep?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to
     * 1. The seconds slider is populated only by multiples of the step.
     */
    secondsStep?: int | PropertyBindingInfo;
  }
}

declare module "sap/m/Dialog" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    PopupInterface,
    ID,
    CSSSize,
    URI,
    ValueState,
  } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import { IBar, TitleAlignment, DialogType } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A popup that interrupts the current processing and prompts the user for an action or an input in a modal
   * mode. Overview: The Dialog control is used to prompt the user for an action or a confirmation. It interrupts
   * the current app processing as it is the only focused UI element and the main screen is dimmed/blocked.
   * The content of the Dialog is fully customizable. Structure: A Dialog consists of a title, optional subtitle,
   * content area and a footer for action buttons. The Dialog is usually displayed at the center of the screen.
   * Its size and position can be changed by the user. To enable this, you need to set the properties `resizable`
   * and `draggable` accordingly. In that case the dialog title bar can be focused. While the keyboard focus
   * is located on the title bar, the dialog can be moved with the arrow keys and resized with shift+arrow
   * keys.
   *
   * There are other specialized types of dialogs:
   * 	 - {@link sap.m.P13nDialog Personalization Dialog} - used for personalizing sorting, filtering and grouping
   * 			in tables
   * 	 - {@link sap.m.SelectDialog Select Dialog} - used to select one or more items from a comprehensive
   * 			list
   * 	 - {@link sap.m.TableSelectDialog Table Select Dialog} - used to make a selection from a comprehensive
   * 			table containing multiple attributes or values
   * 	 - {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog Value Help Dialog} - used to help the user find
   * 			and select single and multiple values
   * 	 - {@link sap.m.ViewSettingsDialog View Settings Dialog} - used to sort, filter, or group data within
   * 			a (master) list or a table
   * 	 - {@link sap.m.BusyDialog Busy Dialog} - used to block the screen and inform the user about an ongoing
   * 			operation  Usage: When to use::
   * 	 - You want to display a system message.
   * 	 - You want to interrupt the user’s action.
   * 	 - You want to show a message with a short and a long description.  When not to use::
   * 	 - You just want to confirm a successful action.  Responsive Behavior:
   * 	 - If the `stretch` property is set to `true`, the Dialog displays on full screen.
   * 	 - If the `contentWidth` and/or `contentHeight` properties are set, the Dialog will try to fill those
   * 			sizes.
   * 	 - If there is no specific sizing, the Dialog will try to adjust its size to its content.  When
   * 			using the `sap.m.Dialog` in SAP Quartz themes, the breakpoints and layout paddings could be determined
   * 			by the Dialog's width. To enable this concept and add responsive paddings to an element of the Dialog
   * 			control, you have to add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * 			`sapUiResponsivePadding--subHeader`, `sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`.
   * 			Smartphones: If the Dialog has one or two actions, they will cover the entire footer. If there are more
   * 			actions, they will overflow. Tablets: The action buttons in the toolbar are **right-aligned**. Use **cozy**
   * 			mode on tablet devices. Desktop: The action buttons in the toolbar are **right-aligned**. Use **compact**
   * 			mode on desktop.
   */
  export default class Dialog extends Control implements PopupInterface {
    __implements__sap_ui_core_PopupInterface: boolean;
    /**
     * Constructor for a new Dialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/dialog/ Dialog}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DialogSettings
    );
    /**
     * Constructor for a new Dialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/dialog/ Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DialogSettings
    );

    /**
     * Returns the custom header instance when the `customHeader` aggregation is set. Otherwise, it returns
     * the internal managed header instance. This method can be called within composite controls which use `sap.m.Dialog`
     * inside.
     */
    _getAnyHeader(): void;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: Button
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired after the Dialog is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired after the Dialog is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired before the Dialog is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired before the Dialog is opened.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Close the dialog.
     */
    close(): void;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
     */
    destroyBeginButton(): this;
    /**
     * @SINCE 1.21.1
     *
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
     */
    destroyCustomHeader(): this;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
     */
    destroyEndButton(): this;
    /**
     * @SINCE 1.12.2
     *
     * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
     */
    destroySubHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Dialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Dialog with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This indicates the trigger of closing the Dialog. If the Dialog is closed by either the `beginButton`
         * or the `endButton`, the button that closes the Dialog is set to this parameter. Otherwise, the parameter
         * is set to `null`.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This indicates the trigger of closing the Dialog. If the Dialog is closed by either the `beginButton`
         * or the `endButton`, the button that closes the Dialog is set to this parameter. Otherwise, the parameter
         * is set to `null`.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getBeginButton beginButton}.
     *
     * The button which is rendered to the left side (right side in RTL mode) of the `endButton` in the footer
     * area inside the Dialog. As of version 1.21.1, there's a new aggregation `buttons` created with which
     * more than 2 buttons can be added to the footer area of the Dialog. If the new `buttons` aggregation is
     * set, any change made to this aggregation has no effect anymore. When running on a phone, this `button`
     * (and the `endButton` together when set) is (are) rendered at the center of the footer area. When running
     * on other platforms, this `button` (and the `endButton` together when set) is (are) rendered at the right
     * side (left side in RTL mode) of the footer area.
     */
    getBeginButton(): Button;
    /**
     * @SINCE 1.21.1
     *
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * Buttons can be added to the footer area of the Dialog through this aggregation. When this aggregation
     * is set, any change to the `beginButton` and `endButton` has no effect anymore. Buttons which are inside
     * this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the
     * middle of the footer.
     */
    getButtons(): Button[];
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getCloseOnNavigation closeOnNavigation}.
     *
     * Indicates whether the Dialog will be closed automatically when a routing navigation occurs.
     *
     * Default value is `true`.
     */
    getCloseOnNavigation(): boolean;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content inside the Dialog.
     * **Note:** When the content of the Dialog is comprised of controls that use `position: absolute`, such
     * as `SplitContainer`, the Dialog has to have either `stretch: true` or `contentHeight` set.
     */
    getContent(): Control[];
    /**
     * @SINCE 1.12.1
     *
     * Gets current value of property {@link #getContentHeight contentHeight}.
     *
     * Preferred height of the content in the Dialog. If the preferred height is bigger than the available space
     * on a screen, it will be overwritten by the maximum available height on a screen in order to make sure
     * that the Dialog isn't cut off.
     */
    getContentHeight(): CSSSize;
    /**
     * @SINCE 1.12.1
     *
     * Gets current value of property {@link #getContentWidth contentWidth}.
     *
     * Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone
     * in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait
     * mode. If the preferred width is less than the minimum width of the Dialog or more than the available
     * width of the screen, it will be overwritten by the min or max value. The current mininum value of the
     * Dialog width on tablet is 400px.
     */
    getContentWidth(): CSSSize;
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getCustomHeader customHeader}.
     *
     * When it is set, the `icon`, `title` and `showHeader` properties are ignored. Only the `customHeader`
     * is shown as the header of the Dialog.
     */
    getCustomHeader(): IBar;
    /**
     * @SINCE 1.30
     *
     * Gets current value of property {@link #getDraggable draggable}.
     *
     * Indicates whether the Dialog is draggable. If this property is set to `true`, the Dialog will be draggable
     * by its header. This property has a default value `false`. The Dialog can be draggable only in desktop
     * mode.
     *
     * Default value is `false`.
     */
    getDraggable(): boolean;
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getEndButton endButton}.
     *
     * The button which is rendered to the right side (left side in RTL mode) of the `beginButton` in the footer
     * area inside the Dialog. As of version 1.21.1, there's a new aggregation `buttons` created with which
     * more than 2 buttons can be added to the footer area of Dialog. If the new `buttons` aggregation is set,
     * any change made to this aggregation has no effect anymore. When running on a phone, this `button` (and
     * the `beginButton` together when set) is (are) rendered at the center of the footer area. When running
     * on other platforms, this `button` (and the `beginButton` together when set) is (are) rendered at the
     * right side (left side in RTL mode) of the footer area.
     */
    getEndButton(): Button;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getEscapeHandler escapeHandler}.
     *
     * This property expects a function with one parameter of type Promise. In the function, you should call
     * either `resolve()` or `reject()` on the Promise object.
     *  The function allows you to define custom behavior which will be executed when the Escape key is pressed.
     * By default, when the Escape key is pressed, the Dialog is immediately closed.
     */
    getEscapeHandler(): Function;
    /**
     * @SINCE 1.15.1
     *
     * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of the property.
     *
     * Default value is `true`.
     */
    getHorizontalScrolling(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon displayed in the Dialog header. This `icon` is invisible on the iOS platform and it is density-aware.
     * You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density
     * screen.
     */
    getIcon(): URI;
    /**
     * @SINCE 1.15.0
     *
     * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus},
     * or `null`.
     */
    getInitialFocus(): ID;
    /**
     * @deprecated (since 1.15.1) - `LeftButton` has been deprecated since 1.15.1. Please use the `beginButton`
     * instead which is more RTL friendly.
     *
     * ID of the element which is the current target of the association {@link #getLeftButton leftButton}, or
     * `null`.
     */
    getLeftButton(): ID;
    /**
     * Returns a metadata object for class sap.m.Dialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.30
     *
     * Gets current value of property {@link #getResizable resizable}.
     *
     * Indicates whether the Dialog is resizable. If this property is set to `true`, the Dialog will have a
     * resize handler in its bottom right corner. This property has a default value `false`. The Dialog can
     * be resizable only in desktop mode.
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * @deprecated (since 1.15.1) - `RightButton` has been deprecated since 1.15.1. Please use the `endButton`
     * instead which is more RTL friendly.
     *
     * ID of the element which is the current target of the association {@link #getRightButton rightButton},
     * or `null`.
     */
    getRightButton(): ID;
    /**
     * @SINCE 1.15.1
     *
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * Determines whether the header is shown inside the Dialog. If this property is set to `true`, the `text`
     * and `icon` properties are ignored. This property has a default value `true`.
     *
     * Default value is `true`.
     */
    getShowHeader(): boolean;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getState state}.
     *
     * Affects the `icon` and the `title` color.
     *
     * If a value other than `None` is set, a predefined icon will be added to the Dialog. Setting the `icon`
     * property will overwrite the predefined icon.
     *
     * Default value is `None`.
     */
    getState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.13.1
     *
     * Gets current value of property {@link #getStretch stretch}.
     *
     * Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched
     * to approximately 90% of the viewport. This property is only applicable to a Standard Dialog. Message-type
     * Dialog ignores it.
     *
     * Default value is `false`.
     */
    getStretch(): boolean;
    /**
     * @SINCE 1.11.2
     * @deprecated (since 1.13.1) - Please use the new stretch property instead. This enables a stretched Dialog
     * even on tablet and desktop. If you want to achieve the same effect as `stretchOnPhone`, please set the
     * stretch with jQuery.device.is.phone, then the Dialog is only stretched when it runs on a phone.
     *
     * Gets current value of property {@link #getStretchOnPhone stretchOnPhone}.
     *
     * Determines whether the Dialog will be displayed on full screen on a phone.
     *
     * Default value is `false`.
     */
    getStretchOnPhone(): boolean;
    /**
     * @SINCE 1.12.2
     *
     * Gets content of aggregation {@link #getSubHeader subHeader}.
     *
     * When a `subHeader` is assigned to the Dialog, it's rendered directly after the main header in the Dialog.
     * The `subHeader` is out of the content area and won't be scrolled when the content size is bigger than
     * the content area size.
     */
    getSubHeader(): IBar;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title text appears in the Dialog header.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * The `type` of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on
     * tablet and desktop.
     *
     * Default value is `Standard`.
     */
    getType(): DialogType | keyof typeof DialogType;
    /**
     * @SINCE 1.15.1
     *
     * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
     *
     * Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of this property.
     *
     * Default value is `true`.
     */
    getVerticalScrolling(): boolean;
    /**
     * @SINCE 1.21.1
     *
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getButtons buttons}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: Button
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * @SINCE 1.21.1
     *
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: Button,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * The method checks if the Dialog is open.
     *
     * It returns `true` when the Dialog is currently open (this includes opening and closing animations), otherwise
     * it returns `false`.
     */
    isOpen(): boolean;
    /**
     * Open the dialog.
     */
    open(): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.21.1
     *
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): Button[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.21.1
     *
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | Button
    ): Button;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getBeginButton beginButton}.
     */
    setBeginButton(
      /**
       * The beginButton to set
       */
      oBeginButton: Button
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getCloseOnNavigation closeOnNavigation}.
     *
     * Indicates whether the Dialog will be closed automatically when a routing navigation occurs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setCloseOnNavigation(
      /**
       * New value for property `closeOnNavigation`
       */
      bCloseOnNavigation?: boolean
    ): this;
    /**
     * @SINCE 1.12.1
     *
     * Sets a new value for property {@link #getContentHeight contentHeight}.
     *
     * Preferred height of the content in the Dialog. If the preferred height is bigger than the available space
     * on a screen, it will be overwritten by the maximum available height on a screen in order to make sure
     * that the Dialog isn't cut off.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentHeight(
      /**
       * New value for property `contentHeight`
       */
      sContentHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.12.1
     *
     * Sets a new value for property {@link #getContentWidth contentWidth}.
     *
     * Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone
     * in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait
     * mode. If the preferred width is less than the minimum width of the Dialog or more than the available
     * width of the screen, it will be overwritten by the min or max value. The current mininum value of the
     * Dialog width on tablet is 400px.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentWidth(
      /**
       * New value for property `contentWidth`
       */
      sContentWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getCustomHeader customHeader}.
     */
    setCustomHeader(
      /**
       * The customHeader to set
       */
      oCustomHeader: IBar
    ): this;
    /**
     * @SINCE 1.30
     *
     * Sets a new value for property {@link #getDraggable draggable}.
     *
     * Indicates whether the Dialog is draggable. If this property is set to `true`, the Dialog will be draggable
     * by its header. This property has a default value `false`. The Dialog can be draggable only in desktop
     * mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDraggable(
      /**
       * New value for property `draggable`
       */
      bDraggable?: boolean
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getEndButton endButton}.
     */
    setEndButton(
      /**
       * The endButton to set
       */
      oEndButton: Button
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getEscapeHandler escapeHandler}.
     *
     * This property expects a function with one parameter of type Promise. In the function, you should call
     * either `resolve()` or `reject()` on the Promise object.
     *  The function allows you to define custom behavior which will be executed when the Escape key is pressed.
     * By default, when the Escape key is pressed, the Dialog is immediately closed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setEscapeHandler(
      /**
       * New value for property `escapeHandler`
       */
      fnEscapeHandler?: Function
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of the property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setHorizontalScrolling(
      /**
       * New value for property `horizontalScrolling`
       */
      bHorizontalScrolling?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon displayed in the Dialog header. This `icon` is invisible on the iOS platform and it is density-aware.
     * You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density
     * screen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets the associated {@link #getInitialFocus initialFocus}.
     */
    setInitialFocus(
      /**
       * ID of an element which becomes the new target of this initialFocus association; alternatively, an element
       * instance may be given
       */
      oInitialFocus: ID | Control
    ): this;
    /**
     * @deprecated (since 1.15.1) - `LeftButton` has been deprecated since 1.15.1. Please use the `beginButton`
     * instead which is more RTL friendly.
     *
     * Sets the associated {@link #getLeftButton leftButton}.
     */
    setLeftButton(
      /**
       * ID of an element which becomes the new target of this leftButton association; alternatively, an element
       * instance may be given
       */
      oLeftButton: ID | Button
    ): this;
    /**
     * @SINCE 1.30
     *
     * Sets a new value for property {@link #getResizable resizable}.
     *
     * Indicates whether the Dialog is resizable. If this property is set to `true`, the Dialog will have a
     * resize handler in its bottom right corner. This property has a default value `false`. The Dialog can
     * be resizable only in desktop mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResizable(
      /**
       * New value for property `resizable`
       */
      bResizable?: boolean
    ): this;
    /**
     * @deprecated (since 1.15.1) - `RightButton` has been deprecated since 1.15.1. Please use the `endButton`
     * instead which is more RTL friendly.
     *
     * Sets the associated {@link #getRightButton rightButton}.
     */
    setRightButton(
      /**
       * ID of an element which becomes the new target of this rightButton association; alternatively, an element
       * instance may be given
       */
      oRightButton: ID | Button
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * Determines whether the header is shown inside the Dialog. If this property is set to `true`, the `text`
     * and `icon` properties are ignored. This property has a default value `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getState state}.
     *
     * Affects the `icon` and the `title` color.
     *
     * If a value other than `None` is set, a predefined icon will be added to the Dialog. Setting the `icon`
     * property will overwrite the predefined icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.13.1
     *
     * Sets a new value for property {@link #getStretch stretch}.
     *
     * Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched
     * to approximately 90% of the viewport. This property is only applicable to a Standard Dialog. Message-type
     * Dialog ignores it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStretch(
      /**
       * New value for property `stretch`
       */
      bStretch?: boolean
    ): this;
    /**
     * @SINCE 1.11.2
     * @deprecated (since 1.13.1) - Please use the new stretch property instead. This enables a stretched Dialog
     * even on tablet and desktop. If you want to achieve the same effect as `stretchOnPhone`, please set the
     * stretch with jQuery.device.is.phone, then the Dialog is only stretched when it runs on a phone.
     *
     * Sets a new value for property {@link #getStretchOnPhone stretchOnPhone}.
     *
     * Determines whether the Dialog will be displayed on full screen on a phone.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStretchOnPhone(
      /**
       * New value for property `stretchOnPhone`
       */
      bStretchOnPhone?: boolean
    ): this;
    /**
     * @SINCE 1.12.2
     *
     * Sets the aggregated {@link #getSubHeader subHeader}.
     */
    setSubHeader(
      /**
       * The subHeader to set
       */
      oSubHeader: IBar
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title text appears in the Dialog header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * The `type` of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on
     * tablet and desktop.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: DialogType | keyof typeof DialogType
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
     *
     * Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVerticalScrolling(
      /**
       * New value for property `verticalScrolling`
       */
      bVerticalScrolling?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired after the Dialog is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired after the Dialog is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired before the Dialog is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Dialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Dialog` itself.
     *
     * This event will be fired before the Dialog is opened.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Dialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $DialogSettings extends $ControlSettings {
    /**
     * Icon displayed in the Dialog header. This `icon` is invisible on the iOS platform and it is density-aware.
     * You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density
     * screen.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Title text appears in the Dialog header.
     */
    title?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.15.1
     *
     * Determines whether the header is shown inside the Dialog. If this property is set to `true`, the `text`
     * and `icon` properties are ignored. This property has a default value `true`.
     */
    showHeader?: boolean | PropertyBindingInfo;

    /**
     * The `type` of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on
     * tablet and desktop.
     */
    type?: (DialogType | keyof typeof DialogType) | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Affects the `icon` and the `title` color.
     *
     * If a value other than `None` is set, a predefined icon will be added to the Dialog. Setting the `icon`
     * property will overwrite the predefined icon.
     */
    state?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     * @deprecated (since 1.13.1) - Please use the new stretch property instead. This enables a stretched Dialog
     * even on tablet and desktop. If you want to achieve the same effect as `stretchOnPhone`, please set the
     * stretch with jQuery.device.is.phone, then the Dialog is only stretched when it runs on a phone.
     *
     * Determines whether the Dialog will be displayed on full screen on a phone.
     */
    stretchOnPhone?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.13.1
     *
     * Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched
     * to approximately 90% of the viewport. This property is only applicable to a Standard Dialog. Message-type
     * Dialog ignores it.
     */
    stretch?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.12.1
     *
     * Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone
     * in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait
     * mode. If the preferred width is less than the minimum width of the Dialog or more than the available
     * width of the screen, it will be overwritten by the min or max value. The current mininum value of the
     * Dialog width on tablet is 400px.
     */
    contentWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.12.1
     *
     * Preferred height of the content in the Dialog. If the preferred height is bigger than the available space
     * on a screen, it will be overwritten by the maximum available height on a screen in order to make sure
     * that the Dialog isn't cut off.
     */
    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.15.1
     *
     * Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of the property.
     */
    horizontalScrolling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.1
     *
     * Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content
     * area. The Dialog detects if there's `sap.m.NavContainer`, `sap.m.Page`, `sap.m.ScrollContainer` or `sap.m.SplitContainer`
     * as a direct child added to the Dialog. If there is, the Dialog will turn off `scrolling` by setting this
     * property to `false`, automatically ignoring the existing value of this property.
     */
    verticalScrolling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30
     *
     * Indicates whether the Dialog is resizable. If this property is set to `true`, the Dialog will have a
     * resize handler in its bottom right corner. This property has a default value `false`. The Dialog can
     * be resizable only in desktop mode.
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30
     *
     * Indicates whether the Dialog is draggable. If this property is set to `true`, the Dialog will be draggable
     * by its header. This property has a default value `false`. The Dialog can be draggable only in desktop
     * mode.
     */
    draggable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * This property expects a function with one parameter of type Promise. In the function, you should call
     * either `resolve()` or `reject()` on the Promise object.
     *  The function allows you to define custom behavior which will be executed when the Escape key is pressed.
     * By default, when the Escape key is pressed, the Dialog is immediately closed.
     */
    escapeHandler?: Function | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Indicates whether the Dialog will be closed automatically when a routing navigation occurs.
     */
    closeOnNavigation?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * The content inside the Dialog.
     * **Note:** When the content of the Dialog is comprised of controls that use `position: absolute`, such
     * as `SplitContainer`, the Dialog has to have either `stretch: true` or `contentHeight` set.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.12.2
     *
     * When a `subHeader` is assigned to the Dialog, it's rendered directly after the main header in the Dialog.
     * The `subHeader` is out of the content area and won't be scrolled when the content size is bigger than
     * the content area size.
     */
    subHeader?: IBar;

    /**
     * @SINCE 1.15.1
     *
     * When it is set, the `icon`, `title` and `showHeader` properties are ignored. Only the `customHeader`
     * is shown as the header of the Dialog.
     */
    customHeader?: IBar;

    /**
     * @SINCE 1.15.1
     *
     * The button which is rendered to the left side (right side in RTL mode) of the `endButton` in the footer
     * area inside the Dialog. As of version 1.21.1, there's a new aggregation `buttons` created with which
     * more than 2 buttons can be added to the footer area of the Dialog. If the new `buttons` aggregation is
     * set, any change made to this aggregation has no effect anymore. When running on a phone, this `button`
     * (and the `endButton` together when set) is (are) rendered at the center of the footer area. When running
     * on other platforms, this `button` (and the `endButton` together when set) is (are) rendered at the right
     * side (left side in RTL mode) of the footer area.
     */
    beginButton?: Button;

    /**
     * @SINCE 1.15.1
     *
     * The button which is rendered to the right side (left side in RTL mode) of the `beginButton` in the footer
     * area inside the Dialog. As of version 1.21.1, there's a new aggregation `buttons` created with which
     * more than 2 buttons can be added to the footer area of Dialog. If the new `buttons` aggregation is set,
     * any change made to this aggregation has no effect anymore. When running on a phone, this `button` (and
     * the `beginButton` together when set) is (are) rendered at the center of the footer area. When running
     * on other platforms, this `button` (and the `beginButton` together when set) is (are) rendered at the
     * right side (left side in RTL mode) of the footer area.
     */
    endButton?: Button;

    /**
     * @SINCE 1.21.1
     *
     * Buttons can be added to the footer area of the Dialog through this aggregation. When this aggregation
     * is set, any change to the `beginButton` and `endButton` has no effect anymore. Buttons which are inside
     * this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the
     * middle of the footer.
     */
    buttons?: Button[] | Button | AggregationBindingInfo;

    /**
     * @deprecated (since 1.15.1) - `LeftButton` has been deprecated since 1.15.1. Please use the `beginButton`
     * instead which is more RTL friendly.
     *
     * `LeftButton` is shown at the left edge of the bar in iOS, and at the right side of the bar for the other
     * platforms. Please set this to `null` if you want to remove the Left button from the bar. And the button
     * is only removed from the bar, not destroyed. When `showHeader` is set to `false`, this property will
     * be ignored. Setting `leftButton` will also set the `beginButton` internally.
     */
    leftButton?: Button | string;

    /**
     * @deprecated (since 1.15.1) - `RightButton` has been deprecated since 1.15.1. Please use the `endButton`
     * instead which is more RTL friendly.
     *
     * `RightButton` is always shown at the right edge of the bar. Please set this to null if you want to remove
     * the Right button from the bar. And the button is only removed from the bar, not destroyed. When `showHeader`
     * is set to false, this property will be ignored. Setting `rightButton` will also set the `endButton` internally.
     */
    rightButton?: Button | string;

    /**
     * @SINCE 1.15.0
     *
     * In the Dialog focus is set first on the `beginButton` and then on `endButton`, when available. If another
     * control needs to get the focus, set the `initialFocus` with the control which should be focused on. Setting
     * `initialFocus` to input controls doesn't open the On-Screen keyboard on mobile device as, due to browser
     * limitation, the On-Screen keyboard can't be opened with JavaScript code. The opening of On-Screen keyboard
     * must be triggered by real user action.
     */
    initialFocus?: Control | string;

    /**
     * Association to controls/IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls/IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event will be fired before the Dialog is opened.
     */
    beforeOpen?: Function;

    /**
     * This event will be fired after the Dialog is opened.
     */
    afterOpen?: Function;

    /**
     * This event will be fired before the Dialog is closed.
     */
    beforeClose?: Function;

    /**
     * This event will be fired after the Dialog is closed.
     */
    afterClose?: Function;
  }
}

declare module "sap/m/DisplayListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TextDirection } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * `sap.m.DisplayListItem` can be used to represent a label and a value.
   */
  export default class DisplayListItem extends ListItemBase {
    /**
     * Constructor for a new DisplayListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/display-list-item/ Display List Item}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DisplayListItemSettings
    );
    /**
     * Constructor for a new DisplayListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/display-list-item/ Display List Item}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DisplayListItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.DisplayListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DisplayListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Defines the label of the list item.
     */
    getLabel(): string;
    /**
     * Returns a metadata object for class sap.m.DisplayListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the list item.
     */
    getValue(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getValueTextDirection valueTextDirection}.
     *
     * Defines the `value` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getValueTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Defines the label of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Defines the value of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getValueTextDirection valueTextDirection}.
     *
     * Defines the `value` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setValueTextDirection(
      /**
       * New value for property `valueTextDirection`
       */
      sValueTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
  }

  export interface $DisplayListItemSettings extends $ListItemBaseSettings {
    /**
     * Defines the label of the list item.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Defines the value of the list item.
     */
    value?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the `value` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     */
    valueTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/DraftIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { DraftIndicatorState } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.32.0
   *
   * A draft indicator is {@link sap.m.Label}.
   */
  export default class DraftIndicator extends Control {
    /**
     * Constructor for a new DraftIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DraftIndicatorSettings
    );
    /**
     * Constructor for a new DraftIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DraftIndicatorSettings
    );

    /**
     * Clears the indicator state
     */
    clearDraftState(): void;
    /**
     * Creates a new subclass of class sap.m.DraftIndicator with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DraftIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.DraftIndicator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMinDisplayTime minDisplayTime}.
     *
     * Minimum time in milliseconds for showing the draft indicator
     *
     * Default value is `1500`.
     */
    getMinDisplayTime(): int;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * State of the indicator. Could be "Saving", "Saved" and "Clear".
     *
     * Default value is `Clear`.
     */
    getState(): DraftIndicatorState | keyof typeof DraftIndicatorState;
    /**
     * Sets a new value for property {@link #getMinDisplayTime minDisplayTime}.
     *
     * Minimum time in milliseconds for showing the draft indicator
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1500`.
     */
    setMinDisplayTime(
      /**
       * New value for property `minDisplayTime`
       */
      iMinDisplayTime?: int
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * State of the indicator. Could be "Saving", "Saved" and "Clear".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Clear`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: DraftIndicatorState | keyof typeof DraftIndicatorState
    ): this;
    /**
     * Sets the indicator in "Saved" state
     */
    showDraftSaved(): void;
    /**
     * Sets the indicator in "Saving..." state
     */
    showDraftSaving(): void;
  }

  export interface $DraftIndicatorSettings extends $ControlSettings {
    /**
     * State of the indicator. Could be "Saving", "Saved" and "Clear".
     */
    state?:
      | (DraftIndicatorState | keyof typeof DraftIndicatorState)
      | PropertyBindingInfo;

    /**
     * Minimum time in milliseconds for showing the draft indicator
     */
    minDisplayTime?: int | PropertyBindingInfo;
  }
}

declare module "sap/m/ExpandableText" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, TextAlign, TextDirection } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import {
    EmptyIndicatorMode,
    ExpandableTextOverflowMode,
    WrappingType,
  } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.87
   *
   * The `ExpandableText` control can be used to display long texts inside a table, list or form.
   *
   * Overview: Only the first characters from the text field are shown initially and a "More" link which allows
   * the full text to be displayed. The `overflowMode` property determines if the full text will be displayed
   * expanded in place (default) or in a popover. If the text is expanded a "Less" link is displayed, which
   * allows collapsing the text field.
   *
   * Usage:
   *
   * When to use
   * 	 - You specifically have to deal with long texts/descriptions.
   *
   * When not to use
   * 	 - Do not use long texts and descriptions if you can provide short and meaningful alternatives.
   * 	 - The content is critical for the user. In this case use short descriptions that can fit in.
   */
  export default class ExpandableText extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new ExpandableText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ExpandableTextSettings
    );
    /**
     * Constructor for a new ExpandableText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ExpandableTextSettings
    );

    /**
     * Binds property {@link #getText text} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindText(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * Creates a new subclass of class sap.m.ExpandableText with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ExpandableText>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets the accessibility information for the text.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.91
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * Gets current value of property {@link #getMaxCharacters maxCharacters}.
     *
     * Specifies the maximum number of characters from the beginning of the text field that are shown initially.
     *
     * Default value is `100`.
     */
    getMaxCharacters(): int;
    /**
     * Returns a metadata object for class sap.m.ExpandableText.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOverflowMode overflowMode}.
     *
     * Determines how the full text will be displayed - InPlace or Popover
     *
     * Default value is `InPlace`.
     */
    getOverflowMode():
      | ExpandableTextOverflowMode
      | keyof typeof ExpandableTextOverflowMode;
    /**
     * Gets current value of property {@link #getRenderWhitespace renderWhitespace}.
     *
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser.
     *
     * Default value is `false`.
     */
    getRenderWhitespace(): boolean;
    /**
     * Gets the text.
     */
    getText(
      /**
       * Indication for normalized text.
       */
      bNormalize: boolean
    ): string;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text.
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Available options for the text direction are left-to-right (LTR) and right-to-left (RTL) By default the
     * control inherits the text direction from its parent control.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Returns the text node container's DOM reference. This can be different from `getDomRef` when inner wrapper
     * is needed.
     */
    getTextDomRef(): HTMLElement | null;
    /**
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * Default value is `Normal`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * @SINCE 1.91
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * Sets a new value for property {@link #getMaxCharacters maxCharacters}.
     *
     * Specifies the maximum number of characters from the beginning of the text field that are shown initially.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setMaxCharacters(
      /**
       * New value for property `maxCharacters`
       */
      iMaxCharacters?: int
    ): this;
    /**
     * Sets a new value for property {@link #getOverflowMode overflowMode}.
     *
     * Determines how the full text will be displayed - InPlace or Popover
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `InPlace`.
     */
    setOverflowMode(
      /**
       * New value for property `overflowMode`
       */
      sOverflowMode?:
        | ExpandableTextOverflowMode
        | keyof typeof ExpandableTextOverflowMode
    ): this;
    /**
     * Sets a new value for property {@link #getRenderWhitespace renderWhitespace}.
     *
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRenderWhitespace(
      /**
       * New value for property `renderWhitespace`
       */
      bRenderWhitespace?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the text to be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Available options for the text direction are left-to-right (LTR) and right-to-left (RTL) By default the
     * control inherits the text direction from its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Normal`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
    /**
     * Unbinds property {@link #getText text} from model data.
     */
    unbindText(): this;
  }

  export interface $ExpandableTextSettings extends $ControlSettings {
    /**
     * Determines the text to be displayed.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Available options for the text direction are left-to-right (LTR) and right-to-left (RTL) By default the
     * control inherits the text direction from its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Defines the type of text wrapping to be used (hyphenated or normal).
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * Sets the horizontal alignment of the text.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser.
     */
    renderWhitespace?: boolean | PropertyBindingInfo;

    /**
     * Determines how the full text will be displayed - InPlace or Popover
     */
    overflowMode?:
      | (ExpandableTextOverflowMode | keyof typeof ExpandableTextOverflowMode)
      | PropertyBindingInfo;

    /**
     * Specifies the maximum number of characters from the beginning of the text field that are shown initially.
     */
    maxCharacters?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.91
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/FacetFilter" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IShrinkable } from "sap/ui/core/library";

  import FacetFilterList from "sap/m/FacetFilterList";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { FacetFilterType } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Provides filtering functionality with multiple parameters.
   *
   * Overview:
   *
   * The `FacetFilter` control is used to provide filtering functionality with multiple parameters and supports
   * the users in finding the information they need from potentially very large data sets.
   *
   * Your app can have dependencies between facets where selection of filter items in one facet list limits
   * the list of valid filters in another facet list.
   *
   * The `FacetFilter` uses {@link sap.m.FacetFilterList FacetFilterList} and {@link sap.m.FacetFilterItem
   * FacetFilterItem} to model facets and their associated filters.
   *
   * **Note: **{@link sap.m.FacetFilterList FacetFilterList} is a subclass of {@link sap.m.List} and supports
   * growing enablement feature via the property `growing`. When you use this feature, be aware that it only
   * works with one-way data binding. Having growing feature enabled when the `items` aggregation is bound
   * to a model with two-way data binding, may lead to unexpected and/or inconsistent behavior across browsers,
   * such as unexpected closing of the list.
   *
   * Usage:
   *
   * Use the `FacetFilter` if your app displays a large list of items that can be grouped by multiple parameters,
   * for example products by category and supplier. With the `FacetFilter`, you allow the users to dynamically
   * filter the list so it only displays products from the categories and suppliers they want to see.
   *
   * While the {@link sap.m.FacetFilterList} popup is opened (when the user selects a button corresponding
   * to the list's name), any other activities leading to focus change will close it. For example, when the
   * popup is opened and the app developer loads a {@link sap.m.BusyDialog} or any other dialog that obtains
   * the focus, the popup will be closed.
   *
   * Responsive behavior:
   *
   * The `FacetFilter` supports the following two types, which can be configured using the control's `type`
   * property:
   *
   *
   * 	 - Simple type (default) - only available for desktop and tablet screen sizes. The active facets are
   * 			displayed as individually selectable buttons on the toolbar.
   * 	 - Light type - automatically enabled on smart phone sized devices, but also available for desktop and
   * 			tablets. The active facets and selected filter items are displayed in the summary bar. When the user
   * 			selects the summary bar, a navigable dialog list of all facets is displayed. When the user selects a
   * 			facet, the dialog scrolls to show the list of filters that are available for the selected facet.
   *
   * Additional Information:
   *
   * For more information, go to **Developer Guide** section in the Demo Kit and navigate to **More About Controls** > **sap.m** > **Facet Filter**/
  export default class FacetFilter extends Control implements IShrinkable {
    __implements__sap_ui_core_IShrinkable: boolean;
    /**
     * Constructor for a new `FacetFilter`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:c6c38217a4a64001a22ad76cdfa97fae Facet Filter}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterSettings
    );
    /**
     * Constructor for a new `FacetFilter`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:c6c38217a4a64001a22ad76cdfa97fae Facet Filter}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterSettings
    );

    /**
     * Adds some list to the aggregation {@link #getLists lists}.
     */
    addList(
      /**
       * The list to add; if empty, nothing is inserted
       */
      oList: FacetFilterList
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.FacetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilter` itself.
     *
     * Fired when the user confirms filter selection.
     */
    attachConfirm(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.FacetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilter` itself.
     *
     * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `search` and `reset` event handler
     * functions.
     */
    attachReset(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the lists in the aggregation {@link #getLists lists}.
     */
    destroyLists(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:confirm confirm} event of this `sap.m.FacetFilter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachConfirm(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:reset reset} event of this `sap.m.FacetFilter`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachReset(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FacetFilter with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FacetFilter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:confirm confirm} to attached listeners.
     */
    fireConfirm(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:reset reset} to attached listeners.
     */
    fireReset(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getLists lists}.
     *
     * Collection of FacetFilterList controls.
     */
    getLists(): FacetFilterList[];
    /**
     * Gets current value of property {@link #getLiveSearch liveSearch}.
     *
     * Enables/disables live search in the search field of all `sap.m.FacetFilterList` instances.
     *
     * Default value is `true`.
     */
    getLiveSearch(): boolean;
    /**
     * Returns a metadata object for class sap.m.FacetFilter.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowPersonalization showPersonalization}.
     *
     * If set to `true` and the FacetFilter type is `Simple`, then the Add Facet icon will be displayed and
     * each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate
     * the facet.
     *
     * **Note:** Always set this property to `true` when your facet lists are not active, so that the user is
     * able to select them and interact with them.
     *
     * Default value is `false`.
     */
    getShowPersonalization(): boolean;
    /**
     * Gets current value of property {@link #getShowPopoverOKButton showPopoverOKButton}.
     *
     * If set to `true`, an OK button is displayed for every FacetFilterList popover. This button allows the
     * user to close the popover from within the popover instead of having to click outside of it.
     *
     * Default value is `false`.
     */
    getShowPopoverOKButton(): boolean;
    /**
     * Gets current value of property {@link #getShowReset showReset}.
     *
     * Shows/hides the FacetFilter Reset button.
     *
     * Default value is `true`.
     */
    getShowReset(): boolean;
    /**
     * Gets current value of property {@link #getShowSummaryBar showSummaryBar}.
     *
     * Shows the summary bar instead of the FacetFilter buttons bar when set to `true`.
     *
     * Default value is `false`.
     */
    getShowSummaryBar(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the default appearance of the FacetFilter on the device. Possible values are `Simple` (default)
     * and `Light`.
     *
     * Default value is `Simple`.
     */
    getType(): FacetFilterType | keyof typeof FacetFilterType;
    /**
     * Checks for the provided `sap.m.FacetFilterList` in the aggregation {@link #getLists lists}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfList(
      /**
       * The list whose index is looked for
       */
      oList: FacetFilterList
    ): int;
    /**
     * Inserts a list into the aggregation {@link #getLists lists}.
     */
    insertList(
      /**
       * The list to insert; if empty, nothing is inserted
       */
      oList: FacetFilterList,
      /**
       * The `0`-based index the list should be inserted at; for a negative value of `iIndex`, the list is inserted
       * at position 0; for a value greater than the current size of the aggregation, the list is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Opens the FacetFilter dialog.
     */
    openFilterDialog(): this;
    /**
     * Removes all the controls from the aggregation {@link #getLists lists}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllLists(): FacetFilterList[];
    /**
     * Removes a list from the aggregation {@link #getLists lists}.
     */
    removeList(
      /**
       * The list to remove or its index or id
       */
      vList: int | string | FacetFilterList
    ): FacetFilterList;
    /**
     * Sets a new value for property {@link #getLiveSearch liveSearch}.
     *
     * Enables/disables live search in the search field of all `sap.m.FacetFilterList` instances.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setLiveSearch(
      /**
       * New value for property `liveSearch`
       */
      bLiveSearch?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowPersonalization showPersonalization}.
     *
     * If set to `true` and the FacetFilter type is `Simple`, then the Add Facet icon will be displayed and
     * each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate
     * the facet.
     *
     * **Note:** Always set this property to `true` when your facet lists are not active, so that the user is
     * able to select them and interact with them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowPersonalization(
      /**
       * New value for property `showPersonalization`
       */
      bShowPersonalization?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowPopoverOKButton showPopoverOKButton}.
     *
     * If set to `true`, an OK button is displayed for every FacetFilterList popover. This button allows the
     * user to close the popover from within the popover instead of having to click outside of it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowPopoverOKButton(
      /**
       * New value for property `showPopoverOKButton`
       */
      bShowPopoverOKButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowReset showReset}.
     *
     * Shows/hides the FacetFilter Reset button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowReset(
      /**
       * New value for property `showReset`
       */
      bShowReset?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSummaryBar showSummaryBar}.
     *
     * Shows the summary bar instead of the FacetFilter buttons bar when set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSummaryBar(
      /**
       * New value for property `showSummaryBar`
       */
      bShowSummaryBar?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the default appearance of the FacetFilter on the device. Possible values are `Simple` (default)
     * and `Light`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Simple`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: FacetFilterType | keyof typeof FacetFilterType
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.FacetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilter` itself.
     *
     * Fired when the user confirms filter selection.
     */
    attachConfirm(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilter` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.FacetFilter`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilter` itself.
     *
     * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `search` and `reset` event handler
     * functions.
     */
    attachReset(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilter` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FacetFilterSettings extends $ControlSettings {
    /**
     * If set to `true` and the FacetFilter type is `Simple`, then the Add Facet icon will be displayed and
     * each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate
     * the facet.
     *
     * **Note:** Always set this property to `true` when your facet lists are not active, so that the user is
     * able to select them and interact with them.
     */
    showPersonalization?: boolean | PropertyBindingInfo;

    /**
     * Defines the default appearance of the FacetFilter on the device. Possible values are `Simple` (default)
     * and `Light`.
     */
    type?:
      | (FacetFilterType | keyof typeof FacetFilterType)
      | PropertyBindingInfo;

    /**
     * Enables/disables live search in the search field of all `sap.m.FacetFilterList` instances.
     */
    liveSearch?: boolean | PropertyBindingInfo;

    /**
     * Shows the summary bar instead of the FacetFilter buttons bar when set to `true`.
     */
    showSummaryBar?: boolean | PropertyBindingInfo;

    /**
     * Shows/hides the FacetFilter Reset button.
     */
    showReset?: boolean | PropertyBindingInfo;

    /**
     * If set to `true`, an OK button is displayed for every FacetFilterList popover. This button allows the
     * user to close the popover from within the popover instead of having to click outside of it.
     */
    showPopoverOKButton?: boolean | PropertyBindingInfo;

    /**
     * Collection of FacetFilterList controls.
     */
    lists?: FacetFilterList[] | FacetFilterList | AggregationBindingInfo;

    /**
     * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `search` and `reset` event handler
     * functions.
     */
    reset?: Function;

    /**
     * Fired when the user confirms filter selection.
     */
    confirm?: Function;
  }
}

declare module "sap/m/FacetFilterItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Represents a value for the {@link sap.m.FacetFilterList} control.
   */
  export default class FacetFilterItem extends ListItemBase {
    /**
     * Constructor for a new `FacetFilterItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:395392f30f2a4c4d80d110d5f923da77 Facet Filter Item}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterItemSettings
    );
    /**
     * Constructor for a new `FacetFilterItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:395392f30f2a4c4d80d110d5f923da77 Facet Filter Item}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.FacetFilterItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FacetFilterItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.18.11) - replaced by `setCounter` method
     *
     * Gets current value of property {@link #getCount count}.
     *
     * Defines the number of objects that match this item in the target data set.
     */
    getCount(): int;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Can be used as input for subsequent actions.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.FacetFilterItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Determines the text to be displayed for the item.
     */
    getText(): string;
    /**
     * @deprecated (since 1.18.11) - replaced by `setCounter` method
     *
     * Sets a new value for property {@link #getCount count}.
     *
     * Defines the number of objects that match this item in the target data set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCount(
      /**
       * New value for property `count`
       */
      iCount?: int
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Can be used as input for subsequent actions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $FacetFilterItemSettings extends $ListItemBaseSettings {
    /**
     * Can be used as input for subsequent actions.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Determines the text to be displayed for the item.
     */
    text?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.18.11) - replaced by `setCounter` method
     *
     * Defines the number of objects that match this item in the target data set.
     */
    count?: int | PropertyBindingInfo;
  }
}

declare module "sap/m/FacetFilterList" {
  import { default as List, $ListSettings } from "sap/m/List";

  import FacetFilterItem from "sap/m/FacetFilterItem";

  import { FacetFilterListDataType, ListMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Represents a list of values for the {@link sap.m.FacetFilter} control.
   *
   * **Note: **`FacetFilterList` is a subclass of {@link sap.m.List} and supports growing enablement feature
   * via the property `growing`. When you use this feature, be aware that it only works with one-way data
   * binding. Having growing feature enabled when the `items` aggregation is bound to a model with two-way
   * data binding, may lead to unexpected and/or inconsistent behavior across browsers, such as unexpected
   * closing of the list.
   *
   * While the `FacetFilterList` popup is opened (when the user selects a button corresponding to the list's
   * name), any other activities leading to focus change will close it. For example, when the popup is opened
   * and the app developer loads a {@link sap.m.BusyDialog} or any other dialog that obtains the focus, the
   * popup will be closed.
   */
  export default class FacetFilterList extends List {
    /**
     * Constructor for a new `FacetFilterList`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:395392f30f2a4c4d80d110d5f923da77 Facet Filter List}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterListSettings
    );
    /**
     * Constructor for a new `FacetFilterList`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:395392f30f2a4c4d80d110d5f923da77 Facet Filter List}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FacetFilterListSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:listClose listClose} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Triggered after the list of items is closed.
     */
    attachListClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listOpen listOpen} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Fired before the filter list is opened.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `listOpen` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `listOpen` event handler function.
     */
    attachListOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.76
     *
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Triggered after the Search button is pressed or by pressing Enter in search input field.
     *
     * The default filtering behavior of the control can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. Preventing the default behavior is useful in cases when
     * items aggregation could be taking long time fetching from the OData model. As a result, no list items
     * are loaded initially. If the default filtering behavior is prevented then filtering behavior has to be
     * defined at application level inside the `search` event handler function.
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:listClose listClose} event of this `sap.m.FacetFilterList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachListClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:listOpen listOpen} event of this `sap.m.FacetFilterList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachListOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.76
     *
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.m.FacetFilterList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FacetFilterList with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.List.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FacetFilterList>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:listClose listClose} to attached listeners.
     */
    fireListClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Array of selected items. Items returned are only copies and therefore can only be used to read properties,
         * not set them.
         */
        selectedItems?: FacetFilterItem[];
        /**
         * `True` if the select All checkbox is selected. This will be `false` if all items are actually selected
         * (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.
         */
        allSelected?: boolean;
        /**
         * Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter,
         * this contains only the keys for all selected items, not the items themselves. Being an associative array,
         * each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem
         * text.
         */
        selectedKeys?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:listOpen listOpen} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireListOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * @SINCE 1.76
     *
     * Fires event {@link #event:search search} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Value received as user input in the `sap.m.SearchField`, and taken as a JavaScript string object.
         */
        term?: string;
      }
    ): boolean;
    /**
     * Gets current value of property {@link #getActive active}.
     *
     * Indicates that the list is displayed as a button when the FacetFilter type is set to `Simple`.
     *
     * **Note:** Set the `showPersonalization` property of the `FacetFilter` to `true` when this property is
     * set to `false`. This is needed, as the non-active lists are not displayed, and without a personalization
     * button they can't be selected by the user.
     *
     * Default value is `true`.
     */
    getActive(): boolean;
    /**
     * Gets current value of property {@link #getAllCount allCount}.
     *
     * Determines the number of objects that match this item in the target data set when all filter items are
     * selected.
     */
    getAllCount(): int;
    /**
     * Gets current value of property {@link #getDataType dataType}.
     *
     * FacetFilterList data type. Only String data type will provide search function.
     *
     * Default value is `String`.
     */
    getDataType():
      | FacetFilterListDataType
      | keyof typeof FacetFilterListDataType;
    /**
     * Gets current value of property {@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch}.
     *
     * If set to `true`, enables case-insensitive search for OData.
     *
     * Default value is `false`.
     */
    getEnableCaseInsensitiveSearch(): boolean;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Unique identifier for this filter list.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.FacetFilterList.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.20.0) - replaced by `setMode` method. `FacetFilterList` overrides the `setMode`
     * method to restrict the possible modes to `MultiSelect` and `SingleSelectMaster`. All other modes are
     * ignored and will not be set.
     *
     * Gets current value of property {@link #getMultiSelect multiSelect}.
     *
     * Specifies whether multiple or single selection is used.
     *
     * Default value is `true`.
     */
    getMultiSelect(): boolean;
    /**
     * @SINCE 1.22.1
     *
     * Gets current value of property {@link #getRetainListSequence retainListSequence}.
     *
     * Retains the list sequence if it is inactive and made active again.
     *
     * Default value is `false`.
     */
    getRetainListSequence(): boolean;
    /**
     * @SINCE 1.20.3
     *
     * Returns the keys of the selected elements as an associative array. An empty object is returned if no
     * items are selected.
     */
    getSelectedKeys(): object;
    /**
     * Gets current value of property {@link #getSequence sequence}.
     *
     * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered
     * by ascending order of sequence.
     *
     * Default value is `-1`.
     */
    getSequence(): int;
    /**
     * @SINCE 1.20.4
     *
     * Gets current value of property {@link #getShowRemoveFacetIcon showRemoveFacetIcon}.
     *
     * Specifies whether remove icon for facet is visible or hidden.
     *
     * Default value is `true`.
     */
    getShowRemoveFacetIcon(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter
     * type is set to `Simple`. It is also displayed as a list item in the facet page of the dialog.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getWordWrap wordWrap}.
     *
     * If set to `true`, the item text wraps when it is too long.
     *
     * Default value is `false`.
     */
    getWordWrap(): boolean;
    /**
     * @SINCE 1.20.4
     *
     * Removes the specified key from the selected keys cache and deselects the item.
     */
    removeSelectedKey(
      /**
       * The key of the selected item to be removed from the cache. If `null` then the text parameter will be
       * used as the key.
       */
      sKey: string,
      /**
       * The text of the selected item to be removed from the cache. If the key parameter is `null` then text
       * will be used as the key.
       */
      sText: string
    ): void;
    /**
     * @SINCE 1.20.4
     *
     * Removes all selected keys from the selected keys cache and deselects all items.
     */
    removeSelectedKeys(): void;
    /**
     * Sets a new value for property {@link #getActive active}.
     *
     * Indicates that the list is displayed as a button when the FacetFilter type is set to `Simple`.
     *
     * **Note:** Set the `showPersonalization` property of the `FacetFilter` to `true` when this property is
     * set to `false`. This is needed, as the non-active lists are not displayed, and without a personalization
     * button they can't be selected by the user.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAllCount allCount}.
     *
     * Determines the number of objects that match this item in the target data set when all filter items are
     * selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAllCount(
      /**
       * New value for property `allCount`
       */
      iAllCount?: int
    ): this;
    /**
     * Sets a new value for property {@link #getDataType dataType}.
     *
     * FacetFilterList data type. Only String data type will provide search function.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `String`.
     */
    setDataType(
      /**
       * New value for property `dataType`
       */
      sDataType?: FacetFilterListDataType | keyof typeof FacetFilterListDataType
    ): this;
    /**
     * Sets a new value for property {@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch}.
     *
     * If set to `true`, enables case-insensitive search for OData.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableCaseInsensitiveSearch(
      /**
       * New value for property `enableCaseInsensitiveSearch`
       */
      bEnableCaseInsensitiveSearch?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Unique identifier for this filter list.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Overrides to allow only MultiSelect and SingleSelectMaster list modes. If an invalid mode is given then
     * the mode will not be changed.
     */
    setMode(
      /**
       * The list mode
       */
      mode: ListMode | keyof typeof ListMode
    ): this;
    /**
     * @deprecated (since 1.20.0) - replaced by `setMode` method. `FacetFilterList` overrides the `setMode`
     * method to restrict the possible modes to `MultiSelect` and `SingleSelectMaster`. All other modes are
     * ignored and will not be set.
     *
     * Sets a new value for property {@link #getMultiSelect multiSelect}.
     *
     * Specifies whether multiple or single selection is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setMultiSelect(
      /**
       * New value for property `multiSelect`
       */
      bMultiSelect?: boolean
    ): this;
    /**
     * @SINCE 1.22.1
     *
     * Sets a new value for property {@link #getRetainListSequence retainListSequence}.
     *
     * Retains the list sequence if it is inactive and made active again.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRetainListSequence(
      /**
       * New value for property `retainListSequence`
       */
      bRetainListSequence?: boolean
    ): this;
    /**
     * @SINCE 1.20.3
     *
     * Used to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant.
     * Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical
     * items are removed by filtering or sorting. If aKeys is `undefined`, `null`, or {} (empty object) then
     * all keys are deleted. After this method completes, only those items with matching keys will be selected.
     * All other items in the list will be deselected.
     */
    setSelectedKeys(
      /**
       * Associative array indicating which FacetFilterItems should be selected in the list. Each property must
       * be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text
       * property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button
       * or FacetFilter summary bar is displayed. If no property value is set then the property key is used for
       * the text.
       */
      oKeys: object
    ): void;
    /**
     * Sets a new value for property {@link #getSequence sequence}.
     *
     * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered
     * by ascending order of sequence.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     */
    setSequence(
      /**
       * New value for property `sequence`
       */
      iSequence?: int
    ): this;
    /**
     * @SINCE 1.20.4
     *
     * Sets a new value for property {@link #getShowRemoveFacetIcon showRemoveFacetIcon}.
     *
     * Specifies whether remove icon for facet is visible or hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowRemoveFacetIcon(
      /**
       * New value for property `showRemoveFacetIcon`
       */
      bShowRemoveFacetIcon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter
     * type is set to `Simple`. It is also displayed as a list item in the facet page of the dialog.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWordWrap wordWrap}.
     *
     * If set to `true`, the item text wraps when it is too long.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWordWrap(
      /**
       * New value for property `wordWrap`
       */
      bWordWrap?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listClose listClose} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Triggered after the list of items is closed.
     */
    attachListClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listOpen listOpen} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Fired before the filter list is opened.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `listOpen` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `listOpen` event handler function.
     */
    attachListOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.76
     *
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.FacetFilterList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FacetFilterList` itself.
     *
     * Triggered after the Search button is pressed or by pressing Enter in search input field.
     *
     * The default filtering behavior of the control can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. Preventing the default behavior is useful in cases when
     * items aggregation could be taking long time fetching from the OData model. As a result, no list items
     * are loaded initially. If the default filtering behavior is prevented then filtering behavior has to be
     * defined at application level inside the `search` event handler function.
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FacetFilterList` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FacetFilterListSettings extends $ListSettings {
    /**
     * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter
     * type is set to `Simple`. It is also displayed as a list item in the facet page of the dialog.
     */
    title?: string | PropertyBindingInfo;

    /**
     * If set to `true`, the item text wraps when it is too long.
     */
    wordWrap?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.20.0) - replaced by `setMode` method. `FacetFilterList` overrides the `setMode`
     * method to restrict the possible modes to `MultiSelect` and `SingleSelectMaster`. All other modes are
     * ignored and will not be set.
     *
     * Specifies whether multiple or single selection is used.
     */
    multiSelect?: boolean | PropertyBindingInfo;

    /**
     * Indicates that the list is displayed as a button when the FacetFilter type is set to `Simple`.
     *
     * **Note:** Set the `showPersonalization` property of the `FacetFilter` to `true` when this property is
     * set to `false`. This is needed, as the non-active lists are not displayed, and without a personalization
     * button they can't be selected by the user.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * If set to `true`, enables case-insensitive search for OData.
     */
    enableCaseInsensitiveSearch?: boolean | PropertyBindingInfo;

    /**
     * Determines the number of objects that match this item in the target data set when all filter items are
     * selected.
     */
    allCount?: int | PropertyBindingInfo;

    /**
     * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered
     * by ascending order of sequence.
     */
    sequence?: int | PropertyBindingInfo;

    /**
     * Unique identifier for this filter list.
     */
    key?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.20.4
     *
     * Specifies whether remove icon for facet is visible or hidden.
     */
    showRemoveFacetIcon?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.22.1
     *
     * Retains the list sequence if it is inactive and made active again.
     */
    retainListSequence?: boolean | PropertyBindingInfo;

    /**
     * FacetFilterList data type. Only String data type will provide search function.
     */
    dataType?:
      | (FacetFilterListDataType | keyof typeof FacetFilterListDataType)
      | PropertyBindingInfo;

    /**
     * Fired before the filter list is opened.
     *
     * The default filtering behavior of the sap.m.FacetFilterList can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `listOpen` event handler function. If the default filtering behavior is prevented then
     * filtering behavior has to be defined at application level inside the `listOpen` event handler function.
     */
    listOpen?: Function;

    /**
     * Triggered after the list of items is closed.
     */
    listClose?: Function;

    /**
     * @SINCE 1.76
     *
     * Triggered after the Search button is pressed or by pressing Enter in search input field.
     *
     * The default filtering behavior of the control can be prevented by calling `sap.ui.base.Event.prototype.preventDefault`
     * function in the `search` event handler function. Preventing the default behavior is useful in cases when
     * items aggregation could be taking long time fetching from the OData model. As a result, no list items
     * are loaded initially. If the default filtering behavior is prevented then filtering behavior has to be
     * defined at application level inside the `search` event handler function.
     */
    search?: Function;
  }
}

declare module "sap/m/FeedContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { Size, ValueColor } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Displays a tile containing the text of the feed, a subheader, and a numeric value.
   */
  export default class FeedContent extends Control {
    /**
     * Constructor for a new sap.m.FeedContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedContentSettings
    );
    /**
     * Constructor for a new sap.m.FeedContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FeedContentSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.FeedContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedContent` itself.
     *
     * The event is triggered when the feed content is pressed.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedContent` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.FeedContent`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FeedContent with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContentText contentText}.
     *
     * The content text.
     */
    getContentText(): string;
    /**
     * Returns a metadata object for class sap.m.FeedContent.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.38.0) - The FeedContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * Default value is `Auto`.
     */
    getSize(): Size | keyof typeof Size;
    /**
     * Gets current value of property {@link #getSubheader subheader}.
     *
     * The subheader.
     */
    getSubheader(): string;
    /**
     * Gets current value of property {@link #getTruncateValueTo truncateValueTo}.
     *
     * The number of characters to display for the value property.
     *
     * Default value is `4`.
     */
    getTruncateValueTo(): int;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The actual value.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     */
    getValueColor(): ValueColor | keyof typeof ValueColor;
    /**
     * Sets a new value for property {@link #getContentText contentText}.
     *
     * The content text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentText(
      /**
       * New value for property `contentText`
       */
      sContentText?: string
    ): this;
    /**
     * @deprecated (since 1.38.0) - The FeedContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: Size | keyof typeof Size
    ): this;
    /**
     * Sets a new value for property {@link #getSubheader subheader}.
     *
     * The subheader.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSubheader(
      /**
       * New value for property `subheader`
       */
      sSubheader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTruncateValueTo truncateValueTo}.
     *
     * The number of characters to display for the value property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `4`.
     */
    setTruncateValueTo(
      /**
       * New value for property `truncateValueTo`
       */
      iTruncateValueTo?: int
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The actual value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueColor(
      /**
       * New value for property `valueColor`
       */
      sValueColor?: ValueColor | keyof typeof ValueColor
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.FeedContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedContent` itself.
     *
     * The event is triggered when the feed content is pressed.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedContent` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FeedContentSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.38.0) - The FeedContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     */
    size?: (Size | keyof typeof Size) | PropertyBindingInfo;

    /**
     * The content text.
     */
    contentText?: string | PropertyBindingInfo;

    /**
     * The subheader.
     */
    subheader?: string | PropertyBindingInfo;

    /**
     * The actual value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * The semantic color of the value.
     */
    valueColor?: (ValueColor | keyof typeof ValueColor) | PropertyBindingInfo;

    /**
     * The number of characters to display for the value property.
     */
    truncateValueTo?: int | PropertyBindingInfo;

    /**
     * The event is triggered when the feed content is pressed.
     */
    press?: Function;
  }
}

declare module "sap/m/FeedInput" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TooltipBase from "sap/ui/core/TooltipBase";

  import { URI } from "sap/ui/core/library";

  import AvatarShape from "sap/m/AvatarShape";

  import AvatarSize from "sap/m/AvatarSize";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22
   *
   * The Feed Input allows the user to enter text for a new feed entry and then post it.
   */
  export default class FeedInput extends Control {
    /**
     * Constructor for a new FeedInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedInputSettings
    );
    /**
     * Constructor for a new FeedInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedInputSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:post post} event of this `sap.m.FeedInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedInput` itself.
     *
     * The Post event is triggered when the user has entered a value and pressed the post button. After firing
     * this event, the value is reset.
     */
    attachPost(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:post post} event of this `sap.m.FeedInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPost(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FeedInput with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:post post} to attached listeners.
     */
    firePost(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The value of the feed input before reseting it.
         */
        value?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getAriaLabelForPicture ariaLabelForPicture}.
     *
     * Text for Picture which will be read by screenreader. If a new ariaLabelForPicture is set, any previously
     * set ariaLabelForPicture is deactivated. Deprecated as of version 1.88. This will not have any effect
     * in code now.
     */
    getAriaLabelForPicture(): string;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getButtonTooltip buttonTooltip}.
     *
     * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases
     * will be rendered as the title attribute of this element) or an instance of sap.ui.core.TooltipBase. If
     * a new tooltip is set, any previously set tooltip is deactivated. The default value is set language dependent.
     *
     * Default value is `"Submit"`.
     */
    getButtonTooltip(): TooltipBase;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Set this flag to "false" to disable both text input and post button.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
     *
     * Default value is `false`.
     */
    getGrowing(): boolean;
    /**
     * Gets current value of property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the control can grow. Value is set to 0 by default, which means
     * an unlimited numbers of rows. **Note:** Minimum value to set is equal to the `rows` property value, maximum
     * value is 15.
     *
     * Default value is `0`.
     */
    getGrowingMaxLines(): int;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from
     * the icon font.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * Some mobile devices support higher resolution images while others do not. Therefore, you should provide
     * image resources for all relevant densities. If the property is set to "true", one or more requests are
     * sent to the server to try and get the perfect density version of an image. If an image of a certain density
     * is not available, the image control falls back to the default image, which should be provided.
     *
     * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary
     * round-trips.
     *
     * Please be aware that this property is relevant only for images and not for icons.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * Default value is `Circle`.
     */
    getIconDisplayShape(): AvatarShape | keyof typeof AvatarShape;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * Default value is `empty string`.
     */
    getIconInitials(): string;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * Default value is `M`.
     */
    getIconSize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Gets current value of property {@link #getMaxLength maxLength}.
     *
     * The maximum length (the maximum number of characters) for the feed's input value. By default this is
     * not limited.
     *
     * Default value is `0`.
     */
    getMaxLength(): int;
    /**
     * Returns a metadata object for class sap.m.FeedInput.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * The placeholder text shown in the input area as long as the user has not entered any text value.
     *
     * Default value is `"Post something here"`.
     */
    getPlaceholder(): string;
    /**
     * Gets current value of property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the control. **Note:** Minimum value is 2, maximum value
     * is 15.
     *
     * Default value is `2`.
     */
    getRows(): int;
    /**
     * Gets current value of property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false`, the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true`, the characters exceeding the `maxLength` value are selected on paste and
     * the counter below the input field displays their number.
     *
     * Default value is `false`.
     */
    getShowExceededText(): boolean;
    /**
     * Gets current value of property {@link #getShowIcon showIcon}.
     *
     * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder
     * will be displayed. if set to "false" icons are hidden
     *
     * Default value is `true`.
     */
    getShowIcon(): boolean;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The text value of the feed input. As long as the user has not entered any text the post button is disabled
     */
    getValue(): string;
    /**
     * Sets a new value for property {@link #getAriaLabelForPicture ariaLabelForPicture}.
     *
     * Text for Picture which will be read by screenreader. If a new ariaLabelForPicture is set, any previously
     * set ariaLabelForPicture is deactivated. Deprecated as of version 1.88. This will not have any effect
     * in code now.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaLabelForPicture(
      /**
       * New value for property `ariaLabelForPicture`
       */
      sAriaLabelForPicture?: string
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getButtonTooltip buttonTooltip}.
     *
     * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases
     * will be rendered as the title attribute of this element) or an instance of sap.ui.core.TooltipBase. If
     * a new tooltip is set, any previously set tooltip is deactivated. The default value is set language dependent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Submit"`.
     */
    setButtonTooltip(
      /**
       * New value for property `buttonTooltip`
       */
      sButtonTooltip?: TooltipBase
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Set this flag to "false" to disable both text input and post button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      bGrowing?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the control can grow. Value is set to 0 by default, which means
     * an unlimited numbers of rows. **Note:** Minimum value to set is equal to the `rows` property value, maximum
     * value is 15.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setGrowingMaxLines(
      /**
       * New value for property `growingMaxLines`
       */
      iGrowingMaxLines?: int
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from
     * the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * Some mobile devices support higher resolution images while others do not. Therefore, you should provide
     * image resources for all relevant densities. If the property is set to "true", one or more requests are
     * sent to the server to try and get the perfect density version of an image. If an image of a certain density
     * is not available, the image control falls back to the default image, which should be provided.
     *
     * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary
     * round-trips.
     *
     * Please be aware that this property is relevant only for images and not for icons.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     */
    setIconDisplayShape(
      /**
       * New value for property `iconDisplayShape`
       */
      sIconDisplayShape?: AvatarShape | keyof typeof AvatarShape
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIconInitials(
      /**
       * New value for property `iconInitials`
       */
      sIconInitials?: string
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `M`.
     */
    setIconSize(
      /**
       * New value for property `iconSize`
       */
      sIconSize?: AvatarSize | keyof typeof AvatarSize
    ): this;
    /**
     * Sets a new value for property {@link #getMaxLength maxLength}.
     *
     * The maximum length (the maximum number of characters) for the feed's input value. By default this is
     * not limited.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxLength(
      /**
       * New value for property `maxLength`
       */
      iMaxLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * The placeholder text shown in the input area as long as the user has not entered any text value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Post something here"`.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the control. **Note:** Minimum value is 2, maximum value
     * is 15.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     */
    setRows(
      /**
       * New value for property `rows`
       */
      iRows?: int
    ): this;
    /**
     * Sets a new value for property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false`, the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true`, the characters exceeding the `maxLength` value are selected on paste and
     * the counter below the input field displays their number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowExceededText(
      /**
       * New value for property `showExceededText`
       */
      bShowExceededText?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcon showIcon}.
     *
     * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder
     * will be displayed. if set to "false" icons are hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowIcon(
      /**
       * New value for property `showIcon`
       */
      bShowIcon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The text value of the feed input. As long as the user has not entered any text the post button is disabled
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:post post} event of this `sap.m.FeedInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedInput` itself.
     *
     * The Post event is triggered when the user has entered a value and pressed the post button. After firing
     * this event, the value is reset.
     */
    attachPost(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedInput` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FeedInputSettings extends $ControlSettings {
    /**
     * Set this flag to "false" to disable both text input and post button.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the number of visible text lines for the control. **Note:** Minimum value is 2, maximum value
     * is 15.
     */
    rows?: int | PropertyBindingInfo;

    /**
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false`, the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true`, the characters exceeding the `maxLength` value are selected on paste and
     * the counter below the input field displays their number.
     */
    showExceededText?: boolean | PropertyBindingInfo;

    /**
     * The maximum length (the maximum number of characters) for the feed's input value. By default this is
     * not limited.
     */
    maxLength?: int | PropertyBindingInfo;

    /**
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * Defines the maximum number of lines that the control can grow. Value is set to 0 by default, which means
     * an unlimited numbers of rows. **Note:** Minimum value to set is equal to the `rows` property value, maximum
     * value is 15.
     */
    growingMaxLines?: int | PropertyBindingInfo;

    /**
     * The placeholder text shown in the input area as long as the user has not entered any text value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * The text value of the feed input. As long as the user has not entered any text the post button is disabled
     */
    value?: string | PropertyBindingInfo;

    /**
     * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from
     * the icon font.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the shape of the icon.
     */
    iconDisplayShape?:
      | (AvatarShape | keyof typeof AvatarShape)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the initials of the icon.
     */
    iconInitials?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the size of the icon.
     */
    iconSize?: (AvatarSize | keyof typeof AvatarSize) | PropertyBindingInfo;

    /**
     * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder
     * will be displayed. if set to "false" icons are hidden
     */
    showIcon?: boolean | PropertyBindingInfo;

    /**
     * Some mobile devices support higher resolution images while others do not. Therefore, you should provide
     * image resources for all relevant densities. If the property is set to "true", one or more requests are
     * sent to the server to try and get the perfect density version of an image. If an image of a certain density
     * is not available, the image control falls back to the default image, which should be provided.
     *
     * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary
     * round-trips.
     *
     * Please be aware that this property is relevant only for images and not for icons.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases
     * will be rendered as the title attribute of this element) or an instance of sap.ui.core.TooltipBase. If
     * a new tooltip is set, any previously set tooltip is deactivated. The default value is set language dependent.
     */
    buttonTooltip?: TooltipBase | PropertyBindingInfo;

    /**
     * Text for Picture which will be read by screenreader. If a new ariaLabelForPicture is set, any previously
     * set ariaLabelForPicture is deactivated. Deprecated as of version 1.88. This will not have any effect
     * in code now.
     */
    ariaLabelForPicture?: string | PropertyBindingInfo;

    /**
     * The Post event is triggered when the user has entered a value and pressed the post button. After firing
     * this event, the value is reset.
     */
    post?: Function;
  }
}

declare module "sap/m/FeedListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import FeedListItemAction from "sap/m/FeedListItemAction";

  import { URI } from "sap/ui/core/library";

  import { LinkConversion, ListType } from "sap/m/library";

  import AvatarShape from "sap/m/AvatarShape";

  import AvatarSize from "sap/m/AvatarSize";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The control provides a set of properties for text, sender information, time stamp. Beginning with release
   * 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters. Beginning
   * with release 1.44, sap.m.FormattedText was introduced which allows html formatted text to be displayed
   */
  export default class FeedListItem extends ListItemBase {
    /**
     * Constructor for a new FeedListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedListItemSettings
    );
    /**
     * Constructor for a new FeedListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FeedListItemSettings
    );

    /**
     * @SINCE 1.52.0
     *
     * Adds some action to the aggregation {@link #getActions actions}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: FeedListItemAction
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:iconPress iconPress} event of this `sap.m.FeedListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItem` itself.
     *
     * Event is fired when the icon is pressed.
     */
    attachIconPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:senderPress senderPress} event of this `sap.m.FeedListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItem` itself.
     *
     * Event is fired when name of the sender is pressed.
     */
    attachSenderPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.52.0
     *
     * Destroys all the actions in the aggregation {@link #getActions actions}.
     */
    destroyActions(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:iconPress iconPress} event of this `sap.m.FeedListItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachIconPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:senderPress senderPress} event of this `sap.m.FeedListItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSenderPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FeedListItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:iconPress iconPress} to attached listeners.
     */
    fireIconPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the feed item's icon to be used for positioning.
         */
        domRef?: string;
        /**
         * Function to retrieve the DOM reference for the `iconPress` event. The function returns the DOM element
         * of the icon or null
         */
        getDomRef?: Function;
      }
    ): this;
    /**
     * Fires event {@link #event:senderPress senderPress} to attached listeners.
     */
    fireSenderPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the feed item's sender string to be used for positioning.
         */
        domRef?: string;
        /**
         * Function to retrieve the DOM reference for the `senderPress` event. The function returns the DOM element
         * of the sender link or null
         */
        getDomRef?: Function;
      }
    ): this;
    /**
     * @SINCE 1.52.0
     *
     * Gets content of aggregation {@link #getActions actions}.
     *
     * Contains {@link sap.m.FeedListItemAction elements} that are displayed in the action sheet.
     */
    getActions(): FeedListItemAction[];
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * Icon displayed when the list item is active.
     */
    getActiveIcon(): URI;
    /**
     * @SINCE 1.46.1
     *
     * Gets current value of property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
     *
     * Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags
     * property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for
     * the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
     *
     * Default value is `"_blank"`.
     */
    getConvertedLinksDefaultTarget(): string;
    /**
     * @SINCE 1.46.1
     *
     * Gets current value of property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     *
     * Default value is `None`.
     */
    getConvertLinksToAnchorTags(): LinkConversion | keyof typeof LinkConversion;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from
     * the icon font. If no icon is provided, a default person-placeholder icon is displayed. Icon is only shown
     * if showIcon = true.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconActive iconActive}.
     *
     * If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
     *
     * Default value is `true`.
     */
    getIconActive(): boolean;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * Default value is `Circle`.
     */
    getIconDisplayShape(): AvatarShape | keyof typeof AvatarShape;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * Default value is `empty string`.
     */
    getIconInitials(): string;
    /**
     * @SINCE 1.88
     *
     * Gets current value of property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * Default value is `S`.
     */
    getIconSize(): AvatarSize | keyof typeof AvatarSize;
    /**
     * Gets current value of property {@link #getInfo info}.
     *
     * The Info text.
     */
    getInfo(): string;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getLessLabel lessLabel}.
     *
     * Customizable text for the "LESS" link at the end of the feed list item.
     *  Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number
     * of characters.
     */
    getLessLabel(): string;
    /**
     * Gets current value of property {@link #getMaxCharacters maxCharacters}.
     *
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches
     * these limits. In this case, only the specified number of characters is displayed. By clicking on the
     * text link More, the entire text can be displayed. The text link Less collapses the text. The application
     * is able to set the value to its needs.
     */
    getMaxCharacters(): int;
    /**
     * Returns a metadata object for class sap.m.FeedListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getMoreLabel moreLabel}.
     *
     * Customizable text for the "MORE" link at the end of the feed list item.
     *  When the maximum number of characters defined by the `maxCharacters` property is exceeded and the text
     * of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show
     * the rest of the text.
     */
    getMoreLabel(): string;
    /**
     * Gets current value of property {@link #getSender sender}.
     *
     * Sender of the chunk
     */
    getSender(): string;
    /**
     * Gets current value of property {@link #getSenderActive senderActive}.
     *
     * If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
     *
     * Default value is `true`.
     */
    getSenderActive(): boolean;
    /**
     * Gets current value of property {@link #getShowIcon showIcon}.
     *
     * If set to "true" (default), icons will be displayed, if set to false icons are hidden
     *
     * Default value is `true`.
     */
    getShowIcon(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTimestamp timestamp}.
     *
     * This chunks timestamp
     */
    getTimestamp(): string;
    /**
     * @SINCE 1.52.0
     *
     * Checks for the provided `sap.m.FeedListItemAction` in the aggregation {@link #getActions actions}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: FeedListItemAction
    ): int;
    /**
     * @SINCE 1.52.0
     *
     * Inserts a action into the aggregation {@link #getActions actions}.
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: FeedListItemAction,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.52.0
     *
     * Removes a action from the aggregation {@link #getActions actions}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | FeedListItemAction
    ): FeedListItemAction;
    /**
     * @SINCE 1.52.0
     *
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActions(): FeedListItemAction[];
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * Icon displayed when the list item is active.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * @SINCE 1.46.1
     *
     * Sets a new value for property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
     *
     * Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags
     * property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for
     * the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"_blank"`.
     */
    setConvertedLinksDefaultTarget(
      /**
       * New value for property `convertedLinksDefaultTarget`
       */
      sConvertedLinksDefaultTarget?: string
    ): this;
    /**
     * @SINCE 1.46.1
     *
     * Sets a new value for property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setConvertLinksToAnchorTags(
      /**
       * New value for property `convertLinksToAnchorTags`
       */
      sConvertLinksToAnchorTags?: LinkConversion | keyof typeof LinkConversion
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from
     * the icon font. If no icon is provided, a default person-placeholder icon is displayed. Icon is only shown
     * if showIcon = true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconActive iconActive}.
     *
     * If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconActive(
      /**
       * New value for property `iconActive`
       */
      bIconActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconDisplayShape iconDisplayShape}.
     *
     * Defines the shape of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Circle`.
     */
    setIconDisplayShape(
      /**
       * New value for property `iconDisplayShape`
       */
      sIconDisplayShape?: AvatarShape | keyof typeof AvatarShape
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconInitials iconInitials}.
     *
     * Defines the initials of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIconInitials(
      /**
       * New value for property `iconInitials`
       */
      sIconInitials?: string
    ): this;
    /**
     * @SINCE 1.88
     *
     * Sets a new value for property {@link #getIconSize iconSize}.
     *
     * Defines the size of the icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `S`.
     */
    setIconSize(
      /**
       * New value for property `iconSize`
       */
      sIconSize?: AvatarSize | keyof typeof AvatarSize
    ): this;
    /**
     * Sets a new value for property {@link #getInfo info}.
     *
     * The Info text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInfo(
      /**
       * New value for property `info`
       */
      sInfo?: string
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getLessLabel lessLabel}.
     *
     * Customizable text for the "LESS" link at the end of the feed list item.
     *  Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number
     * of characters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLessLabel(
      /**
       * New value for property `lessLabel`
       */
      sLessLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxCharacters maxCharacters}.
     *
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches
     * these limits. In this case, only the specified number of characters is displayed. By clicking on the
     * text link More, the entire text can be displayed. The text link Less collapses the text. The application
     * is able to set the value to its needs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxCharacters(
      /**
       * New value for property `maxCharacters`
       */
      iMaxCharacters?: int
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getMoreLabel moreLabel}.
     *
     * Customizable text for the "MORE" link at the end of the feed list item.
     *  When the maximum number of characters defined by the `maxCharacters` property is exceeded and the text
     * of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show
     * the rest of the text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMoreLabel(
      /**
       * New value for property `moreLabel`
       */
      sMoreLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSender sender}.
     *
     * Sender of the chunk
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSender(
      /**
       * New value for property `sender`
       */
      sSender?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSenderActive senderActive}.
     *
     * If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setSenderActive(
      /**
       * New value for property `senderActive`
       */
      bSenderActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcon showIcon}.
     *
     * If set to "true" (default), icons will be displayed, if set to false icons are hidden
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowIcon(
      /**
       * New value for property `showIcon`
       */
      bShowIcon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTimestamp timestamp}.
     *
     * This chunks timestamp
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTimestamp(
      /**
       * New value for property `timestamp`
       */
      sTimestamp?: string
    ): this;
    /**
     * Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type = "sap.m.ListType.Active"
     * for a FeedListItem
     */
    setType(
      /**
       * new value for property type
       */
      type: ListType | keyof typeof ListType
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:iconPress iconPress} event of this `sap.m.FeedListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItem` itself.
     *
     * Event is fired when the icon is pressed.
     */
    attachIconPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:senderPress senderPress} event of this `sap.m.FeedListItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItem` itself.
     *
     * Event is fired when name of the sender is pressed.
     */
    attachSenderPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FeedListItemSettings extends $ListItemBaseSettings {
    /**
     * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from
     * the icon font. If no icon is provided, a default person-placeholder icon is displayed. Icon is only shown
     * if showIcon = true.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the shape of the icon.
     */
    iconDisplayShape?:
      | (AvatarShape | keyof typeof AvatarShape)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the initials of the icon.
     */
    iconInitials?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.88
     *
     * Defines the size of the icon.
     */
    iconSize?: (AvatarSize | keyof typeof AvatarSize) | PropertyBindingInfo;

    /**
     * Icon displayed when the list item is active.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * Sender of the chunk
     */
    sender?: string | PropertyBindingInfo;

    /**
     * The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
     */
    text?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Customizable text for the "MORE" link at the end of the feed list item.
     *  When the maximum number of characters defined by the `maxCharacters` property is exceeded and the text
     * of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show
     * the rest of the text.
     */
    moreLabel?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Customizable text for the "LESS" link at the end of the feed list item.
     *  Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number
     * of characters.
     */
    lessLabel?: string | PropertyBindingInfo;

    /**
     * The Info text.
     */
    info?: string | PropertyBindingInfo;

    /**
     * This chunks timestamp
     */
    timestamp?: string | PropertyBindingInfo;

    /**
     * If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
     */
    senderActive?: boolean | PropertyBindingInfo;

    /**
     * If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
     */
    iconActive?: boolean | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     *
     * Deprecated as of version 1.88. Image is replaced by avatar.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * If set to "true" (default), icons will be displayed, if set to false icons are hidden
     */
    showIcon?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.46.1
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     */
    convertLinksToAnchorTags?:
      | (LinkConversion | keyof typeof LinkConversion)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.46.1
     *
     * Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags
     * property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for
     * the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
     */
    convertedLinksDefaultTarget?: string | PropertyBindingInfo;

    /**
     * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
     * on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches
     * these limits. In this case, only the specified number of characters is displayed. By clicking on the
     * text link More, the entire text can be displayed. The text link Less collapses the text. The application
     * is able to set the value to its needs.
     */
    maxCharacters?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.52.0
     *
     * Contains {@link sap.m.FeedListItemAction elements} that are displayed in the action sheet.
     */
    actions?:
      | FeedListItemAction[]
      | FeedListItemAction
      | AggregationBindingInfo;

    /**
     * Event is fired when name of the sender is pressed.
     */
    senderPress?: Function;

    /**
     * Event is fired when the icon is pressed.
     */
    iconPress?: Function;
  }
}

declare module "sap/m/FeedListItemAction" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.52.0
   *
   * An action item of FeedListItem
   */
  export default class FeedListItemAction extends UI5Element {
    /**
     * Constructor for a new FeedListItemAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new element
       */
      mSettings?: $FeedListItemActionSettings
    );
    /**
     * Constructor for a new FeedListItemAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new element
       */
      mSettings?: $FeedListItemActionSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.FeedListItemAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItemAction` itself.
     *
     * The `press` event is fired when the user triggers the corresponding action.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItemAction` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.FeedListItemAction`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.FeedListItemAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FeedListItemAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Enables or disables a button on the UI. All buttons are enabled by default. Disabled buttons are colored
     * differently as per the theme of the UI.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon of the action.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * The key of the item.
     *
     * Default value is `empty string`.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.FeedListItemAction.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text of the item. It is used as a tooltip and for accessibility reasons.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Hides or shows a button on the UI.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Enables or disables a button on the UI. All buttons are enabled by default. Disabled buttons are colored
     * differently as per the theme of the UI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon of the action.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * The key of the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text of the item. It is used as a tooltip and for accessibility reasons.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Hides or shows a button on the UI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.FeedListItemAction`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.FeedListItemAction` itself.
     *
     * The `press` event is fired when the user triggers the corresponding action.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.FeedListItemAction` itself
       */
      oListener?: object
    ): this;
  }

  export interface $FeedListItemActionSettings extends $ElementSettings {
    /**
     * The icon of the action.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * The text of the item. It is used as a tooltip and for accessibility reasons.
     */
    text?: string | PropertyBindingInfo;

    /**
     * The key of the item.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Hides or shows a button on the UI.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Enables or disables a button on the UI. All buttons are enabled by default. Disabled buttons are colored
     * differently as per the theme of the UI.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * The `press` event is fired when the user triggers the corresponding action.
     */
    press?: Function;
  }
}

declare module "sap/m/FlexBox" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    FlexAlignContent,
    FlexAlignItems,
    BackgroundDesign,
    FlexDirection,
    FlexJustifyContent,
    FlexRendertype,
    FlexWrap,
  } from "sap/m/library";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * The `sap.m.FlexBox` control builds the container for a flexible box layout.
   *
   *  **Note:** Be sure to check the `renderType` setting to avoid issues due to browser inconsistencies.
   */
  export default class FlexBox extends Control {
    /**
     * Constructor for a new `sap.m.FlexBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	https://www.w3.org/TR/css-flexbox-1/
     * 	https://www.w3schools.com/css/css3_flexbox.asp
     * 	{@link topic:674890e6d8534eaba2eaf63242e077eb Flex Box}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $FlexBoxSettings
    );
    /**
     * Constructor for a new `sap.m.FlexBox`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	https://www.w3.org/TR/css-flexbox-1/
     * 	https://www.w3schools.com/css/css3_flexbox.asp
     * 	{@link topic:674890e6d8534eaba2eaf63242e077eb Flex Box}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $FlexBoxSettings
    );

    /**
     * Adds item in the FlexBox.
     */
    addItem(
      /**
       * Added item.
       */
      oItem: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Creates a new subclass of class sap.m.FlexBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlexBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets the accessibility information.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getAlignContent alignContent}.
     *
     * Determines the layout behavior of container lines when there's extra space along the cross-axis.
     *
     * Default value is `Stretch`.
     */
    getAlignContent(): FlexAlignContent | keyof typeof FlexAlignContent;
    /**
     * Gets current value of property {@link #getAlignItems alignItems}.
     *
     * Determines the layout behavior of items along the cross-axis.
     *
     * Default value is `Stretch`.
     */
    getAlignItems(): FlexAlignItems | keyof typeof FlexAlignItems;
    /**
     * @SINCE 1.38.5
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Defines the background style of the `sap.m.FlexBox`.
     *
     * Default value is `Transparent`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets current value of property {@link #getDirection direction}.
     *
     * Determines the direction of the layout of child elements.
     *
     * Default value is `Row`.
     */
    getDirection(): FlexDirection | keyof typeof FlexDirection;
    /**
     * Gets current value of property {@link #getDisplayInline displayInline}.
     *
     * Determines whether the `sap.m.FlexBox` is in block or inline mode.
     *
     * Default value is `false`.
     */
    getDisplayInline(): boolean;
    /**
     * Gets current value of property {@link #getFitContainer fitContainer}.
     *
     * Determines whether the `sap.m.FlexBox` will be sized to completely fill its container. If the `sap.m.FlexBox`
     * is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the
     * FlexBox to fit the entire viewport.
     *
     * Default value is `false`.
     */
    getFitContainer(): boolean;
    /**
     * @SINCE 1.9.1
     *
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the `sap.m.FlexBox`. Note that when a percentage is given, for the height to work as expected,
     * the height of the surrounding container must be defined.
     *
     * Default value is `empty string`.
     */
    getHeight(): CSSSize;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Flex items within the flexible box layout
     */
    getItems(): Control[];
    /**
     * Gets current value of property {@link #getJustifyContent justifyContent}.
     *
     * Determines the layout behavior along the main axis.
     *
     * Default value is `Start`.
     */
    getJustifyContent(): FlexJustifyContent | keyof typeof FlexJustifyContent;
    /**
     * Returns a metadata object for class sap.m.FlexBox.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRenderType renderType}.
     *
     * Determines whether the layout is rendered as a series of divs or as an unordered list (ul).
     *
     *  We recommend to use `Bare` in most cases to avoid layout issues due to browser inconsistencies.
     *
     * Default value is `Div`.
     */
    getRenderType(): FlexRendertype | keyof typeof FlexRendertype;
    /**
     * @SINCE 1.9.1
     *
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the `sap.m.FlexBox`. Note that when a percentage is given, for the width to work as expected,
     * the width of the surrounding container must be defined.
     *
     * Default value is `empty string`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getWrap wrap}.
     *
     * Determines the wrapping behavior of the flex container. This property has no effect in older browsers,
     * e.g. Android Native 4.3 and below.
     *
     * Default value is `NoWrap`.
     */
    getWrap(): FlexWrap | keyof typeof FlexWrap;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Control
    ): int;
    /**
     * Inserts single item.
     */
    insertItem(
      /**
       * Inserted item.
       */
      oItem: object,
      /**
       * Index of the inserted item.
       */
      iIndex: int
    ): this;
    /**
     * Removes all items.
     */
    removeAllItems(): object;
    /**
     * Removes single item.
     */
    removeItem(
      /**
       * Item to be removed.
       */
      vItem: any
    ): object;
    /**
     * @SINCE 1.36.0
     *
     * Sets a new value for property {@link #getAlignContent alignContent}.
     *
     * Determines the layout behavior of container lines when there's extra space along the cross-axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Stretch`.
     */
    setAlignContent(
      /**
       * New value for property `alignContent`
       */
      sAlignContent?: FlexAlignContent | keyof typeof FlexAlignContent
    ): this;
    /**
     * Sets a new value for property {@link #getAlignItems alignItems}.
     *
     * Determines the layout behavior of items along the cross-axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Stretch`.
     */
    setAlignItems(
      /**
       * New value for property `alignItems`
       */
      sAlignItems?: FlexAlignItems | keyof typeof FlexAlignItems
    ): this;
    /**
     * @SINCE 1.38.5
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Defines the background style of the `sap.m.FlexBox`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Transparent`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Sets a new value for property {@link #getDirection direction}.
     *
     * Determines the direction of the layout of child elements.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Row`.
     */
    setDirection(
      /**
       * New value for property `direction`
       */
      sDirection?: FlexDirection | keyof typeof FlexDirection
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayInline displayInline}.
     *
     * Determines whether the `sap.m.FlexBox` is in block or inline mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisplayInline(
      /**
       * New value for property `displayInline`
       */
      bDisplayInline?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFitContainer fitContainer}.
     *
     * Determines whether the `sap.m.FlexBox` will be sized to completely fill its container. If the `sap.m.FlexBox`
     * is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the
     * FlexBox to fit the entire viewport.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFitContainer(
      /**
       * New value for property `fitContainer`
       */
      bFitContainer?: boolean
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the `sap.m.FlexBox`. Note that when a percentage is given, for the height to work as expected,
     * the height of the surrounding container must be defined.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getJustifyContent justifyContent}.
     *
     * Determines the layout behavior along the main axis.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Start`.
     */
    setJustifyContent(
      /**
       * New value for property `justifyContent`
       */
      sJustifyContent?: FlexJustifyContent | keyof typeof FlexJustifyContent
    ): this;
    /**
     * Sets the render type of the FlexBox.
     */
    setRenderType(
      /**
       * Render type in string format.
       */
      sValue: string
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the `sap.m.FlexBox`. Note that when a percentage is given, for the width to work as expected,
     * the width of the surrounding container must be defined.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Sets a new value for property {@link #getWrap wrap}.
     *
     * Determines the wrapping behavior of the flex container. This property has no effect in older browsers,
     * e.g. Android Native 4.3 and below.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `NoWrap`.
     */
    setWrap(
      /**
       * New value for property `wrap`
       */
      sWrap?: FlexWrap | keyof typeof FlexWrap
    ): this;
  }

  export interface $FlexBoxSettings extends $ControlSettings {
    /**
     * @SINCE 1.9.1
     *
     * The height of the `sap.m.FlexBox`. Note that when a percentage is given, for the height to work as expected,
     * the height of the surrounding container must be defined.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.9.1
     *
     * The width of the `sap.m.FlexBox`. Note that when a percentage is given, for the width to work as expected,
     * the width of the surrounding container must be defined.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the `sap.m.FlexBox` is in block or inline mode.
     */
    displayInline?: boolean | PropertyBindingInfo;

    /**
     * Determines the direction of the layout of child elements.
     */
    direction?:
      | (FlexDirection | keyof typeof FlexDirection)
      | PropertyBindingInfo;

    /**
     * Determines whether the `sap.m.FlexBox` will be sized to completely fill its container. If the `sap.m.FlexBox`
     * is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the
     * FlexBox to fit the entire viewport.
     */
    fitContainer?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the layout is rendered as a series of divs or as an unordered list (ul).
     *
     *  We recommend to use `Bare` in most cases to avoid layout issues due to browser inconsistencies.
     */
    renderType?:
      | (FlexRendertype | keyof typeof FlexRendertype)
      | PropertyBindingInfo;

    /**
     * Determines the layout behavior along the main axis.
     */
    justifyContent?:
      | (FlexJustifyContent | keyof typeof FlexJustifyContent)
      | PropertyBindingInfo;

    /**
     * Determines the layout behavior of items along the cross-axis.
     */
    alignItems?:
      | (FlexAlignItems | keyof typeof FlexAlignItems)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * Determines the wrapping behavior of the flex container. This property has no effect in older browsers,
     * e.g. Android Native 4.3 and below.
     */
    wrap?: (FlexWrap | keyof typeof FlexWrap) | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * Determines the layout behavior of container lines when there's extra space along the cross-axis.
     */
    alignContent?:
      | (FlexAlignContent | keyof typeof FlexAlignContent)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.38.5
     *
     * Defines the background style of the `sap.m.FlexBox`.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * Flex items within the flexible box layout
     */
    items?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/FlexItemData" {
  import {
    default as LayoutData,
    $LayoutDataSettings,
  } from "sap/ui/core/LayoutData";

  import { FlexAlignSelf, BackgroundDesign } from "sap/m/library";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Holds layout data for a FlexBox / HBox / VBox.
   */
  export default class FlexItemData extends LayoutData {
    /**
     * Constructor for a new `sap.m.FlexItemData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new element.
       */
      mSettings?: $FlexItemDataSettings
    );
    /**
     * Constructor for a new `sap.m.FlexItemData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new element.
       */
      mSettings?: $FlexItemDataSettings
    );

    /**
     * Creates a new subclass of class sap.m.FlexItemData with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlexItemData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAlignSelf alignSelf}.
     *
     * Determines cross-axis alignment of individual element.
     *
     * Default value is `Auto`.
     */
    getAlignSelf(): FlexAlignSelf | keyof typeof FlexAlignSelf;
    /**
     * @SINCE 1.38.5
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Defines the background style of the flex item.
     *
     * Default value is `Transparent`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * @SINCE 1.32.0
     *
     * Gets current value of property {@link #getBaseSize baseSize}.
     *
     * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will
     * be the computed size of the item.
     *
     * Default value is `"auto"`.
     */
    getBaseSize(): CSSSize;
    /**
     * Returns the correct FlexBox item DOM reference.
     */
    getDomRef(
      /**
       * ID suffix to get the DOMRef for
       */
      sSuffix?: string
    ): Element;
    /**
     * Gets current value of property {@link #getGrowFactor growFactor}.
     *
     * Determines the flexibility of the flex item when allocatable space is remaining.
     *
     * Default value is `0`.
     */
    getGrowFactor(): float;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getMaxHeight maxHeight}.
     *
     * The maximum height of the flex item.
     *
     * Default value is `empty string`.
     */
    getMaxHeight(): CSSSize;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * The maximum width of the flex item.
     *
     * Default value is `empty string`.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.FlexItemData.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getMinHeight minHeight}.
     *
     * The minimum height of the flex item.
     *
     * Default value is `"auto"`.
     */
    getMinHeight(): CSSSize;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getMinWidth minWidth}.
     *
     * The minimum width of the flex item.
     *
     * Default value is `"auto"`.
     */
    getMinWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getOrder order}.
     *
     * Determines the display order of flex items independent of their source code order.
     *
     * Default value is `0`.
     */
    getOrder(): int;
    /**
     * @SINCE 1.24.0
     *
     * Gets current value of property {@link #getShrinkFactor shrinkFactor}.
     *
     * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items
     * in the flex container when negative free space is distributed.
     *
     * Default value is `1`.
     */
    getShrinkFactor(): float;
    /**
     * Gets current value of property {@link #getStyleClass styleClass}.
     *
     * The style class will be applied to the flex item and can be used for CSS selectors.
     *
     * Default value is `empty string`.
     */
    getStyleClass(): string;
    /**
     * Sets the `alignSelf` property.
     */
    setAlignSelf(
      /**
       * Align option.
       */
      sValue: string
    ): this;
    /**
     * Sets background design for flex items.
     */
    setBackgroundDesign(
      /**
       * Background design in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets the base size for flex items.
     */
    setBaseSize(
      /**
       * Base size in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets the `growFactor` property.
     */
    setGrowFactor(
      /**
       * Grow factor in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets maximum height.
     */
    setMaxHeight(
      /**
       * Maximum height in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets maximum width.
     */
    setMaxWidth(
      /**
       * Maximum width in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets minimum height.
     */
    setMinHeight(
      /**
       * Minimum height in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets minimum width.
     */
    setMinWidth(
      /**
       * Minimum width in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets the order.
     */
    setOrder(
      /**
       * Order in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets the `shrinkFactor` property.
     * See:
     * 	https://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink
     */
    setShrinkFactor(
      /**
       * Shrink factor in string format.
       */
      sValue: string
    ): this;
    /**
     * Sets style class.
     */
    setStyleClass(
      /**
       * Style class.
       */
      sValue: string
    ): this;
  }

  export interface $FlexItemDataSettings extends $LayoutDataSettings {
    /**
     * Determines cross-axis alignment of individual element.
     */
    alignSelf?:
      | (FlexAlignSelf | keyof typeof FlexAlignSelf)
      | PropertyBindingInfo;

    /**
     * Determines the display order of flex items independent of their source code order.
     */
    order?: int | PropertyBindingInfo;

    /**
     * Determines the flexibility of the flex item when allocatable space is remaining.
     */
    growFactor?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.24.0
     *
     * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items
     * in the flex container when negative free space is distributed.
     */
    shrinkFactor?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.32.0
     *
     * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will
     * be the computed size of the item.
     */
    baseSize?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * The minimum height of the flex item.
     */
    minHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * The maximum height of the flex item.
     */
    maxHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * The minimum width of the flex item.
     */
    minWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * The maximum width of the flex item.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;

    /**
     * The style class will be applied to the flex item and can be used for CSS selectors.
     */
    styleClass?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.38.5
     *
     * Defines the background style of the flex item.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/FormattedText" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Link from "sap/m/Link";

  import { LinkConversion } from "sap/m/library";

  import { CSSSize, TextAlign, TextDirection } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38.0
   *
   * The FormattedText control allows the usage of a limited set of tags for inline display of formatted text
   * in HTML format.
   */
  export default class FormattedText extends Control {
    /**
     * Constructor for a new FormattedText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FormattedTextSettings
    );
    /**
     * Constructor for a new FormattedText.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FormattedTextSettings
    );

    /**
     * Adds some control to the aggregation {@link #getControls controls}.
     */
    addControl(
      /**
       * The control to add; if empty, nothing is inserted
       */
      oControl: Link
    ): this;
    /**
     * Destroys all the controls in the aggregation {@link #getControls controls}.
     */
    destroyControls(): this;
    /**
     * Creates a new subclass of class sap.m.FormattedText with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FormattedText>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getControls controls}.
     *
     * List of `sap.m.Link` controls that will be used to replace the placeholders in the text. Placeholders
     * are replaced according to their indexes. The placeholder with index %%0 will be replaced by the first
     * link in the aggregation, etc.
     */
    getControls(): Link[];
    /**
     * @SINCE 1.45.5
     *
     * Gets current value of property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
     *
     * Determines the `target` attribute of the generated HTML anchor tags.
     *
     * **Note:** Applicable only if `ConvertLinksToAnchorTags` property is used with a value other than `sap.m.LinkConversion.None`.
     * Options are the standard values for the `target` attribute of the HTML anchor tag: `_self`, `_top`, `_blank`,
     * `_parent`, `_search`.
     *
     * Default value is `"_blank"`.
     */
    getConvertedLinksDefaultTarget(): string;
    /**
     * @SINCE 1.45.5
     *
     * Gets current value of property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     *
     * Default value is `None`.
     */
    getConvertLinksToAnchorTags(): LinkConversion | keyof typeof LinkConversion;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Optional height of the control in CSS units.
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHtmlText htmlText}.
     *
     * Text in HTML format. The following tags are supported:
     * 	 - `a`
     * 	 - `abbr`
     * 	 - `bdi`
     * 	 - `blockquote`
     * 	 - `br`
     * 	 - `cite`
     * 	 - `code`
     * 	 - `em`
     * 	 - `h1`
     * 	 - `h2`
     * 	 - `h3`
     * 	 - `h4`
     * 	 - `h5`
     * 	 - `h6`
     * 	 - `p`
     * 	 - `pre`
     * 	 - `strong`
     * 	 - `span`
     * 	 - `u`
     * 	 - `dl`
     * 	 - `dt`
     * 	 - `dd`
     * 	 - `ul`
     * 	 - `ol`
     * 	 - `li`  `class, style, dir,` and `target` attributes are allowed. If `target` is not set, links
     * 			open in a new window by default. Only safe `href` attributes can be used. See {@link module:sap/base/security/URLListValidator
     * 			URLListValidator}.
     *
     * **Note:** Keep in mind that not supported HTML tags and the content nested inside them are both not rendered
     * by the control.
     *
     * Default value is `empty string`.
     */
    getHtmlText(): string;
    /**
     * Returns a metadata object for class sap.m.FormattedText.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.86.0
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Determines the text alignment in the text elements in the `FormattedText`.
     *
     * **Note:** This functionality if set to the root element. To set explicit alignment to an element use
     * the `style` attribute.
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.86.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Defines the directionality of the text in the `FormattedText`, e.g. right-to-left(`RTL`) or left-to-right
     * (`LTR`).
     *
     * **Note:** This functionality if set to the root element. Use the `bdi` element and the `dir` attribute
     * to set explicit direction to an element.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Optional width of the control in CSS units.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.Link` in the aggregation {@link #getControls controls}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfControl(
      /**
       * The control whose index is looked for
       */
      oControl: Link
    ): int;
    /**
     * Inserts a control into the aggregation {@link #getControls controls}.
     */
    insertControl(
      /**
       * The control to insert; if empty, nothing is inserted
       */
      oControl: Link,
      /**
       * The `0`-based index the control should be inserted at; for a negative value of `iIndex`, the control
       * is inserted at position 0; for a value greater than the current size of the aggregation, the control
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getControls controls}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllControls(): Link[];
    /**
     * Removes a control from the aggregation {@link #getControls controls}.
     */
    removeControl(
      /**
       * The control to remove or its index or id
       */
      vControl: int | string | Link
    ): Link;
    /**
     * @SINCE 1.45.5
     *
     * Sets a new value for property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
     *
     * Determines the `target` attribute of the generated HTML anchor tags.
     *
     * **Note:** Applicable only if `ConvertLinksToAnchorTags` property is used with a value other than `sap.m.LinkConversion.None`.
     * Options are the standard values for the `target` attribute of the HTML anchor tag: `_self`, `_top`, `_blank`,
     * `_parent`, `_search`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"_blank"`.
     */
    setConvertedLinksDefaultTarget(
      /**
       * New value for property `convertedLinksDefaultTarget`
       */
      sConvertedLinksDefaultTarget?: string
    ): this;
    /**
     * @SINCE 1.45.5
     *
     * Sets a new value for property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setConvertLinksToAnchorTags(
      /**
       * New value for property `convertLinksToAnchorTags`
       */
      sConvertLinksToAnchorTags?: LinkConversion | keyof typeof LinkConversion
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Optional height of the control in CSS units.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Defines the HTML text to be displayed.
     */
    setHtmlText(
      /**
       * HTML text as a string
       */
      sText: string
    ): this;
    /**
     * @SINCE 1.86.0
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Determines the text alignment in the text elements in the `FormattedText`.
     *
     * **Note:** This functionality if set to the root element. To set explicit alignment to an element use
     * the `style` attribute.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.86.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Defines the directionality of the text in the `FormattedText`, e.g. right-to-left(`RTL`) or left-to-right
     * (`LTR`).
     *
     * **Note:** This functionality if set to the root element. Use the `bdi` element and the `dir` attribute
     * to set explicit direction to an element.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Optional width of the control in CSS units.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $FormattedTextSettings extends $ControlSettings {
    /**
     * Text in HTML format. The following tags are supported:
     * 	 - `a`
     * 	 - `abbr`
     * 	 - `bdi`
     * 	 - `blockquote`
     * 	 - `br`
     * 	 - `cite`
     * 	 - `code`
     * 	 - `em`
     * 	 - `h1`
     * 	 - `h2`
     * 	 - `h3`
     * 	 - `h4`
     * 	 - `h5`
     * 	 - `h6`
     * 	 - `p`
     * 	 - `pre`
     * 	 - `strong`
     * 	 - `span`
     * 	 - `u`
     * 	 - `dl`
     * 	 - `dt`
     * 	 - `dd`
     * 	 - `ul`
     * 	 - `ol`
     * 	 - `li`  `class, style, dir,` and `target` attributes are allowed. If `target` is not set, links
     * 			open in a new window by default. Only safe `href` attributes can be used. See {@link module:sap/base/security/URLListValidator
     * 			URLListValidator}.
     *
     * **Note:** Keep in mind that not supported HTML tags and the content nested inside them are both not rendered
     * by the control.
     */
    htmlText?: string | PropertyBindingInfo;

    /**
     * Optional width of the control in CSS units.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.45.5
     *
     * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are
     * the criteria for recognizing them.
     */
    convertLinksToAnchorTags?:
      | (LinkConversion | keyof typeof LinkConversion)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.45.5
     *
     * Determines the `target` attribute of the generated HTML anchor tags.
     *
     * **Note:** Applicable only if `ConvertLinksToAnchorTags` property is used with a value other than `sap.m.LinkConversion.None`.
     * Options are the standard values for the `target` attribute of the HTML anchor tag: `_self`, `_top`, `_blank`,
     * `_parent`, `_search`.
     */
    convertedLinksDefaultTarget?: string | PropertyBindingInfo;

    /**
     * Optional height of the control in CSS units.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.86.0
     *
     * Defines the directionality of the text in the `FormattedText`, e.g. right-to-left(`RTL`) or left-to-right
     * (`LTR`).
     *
     * **Note:** This functionality if set to the root element. Use the `bdi` element and the `dir` attribute
     * to set explicit direction to an element.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.86.0
     *
     * Determines the text alignment in the text elements in the `FormattedText`.
     *
     * **Note:** This functionality if set to the root element. To set explicit alignment to an element use
     * the `style` attribute.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * List of `sap.m.Link` controls that will be used to replace the placeholders in the text. Placeholders
     * are replaced according to their indexes. The placeholder with index %%0 will be replaced by the first
     * link in the aggregation, etc.
     */
    controls?: Link[] | Link | AggregationBindingInfo;
  }
}

declare module "sap/m/GenericTag" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IOverflowToolbarContent,
    GenericTagDesign,
    GenericTagValueState,
  } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueState } from "sap/ui/core/library";

  import ObjectNumber from "sap/m/ObjectNumber";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.62.0
   *
   * The `sap.m.GenericTag` control displays app-specific, essential information. Structure: The control consists
   * of four different parts:
   * 	 - Status indicator with semantic colors (required)
   * 	 - Icon that is displayed in the same color as the status indicator (optional)
   * 	 - Text that is truncated automatically (required)
   * 	 - Content area that can display either a control of type {@link sap.m.ObjectNumber} or a warning icon
   * 			(optional)
   */
  export default class GenericTag
    extends Control
    implements IOverflowToolbarContent {
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new `sap.m.GenericTag`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $GenericTagSettings
    );
    /**
     * Constructor for a new `sap.m.GenericTag`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $GenericTagSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.GenericTag`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.GenericTag` itself.
     *
     * Fired when the user clicks/taps on the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.GenericTag` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the value in the aggregation {@link #getValue value}.
     */
    destroyValue(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.GenericTag`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.GenericTag with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GenericTag>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Determines the visual mode of the control.
     *
     * Default value is `Full`.
     */
    getDesign(): GenericTagDesign | keyof typeof GenericTagDesign;
    /**
     * Returns a metadata object for class sap.m.GenericTag.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Sets the behavior of the `GenericTag` inside an `OverflowToolbar` configuration.
     */
    getOverflowToolbarConfig(): object;
    /**
     * Gets current value of property {@link #getStatus status}.
     *
     * Determines the control status that is represented in different colors, including the color bar and the
     * color and type of the displayed icon.
     *
     * Default value is `None`.
     */
    getStatus(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text rendered by the control. It's a value-descriptive text rendered on one line.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets content of aggregation {@link #getValue value}.
     *
     * Numeric value rendered by the control.
     */
    getValue(): ObjectNumber;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Determines the state of the control.
     *
     * **Note:** When the error state is set, a warning type of icon is displayed that overrides the control
     * set through the `value` aggregation.
     *
     * Default value is `None`.
     */
    getValueState(): GenericTagValueState | keyof typeof GenericTagValueState;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Determines the visual mode of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Full`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: GenericTagDesign | keyof typeof GenericTagDesign
    ): this;
    /**
     * Sets the `status` property.
     *
     * Default value is `None`.
     */
    setStatus(
      /**
       * New value for property `status`.
       */
      sStatus: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text rendered by the control. It's a value-descriptive text rendered on one line.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets the aggregated {@link #getValue value}.
     */
    setValue(
      /**
       * The value to set
       */
      oValue: ObjectNumber
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Determines the state of the control.
     *
     * **Note:** When the error state is set, a warning type of icon is displayed that overrides the control
     * set through the `value` aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: GenericTagValueState | keyof typeof GenericTagValueState
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.GenericTag`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.GenericTag` itself.
     *
     * Fired when the user clicks/taps on the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.GenericTag` itself
       */
      oListener?: object
    ): this;
  }

  export interface $GenericTagSettings extends $ControlSettings {
    /**
     * Defines the text rendered by the control. It's a value-descriptive text rendered on one line.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Determines the control status that is represented in different colors, including the color bar and the
     * color and type of the displayed icon.
     */
    status?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Determines the visual mode of the control.
     */
    design?:
      | (GenericTagDesign | keyof typeof GenericTagDesign)
      | PropertyBindingInfo;

    /**
     * Determines the state of the control.
     *
     * **Note:** When the error state is set, a warning type of icon is displayed that overrides the control
     * set through the `value` aggregation.
     */
    valueState?:
      | (GenericTagValueState | keyof typeof GenericTagValueState)
      | PropertyBindingInfo;

    /**
     * Numeric value rendered by the control.
     */
    value?: ObjectNumber;

    /**
     * Fired when the user clicks/taps on the control.
     */
    press?: Function;
  }
}

declare module "sap/m/GenericTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TileContent from "sap/m/TileContent";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import {
    GenericTileScope,
    FrameType,
    GenericTileMode,
    Size,
    TileSizeBehavior,
    LoadState,
    WrappingType,
  } from "sap/m/library";

  import { URI, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.34.0
   *
   * Displays header, subheader, and a customizable main area in a tile format. Since 1.44, also an in-line
   * format which contains only header and subheader is supported.
   */
  export default class GenericTile extends Control {
    /**
     * Constructor for a new sap.m.GenericTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTileSettings
    );
    /**
     * Constructor for a new sap.m.GenericTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $GenericTileSettings
    );

    /**
     * Adds some tileContent to the aggregation {@link #getTileContent tileContent}.
     */
    addTileContent(
      /**
       * The tileContent to add; if empty, nothing is inserted
       */
      oTileContent: TileContent
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.GenericTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.GenericTile` itself.
     *
     * The event is triggered when the user presses the tile.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.GenericTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getTileContent tileContent} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindTileContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @deprecated (since 1.36.0) - This aggregation is deprecated, use sap.m.ImageContent control to display
     * an icon instead.
     *
     * Destroys the icon in the aggregation {@link #getIcon icon}.
     */
    destroyIcon(): this;
    /**
     * Destroys all the tileContent in the aggregation {@link #getTileContent tileContent}.
     */
    destroyTileContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.GenericTile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.GenericTile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GenericTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current scope the GenericTile was in when the event occurred.
         */
        scope?: GenericTileScope | keyof typeof GenericTileScope;
        /**
         * The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
         * In Display scope, the parameter value is only Press.
         */
        action?: string;
        /**
         * The pressed DOM Element pointing to the GenericTile's DOM Element in Display scope. In Actions scope
         * it points to the more icon, when the tile is pressed, or to the DOM Element of the remove button, when
         * the remove button is pressed.
         */
        domRef?: any;
      }
    ): this;
    /**
     * @SINCE 1.82
     *
     * Gets current value of property {@link #getAdditionalTooltip additionalTooltip}.
     *
     * Tooltip text which is added at the tooltip generated by the control.
     */
    getAdditionalTooltip(): string;
    /**
     * @SINCE 1.50.0
     *
     * Gets current value of property {@link #getAriaLabel ariaLabel}.
     *
     * Additional description for aria-label. The aria-label is rendered before the standard aria-label.
     */
    getAriaLabel(): string;
    /**
     * @SINCE 1.83
     *
     * Gets current value of property {@link #getAriaRole ariaRole}.
     *
     * Additional description for aria-role.
     */
    getAriaRole(): string;
    /**
     * @SINCE 1.83
     *
     * Gets current value of property {@link #getAriaRoleDescription ariaRoleDescription}.
     *
     * Additional description for aria-roledescription.
     */
    getAriaRoleDescription(): string;
    /**
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * The URI of the background image.
     */
    getBackgroundImage(): URI;
    /**
     * @EXPERIMENTAL (since 1.44.1)
     *
     * Provides an interface to the tile's layout information consistent in all modes and content densities.
     */
    getBoundingRects(): object[];
    /**
     * Gets current value of property {@link #getFailedText failedText}.
     *
     * The message that appears when the control is in the Failed state.
     */
    getFailedText(): string;
    /**
     * Gets current value of property {@link #getFrameType frameType}.
     *
     * The FrameType: OneByOne, TwoByOne, OneByHalf, or TwoByHalf. Default set to OneByOne if property is not
     * defined or set to Auto by the app.
     *
     * Default value is `OneByOne`.
     */
    getFrameType(): FrameType | keyof typeof FrameType;
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * The header of the tile.
     */
    getHeader(): string;
    /**
     * Gets current value of property {@link #getHeaderImage headerImage}.
     *
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     */
    getHeaderImage(): URI;
    /**
     * @deprecated (since 1.36.0) - This aggregation is deprecated, use sap.m.ImageContent control to display
     * an icon instead.
     *
     * Gets content of aggregation {@link #getIcon icon}.
     *
     * An icon or image to be displayed in the control. This aggregation is deprecated since version 1.36.0,
     * to display an icon or image use sap.m.ImageContent control instead.
     */
    getIcon(): Control;
    /**
     * Gets current value of property {@link #getImageDescription imageDescription}.
     *
     * Description of a header image that is used in the tooltip.
     */
    getImageDescription(): string;
    /**
     * Returns a metadata object for class sap.m.GenericTile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * The mode of the GenericTile.
     *
     * Default value is `ContentMode`.
     */
    getMode(): GenericTileMode | keyof typeof GenericTileMode;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getScope scope}.
     *
     * Changes the visualization in order to enable additional actions with the Generic Tile.
     *
     * Default value is `Display`.
     */
    getScope(): GenericTileScope | keyof typeof GenericTileScope;
    /**
     * @deprecated (since 1.38.0) - The GenericTile control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Gets current value of property {@link #getSize size}.
     *
     * The size of the tile. If not set, then the default size is applied based on the device.
     *
     * Default value is `Auto`.
     */
    getSize(): Size | keyof typeof Size;
    /**
     * Gets current value of property {@link #getSizeBehavior sizeBehavior}.
     *
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen.
     *
     * Default value is `Responsive`.
     */
    getSizeBehavior(): TileSizeBehavior | keyof typeof TileSizeBehavior;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * The load status.
     *
     * Default value is `Loaded`.
     */
    getState(): LoadState | keyof typeof LoadState;
    /**
     * Gets current value of property {@link #getSubheader subheader}.
     *
     * The subheader of the tile.
     */
    getSubheader(): string;
    /**
     * Gets content of aggregation {@link #getTileContent tileContent}.
     *
     * The content of the tile.
     */
    getTileContent(): TileContent[];
    /**
     * @SINCE 1.76
     *
     * Gets current value of property {@link #getUrl url}.
     *
     * Renders the given link as root element and therefore enables the open in new tab / window functionality
     */
    getUrl(): URI;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the control.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * Default value is `Normal`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * Checks for the provided `sap.m.TileContent` in the aggregation {@link #getTileContent tileContent}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfTileContent(
      /**
       * The tileContent whose index is looked for
       */
      oTileContent: TileContent
    ): int;
    /**
     * Inserts a tileContent into the aggregation {@link #getTileContent tileContent}.
     */
    insertTileContent(
      /**
       * The tileContent to insert; if empty, nothing is inserted
       */
      oTileContent: TileContent,
      /**
       * The `0`-based index the tileContent should be inserted at; for a negative value of `iIndex`, the tileContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the tileContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getTileContent tileContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTileContent(): TileContent[];
    /**
     * Removes a tileContent from the aggregation {@link #getTileContent tileContent}.
     */
    removeTileContent(
      /**
       * The tileContent to remove or its index or id
       */
      vTileContent: int | string | TileContent
    ): TileContent;
    /**
     * @SINCE 1.82
     *
     * Sets a new value for property {@link #getAdditionalTooltip additionalTooltip}.
     *
     * Tooltip text which is added at the tooltip generated by the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAdditionalTooltip(
      /**
       * New value for property `additionalTooltip`
       */
      sAdditionalTooltip?: string
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Sets a new value for property {@link #getAriaLabel ariaLabel}.
     *
     * Additional description for aria-label. The aria-label is rendered before the standard aria-label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaLabel(
      /**
       * New value for property `ariaLabel`
       */
      sAriaLabel?: string
    ): this;
    /**
     * @SINCE 1.83
     *
     * Sets a new value for property {@link #getAriaRole ariaRole}.
     *
     * Additional description for aria-role.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaRole(
      /**
       * New value for property `ariaRole`
       */
      sAriaRole?: string
    ): this;
    /**
     * @SINCE 1.83
     *
     * Sets a new value for property {@link #getAriaRoleDescription ariaRoleDescription}.
     *
     * Additional description for aria-roledescription.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaRoleDescription(
      /**
       * New value for property `ariaRoleDescription`
       */
      sAriaRoleDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * The URI of the background image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getFailedText failedText}.
     *
     * The message that appears when the control is in the Failed state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFailedText(
      /**
       * New value for property `failedText`
       */
      sFailedText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFrameType frameType}.
     *
     * The FrameType: OneByOne, TwoByOne, OneByHalf, or TwoByHalf. Default set to OneByOne if property is not
     * defined or set to Auto by the app.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `OneByOne`.
     */
    setFrameType(
      /**
       * New value for property `frameType`
       */
      sFrameType?: FrameType | keyof typeof FrameType
    ): this;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * The header of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderImage headerImage}.
     *
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeaderImage(
      /**
       * New value for property `headerImage`
       */
      sHeaderImage?: URI
    ): this;
    /**
     * @deprecated (since 1.36.0) - This aggregation is deprecated, use sap.m.ImageContent control to display
     * an icon instead.
     *
     * Sets the aggregated {@link #getIcon icon}.
     */
    setIcon(
      /**
       * The icon to set
       */
      oIcon: Control
    ): this;
    /**
     * Sets a new value for property {@link #getImageDescription imageDescription}.
     *
     * Description of a header image that is used in the tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setImageDescription(
      /**
       * New value for property `imageDescription`
       */
      sImageDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * The mode of the GenericTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `ContentMode`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: GenericTileMode | keyof typeof GenericTileMode
    ): this;
    /**
     * @SINCE 1.46
     *
     * Provides an interface to switch on or off the tile's press event. Used in SlideTile for Actions scope.
     */
    setPressEnabled(
      /**
       * If set to true, the press event of the tile is active.
       */
      value: boolean
    ): void;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getScope scope}.
     *
     * Changes the visualization in order to enable additional actions with the Generic Tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Display`.
     */
    setScope(
      /**
       * New value for property `scope`
       */
      sScope?: GenericTileScope | keyof typeof GenericTileScope
    ): this;
    /**
     * @deprecated (since 1.38.0) - The GenericTile control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Sets a new value for property {@link #getSize size}.
     *
     * The size of the tile. If not set, then the default size is applied based on the device.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: Size | keyof typeof Size
    ): this;
    /**
     * Sets a new value for property {@link #getSizeBehavior sizeBehavior}.
     *
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Responsive`.
     */
    setSizeBehavior(
      /**
       * New value for property `sizeBehavior`
       */
      sSizeBehavior?: TileSizeBehavior | keyof typeof TileSizeBehavior
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * The load status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Loaded`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: LoadState | keyof typeof LoadState
    ): this;
    /**
     * Sets a new value for property {@link #getSubheader subheader}.
     *
     * The subheader of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSubheader(
      /**
       * New value for property `subheader`
       */
      sSubheader?: string
    ): this;
    /**
     * @SINCE 1.76
     *
     * Sets a new value for property {@link #getUrl url}.
     *
     * Renders the given link as root element and therefore enables the open in new tab / window functionality
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUrl(
      /**
       * New value for property `url`
       */
      sUrl?: URI
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Normal`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
    /**
     * @SINCE 1.46
     *
     * Shows the actions scope view of GenericTile without changing the scope. Used in SlideTile for Actions
     * scope.
     */
    showActionsView(
      /**
       * If set to true, actions view is showed.
       */
      value: boolean
    ): void;
    /**
     * Unbinds aggregation {@link #getTileContent tileContent} from model data.
     */
    unbindTileContent(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.GenericTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.GenericTile` itself.
     *
     * The event is triggered when the user presses the tile.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.GenericTile` itself
       */
      oListener?: object
    ): this;
  }

  export interface $GenericTileSettings extends $ControlSettings {
    /**
     * The mode of the GenericTile.
     */
    mode?:
      | (GenericTileMode | keyof typeof GenericTileMode)
      | PropertyBindingInfo;

    /**
     * The header of the tile.
     */
    header?: string | PropertyBindingInfo;

    /**
     * The subheader of the tile.
     */
    subheader?: string | PropertyBindingInfo;

    /**
     * The message that appears when the control is in the Failed state.
     */
    failedText?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.38.0) - The GenericTile control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * The size of the tile. If not set, then the default size is applied based on the device.
     */
    size?: (Size | keyof typeof Size) | PropertyBindingInfo;

    /**
     * The FrameType: OneByOne, TwoByOne, OneByHalf, or TwoByHalf. Default set to OneByOne if property is not
     * defined or set to Auto by the app.
     */
    frameType?: (FrameType | keyof typeof FrameType) | PropertyBindingInfo;

    /**
     * The URI of the background image.
     */
    backgroundImage?: URI | PropertyBindingInfo;

    /**
     * The image to be displayed as a graphical element within the header. This can be an image or an icon from
     * the icon font.
     */
    headerImage?: URI | PropertyBindingInfo;

    /**
     * The load status.
     */
    state?: (LoadState | keyof typeof LoadState) | PropertyBindingInfo;

    /**
     * Description of a header image that is used in the tooltip.
     */
    imageDescription?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * Changes the visualization in order to enable additional actions with the Generic Tile.
     */
    scope?:
      | (GenericTileScope | keyof typeof GenericTileScope)
      | PropertyBindingInfo;

    /**
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen.
     */
    sizeBehavior?:
      | (TileSizeBehavior | keyof typeof TileSizeBehavior)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.50.0
     *
     * Additional description for aria-label. The aria-label is rendered before the standard aria-label.
     */
    ariaLabel?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.83
     *
     * Additional description for aria-role.
     */
    ariaRole?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.83
     *
     * Additional description for aria-roledescription.
     */
    ariaRoleDescription?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.76
     *
     * Renders the given link as root element and therefore enables the open in new tab / window functionality
     */
    url?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.82
     *
     * Tooltip text which is added at the tooltip generated by the control.
     */
    additionalTooltip?: string | PropertyBindingInfo;

    /**
     * The content of the tile.
     */
    tileContent?: TileContent[] | TileContent | AggregationBindingInfo;

    /**
     * @deprecated (since 1.36.0) - This aggregation is deprecated, use sap.m.ImageContent control to display
     * an icon instead.
     *
     * An icon or image to be displayed in the control. This aggregation is deprecated since version 1.36.0,
     * to display an icon or image use sap.m.ImageContent control instead.
     */
    icon?: Control;

    /**
     * The event is triggered when the user presses the tile.
     */
    press?: Function;
  }
}

declare module "sap/m/GroupHeaderListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TextDirection } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * `sap.m.GroupHeaderListItem` is used to display the title of a group and act as separator between groups
   * in `sap.m.List` and `sap.m.Table`. **Note:** The inherited properties `unread`, `selected`, `counter`
   * and `press` event from `sap.m.ListItemBase` are not supported.
   */
  export default class GroupHeaderListItem extends ListItemBase {
    /**
     * Constructor for a new GroupHeaderListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $GroupHeaderListItemSettings
    );
    /**
     * Constructor for a new GroupHeaderListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $GroupHeaderListItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.GroupHeaderListItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GroupHeaderListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getCount count}.
     *
     * Defines the count of items in the group, but it could also be an amount which represents the sum of all
     * amounts in the group. **Note:** Will not be displayed if not set.
     */
    getCount(): string;
    /**
     * Returns a metadata object for class sap.m.GroupHeaderListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the group header.
     */
    getTitle(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Defines the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTitleTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.13.2
     * @deprecated (since 1.40.10)
     *
     * Gets current value of property {@link #getUpperCase upperCase}.
     *
     * Allows to uppercase the group title.
     *
     * Default value is `false`.
     */
    getUpperCase(): boolean;
    /**
     * Sets a new value for property {@link #getCount count}.
     *
     * Defines the count of items in the group, but it could also be an amount which represents the sum of all
     * amounts in the group. **Note:** Will not be displayed if not set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCount(
      /**
       * New value for property `count`
       */
      sCount?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the group header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Defines the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTitleTextDirection(
      /**
       * New value for property `titleTextDirection`
       */
      sTitleTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.13.2
     * @deprecated (since 1.40.10)
     *
     * Sets a new value for property {@link #getUpperCase upperCase}.
     *
     * Allows to uppercase the group title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUpperCase(
      /**
       * New value for property `upperCase`
       */
      bUpperCase?: boolean
    ): this;
  }

  export interface $GroupHeaderListItemSettings extends $ListItemBaseSettings {
    /**
     * Defines the title of the group header.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the count of items in the group, but it could also be an amount which represents the sum of all
     * amounts in the group. **Note:** Will not be displayed if not set.
     */
    count?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.13.2
     * @deprecated (since 1.40.10)
     *
     * Allows to uppercase the group title.
     */
    upperCase?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     */
    titleTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/GrowingEnablement" {
  import BaseObject from "sap/ui/base/Object";

  import ListBase from "sap/m/ListBase";

  import Metadata from "sap/ui/base/Metadata";

  export default class GrowingEnablement extends BaseObject {
    /**
     * Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities
     * for growing
     */
    constructor(
      /**
       * the ListBase control of which this Growing is the delegate
       */
      oControl: ListBase
    );

    /**
     * Creates a new subclass of class sap.m.GrowingEnablement with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GrowingEnablement>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.GrowingEnablement.
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/m/GrowingList" {
  import { default as List, $ListSettings } from "sap/m/List";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @deprecated (since 1.16) - Instead use "List" or "Table" control with setting "growing" property to "true"
   *
   * `sap.m.GrowingList` control is the container for all list items and inherits from sap.m.List control.
   * Everything like the selection, deletion, unread states and inset style are also maintained here. In addition
   * the control provides a loading mechanism to request data from the model and append the list items to
   * the list. The request is started manually by tapping on the trigger at the end of the list.
   */
  export default class GrowingList extends List {
    /**
     * Constructor for a new GrowingList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $GrowingListSettings
    );
    /**
     * Constructor for a new GrowingList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $GrowingListSettings
    );

    /**
     * Creates a new subclass of class sap.m.GrowingList with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.List.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GrowingList>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.GrowingList.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getScrollToLoad scrollToLoad}.
     *
     * If you set this property to true then user needs to scroll end to trigger loading a new page. Default
     * value is false which means user needs to scroll end and then click button to load new page. NOTE: This
     * property can be set true, if growing property is set "true" and if you only have one instance of this
     * control inside the scroll container(e.g Page).
     *
     * Default value is `false`.
     */
    getScrollToLoad(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getThreshold threshold}.
     *
     * Number of items requested from the server. To activate this you should set growing property to "true"
     *
     * Default value is `20`.
     */
    getThreshold(): int;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getTriggerText triggerText}.
     *
     * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load
     * More Data") coming from the messagebundle properties. This property can be used only if growing property
     * is set "true" and scrollToLoad property is set "false".
     */
    getTriggerText(): string;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getScrollToLoad scrollToLoad}.
     *
     * If you set this property to true then user needs to scroll end to trigger loading a new page. Default
     * value is false which means user needs to scroll end and then click button to load new page. NOTE: This
     * property can be set true, if growing property is set "true" and if you only have one instance of this
     * control inside the scroll container(e.g Page).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setScrollToLoad(
      /**
       * New value for property `scrollToLoad`
       */
      bScrollToLoad?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getThreshold threshold}.
     *
     * Number of items requested from the server. To activate this you should set growing property to "true"
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `20`.
     */
    setThreshold(
      /**
       * New value for property `threshold`
       */
      iThreshold?: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getTriggerText triggerText}.
     *
     * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load
     * More Data") coming from the messagebundle properties. This property can be used only if growing property
     * is set "true" and scrollToLoad property is set "false".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTriggerText(
      /**
       * New value for property `triggerText`
       */
      sTriggerText?: string
    ): this;
  }

  export interface $GrowingListSettings extends $ListSettings {
    /**
     * @SINCE 1.16
     *
     * Number of items requested from the server. To activate this you should set growing property to "true"
     */
    threshold?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load
     * More Data") coming from the messagebundle properties. This property can be used only if growing property
     * is set "true" and scrollToLoad property is set "false".
     */
    triggerText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * If you set this property to true then user needs to scroll end to trigger loading a new page. Default
     * value is false which means user needs to scroll end and then click button to load new page. NOTE: This
     * property can be set true, if growing property is set "true" and if you only have one instance of this
     * control inside the scroll container(e.g Page).
     */
    scrollToLoad?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/HBox" {
  import { default as FlexBox, $FlexBoxSettings } from "sap/m/FlexBox";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control,
   * as it is just a specialized FlexBox control.
   *
   *  **Note:** Be sure to check the `renderType` setting to avoid issues due to browser inconsistencies.
   */
  export default class HBox extends FlexBox {
    /**
     * Constructor for a new HBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FlexBox#constructor
     * sap.m.FlexBox} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HBoxSettings
    );
    /**
     * Constructor for a new HBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FlexBox#constructor
     * sap.m.FlexBox} can be used.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HBoxSettings
    );

    /**
     * Creates a new subclass of class sap.m.HBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.HBox.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $HBoxSettings extends $FlexBoxSettings {}
}

declare module "sap/m/HeaderContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ObjectHeaderContainer, BackgroundDesign } from "sap/m/library";

  import { ID, CSSSize, Orientation } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.44.0
   *
   * The container that provides a horizontal layout. It provides a horizontal scrolling on the mobile devices.
   * On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation.
   * You can use left and right arrow keys to navigate through the inner content. The Home key puts focus
   * on the first control and the End key puts focus on the last control. Use Enter or Space key to choose
   * the control.
   */
  export default class HeaderContainer
    extends Control
    implements ObjectHeaderContainer {
    __implements__sap_m_ObjectHeaderContainer: boolean;
    /**
     * Constructor for the new HeaderContainer control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $HeaderContainerSettings
    );
    /**
     * Constructor for the new HeaderContainer control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $HeaderContainerSettings
    );

    /**
     * @SINCE 1.62.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:scroll scroll} event of this `sap.m.HeaderContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.HeaderContainer` itself.
     *
     * This event is triggered on pressing the scroll button.
     */
    attachScroll(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.HeaderContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:scroll scroll} event of this `sap.m.HeaderContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachScroll(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.HeaderContainer with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, HeaderContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:scroll scroll} to attached listeners.
     */
    fireScroll(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.62.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     *
     * Default value is `Transparent`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Content to add to HeaderContainer.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation
     * and as '100%' in vertical orientation.
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.HeaderContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOrientation orientation}.
     *
     * The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In
     * horizontal mode the content controls are displayed next to each other, in vertical mode the content controls
     * are displayed on top of each other.
     *
     * Default value is `Horizontal`.
     */
    getOrientation(): Orientation | keyof typeof Orientation;
    /**
     * Gets current value of property {@link #getScrollStep scrollStep}.
     *
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     *
     * Default value is `300`.
     */
    getScrollStep(): int;
    /**
     * Gets current value of property {@link #getScrollStepByItem scrollStepByItem}.
     *
     * Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop. Have
     * priority over 'ScrollStep'. Have to be positive number.
     *
     * Default value is `1`.
     */
    getScrollStepByItem(): int;
    /**
     * Gets current value of property {@link #getScrollTime scrollTime}.
     *
     * Scroll animation time in milliseconds.
     *
     * Default value is `500`.
     */
    getScrollTime(): int;
    /**
     * Gets current value of property {@link #getShowDividers showDividers}.
     *
     * If set to true, it shows dividers between the different content controls.
     *
     * Default value is `true`.
     */
    getShowDividers(): boolean;
    /**
     * Gets current value of property {@link #getShowOverflowItem showOverflowItem}.
     *
     * Indicates whether the incomplete item on the edge of visible area is displayed or hidden.
     *
     * Default value is `true`.
     */
    getShowOverflowItem(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation
     * and as 'auto' in vertical orientation.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.62.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * @SINCE 1.62.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Transparent`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation
     * and as '100%' in vertical orientation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getOrientation orientation}.
     *
     * The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In
     * horizontal mode the content controls are displayed next to each other, in vertical mode the content controls
     * are displayed on top of each other.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Horizontal`.
     */
    setOrientation(
      /**
       * New value for property `orientation`
       */
      sOrientation?: Orientation | keyof typeof Orientation
    ): this;
    /**
     * Sets a new value for property {@link #getScrollStep scrollStep}.
     *
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `300`.
     */
    setScrollStep(
      /**
       * New value for property `scrollStep`
       */
      iScrollStep?: int
    ): this;
    /**
     * Sets a new value for property {@link #getScrollStepByItem scrollStepByItem}.
     *
     * Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop. Have
     * priority over 'ScrollStep'. Have to be positive number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setScrollStepByItem(
      /**
       * New value for property `scrollStepByItem`
       */
      iScrollStepByItem?: int
    ): this;
    /**
     * Sets a new value for property {@link #getScrollTime scrollTime}.
     *
     * Scroll animation time in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `500`.
     */
    setScrollTime(
      /**
       * New value for property `scrollTime`
       */
      iScrollTime?: int
    ): this;
    /**
     * Sets a new value for property {@link #getShowDividers showDividers}.
     *
     * If set to true, it shows dividers between the different content controls.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowDividers(
      /**
       * New value for property `showDividers`
       */
      bShowDividers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowOverflowItem showOverflowItem}.
     *
     * Indicates whether the incomplete item on the edge of visible area is displayed or hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowOverflowItem(
      /**
       * New value for property `showOverflowItem`
       */
      bShowOverflowItem?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation
     * and as 'auto' in vertical orientation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:scroll scroll} event of this `sap.m.HeaderContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.HeaderContainer` itself.
     *
     * This event is triggered on pressing the scroll button.
     */
    attachScroll(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.HeaderContainer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $HeaderContainerSettings extends $ControlSettings {
    /**
     * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
     */
    scrollStep?: int | PropertyBindingInfo;

    /**
     * Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop. Have
     * priority over 'ScrollStep'. Have to be positive number.
     */
    scrollStepByItem?: int | PropertyBindingInfo;

    /**
     * Scroll animation time in milliseconds.
     */
    scrollTime?: int | PropertyBindingInfo;

    /**
     * Indicates whether the incomplete item on the edge of visible area is displayed or hidden.
     */
    showOverflowItem?: boolean | PropertyBindingInfo;

    /**
     * If set to true, it shows dividers between the different content controls.
     */
    showDividers?: boolean | PropertyBindingInfo;

    /**
     * The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In
     * horizontal mode the content controls are displayed next to each other, in vertical mode the content controls
     * are displayed on top of each other.
     */
    orientation?:
      | (Orientation | keyof typeof Orientation)
      | PropertyBindingInfo;

    /**
     * Specifies the background color of the content. The visualization of the different options depends on
     * the used theme.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation
     * and as 'auto' in vertical orientation.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation
     * and as '100%' in vertical orientation.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Content to add to HeaderContainer.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.62.0
     *
     * Controls or IDs that label controls in the `content` aggregation. Each ariaLabelledBy item is assigned
     * to its appropriate counterpart in the `content` aggregation.
     * If you want to annotate all the controls in the `content` aggregation, add the same number of items to
     * the `ariaLabelledBy` annotation.
     * Can be used by screen reader software.
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is triggered on pressing the scroll button.
     */
    scroll?: Function;
  }
}

declare module "sap/m/IconTabBar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    ObjectHeaderContainer,
    IconTab,
    BackgroundDesign,
    IconTabHeaderMode,
    IconTabDensityMode,
    TabsOverflowMode,
  } from "sap/m/library";

  import { IDynamicPageStickyContent } from "sap/f/library";

  import IconTabFilter from "sap/m/IconTabFilter";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * The IconTabBar represents a collection of tabs with associated content. Overview: The IconTabBar can
   * be used for navigation within an object, or as a filter. Different types of IconTabBar are used based
   * on the contents.
   * 	 - Filter - There is only one main content for all tabs. The main content can be filtered, based on
   * 			the selected tab.
   * 	 - Normal tab bar - The contents of each tab are independent from each other.
   * 	 - Combination of the above - There can be both filtered and independent contents.  Structure:
   * 			The IconTabBar can hold two types of entities {@link sap.m.IconTabFilter sap.m.IconTabFilter} and {@link
   * 			sap.m.IconTabSeparator sap.m.IconTabSeparator}
   *
   * The IconTabFilter holds all information on an item - text, icon and count.
   *
   * The IconTabSeparator holds an icon that can be used to show a process that runs from item to item. Usage:
   * Text only: Uses text labels as tabs with optional counter
   * 	 - Used when there are no suitable icons for all items.
   * 	 - Used when longer labels are needed.
   * 	 - If `headerMode` property is set to `Inline` the text and the count are displayed in one line.
   * 	 - `UpperCase` is disabled.
   * 	 - Use title case.  Icon Tabs: Round tabs with optional counter and label
   * 	 - Used when there are unique icons for all items.
   * 	 - Only shorter labels are possible.
   * 	 - Provide labels for all icons or for none. Do not mix these.  Tabs as filters: Tabs with filtered
   * 			content from the same set of items
   * 	 - Provide an "All" tab to show all items without filtering.
   * 	 - Use counters to show the number of items in each filter.  Tabs as process steps: Tabs show a
   * 			single step in a process
   * 	 - Use an arrow (e.g. triple-chevron) as a separator to connect the steps.
   * 	 - Use counters to show the number of items in each filter.  Hierarchies: Multiple sub tabs could
   * 			be placed underneath one main tab. Nesting allows deeper hierarchies with indentations to indicate the
   * 			level of each nested tab. When a tab has both sub tabs and own content its click area is split to allow
   * 			the user to display the content or alternatively to expand/collapse the list of sub tabs. Responsive
   * 			Behavior:
   * 	 - Text-only tabs are never truncated.
   * 	 - Use the `expandable` property to specify whether users can collapse the tab container (default =
   * 			true).
   * 	 - On desktop, tabs can be dragged and dropped (property `enableTabReordering`).
   * 	 - If you have a large number of tabs, only the tabs that can fit on screen will be visible. All other
   * 			tabs that can't fit on the screen are available in an overflow tab "More".  When using the `sap.m.IconTabBar`
   * 			in SAP Quartz themes, the breakpoints and layout paddings could be determined by the Icon Tab Bar's width.
   * 			To enable this concept and add responsive paddings to an element of the Icon Tab Bar control, you have
   * 			to add the following classes depending on your use case: `sapUiResponsivePadding--header`, `sapUiResponsivePadding--content`.
   */
  export default class IconTabBar
    extends Control
    implements ObjectHeaderContainer, IDynamicPageStickyContent {
    __implements__sap_m_ObjectHeaderContainer: boolean;
    __implements__sap_f_IDynamicPageStickyContent: boolean;
    /**
     * Constructor for a new IconTabBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/icontabbar/ Icon Tab Bar}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabBarSettings
    );
    /**
     * Constructor for a new IconTabBar.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/icontabbar/ Icon Tab Bar}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabBarSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IconTab
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.m.IconTabBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabBar` itself.
     *
     * Indicates that the tab will expand or collapse.
     */
    attachExpand(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.IconTabBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabBar` itself.
     *
     * Fires when an item is selected.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.15.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:expand expand} event of this `sap.m.IconTabBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachExpand(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.IconTabBar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.IconTabBar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IconTabBar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.15.0
     *
     * Fires event {@link #event:expand expand} to attached listeners.
     */
    fireExpand(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * If the tab will expand, this is true.
         */
        expand?: boolean;
        /**
         * If the tab will collapse, this is true.
         */
        collapse?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item
         */
        item?: IconTabFilter;
        /**
         * The key of the selected item
         */
        key?: string;
        /**
         * The selected item
         */
        selectedItem?: IconTabFilter;
        /**
         * The key of the selected item
         */
        selectedKey?: string;
      }
    ): this;
    /**
     * @SINCE 1.26
     *
     * Gets current value of property {@link #getApplyContentPadding applyContentPadding}.
     *
     * Determines whether the IconTabBar content fits to the full area. The paddings are removed if it's set
     * to false.
     *
     * Default value is `true`.
     */
    getApplyContentPadding(): boolean;
    /**
     * @SINCE 1.78
     *
     * Gets current value of property {@link #getAriaTexts ariaTexts}.
     *
     * Specifies optional texts for the screen reader.
     *
     * The given object can contain the following keys: `headerLabel` - text to serve as a label for the header,
     * `headerDescription` - text to serve as a description for the header.
     */
    getAriaTexts(): object;
    /**
     * @SINCE 1.26
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the IconTabBar.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". Default is "Solid".
     *
     * Default value is `Solid`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Represents the contents displayed below the IconTabBar. If there are multiple contents, they are rendered
     * after each other. The developer has to manage to display the right one or use the content aggregation
     * inside the IconTabFilter (which will be displayed instead if it is set).
     */
    getContent(): Control[];
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getEnableTabReordering enableTabReordering}.
     *
     * Specifies whether tab reordering is enabled. Relevant only for desktop devices. The {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator} cannot be dragged and dropped Items can be moved around {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator}
     *
     * Default value is `false`.
     */
    getEnableTabReordering(): boolean;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getExpandable expandable}.
     *
     * Defines if the tabs are collapsible and expandable.
     *
     * Default value is `true`.
     */
    getExpandable(): boolean;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getExpanded expanded}.
     *
     * Indicates if the actual tab content is expanded or not.
     *
     * Default value is `true`.
     */
    getExpanded(): boolean;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getHeaderBackgroundDesign headerBackgroundDesign}.
     *
     * Specifies the background color of the header.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". **Note:** In SAP Belize Deep (sap_belize_plus) theme this property should be set to "Solid".
     *
     * Default value is `Solid`.
     */
    getHeaderBackgroundDesign():
      | BackgroundDesign
      | keyof typeof BackgroundDesign;
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getHeaderMode headerMode}.
     *
     * Specifies the header mode. **Note:** The Inline mode works only if no icons are set.
     *
     * Default value is `Standard`.
     */
    getHeaderMode(): IconTabHeaderMode | keyof typeof IconTabHeaderMode;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items displayed in the IconTabBar.
     */
    getItems(): IconTab[];
    /**
     * @SINCE 1.79
     *
     * Gets current value of property {@link #getMaxNestingLevel maxNestingLevel}.
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     *
     * Default value is `0`.
     */
    getMaxNestingLevel(): int;
    /**
     * Returns a metadata object for class sap.m.IconTabBar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Reflector for the internal header's selectedKey property.
     */
    getSelectedKey(): string;
    /**
     * @SINCE 1.42
     * @deprecated (since 1.77)
     *
     * Gets current value of property {@link #getShowOverflowSelectList showOverflowSelectList}.
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     *
     * Default value is `false`.
     */
    getShowOverflowSelectList(): boolean;
    /**
     * Reflector for the internal header's showSelection property.
     */
    getShowSelection(): boolean;
    /**
     * @SINCE 1.26
     *
     * Gets current value of property {@link #getStretchContentHeight stretchContentHeight}.
     *
     * Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container.
     * As a prerequisite, the height of the parent container must be defined as a fixed value.
     *
     * Default value is `false`.
     */
    getStretchContentHeight(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getTabDensityMode tabDensityMode}.
     *
     * Specifies the visual density mode of the tabs.
     *
     * The values that can be applied are `Cozy`, `Compact` and `Inherit`. `Cozy` and `Compact` render the control
     * in one of these modes independent of the global density settings. The `Inherit` value follows the global
     * density settings which are applied. For compatibility reasons, the default value is `Cozy`.
     *
     * Default value is `Cozy`.
     */
    getTabDensityMode(): IconTabDensityMode | keyof typeof IconTabDensityMode;
    /**
     * @SINCE 1.90
     *
     * Gets current value of property {@link #getTabsOverflowMode tabsOverflowMode}.
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * two overflow tabs on both ends of the bar.
     *
     * Default value is `End`.
     */
    getTabsOverflowMode(): TabsOverflowMode | keyof typeof TabsOverflowMode;
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getUpperCase upperCase}.
     *
     * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
     *
     * Default value is `false`.
     */
    getUpperCase(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.m.IconTab` in the aggregation {@link #getItems items}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IconTab
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IconTab,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IconTab[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IconTab
    ): IconTab;
    /**
     * @SINCE 1.26
     *
     * Sets a new value for property {@link #getApplyContentPadding applyContentPadding}.
     *
     * Determines whether the IconTabBar content fits to the full area. The paddings are removed if it's set
     * to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setApplyContentPadding(
      /**
       * New value for property `applyContentPadding`
       */
      bApplyContentPadding?: boolean
    ): this;
    /**
     * Sets the ariaTexts property.
     */
    setAriaTexts(
      /**
       * New value for ariaTexts.
       */
      oAriaTexts: object
    ): this;
    /**
     * @SINCE 1.26
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the IconTabBar.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". Default is "Solid".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Solid`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Sets the enableTabReordering property.
     */
    setEnableTabReordering(
      /**
       * New value for enableTabReordering.
       */
      value: boolean
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets a new value for property {@link #getExpandable expandable}.
     *
     * Defines if the tabs are collapsible and expandable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setExpandable(
      /**
       * New value for property `expandable`
       */
      bExpandable?: boolean
    ): this;
    /**
     * Sets the tab content as expanded.
     */
    setExpanded(
      /**
       * New parameter value.
       */
      bExpanded: boolean
    ): this;
    /**
     * Sets the header background design.
     */
    setHeaderBackgroundDesign(
      /**
       * New parameter value.
       */
      headerBackgroundDesign: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Sets the header mode.
     */
    setHeaderMode(
      /**
       * New parameter value.
       */
      mode: IconTabHeaderMode | keyof typeof IconTabHeaderMode
    ): this;
    /**
     * @SINCE 1.79
     *
     * Sets a new value for property {@link #getMaxNestingLevel maxNestingLevel}.
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxNestingLevel(
      /**
       * New value for property `maxNestingLevel`
       */
      iMaxNestingLevel?: int
    ): this;
    /**
     * Reflector for the internal header's selectedKey property.
     */
    setSelectedKey(
      /**
       * The new value.
       */
      sValue: string
    ): this;
    /**
     * @SINCE 1.42
     * @deprecated (since 1.77)
     *
     * Sets a new value for property {@link #getShowOverflowSelectList showOverflowSelectList}.
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowOverflowSelectList(
      /**
       * New value for property `showOverflowSelectList`
       */
      bShowOverflowSelectList?: boolean
    ): this;
    /**
     * Reflector for the internal header's showSelection property.
     */
    setShowSelection(
      /**
       * the new value.
       */
      bValue: boolean
    ): this;
    /**
     * @SINCE 1.26
     *
     * Sets a new value for property {@link #getStretchContentHeight stretchContentHeight}.
     *
     * Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container.
     * As a prerequisite, the height of the parent container must be defined as a fixed value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStretchContentHeight(
      /**
       * New value for property `stretchContentHeight`
       */
      bStretchContentHeight?: boolean
    ): this;
    /**
     * Sets the tab density mode.
     */
    setTabDensityMode(
      /**
       * New parameter value.
       */
      mode: IconTabHeaderMode | keyof typeof IconTabHeaderMode
    ): this;
    /**
     * @SINCE 1.90
     *
     * Sets a new value for property {@link #getTabsOverflowMode tabsOverflowMode}.
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * two overflow tabs on both ends of the bar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `End`.
     */
    setTabsOverflowMode(
      /**
       * New value for property `tabsOverflowMode`
       */
      sTabsOverflowMode?: TabsOverflowMode | keyof typeof TabsOverflowMode
    ): this;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getUpperCase upperCase}.
     *
     * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUpperCase(
      /**
       * New value for property `upperCase`
       */
      bUpperCase?: boolean
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.m.IconTabBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabBar` itself.
     *
     * Indicates that the tab will expand or collapse.
     */
    attachExpand(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabBar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.IconTabBar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabBar` itself.
     *
     * Fires when an item is selected.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabBar` itself
       */
      oListener?: object
    ): this;
  }

  export interface $IconTabBarSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.15.0) - Regarding to changes of this control this property is not needed anymore.
     *
     * Defines whether the current selection should be visualized.
     */
    showSelection?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Defines if the tabs are collapsible and expandable.
     */
    expandable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Indicates if the actual tab content is expanded or not.
     */
    expanded?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Key of the selected tab item.
     *
     * If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the
     * first item matching the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
     */
    upperCase?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26
     *
     * Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container.
     * As a prerequisite, the height of the parent container must be defined as a fixed value.
     */
    stretchContentHeight?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26
     *
     * Determines whether the IconTabBar content fits to the full area. The paddings are removed if it's set
     * to false.
     */
    applyContentPadding?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26
     *
     * Specifies the background color of the IconTabBar.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". Default is "Solid".
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Specifies the header mode. **Note:** The Inline mode works only if no icons are set.
     */
    headerMode?:
      | (IconTabHeaderMode | keyof typeof IconTabHeaderMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.42
     * @deprecated (since 1.77)
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     */
    showOverflowSelectList?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Specifies the background color of the header.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". **Note:** In SAP Belize Deep (sap_belize_plus) theme this property should be set to "Solid".
     */
    headerBackgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Specifies whether tab reordering is enabled. Relevant only for desktop devices. The {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator} cannot be dragged and dropped Items can be moved around {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator}
     */
    enableTabReordering?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.79
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     */
    maxNestingLevel?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Specifies the visual density mode of the tabs.
     *
     * The values that can be applied are `Cozy`, `Compact` and `Inherit`. `Cozy` and `Compact` render the control
     * in one of these modes independent of the global density settings. The `Inherit` value follows the global
     * density settings which are applied. For compatibility reasons, the default value is `Cozy`.
     */
    tabDensityMode?:
      | (IconTabDensityMode | keyof typeof IconTabDensityMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.78
     *
     * Specifies optional texts for the screen reader.
     *
     * The given object can contain the following keys: `headerLabel` - text to serve as a label for the header,
     * `headerDescription` - text to serve as a description for the header.
     */
    ariaTexts?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.90
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * two overflow tabs on both ends of the bar.
     */
    tabsOverflowMode?:
      | (TabsOverflowMode | keyof typeof TabsOverflowMode)
      | PropertyBindingInfo;

    /**
     * The items displayed in the IconTabBar.
     */
    items?: IconTab[] | IconTab | AggregationBindingInfo;

    /**
     * Represents the contents displayed below the IconTabBar. If there are multiple contents, they are rendered
     * after each other. The developer has to manage to display the right one or use the content aggregation
     * inside the IconTabFilter (which will be displayed instead if it is set).
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Fires when an item is selected.
     */
    select?: Function;

    /**
     * @SINCE 1.15.0
     *
     * Indicates that the tab will expand or collapse.
     */
    expand?: Function;
  }
}

declare module "sap/m/IconTabFilter" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import { IconTab, IBadge, IconTabFilterDesign } from "sap/m/library";

  import { PopupInterface, URI, IconColor } from "sap/ui/core/library";

  import Control from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import RenderManager from "sap/ui/core/RenderManager";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Represents a selectable item inside an IconTabBar.
   */
  export default class IconTabFilter
    extends Item
    implements IconTab, PopupInterface, IBadge {
    __implements__sap_m_IconTab: boolean;
    __implements__sap_ui_core_PopupInterface: boolean;
    __implements__sap_m_IBadge: boolean;
    /**
     * Constructor for a new IconTabFilter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabFilterSettings
    );
    /**
     * Constructor for a new IconTabFilter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabFilterSettings
    );

    /**
     * @SINCE 1.15.0
     *
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IconTab
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Creates a new subclass of class sap.m.IconTabFilter with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IconTabFilter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.15.0
     *
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content displayed for this item (optional).
     *
     * If this content is set, it is displayed instead of the general content inside the IconTabBar.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getCount count}.
     *
     * Represents the "count" text, which is displayed in the tab filter.
     *
     * Default value is `empty string`.
     */
    getCount(): string;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Specifies whether the icon and the texts are placed vertically or horizontally.
     *
     * Default value is `Vertical`.
     */
    getDesign(): IconTabFilterDesign | keyof typeof IconTabFilterDesign;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Specifies the icon to be displayed for the tab filter.
     *
     * Default value is `empty string`.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconColor iconColor}.
     *
     * Specifies the icon color.
     *
     * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor). Possible
     * semantic colors are: Neutral, Positive, Critical, Negative. Instead of the semantic icon color the brand
     * color can be used, this is named Default. Semantic colors and brand colors should not be mixed up inside
     * one IconTabBar.
     *
     * Default value is `Default`.
     */
    getIconColor(): IconColor | keyof typeof IconColor;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Gets content of aggregation {@link #getItems items}.
     *
     * The sub items of this filter (optional).
     */
    getItems(): IconTab[];
    /**
     * Returns a metadata object for class sap.m.IconTabFilter.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowAll showAll}.
     *
     * Enables special visualization for disabled filter (show all items). **Note:** You can use this property
     * when you use `IconTabBar` as a filter. In order for it to be displayed correctly, the other tabs in the
     * filter should consist of an icon, text and an optional count. It can be set to true for the first tab
     * filter. You can find more detailed information in the {@link https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters
     * UX Guidelines}.
     *
     * Default value is `false`.
     */
    getShowAll(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies whether the tab filter is rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * @SINCE 1.15.0
     *
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Checks for the provided `sap.m.IconTab` in the aggregation {@link #getItems items}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IconTab
    ): int;
    /**
     * @SINCE 1.15.0
     *
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IconTab,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IconTab[];
    /**
     * @SINCE 1.15.0
     *
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IconTab
    ): IconTab;
    /**
     * Renders this item in the IconTabHeader.
     */
    render(
      /**
       * the RenderManager that can be used for writing to the render output buffer
       */
      oRM: RenderManager,
      /**
       * the visible index within the parent control
       */
      iVisibleIndex: int,
      /**
       * the visible items count
       */
      iVisibleItemsCount: int
    ): void;
    /**
     * Renders this item in the IconTabSelectList.
     */
    renderInSelectList(
      /**
       * RenderManager used for writing to the render output buffer
       */
      oRM: RenderManager,
      /**
       * the select list in which this filter is rendered
       */
      oSelectList: any,
      /**
       * this item's index within the aggregation of items
       */
      iIndexInSet: int,
      /**
       * total length of the aggregation of items
       */
      iSetSize: int,
      /**
       * the padding with which the item should be indented
       */
      fPaddingValue: float
    ): void;
    /**
     * Sets a new value for property {@link #getCount count}.
     *
     * Represents the "count" text, which is displayed in the tab filter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setCount(
      /**
       * New value for property `count`
       */
      sCount?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Specifies whether the icon and the texts are placed vertically or horizontally.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Vertical`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: IconTabFilterDesign | keyof typeof IconTabFilterDesign
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Specifies the icon to be displayed for the tab filter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconColor iconColor}.
     *
     * Specifies the icon color.
     *
     * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor). Possible
     * semantic colors are: Neutral, Positive, Critical, Negative. Instead of the semantic icon color the brand
     * color can be used, this is named Default. Semantic colors and brand colors should not be mixed up inside
     * one IconTabBar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setIconColor(
      /**
       * New value for property `iconColor`
       */
      sIconColor?: IconColor | keyof typeof IconColor
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowAll showAll}.
     *
     * Enables special visualization for disabled filter (show all items). **Note:** You can use this property
     * when you use `IconTabBar` as a filter. In order for it to be displayed correctly, the other tabs in the
     * filter should consist of an icon, text and an optional count. It can be set to true for the first tab
     * filter. You can find more detailed information in the {@link https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters
     * UX Guidelines}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowAll(
      /**
       * New value for property `showAll`
       */
      bShowAll?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies whether the tab filter is rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $IconTabFilterSettings extends $ItemSettings {
    /**
     * Represents the "count" text, which is displayed in the tab filter.
     */
    count?: string | PropertyBindingInfo;

    /**
     * Enables special visualization for disabled filter (show all items). **Note:** You can use this property
     * when you use `IconTabBar` as a filter. In order for it to be displayed correctly, the other tabs in the
     * filter should consist of an icon, text and an optional count. It can be set to true for the first tab
     * filter. You can find more detailed information in the {@link https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters
     * UX Guidelines}.
     */
    showAll?: boolean | PropertyBindingInfo;

    /**
     * Specifies the icon to be displayed for the tab filter.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Specifies the icon color.
     *
     * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor). Possible
     * semantic colors are: Neutral, Positive, Critical, Negative. Instead of the semantic icon color the brand
     * color can be used, this is named Default. Semantic colors and brand colors should not be mixed up inside
     * one IconTabBar.
     */
    iconColor?: (IconColor | keyof typeof IconColor) | PropertyBindingInfo;

    /**
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Specifies whether the tab filter is rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Specifies whether the icon and the texts are placed vertically or horizontally.
     */
    design?:
      | (IconTabFilterDesign | keyof typeof IconTabFilterDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * The content displayed for this item (optional).
     *
     * If this content is set, it is displayed instead of the general content inside the IconTabBar.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.77
     * @EXPERIMENTAL (since 1.77)
     *
     * The sub items of this filter (optional).
     */
    items?: IconTab[] | IconTab | AggregationBindingInfo;
  }
}

declare module "sap/m/IconTabHeader" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IconTab,
    BackgroundDesign,
    IconTabHeaderMode,
    IconTabDensityMode,
    TabsOverflowMode,
  } from "sap/m/library";

  import IconTabFilter from "sap/m/IconTabFilter";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.15
   *
   * This control displays a number of IconTabFilters and IconTabSeparators. If the available horizontal space
   * is exceeded, an overflow tab appears.
   *
   * Usage: Use `IconTabHeader` if you need it as a standalone header. If you need to manage content use {@link
   * sap.m.IconTabBar} instead.
   */
  export default class IconTabHeader extends Control {
    /**
     * Constructor for a new IconTabHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabHeaderSettings
    );
    /**
     * Constructor for a new IconTabHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabHeaderSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: IconTab
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.IconTabHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabHeader` itself.
     *
     * Fires when an item is selected.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.IconTabHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.IconTabHeader with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IconTabHeader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item
         */
        item?: IconTabFilter;
        /**
         * The key of the selected item
         */
        key?: string;
      }
    ): this;
    /**
     * @SINCE 1.80
     *
     * Gets current value of property {@link #getAriaTexts ariaTexts}.
     *
     * Specifies optional texts for the screen reader.
     *
     * The given object can contain the following keys: `headerLabel` - text to serve as a label for the header,
     * `headerDescription` - text to serve as a description for the header.
     */
    getAriaTexts(): object;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the header.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". **Note:** In SAP Belize Deep (sap_belize_plus) theme this property should be set to "Solid".
     *
     * Default value is `Solid`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getEnableTabReordering enableTabReordering}.
     *
     * Specifies whether tab reordering is enabled. Relevant only for desktop devices. The {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator} cannot be dragged and dropped Items can be moved around {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator}
     *
     * Default value is `false`.
     */
    getEnableTabReordering(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items displayed in the IconTabHeader.
     */
    getItems(): IconTab[];
    /**
     * @SINCE 1.79
     *
     * Gets current value of property {@link #getMaxNestingLevel maxNestingLevel}.
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     *
     * Default value is `0`.
     */
    getMaxNestingLevel(): int;
    /**
     * Returns a metadata object for class sap.m.IconTabHeader.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getMode mode}.
     *
     * Specifies the header mode. **Note:** The Inline mode works only if no icons are set.
     *
     * Default value is `Standard`.
     */
    getMode(): IconTabHeaderMode | keyof typeof IconTabHeaderMode;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Key of the selected item.
     *
     * If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the
     * first item matching, the key is used.
     */
    getSelectedKey(): string;
    /**
     * @deprecated (since 1.75)
     *
     * Gets current value of property {@link #getShowOverflowSelectList showOverflowSelectList}.
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     *
     * Default value is `false`.
     */
    getShowOverflowSelectList(): boolean;
    /**
     * @deprecated (since 1.15.0) - Regarding to changes of this control this property is not needed anymore.
     *
     * Gets current value of property {@link #getShowSelection showSelection}.
     *
     * Defines whether the current selection is visualized.
     *
     * Default value is `true`.
     */
    getShowSelection(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getTabDensityMode tabDensityMode}.
     *
     * Specifies the visual density mode of the tabs.
     *
     * The values that can be applied are `Cozy`, `Compact` and `Inherit`. `Cozy` and `Compact` render the control
     * in one of these modes independent of the global density settings. The `Inherit` value follows the global
     * density settings which are applied. For compatibility reasons, the default value is `Cozy`.
     *
     * Default value is `Cozy`.
     */
    getTabDensityMode(): IconTabDensityMode | keyof typeof IconTabDensityMode;
    /**
     * @SINCE 1.90
     *
     * Gets current value of property {@link #getTabsOverflowMode tabsOverflowMode}.
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * overflow tabs on both ends of the bar.
     *
     * Default value is `End`.
     */
    getTabsOverflowMode(): TabsOverflowMode | keyof typeof TabsOverflowMode;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies whether the control is rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Checks for the provided `sap.m.IconTab` in the aggregation {@link #getItems items}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: IconTab
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: IconTab,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): IconTab[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | IconTab
    ): IconTab;
    /**
     * @SINCE 1.80
     *
     * Sets a new value for property {@link #getAriaTexts ariaTexts}.
     *
     * Specifies optional texts for the screen reader.
     *
     * The given object can contain the following keys: `headerLabel` - text to serve as a label for the header,
     * `headerDescription` - text to serve as a description for the header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaTexts(
      /**
       * New value for property `ariaTexts`
       */
      oAriaTexts?: object
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Specifies the background color of the header.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". **Note:** In SAP Belize Deep (sap_belize_plus) theme this property should be set to "Solid".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Solid`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * @SINCE 1.46
     *
     * Sets a new value for property {@link #getEnableTabReordering enableTabReordering}.
     *
     * Specifies whether tab reordering is enabled. Relevant only for desktop devices. The {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator} cannot be dragged and dropped Items can be moved around {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableTabReordering(
      /**
       * New value for property `enableTabReordering`
       */
      bEnableTabReordering?: boolean
    ): this;
    /**
     * @SINCE 1.79
     *
     * Sets a new value for property {@link #getMaxNestingLevel maxNestingLevel}.
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxNestingLevel(
      /**
       * New value for property `maxNestingLevel`
       */
      iMaxNestingLevel?: int
    ): this;
    /**
     * @SINCE 1.40
     *
     * Sets a new value for property {@link #getMode mode}.
     *
     * Specifies the header mode. **Note:** The Inline mode works only if no icons are set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: IconTabHeaderMode | keyof typeof IconTabHeaderMode
    ): this;
    /**
     * Sets the selected item based on key.
     */
    setSelectedKey(
      /**
       * The key of the item to be selected
       */
      sKey: string
    ): this;
    /**
     * @deprecated (since 1.75)
     *
     * Sets a new value for property {@link #getShowOverflowSelectList showOverflowSelectList}.
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowOverflowSelectList(
      /**
       * New value for property `showOverflowSelectList`
       */
      bShowOverflowSelectList?: boolean
    ): this;
    /**
     * @deprecated (since 1.15.0) - Regarding to changes of this control this property is not needed anymore.
     *
     * Sets a new value for property {@link #getShowSelection showSelection}.
     *
     * Defines whether the current selection is visualized.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowSelection(
      /**
       * New value for property `showSelection`
       */
      bShowSelection?: boolean
    ): this;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getTabDensityMode tabDensityMode}.
     *
     * Specifies the visual density mode of the tabs.
     *
     * The values that can be applied are `Cozy`, `Compact` and `Inherit`. `Cozy` and `Compact` render the control
     * in one of these modes independent of the global density settings. The `Inherit` value follows the global
     * density settings which are applied. For compatibility reasons, the default value is `Cozy`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Cozy`.
     */
    setTabDensityMode(
      /**
       * New value for property `tabDensityMode`
       */
      sTabDensityMode?: IconTabDensityMode | keyof typeof IconTabDensityMode
    ): this;
    /**
     * @SINCE 1.90
     *
     * Sets a new value for property {@link #getTabsOverflowMode tabsOverflowMode}.
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * overflow tabs on both ends of the bar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `End`.
     */
    setTabsOverflowMode(
      /**
       * New value for property `tabsOverflowMode`
       */
      sTabsOverflowMode?: TabsOverflowMode | keyof typeof TabsOverflowMode
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies whether the control is rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.IconTabHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.IconTabHeader` itself.
     *
     * Fires when an item is selected.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.IconTabHeader` itself
       */
      oListener?: object
    ): this;
  }

  export interface $IconTabHeaderSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.15.0) - Regarding to changes of this control this property is not needed anymore.
     *
     * Defines whether the current selection is visualized.
     */
    showSelection?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Key of the selected item.
     *
     * If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the
     * first item matching, the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Specifies whether the control is rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Specifies the header mode. **Note:** The Inline mode works only if no icons are set.
     */
    mode?:
      | (IconTabHeaderMode | keyof typeof IconTabHeaderMode)
      | PropertyBindingInfo;

    /**
     * @deprecated (since 1.75)
     *
     * Specifies if the overflow select list is displayed.
     *
     * The overflow select list represents a list, where all tab filters are displayed, so the user can select
     * specific tab filter easier.
     */
    showOverflowSelectList?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Specifies the background color of the header.
     *
     * Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or
     * "Transparent". **Note:** In SAP Belize Deep (sap_belize_plus) theme this property should be set to "Solid".
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Specifies whether tab reordering is enabled. Relevant only for desktop devices. The {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator} cannot be dragged and dropped Items can be moved around {@link sap.m.IconTabSeparator
     * sap.m.IconTabSeparator}
     */
    enableTabReordering?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.79
     *
     * Specifies the allowed level of tabs nesting within one another using drag and drop. Default value is
     * 0 which means nesting via interaction is not allowed. Maximum value is 100. This property allows nesting
     * via user interaction only, and does not restrict adding items to the `items` aggregation of {@link sap.m.IconTabFilter
     * sap.m.IconTabFilter}.
     */
    maxNestingLevel?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Specifies the visual density mode of the tabs.
     *
     * The values that can be applied are `Cozy`, `Compact` and `Inherit`. `Cozy` and `Compact` render the control
     * in one of these modes independent of the global density settings. The `Inherit` value follows the global
     * density settings which are applied. For compatibility reasons, the default value is `Cozy`.
     */
    tabDensityMode?:
      | (IconTabDensityMode | keyof typeof IconTabDensityMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.80
     *
     * Specifies optional texts for the screen reader.
     *
     * The given object can contain the following keys: `headerLabel` - text to serve as a label for the header,
     * `headerDescription` - text to serve as a description for the header.
     */
    ariaTexts?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.90
     *
     * Specifies the overflow mode of the header.
     *
     * The default `End` mode shows as many tabs that can fit on the screen, then shows one overflow at the
     * end containing the remaining items. The `StartAndEnd` is used to keep the order of tabs intact and offers
     * overflow tabs on both ends of the bar.
     */
    tabsOverflowMode?:
      | (TabsOverflowMode | keyof typeof TabsOverflowMode)
      | PropertyBindingInfo;

    /**
     * The items displayed in the IconTabHeader.
     */
    items?: IconTab[] | IconTab | AggregationBindingInfo;

    /**
     * Fires when an item is selected.
     */
    select?: Function;
  }
}

declare module "sap/m/IconTabSeparator" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { IconTab } from "sap/m/library";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import RenderManager from "sap/ui/core/RenderManager";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Represents an Icon used to separate 2 tab filters.
   */
  export default class IconTabSeparator extends UI5Element implements IconTab {
    __implements__sap_m_IconTab: boolean;
    /**
     * Constructor for a new IconTabSeparator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabSeparatorSettings
    );
    /**
     * Constructor for a new IconTabSeparator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $IconTabSeparatorSettings
    );

    /**
     * Creates a new subclass of class sap.m.IconTabSeparator with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, IconTabSeparator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon to display for this separator. If no icon is given, a separator line is used instead.
     *
     * Default value is `empty string`.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Returns a metadata object for class sap.m.IconTabSeparator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies whether the separator is rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Renders the item in the IconTabHeader.
     */
    render(
      /**
       * the RenderManager that can be used for writing to the render output buffer
       */
      oRM: RenderManager
    ): void;
    /**
     * Renders this item in the IconTabSelectList.
     */
    renderInSelectList(
      /**
       * RenderManager used for writing to the render output buffer
       */
      oRM: RenderManager,
      /**
       * the select list in which this filter is rendered
       */
      oSelectList: any,
      /**
       * this item's index within the aggregation of items
       */
      iIndexInSet: int,
      /**
       * total length of the aggregation of items
       */
      iSetSize: int,
      /**
       * the padding with which the item should be indented
       */
      fPaddingValue: float
    ): void;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon to display for this separator. If no icon is given, a separator line is used instead.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies whether the separator is rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $IconTabSeparatorSettings extends $ElementSettings {
    /**
     * The icon to display for this separator. If no icon is given, a separator line is used instead.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Specifies whether the separator is rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * If set to true, it sends one or more requests, trying to get the density perfect version of the image
     * if this version of the image doesn't exist on the server. Default value is set to true.
     *
     * If bandwidth is key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/Image" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, URI, aria, CSSSize } from "sap/ui/core/library";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import LightBox from "sap/m/LightBox";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ImageMode } from "sap/m/library";

  /**
   * A wrapper around the <img> tag; the image can be loaded from a remote or local server.
   *
   * If property `densityAware` is true, a density-specific image will be loaded by constructing a density-specific
   * image name in format `[imageName]@[densityValue].[extension]` from the given `src` and the `devicePixelRatio`
   * of the current device. The only supported density values are 1, 1.5 and 2. If the original `devicePixelRatio`
   * ratio isn't one of the three valid numbers, it will be rounded to the nearest one.
   *
   * There are various size setting options available, and the images can be combined with actions.
   *
   * From version 1.30, a new image mode {@link sap.m.ImageMode.Background} is added. When this mode is set,
   * the `src` property is set using the CSS style `background-image`. The properties `backgroundSize`, `backgroundPosition`,
   * and `backgroundRepeat` take effect only when the image is in `sap.m.ImageMode.Background` mode. In order
   * to display the high density image correctly, the `backgroundSize` should be set to the dimension of the
   * normal density version.
   */
  export default class Image extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new Image.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:f86dbe9d7f7d48dea5286003b1322165 Image}
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/image/ Image}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ImageSettings
    );
    /**
     * Constructor for a new Image.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:f86dbe9d7f7d48dea5286003b1322165 Image}
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/image/ Image}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ImageSettings
    );

    /**
     * Checks if the given value is valid for the `background-position` CSS property
     */
    _isValidBackgroundPositionValue(
      /**
       * the value to check
       */
      sValue: string
    ): boolean;
    /**
     * Checks if the given value is valid for the `background-size` CSS property
     */
    _isValidBackgroundSizeValue(
      /**
       * the value to check
       */
      sValue: string
    ): boolean;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * @SINCE 1.79
     *
     * Adds some ariaDetails into the association {@link #getAriaDetails ariaDetails}.
     */
    addAriaDetails(
      /**
       * The ariaDetails to add; if empty, nothing is inserted
       */
      vAriaDetails: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.36.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is
     * fired when none of the fallback resources can be loaded.
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:load load} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the image resource is loaded.
     */
    attachLoad(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the user clicks on the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
     */
    attachTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getDetailBox detailBox} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindDetailBox(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys the detailBox in the aggregation {@link #getDetailBox detailBox}.
     */
    destroyDetailBox(): this;
    /**
     * @SINCE 1.36.2
     *
     * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.m.Image`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.2
     *
     * Detaches event handler `fnFunction` from the {@link #event:load load} event of this `sap.m.Image`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoad(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Image`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tap tap} event of this `sap.m.Image`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Image with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Image>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.36.2
     *
     * Fires event {@link #event:error error} to attached listeners.
     */
    fireError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.36.2
     *
     * Fires event {@link #event:load load} to attached listeners.
     */
    fireLoad(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:tap tap} to attached listeners.
     */
    fireTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns the `sap.m.Image` accessibility information.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Gets current value of property {@link #getActiveSrc activeSrc}.
     *
     * The source property which is used when the image is pressed.
     *
     * Default value is `empty string`.
     */
    getActiveSrc(): URI;
    /**
     * Gets current value of property {@link #getAlt alt}.
     *
     * The alternative text that is displayed in case the image is not available, or cannot be displayed.
     *
     * If the image is set to decorative, this property is ignored.
     */
    getAlt(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.79
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDetails
     * ariaDetails}.
     */
    getAriaDetails(): ID[];
    /**
     * @SINCE 1.87.0
     *
     * Gets current value of property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Defines the aria-haspopup attribute of the `Image`.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend you to use the property only when press handler is set.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     *
     * Default value is `None`.
     */
    getAriaHasPopup(): aria.HasPopup | keyof typeof aria.HasPopup;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getBackgroundPosition backgroundPosition}.
     *
     * Defines the position of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-position`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * Default value is `"initial"`.
     */
    getBackgroundPosition(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Defines whether the source image is repeated when the output DOM element is bigger than the source.
     *
     * This property is set on the output DOM element using the CSS style `background-repeat`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * Default value is `"no-repeat"`.
     */
    getBackgroundRepeat(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getBackgroundSize backgroundSize}.
     *
     * Defines the size of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-size`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * Default value is `"cover"`.
     */
    getBackgroundSize(): string;
    /**
     * Gets current value of property {@link #getDecorative decorative}.
     *
     * A decorative image is included for design reasons; accessibility tools will ignore decorative images.
     *
     * Note: If the image has an image map (`useMap` is set), this property will be overridden (the image will
     * not be rendered as decorative). A decorative image has no `ALT` attribute, so the `alt` property is ignored
     * if the image is decorative.
     *
     * Default value is `true`.
     */
    getDecorative(): boolean;
    /**
     * Gets current value of property {@link #getDensityAware densityAware}.
     *
     * If this is set to `true`, one or more network requests will be made that try to obtain the density perfect
     * version of the image.
     *
     * By default, this is set to `false`, so the `src` image is loaded directly without attempting to fetch
     * the density perfect image for high-density devices.
     *
     * **Note:** Before 1.60, the default value was set to `true`, which brought redundant network requests
     * for apps that used the default but did not provide density perfect image versions on server-side. You
     * should set this property to `true` only if you also provide the corresponding image versions for high-density
     * devices.
     *
     * Default value is `false`.
     */
    getDensityAware(): boolean;
    /**
     * Gets content of aggregation {@link #getDetailBox detailBox}.
     *
     * A `sap.m.LightBox` instance that will be opened automatically when the user interacts with the `Image`
     * control.
     *
     * The `tap` event will still be fired.
     */
    getDetailBox(): LightBox;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     */
    getHeight(): CSSSize;
    /**
     * @SINCE 1.87
     *
     * Gets current value of property {@link #getLazyLoading lazyLoading}.
     *
     * Enables lazy loading for images that are offscreen. If set to `true`, the property ensures that offscreen
     * images are loaded early enough so that they have finished loading once the user scrolls near them.
     *
     * **Note:** Keep in mind that the property uses the loading attribute of HTML `<img>` element which
     * is not supported for Internet Explorer.
     *
     * Default value is `false`.
     */
    getLazyLoading(): boolean;
    /**
     * Returns a metadata object for class sap.m.Image.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines how the `src` and the `activeSrc` is output to the DOM Element.
     *
     * When set to `sap.m.ImageMode.Image`, which is the default value, the `src` (`activeSrc`) is set to the
     * `src` attribute of the <img> tag. When set to `sap.m.ImageMode.Background`, the `src` (`activeSrc`)
     * is set to the CSS style `background-image` and the root DOM element is rendered as a <span> tag
     * instead of an <img> tag.
     *
     * Default value is `"Image"`.
     */
    getMode(): ImageMode | keyof typeof ImageMode;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * Relative or absolute path to URL where the image file is stored.
     *
     * The path will be adapted to the density-aware format according to the density of the device following
     * the naming convention [imageName]@[densityValue].[extension].
     */
    getSrc(): URI;
    /**
     * Gets current value of property {@link #getUseMap useMap}.
     *
     * The name of the image map that defines the clickable areas.
     */
    getUseMap(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     */
    getWidth(): CSSSize;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.79
     *
     * Removes all the controls in the association named {@link #getAriaDetails ariaDetails}.
     */
    removeAllAriaDetails(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.79
     *
     * Removes an ariaDetails from the association named {@link #getAriaDetails ariaDetails}.
     */
    removeAriaDetails(
      /**
       * The ariaDetails to be removed or its index or ID
       */
      vAriaDetails: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveSrc activeSrc}.
     *
     * The source property which is used when the image is pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setActiveSrc(
      /**
       * New value for property `activeSrc`
       */
      sActiveSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getAlt alt}.
     *
     * The alternative text that is displayed in case the image is not available, or cannot be displayed.
     *
     * If the image is set to decorative, this property is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAlt(
      /**
       * New value for property `alt`
       */
      sAlt?: string
    ): this;
    /**
     * @SINCE 1.87.0
     *
     * Sets a new value for property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Defines the aria-haspopup attribute of the `Image`.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend you to use the property only when press handler is set.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAriaHasPopup(
      /**
       * New value for property `ariaHasPopup`
       */
      sAriaHasPopup?: aria.HasPopup | keyof typeof aria.HasPopup
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getBackgroundPosition backgroundPosition}.
     *
     * Defines the position of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-position`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"initial"`.
     */
    setBackgroundPosition(
      /**
       * New value for property `backgroundPosition`
       */
      sBackgroundPosition?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Defines whether the source image is repeated when the output DOM element is bigger than the source.
     *
     * This property is set on the output DOM element using the CSS style `background-repeat`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"no-repeat"`.
     */
    setBackgroundRepeat(
      /**
       * New value for property `backgroundRepeat`
       */
      sBackgroundRepeat?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getBackgroundSize backgroundSize}.
     *
     * Defines the size of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-size`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"cover"`.
     */
    setBackgroundSize(
      /**
       * New value for property `backgroundSize`
       */
      sBackgroundSize?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDecorative decorative}.
     *
     * A decorative image is included for design reasons; accessibility tools will ignore decorative images.
     *
     * Note: If the image has an image map (`useMap` is set), this property will be overridden (the image will
     * not be rendered as decorative). A decorative image has no `ALT` attribute, so the `alt` property is ignored
     * if the image is decorative.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setDecorative(
      /**
       * New value for property `decorative`
       */
      bDecorative?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDensityAware densityAware}.
     *
     * If this is set to `true`, one or more network requests will be made that try to obtain the density perfect
     * version of the image.
     *
     * By default, this is set to `false`, so the `src` image is loaded directly without attempting to fetch
     * the density perfect image for high-density devices.
     *
     * **Note:** Before 1.60, the default value was set to `true`, which brought redundant network requests
     * for apps that used the default but did not provide density perfect image versions on server-side. You
     * should set this property to `true` only if you also provide the corresponding image versions for high-density
     * devices.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDensityAware(
      /**
       * New value for property `densityAware`
       */
      bDensityAware?: boolean
    ): this;
    /**
     * Sets the `detailBox` aggregation.
     */
    setDetailBox(
      /**
       * Instance of the `LightBox` control or undefined
       */
      oLightBox: LightBox | undefined
    ): object;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.87
     *
     * Sets a new value for property {@link #getLazyLoading lazyLoading}.
     *
     * Enables lazy loading for images that are offscreen. If set to `true`, the property ensures that offscreen
     * images are loaded early enough so that they have finished loading once the user scrolls near them.
     *
     * **Note:** Keep in mind that the property uses the loading attribute of HTML `<img>` element which
     * is not supported for Internet Explorer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setLazyLoading(
      /**
       * New value for property `lazyLoading`
       */
      bLazyLoading?: boolean
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines how the `src` and the `activeSrc` is output to the DOM Element.
     *
     * When set to `sap.m.ImageMode.Image`, which is the default value, the `src` (`activeSrc`) is set to the
     * `src` attribute of the <img> tag. When set to `sap.m.ImageMode.Background`, the `src` (`activeSrc`)
     * is set to the CSS style `background-image` and the root DOM element is rendered as a <span> tag
     * instead of an <img> tag.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Image"`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ImageMode | keyof typeof ImageMode
    ): this;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * Relative or absolute path to URL where the image file is stored.
     *
     * The path will be adapted to the density-aware format according to the density of the device following
     * the naming convention [imageName]@[densityValue].[extension].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSrc(
      /**
       * New value for property `src`
       */
      sSrc?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getUseMap useMap}.
     *
     * The name of the image map that defines the clickable areas.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUseMap(
      /**
       * New value for property `useMap`
       */
      sUseMap?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds aggregation {@link #getDetailBox detailBox} from model data.
     */
    unbindDetailBox(): this;
    /**
     * @SINCE 1.36.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is
     * fired when none of the fallback resources can be loaded.
     */
    attachError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:load load} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the image resource is loaded.
     */
    attachLoad(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the user clicks on the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.Image`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Image` itself.
     *
     * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
     */
    attachTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Image` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ImageSettings extends $ControlSettings {
    /**
     * Relative or absolute path to URL where the image file is stored.
     *
     * The path will be adapted to the density-aware format according to the density of the device following
     * the naming convention [imageName]@[densityValue].[extension].
     */
    src?: URI | PropertyBindingInfo;

    /**
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * When the empty value is kept, the original size is not changed.
     *
     * It is also possible to make settings for width or height only, in which case the original ratio between
     * width/height is maintained. When the `mode` property is set to `sap.m.ImageMode.Background`, this property
     * always needs to be set. Otherwise the output DOM element has a 0 size.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * A decorative image is included for design reasons; accessibility tools will ignore decorative images.
     *
     * Note: If the image has an image map (`useMap` is set), this property will be overridden (the image will
     * not be rendered as decorative). A decorative image has no `ALT` attribute, so the `alt` property is ignored
     * if the image is decorative.
     */
    decorative?: boolean | PropertyBindingInfo;

    /**
     * The alternative text that is displayed in case the image is not available, or cannot be displayed.
     *
     * If the image is set to decorative, this property is ignored.
     */
    alt?: string | PropertyBindingInfo;

    /**
     * The name of the image map that defines the clickable areas.
     */
    useMap?: string | PropertyBindingInfo;

    /**
     * If this is set to `true`, one or more network requests will be made that try to obtain the density perfect
     * version of the image.
     *
     * By default, this is set to `false`, so the `src` image is loaded directly without attempting to fetch
     * the density perfect image for high-density devices.
     *
     * **Note:** Before 1.60, the default value was set to `true`, which brought redundant network requests
     * for apps that used the default but did not provide density perfect image versions on server-side. You
     * should set this property to `true` only if you also provide the corresponding image versions for high-density
     * devices.
     */
    densityAware?: boolean | PropertyBindingInfo;

    /**
     * The source property which is used when the image is pressed.
     */
    activeSrc?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Defines how the `src` and the `activeSrc` is output to the DOM Element.
     *
     * When set to `sap.m.ImageMode.Image`, which is the default value, the `src` (`activeSrc`) is set to the
     * `src` attribute of the <img> tag. When set to `sap.m.ImageMode.Background`, the `src` (`activeSrc`)
     * is set to the CSS style `background-image` and the root DOM element is rendered as a <span> tag
     * instead of an <img> tag.
     */
    mode?: (ImageMode | keyof typeof ImageMode) | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Defines the size of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-size`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     */
    backgroundSize?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Defines the position of the image in `sap.m.ImageMode.Background` mode.
     *
     * This property is set on the output DOM element using the CSS style `background-position`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     */
    backgroundPosition?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Defines whether the source image is repeated when the output DOM element is bigger than the source.
     *
     * This property is set on the output DOM element using the CSS style `background-repeat`. It takes effect
     * only when the `mode` property is set to `sap.m.ImageMode.Background`.
     */
    backgroundRepeat?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.87
     *
     * Enables lazy loading for images that are offscreen. If set to `true`, the property ensures that offscreen
     * images are loaded early enough so that they have finished loading once the user scrolls near them.
     *
     * **Note:** Keep in mind that the property uses the loading attribute of HTML `<img>` element which
     * is not supported for Internet Explorer.
     */
    lazyLoading?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.87.0
     *
     * Defines the aria-haspopup attribute of the `Image`.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend you to use the property only when press handler is set.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     */
    ariaHasPopup?:
      | (aria.HasPopup | keyof typeof aria.HasPopup)
      | PropertyBindingInfo;

    /**
     * A `sap.m.LightBox` instance that will be opened automatically when the user interacts with the `Image`
     * control.
     *
     * The `tap` event will still be fired.
     */
    detailBox?: LightBox;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledBy).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @SINCE 1.79
     *
     * Association to controls / IDs which are details to this control (see WAI-ARIA attribute aria-details).
     */
    ariaDetails?: Array<Control | string>;

    /**
     * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
     */
    tap?: Function;

    /**
     * Event is fired when the user clicks on the control.
     */
    press?: Function;

    /**
     * @SINCE 1.36.2
     *
     * Event is fired when the image resource is loaded.
     */
    load?: Function;

    /**
     * @SINCE 1.36.2
     *
     * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is
     * fired when none of the fallback resources can be loaded.
     */
    error?: Function;
  }
}

declare module "sap/m/ImageContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { URI } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38
   *
   * This control can be used to display image content in a GenericTile.
   */
  export default class ImageContent extends Control {
    /**
     * Constructor for a new sap.m.ImageContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageContentSettings
    );
    /**
     * Constructor for a new sap.m.ImageContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ImageContentSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ImageContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ImageContent` itself.
     *
     * The event is triggered when the image content is pressed.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ImageContent` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ImageContent`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ImageContent with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ImageContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Description of image. This text is used to provide ScreenReader information.
     */
    getDescription(): string;
    /**
     * Returns a metadata object for class sap.m.ImageContent.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSrc src}.
     *
     * The image to be displayed as a graphical element within the imageContent. This can be an image or an
     * icon from the icon font.
     */
    getSrc(): URI;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Description of image. This text is used to provide ScreenReader information.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSrc src}.
     *
     * The image to be displayed as a graphical element within the imageContent. This can be an image or an
     * icon from the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSrc(
      /**
       * New value for property `src`
       */
      sSrc?: URI
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ImageContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ImageContent` itself.
     *
     * The event is triggered when the image content is pressed.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ImageContent` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ImageContentSettings extends $ControlSettings {
    /**
     * The image to be displayed as a graphical element within the imageContent. This can be an image or an
     * icon from the icon font.
     */
    src?: URI | PropertyBindingInfo;

    /**
     * Description of image. This text is used to provide ScreenReader information.
     */
    description?: string | PropertyBindingInfo;

    /**
     * The event is triggered when the image content is pressed.
     */
    press?: Function;
  }
}

declare module "sap/m/Input" {
  import { default as InputBase, $InputBaseSettings } from "sap/m/InputBase";

  import Column from "sap/m/Column";

  import Item from "sap/ui/core/Item";

  import ColumnListItem from "sap/m/ColumnListItem";

  import GroupHeaderListItem from "sap/m/GroupHeaderListItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ListBase from "sap/m/ListBase";

  import { CSSSize, ID, URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { InputTextFormatMode, InputType } from "sap/m/library";

  /**
   * Allows the user to enter and edit text or numeric values in one line.
   *
   * Overview:
   *
   * You can enable the autocomplete suggestion feature and the value help option to easily enter a valid
   * value.
   *
   * Guidelines:
   *
   *
   * 	 -  Always provide a meaningful label for any input field
   * 	 -  Limit the length of the input field. This will visually emphasize the constraints for the field.
   *
   * 	 -  Do not use the `placeholder` property as a label.
   * 	 -  Use the `description` property only for small fields with no placeholders (i.e. for currencies).
   *
   *
   * Structure:
   *
   * The controls inherits from {@link sap.m.InputBase} which controls the core properties like:
   * 	 -  editable / read-only
   * 	 -  enabled / disabled
   * 	 -  placeholder
   * 	 -  text direction
   * 	 -  value states  To aid the user during input, you can enable value help (`showValueHelp`) or
   * 			autocomplete (`showSuggestion`). **Value help** will open a new dialog where you can refine your input.
   * 			**Autocomplete** has three types of suggestions:
   * 	 -  Single value - a list of suggestions of type `sap.ui.core.Item` or `sap.ui.core.ListItem`
   * 	 -  Two values - a list of two suggestions (ID and description) of type `sap.ui.core.Item` or `sap.ui.core.ListItem`
   *
   * 	 -  Tabular suggestions of type `sap.m.ColumnListItem`   The suggestions are stored in two aggregations
   * 			`suggestionItems` (for single and double values) and `suggestionRows` (for tabular values).
   *
   * Usage:
   *
   * **When to use:** Use the control for short inputs like emails, phones, passwords, fields for assisted
   * value selection.
   *
   * **When not to use:** Don't use the control for long texts, dates, designated search fields, fields for
   * multiple selection.
   *
   * Known Restrictions:
   *
   * If `showValueHelp` or if `showSuggestion` is `true`, the native browser autofill will not fire a change
   * event.
   *
   * Note:: The control has the following behavior regarding the `selectedKey` and `value` properties:
   *
   * 	 -  On initial loading, if the control has a `selectedKey` set which corresponds to a matching item,
   * 			and a set `value`, the `value` will be updated to the matching item's text.
   * 	 -  If a `selectedKey` is set and the user types an input which corresponds to an item's text, the `selectedKey`
   * 			will be updated with the matching item's key.
   * 	 -  If a `selectedKey` is set and the user types an input which does not correspond to any item's text,
   * 			the `selectedKey` will be set to an empty string ("")
   * 	 -  If a `selectedKey` is set and the user selects an item, the `selectedKey` will be updated to match
   * 			the selected item's key.
   * 	 -  If a `selectedKey` is bound and the user types before the data is loaded, the user's input will
   * 			be overwritten by the binding update.
   */
  export default class Input extends InputBase {
    /**
     * Constructor for a new `Input`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/input-field/ Input}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputSettings
    );
    /**
     * Constructor for a new `Input`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/input-field/ Input}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputSettings
    );

    /**
     * @SINCE 1.21.1
     *
     * Adds some suggestionColumn to the aggregation {@link #getSuggestionColumns suggestionColumns}.
     */
    addSuggestionColumn(
      /**
       * The suggestionColumn to add; if empty, nothing is inserted
       */
      oSuggestionColumn: Column
    ): this;
    /**
     * Adds suggestion item.
     */
    addSuggestionItem(
      /**
       * Suggestion item.
       */
      oItem: Item
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Adds some suggestionRow to the aggregation {@link #getSuggestionRows suggestionRows}.
     */
    addSuggestionRow(
      /**
       * The suggestionRow to add; if empty, nothing is inserted
       */
      vSuggestionRow: ColumnListItem | GroupHeaderListItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * Fired when the value of the input is changed by user interaction - each keystroke, delete, paste, etc.
     *
     * **Note:** Browsing autocomplete suggestions does not fires the event.
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.33.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when user presses the Enter key on the input.
     *
     * **Notes:**
     * 	 - The event is fired independent of whether there was a change before or not. If a change was performed,
     * 			the event is fired after the change event.
     * 	 - The event is also fired when an item of the select list is selected via Enter.
     * 	 - The event is only fired on an input which allows text input (`editable`, `enabled` and not `valueHelpOnly`).
     */
    attachSubmit(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems
     * aggregation will show the suggestions within a popup.
     */
    attachSuggest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
     * event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired
     * when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
     */
    attachSuggestionItemSelected(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Attaches event handler `fnFunction` to the {@link #event:valueHelpRequest valueHelpRequest} event of
     * this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * When the value help indicator is clicked, this event will be fired.
     */
    attachValueHelpRequest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Binds aggregation {@link #getSuggestionColumns suggestionColumns} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindSuggestionColumns(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Binds aggregation {@link #getSuggestionRows suggestionRows} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindSuggestionRows(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Cancels any pending suggestions.
     */
    cancelPendingSuggest(): void;
    /**
     * Clones input.
     */
    clone(): this;
    /**
     * @SINCE 1.48
     *
     * Closes the suggestion list.
     */
    closeSuggestions(): void;
    /**
     * @SINCE 1.21.1
     *
     * Destroys all the suggestionColumns in the aggregation {@link #getSuggestionColumns suggestionColumns}.
     */
    destroySuggestionColumns(): this;
    /**
     * Destroys suggestion items.
     */
    destroySuggestionItems(): this;
    /**
     * @SINCE 1.21.1
     *
     * Destroys all the suggestionRows in the aggregation {@link #getSuggestionRows suggestionRows}.
     */
    destroySuggestionRows(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.33.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:submit submit} event of this `sap.m.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSubmit(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.m.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelected suggestionItemSelected}
     * event of this `sap.m.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggestionItemSelected(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Detaches event handler `fnFunction` from the {@link #event:valueHelpRequest valueHelpRequest} event of
     * this `sap.m.Input`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachValueHelpRequest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Input with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Input>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current value of the input, after a live change event.
         */
        value?: string;
        /**
         * Indicates that ESC key triggered the event. **Note:** This parameter will not be sent unless the ESC
         * key is pressed.
         */
        escPressed?: boolean;
        /**
         * The value of the input before pressing ESC key. **Note:** This parameter will not be sent unless the
         * ESC key is pressed.
         */
        previousValue?: string;
      }
    ): this;
    /**
     * @SINCE 1.33.0
     *
     * Fires event {@link #event:submit submit} to attached listeners.
     */
    fireSubmit(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new value of the input.
         */
        value?: string;
      }
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Fires event {@link #event:suggest suggest} to attached listeners.
     */
    fireSuggest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current value which has been typed in the input.
         */
        suggestValue?: string;
        /**
         * The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions,
         * fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to
         * the "suggestionItems" aggregation of the input control.
         */
        suggestionColumns?: ListBase;
      }
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
     */
    fireSuggestionItemSelected(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions,
         * this value will not be set.
         */
        selectedItem?: Item;
        /**
         * This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and
         * two-value suggestions, this value will not be set.
         *
         * **Note:** The row result function to select a result value for the string is already executed at this
         * time. To pick different value for the input field or to do follow up steps after the item has been selected.
         */
        selectedRow?: ColumnListItem;
      }
    ): this;
    /**
     * @SINCE 1.16
     *
     * Fires event {@link #event:valueHelpRequest valueHelpRequest} to attached listeners.
     */
    fireValueHelpRequest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise
         * false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has
         * been pressed.
         */
        fromSuggestions?: boolean;
      }
    ): this;
    /**
     * Gets accessibility information for the input.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.61
     *
     * Gets current value of property {@link #getAutocomplete autocomplete}.
     *
     * Specifies whether autocomplete is enabled. Works only if "showSuggestion" property is set to true. **Note:**
     * The autocomplete feature is disabled on Android devices due to a OS specific issue.
     *
     * Default value is `true`.
     */
    getAutocomplete(): boolean;
    /**
     * @deprecated (since 1.9.1) - `sap.m.DatePicker`, `sap.m.TimePicker` or `sap.m.DateTimePicker` should be
     * used for date/time inputs and formating.
     *
     * Gets current value of property {@link #getDateFormat dateFormat}.
     *
     * Only used if type=date and no datepicker is available. The data is displayed and the user input is parsed
     * according to this format. **Note:** The value property is always of the form RFC 3339 (YYYY-MM-dd).
     *
     * Default value is `'YYYY-MM-dd'`.
     */
    getDateFormat(): string;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * The description is a text after the input field, e.g. units of measurement, currencies.
     */
    getDescription(): string;
    /**
     * Gets the inner input DOM value.
     */
    getDOMValue(): any;
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getEnableSuggestionsHighlighting enableSuggestionsHighlighting}.
     *
     * Specifies whether the suggestions highlighting is enabled.
     *
     * Default value is `true`.
     */
    getEnableSuggestionsHighlighting(): boolean;
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEnableTableAutoPopinMode enableTableAutoPopinMode}.
     *
     * Enables the `autoPopinMode` of `sap.m.Table`, when the input has tabular suggestions. **Note:** The `autoPopinMode`
     * overwrites the `demandPopin` and the `minScreenWidth` properties of the `sap.m.Column`. When setting,
     * `enableTableAutoPopinMode`, from true to false, the application must reconfigure the `demandPopin` and
     * `minScreenWidth` properties of the `sap.m.Column` control by itself.
     *
     * Default value is `false`.
     */
    getEnableTableAutoPopinMode(): boolean;
    /**
     * Gets current value of property {@link #getFieldWidth fieldWidth}.
     *
     * This property only takes effect if the description property is set. It controls the distribution of space
     * between the input field and the description text. The default value is 50% leaving the other 50% for
     * the description.
     *
     * Default value is `'50%'`.
     */
    getFieldWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getFilterSuggests filterSuggests}.
     *
     * Defines whether to filter the provided suggestions before showing them to the user.
     *
     * Default value is `true`.
     */
    getFilterSuggests(): boolean;
    /**
     * Gets current value of property {@link #getMaxLength maxLength}.
     *
     * Maximum number of characters. Value '0' means the feature is switched off. This parameter is not compatible
     * with the input type `sap.m.InputType.Number`. If the input type is set to `Number`, the `maxLength` value
     * is ignored.
     *
     * Default value is `0`.
     */
    getMaxLength(): int;
    /**
     * @SINCE 1.21.1
     *
     * Gets current value of property {@link #getMaxSuggestionWidth maxSuggestionWidth}.
     *
     * If set, the value of this parameter will control the horizontal size of the suggestion list to display
     * more data. This allows suggestion lists to be wider than the input field if there is enough space available.
     * By default, the suggestion list is always as wide as the input field. **Note:** The value will be ignored
     * if the actual width of the input field is larger than the specified parameter value.
     */
    getMaxSuggestionWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.Input.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.44
     *
     * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem},
     * or `null`.
     */
    getSelectedItem(): ID;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Defines the key of the selected item.
     *
     * **Note:** If duplicate keys exist, the first item matching the key is used.
     *
     * Default value is `empty string`.
     */
    getSelectedKey(): string;
    /**
     * @SINCE 1.44
     *
     * ID of the element which is the current target of the association {@link #getSelectedRow selectedRow},
     * or `null`.
     */
    getSelectedRow(): ID;
    /**
     * @SINCE 1.16.1
     *
     * Gets current value of property {@link #getShowSuggestion showSuggestion}.
     *
     * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems
     * aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input
     * will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions
     * are shown in a popup next to the input.
     *
     * Default value is `false`.
     */
    getShowSuggestion(): boolean;
    /**
     * @SINCE 1.22.1
     *
     * Gets current value of property {@link #getShowTableSuggestionValueHelp showTableSuggestionValueHelp}.
     *
     * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that
     * triggers the event "valueHelpRequest" when pressed. The default value is true.
     *
     * **Note:** If suggestions are not tabular or no suggestions are used, the button will not be displayed
     * and this flag is without effect.
     *
     * Default value is `true`.
     */
    getShowTableSuggestionValueHelp(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getShowValueHelp showValueHelp}.
     *
     * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest"
     * will be fired.
     *
     * Default value is `false`.
     */
    getShowValueHelp(): boolean;
    /**
     * @SINCE 1.16
     *
     * Getter for property `showValueStateMessage`. Whether the value state message should be shown. This property
     * is already available for sap.m.Input since 1.16.0.
     *
     * Default value is `true`
     */
    getShowValueStateMessage(): boolean;
    /**
     * @SINCE 1.21.2
     *
     * Gets current value of property {@link #getStartSuggestion startSuggestion}.
     *
     * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which
     * means the suggest event is fired after user types in input.
     *
     * **Note:** When it's set to 0, suggest event is fired when input with no text gets focus. In this case
     * no suggestion popup will open.
     *
     * Default value is `1`.
     */
    getStartSuggestion(): int;
    /**
     * @SINCE 1.21.1
     *
     * Gets content of aggregation {@link #getSuggestionColumns suggestionColumns}.
     *
     * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for
     * binding the table columns; for more details see the aggregation "suggestionRows".
     */
    getSuggestionColumns(): Column[];
    /**
     * @SINCE 1.44
     *
     * Gets the item with the given key from the aggregation `suggestionItems`. **Note:** If duplicate keys
     * exist, the first item matching the key is returned.
     */
    getSuggestionItemByKey(
      /**
       * An item key that specifies the item to retrieve.
       */
      sKey: string
    ): Item;
    /**
     * @SINCE 1.16.1
     *
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Defines the items displayed in the suggestion popup. Changing this aggregation (by calling `addSuggestionItem`,
     * `insertSuggestionItem`, `removeSuggestionItem`, `removeAllSuggestionItems`, or `destroySuggestionItems`)
     * after `Input` is rendered opens/closes the suggestion popup.
     *
     * To display suggestions with two text values, add `sap.ui.core.ListItem` as `SuggestionItems` (since 1.21.1).
     * For the selected `ListItem`, only the first value is returned to the input field.
     *
     * **Note:** Only `text` and `additionalText` property values of the item are displayed. For example, if
     * an `icon` is set, it is ignored. To display more information per item (including icons), you can use
     * the `suggestionRows` aggregation.
     *
     * **Note:** Disabled items are not visualized in the list with the suggestions, however they can still
     * be accessed through the aggregation. **Note:** If `suggestionItems` & `suggestionRows` are set in parallel,
     * the last aggeragtion to come would overwrite the previous ones.
     */
    getSuggestionItems(): Item[];
    /**
     * @SINCE 1.21.1
     *
     * Gets content of aggregation {@link #getSuggestionRows suggestionRows}.
     *
     * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for
     * binding the table cells. The items of this aggregation are to be bound directly or to set in the suggest
     * event method. **Note:** If `suggestionItems` & `suggestionRows` are set in parallel, the last aggeragtion
     * to come would overwrite the previous ones.
     */
    getSuggestionRows(): Array<ColumnListItem | GroupHeaderListItem>;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getSuggestionRowValidator suggestionRowValidator}.
     *
     * Defines the validation callback function called when a suggestion row gets selected.
     *
     * Default value is `empty string`.
     */
    getSuggestionRowValidator(): any;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getTextFormatMode textFormatMode}.
     *
     * Defines the display text format mode.
     *
     * Default value is `Value`.
     */
    getTextFormatMode(): InputTextFormatMode | keyof typeof InputTextFormatMode;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getTextFormatter textFormatter}.
     *
     * Defines the display text formatter function.
     *
     * Default value is `empty string`.
     */
    getTextFormatter(): any;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * HTML type of the internal `input` tag (e.g. Text, Number, Email, Phone). The particular effect of this
     * property differs depending on the browser and the current language settings, especially for the type
     * Number.
     *  This parameter is intended to be used with touch devices that use different soft keyboard layouts depending
     * on the given input type.
     *  Only the default value `sap.m.InputType.Text` may be used in combination with data model formats. `sap.ui.model`
     * defines extended formats that are mostly incompatible with normal HTML representations for numbers and
     * dates.
     *
     * Default value is `Text`.
     */
    getType(): InputType | keyof typeof InputType;
    /**
     * Gets the input value.
     */
    getValue(): string;
    /**
     * @SINCE 1.84.0
     *
     * Gets current value of property {@link #getValueHelpIconSrc valueHelpIconSrc}.
     *
     * Set custom value help icon.
     *
     * Default value is `"sap-icon://value-help"`.
     */
    getValueHelpIconSrc(): URI;
    /**
     * @SINCE 1.21.0
     *
     * Gets current value of property {@link #getValueHelpOnly valueHelpOnly}.
     *
     * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest"
     * for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true,
     * otherwise the property will have no effect
     *
     * Default value is `false`.
     */
    getValueHelpOnly(): boolean;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getValueLiveUpdate valueLiveUpdate}.
     *
     * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the
     * user presses enter or tabs out (false).
     *
     * **Note:** When set to true and the value of the Input control is bound to a model, the change event becomes
     * obsolete and will not be fired, as the value in the model will be updated each time the user provides
     * input. In such cases, subscription to the liveChange event is more appropriate, as it corresponds to
     * the way the underlying model gets updated.
     *
     * Default value is `false`.
     */
    getValueLiveUpdate(): boolean;
    /**
     * @SINCE 1.16
     *
     * Getter for property `valueStateText`. The text which is shown in the value state message popup. If not
     * specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.
     *
     * Default value is empty/`undefined`
     */
    getValueStateText(): string;
    /**
     * @SINCE 1.21.1
     *
     * Checks for the provided `sap.m.Column` in the aggregation {@link #getSuggestionColumns suggestionColumns}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionColumn(
      /**
       * The suggestionColumn whose index is looked for
       */
      oSuggestionColumn: Column
    ): int;
    /**
     * @SINCE 1.16.1
     *
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getSuggestionItems suggestionItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: Item
    ): int;
    /**
     * @SINCE 1.21.1
     *
     * Checks for the provided `sap.m.ColumnListItem` in the aggregation {@link #getSuggestionRows suggestionRows}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionRow(
      /**
       * The suggestionRow whose index is looked for
       */
      vSuggestionRow: ColumnListItem | GroupHeaderListItem
    ): int;
    /**
     * @SINCE 1.21.1
     *
     * Inserts a suggestionColumn into the aggregation {@link #getSuggestionColumns suggestionColumns}.
     */
    insertSuggestionColumn(
      /**
       * The suggestionColumn to insert; if empty, nothing is inserted
       */
      oSuggestionColumn: Column,
      /**
       * The `0`-based index the suggestionColumn should be inserted at; for a negative value of `iIndex`, the
       * suggestionColumn is inserted at position 0; for a value greater than the current size of the aggregation,
       * the suggestionColumn is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts suggestion item.
     */
    insertSuggestionItem(
      /**
       * Suggestion item.
       */
      oItem: Item,
      /**
       * Index to be inserted.
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Inserts a suggestionRow into the aggregation {@link #getSuggestionRows suggestionRows}.
     */
    insertSuggestionRow(
      /**
       * The suggestionRow to insert; if empty, nothing is inserted
       */
      vSuggestionRow: ColumnListItem | GroupHeaderListItem,
      /**
       * The `0`-based index the suggestionRow should be inserted at; for a negative value of `iIndex`, the suggestionRow
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionRow
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Invalidates the control.
     */
    invalidate(): void;
    /**
     * Indicates whether the control should use `sap.m.Dialog` or not.
     */
    isMobileDevice(): Boolean;
    /**
     * Gets the supported openers for the valueHelpOnly. In the context of the Input, all targets are valid.
     */
    isValueHelpOnlyOpener(
      /**
       * The target of the event.
       */
      oTarget: HTMLElement | undefined
    ): Boolean;
    /**
     * Overwrites the onBeforeRendering.
     */
    onBeforeRendering(): void;
    /**
     * @SINCE 1.73
     *
     * Event handler for browsers' `change` event.
     */
    onchange(
      /**
       * The event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Event handler for the onFocusIn event.
     */
    onfocusin(
      /**
       * On focus in event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Event handler for user input.
     */
    oninput(
      /**
       * User input.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Keyboard handler for the onMouseDown event.
     */
    onmousedown(
      /**
       * Keyboard event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Keyboard handler for enter key.
     */
    onsapenter(
      /**
       * Keyboard event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Keyboard handler for escape key.
     */
    onsapescape(
      /**
       * Keyboard event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Keyboard handler for the onFocusLeave event.
     */
    onsapfocusleave(
      /**
       * Keyboard event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Finalizes autocomplete and fires liveChange event eventually.
     */
    onsapright(): void;
    /**
     * Fire valueHelpRequest event on tap.
     */
    ontap(
      /**
       * Ontap event.
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * @SINCE 1.46
     *
     * Hook method to prevent the change event from being fired when the text input field loses focus.
     */
    preventChangeOnFocusLeave(
      /**
       * The event object.
       */
      oEvent?: jQuery.Event
    ): boolean;
    /**
     * @SINCE 1.21.1
     *
     * Removes all the controls from the aggregation {@link #getSuggestionColumns suggestionColumns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSuggestionColumns(): Column[];
    /**
     * Removes all suggestion items.
     */
    removeAllSuggestionItems(): boolean;
    /**
     * @SINCE 1.21.1
     *
     * Removes all the controls from the aggregation {@link #getSuggestionRows suggestionRows}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSuggestionRows(): Array<ColumnListItem | GroupHeaderListItem>;
    /**
     * @SINCE 1.21.1
     *
     * Removes a suggestionColumn from the aggregation {@link #getSuggestionColumns suggestionColumns}.
     */
    removeSuggestionColumn(
      /**
       * The suggestionColumn to remove or its index or id
       */
      vSuggestionColumn: int | string | Column
    ): Column;
    /**
     * Removes suggestion item.
     */
    removeSuggestionItem(
      /**
       * Suggestion item.
       */
      oItem: Item
    ): boolean;
    /**
     * @SINCE 1.21.1
     *
     * Removes a suggestionRow from the aggregation {@link #getSuggestionRows suggestionRows}.
     */
    removeSuggestionRow(
      /**
       * The suggestionRow to remove or its index or id
       */
      vSuggestionRow: int | string | ColumnListItem | GroupHeaderListItem
    ): ColumnListItem | GroupHeaderListItem;
    /**
     * @SINCE 1.61
     *
     * Sets a new value for property {@link #getAutocomplete autocomplete}.
     *
     * Specifies whether autocomplete is enabled. Works only if "showSuggestion" property is set to true. **Note:**
     * The autocomplete feature is disabled on Android devices due to a OS specific issue.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAutocomplete(
      /**
       * New value for property `autocomplete`
       */
      bAutocomplete?: boolean
    ): this;
    /**
     * @deprecated (since 1.9.1) - `sap.m.DatePicker`, `sap.m.TimePicker` or `sap.m.DateTimePicker` should be
     * used for date/time inputs and formating.
     *
     * Sets a new value for property {@link #getDateFormat dateFormat}.
     *
     * Only used if type=date and no datepicker is available. The data is displayed and the user input is parsed
     * according to this format. **Note:** The value property is always of the form RFC 3339 (YYYY-MM-dd).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'YYYY-MM-dd'`.
     */
    setDateFormat(
      /**
       * New value for property `dateFormat`
       */
      sDateFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * The description is a text after the input field, e.g. units of measurement, currencies.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets the inner input DOM value.
     */
    setDOMValue(
      /**
       * Dom value which will be set.
       */
      value: string
    ): void;
    /**
     * @SINCE 1.46
     *
     * Sets a new value for property {@link #getEnableSuggestionsHighlighting enableSuggestionsHighlighting}.
     *
     * Specifies whether the suggestions highlighting is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableSuggestionsHighlighting(
      /**
       * New value for property `enableSuggestionsHighlighting`
       */
      bEnableSuggestionsHighlighting?: boolean
    ): this;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEnableTableAutoPopinMode enableTableAutoPopinMode}.
     *
     * Enables the `autoPopinMode` of `sap.m.Table`, when the input has tabular suggestions. **Note:** The `autoPopinMode`
     * overwrites the `demandPopin` and the `minScreenWidth` properties of the `sap.m.Column`. When setting,
     * `enableTableAutoPopinMode`, from true to false, the application must reconfigure the `demandPopin` and
     * `minScreenWidth` properties of the `sap.m.Column` control by itself.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableTableAutoPopinMode(
      /**
       * New value for property `enableTableAutoPopinMode`
       */
      bEnableTableAutoPopinMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFieldWidth fieldWidth}.
     *
     * This property only takes effect if the description property is set. It controls the distribution of space
     * between the input field and the description text. The default value is 50% leaving the other 50% for
     * the description.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'50%'`.
     */
    setFieldWidth(
      /**
       * New value for property `fieldWidth`
       */
      sFieldWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Sets a custom filter function for suggestions. The default is to check whether the first item text begins
     * with the typed value. For one and two-value suggestions this callback function will operate on sap.ui.core.Item
     * types, for tabular suggestions the function will operate on sap.m.ColumnListItem types.
     */
    setFilterFunction(
      /**
       * The filter function is called when displaying suggestion items and has two input parameters: the first
       * one is the string that is currently typed in the input field and the second one is the item that is being
       * filtered. Returning true will add this item to the popup, returning false will not display it.
       */
      fnFilter: Function
    ): this;
    /**
     * Sets a new value for property {@link #getFilterSuggests filterSuggests}.
     *
     * Defines whether to filter the provided suggestions before showing them to the user.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setFilterSuggests(
      /**
       * New value for property `filterSuggests`
       */
      bFilterSuggests?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxLength maxLength}.
     *
     * Maximum number of characters. Value '0' means the feature is switched off. This parameter is not compatible
     * with the input type `sap.m.InputType.Number`. If the input type is set to `Number`, the `maxLength` value
     * is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxLength(
      /**
       * New value for property `maxLength`
       */
      iMaxLength?: int
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Sets a new value for property {@link #getMaxSuggestionWidth maxSuggestionWidth}.
     *
     * If set, the value of this parameter will control the horizontal size of the suggestion list to display
     * more data. This allows suggestion lists to be wider than the input field if there is enough space available.
     * By default, the suggestion list is always as wide as the input field. **Note:** The value will be ignored
     * if the actual width of the input field is larger than the specified parameter value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxSuggestionWidth(
      /**
       * New value for property `maxSuggestionWidth`
       */
      sMaxSuggestionWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Sets a custom result filter function for tabular suggestions to select the text that is passed to the
     * input field. Default is to check whether the first cell with a "text" property begins with the typed
     * value. For one value and two-value suggestions this callback function is not called.
     */
    setRowResultFunction(
      /**
       * The result function is called with one parameter: the sap.m.ColumnListItem that is selected. The function
       * must return a result string that will be displayed as the input field's value.
       */
      fnFilter: Function
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets the `selectedItem` association.
     */
    setSelectedItem(
      /**
       * New value for the `selectedItem` association. If an ID of a `sap.ui.core.Item` is given, the item with
       * this ID becomes the `selectedItem` association. Alternatively, a `sap.ui.core.Item` instance may be given
       * or `null` to clear the selection.
       */
      oItem?: Item
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets the `selectedKey` property.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`. If the provided `sKey` is an empty string `""` or `undefined`,
       * the selection is cleared. If duplicate keys exist, the first item matching the key is selected.
       */
      sKey: string
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets the `selectedRow` association. Default value is `null`.
     */
    setSelectedRow(
      /**
       * New value for the `selectedRow` association. If an ID of a `sap.m.ColumnListItem` is given, the item
       * with this ID becomes the `selectedRow` association. Alternatively, a `sap.m.ColumnListItem` instance
       * may be given or `null` to clear the selection.
       */
      oListItem: ColumnListItem
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
     *
     * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems
     * aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input
     * will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions
     * are shown in a popup next to the input.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSuggestion(
      /**
       * New value for property `showSuggestion`
       */
      bShowSuggestion?: boolean
    ): this;
    /**
     * Shows value help suggestions in table.
     */
    setShowTableSuggestionValueHelp(
      /**
       * Show suggestions.
       */
      bValue: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getShowValueHelp showValueHelp}.
     *
     * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest"
     * will be fired.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowValueHelp(
      /**
       * New value for property `showValueHelp`
       */
      bShowValueHelp?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Setter for property `showValueStateMessage`.
     *
     * Default value is `true`
     */
    setShowValueStateMessage(
      /**
       * new value for property `showValueStateMessage`
       */
      bShowValueStateMessage: boolean
    ): this;
    /**
     * @SINCE 1.21.2
     *
     * Sets a new value for property {@link #getStartSuggestion startSuggestion}.
     *
     * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which
     * means the suggest event is fired after user types in input.
     *
     * **Note:** When it's set to 0, suggest event is fired when input with no text gets focus. In this case
     * no suggestion popup will open.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStartSuggestion(
      /**
       * New value for property `startSuggestion`
       */
      iStartSuggestion?: int
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getSuggestionRowValidator suggestionRowValidator}.
     *
     * Defines the validation callback function called when a suggestion row gets selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setSuggestionRowValidator(
      /**
       * New value for property `suggestionRowValidator`
       */
      oSuggestionRowValidator?: any
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getTextFormatMode textFormatMode}.
     *
     * Defines the display text format mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Value`.
     */
    setTextFormatMode(
      /**
       * New value for property `textFormatMode`
       */
      sTextFormatMode?: InputTextFormatMode | keyof typeof InputTextFormatMode
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getTextFormatter textFormatter}.
     *
     * Defines the display text formatter function.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTextFormatter(
      /**
       * New value for property `textFormatter`
       */
      oTextFormatter?: any
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * HTML type of the internal `input` tag (e.g. Text, Number, Email, Phone). The particular effect of this
     * property differs depending on the browser and the current language settings, especially for the type
     * Number.
     *  This parameter is intended to be used with touch devices that use different soft keyboard layouts depending
     * on the given input type.
     *  Only the default value `sap.m.InputType.Text` may be used in combination with data model formats. `sap.ui.model`
     * defines extended formats that are mostly incompatible with normal HTML representations for numbers and
     * dates.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Text`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: InputType | keyof typeof InputType
    ): this;
    /**
     * Setter for property `value`.
     *
     * Default value is empty/`undefined`.
     */
    setValue(
      /**
       * New value for property `value`.
       */
      sValue: string
    ): this;
    /**
     * @SINCE 1.84.0
     *
     * Sets a new value for property {@link #getValueHelpIconSrc valueHelpIconSrc}.
     *
     * Set custom value help icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"sap-icon://value-help"`.
     */
    setValueHelpIconSrc(
      /**
       * New value for property `valueHelpIconSrc`
       */
      sValueHelpIconSrc?: URI
    ): this;
    /**
     * @SINCE 1.21.0
     *
     * Sets a new value for property {@link #getValueHelpOnly valueHelpOnly}.
     *
     * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest"
     * for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true,
     * otherwise the property will have no effect
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setValueHelpOnly(
      /**
       * New value for property `valueHelpOnly`
       */
      bValueHelpOnly?: boolean
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getValueLiveUpdate valueLiveUpdate}.
     *
     * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the
     * user presses enter or tabs out (false).
     *
     * **Note:** When set to true and the value of the Input control is bound to a model, the change event becomes
     * obsolete and will not be fired, as the value in the model will be updated each time the user provides
     * input. In such cases, subscription to the liveChange event is more appropriate, as it corresponds to
     * the way the underlying model gets updated.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setValueLiveUpdate(
      /**
       * New value for property `valueLiveUpdate`
       */
      bValueLiveUpdate?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Setter for property `valueStateText`.
     *
     * Default value is empty/`undefined`
     */
    setValueStateText(
      /**
       * new value for property `valueStateText`
       */
      sValueStateText: string
    ): this;
    /**
     * @SINCE 1.64
     * @EXPERIMENTAL (since 1.64)
     *
     * Opens the `SuggestionsPopover` with the available items.
     */
    showItems(
      /**
       * Function to filter the items shown in the SuggestionsPopover
       */
      fnFilter: Function
    ): void;
    /**
     * @SINCE 1.21.1
     *
     * Unbinds aggregation {@link #getSuggestionColumns suggestionColumns} from model data.
     */
    unbindSuggestionColumns(): this;
    /**
     * @SINCE 1.21.1
     *
     * Unbinds aggregation {@link #getSuggestionRows suggestionRows} from model data.
     */
    unbindSuggestionRows(): this;
    /**
     * Updates the inner input field.
     */
    updateInputField(): void;
    /**
     * Update suggestion items.
     */
    updateSuggestionItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * Fired when the value of the input is changed by user interaction - each keystroke, delete, paste, etc.
     *
     * **Note:** Browsing autocomplete suggestions does not fires the event.
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.33.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when user presses the Enter key on the input.
     *
     * **Notes:**
     * 	 - The event is fired independent of whether there was a change before or not. If a change was performed,
     * 			the event is fired after the change event.
     * 	 - The event is also fired when an item of the select list is selected via Enter.
     * 	 - The event is only fired on an input which allows text input (`editable`, `enabled` and not `valueHelpOnly`).
     */
    attachSubmit(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems
     * aggregation will show the suggestions within a popup.
     */
    attachSuggest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
     * event of this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired
     * when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
     */
    attachSuggestionItemSelected(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Attaches event handler `fnFunction` to the {@link #event:valueHelpRequest valueHelpRequest} event of
     * this `sap.m.Input`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Input` itself.
     *
     * When the value help indicator is clicked, this event will be fired.
     */
    attachValueHelpRequest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Input` itself
       */
      oListener?: object
    ): this;
  }

  export interface $InputSettings extends $InputBaseSettings {
    /**
     * HTML type of the internal `input` tag (e.g. Text, Number, Email, Phone). The particular effect of this
     * property differs depending on the browser and the current language settings, especially for the type
     * Number.
     *  This parameter is intended to be used with touch devices that use different soft keyboard layouts depending
     * on the given input type.
     *  Only the default value `sap.m.InputType.Text` may be used in combination with data model formats. `sap.ui.model`
     * defines extended formats that are mostly incompatible with normal HTML representations for numbers and
     * dates.
     */
    type?: (InputType | keyof typeof InputType) | PropertyBindingInfo;

    /**
     * Maximum number of characters. Value '0' means the feature is switched off. This parameter is not compatible
     * with the input type `sap.m.InputType.Number`. If the input type is set to `Number`, the `maxLength` value
     * is ignored.
     */
    maxLength?: int | PropertyBindingInfo;

    /**
     * @deprecated (since 1.9.1) - `sap.m.DatePicker`, `sap.m.TimePicker` or `sap.m.DateTimePicker` should be
     * used for date/time inputs and formating.
     *
     * Only used if type=date and no datepicker is available. The data is displayed and the user input is parsed
     * according to this format. **Note:** The value property is always of the form RFC 3339 (YYYY-MM-dd).
     */
    dateFormat?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest"
     * will be fired.
     */
    showValueHelp?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.84.0
     *
     * Set custom value help icon.
     */
    valueHelpIconSrc?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.16.1
     *
     * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems
     * aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input
     * will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions
     * are shown in a popup next to the input.
     */
    showSuggestion?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.21.0
     *
     * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest"
     * for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true,
     * otherwise the property will have no effect
     */
    valueHelpOnly?: boolean | PropertyBindingInfo;

    /**
     * Defines whether to filter the provided suggestions before showing them to the user.
     */
    filterSuggests?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.21.1
     *
     * If set, the value of this parameter will control the horizontal size of the suggestion list to display
     * more data. This allows suggestion lists to be wider than the input field if there is enough space available.
     * By default, the suggestion list is always as wide as the input field. **Note:** The value will be ignored
     * if the actual width of the input field is larger than the specified parameter value.
     */
    maxSuggestionWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.21.2
     *
     * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which
     * means the suggest event is fired after user types in input.
     *
     * **Note:** When it's set to 0, suggest event is fired when input with no text gets focus. In this case
     * no suggestion popup will open.
     */
    startSuggestion?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.22.1
     *
     * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that
     * triggers the event "valueHelpRequest" when pressed. The default value is true.
     *
     * **Note:** If suggestions are not tabular or no suggestions are used, the button will not be displayed
     * and this flag is without effect.
     */
    showTableSuggestionValueHelp?: boolean | PropertyBindingInfo;

    /**
     * The description is a text after the input field, e.g. units of measurement, currencies.
     */
    description?: string | PropertyBindingInfo;

    /**
     * This property only takes effect if the description property is set. It controls the distribution of space
     * between the input field and the description text. The default value is 50% leaving the other 50% for
     * the description.
     */
    fieldWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the
     * user presses enter or tabs out (false).
     *
     * **Note:** When set to true and the value of the Input control is bound to a model, the change event becomes
     * obsolete and will not be fired, as the value in the model will be updated each time the user provides
     * input. In such cases, subscription to the liveChange event is more appropriate, as it corresponds to
     * the way the underlying model gets updated.
     */
    valueLiveUpdate?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Defines the key of the selected item.
     *
     * **Note:** If duplicate keys exist, the first item matching the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Defines the display text format mode.
     */
    textFormatMode?:
      | (InputTextFormatMode | keyof typeof InputTextFormatMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Defines the display text formatter function.
     */
    textFormatter?: any | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Defines the validation callback function called when a suggestion row gets selected.
     */
    suggestionRowValidator?: any | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Specifies whether the suggestions highlighting is enabled.
     */
    enableSuggestionsHighlighting?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Enables the `autoPopinMode` of `sap.m.Table`, when the input has tabular suggestions. **Note:** The `autoPopinMode`
     * overwrites the `demandPopin` and the `minScreenWidth` properties of the `sap.m.Column`. When setting,
     * `enableTableAutoPopinMode`, from true to false, the application must reconfigure the `demandPopin` and
     * `minScreenWidth` properties of the `sap.m.Column` control by itself.
     */
    enableTableAutoPopinMode?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.61
     *
     * Specifies whether autocomplete is enabled. Works only if "showSuggestion" property is set to true. **Note:**
     * The autocomplete feature is disabled on Android devices due to a OS specific issue.
     */
    autocomplete?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.1
     *
     * Defines the items displayed in the suggestion popup. Changing this aggregation (by calling `addSuggestionItem`,
     * `insertSuggestionItem`, `removeSuggestionItem`, `removeAllSuggestionItems`, or `destroySuggestionItems`)
     * after `Input` is rendered opens/closes the suggestion popup.
     *
     * To display suggestions with two text values, add `sap.ui.core.ListItem` as `SuggestionItems` (since 1.21.1).
     * For the selected `ListItem`, only the first value is returned to the input field.
     *
     * **Note:** Only `text` and `additionalText` property values of the item are displayed. For example, if
     * an `icon` is set, it is ignored. To display more information per item (including icons), you can use
     * the `suggestionRows` aggregation.
     *
     * **Note:** Disabled items are not visualized in the list with the suggestions, however they can still
     * be accessed through the aggregation. **Note:** If `suggestionItems` & `suggestionRows` are set in parallel,
     * the last aggeragtion to come would overwrite the previous ones.
     */
    suggestionItems?: Item[] | Item | AggregationBindingInfo;

    /**
     * @SINCE 1.21.1
     *
     * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for
     * binding the table columns; for more details see the aggregation "suggestionRows".
     */
    suggestionColumns?: Column[] | Column | AggregationBindingInfo;

    /**
     * @SINCE 1.21.1
     *
     * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for
     * binding the table cells. The items of this aggregation are to be bound directly or to set in the suggest
     * event method. **Note:** If `suggestionItems` & `suggestionRows` are set in parallel, the last aggeragtion
     * to come would overwrite the previous ones.
     */
    suggestionRows?:
      | Array<GroupHeaderListItem | ColumnListItem>
      | GroupHeaderListItem
      | ColumnListItem
      | AggregationBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Sets or retrieves the selected item from the suggestionItems.
     */
    selectedItem?: Item | string;

    /**
     * @SINCE 1.44
     *
     * Sets or retrieves the selected row from the suggestionRows.
     */
    selectedRow?: ColumnListItem | string;

    /**
     * Fired when the value of the input is changed by user interaction - each keystroke, delete, paste, etc.
     *
     * **Note:** Browsing autocomplete suggestions does not fires the event.
     */
    liveChange?: Function;

    /**
     * @SINCE 1.16
     *
     * When the value help indicator is clicked, this event will be fired.
     */
    valueHelpRequest?: Function;

    /**
     * @SINCE 1.16.1
     *
     * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems
     * aggregation will show the suggestions within a popup.
     */
    suggest?: Function;

    /**
     * @SINCE 1.16.3
     *
     * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired
     * when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
     */
    suggestionItemSelected?: Function;

    /**
     * @SINCE 1.33.0
     *
     * This event is fired when user presses the Enter key on the input.
     *
     * **Notes:**
     * 	 - The event is fired independent of whether there was a change before or not. If a change was performed,
     * 			the event is fired after the change event.
     * 	 - The event is also fired when an item of the select list is selected via Enter.
     * 	 - The event is only fired on an input which allows text input (`editable`, `enabled` and not `valueHelpOnly`).
     */
    submit?: Function;
  }
}

declare module "sap/m/InputBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    TextAlign,
    TextDirection,
    ValueState,
    CSSSize,
  } from "sap/ui/core/library";

  import Icon from "sap/ui/core/Icon";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import FormattedText from "sap/m/FormattedText";

  import Label from "sap/m/Label";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.12.0
   *
   * The `sap.m.InputBase` control provides a basic functionality for input controls.
   */
  export default class InputBase extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new `sap.m.InputBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputBaseSettings
    );
    /**
     * Constructor for a new `sap.m.InputBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $InputBaseSettings
    );
    /**
     * Indicates whether the input field is in the rendering phase.
     */
    bRenderingPhase: undefined;

    /**
     * Use labels as placeholder configuration. It can be necessary for the subclasses to overwrite this when
     * native placeholder usage causes undesired input events or when placeholder attribute is not supported
     * for the specified type. https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary
     * See:
     * 	sap.m.InputBase#oninput
     */
    bShowLabelAsPlaceholder: undefined;

    /**
     * @SINCE 1.90
     *
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds an icon to the beginning of the input
     * See:
     * 	sap.ui.core.IconPool.createControlByURI
     */
    addBeginIcon(
      /**
       * settings for creating an icon
       */
      oIconSettings: object
    ): null | Icon;
    /**
     * Adds an icon to the end of the input
     * See:
     * 	sap.ui.core.IconPool.createControlByURI
     */
    addEndIcon(
      /**
       * settings for creating an icon
       */
      oIconSettings: object
    ): null | Icon;
    /**
     * Applies the focus info. To be overwritten by subclasses.
     */
    applyFocusInfo(oFocusInfo: object): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.InputBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.InputBase` itself.
     *
     * Is fired when the text in the input field has changed and the focus leaves the input field or the enter
     * key is pressed.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.InputBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds property {@link #getValue value} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindValue(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * @SINCE 1.26
     *
     * Close value state message popup.
     */
    closeValueStateMessage(): void;
    /**
     * @SINCE 1.78
     * @EXPERIMENTAL (since 1.78)
     *
     * Destroys the formattedValueStateText in the aggregation {@link #getFormattedValueStateText formattedValueStateText}.
     */
    destroyFormattedValueStateText(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.InputBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.InputBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InputBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new `value` of the `control`.
         */
        value?: string;
      }
    ): this;
    /**
     * @SINCE 1.22.1
     *
     * Fires the change event for the listeners
     */
    fireChangeEvent(
      /**
       * value of the input.
       */
      sValue: String,
      /**
       * extra event parameters.
       */
      oParams?: Object
    ): void;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * @SINCE 1.90
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.26
     *
     * Gets the DOM element reference where the message popup is attached.
     */
    getDomRefForValueStateMessage(): Element;
    /**
     * @SINCE 1.12.0
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns an object representing the serialized focus information. To be overwritten by subclasses.
     */
    getFocusInfo(): object;
    /**
     * @SINCE 1.78
     * @EXPERIMENTAL (since 1.78)
     *
     * Gets content of aggregation {@link #getFormattedValueStateText formattedValueStateText}.
     *
     * Defines the formatted text that appears in the value state message pop-up. It can include links. If both
     * `valueStateText` and `formattedValueStateText` are set - the latter is shown.
     */
    getFormattedValueStateText(): FormattedText;
    /**
     * @SINCE 1.48
     *
     * Gets the labels referencing this control.
     */
    getLabels(): Label[];
    /**
     * @SINCE 1.78
     *
     * Gets the last value of the InputBase
     */
    getLastValue(): string;
    /**
     * Returns a metadata object for class sap.m.InputBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submission).
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    getPlaceholder(): string;
    /**
     * @SINCE 1.38.4
     *
     * Gets current value of property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * @SINCE 1.32
     *
     * Retrieves the selected text. Only supported for input control's type of Text, Url, Tel and Password.
     */
    getSelectedText(): string;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
     *
     * Indicates whether the value state message should be shown or not.
     *
     * Default value is `true`.
     */
    getShowValueStateMessage(): boolean;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     *
     * Default value is `Initial`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the control.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     */
    getValueStateText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * **Note:** If the provided width is too small, the control gets stretched to its min width, which is needed
     * in order for the control to be usable and well aligned.
     */
    getWidth(): CSSSize;
    /**
     * indicating if a character is currently composing.
     */
    isComposingCharacter(): boolean;
    /**
     * Handles the change event.
     */
    onChange(
      oEvent: object,
      /**
       * Additional event parameters to be passed in to the change event handler if the value has changed
       */
      mParameters: object,
      /**
       * Passed value on change
       */
      sNewValue: string
    ): boolean | undefined;
    /**
     * @SINCE 1.26
     *
     * Hook method that gets called when the input value is reverted with hitting escape. It may require to
     * re-implement this method from sub classes for control specific behaviour.
     */
    onValueRevertedByEscape(
      /**
       * Reverted value of the input.
       */
      sValue: String
    ): void;
    /**
     * @SINCE 1.26
     *
     * Open value state message popup.
     */
    openValueStateMessage(): void;
    /**
     * @SINCE 1.46
     *
     * Hook method to prevent the change event from being fired when the text input field loses focus.
     */
    preventChangeOnFocusLeave(
      /**
       * The event object.
       */
      oEvent?: jQuery.Event
    ): boolean;
    /**
     * @SINCE 1.90
     *
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.90
     *
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.22.1
     *
     * Selects the text within the input field between the specified start and end positions. Only supported
     * for input control's type of Text, Url, Tel and Password.
     */
    selectText(
      /**
       * The index into the text at which the first selected character is located.
       */
      iSelectionStart: int,
      /**
       * The index into the text at which the last selected character is located.
       */
      iSelectionEnd: int
    ): this;
    /**
     * @SINCE 1.12.0
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.78
     * @EXPERIMENTAL (since 1.78)
     *
     * Sets the aggregated {@link #getFormattedValueStateText formattedValueStateText}.
     */
    setFormattedValueStateText(
      /**
       * The formattedValueStateText to set
       */
      oFormattedValueStateText: FormattedText
    ): this;
    /**
     * @SINCE 1.78
     *
     * Sets the last value of the InputBase
     */
    setLastValue(sValue: string): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submission).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * @SINCE 1.38.4
     *
     * Sets a new value for property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
     *
     * Indicates whether the value state message should be shown or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowValueStateMessage(
      /**
       * New value for property `showValueStateMessage`
       */
      bShowValueStateMessage?: boolean
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Initial`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Setter for property `value`.
     *
     * Default value is empty/`undefined`.
     */
    setValue(
      /**
       * New value for property `value`.
       */
      sValue: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueStateText(
      /**
       * New value for property `valueStateText`
       */
      sValueStateText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * **Note:** If the provided width is too small, the control gets stretched to its min width, which is needed
     * in order for the control to be usable and well aligned.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds property {@link #getValue value} from model data.
     */
    unbindValue(): this;
    /**
     * @SINCE 1.22
     *
     * Sets the DOM value of the input field and handles placeholder visibility.
     */
    updateDomValue(
      /**
       * value of the input field.
       */
      sValue: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.InputBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.InputBase` itself.
     *
     * Is fired when the text in the input field has changed and the focus leaves the input field or the enter
     * key is pressed.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.InputBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Handles the change event.
     */
    onChange(
      oEvent: object,
      /**
       * Passed value on change
       */
      sNewValue: string
    ): boolean | undefined;
  }

  export interface $InputBaseSettings extends $ControlSettings {
    /**
     * Defines the value of the control.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the width of the control.
     *
     * **Note:** If the provided width is too small, the control gets stretched to its min width, which is needed
     * in order for the control to be usable and well aligned.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submission).
     */
    name?: string | PropertyBindingInfo;

    /**
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.12.0
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to non-editable
     * control, highlight it, and copy the text from it.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Defines the text that appears in the value state message pop-up. If this is not specified, a default
     * text is shown from the resource bundle.
     */
    valueStateText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Indicates whether the value state message should be shown or not.
     */
    showValueStateMessage?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * Defines the horizontal alignment of the text that is shown inside the input field.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the text directionality of the input field, e.g. `RTL`, `LTR`
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.38.4
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.78
     * @EXPERIMENTAL (since 1.78)
     *
     * Defines the formatted text that appears in the value state message pop-up. It can include links. If both
     * `valueStateText` and `formattedValueStateText` are set - the latter is shown.
     */
    formattedValueStateText?: FormattedText;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @SINCE 1.90
     *
     * Association to controls / IDs that describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Is fired when the text in the input field has changed and the focus leaves the input field or the enter
     * key is pressed.
     */
    change?: Function;
  }
}

declare module "sap/m/InputListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import Control from "sap/ui/core/Control";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { TextDirection } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * List item should be used for a label and an input field.
   */
  export default class InputListItem extends ListItemBase {
    /**
     * Constructor for a new InputListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/input-list-item/ Input List Item}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $InputListItemSettings
    );
    /**
     * Constructor for a new InputListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/input-list-item/ Input List Item}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $InputListItemSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Binds aggregation {@link #getContent content} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.InputListItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InputListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Content controls can be added
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Label of the list item
     */
    getLabel(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getLabelTextDirection labelTextDirection}.
     *
     * This property specifies the label text directionality with enumerated options. By default, the label
     * inherits text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getLabelTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Returns a metadata object for class sap.m.InputListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Label of the list item
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getLabelTextDirection labelTextDirection}.
     *
     * This property specifies the label text directionality with enumerated options. By default, the label
     * inherits text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setLabelTextDirection(
      /**
       * New value for property `labelTextDirection`
       */
      sLabelTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Unbinds aggregation {@link #getContent content} from model data.
     */
    unbindContent(): this;
  }

  export interface $InputListItemSettings extends $ListItemBaseSettings {
    /**
     * Label of the list item
     */
    label?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * This property specifies the label text directionality with enumerated options. By default, the label
     * inherits text direction from the DOM.
     */
    labelTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Content controls can be added
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/InstanceManager" {
  import Control from "sap/ui/core/Control";

  import LightBox from "sap/m/LightBox";

  /**
   * @SINCE 1.9.2
   *
   * Provides methods to manage instances. This is specifically designed for managing the opened Popover,
   * Dialog, ActionSheet, and it's possible to close all of the opened Popover, Dialog, ActionSheet in history
   * handling.
   *
   * Example:
   * ```javascript
   *
   *   sap.ui.define([
   *      "sap/m/InstanceManager"
   *   ], function(InstanceManager) {
   *     ...
   *     InstanceManager.closeAllPopovers();
   *     ...
   *   });
   * ```
   */
  interface InstanceManager {
    /**
     * Adds a control to predefined dialog category in instance manager.
     */
    addDialogInstance(
      /**
       * Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added
       * as long as it has a close method.
       */
      oDialog: Control
    ): InstanceManager;
    /**
     * Adds an instance to the given category. If the instance is already added to the same category, it won't
     * be added again.
     */
    addInstance(
      /**
       * The category's id.
       */
      sCategoryId: string,
      /**
       * The instance that will be added to the given category.
       */
      oInstance: object
    ): InstanceManager;
    /**
     * Adds a control to predefined lightbox category in instance manager.
     */
    addLightBoxInstance(
      /**
       * Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added
       * as long as it has a close method.
       */
      oLightBox: LightBox
    ): InstanceManager;
    /**
     * Adds a control to predefined popover category in instance manager.
     */
    addPopoverInstance(
      /**
       * Popover to be added to instance manager. Custom popover which doesn't inherit from sap.m.Popover can
       * also be added as long as it has a close method.
       */
      oPopover: Control
    ): InstanceManager;
    /**
     * Closes all of the open dialogs.
     */
    closeAllDialogs(fnCallback: Function): InstanceManager;
    /**
     * Closes all open lightboxes.
     */
    closeAllLightBoxes(): InstanceManager;
    /**
     * Closes all open popovers.
     */
    closeAllPopovers(): InstanceManager;
    /**
     * Returns an array of managed instances in the given category.
     */
    getInstancesByCategoryId(
      /**
       * The category's id.
       */
      sCategoryId: string
    ): object;
    /**
     * Gets all of the open dialogs. If there's no dialog open, an empty array is returned.
     */
    getOpenDialogs(): Control[];
    /**
     * Gets all of the open LightBoxes. If there's no dialog open, an empty array is returned.
     */
    getOpenLightBoxes(): LightBox[];
    /**
     * Gets all of the open popovers. If there's no popover open, an empty array is returned.
     */
    getOpenPopovers(): Control[];
    /**
     * Returns true if there's at least one dialog managed in the predefined dialog category, otherwise it returns
     * false.
     */
    hasOpenDialog(): boolean;
    /**
     * Returns true if there's at least one LightBox managed in the predefined lightbox category, otherwise
     * it returns false.
     */
    hasOpenLightBox(): boolean;
    /**
     * Returns true if there's at least one popover managed in the predefined popover category, otherwise it
     * returns false.
     */
    hasOpenPopover(): boolean;
    /**
     * Returns if there's no managed instance in the given category.
     */
    isCategoryEmpty(
      /**
       * The category's id.
       */
      sCategoryId: string
    ): boolean;
    /**
     * Checks if the given dialog instance is managed under the dialog category. For dialog instances, managed
     * means the dialog is open.
     *
     * This function is specially provided for customized controls which doesn't have the possibility to check
     * whether it's open. If the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen()
     * method on the instance is preferred to be called than this function.
     */
    isDialogOpen(
      /**
       * The dialog that is checked for the openness.
       */
      oDialog: Control
    ): boolean;
    /**
     * Checks if an instance is managed under the given category.
     */
    isInstanceManaged(
      /**
       * The category that the instance is supposed to be in.
       */
      sCategoryId: string,
      /**
       * The instance that needs to be checked.
       */
      oInstance: object
    ): boolean;
    /**
     * Check if the given LightBox instance is managed under the LightBox category. For LightBox instances,
     * 'managed' means the LightBox is open.
     *
     * This function is specially intended for controls that don't provide a way to check whether they're open.
     * If the given lightbox is an instance of `sap.m.LightBox`, its `isOpen()` should be called instead of
     * this function.
     */
    isLightBoxOpen(
      /**
       * The LightBox that is checked.
       */
      oLightBox: LightBox
    ): boolean;
    /**
     * Check if the given popover instance is managed under the popover category. For popover instances, managed
     * means the popover is open.
     *
     * This function is specially provided for customized controls which doesn't have the possibility to check
     * whether it's open. If the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen()
     * method on the instance is preferred to be called than this function.
     */
    isPopoverOpen(
      /**
       * The popover that is checked for the openness.
       */
      oPopover: Control
    ): boolean;
    /**
     * Removes control from predefined dialog category in instance manager.
     */
    removeDialogInstance(
      /**
       * to be removed from instance manager.
       */
      oDialog: Control
    ): Control;
    /**
     * Removes a managed instance from the given category.
     */
    removeInstance(
      /**
       * The category's id.
       */
      sCategoryId: string,
      /**
       * The instance that will be removed from the given category.
       */
      oInstance: object
    ): object;
    /**
     * Removes control from predefined lightbox category in instance manager.
     */
    removeLightBoxInstance(
      /**
       * to be removed from instance manager.
       */
      oLightBox: LightBox
    ): LightBox | null;
    /**
     * Removes control from predefined popover category in instance manager.
     */
    removePopoverInstance(
      /**
       * to be removed from instance manager.
       */
      oPopover: Control
    ): Control;
  }
  const InstanceManager: InstanceManager;
  export default InstanceManager;
}

declare module "sap/m/Label" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    Label as Label1,
    IShrinkable,
    ID,
    TextAlign,
    TextDirection,
    VerticalAlign,
    CSSSize,
  } from "sap/ui/core/library";

  import {
    IOverflowToolbarContent,
    LabelDesign,
    WrappingType,
  } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Provides a textual label for other controls.
   *
   * Overview: Labels are used as titles for single controls or groups of controls. Labels for required fields
   * are marked with an asterisk.
   *
   * Label appearance can be influenced by properties, such as `textAlign`, `design`, `displayOnly`, `wrapping`
   * and `wrappingType`.
   *
   * As of version 1.50, the default value of the `wrapping` property is set to `false`.
   *
   * As of version 1.60, you can hyphenate the label's text with the use of the `wrappingType` property. For
   * more information, see {@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.
   *
   * Usage: When to use:
   * 	 - It's recommended to use the `Label` in Form controls.
   * 	 - Use title case for labels.  When not to use:
   * 	 -  It is not recommended to use labels in Bold.
   */
  export default class Label
    extends Control
    implements Label1, IShrinkable, IOverflowToolbarContent {
    __implements__sap_ui_core_Label: boolean;
    __implements__sap_ui_core_IShrinkable: boolean;
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new Label.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/label/ Label}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LabelSettings
    );
    /**
     * Constructor for a new Label.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/label/ Label}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LabelSettings
    );

    /**
     * Creates a new subclass of class sap.m.Label with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Label>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Provides the current accessibility state of the control.
     * See:
     * 	{@link sap.ui.core.Control#getAccessibilityInfo}.
     */
    getAccessibilityInfo(): object;
    /**
     * Gets current value of property {@link #getDesign design}.
     *
     * Sets the design of a Label to either Standard or Bold.
     *
     * Default value is `Standard`.
     */
    getDesign(): LabelDesign | keyof typeof LabelDesign;
    /**
     * @SINCE 1.50.0
     *
     * Gets current value of property {@link #getDisplayOnly displayOnly}.
     *
     * Determines if the label is in displayOnly mode.
     *
     * **Note:** This property should be used only in Form controls in preview mode.
     *
     * Default value is `false`.
     */
    getDisplayOnly(): boolean;
    /**
     * ID of the element which is the current target of the association {@link #getLabelFor labelFor}, or `null`.
     */
    getLabelFor(): ID;
    /**
     * Returns a metadata object for class sap.m.Label.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Enables the `sap.m.Label` to move inside the sap.m.OverflowToolbar. Required by the {@link sap.m.IOverflowToolbarContent}
     * interface.
     */
    getOverflowToolbarConfig(): object;
    /**
     * Gets current value of property {@link #getRequired required}.
     *
     * Indicates that user input is required for input control labeled by the sap.m.Label. When the property
     * is set to true and associated input field is empty an asterisk character is added to the label text.
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Determines the Label text to be displayed.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getVAlign vAlign}.
     *
     * Specifies the vertical alignment of the `Label` related to the tallest and lowest element on the line.
     *
     * Default value is `Inherit`.
     */
    getVAlign(): VerticalAlign | keyof typeof VerticalAlign;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Determines the width of the label.
     *
     * Default value is `empty string`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.50
     *
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Determines the wrapping of the text within the `Label`. If set to true the `Label` will wrap, when set
     * to false the `Label` will be truncated and replaced with ellipsis which is the default behavior.
     *
     * Default value is `false`.
     */
    getWrapping(): boolean;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     *
     * Default value is `Normal`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * Sets a new value for property {@link #getDesign design}.
     *
     * Sets the design of a Label to either Standard or Bold.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: LabelDesign | keyof typeof LabelDesign
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Sets a new value for property {@link #getDisplayOnly displayOnly}.
     *
     * Determines if the label is in displayOnly mode.
     *
     * **Note:** This property should be used only in Form controls in preview mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisplayOnly(
      /**
       * New value for property `displayOnly`
       */
      bDisplayOnly?: boolean
    ): this;
    /**
     * Sets the associated {@link #getLabelFor labelFor}.
     */
    setLabelFor(
      /**
       * ID of an element which becomes the new target of this labelFor association; alternatively, an element
       * instance may be given
       */
      oLabelFor: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getRequired required}.
     *
     * Indicates that user input is required for input control labeled by the sap.m.Label. When the property
     * is set to true and associated input field is empty an asterisk character is added to the label text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the Label text to be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getVAlign vAlign}.
     *
     * Specifies the vertical alignment of the `Label` related to the tallest and lowest element on the line.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setVAlign(
      /**
       * New value for property `vAlign`
       */
      sVAlign?: VerticalAlign | keyof typeof VerticalAlign
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Determines the width of the label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Determines the wrapping of the text within the `Label`. If set to true the `Label` will wrap, when set
     * to false the `Label` will be truncated and replaced with ellipsis which is the default behavior.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Normal`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
  }

  export interface $LabelSettings extends $ControlSettings {
    /**
     * Sets the design of a Label to either Standard or Bold.
     */
    design?: (LabelDesign | keyof typeof LabelDesign) | PropertyBindingInfo;

    /**
     * Determines the Label text to be displayed.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Determines the width of the label.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Indicates that user input is required for input control labeled by the sap.m.Label. When the property
     * is set to true and associated input field is empty an asterisk character is added to the label text.
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.50.0
     *
     * Determines if the label is in displayOnly mode.
     *
     * **Note:** This property should be used only in Form controls in preview mode.
     */
    displayOnly?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.50
     *
     * Determines the wrapping of the text within the `Label`. If set to true the `Label` will wrap, when set
     * to false the `Label` will be truncated and replaced with ellipsis which is the default behavior.
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Specifies the vertical alignment of the `Label` related to the tallest and lowest element on the line.
     */
    vAlign?: (VerticalAlign | keyof typeof VerticalAlign) | PropertyBindingInfo;

    /**
     * Association to the labeled control. By default the label set the for attribute to the ID of the labeled
     * control. This can be changed by implementing the function getIdForLabel on the labelled control.
     */
    labelFor?: Control | string;
  }
}

declare module "sap/m/LightBox" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { PopupInterface } from "sap/ui/core/library";

  import LightBoxItem from "sap/m/LightBoxItem";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * Represents a popup containing an image and a footer.
   *
   * Overview:
   *
   * The purpose of the control is to display an image in its original size as long as this is possible. On
   * smaller screens images are scaled down to fit.
   *
   * **Notes:**
   * 	 - If the image doesn't load in 10 seconds, an error is displayed.
   * 	 - Setting the `imageContent` aggregation of the control as well as the source of the image and the
   * 			title of the image is mandatory. If the image source is not set, the control will not open.
   * 			Structure:
   *
   * Each LightBox holds a {@link sap.m.LightBoxItem LightBoxItem} which keeps the properties of the image:
   *
   * 	 -  imageSrc - The source URI of the image
   * 	 -  title - The title of the image
   * 	 -  subtitle - The subtitle of the image
   * 	 -  alt - The alt text of the image   Usage:
   *
   * The most common use case is to click on an image thumbnail to view it in bigger size. When the image
   * that should be displayed in the control cannot be loaded, an error is displayed in the popup.
   *
   * Responsive Behavior:
   *
   * On a mobile device, flipping the device to landscape will flip the lightbox and the image will be adjusted
   * to fit the new dimensions.
   *
   * Additional Information:
   *
   * Check out the API Reference.
   */
  export default class LightBox extends Control implements PopupInterface {
    __implements__sap_ui_core_PopupInterface: boolean;
    /**
     * Constructor for a new LightBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/lightbox/ Light Box}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LightBoxSettings
    );
    /**
     * Constructor for a new LightBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/lightbox/ Light Box}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LightBoxSettings
    );

    /**
     * Adds some imageContent to the aggregation {@link #getImageContent imageContent}.
     */
    addImageContent(
      /**
       * The imageContent to add; if empty, nothing is inserted
       */
      oImageContent: LightBoxItem
    ): this;
    /**
     * Binds aggregation {@link #getImageContent imageContent} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindImageContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Closes the LightBox.
     */
    close(): this;
    /**
     * Destroys all the imageContent in the aggregation {@link #getImageContent imageContent}.
     */
    destroyImageContent(): this;
    /**
     * Detaches all handlers and destroys the instance.
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.LightBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LightBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getImageContent imageContent}.
     *
     * Aggregation which holds data about the image and its description. Although multiple LightBoxItems may
     * be added to this aggregation only the first one in the list will be taken into account.
     */
    getImageContent(): LightBoxItem[];
    /**
     * Returns a metadata object for class sap.m.LightBox.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.m.LightBoxItem` in the aggregation {@link #getImageContent imageContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfImageContent(
      /**
       * The imageContent whose index is looked for
       */
      oImageContent: LightBoxItem
    ): int;
    /**
     * Sets up the initial values of the control.
     */
    init(): void;
    /**
     * Inserts a imageContent into the aggregation {@link #getImageContent imageContent}.
     */
    insertImageContent(
      /**
       * The imageContent to insert; if empty, nothing is inserted
       */
      oImageContent: LightBoxItem,
      /**
       * The `0`-based index the imageContent should be inserted at; for a negative value of `iIndex`, the imageContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the imageContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Invalidates the LightBox.
     */
    invalidate(
      /**
       * Origin of the invalidation.
       */
      oOrigin: object
    ): this;
    /**
     * Returns if the LightBox is open.
     */
    isOpen(): boolean;
    /**
     * Overwrites the onAfterRendering.
     */
    onAfterRendering(): void;
    /**
     * Overwrites the onBeforeRendering.
     */
    onBeforeRendering(): void;
    /**
     * Opens the LightBox.
     */
    open(): this;
    /**
     * Removes all the controls from the aggregation {@link #getImageContent imageContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllImageContent(): LightBoxItem[];
    /**
     * Removes a imageContent from the aggregation {@link #getImageContent imageContent}.
     */
    removeImageContent(
      /**
       * The imageContent to remove or its index or id
       */
      vImageContent: int | string | LightBoxItem
    ): LightBoxItem;
    /**
     * Unbinds aggregation {@link #getImageContent imageContent} from model data.
     */
    unbindImageContent(): this;
  }

  export interface $LightBoxSettings extends $ControlSettings {
    /**
     * Aggregation which holds data about the image and its description. Although multiple LightBoxItems may
     * be added to this aggregation only the first one in the list will be taken into account.
     */
    imageContent?: LightBoxItem[] | LightBoxItem | AggregationBindingInfo;
  }
}

declare module "sap/m/LightBoxItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.42
   *
   * Represents an item which is displayed within an sap.m.LightBox. This item holds all properties of the
   * image as well as the title and subtitle.
   */
  export default class LightBoxItem extends UI5Element {
    /**
     * Constructor for a new LightBoxItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LightBoxItemSettings
    );
    /**
     * Constructor for a new LightBoxItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LightBoxItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.LightBoxItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, LightBoxItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAlt alt}.
     *
     * Alt value for the image.
     *
     * Default value is `empty string`.
     */
    getAlt(): string;
    /**
     * Gets current value of property {@link #getImageSrc imageSrc}.
     *
     * Source for the image. This property is mandatory. If not set the popup will not open.
     *
     * Default value is `empty string`.
     */
    getImageSrc(): URI;
    /**
     * Returns a metadata object for class sap.m.LightBoxItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSubtitle subtitle}.
     *
     * Subtitle text for the image.
     *
     * Default value is `empty string`.
     */
    getSubtitle(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title text for the image. This property is mandatory.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Sets the alt text of the image.
     */
    setAlt(
      /**
       * The alt text
       */
      alt: string
    ): this;
    /**
     * Sets the source of the image.
     */
    setImageSrc(
      /**
       * The image URI
       */
      sImageSrc: URI
    ): this;
    /**
     * Sets the subtitle of the image.
     */
    setSubtitle(
      /**
       * The image subtitle
       */
      subtitleText: string
    ): this;
    /**
     * Sets the title of the image.
     */
    setTitle(
      /**
       * The image title
       */
      title: string
    ): this;
  }

  export interface $LightBoxItemSettings extends $ElementSettings {
    /**
     * Source for the image. This property is mandatory. If not set the popup will not open.
     */
    imageSrc?: URI | PropertyBindingInfo;

    /**
     * Alt value for the image.
     */
    alt?: string | PropertyBindingInfo;

    /**
     * Title text for the image. This property is mandatory.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Subtitle text for the image.
     */
    subtitle?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/Link" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IShrinkable,
    IFormContent,
    ITitleContent,
    ID,
    aria,
    URI,
    TextAlign,
    TextDirection,
    CSSSize,
  } from "sap/ui/core/library";

  import { EmptyIndicatorMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * A hyperlink control used to navigate to other apps and web pages or to trigger actions.
   *
   * Overview:
   *
   * The `Link` control is a clickable text element visualized in such a way that it stands out from the standard
   * text. On hover, it changes its style to underlined text to provide additional feedback to the user.
   *
   * Usage:
   *
   * You can set the `Link` to be enabled or disabled.
   *
   * To create a visual hierarchy in large lists of links, you can set the less important links as `subtle`
   * or the more important ones as `emphasized`.
   *
   * To specify where the linked content is opened, you can use the `target` property.
   *
   * Responsive behavior:
   *
   * If there is not enough space, the text of the `Link` becomes truncated. If the `wrapping` property is
   * set to `true`, the text will be displayed on several lines, instead of being truncated.
   */
  export default class Link
    extends Control
    implements IShrinkable, IFormContent, ITitleContent {
    __implements__sap_ui_core_IShrinkable: boolean;
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_ui_core_ITitleContent: boolean;
    /**
     * Constructor for a new `Link`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/link/ Link}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $LinkSettings
    );
    /**
     * Constructor for a new `Link`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/link/ Link}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $LinkSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Link`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Link` itself.
     *
     * Event is fired when the user triggers the link control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Link` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Link`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Link with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Link>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates whether the CTRL key was pressed when the link was selected.
         */
        ctrlKey?: boolean;
        /**
         * Indicates whether the "meta" key was pressed when the link was selected.
         *
         * On Macintosh keyboards, this is the command key (⌘). On Windows keyboards, this is the windows key (⊞).
         */
        metaKey?: boolean;
      }
    ): boolean;
    /**
     * Returns the `sap.m.Link` accessibility information.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.86.0
     *
     * Gets current value of property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered according to
     * the selected value.
     *
     * Default value is `None`.
     */
    getAriaHasPopup(): aria.HasPopup | keyof typeof aria.HasPopup;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getEmphasized emphasized}.
     *
     * Emphasized links look visually more important than regular links.
     *
     * Default value is `false`.
     */
    getEmphasized(): boolean;
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Determines whether the link can be triggered by the user.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getHref href}.
     *
     * Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered,
     * this should not be set, but instead an event handler for the `press` event should be registered.
     */
    getHref(): URI;
    /**
     * Returns a metadata object for class sap.m.Link.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.84
     *
     * Gets current value of property {@link #getRel rel}.
     *
     * Specifies the value of the HTML `rel` attribute.
     *
     * **Note:** A default value of `noopener noreferrer` is set only to links that have a cross-origin URL
     * and a specified `target` with value other than `_self`.
     */
    getRel(): string;
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getSubtle subtle}.
     *
     * Subtle links look more like standard text than like links. They should only be used to help with visual
     * hierarchy between large data lists of important and less important links. Subtle links should not be
     * used in any other use case.
     *
     * Default value is `false`.
     */
    getSubtle(): boolean;
    /**
     * Gets current value of property {@link #getTarget target}.
     *
     * Specifies a target where the linked content will open.
     *
     * Options are the standard values for window.open() supported by browsers: `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered. This property is only used when the `href` property
     * is set.
     */
    getTarget(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the displayed link text.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Determines the horizontal alignment of the text.
     *
     * Default value is `Initial`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the parent DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.54.0
     *
     * Gets current value of property {@link #getValidateUrl validateUrl}.
     *
     * Defines whether the link target URI should be validated.
     *
     * If validation fails, the value of the `href` property will still be set, but will not be applied to the
     * DOM.
     *
     * **Note:** Additional URLs are allowed through {@link module:sap/base/security/URLListValidator URLListValidator}.
     *
     * Default value is `false`.
     */
    getValidateUrl(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size.
     * When left blank, the text defines the size.
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Determines whether the link text is allowed to wrap when there is no sufficient space.
     *
     * Default value is `false`.
     */
    getWrapping(): boolean;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.86.0
     *
     * Sets a new value for property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered according to
     * the selected value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAriaHasPopup(
      /**
       * New value for property `ariaHasPopup`
       */
      sAriaHasPopup?: aria.HasPopup | keyof typeof aria.HasPopup
    ): this;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getEmphasized emphasized}.
     *
     * Emphasized links look visually more important than regular links.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEmphasized(
      /**
       * New value for property `emphasized`
       */
      bEmphasized?: boolean
    ): this;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Determines whether the link can be triggered by the user.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHref href}.
     *
     * Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered,
     * this should not be set, but instead an event handler for the `press` event should be registered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHref(
      /**
       * New value for property `href`
       */
      sHref?: URI
    ): this;
    /**
     * @SINCE 1.84
     *
     * Sets a new value for property {@link #getRel rel}.
     *
     * Specifies the value of the HTML `rel` attribute.
     *
     * **Note:** A default value of `noopener noreferrer` is set only to links that have a cross-origin URL
     * and a specified `target` with value other than `_self`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRel(
      /**
       * New value for property `rel`
       */
      sRel?: string
    ): this;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getSubtle subtle}.
     *
     * Subtle links look more like standard text than like links. They should only be used to help with visual
     * hierarchy between large data lists of important and less important links. Subtle links should not be
     * used in any other use case.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSubtle(
      /**
       * New value for property `subtle`
       */
      bSubtle?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTarget target}.
     *
     * Specifies a target where the linked content will open.
     *
     * Options are the standard values for window.open() supported by browsers: `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered. This property is only used when the `href` property
     * is set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTarget(
      /**
       * New value for property `target`
       */
      sTarget?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the displayed link text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Determines the horizontal alignment of the text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Initial`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the parent DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.54.0
     *
     * Sets a new value for property {@link #getValidateUrl validateUrl}.
     *
     * Defines whether the link target URI should be validated.
     *
     * If validation fails, the value of the `href` property will still be set, but will not be applied to the
     * DOM.
     *
     * **Note:** Additional URLs are allowed through {@link module:sap/base/security/URLListValidator URLListValidator}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setValidateUrl(
      /**
       * New value for property `validateUrl`
       */
      bValidateUrl?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size.
     * When left blank, the text defines the size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Determines whether the link text is allowed to wrap when there is no sufficient space.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Link`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Link` itself.
     *
     * Event is fired when the user triggers the link control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Link` itself
       */
      oListener?: object
    ): this;
  }

  export interface $LinkSettings extends $ControlSettings {
    /**
     * Defines the displayed link text.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Determines whether the link can be triggered by the user.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Specifies a target where the linked content will open.
     *
     * Options are the standard values for window.open() supported by browsers: `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered. This property is only used when the `href` property
     * is set.
     */
    target?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.84
     *
     * Specifies the value of the HTML `rel` attribute.
     *
     * **Note:** A default value of `noopener noreferrer` is set only to links that have a cross-origin URL
     * and a specified `target` with value other than `_self`.
     */
    rel?: string | PropertyBindingInfo;

    /**
     * Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size.
     * When left blank, the text defines the size.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered,
     * this should not be set, but instead an event handler for the `press` event should be registered.
     */
    href?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.54.0
     *
     * Defines whether the link target URI should be validated.
     *
     * If validation fails, the value of the `href` property will still be set, but will not be applied to the
     * DOM.
     *
     * **Note:** Additional URLs are allowed through {@link module:sap/base/security/URLListValidator URLListValidator}.
     */
    validateUrl?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the link text is allowed to wrap when there is no sufficient space.
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Determines the horizontal alignment of the text.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the parent DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Subtle links look more like standard text than like links. They should only be used to help with visual
     * hierarchy between large data lists of important and less important links. Subtle links should not be
     * used in any other use case.
     */
    subtle?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Emphasized links look visually more important than regular links.
     */
    emphasized?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.86.0
     *
     * Specifies the value of the `aria-haspopup` attribute
     *
     * If the value is `None`, the attribute will not be rendered. Otherwise it will be rendered according to
     * the selected value.
     */
    ariaHasPopup?:
      | (aria.HasPopup | keyof typeof aria.HasPopup)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event is fired when the user triggers the link control.
     */
    press?: Function;
  }
}

declare module "sap/m/List" {
  import { default as ListBase, $ListBaseSettings } from "sap/m/ListBase";

  import { BackgroundDesign } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * The List control provides a container for all types of list items. For mobile devices, the recommended
   * limit of list items is 100 to assure proper performance. To improve initial rendering of large lists,
   * use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..
   *
   * See section "{@link topic:1da158152f644ba1ad408a3e982fd3df Lists}" in the documentation for an introduction
   * to `sap.m.List` control.
   */
  export default class List extends ListBase {
    /**
     * Constructor for a new List.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/list-overview/ List}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListSettings
    );
    /**
     * Constructor for a new List.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/list-overview/ List}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListSettings
    );

    /**
     * Creates a new subclass of class sap.m.List with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, List>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.14
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Sets the background style of the list. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     *
     * Default value is `Solid`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Returns a metadata object for class sap.m.List.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.14
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Sets the background style of the list. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Solid`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
  }

  export interface $ListSettings extends $ListBaseSettings {
    /**
     * @SINCE 1.14
     *
     * Sets the background style of the list. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/ListBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, IContextMenu, CSSSize } from "sap/ui/core/library";

  import ListItemBase from "sap/m/ListItemBase";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import {
    SwipeDirection,
    ListGrowingDirection,
    ListHeaderDesign,
    ListKeyboardMode,
    ListMode,
    ListSeparators,
    Sticky,
  } from "sap/m/library";

  import Toolbar from "sap/m/Toolbar";

  import ItemNavigation from "sap/ui/core/delegate/ItemNavigation";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Context from "sap/ui/model/Context";

  /**
   * @SINCE 1.16
   *
   * The `sap.m.ListBase` control provides a base functionality of the `sap.m.List` and `sap.m.Table` controls.
   * Selection, deletion, unread states and inset style are also maintained in `sap.m.ListBase`.
   *
   * See section "{@link topic:295e44b2d0144318bcb7bdd56bfa5189 List, List Item, and Table}" in the documentation
   * for an introduction to subclasses of `sap.m.ListBase` control.
   *
   * **Note:** The ListBase including all contained items may be completely re-rendered when the data of a
   * bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer
   * delays for lists that contain many items. As such the usage of a list is not recommended for these use
   * cases.
   */
  export default class ListBase extends Control {
    /**
     * Constructor for a new ListBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListBaseSettings
    );
    /**
     * Constructor for a new ListBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListBaseSettings
    );

    /**
     * @SINCE 1.28.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ListItemBase
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    attachBeforeOpenContextMenu(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:delete delete} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when delete icon is pressed by user.
     */
    attachDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use "updateFinished" event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:growingFinished growingFinished} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after the new growing chunk has been fetched from the model and processed by the control.
     */
    attachGrowingFinished(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use `updateStarted` event with listening `changeReason`.
     *
     * Attaches event handler `fnFunction` to the {@link #event:growingStarted growingStarted} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires before the new growing chunk is requested from the model.
     */
    attachGrowingStarted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.20
     *
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when an item is pressed unless the item's `type` property is `Inactive`.
     */
    attachItemPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.16) - Use the `selectionChange` event instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when selection is changed via user interaction. In `MultiSelect` mode, this event is also fired
     * on deselection.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:swipe swipe} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after user's swipe action and before the `swipeContent` is shown. On the `swipe` event handler,
     * `swipeContent` can be changed according to the swiped item. Calling the `preventDefault` method of the
     * event cancels the swipe action.
     *
     * **Note:** There is no accessible alternative provided by the control for swiping. Applications that use
     * this functionality must provide an accessible alternative UI to perform the same action.
     */
    attachSwipe(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateFinished updateFinished} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after `items` binding is updated and processed by the control.
     */
    attachUpdateFinished(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateStarted updateStarted} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires before `items` binding is updated (e.g. sorting, filtering)
     *
     * **Note:** Event handler should not invalidate the control.
     */
    attachUpdateStarted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.54
     *
     * Destroys the contextMenu in the aggregation {@link #getContextMenu contextMenu}.
     */
    destroyContextMenu(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys the headerToolbar in the aggregation {@link #getHeaderToolbar headerToolbar}.
     */
    destroyHeaderToolbar(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
     */
    destroyInfoToolbar(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Destroys the swipeContent in the aggregation {@link #getSwipeContent swipeContent}.
     */
    destroySwipeContent(): this;
    /**
     * @SINCE 1.54
     *
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpenContextMenu(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:delete delete} event of this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use "updateFinished" event.
     *
     * Detaches event handler `fnFunction` from the {@link #event:growingFinished growingFinished} event of
     * this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachGrowingFinished(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use `updateStarted` event with listening `changeReason`.
     *
     * Detaches event handler `fnFunction` from the {@link #event:growingStarted growingStarted} event of this
     * `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachGrowingStarted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.20
     *
     * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.16) - Use the `selectionChange` event instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:swipe swipe} event of this `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSwipe(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Detaches event handler `fnFunction` from the {@link #event:updateFinished updateFinished} event of this
     * `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateFinished(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Detaches event handler `fnFunction` from the {@link #event:updateStarted updateStarted} event of this
     * `sap.m.ListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateStarted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ListBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ListBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.54
     *
     * Fires event {@link #event:beforeOpenContextMenu beforeOpenContextMenu} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeOpenContextMenu(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Item in which the context menu was opened.
         */
        listItem?: ListItemBase;
      }
    ): boolean;
    /**
     * Fires event {@link #event:delete delete} to attached listeners.
     */
    fireDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item which fired the delete event.
         */
        listItem?: ListItemBase;
      }
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use "updateFinished" event.
     *
     * Fires event {@link #event:growingFinished growingFinished} to attached listeners.
     */
    fireGrowingFinished(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Actual number of items.
         */
        actual?: int;
        /**
         * Total number of items.
         */
        total?: int;
      }
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use `updateStarted` event with listening `changeReason`.
     *
     * Fires event {@link #event:growingStarted growingStarted} to attached listeners.
     */
    fireGrowingStarted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Actual number of items.
         */
        actual?: int;
        /**
         * Total number of items.
         */
        total?: int;
      }
    ): this;
    /**
     * @SINCE 1.20
     *
     * Fires event {@link #event:itemPress itemPress} to attached listeners.
     */
    fireItemPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item which fired the pressed event.
         */
        listItem?: ListItemBase;
        /**
         * The control which caused the press event within the container.
         */
        srcControl?: Control;
      }
    ): this;
    /**
     * @deprecated (since 1.16) - Use the `selectionChange` event instead.
     *
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item which fired the select event.
         */
        listItem?: ListItemBase;
      }
    ): this;
    /**
     * @SINCE 1.16
     *
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item whose selection has changed. In `MultiSelect` mode, only the up-most selected item is returned.
         * This parameter can be used for single-selection modes.
         */
        listItem?: ListItemBase;
        /**
         * Array of items whose selection has changed. This parameter can be used for `MultiSelect` mode.
         */
        listItems?: ListItemBase[];
        /**
         * Indicates whether the `listItem` parameter is selected or not.
         */
        selected?: boolean;
        /**
         * Indicates whether the select all action is triggered or not.
         */
        selectAll?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:swipe swipe} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireSwipe(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item which fired the swipe.
         */
        listItem?: ListItemBase;
        /**
         * Aggregated `swipeContent` control that is shown on the right hand side of the item.
         */
        swipeContent?: Control;
        /**
         * Holds which control caused the swipe event within the item.
         */
        srcControl?: Control;
        /**
         * Shows in which direction the user swipes and can have the value `BeginToEnd` (left to right in LTR languages
         * and right to left in RTL languages) or `EndToBegin` (right to left in LTR languages and left to right
         * in RTL languages)
         */
        swipeDirection?: SwipeDirection | keyof typeof SwipeDirection;
      }
    ): boolean;
    /**
     * @SINCE 1.16.3
     *
     * Fires event {@link #event:updateFinished updateFinished} to attached listeners.
     */
    fireUpdateFinished(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
         */
        reason?: string;
        /**
         * Actual number of items.
         */
        actual?: int;
        /**
         * The total count of bound items. This can be used if the `growing` property is set to `true`.
         */
        total?: int;
      }
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Fires event {@link #event:updateStarted updateStarted} to attached listeners.
     */
    fireUpdateStarted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
         */
        reason?: string;
        /**
         * Actual number of items.
         */
        actual?: int;
        /**
         * The total count of bound items. This can be used if the `growing` property is set to `true`.
         */
        total?: int;
      }
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.54
     *
     * Gets content of aggregation {@link #getContextMenu contextMenu}.
     *
     * Defines the context menu of the items.
     */
    getContextMenu(): IContextMenu;
    /**
     * @SINCE 1.20.2
     *
     * Gets current value of property {@link #getEnableBusyIndicator enableBusyIndicator}.
     *
     * When this property is set to `true`, the control will automatically display a busy indicator when it
     * detects that data is being loaded. This busy indicator blocks the interaction with the items until data
     * loading is finished. By default, the busy indicator will be shown after one second. This behavior can
     * be customized by setting the `busyIndicatorDelay` property.
     *
     * Default value is `true`.
     */
    getEnableBusyIndicator(): boolean;
    /**
     * Gets current value of property {@link #getFooterText footerText}.
     *
     * Defines the footer text that appears in the control.
     */
    getFooterText(): string;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getGrowing growing}.
     *
     * If set to `true`, enables the growing feature of the control to load more items by requesting from the
     * model. **Note:**: This feature only works when an `items` aggregation is bound. Growing must not be used
     * together with two-way binding.
     *
     * Default value is `false`.
     */
    getGrowing(): boolean;
    /**
     * @SINCE 1.40.0
     *
     * Gets current value of property {@link #getGrowingDirection growingDirection}.
     *
     * Defines the direction of the growing feature. If set to `Downwards` the user has to scroll down to load
     * more items or the growing button is displayed at the bottom. If set to `Upwards` the user has to scroll
     * up to load more items or the growing button is displayed at the top.
     *
     * Default value is `Downwards`.
     */
    getGrowingDirection():
      | ListGrowingDirection
      | keyof typeof ListGrowingDirection;
    /**
     * @SINCE 1.16
     *
     * Returns growing information as object with "actual" and "total" keys. Note: This function returns "null"
     * if "growing" feature is disabled.
     */
    getGrowingInfo(): object;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getGrowingScrollToLoad growingScrollToLoad}.
     *
     * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed
     * at the bottom/top of the control. **Note:** This property can only be used if the `growing` property
     * is set to `true` and only if there is one instance of `sap.m.List` or `sap.m.Table` inside the scrollable
     * scroll container (e.g `sap.m.Page`).
     *
     * Default value is `false`.
     */
    getGrowingScrollToLoad(): boolean;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
     *
     * Defines the number of items to be requested from the model for each grow. This property can only be used
     * if the `growing` property is set to `true`.
     *
     * Default value is `20`.
     */
    getGrowingThreshold(): int;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getGrowingTriggerText growingTriggerText}.
     *
     * Defines the text displayed on the growing button. The default is a translated text ("More") coming from
     * the message bundle. This property can only be used if the `growing` property is set to `true`.
     */
    getGrowingTriggerText(): string;
    /**
     * @SINCE 1.14
     * @deprecated (since 1.16) - No longer has any functionality.
     *
     * Gets current value of property {@link #getHeaderDesign headerDesign}.
     *
     * Defines the header style of the control. Possible values are `Standard` and `Plain`.
     *
     * Default value is `Standard`.
     */
    getHeaderDesign(): ListHeaderDesign | keyof typeof ListHeaderDesign;
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * Defines the header text that appears in the control. **Note:** If `headerToolbar` aggregation is set,
     * then this property is ignored.
     */
    getHeaderText(): string;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getHeaderToolbar headerToolbar}.
     *
     * The header area can be used as a toolbar to add extra controls for user interactions. **Note:** When
     * set, this overwrites the `headerText` property.
     */
    getHeaderToolbar(): Toolbar;
    /**
     * Gets current value of property {@link #getIncludeItemInSelection includeItemInSelection}.
     *
     * Defines whether the items are selectable by clicking on the item itself (`true`) rather than having to
     * set the selection control first. **Note:** The `SingleSelectMaster` mode also provides this functionality
     * by default.
     *
     * Default value is `false`.
     */
    getIncludeItemInSelection(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
     *
     * A toolbar that is placed below the header to show extra information to the user.
     */
    getInfoToolbar(): Toolbar;
    /**
     * Gets current value of property {@link #getInset inset}.
     *
     * Defines the indentation of the container. Setting it to `true` indents the list.
     *
     * Default value is `false`.
     */
    getInset(): boolean;
    /**
     * @SINCE 1.16.5
     *
     * Returns the ItemNavigation delegate of the list
     */
    getItemNavigation(): ItemNavigation | undefined;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items contained within this control.
     */
    getItems(): ListItemBase[];
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getKeyboardMode keyboardMode}.
     *
     * Defines keyboard handling behavior of the control.
     *
     * Default value is `Navigation`.
     */
    getKeyboardMode(): ListKeyboardMode | keyof typeof ListKeyboardMode;
    /**
     * Returns the last list mode, the mode that is rendered This can be used to detect mode changes during
     * rendering
     */
    getLastMode(): void;
    /**
     * Returns a metadata object for class sap.m.ListBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines the mode of the control (e.g. `None`, `SingleSelect`, `MultiSelect`, `Delete`).
     *
     * Default value is `None`.
     */
    getMode(): ListMode | keyof typeof ListMode;
    /**
     * Gets current value of property {@link #getModeAnimationOn modeAnimationOn}.
     *
     * Defines if animations will be shown while switching between modes.
     *
     * Default value is `true`.
     */
    getModeAnimationOn(): boolean;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * This text is displayed when the control contains no items.
     */
    getNoDataText(): string;
    /**
     * @SINCE 1.16.6
     *
     * Gets current value of property {@link #getRememberSelections rememberSelections}.
     *
     * If set to true, this control remembers and retains the selection of the items after a binding update
     * has been performed (e.g. sorting, filtering). **Note:** This feature works only if two-way data binding
     * for the `selected` property of the item is not used. It also needs to be turned off if the binding context
     * of the item does not always point to the same entry in the model, for example, if the order of the data
     * in the `JSONModel` is changed.
     *
     * Default value is `true`.
     */
    getRememberSelections(): boolean;
    /**
     * @SINCE 1.18.6
     *
     * Returns the binding contexts of the selected items. Note: This method returns an empty array if no databinding
     * is used.
     */
    getSelectedContexts(
      /**
       * Set true to include even invisible selected items(e.g. the selections from the previous filters). Note:
       * In single selection modes, only the last selected item's binding context is returned in array.
       */
      bAll?: boolean
    ): Context[];
    /**
     * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled
     * and multiple items are selected, only the up-most selected item is returned.
     */
    getSelectedItem(): ListItemBase;
    /**
     * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
     */
    getSelectedItems(): ListItemBase[];
    /**
     * Gets current value of property {@link #getShowNoData showNoData}.
     *
     * Defines whether or not the text specified in the `noDataText` property is displayed.
     *
     * Default value is `true`.
     */
    getShowNoData(): boolean;
    /**
     * Gets current value of property {@link #getShowSeparators showSeparators}.
     *
     * Defines which item separator style will be used.
     *
     * Default value is `All`.
     */
    getShowSeparators(): ListSeparators | keyof typeof ListSeparators;
    /**
     * Gets current value of property {@link #getShowUnread showUnread}.
     *
     * Activates the unread indicator for all items, if set to `true`.
     *
     * Default value is `false`.
     */
    getShowUnread(): boolean;
    /**
     * @SINCE 1.58
     *
     * Gets current value of property {@link #getSticky sticky}.
     *
     * Defines the section of the control that remains fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Enabling sticky column headers in List controls will not have any effect.
     *
     * There are some known restrictions. A few are given below:
     * 	 - If the control is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * 			style definition, this can prevent the sticky elements of the control from becoming fixed at the top
     * 			of the viewport.
     * 	 - If sticky column headers are enabled in the `sap.m.Table` control, setting focus on the column headers
     * 			will let the table scroll to the top.
     * 	 - A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get
     * 			an intransparent background color.
     * 	 - This feature supports only the default height of the toolbar control.
     */
    getSticky(): Array<Sticky | keyof typeof Sticky>;
    /**
     * Gets content of aggregation {@link #getSwipeContent swipeContent}.
     *
     * User can swipe to bring in this control on the right hand side of an item. **Note:**
     * 	 - For non-touch screen devices, this functionality is ignored.
     * 	 - There is no accessible alternative provided by the control for swiping. Applications that use this
     * 			functionality must provide an accessible alternative UI to perform the same action.
     */
    getSwipeContent(): Control;
    /**
     * Gets current value of property {@link #getSwipeDirection swipeDirection}.
     *
     * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control
     * defined in the `swipeContent` aggregation.
     *
     * Default value is `Both`.
     */
    getSwipeDirection(): SwipeDirection | keyof typeof SwipeDirection;
    /**
     * Returns swiped list item. When no item is swiped, "null" is returned.
     */
    getSwipedItem(): ListItemBase;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the control.
     *
     * Default value is `"100%"`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.ListItemBase` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ListItemBase
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ListItemBase,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ListItemBase[];
    /**
     * @SINCE 1.28.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ListItemBase
    ): ListItemBase;
    /**
     * Removes visible selections of the current selection mode.
     */
    removeSelections(
      /**
       * Since version 1.16.3. This control keeps old selections after filter or sorting. Set this parameter "true"
       * to remove all selections.
       */
      bAll: boolean
    ): this;
    /**
     * Scrolls the list so that the item with the given index is in the viewport. If the index is -1, it scrolls
     * to the bottom of the list. If the growing feature is enabled, the list is scrolled to the last available
     * item.
     *
     * Growing in combination with `growingScrollToLoad=true` can result in loading of new items when scrolling
     * to the bottom of the list.
     */
    scrollToIndex(
      /**
       * The list item index that must be scrolled into the viewport
       */
      iIndex: number
    ): Promise<any>;
    /**
     * @SINCE 1.16
     *
     * Select all items in "MultiSelection" mode.
     *
     * **Note:** In case `growing` is enabled, only the visible items in the list will be selected.
     */
    selectAll(): this;
    /**
     * @SINCE 1.54
     *
     * Sets the aggregated {@link #getContextMenu contextMenu}.
     */
    setContextMenu(
      /**
       * The contextMenu to set
       */
      oContextMenu: IContextMenu
    ): this;
    /**
     * @SINCE 1.20.2
     *
     * Sets a new value for property {@link #getEnableBusyIndicator enableBusyIndicator}.
     *
     * When this property is set to `true`, the control will automatically display a busy indicator when it
     * detects that data is being loaded. This busy indicator blocks the interaction with the items until data
     * loading is finished. By default, the busy indicator will be shown after one second. This behavior can
     * be customized by setting the `busyIndicatorDelay` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableBusyIndicator(
      /**
       * New value for property `enableBusyIndicator`
       */
      bEnableBusyIndicator?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFooterText footerText}.
     *
     * Defines the footer text that appears in the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFooterText(
      /**
       * New value for property `footerText`
       */
      sFooterText?: string
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * If set to `true`, enables the growing feature of the control to load more items by requesting from the
     * model. **Note:**: This feature only works when an `items` aggregation is bound. Growing must not be used
     * together with two-way binding.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      bGrowing?: boolean
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Sets a new value for property {@link #getGrowingDirection growingDirection}.
     *
     * Defines the direction of the growing feature. If set to `Downwards` the user has to scroll down to load
     * more items or the growing button is displayed at the bottom. If set to `Upwards` the user has to scroll
     * up to load more items or the growing button is displayed at the top.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Downwards`.
     */
    setGrowingDirection(
      /**
       * New value for property `growingDirection`
       */
      sGrowingDirection?:
        | ListGrowingDirection
        | keyof typeof ListGrowingDirection
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getGrowingScrollToLoad growingScrollToLoad}.
     *
     * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed
     * at the bottom/top of the control. **Note:** This property can only be used if the `growing` property
     * is set to `true` and only if there is one instance of `sap.m.List` or `sap.m.Table` inside the scrollable
     * scroll container (e.g `sap.m.Page`).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGrowingScrollToLoad(
      /**
       * New value for property `growingScrollToLoad`
       */
      bGrowingScrollToLoad?: boolean
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getGrowingThreshold growingThreshold}.
     *
     * Defines the number of items to be requested from the model for each grow. This property can only be used
     * if the `growing` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `20`.
     */
    setGrowingThreshold(
      /**
       * New value for property `growingThreshold`
       */
      iGrowingThreshold?: int
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getGrowingTriggerText growingTriggerText}.
     *
     * Defines the text displayed on the growing button. The default is a translated text ("More") coming from
     * the message bundle. This property can only be used if the `growing` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setGrowingTriggerText(
      /**
       * New value for property `growingTriggerText`
       */
      sGrowingTriggerText?: string
    ): this;
    /**
     * @SINCE 1.14
     * @deprecated (since 1.16) - No longer has any functionality.
     *
     * Sets a new value for property {@link #getHeaderDesign headerDesign}.
     *
     * Defines the header style of the control. Possible values are `Standard` and `Plain`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setHeaderDesign(
      /**
       * New value for property `headerDesign`
       */
      sHeaderDesign?: ListHeaderDesign | keyof typeof ListHeaderDesign
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * Defines the header text that appears in the control. **Note:** If `headerToolbar` aggregation is set,
     * then this property is ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the aggregated {@link #getHeaderToolbar headerToolbar}.
     */
    setHeaderToolbar(
      /**
       * The headerToolbar to set
       */
      oHeaderToolbar: Toolbar
    ): this;
    /**
     * Sets a new value for property {@link #getIncludeItemInSelection includeItemInSelection}.
     *
     * Defines whether the items are selectable by clicking on the item itself (`true`) rather than having to
     * set the selection control first. **Note:** The `SingleSelectMaster` mode also provides this functionality
     * by default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIncludeItemInSelection(
      /**
       * New value for property `includeItemInSelection`
       */
      bIncludeItemInSelection?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
     */
    setInfoToolbar(
      /**
       * The infoToolbar to set
       */
      oInfoToolbar: Toolbar
    ): this;
    /**
     * Sets a new value for property {@link #getInset inset}.
     *
     * Defines the indentation of the container. Setting it to `true` indents the list.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInset(
      /**
       * New value for property `inset`
       */
      bInset?: boolean
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getKeyboardMode keyboardMode}.
     *
     * Defines keyboard handling behavior of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Navigation`.
     */
    setKeyboardMode(
      /**
       * New value for property `keyboardMode`
       */
      sKeyboardMode?: ListKeyboardMode | keyof typeof ListKeyboardMode
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines the mode of the control (e.g. `None`, `SingleSelect`, `MultiSelect`, `Delete`).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ListMode | keyof typeof ListMode
    ): this;
    /**
     * Sets a new value for property {@link #getModeAnimationOn modeAnimationOn}.
     *
     * Defines if animations will be shown while switching between modes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setModeAnimationOn(
      /**
       * New value for property `modeAnimationOn`
       */
      bModeAnimationOn?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * This text is displayed when the control contains no items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * @SINCE 1.16.6
     *
     * Sets a new value for property {@link #getRememberSelections rememberSelections}.
     *
     * If set to true, this control remembers and retains the selection of the items after a binding update
     * has been performed (e.g. sorting, filtering). **Note:** This feature works only if two-way data binding
     * for the `selected` property of the item is not used. It also needs to be turned off if the binding context
     * of the item does not always point to the same entry in the model, for example, if the order of the data
     * in the `JSONModel` is changed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setRememberSelections(
      /**
       * New value for property `rememberSelections`
       */
      bRememberSelections?: boolean
    ): this;
    /**
     * Selects or deselects the given list item.
     */
    setSelectedItem(
      /**
       * The list item whose selection to be changed. This parameter is mandatory.
       */
      oListItem: ListItemBase,
      /**
       * Sets selected status of the list item
       */
      bSelect?: boolean
    ): this;
    /**
     * Sets a list item to be selected by id. In single mode the method removes the previous selection.
     */
    setSelectedItemById(
      /**
       * The id of the list item whose selection to be changed.
       */
      sId: string,
      /**
       * Sets selected status of the list item
       */
      bSelect?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowNoData showNoData}.
     *
     * Defines whether or not the text specified in the `noDataText` property is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowNoData(
      /**
       * New value for property `showNoData`
       */
      bShowNoData?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSeparators showSeparators}.
     *
     * Defines which item separator style will be used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `All`.
     */
    setShowSeparators(
      /**
       * New value for property `showSeparators`
       */
      sShowSeparators?: ListSeparators | keyof typeof ListSeparators
    ): this;
    /**
     * Sets a new value for property {@link #getShowUnread showUnread}.
     *
     * Activates the unread indicator for all items, if set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowUnread(
      /**
       * New value for property `showUnread`
       */
      bShowUnread?: boolean
    ): this;
    /**
     * @SINCE 1.58
     *
     * Sets a new value for property {@link #getSticky sticky}.
     *
     * Defines the section of the control that remains fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Enabling sticky column headers in List controls will not have any effect.
     *
     * There are some known restrictions. A few are given below:
     * 	 - If the control is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * 			style definition, this can prevent the sticky elements of the control from becoming fixed at the top
     * 			of the viewport.
     * 	 - If sticky column headers are enabled in the `sap.m.Table` control, setting focus on the column headers
     * 			will let the table scroll to the top.
     * 	 - A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get
     * 			an intransparent background color.
     * 	 - This feature supports only the default height of the toolbar control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSticky(
      /**
       * New value for property `sticky`
       */
      sSticky: Array<Sticky | keyof typeof Sticky>
    ): this;
    /**
     * Sets the aggregated {@link #getSwipeContent swipeContent}.
     */
    setSwipeContent(
      /**
       * The swipeContent to set
       */
      oSwipeContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getSwipeDirection swipeDirection}.
     *
     * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control
     * defined in the `swipeContent` aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Both`.
     */
    setSwipeDirection(
      /**
       * New value for property `swipeDirection`
       */
      sSwipeDirection?: SwipeDirection | keyof typeof SwipeDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done,
     * you can/should use this method to hide swipeContent from screen. Note: If users try to tap inside of
     * the list but outside of the swipeContent then control hides automatically.
     */
    swipeOut(
      /**
       * This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out
       * animation is finished.
       */
      oCallback: any
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    attachBeforeOpenContextMenu(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:delete delete} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when delete icon is pressed by user.
     */
    attachDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use "updateFinished" event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:growingFinished growingFinished} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after the new growing chunk has been fetched from the model and processed by the control.
     */
    attachGrowingFinished(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use `updateStarted` event with listening `changeReason`.
     *
     * Attaches event handler `fnFunction` to the {@link #event:growingStarted growingStarted} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires before the new growing chunk is requested from the model.
     */
    attachGrowingStarted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.20
     *
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when an item is pressed unless the item's `type` property is `Inactive`.
     */
    attachItemPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.16) - Use the `selectionChange` event instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when selection is changed via user interaction. In `MultiSelect` mode, this event is also fired
     * on deselection.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:swipe swipe} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after user's swipe action and before the `swipeContent` is shown. On the `swipe` event handler,
     * `swipeContent` can be changed according to the swiped item. Calling the `preventDefault` method of the
     * event cancels the swipe action.
     *
     * **Note:** There is no accessible alternative provided by the control for swiping. Applications that use
     * this functionality must provide an accessible alternative UI to perform the same action.
     */
    attachSwipe(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateFinished updateFinished} event of this
     * `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires after `items` binding is updated and processed by the control.
     */
    attachUpdateFinished(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateStarted updateStarted} event of this `sap.m.ListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListBase` itself.
     *
     * Fires before `items` binding is updated (e.g. sorting, filtering)
     *
     * **Note:** Event handler should not invalidate the control.
     */
    attachUpdateStarted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListBase` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ListBaseSettings extends $ControlSettings {
    /**
     * Defines the indentation of the container. Setting it to `true` indents the list.
     */
    inset?: boolean | PropertyBindingInfo;

    /**
     * Defines the header text that appears in the control. **Note:** If `headerToolbar` aggregation is set,
     * then this property is ignored.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.14
     * @deprecated (since 1.16) - No longer has any functionality.
     *
     * Defines the header style of the control. Possible values are `Standard` and `Plain`.
     */
    headerDesign?:
      | (ListHeaderDesign | keyof typeof ListHeaderDesign)
      | PropertyBindingInfo;

    /**
     * Defines the footer text that appears in the control.
     */
    footerText?: string | PropertyBindingInfo;

    /**
     * Defines the mode of the control (e.g. `None`, `SingleSelect`, `MultiSelect`, `Delete`).
     */
    mode?: (ListMode | keyof typeof ListMode) | PropertyBindingInfo;

    /**
     * Sets the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines whether the items are selectable by clicking on the item itself (`true`) rather than having to
     * set the selection control first. **Note:** The `SingleSelectMaster` mode also provides this functionality
     * by default.
     */
    includeItemInSelection?: boolean | PropertyBindingInfo;

    /**
     * Activates the unread indicator for all items, if set to `true`.
     */
    showUnread?: boolean | PropertyBindingInfo;

    /**
     * This text is displayed when the control contains no items.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Defines whether or not the text specified in the `noDataText` property is displayed.
     */
    showNoData?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.20.2
     *
     * When this property is set to `true`, the control will automatically display a busy indicator when it
     * detects that data is being loaded. This busy indicator blocks the interaction with the items until data
     * loading is finished. By default, the busy indicator will be shown after one second. This behavior can
     * be customized by setting the `busyIndicatorDelay` property.
     */
    enableBusyIndicator?: boolean | PropertyBindingInfo;

    /**
     * Defines if animations will be shown while switching between modes.
     */
    modeAnimationOn?: boolean | PropertyBindingInfo;

    /**
     * Defines which item separator style will be used.
     */
    showSeparators?:
      | (ListSeparators | keyof typeof ListSeparators)
      | PropertyBindingInfo;

    /**
     * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control
     * defined in the `swipeContent` aggregation.
     */
    swipeDirection?:
      | (SwipeDirection | keyof typeof SwipeDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * If set to `true`, enables the growing feature of the control to load more items by requesting from the
     * model. **Note:**: This feature only works when an `items` aggregation is bound. Growing must not be used
     * together with two-way binding.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * Defines the number of items to be requested from the model for each grow. This property can only be used
     * if the `growing` property is set to `true`.
     */
    growingThreshold?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * Defines the text displayed on the growing button. The default is a translated text ("More") coming from
     * the message bundle. This property can only be used if the `growing` property is set to `true`.
     */
    growingTriggerText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed
     * at the bottom/top of the control. **Note:** This property can only be used if the `growing` property
     * is set to `true` and only if there is one instance of `sap.m.List` or `sap.m.Table` inside the scrollable
     * scroll container (e.g `sap.m.Page`).
     */
    growingScrollToLoad?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.40.0
     *
     * Defines the direction of the growing feature. If set to `Downwards` the user has to scroll down to load
     * more items or the growing button is displayed at the bottom. If set to `Upwards` the user has to scroll
     * up to load more items or the growing button is displayed at the top.
     */
    growingDirection?:
      | (ListGrowingDirection | keyof typeof ListGrowingDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.16.6
     *
     * If set to true, this control remembers and retains the selection of the items after a binding update
     * has been performed (e.g. sorting, filtering). **Note:** This feature works only if two-way data binding
     * for the `selected` property of the item is not used. It also needs to be turned off if the binding context
     * of the item does not always point to the same entry in the model, for example, if the order of the data
     * in the `JSONModel` is changed.
     */
    rememberSelections?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Defines keyboard handling behavior of the control.
     */
    keyboardMode?:
      | (ListKeyboardMode | keyof typeof ListKeyboardMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.58
     *
     * Defines the section of the control that remains fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Enabling sticky column headers in List controls will not have any effect.
     *
     * There are some known restrictions. A few are given below:
     * 	 - If the control is placed in layout containers that have the `overflow: hidden` or `overflow: auto`
     * 			style definition, this can prevent the sticky elements of the control from becoming fixed at the top
     * 			of the viewport.
     * 	 - If sticky column headers are enabled in the `sap.m.Table` control, setting focus on the column headers
     * 			will let the table scroll to the top.
     * 	 - A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get
     * 			an intransparent background color.
     * 	 - This feature supports only the default height of the toolbar control.
     */
    sticky?: Array<Sticky | keyof typeof Sticky> | PropertyBindingInfo;

    /**
     * Defines the items contained within this control.
     */
    items?: ListItemBase[] | ListItemBase | AggregationBindingInfo;

    /**
     * User can swipe to bring in this control on the right hand side of an item. **Note:**
     * 	 - For non-touch screen devices, this functionality is ignored.
     * 	 - There is no accessible alternative provided by the control for swiping. Applications that use this
     * 			functionality must provide an accessible alternative UI to perform the same action.
     */
    swipeContent?: Control;

    /**
     * @SINCE 1.16
     *
     * The header area can be used as a toolbar to add extra controls for user interactions. **Note:** When
     * set, this overwrites the `headerText` property.
     */
    headerToolbar?: Toolbar;

    /**
     * @SINCE 1.16
     *
     * A toolbar that is placed below the header to show extra information to the user.
     */
    infoToolbar?: Toolbar;

    /**
     * @SINCE 1.54
     *
     * Defines the context menu of the items.
     */
    contextMenu?: IContextMenu;

    /**
     * @SINCE 1.28.0
     *
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.16) - Use the `selectionChange` event instead.
     *
     * Fires when selection is changed via user interaction. In `MultiSelect` mode, this event is also fired
     * on deselection.
     */
    select?: Function;

    /**
     * @SINCE 1.16
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    selectionChange?: Function;

    /**
     * Fires when delete icon is pressed by user.
     */
    delete?: Function;

    /**
     * Fires after user's swipe action and before the `swipeContent` is shown. On the `swipe` event handler,
     * `swipeContent` can be changed according to the swiped item. Calling the `preventDefault` method of the
     * event cancels the swipe action.
     *
     * **Note:** There is no accessible alternative provided by the control for swiping. Applications that use
     * this functionality must provide an accessible alternative UI to perform the same action.
     */
    swipe?: Function;

    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use `updateStarted` event with listening `changeReason`.
     *
     * Fires before the new growing chunk is requested from the model.
     */
    growingStarted?: Function;

    /**
     * @SINCE 1.16
     * @deprecated (since 1.16.3) - Instead, use "updateFinished" event.
     *
     * Fires after the new growing chunk has been fetched from the model and processed by the control.
     */
    growingFinished?: Function;

    /**
     * @SINCE 1.16.3
     *
     * Fires before `items` binding is updated (e.g. sorting, filtering)
     *
     * **Note:** Event handler should not invalidate the control.
     */
    updateStarted?: Function;

    /**
     * @SINCE 1.16.3
     *
     * Fires after `items` binding is updated and processed by the control.
     */
    updateFinished?: Function;

    /**
     * @SINCE 1.20
     *
     * Fires when an item is pressed unless the item's `type` property is `Inactive`.
     */
    itemPress?: Function;

    /**
     * @SINCE 1.54
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    beforeOpenContextMenu?: Function;
  }
}

declare module "sap/m/ListItemBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ListType } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * ListItemBase contains the base features of all specific list items. **Note:** If not mentioned otherwise
   * in the individual subclasses, list items must only be used in the `items` aggregation of `sap.m.ListBase`
   * controls.
   */
  export default class ListItemBase extends Control {
    /**
     * Constructor for a new ListItemBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListItemBaseSettings
    );
    /**
     * Constructor for a new ListItemBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ListItemBaseSettings
    );
    /**
     * @deprecated (since 1.10.2) - API Change makes this method unnecessary. Use getSelected method instead.
     *
     * Returns the state of the item selection as a boolean
     */
    isSelected: undefined;

    /**
     * @SINCE 1.28.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailPress detailPress} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user clicks on the detail button of the control.
     */
    attachDetailPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `detailPress` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:detailTap detailTap} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user taps on the detail button of the control.
     */
    attachDetailTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user clicks on the control. **Note:** This event is not fired when the parent `mode` is
     * `SingleSelectMaster` or when the `includeItemInSelection` property is set to `true`. If there is an interactive
     * element that handles its own `press` event then the list item's `press` event is not fired. Also see
     * {@link sap.m.ListBase#attachItemPress}.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `press` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user taps on the control.
     */
    attachTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:detailPress detailPress} event of this `sap.m.ListItemBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDetailPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `detailPress` event.
     *
     * Detaches event handler `fnFunction` from the {@link #event:detailTap detailTap} event of this `sap.m.ListItemBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDetailTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ListItemBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `press` event.
     *
     * Detaches event handler `fnFunction` from the {@link #event:tap tap} event of this `sap.m.ListItemBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ListItemBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ListItemBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:detailPress detailPress} to attached listeners.
     */
    fireDetailPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `detailPress` event.
     *
     * Fires event {@link #event:detailTap detailTap} to attached listeners.
     */
    fireDetailTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `press` event.
     *
     * Fires event {@link #event:tap tap} to attached listeners.
     */
    fireTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Returns the accessibility announcement for the content.
     *
     * Hook for the subclasses.
     */
    getContentAnnouncement(): string;
    /**
     * Gets current value of property {@link #getCounter counter}.
     *
     * Defines the counter value of the list items.
     */
    getCounter(): int;
    /**
     * @SINCE 1.44.0
     *
     * Gets current value of property {@link #getHighlight highlight}.
     *
     * Defines the highlight state of the list items.
     *
     * Valid values for the `highlight` property are values of the enumerations {@link sap.ui.core.MessageType}
     * or {@link sap.ui.core.IndicationColor}.
     *
     * Accessibility support is provided through the associated {@link sap.m.ListItemBase#setHighlightText highlightText}
     * property. If the `highlight` property is set to a value of {@link sap.ui.core.MessageType}, the `highlightText`
     * property does not need to be set because a default text is used. However, the default text can be overridden
     * by setting the `highlightText` property. In all other cases the `highlightText` property must be set.
     *
     * Default value is `"None"`.
     */
    getHighlight(): string;
    /**
     * @SINCE 1.62
     *
     * Gets current value of property {@link #getHighlightText highlightText}.
     *
     * Defines the semantics of the {@link sap.m.ListItemBase#setHighlight highlight} property for accessibility
     * purposes.
     *
     * Default value is `empty string`.
     */
    getHighlightText(): string;
    /**
     * Returns a metadata object for class sap.m.ListItemBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getNavigated navigated}.
     *
     * The navigated state of the list item.
     *
     * If set to `true`, a navigation indicator is displayed at the end of the list item. **Note:** This property
     * must be set for **one** list item only.
     *
     * Default value is `false`.
     */
    getNavigated(): boolean;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the list items. **Note:** Binding the `selected` property in single selection
     * modes may cause unwanted results if you have more than one selected items in your binding.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * @SINCE 1.26
     *
     * Returns the tabbable DOM elements as a jQuery collection
     */
    getTabbables(): jQuery;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items, e.g. `Active`, `Navigation`, `Detail`.
     *
     * Default value is `Inactive`.
     */
    getType(): ListType | keyof typeof ListType;
    /**
     * Gets current value of property {@link #getUnread unread}.
     *
     * Activates the unread indicator for the list item, if set to `true`. **Note:** This flag is ignored when
     * the `showUnread` property of the parent is set to `false`.
     *
     * Default value is `false`.
     */
    getUnread(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real control.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * @SINCE 1.28.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.28.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getCounter counter}.
     *
     * Defines the counter value of the list items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCounter(
      /**
       * New value for property `counter`
       */
      iCounter?: int
    ): this;
    /**
     * @SINCE 1.44.0
     *
     * Sets a new value for property {@link #getHighlight highlight}.
     *
     * Defines the highlight state of the list items.
     *
     * Valid values for the `highlight` property are values of the enumerations {@link sap.ui.core.MessageType}
     * or {@link sap.ui.core.IndicationColor}.
     *
     * Accessibility support is provided through the associated {@link sap.m.ListItemBase#setHighlightText highlightText}
     * property. If the `highlight` property is set to a value of {@link sap.ui.core.MessageType}, the `highlightText`
     * property does not need to be set because a default text is used. However, the default text can be overridden
     * by setting the `highlightText` property. In all other cases the `highlightText` property must be set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     */
    setHighlight(
      /**
       * New value for property `highlight`
       */
      sHighlight?: string
    ): this;
    /**
     * @SINCE 1.62
     *
     * Sets a new value for property {@link #getHighlightText highlightText}.
     *
     * Defines the semantics of the {@link sap.m.ListItemBase#setHighlight highlight} property for accessibility
     * purposes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHighlightText(
      /**
       * New value for property `highlightText`
       */
      sHighlightText?: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getNavigated navigated}.
     *
     * The navigated state of the list item.
     *
     * If set to `true`, a navigation indicator is displayed at the end of the list item. **Note:** This property
     * must be set for **one** list item only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setNavigated(
      /**
       * New value for property `navigated`
       */
      bNavigated?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the list items. **Note:** Binding the `selected` property in single selection
     * modes may cause unwanted results if you have more than one selected items in your binding.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the visual indication and behavior of the list items, e.g. `Active`, `Navigation`, `Detail`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inactive`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ListType | keyof typeof ListType
    ): this;
    /**
     * Sets a new value for property {@link #getUnread unread}.
     *
     * Activates the unread indicator for the list item, if set to `true`. **Note:** This flag is ignored when
     * the `showUnread` property of the parent is set to `false`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUnread(
      /**
       * New value for property `unread`
       */
      bUnread?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailPress detailPress} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user clicks on the detail button of the control.
     */
    attachDetailPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `detailPress` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:detailTap detailTap} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user taps on the detail button of the control.
     */
    attachDetailTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user clicks on the control. **Note:** This event is not fired when the parent `mode` is
     * `SingleSelectMaster` or when the `includeItemInSelection` property is set to `true`. If there is an interactive
     * element that handles its own `press` event then the list item's `press` event is not fired. Also see
     * {@link sap.m.ListBase#attachItemPress}.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.20.0) - Instead, use `press` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tap tap} event of this `sap.m.ListItemBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ListItemBase` itself.
     *
     * Fires when the user taps on the control.
     */
    attachTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ListItemBase` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ListItemBaseSettings extends $ControlSettings {
    /**
     * Defines the visual indication and behavior of the list items, e.g. `Active`, `Navigation`, `Detail`.
     */
    type?: (ListType | keyof typeof ListType) | PropertyBindingInfo;

    /**
     * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real control.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Activates the unread indicator for the list item, if set to `true`. **Note:** This flag is ignored when
     * the `showUnread` property of the parent is set to `false`.
     */
    unread?: boolean | PropertyBindingInfo;

    /**
     * Defines the selected state of the list items. **Note:** Binding the `selected` property in single selection
     * modes may cause unwanted results if you have more than one selected items in your binding.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the counter value of the list items.
     */
    counter?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.44.0
     *
     * Defines the highlight state of the list items.
     *
     * Valid values for the `highlight` property are values of the enumerations {@link sap.ui.core.MessageType}
     * or {@link sap.ui.core.IndicationColor}.
     *
     * Accessibility support is provided through the associated {@link sap.m.ListItemBase#setHighlightText highlightText}
     * property. If the `highlight` property is set to a value of {@link sap.ui.core.MessageType}, the `highlightText`
     * property does not need to be set because a default text is used. However, the default text can be overridden
     * by setting the `highlightText` property. In all other cases the `highlightText` property must be set.
     */
    highlight?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.62
     *
     * Defines the semantics of the {@link sap.m.ListItemBase#setHighlight highlight} property for accessibility
     * purposes.
     */
    highlightText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * The navigated state of the list item.
     *
     * If set to `true`, a navigation indicator is displayed at the end of the list item. **Note:** This property
     * must be set for **one** list item only.
     */
    navigated?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.20.0) - Instead, use `press` event.
     *
     * Fires when the user taps on the control.
     */
    tap?: Function;

    /**
     * @deprecated (since 1.20.0) - Instead, use `detailPress` event.
     *
     * Fires when the user taps on the detail button of the control.
     */
    detailTap?: Function;

    /**
     * Fires when the user clicks on the control. **Note:** This event is not fired when the parent `mode` is
     * `SingleSelectMaster` or when the `includeItemInSelection` property is set to `true`. If there is an interactive
     * element that handles its own `press` event then the list item's `press` event is not fired. Also see
     * {@link sap.m.ListBase#attachItemPress}.
     */
    press?: Function;

    /**
     * Fires when the user clicks on the detail button of the control.
     */
    detailPress?: Function;
  }
}

declare module "sap/m/MaskInput" {
  import { default as InputBase, $InputBaseSettings } from "sap/m/InputBase";

  import MaskInputRule from "sap/m/MaskInputRule";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34.0
   *
   * The `sap.m.MaskInput` control allows users to easily enter data in a certain format and in a fixed-width
   * input (for example: date, time, phone number, credit card number, currency, IP address, MAC address,
   * and others).
   */
  export default class MaskInput extends InputBase {
    /**
     * Constructor for a new MaskInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/generic-mask-input/ Mask Input}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MaskInputSettings
    );
    /**
     * Constructor for a new MaskInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/generic-mask-input/ Mask Input}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MaskInputSettings
    );

    /**
     * Adds some rule to the aggregation {@link #getRules rules}.
     */
    addRule(
      /**
       * The rule to add; if empty, nothing is inserted
       */
      oRule: MaskInputRule
    ): this;
    /**
     * Destroys all the rules in the aggregation {@link #getRules rules}.
     */
    destroyRules(): this;
    /**
     * Creates a new subclass of class sap.m.MaskInput with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MaskInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getMask mask}.
     *
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     */
    getMask(): string;
    /**
     * Returns a metadata object for class sap.m.MaskInput.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlaceholderSymbol placeholderSymbol}.
     *
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     *
     * Default value is `"_"`.
     */
    getPlaceholderSymbol(): string;
    /**
     * Gets content of aggregation {@link #getRules rules}.
     *
     * A list of validation rules (one rule per mask character).
     */
    getRules(): MaskInputRule[];
    /**
     * Checks for the provided `sap.m.MaskInputRule` in the aggregation {@link #getRules rules}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfRule(
      /**
       * The rule whose index is looked for
       */
      oRule: MaskInputRule
    ): int;
    /**
     * Inserts a rule into the aggregation {@link #getRules rules}.
     */
    insertRule(
      /**
       * The rule to insert; if empty, nothing is inserted
       */
      oRule: MaskInputRule,
      /**
       * The `0`-based index the rule should be inserted at; for a negative value of `iIndex`, the rule is inserted
       * at position 0; for a value greater than the current size of the aggregation, the rule is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getRules rules}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllRules(): MaskInputRule[];
    /**
     * Removes a rule from the aggregation {@link #getRules rules}.
     */
    removeRule(
      /**
       * The rule to remove or its index or id
       */
      vRule: int | string | MaskInputRule
    ): MaskInputRule;
    /**
     * Sets a new value for property {@link #getMask mask}.
     *
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMask(
      /**
       * New value for property `mask`
       */
      sMask?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholderSymbol placeholderSymbol}.
     *
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"_"`.
     */
    setPlaceholderSymbol(
      /**
       * New value for property `placeholderSymbol`
       */
      sPlaceholderSymbol?: string
    ): this;
  }

  export interface $MaskInputSettings extends $InputBaseSettings {
    /**
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     */
    placeholderSymbol?: string | PropertyBindingInfo;

    /**
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     */
    mask?: string | PropertyBindingInfo;

    /**
     * A list of validation rules (one rule per mask character).
     */
    rules?: MaskInputRule[] | MaskInputRule | AggregationBindingInfo;
  }
}

declare module "sap/m/MaskInputRule" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34.0
   *
   * The `sap.m.MaskInputRule` control holds the mapping of a single `maskFormatSymbol` to the regular expression
   * `regex` that defines the allowed characters for the rule.
   */
  export default class MaskInputRule extends UI5Element {
    /**
     * Constructor for a new MaskInputRule.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MaskInputRuleSettings
    );
    /**
     * Constructor for a new MaskInputRule.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MaskInputRuleSettings
    );

    /**
     * Creates a new subclass of class sap.m.MaskInputRule with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MaskInputRule>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getMaskFormatSymbol maskFormatSymbol}.
     *
     * Defines the symbol used in the mask format which will accept a certain range of characters.
     *
     * Default value is `"*"`.
     */
    getMaskFormatSymbol(): string;
    /**
     * Returns a metadata object for class sap.m.MaskInputRule.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRegex regex}.
     *
     * Defines the allowed characters as a regular expression.
     *
     * Default value is `"[a-zA-Z0-9]"`.
     */
    getRegex(): string;
    /**
     * Sets a new value for property {@link #getMaskFormatSymbol maskFormatSymbol}.
     *
     * Defines the symbol used in the mask format which will accept a certain range of characters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"*"`.
     */
    setMaskFormatSymbol(
      /**
       * New value for property `maskFormatSymbol`
       */
      sMaskFormatSymbol?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRegex regex}.
     *
     * Defines the allowed characters as a regular expression.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"[a-zA-Z0-9]"`.
     */
    setRegex(
      /**
       * New value for property `regex`
       */
      sRegex?: string
    ): this;
  }

  export interface $MaskInputRuleSettings extends $ElementSettings {
    /**
     * Defines the symbol used in the mask format which will accept a certain range of characters.
     */
    maskFormatSymbol?: string | PropertyBindingInfo;

    /**
     * Defines the allowed characters as a regular expression.
     */
    regex?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/Menu" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IContextMenu, Dock } from "sap/ui/core/library";

  import MenuItem from "sap/m/MenuItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import UI5Element from "sap/ui/core/Element";

  /**
   * The `sap.m.Menu` control represents a hierarchical menu. When opened on mobile devices it occupies the
   * whole screen.
   */
  export default class Menu extends Control implements IContextMenu {
    __implements__sap_ui_core_IContextMenu: boolean;
    /**
     * Constructor for a new Menu.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuSettings
    );
    /**
     * Constructor for a new Menu.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: MenuItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.m.Menu`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Menu` itself.
     *
     * Fired when the menu is closed.
     */
    attachClosed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Menu` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelected itemSelected} event of this `sap.m.Menu`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Menu` itself.
     *
     * Fired when a `MenuItem` is selected.
     */
    attachItemSelected(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Menu` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Closes the `Menu`.
     */
    close(): void;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:closed closed} event of this `sap.m.Menu`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClosed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemSelected itemSelected} event of this `sap.m.Menu`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemSelected(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Menu with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Menu>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:closed closed} to attached listeners.
     */
    fireClosed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:itemSelected itemSelected} to attached listeners.
     */
    fireItemSelected(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The `MenuItem` which was selected.
         */
        item?: MenuItem;
      }
    ): this;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items contained within this control.
     */
    getItems(): MenuItem[];
    /**
     * Returns a metadata object for class sap.m.Menu.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the `Menu` title.
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.m.MenuItem` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: MenuItem
    ): int;
    /**
     * Initializes the control.
     */
    init(): void;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: MenuItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Opens the menu as a context menu.
     */
    openAsContextMenu(
      /**
       * The event object or an object containing offsetX, offsetY values and left, top values of the element's
       * position
       */
      oEvent: jQuery.Event | object,
      /**
       * The reference of the opener
       */
      oOpenerRef: UI5Element | HTMLElement
    ): void;
    /**
     * Opens the `Menu` next to the given control.
     */
    openBy(
      /**
       * The control that defines the position for the menu
       */
      oControl: object,
      /**
       * Whether the menu is opened with a shortcut or not
       */
      bWithKeyboard: boolean,
      /**
       * The reference docking location of the `Menu` for positioning the menu on the screen
       */
      sDockMy?: Dock,
      /**
       * The `oControl` reference docking location for positioning the menu on the screen
       */
      sDockAt?: Dock,
      /**
       * The offset relative to the docking point, specified as a string with space-separated pixel values (e.g.
       * "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" is RTL-sensitive
       * ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
       */
      sOffset?: string
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): MenuItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | MenuItem
    ): MenuItem;
    /**
     * Sets the title of the `Menu`.
     */
    setTitle(
      /**
       * The new title of the `Menu`
       */
      sTitle: String
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:closed closed} event of this `sap.m.Menu`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Menu` itself.
     *
     * Fired when the menu is closed.
     */
    attachClosed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Menu` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelected itemSelected} event of this `sap.m.Menu`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Menu` itself.
     *
     * Fired when a `MenuItem` is selected.
     */
    attachItemSelected(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Menu` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MenuSettings extends $ControlSettings {
    /**
     * Defines the `Menu` title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the items contained within this control.
     */
    items?: MenuItem[] | MenuItem | AggregationBindingInfo;

    /**
     * Fired when a `MenuItem` is selected.
     */
    itemSelected?: Function;

    /**
     * Fired when the menu is closed.
     */
    closed?: Function;
  }
}

declare module "sap/m/MenuButton" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI, TextDirection, CSSSize } from "sap/ui/core/library";

  import { MenuButtonMode, ButtonType } from "sap/m/library";

  import Menu from "sap/m/Menu";

  import { Dock } from "sap/ui/core/Popup";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import TooltipBase from "sap/ui/core/TooltipBase";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * The `sap.m.MenuButton` control enables the user to show a hierarchical menu.
   */
  export default class MenuButton extends Control {
    /**
     * Constructor for a new MenuButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/menu-button/ Menu Button}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuButtonSettings
    );
    /**
     * Constructor for a new MenuButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/menu-button/ Menu Button}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuButtonSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:defaultAction defaultAction} event of this `sap.m.MenuButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuButton` itself.
     *
     * Fired when the `buttonMode` is set to `Split` and the user presses the main button unless `useDefaultActionOnly`
     * is set to `false` and another action from the menu has been selected previously.
     */
    attachDefaultAction(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the menu in the aggregation {@link #getMenu menu}.
     */
    destroyMenu(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:defaultAction defaultAction} event of this
     * `sap.m.MenuButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDefaultAction(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MenuButton with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MenuButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:defaultAction defaultAction} to attached listeners.
     */
    fireDefaultAction(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * The source property of an alternative icon for the active (pressed) state of the button. Both active
     * and default icon properties should be defined and of the same type - image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     */
    getActiveIcon(): URI;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getButtonMode buttonMode}.
     *
     * Defines whether the `MenuButton` is set to `Regular` or `Split` mode.
     *
     * Default value is `Regular`.
     */
    getButtonMode(): MenuButtonMode | keyof typeof MenuButtonMode;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is `true`).
     * **Note:** Depending on custom settings, the buttons that are disabled have other colors than the enabled
     * ones.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as a graphical element within the button. It can be an image or an icon
     * from the icon font.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * When set to `true` (default), one or more requests are sent trying to get the density perfect version
     * of image if this version of image doesn't exist on the server. If only one version of image is provided,
     * set this value to `false` to avoid the attempt of fetching density perfect image.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
     *
     * By default, this is the Id of the control itself.
     */
    getIdForLabel(): string;
    /**
     * Gets content of aggregation {@link #getMenu menu}.
     *
     * Defines the menu that opens for this button.
     */
    getMenu(): Menu;
    /**
     * @SINCE 1.56.0
     *
     * Gets current value of property {@link #getMenuPosition menuPosition}.
     *
     * Specifies the position of the popup menu with enumerated options. By default, the control opens the menu
     * at its bottom left side.
     *
     * **Note:** In the case that the menu has no space to show itself in the view port of the current window
     * it tries to open itself to the inverted direction.
     *
     * Default value is `BeginBottom`.
     */
    getMenuPosition(): Dock;
    /**
     * Returns a metadata object for class sap.m.MenuButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the `MenuButton`.
     * **Note:** In `Split` `buttonMode` with `useDefaultActionOnly` set to `false`, the text is changed to
     * display the last selected item's text, while in `Regular` `buttonMode` the text stays unchanged.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the type of the `MenuButton` (for example, Default, Accept, Reject, Back, etc.)
     *
     * **Note:** Not all existing types are valid for the control. See {@link sap.m.ButtonType} documentation.
     *
     * Default value is `Default`.
     */
    getType(): ButtonType | keyof typeof ButtonType;
    /**
     * Gets current value of property {@link #getUseDefaultActionOnly useDefaultActionOnly}.
     *
     * Controls whether the default action handler is invoked always or it is invoked only until a menu item
     * is selected. Usable only if `buttonMode` is set to `Split`.
     *
     * Default value is `false`.
     */
    getUseDefaultActionOnly(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the `MenuButton`.
     * **Note:**As per visual design this width can be maximum of 12rem (192px).
     */
    getWidth(): CSSSize;
    /**
     * Initializes the control.
     */
    init(): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * The source property of an alternative icon for the active (pressed) state of the button. Both active
     * and default icon properties should be defined and of the same type - image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * Sets the `buttonMode` of the control.
     */
    setButtonMode(
      /**
       * The new button mode
       */
      sMode: MenuButtonMode | keyof typeof MenuButtonMode
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is `true`).
     * **Note:** Depending on custom settings, the buttons that are disabled have other colors than the enabled
     * ones.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as a graphical element within the button. It can be an image or an icon
     * from the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * When set to `true` (default), one or more requests are sent trying to get the density perfect version
     * of image if this version of image doesn't exist on the server. If only one version of image is provided,
     * set this value to `false` to avoid the attempt of fetching density perfect image.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getMenu menu}.
     */
    setMenu(
      /**
       * The menu to set
       */
      oMenu: Menu
    ): this;
    /**
     * @SINCE 1.56.0
     *
     * Sets a new value for property {@link #getMenuPosition menuPosition}.
     *
     * Specifies the position of the popup menu with enumerated options. By default, the control opens the menu
     * at its bottom left side.
     *
     * **Note:** In the case that the menu has no space to show itself in the view port of the current window
     * it tries to open itself to the inverted direction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `BeginBottom`.
     */
    setMenuPosition(
      /**
       * New value for property `menuPosition`
       */
      sMenuPosition?: Dock
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the `MenuButton`.
     * **Note:** In `Split` `buttonMode` with `useDefaultActionOnly` set to `false`, the text is changed to
     * display the last selected item's text, while in `Regular` `buttonMode` the text stays unchanged.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets the tooltip for the `MenuButton`. Can either be an instance of a TooltipBase subclass or a simple
     * string.
     */
    setTooltip(
      /**
       * The tooltip that should be shown.
       */
      vTooltip: TooltipBase
    ): any;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the type of the `MenuButton` (for example, Default, Accept, Reject, Back, etc.)
     *
     * **Note:** Not all existing types are valid for the control. See {@link sap.m.ButtonType} documentation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: ButtonType | keyof typeof ButtonType
    ): this;
    /**
     * Sets a new value for property {@link #getUseDefaultActionOnly useDefaultActionOnly}.
     *
     * Controls whether the default action handler is invoked always or it is invoked only until a menu item
     * is selected. Usable only if `buttonMode` is set to `Split`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUseDefaultActionOnly(
      /**
       * New value for property `useDefaultActionOnly`
       */
      bUseDefaultActionOnly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the `MenuButton`.
     * **Note:**As per visual design this width can be maximum of 12rem (192px).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:defaultAction defaultAction} event of this `sap.m.MenuButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuButton` itself.
     *
     * Fired when the `buttonMode` is set to `Split` and the user presses the main button unless `useDefaultActionOnly`
     * is set to `false` and another action from the menu has been selected previously.
     */
    attachDefaultAction(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MenuButtonSettings extends $ControlSettings {
    /**
     * Defines the text of the `MenuButton`.
     * **Note:** In `Split` `buttonMode` with `useDefaultActionOnly` set to `false`, the text is changed to
     * display the last selected item's text, while in `Regular` `buttonMode` the text stays unchanged.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the type of the `MenuButton` (for example, Default, Accept, Reject, Back, etc.)
     *
     * **Note:** Not all existing types are valid for the control. See {@link sap.m.ButtonType} documentation.
     */
    type?: (ButtonType | keyof typeof ButtonType) | PropertyBindingInfo;

    /**
     * Defines the width of the `MenuButton`.
     * **Note:**As per visual design this width can be maximum of 12rem (192px).
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Boolean property to enable the control (default is `true`).
     * **Note:** Depending on custom settings, the buttons that are disabled have other colors than the enabled
     * ones.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon to be displayed as a graphical element within the button. It can be an image or an icon
     * from the icon font.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * The source property of an alternative icon for the active (pressed) state of the button. Both active
     * and default icon properties should be defined and of the same type - image or icon font. If the `icon`
     * property is not set or has a different type, the active icon is not displayed.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * When set to `true` (default), one or more requests are sent trying to get the density perfect version
     * of image if this version of image doesn't exist on the server. If only one version of image is provided,
     * set this value to `false` to avoid the attempt of fetching density perfect image.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Defines whether the `MenuButton` is set to `Regular` or `Split` mode.
     */
    buttonMode?:
      | (MenuButtonMode | keyof typeof MenuButtonMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.56.0
     *
     * Specifies the position of the popup menu with enumerated options. By default, the control opens the menu
     * at its bottom left side.
     *
     * **Note:** In the case that the menu has no space to show itself in the view port of the current window
     * it tries to open itself to the inverted direction.
     */
    menuPosition?: Dock | PropertyBindingInfo;

    /**
     * Controls whether the default action handler is invoked always or it is invoked only until a menu item
     * is selected. Usable only if `buttonMode` is set to `Split`.
     */
    useDefaultActionOnly?: boolean | PropertyBindingInfo;

    /**
     * Defines the menu that opens for this button.
     */
    menu?: Menu;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Fired when the `buttonMode` is set to `Split` and the user presses the main button unless `useDefaultActionOnly`
     * is set to `false` and another action from the menu has been selected previously.
     */
    defaultAction?: Function;
  }
}

declare module "sap/m/MenuItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.38
   *
   * The `MenuItem` control is used for creating items for the `sap.m.Menu`. It is derived from a core `sap.ui.core.Item`.
   */
  export default class MenuItem extends Item {
    /**
     * Constructor for a new `MenuItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuItemSettings
    );
    /**
     * Constructor for a new `MenuItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MenuItemSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: MenuItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:aggregationChanged aggregationChanged} event
     * of this `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired when aggregation of the item changes.
     */
    attachAggregationChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired after the item has been pressed.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:propertyChanged propertyChanged} event of this
     * `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired when a property of the item changes.
     */
    attachPropertyChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:aggregationChanged aggregationChanged} event
     * of this `sap.m.MenuItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAggregationChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.MenuItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:propertyChanged propertyChanged} event of
     * this `sap.m.MenuItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPropertyChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MenuItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MenuItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:aggregationChanged aggregationChanged} to attached listeners.
     */
    fireAggregationChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The aggregation name of the changed aggregation.
         */
        aggregationName?: String;
        /**
         * Which method changed the aggregation.
         */
        methodName?: String;
        /**
         * What parameters were used to change the aggregation.
         */
        methodParams?: Object;
      }
    ): this;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:propertyChanged propertyChanged} to attached listeners.
     */
    firePropertyChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The property name to be changed.
         */
        propertyKey?: string;
        /**
         * The new property value.
         */
        propertyValue?: any;
      }
    ): this;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon, which belongs to the item. This can be a URI to an image or an icon font URI.
     */
    getIcon(): string;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the sub-items contained within this element.
     */
    getItems(): MenuItem[];
    /**
     * Returns a metadata object for class sap.m.MenuItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getStartsSection startsSection}.
     *
     * Defines whether a visual separator should be rendered before the item. **Note:** If an item is invisible
     * its separator is also not displayed.
     *
     * Default value is `false`.
     */
    getStartsSection(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Defines whether the item should be visible on the screen. If set to `false`, a placeholder is rendered
     * instead of the real item.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Checks for the provided `sap.m.MenuItem` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: MenuItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: MenuItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): MenuItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | MenuItem
    ): MenuItem;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon, which belongs to the item. This can be a URI to an image or an icon font URI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getStartsSection startsSection}.
     *
     * Defines whether a visual separator should be rendered before the item. **Note:** If an item is invisible
     * its separator is also not displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStartsSection(
      /**
       * New value for property `startsSection`
       */
      bStartsSection?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Defines whether the item should be visible on the screen. If set to `false`, a placeholder is rendered
     * instead of the real item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:aggregationChanged aggregationChanged} event
     * of this `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired when aggregation of the item changes.
     */
    attachAggregationChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired after the item has been pressed.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:propertyChanged propertyChanged} event of this
     * `sap.m.MenuItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MenuItem` itself.
     *
     * Fired when a property of the item changes.
     */
    attachPropertyChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MenuItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MenuItemSettings extends $ItemSettings {
    /**
     * Defines the icon, which belongs to the item. This can be a URI to an image or an icon font URI.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Defines whether the item should be visible on the screen. If set to `false`, a placeholder is rendered
     * instead of the real item.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Defines whether a visual separator should be rendered before the item. **Note:** If an item is invisible
     * its separator is also not displayed.
     */
    startsSection?: boolean | PropertyBindingInfo;

    /**
     * Defines the sub-items contained within this element.
     */
    items?: MenuItem[] | MenuItem | AggregationBindingInfo;

    /**
     * Fired after the item has been pressed.
     */
    press?: Function;

    /**
     * Fired when a property of the item changes.
     */
    propertyChanged?: Function;

    /**
     * Fired when aggregation of the item changes.
     */
    aggregationChanged?: Function;
  }
}

declare module "sap/m/MessageBox" {
  import { TextDirection, CSSSize } from "sap/ui/core/library";

  /**
   * @SINCE 1.21.2
   *
   * Provides easier methods to create sap.m.Dialog with type sap.m.DialogType.Message, such as standard alerts,
   * confirmation dialogs, or arbitrary message dialogs.
   *
   * Because the `MessageBox` is a static class, a `sap.ui.require("sap/m/MessageBox");` statement must be
   * explicitly executed prior using the class. MessageBox provides several functions:
   * 	 - `show()` - This is the generic way to open a message dialog. You can customize its contents through
   * 			the `mOptions` parameter described below.
   * 	 - `alert()`, `confirm()`, `error()`, `information()`, `success()` and `warning()` - predefined templates
   * 			of message dialogs. Each value type is coming with action buttons and an icon that are corresponding
   * 			to its semantic. Although the full set of `mOptions` (applicable to `show()`) are available to them,
   * 			it is recommended to only use the documented options.
   *
   * **NOTE:** All options of show() are available for the other template functions as well, but it is recommended
   * to use show() only in more specific scenarios. **NOTE:** Due to the static nature of the `MessageBox`
   * class, you cannot expect data binding support from its helper functions. If this is required you can
   * use the `sap.m.Dialog` instead. **NOTE:** When using the `MessageBox.Error` method, there is no
   * emphasized action by design.
   *
   * Example:
   * ```javascript
   *
   * 	sap.ui.define(["sap/m/MessageBox"], function (MessageBox) {
   * 		MessageBox.show(
   * 			"This message should appear in the message box.", {
   * 				icon: MessageBox.Icon.INFORMATION,
   * 				title: "My message box title",
   * 				actions: [MessageBox.Action.YES, MessageBox.Action.NO],
   * 				emphasizedAction: MessageBox.Action.YES,
   * 				onClose: function (oAction) { / * do something * / }
   * 			}
   * 		);
   * 	});
   * ```
   *
   *
   * When using the `sap.m.MessageBox` in SAP Quartz themes, the breakpoints and layout paddings could be
   * determined by the MessageBox' width. To enable this concept and add responsive paddings to an element
   * of the MessageBox control, you have to add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * `sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`.
   * See:
   * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-box/ Message Box}
   */
  interface MessageBox {
    /**
     * Displays an alert dialog with the given message and an OK button (no icons).
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.alert("This message should appear in the alert", {
     *     title: "Alert",                                      // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: sap.m.MessageBox.Action.OK,                 // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * If a callback is given, it is called after the alert dialog has been closed by the user via the OK button.
     * The callback is called with the following signature:
     *
     *
     * ```javascript
     *
     *   function (oAction)
     * ```
     *
     *
     * where `oAction` can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on
     * the OK button or null when the alert dialog is closed by calling `sap.m.InstanceManager.closeAllDialogs()`.
     *
     * The alert dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the alert dialog.
     */
    alert(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * callback function to be called when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title to be displayed in the alert dialog
         */
        title?: string;
        /**
         * ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * Added since version 1.21.2. CSS style class which is added to the alert dialog's root DOM node. The compact
         * design can be activated by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or
         * the control that gets the focus as first focusable element after the MessageBox is opened. The usage
         * of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Added since version 1.28. Specifies the element's text directionality with enumerated options. By default,
         * the control inherits text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * Displays a confirmation dialog with the given message, a QUESTION icon, an OK button and a Cancel button.
     * If a callback is given, it is called after the confirmation box has been closed by the user with one
     * of the buttons.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.confirm("This message should appear in the confirmation", {
     *     title: "Confirm",                                    // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: [ sap.m.MessageBox.Action.OK,
     *                sap.m.MessageBox.Action.CANCEL ],         // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The callback is called with the following signature
     *
     *
     * ```javascript
     *
     *   function(oAction)
     * ```
     *
     *
     * where oAction is set by one of the following three values: 1. sap.m.MessageBox.Action.OK: OK (confirmed)
     * button is tapped. 2. sap.m.MessageBox.Action.CANCEL: Cancel (unconfirmed) button is tapped. 3. null:
     * Confirm dialog is closed by calling `sap.m.InstanceManager.closeAllDialogs()`
     *
     * The confirmation dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the confirmation dialog
     */
    confirm(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * Callback to be called when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title to display in the confirmation dialog
         */
        title?: string;
        /**
         * ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive
         * apps
         */
        id?: string;
        /**
         * Added since version 1.21.2. CSS style class which is added to the confirmation dialog's root DOM node.
         * The compact design can be activated by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or
         * the control that gets the focus as first focusable element after the MessageBox is opened. The usage
         * of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Added since version 1.28. Specifies the element's text directionality with enumerated options. By default,
         * the control inherits text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * @SINCE 1.30
     *
     * Displays an error dialog with the given message, an ERROR icon, a CLOSE button.. If a callback is given,
     * it is called after the error box has been closed by the user with one of the buttons.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.error("This message should appear in the error message box", {
     *     title: "Error",                                      // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: sap.m.MessageBox.Action.CLOSE,              // default
     *     emphasizedAction: null,                              // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The callback is called with the following signature
     *
     *
     * ```javascript
     *
     *   function (oAction)
     * ```
     *
     *
     * The error dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the error dialog.
     */
    error(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * Callback when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title of the error dialog
         */
        title?: string;
        /**
         * ID for the error dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * CSS style class which is added to the error dialog's root DOM node. The compact design can be activated
         * by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * This option sets the action name, the text of the button or the control that gets the focus as first
         * focusable element after the MessageBox is opened. The usage of sap.ui.core.Control to set initialFocus
         * is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Specifies the element's text directionality with enumerated options. By default, the control inherits
         * text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * @SINCE 1.30
     *
     * Displays an information dialog with the given message, an INFO icon, an OK button. If a callback is given,
     * it is called after the info box has been closed by the user with one of the buttons.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.information("This message should appear in the information message box", {
     *     title: "Information",                                // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: sap.m.MessageBox.Action.OK,                 // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The callback is called with the following signature *
     * ```javascript
     *
     *   function (oAction)
     * ```
     *
     *
     * The information dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the information dialog
     */
    information(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * Callback when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title of the information dialog
         */
        title?: string;
        /**
         * ID for the information dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * CSS style class which is added to the information dialog's root DOM node. The compact design can be activated
         * by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * This option sets the action name, the text of the button or the control that gets the focus as first
         * focusable element after the MessageBox is opened. The usage of sap.ui.core.Control to set initialFocus
         * is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Specifies the element's text directionality with enumerated options. By default, the control inherits
         * text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * Creates and displays an sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons,
     * and optionally other parts. After the user has tapped a button, the `onClose` function is invoked when
     * given.
     *
     * The only mandatory parameter is `vMessage`. Either a string with the corresponding text or even a layout
     * control could be provided.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.show("This message should appear in the message box", {
     *     icon: sap.m.MessageBox.Icon.NONE,                    // default
     *     title: "",                                           // default
     *     actions: sap.m.MessageBox.Action.OK,                 // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The created dialog is executed asynchronously. When it has been created and registered for rendering,
     * this function returns without waiting for a user reaction.
     *
     * When applications have to react on the users choice, they have to provide a callback function and postpone
     * any reaction on the user choice until that callback is triggered.
     *
     * The signature of the callback is
     *
     * function (oAction);
     *
     * where `oAction` is the button that the user has tapped. For example, when the user has pressed the close
     * button, an sap.m.MessageBox.Action.CLOSE is returned.
     */
    show(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * The icon to be displayed.
         */
        icon?: Icon;
        /**
         * The title of the message box.
         */
        title?: string;
        /**
         * Either a single action, or an array of actions. If no action(s) are given, the single action MessageBox.Action.OK
         * is taken as a default for the parameter. Custom action(s) string or an array can be provided, and then
         * the translation of custom actions needs to be done by the application.
         */
        actions?:
          | (Action | keyof typeof Action)
          | Array<Action | keyof typeof Action>
          | string
          | string[];
        /**
         * Added since version 1.75.0. Specifies which action of the created dialog will be emphasized. EmphasizedAction
         * will apply only if the property `actions` is provided.
         */
        emphasizedAction?: (Action | keyof typeof Action) | string;
        /**
         * Function to be called when the user taps a button or closes the message box.
         */
        onClose?: Function;
        /**
         * ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * Added since version 1.21.2. CSS style class which is added to the dialog's root DOM node. The compact
         * design can be activated by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or
         * the control that gets the focus as first focusable element after the MessageBox is opened. The usage
         * of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Added since version 1.28. Specifies the element's text directionality with enumerated options. By default,
         * the control inherits text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * The width of the MessageBox
         */
        contentWidth?: CSSSize;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * @SINCE 1.30
     *
     * Displays a success dialog with the given message, a SUCCESS icon, an OK button. If a callback is given,
     * it is called after the success box has been closed by the user with one of the buttons.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.success("This message should appear in the success message box", {
     *     title: "Success",                                    // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: sap.m.MessageBox.Action.OK,                 // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The callback is called with the following signature
     *
     *
     * ```javascript
     *
     *   function(oAction)
     * ```
     *
     *
     * The success dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the success dialog
     */
    success(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * Callback when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title of the success dialog
         */
        title?: string;
        /**
         * ID for the success dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * CSS style class which is added to the success dialog's root DOM node. The compact design can be activated
         * by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * This option sets the action name, the text of the button or the control that gets the focus as first
         * focusable element after the MessageBox is opened. The usage of sap.ui.core.Control to set initialFocus
         * is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Specifies the element's text directionality with enumerated options. By default, the control inherits
         * text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
    /**
     * @SINCE 1.30
     *
     * Displays a warning dialog with the given message, a WARNING icon, an OK button. If a callback is given,
     * it is called after the warning box has been closed by the user with one of the buttons.
     *
     *
     * ```javascript
     *
     * sap.m.MessageBox.warning("This message should appear in the warning message box", {
     *     title: "Warning",                                    // default
     *     onClose: null,                                       // default
     *     styleClass: "",                                      // default
     *     actions: sap.m.MessageBox.Action.OK,                 // default
     *     emphasizedAction: sap.m.MessageBox.Action.OK,        // default
     *     initialFocus: null,                                  // default
     *     textDirection: sap.ui.core.TextDirection.Inherit     // default
     * });
     * ```
     *
     *
     * The callback is called with the following signature *
     * ```javascript
     *
     *   function (oAction)
     * ```
     *
     *
     * The warning dialog opened by this method is processed asynchronously. Applications have to use `fnCallback`
     * to continue work after the user closed the warning dialog
     */
    warning(
      /**
       * Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated
       * since version 1.30.4.
       */
      vMessage: string,
      /**
       * Other options (optional)
       */
      mOptions?: {
        /**
         * Callback when the user closes the dialog
         */
        onClose?: Function;
        /**
         * Title of the warning dialog
         */
        title?: string;
        /**
         * ID to for the warning dialog. Intended for test scenarios, not recommended for productive apps
         */
        id?: string;
        /**
         * CSS style class which is added to the warning dialog's root DOM node. The compact design can be activated
         * by setting this to "sapUiSizeCompact"
         */
        styleClass?: string;
        /**
         * This option sets the action name, the text of the button or the control that gets the focus as first
         * focusable element after the MessageBox is opened. The usage of sap.ui.core.Control to set initialFocus
         * is deprecated since version 1.30.4.
         */
        initialFocus?: string | (Action | keyof typeof Action);
        /**
         * Specifies the element's text directionality with enumerated options. By default, the control inherits
         * text direction from the DOM.
         */
        textDirection?: TextDirection | keyof typeof TextDirection;
        /**
         * verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the
         * user can scroll vertically inside the MessageBox when the content is larger than the content area.
         */
        verticalScrolling?: boolean;
        /**
         * horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if
         * the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
         */
        horizontalScrolling?: boolean;
        /**
         * Added since version 1.28.0. If 'details' is set in the MessageBox, a link to view details is added. When
         * the user clicks the link, the text area containing 'details' information is displayed. The initial visibility
         * is not configurable and the details are hidden by default.
         */
        details?: string;
        /**
         * Added since version 1.72.0. Whether the MessageBox will be closed automatically when a routing navigation
         * occurs.
         */
        closeOnNavigation?: boolean;
      }
    ): void;
  }
  const MessageBox: MessageBox;
  export default MessageBox;

  /**
   * Enumeration of supported actions in a MessageBox.
   *
   * Each action is represented as a button in the message box. The values of this enumeration are used for
   * both, specifying the set of allowed actions as well as reporting back the user choice.
   */
  export enum Action {
    /**
     * Adds an "Abort" button to the message box.
     */
    ABORT = "ABORT",
    /**
     * Adds a "Cancel" button to the message box.
     */
    CANCEL = "CANCEL",
    /**
     * Adds a "Close" button to the message box.
     */
    CLOSE = "CLOSE",
    /**
     * Adds a "Delete" button to the message box.
     */
    DELETE = "DELETE",
    /**
     * Adds an "Ignore" button to the message box.
     */
    IGNORE = "IGNORE",
    /**
     * Adds a "No" button to the message box.
     */
    NO = "NO",
    /**
     * Adds an "OK" button to the message box.
     */
    OK = "OK",
    /**
     * Adds a "Retry" button to the message box.
     */
    RETRY = "RETRY",
    /**
     * Adds a "Yes" button to the message box.
     */
    YES = "YES",
  }
  /**
   * Enumeration of the pre-defined icons that can be used in a MessageBox.
   */
  export enum Icon {
    /**
     * Shows the error icon in the message box.
     */
    ERROR = "undefined",
    /**
     * Shows the information icon in the message box.
     */
    INFORMATION = "undefined",
    /**
     * Shows no icon in the message box.
     */
    NONE = "undefined",
    /**
     * Shows the question icon in the message box.
     */
    QUESTION = "undefined",
    /**
     * Shows the success icon in the message box.
     */
    SUCCESS = "undefined",
    /**
     * Shows the warning icon in the message box.
     */
    WARNING = "undefined",
  }
}

declare module "sap/m/MessageItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import Link from "sap/m/Link";

  import { URI, MessageType } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.46
   *
   * A wrapper control used to hold different types of system messages. Structure: The message item holds
   * the basic set of properties for a system message:
   * 	 -  Type, title, subtitle and description
   * 	 -  If the description contains markup, the `markupDescription` needs to be set to true, to ensure it
   * 			is interpreted correctly.
   * 	 -  If the long text description can be specified by a URL by setting, the `longtextUrl` property.
   *
   * 	 -  The message item can have a single {@link sap.m.Link} after the description. It is stored in the
   * 			`link` aggregation.  Usage: **Note:** The MessageItem control replaces {@link sap.m.MessagePopoverItem}
   * 			as a more generic wrapper for messages.
   */
  export default class MessageItem extends Item {
    /**
     * Constructor for a new MessageItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageItemSettings
    );
    /**
     * Constructor for a new MessageItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageItemSettings
    );

    /**
     * Destroys the link in the aggregation {@link #getLink link}.
     */
    destroyLink(): this;
    /**
     * Creates a new subclass of class sap.m.MessageItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.58
     *
     * Gets current value of property {@link #getActiveTitle activeTitle}.
     *
     * Defines whether the title of the item will be interactive.
     *
     * Default value is `false`.
     */
    getActiveTitle(): boolean;
    /**
     * Gets current value of property {@link #getCounter counter}.
     *
     * Defines the number of messages for a given message.
     */
    getCounter(): int;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Specifies detailed description of the message
     *
     * Default value is `empty string`.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getGroupName groupName}.
     *
     * Name of a message group the current item belongs to.
     *
     * Default value is `empty string`.
     */
    getGroupName(): string;
    /**
     * Gets content of aggregation {@link #getLink link}.
     *
     * Adds an sap.m.Link control which will be displayed at the end of the description of a message.
     */
    getLink(): Link;
    /**
     * Gets current value of property {@link #getLongtextUrl longtextUrl}.
     *
     * Specifies long text description location URL
     */
    getLongtextUrl(): URI;
    /**
     * Gets current value of property {@link #getMarkupDescription markupDescription}.
     *
     * Specifies if description should be interpreted as markup
     *
     * Default value is `false`.
     */
    getMarkupDescription(): boolean;
    /**
     * Returns a metadata object for class sap.m.MessageItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSubtitle subtitle}.
     *
     * Specifies the subtitle of the message **Note:** This is only visible when the `title` property is not
     * empty.
     */
    getSubtitle(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Specifies the title of the message
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Specifies the type of the message
     *
     * Default value is `Error`.
     */
    getType(): MessageType | keyof typeof MessageType;
    /**
     * @SINCE 1.58
     *
     * Sets a new value for property {@link #getActiveTitle activeTitle}.
     *
     * Defines whether the title of the item will be interactive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setActiveTitle(
      /**
       * New value for property `activeTitle`
       */
      bActiveTitle?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getCounter counter}.
     *
     * Defines the number of messages for a given message.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCounter(
      /**
       * New value for property `counter`
       */
      iCounter?: int
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Specifies detailed description of the message
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getGroupName groupName}.
     *
     * Name of a message group the current item belongs to.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setGroupName(
      /**
       * New value for property `groupName`
       */
      sGroupName?: string
    ): this;
    /**
     * Sets the aggregated {@link #getLink link}.
     */
    setLink(
      /**
       * The link to set
       */
      oLink: Link
    ): this;
    /**
     * Sets a new value for property {@link #getLongtextUrl longtextUrl}.
     *
     * Specifies long text description location URL
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLongtextUrl(
      /**
       * New value for property `longtextUrl`
       */
      sLongtextUrl?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getMarkupDescription markupDescription}.
     *
     * Specifies if description should be interpreted as markup
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setMarkupDescription(
      /**
       * New value for property `markupDescription`
       */
      bMarkupDescription?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSubtitle subtitle}.
     *
     * Specifies the subtitle of the message **Note:** This is only visible when the `title` property is not
     * empty.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSubtitle(
      /**
       * New value for property `subtitle`
       */
      sSubtitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Specifies the title of the message
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets type of the MessageItem. **Note:** if you set the type to None it will be handled and rendered as
     * Information.
     */
    setType(
      /**
       * Type of Message
       */
      sType: MessageType | keyof typeof MessageType
    ): this;
  }

  export interface $MessageItemSettings extends $ItemSettings {
    /**
     * Specifies the type of the message
     */
    type?: (MessageType | keyof typeof MessageType) | PropertyBindingInfo;

    /**
     * Specifies the title of the message
     */
    title?: string | PropertyBindingInfo;

    /**
     * Specifies the subtitle of the message **Note:** This is only visible when the `title` property is not
     * empty.
     */
    subtitle?: string | PropertyBindingInfo;

    /**
     * Specifies detailed description of the message
     */
    description?: string | PropertyBindingInfo;

    /**
     * Specifies if description should be interpreted as markup
     */
    markupDescription?: boolean | PropertyBindingInfo;

    /**
     * Specifies long text description location URL
     */
    longtextUrl?: URI | PropertyBindingInfo;

    /**
     * Defines the number of messages for a given message.
     */
    counter?: int | PropertyBindingInfo;

    /**
     * Name of a message group the current item belongs to.
     */
    groupName?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.58
     *
     * Defines whether the title of the item will be interactive.
     */
    activeTitle?: boolean | PropertyBindingInfo;

    /**
     * Adds an sap.m.Link control which will be displayed at the end of the description of a message.
     */
    link?: Link;
  }
}

declare module "sap/m/MessagePage" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI, TextDirection } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import Link from "sap/m/Link";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28
   *
   * Displays an empty page with an icon and a header when certain conditions are met. Overview: MessagePage
   * is displayed when there is no data or matching content. There are different use cases where a MessagePage
   * might be visualized, for example:
   * 	 - The search query returned no results
   * 	 - The app contains no items
   * 	 - There are too many items
   * 	 - The application is loading  The layout is unchanged but the text and icon vary depending on
   * 			the use case. Usage: **Note:** The `MessagePage` is not intended to be used as a top-level control, but
   * 			rather used within controls such as `NavContainer`, `App`, `Shell` or other container controls.
   */
  export default class MessagePage extends Control {
    /**
     * Constructor for a new MessagePage.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-page/ Message Page}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessagePageSettings
    );
    /**
     * Constructor for a new MessagePage.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-page/ Message Page}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessagePageSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.54
     *
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: Button
    ): this;
    /**
     * @SINCE 1.28.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.MessagePage`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePage` itself.
     *
     * This event is fired when Nav Button is pressed.
     */
    attachNavButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePage` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.54
     *
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * Destroys the customDescription in the aggregation {@link #getCustomDescription customDescription}.
     */
    destroyCustomDescription(): this;
    /**
     * Destroys the customText in the aggregation {@link #getCustomText customText}.
     */
    destroyCustomText(): this;
    /**
     * @SINCE 1.28.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.MessagePage`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MessagePage with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessagePage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.28.1
     *
     * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
     */
    fireNavButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.54
     *
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * The buttons displayed under the description text.
     *
     * **Note:** Buttons added to this aggregation are both vertically and horizontally centered. Depending
     * on the available space, they may be rendered on several lines.
     */
    getButtons(): Button[];
    /**
     * Gets content of aggregation {@link #getCustomDescription customDescription}.
     *
     * The (optional) custom description control of this page. Use this aggregation when the "description" (sap.m.Text)
     * control needs to be replaced with an sap.m.Link control. "description" and "textDirection" setters can
     * be used for this aggregation.
     */
    getCustomDescription(): Link;
    /**
     * Gets content of aggregation {@link #getCustomText customText}.
     *
     * The (optional) custom Text control of this page. Use this aggregation when the "text" (sap.m.Text) control
     * needs to be replaced with an sap.m.Link control. "text" and "textDirection" setters can be used for this
     * aggregation.
     */
    getCustomText(): Link;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Determines the detailed description that shows additional information on the MessagePage.
     *
     * Default value is `"Check the filter settings."`.
     */
    getDescription(): string;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getEnableFormattedText enableFormattedText}.
     *
     * Defines whether the value set in the `description` property is displayed as formatted text in HTML format.
     *
     * For details regarding supported HTML tags, see {@link sap.m.FormattedText}
     *
     * Default value is `false`.
     */
    getEnableFormattedText(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Determines the icon displayed on the MessagePage.
     *
     * Default value is `"sap-icon://documents"`.
     */
    getIcon(): URI;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getIconAlt iconAlt}.
     *
     * Defines the alt attribute of the icon displayed on the `MessagePage`.
     */
    getIconAlt(): string;
    /**
     * Returns a metadata object for class sap.m.MessagePage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * Determines the visibility of the MessagePage header. Can be used to hide the header of the MessagePage
     * when it's embedded in another page.
     *
     * Default value is `true`.
     */
    getShowHeader(): boolean;
    /**
     * Gets current value of property {@link #getShowNavButton showNavButton}.
     *
     * Determines the visibility of the navigation button in MessagePage header.
     *
     * Default value is `false`.
     */
    getShowNavButton(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Determines the main text displayed on the MessagePage.
     *
     * Default value is `"No matching items found."`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Determines the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title in the header of MessagePage.
     */
    getTitle(): string;
    /**
     * @SINCE 1.54
     *
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getButtons buttons}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: Button
    ): int;
    /**
     * @SINCE 1.54
     *
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: Button,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.54
     *
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): Button[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.54
     *
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | Button
    ): Button;
    /**
     * Sets the aggregated {@link #getCustomDescription customDescription}.
     */
    setCustomDescription(
      /**
       * The customDescription to set
       */
      oCustomDescription: Link
    ): this;
    /**
     * Sets the aggregated {@link #getCustomText customText}.
     */
    setCustomText(
      /**
       * The customText to set
       */
      oCustomText: Link
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Determines the detailed description that shows additional information on the MessagePage.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Check the filter settings."`.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getEnableFormattedText enableFormattedText}.
     *
     * Defines whether the value set in the `description` property is displayed as formatted text in HTML format.
     *
     * For details regarding supported HTML tags, see {@link sap.m.FormattedText}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableFormattedText(
      /**
       * New value for property `enableFormattedText`
       */
      bEnableFormattedText?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Determines the icon displayed on the MessagePage.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"sap-icon://documents"`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getIconAlt iconAlt}.
     *
     * Defines the alt attribute of the icon displayed on the `MessagePage`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconAlt(
      /**
       * New value for property `iconAlt`
       */
      sIconAlt?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * Determines the visibility of the MessagePage header. Can be used to hide the header of the MessagePage
     * when it's embedded in another page.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowNavButton showNavButton}.
     *
     * Determines the visibility of the navigation button in MessagePage header.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowNavButton(
      /**
       * New value for property `showNavButton`
       */
      bShowNavButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the main text displayed on the MessagePage.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"No matching items found."`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Determines the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Determines the title in the header of MessagePage.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.28.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.MessagePage`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePage` itself.
     *
     * This event is fired when Nav Button is pressed.
     */
    attachNavButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePage` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MessagePageSettings extends $ControlSettings {
    /**
     * Determines the main text displayed on the MessagePage.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Determines the detailed description that shows additional information on the MessagePage.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Determines the title in the header of MessagePage.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines the visibility of the MessagePage header. Can be used to hide the header of the MessagePage
     * when it's embedded in another page.
     */
    showHeader?: boolean | PropertyBindingInfo;

    /**
     * Determines the visibility of the navigation button in MessagePage header.
     */
    showNavButton?: boolean | PropertyBindingInfo;

    /**
     * Determines the icon displayed on the MessagePage.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Defines the alt attribute of the icon displayed on the `MessagePage`.
     */
    iconAlt?: string | PropertyBindingInfo;

    /**
     * Determines the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines whether the value set in the `description` property is displayed as formatted text in HTML format.
     *
     * For details regarding supported HTML tags, see {@link sap.m.FormattedText}
     */
    enableFormattedText?: boolean | PropertyBindingInfo;

    /**
     * The (optional) custom Text control of this page. Use this aggregation when the "text" (sap.m.Text) control
     * needs to be replaced with an sap.m.Link control. "text" and "textDirection" setters can be used for this
     * aggregation.
     */
    customText?: Link;

    /**
     * The (optional) custom description control of this page. Use this aggregation when the "description" (sap.m.Text)
     * control needs to be replaced with an sap.m.Link control. "description" and "textDirection" setters can
     * be used for this aggregation.
     */
    customDescription?: Link;

    /**
     * @SINCE 1.54
     *
     * The buttons displayed under the description text.
     *
     * **Note:** Buttons added to this aggregation are both vertically and horizontally centered. Depending
     * on the available space, they may be rendered on several lines.
     */
    buttons?: Button[] | Button | AggregationBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @SINCE 1.28.1
     *
     * This event is fired when Nav Button is pressed.
     */
    navButtonPress?: Function;
  }
}

declare module "sap/m/MessagePopover" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import MessageItem from "sap/m/MessageItem";

  import MessagePopoverItem from "sap/m/MessagePopoverItem";

  import { MessageType } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { VerticalPlacementType } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28
   *
   * A `MessagePopover` is used to display a summarized list of different types of messages (error, warning,
   * success, and information messages).
   *
   * Overview:
   *
   * It provides a handy and systematized way to navigate and explore details for every message. It is adaptive
   * and responsive. It renders as a dialog with a Close button in the header on phones, and as a popover
   * on tablets and higher resolution devices. It also exposes an event {@link sap.m.MessagePopover#event:activeTitlePress},
   * which can be used for navigation from a message to the source of the issue. Notes::
   * 	 -  If your application changes its model between two interactions with the `MessagePopover`, this could
   * 			lead to outdated messages being shown. To avoid this, you need to call `navigateBack` when the model
   * 			is updated.
   * 	 -  Messages can have descriptions preformatted with HTML markup. In this case, the `markupDescription`
   * 			has to be set to `true`.
   * 	 -  If the message cannot be fully displayed or includes a long description, the `MessagePopover` provides
   * 			navigation to the detailed description.  Structure: The `MessagePopover` stores all messages in
   * 			an aggregation of type {@link sap.m.MessageItem} named `items`.
   *
   * A set of properties determines how the items are rendered:
   * 	 -  counter - An integer that is used to indicate the number of errors for each type.
   * 	 -  type - The type of message.
   * 	 -  title/subtitle - The title and subtitle of the message.
   * 	 -  description - The long text description of the message.
   * 	 -  activeTitle - Determines whether the title of the item is interactive.  Usage: When to use::
   *
   * 	 - When you want to make sure that all content is visible on any device.
   * 	 - When you want a way to centrally manage messages and show them to the user without additional work
   * 			for the developer. The `MessagePopover` is triggered from a messaging button in the footer toolbar. If
   * 			an error has occurred at any validation point, the total number of messages should be incremented, but
   * 			the user's work shouldn't be interrupted. Navigation between the message item and the source of the error
   * 			can be created, if needed by the application. This can be done by setting the `activeTitle` property
   * 			to `true` and providing a handler for the `activeTitlePress` event. In addition, you can achieve the
   * 			same functionality inside a different container using the {@link sap.m.MessageView} control.  Responsive
   * 			Behavior: On mobile phones, the `MessagePopover` is automatically shown in full screen mode.
   *  On desktop and tablet, the message popover opens in a popover.
   *  On desktop the opened popover is resizable, if it is placed in a {@link sap.m.Toolbar}, {@link sap.m.Bar},
   * or used in {@link sap.m.semantic.SemanticPage}.
   */
  export default class MessagePopover extends Control {
    /**
     * Constructor for a new MessagePopover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-popover/ Message Popover}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessagePopoverSettings
    );
    /**
     * Constructor for a new MessagePopover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-popover/ Message Popover}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessagePopoverSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      vItem: MessageItem | MessagePopoverItem
    ): this;
    /**
     * @SINCE 1.58
     *
     * Attaches event handler `fnFunction` to the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when an active title of a `MessageItem` is clicked.
     */
    attachActiveTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired after the popover is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired before the popover is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired before the popover is opened.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when description is shown.
     */
    attachItemSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listSelect listSelect} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    attachListSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when the long text description data from a remote URL is loaded.
     */
    attachLongtextLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:urlValidated urlValidated} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when a validation of a URL from long text description is ready.
     */
    attachUrlValidated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the MessagePopover
     */
    close(): this;
    /**
     * Destroys the headerButton in the aggregation {@link #getHeaderButton headerButton}.
     */
    destroyHeaderButton(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.58
     *
     * Detaches event handler `fnFunction` from the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachActiveTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemSelect itemSelect} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:listSelect listSelect} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachListSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLongtextLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:urlValidated urlValidated} event of this `sap.m.MessagePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUrlValidated(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MessagePopover with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessagePopover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.58
     *
     * Fires event {@link #event:activeTitlePress activeTitlePress} to attached listeners.
     */
    fireActiveTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the message item that contains the activeTitle.
         */
        item?: MessageItem;
      }
    ): this;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the control that opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the control that opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the control that opens the popover. See {@link sap.ui.core.MessageType} enum values for types.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the control that opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
     */
    fireItemSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the `MessagePopover` item that is being presented.
         */
        item?: MessagePopoverItem;
        /**
         * Refers to the type of messages being shown.
         */
        messageTypeFilter?: MessageType | keyof typeof MessageType;
      }
    ): this;
    /**
     * Fires event {@link #event:listSelect listSelect} to attached listeners.
     */
    fireListSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the type of messages being shown.
         */
        messageTypeFilter?: MessageType | keyof typeof MessageType;
      }
    ): this;
    /**
     * Fires event {@link #event:longtextLoaded longtextLoaded} to attached listeners.
     */
    fireLongtextLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:urlValidated urlValidated} to attached listeners.
     */
    fireUrlValidated(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
     *
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function. You can use this function in order to validate the description before displaying it.
     */
    getAsyncDescriptionHandler(): any;
    /**
     * Gets current value of property {@link #getAsyncURLHandler asyncURLHandler}.
     *
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function. You can use this function in order to validate URLs before displaying them inside the description.
     */
    getAsyncURLHandler(): any;
    /**
     * Gets current value of property {@link #getGroupItems groupItems}.
     *
     * Defines whether the MessageItems are grouped or not.
     *
     * Default value is `false`.
     */
    getGroupItems(): boolean;
    /**
     * Gets content of aggregation {@link #getHeaderButton headerButton}.
     *
     * Sets a custom header button.
     */
    getHeaderButton(): Button;
    /**
     * Gets current value of property {@link #getInitiallyExpanded initiallyExpanded}.
     *
     * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded.
     * Note: If there is only one message in the control, this state will be ignored and the details page of
     * the message will be shown.
     *
     * Default value is `true`.
     */
    getInitiallyExpanded(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * A list with message items.
     */
    getItems(): Array<MessageItem | MessagePopoverItem>;
    /**
     * Returns a metadata object for class sap.m.MessagePopover.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * Determines the position, where the control will appear on the screen. The default value is `sap.m.VerticalPlacementType.Vertical`.
     * Setting this property while the control is open, will not cause any re-rendering and changing of the
     * position. Changes will only be applied with the next interaction.
     *
     * Default value is `"Vertical"`.
     */
    getPlacement(): VerticalPlacementType | keyof typeof VerticalPlacementType;
    /**
     * Checks for the provided `sap.m.MessageItem` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      vItem: MessageItem | MessagePopoverItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      vItem: MessageItem | MessagePopoverItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * The method checks if the MessagePopover is open. It returns true when the MessagePopover is currently
     * open (this includes opening and closing animations), otherwise it returns false
     */
    isOpen(): boolean;
    /**
     * Navigates back to the list page.
     */
    navigateBack(): void;
    /**
     * Opens the MessagePopover
     */
    openBy(
      /**
       * Control which opens the MessagePopover
       */
      oControl: Control
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): Array<MessageItem | MessagePopoverItem>;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | MessageItem | MessagePopoverItem
    ): MessageItem | MessagePopoverItem;
    /**
     * Sets a new value for property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
     *
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function. You can use this function in order to validate the description before displaying it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAsyncDescriptionHandler(
      /**
       * New value for property `asyncDescriptionHandler`
       */
      oAsyncDescriptionHandler?: any
    ): this;
    /**
     * Sets a new value for property {@link #getAsyncURLHandler asyncURLHandler}.
     *
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function. You can use this function in order to validate URLs before displaying them inside the description.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAsyncURLHandler(
      /**
       * New value for property `asyncURLHandler`
       */
      oAsyncURLHandler?: any
    ): this;
    /**
     * Setter for default description and URL validation callbacks across all instances of MessagePopover
     */
    static setDefaultHandlers(
      /**
       * An object setting default callbacks
       */
      mDefaultHandlers: {
        /**
         * The description handler
         */
        asyncDescriptionHandler: Function;
        /**
         * The URL handler
         */
        asyncURLHandler: Function;
      }
    ): void;
    /**
     * Sets a new value for property {@link #getGroupItems groupItems}.
     *
     * Defines whether the MessageItems are grouped or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGroupItems(
      /**
       * New value for property `groupItems`
       */
      bGroupItems?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getHeaderButton headerButton}.
     */
    setHeaderButton(
      /**
       * The headerButton to set
       */
      oHeaderButton: Button
    ): this;
    /**
     * Sets a new value for property {@link #getInitiallyExpanded initiallyExpanded}.
     *
     * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded.
     * Note: If there is only one message in the control, this state will be ignored and the details page of
     * the message will be shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setInitiallyExpanded(
      /**
       * New value for property `initiallyExpanded`
       */
      bInitiallyExpanded?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPlacement placement}.
     *
     * Determines the position, where the control will appear on the screen. The default value is `sap.m.VerticalPlacementType.Vertical`.
     * Setting this property while the control is open, will not cause any re-rendering and changing of the
     * position. Changes will only be applied with the next interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Vertical"`.
     */
    setPlacement(
      /**
       * New value for property `placement`
       */
      sPlacement?: VerticalPlacementType | keyof typeof VerticalPlacementType
    ): this;
    /**
     * This method toggles between open and closed state of the MessagePopover instance. oControl parameter
     * is mandatory in the same way as in 'openBy' method
     */
    toggle(
      /**
       * Control which opens the MessagePopover
       */
      oControl: Control
    ): this;
    /**
     * @SINCE 1.58
     *
     * Attaches event handler `fnFunction` to the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when an active title of a `MessageItem` is clicked.
     */
    attachActiveTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired after the popover is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired before the popover is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired before the popover is opened.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when description is shown.
     */
    attachItemSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listSelect listSelect} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    attachListSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when the long text description data from a remote URL is loaded.
     */
    attachLongtextLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:urlValidated urlValidated} event of this `sap.m.MessagePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessagePopover` itself.
     *
     * Event fired when a validation of a URL from long text description is ready.
     */
    attachUrlValidated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessagePopover` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MessagePopoverSettings extends $ControlSettings {
    /**
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function. You can use this function in order to validate the description before displaying it.
     */
    asyncDescriptionHandler?: any | PropertyBindingInfo;

    /**
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function. You can use this function in order to validate URLs before displaying them inside the description.
     */
    asyncURLHandler?: any | PropertyBindingInfo;

    /**
     * Determines the position, where the control will appear on the screen. The default value is `sap.m.VerticalPlacementType.Vertical`.
     * Setting this property while the control is open, will not cause any re-rendering and changing of the
     * position. Changes will only be applied with the next interaction.
     */
    placement?:
      | (VerticalPlacementType | keyof typeof VerticalPlacementType)
      | PropertyBindingInfo;

    /**
     * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded.
     * Note: If there is only one message in the control, this state will be ignored and the details page of
     * the message will be shown.
     */
    initiallyExpanded?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the MessageItems are grouped or not.
     */
    groupItems?: boolean | PropertyBindingInfo;

    /**
     * A list with message items.
     */
    items?:
      | Array<MessagePopoverItem | MessageItem>
      | MessagePopoverItem
      | MessageItem
      | AggregationBindingInfo;

    /**
     * Sets a custom header button.
     */
    headerButton?: Button;

    /**
     * Event fired after the popover is opened.
     */
    afterOpen?: Function;

    /**
     * Event fired after the popover is closed.
     */
    afterClose?: Function;

    /**
     * Event fired before the popover is opened.
     */
    beforeOpen?: Function;

    /**
     * Event fired before the popover is closed.
     */
    beforeClose?: Function;

    /**
     * Event fired when description is shown.
     */
    itemSelect?: Function;

    /**
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    listSelect?: Function;

    /**
     * Event fired when the long text description data from a remote URL is loaded.
     */
    longtextLoaded?: Function;

    /**
     * Event fired when a validation of a URL from long text description is ready.
     */
    urlValidated?: Function;

    /**
     * @SINCE 1.58
     *
     * Event fired when an active title of a `MessageItem` is clicked.
     */
    activeTitlePress?: Function;
  }
}

declare module "sap/m/MessagePopoverItem" {
  import {
    default as MessageItem,
    $MessageItemSettings,
  } from "sap/m/MessageItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.28
   * @deprecated (since 1.46) - use MessageItem instead
   *
   * Items provide information about Error Messages in the page.
   */
  export default class MessagePopoverItem extends MessageItem {
    /**
     * Constructor for a new MessagePopoverItem.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MessagePopoverItemSettings
    );
    /**
     * Constructor for a new MessagePopoverItem.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MessagePopoverItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.MessagePopoverItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.MessageItem.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessagePopoverItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.MessagePopoverItem.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $MessagePopoverItemSettings extends $MessageItemSettings {}
}

declare module "sap/m/MessageStrip" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI, MessageType } from "sap/ui/core/library";

  import Link from "sap/m/Link";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30
   *
   * MessageStrip is a control that enables the embedding of application-related messages in the application.
   * Overview: The message strip displays 4 types of messages, each with a corresponding semantic color and
   * icon: Information, Success, Warning and Error.
   *
   * Each message can have a close button, so that it can be removed from the UI if needed.
   *
   * You can use a limited set of formatting tags for the message text by setting `enableFormattedText`. The
   * allowed tags are: With version 1.50
   * 	 - <a>
   * 	 - <em>
   * 	 - <strong>
   * 	 - <u>  With version 1.85
   * 	 - <br>
   *
   * Dynamically generated Message Strip: To meet the accessibility requirements when using dynamically generated
   * Message Strip you must implement it alongside `sap.ui.core.InvisibleMessage`. This will allow screen
   * readers to announce it in real time. We suggest such dynamically generated message strips to be announced
   * as Information Bar, as shown in our “Dynamic Message Strip Generator sample.”
   *
   * Usage: When to use:
   * 	 - You want to provide information or status update within the detail area of an object  When not
   * 			to use:
   * 	 - You want to display information within the object page header, within a control, in the master list,
   * 			or above the page header.
   */
  export default class MessageStrip extends Control {
    /**
     * Constructor for a new MessageStrip.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-strip/ Message Strip}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageStripSettings
    );
    /**
     * Constructor for a new MessageStrip.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-strip/ Message Strip}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageStripSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.MessageStrip`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageStrip` itself.
     *
     * This event will be fired after the container is closed.
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageStrip` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the MessageStrip. This method sets the visible property of the MessageStrip to false. The MessageStrip
     * can be shown again by setting the visible property to true.
     */
    close(): void;
    /**
     * Destroys the link in the aggregation {@link #getLink link}.
     */
    destroyLink(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.m.MessageStrip`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MessageStrip with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageStrip>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:close close} to attached listeners.
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getCustomIcon customIcon}.
     *
     * Determines a custom icon which is displayed. If none is set, the default icon for this message type is
     * used.
     *
     * Default value is `empty string`.
     */
    getCustomIcon(): URI;
    /**
     * @SINCE 1.50
     *
     * Gets current value of property {@link #getEnableFormattedText enableFormattedText}.
     *
     * Determines the limited collection of HTML elements passed to the `text` property should be evaluated.
     *
     * **Note:** If this property is set to true the string passed to `text` property can evaluate the following
     * list of limited HTML elements. All other HTML elements and their nested content will not be rendered
     * by the control:
     * 	 - `a`
     * 	 - `br`
     * 	 - `em`
     * 	 - `strong`
     * 	 - `u`
     *
     * Default value is `false`.
     */
    getEnableFormattedText(): boolean;
    /**
     * Gets content of aggregation {@link #getLink link}.
     *
     * Adds an sap.m.Link control which will be displayed at the end of the message.
     */
    getLink(): Link;
    /**
     * Returns a metadata object for class sap.m.MessageStrip.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowCloseButton showCloseButton}.
     *
     * Determines if the message has a close button in the upper right corner.
     *
     * Default value is `false`.
     */
    getShowCloseButton(): boolean;
    /**
     * Gets current value of property {@link #getShowIcon showIcon}.
     *
     * Determines if an icon is displayed for the message.
     *
     * Default value is `false`.
     */
    getShowIcon(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Determines the text of the message.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Determines the type of messages that are displayed in the MessageStrip. Possible values are: Information
     * (default), Success, Warning, Error. If None is passed, the value is set to Information and a warning
     * is displayed in the console.
     *
     * Default value is `Information`.
     */
    getType(): MessageType | keyof typeof MessageType;
    /**
     * Sets a new value for property {@link #getCustomIcon customIcon}.
     *
     * Determines a custom icon which is displayed. If none is set, the default icon for this message type is
     * used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setCustomIcon(
      /**
       * New value for property `customIcon`
       */
      sCustomIcon?: URI
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets a new value for property {@link #getEnableFormattedText enableFormattedText}.
     *
     * Determines the limited collection of HTML elements passed to the `text` property should be evaluated.
     *
     * **Note:** If this property is set to true the string passed to `text` property can evaluate the following
     * list of limited HTML elements. All other HTML elements and their nested content will not be rendered
     * by the control:
     * 	 - `a`
     * 	 - `br`
     * 	 - `em`
     * 	 - `strong`
     * 	 - `u`
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableFormattedText(
      /**
       * New value for property `enableFormattedText`
       */
      bEnableFormattedText?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getLink link}.
     */
    setLink(
      /**
       * The link to set
       */
      oLink: Link
    ): this;
    /**
     * Sets a new value for property {@link #getShowCloseButton showCloseButton}.
     *
     * Determines if the message has a close button in the upper right corner.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowCloseButton(
      /**
       * New value for property `showCloseButton`
       */
      bShowCloseButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcon showIcon}.
     *
     * Determines if an icon is displayed for the message.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowIcon(
      /**
       * New value for property `showIcon`
       */
      bShowIcon?: boolean
    ): this;
    /**
     * Setter for property text. Default value is empty/undefined
     */
    setText(
      /**
       * new value for property text
       */
      sText: string
    ): this;
    /**
     * Setter for property type. Default value is sap.ui.core.MessageType.Information
     */
    setType(
      /**
       * The Message type
       */
      sType: MessageType | keyof typeof MessageType
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.MessageStrip`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageStrip` itself.
     *
     * This event will be fired after the container is closed.
     */
    attachClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageStrip` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MessageStripSettings extends $ControlSettings {
    /**
     * Determines the text of the message.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Determines the type of messages that are displayed in the MessageStrip. Possible values are: Information
     * (default), Success, Warning, Error. If None is passed, the value is set to Information and a warning
     * is displayed in the console.
     */
    type?: (MessageType | keyof typeof MessageType) | PropertyBindingInfo;

    /**
     * Determines a custom icon which is displayed. If none is set, the default icon for this message type is
     * used.
     */
    customIcon?: URI | PropertyBindingInfo;

    /**
     * Determines if an icon is displayed for the message.
     */
    showIcon?: boolean | PropertyBindingInfo;

    /**
     * Determines if the message has a close button in the upper right corner.
     */
    showCloseButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.50
     *
     * Determines the limited collection of HTML elements passed to the `text` property should be evaluated.
     *
     * **Note:** If this property is set to true the string passed to `text` property can evaluate the following
     * list of limited HTML elements. All other HTML elements and their nested content will not be rendered
     * by the control:
     * 	 - `a`
     * 	 - `br`
     * 	 - `em`
     * 	 - `strong`
     * 	 - `u`
     */
    enableFormattedText?: boolean | PropertyBindingInfo;

    /**
     * Adds an sap.m.Link control which will be displayed at the end of the message.
     */
    link?: Link;

    /**
     * This event will be fired after the container is closed.
     */
    close?: Function;
  }
}

declare module "sap/m/MessageToast" {
  import { CSSSize } from "sap/ui/core/library";

  import { Dock } from "sap/ui/core/Popup";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.9.2
   *
   * A small, non-disruptive popup for messages. Overview: A message toast is a small, non-disruptive popup
   * for success or information messages that disappears automatically after a few seconds. Toasts automatically
   * disappear after a timeout unless the user moves the mouse over the toast or taps on it. Notes::
   *
   * 	 - If the configured message contains HTML code or script tags, those will be escaped.
   * 	 - Line breaks (\r\n, \n\r, \r, \n) will be visualized.
   * 	 - Only one message toast can be shown at a time in the same place.  Example:: Here is an example
   * 			of a MessageToast with all default options:
   * ```javascript
   *
   * sap.m.MessageToast.show("This message should appear in the message toast", {
   *     duration: 3000,                  // default
   *     width: "15em",                   // default
   *     my: "center bottom",             // default
   *     at: "center bottom",             // default
   *     of: window,                      // default
   *     offset: "0 0",                   // default
   *     collision: "fit fit",            // default
   *     onClose: null,                   // default
   *     autoClose: true,                 // default
   *     animationTimingFunction: "ease", // default
   *     animationDuration: 1000,         // default
   *     closeOnBrowserNavigation: true   // default
   * });
   * ```
   *  Usage: When to use::
   * 	 - You want to display a short success of information message.
   * 	 - You do not want to interrupt users while they are performing an action.
   * 	 - You want to confirm a successful action.  When not to use::
   * 	 - You want to display an error or warning message.
   * 	 - You want to interrupt users while they are performing an action.
   * 	 - You want to make sure that users read the message before they leave the page.
   * 	 - You want users to be able to copy some part of the message text. (In this case, show a success {@link
   * 			sap.m.Dialog Message Dialog}.)  Responsive Behavior: The message toast has the same behavior on
   * 			all devices. However, you can adjust the width of the control, for example, for use on a desktop device.
   * See:
   * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-toast/ Message Toast}
   */
  interface MessageToast {
    /**
     * Creates and displays a simple message toast notification message with the given text, and optionally
     * other options.
     *
     * The only mandatory parameter is `sMessage`.
     */
    show(
      /**
       * The message to be displayed.
       */
      sMessage: string,
      /**
       * Object which can contain all other options. Not all entries in this object are required. This property
       * is optional.
       */
      mOptions?: {
        /**
         * Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
         */
        duration?: int;
        /**
         * The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
         */
        width?: CSSSize;
        /**
         * Specifies which point of the message toast should be aligned (e.g. `Dock.LeftTop` To use as align point
         * the left top corner of the message toast).
         */
        my?: Dock;
        /**
         * Specifies the point of the reference element to which the message toast should be aligned (e.g. `Dock.RightBottom`
         * To position the message toast according to the bottom right corner of the reference element).
         */
        at?: Dock;
        /**
         * Specifies the reference element to which the message toast should be aligned, by default it is aligned
         * to the browser visual viewport.
         */
        of?: Control | Element | jQuery | Window | undefined;
        /**
         * The offset relative to the docking point, specified as a string with space-separated pixel values (e.g.
         * "10 5" to move the message toast 10 pixels to the right and 5 pixels to the bottom).
         */
        offset?: string;
        /**
         * Specifies how the position of the message toast should be adjusted in case it overflows the screen in
         * some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit
         * flip”, "fit none".
         */
        collision?: string;
        /**
         * Function to be called when the message toast closes.
         */
        onClose?: Function;
        /**
         * Specify whether the message toast should close as soon as the end user touches the screen.
         */
        autoClose?: boolean;
        /**
         * Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out",
         * "ease-in-out".
         */
        animationTimingFunction?: string;
        /**
         * Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer.
         * For not animation set to 0.
         */
        animationDuration?: int;
        /**
         * Specifies if the message toast closes on browser navigation.
         */
        closeOnBrowserNavigation?: boolean;
      }
    ): void;
  }
  const MessageToast: MessageToast;
  export default MessageToast;
}

declare module "sap/m/MessageView" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import MessageItem from "sap/m/MessageItem";

  import { MessageType } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.46
   *
   * It is used to display a summarized list of different types of messages (error, warning, success, and
   * information messages).
   *
   * Overview: It is meant to be embedded into container controls (such as {@link sap.m.Popover}, {@link sap.m.ResponsivePopover},
   * {@link sap.m.Dialog}). It provides a handy and systematized way to navigate and explore details for every
   * message. If the `MessageView` contains only one item, which has either description, markupDescription
   * or longTextUrl, its details page will be displayed initially. It also exposes the {@link sap.m.MessageView#event:activeTitlePress}
   * event, which can be used for navigation from a message to its source. Notes::
   * 	 - If your application changes its model between two interactions with the `MessageView`, this could
   * 			lead to outdated messages being shown. To avoid this, you need to call `navigateBack` on the `MessageView`
   * 			BEFORE opening its container.
   * 	 -  Messages can have descriptions preformatted with HTML markup. In this case, the `markupDescription`
   * 			has to be set to `true`.
   * 	 -  If the message cannot be fully displayed, or includes a long description, the `MessageView` provides
   * 			navigation to the detailed description.   Structure: The `MessageView` stores all messages in an
   * 			association of type {@link sap.m.MessageItem}, named `items`.
   *  A set of properties determines how the items are rendered:
   * 	 -  counter - An integer that is used to indicate the number of errors for each type.
   * 	 -  type - The type of message.
   * 	 -  title/subtitle - The title and subtitle of the message.
   * 	 -  description - The long text description of the message.
   * 	 -  activeTitle - Determines whether the title of the item is interactive.  Usage: When to use::
   *
   * 	 - When you want a way to centrally manage messages and show them to the user without additional work
   * 			for the developer. If needed the navigation between the message item and the source of the error can
   * 			be created by the application. This can be done by setting the `activeTitle` property to true and providing
   * 			a handler for the `activeTitlePress` event.  Responsive Behavior: The responsiveness of the `MessageView`
   * 			is determined by the container in which it is embedded. For that reason the control could not be visualized
   * 			if the container’s sizes are not defined.
   */
  export default class MessageView extends Control {
    /**
     * Constructor for a new MessageView
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-view/ Message View}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageViewSettings
    );
    /**
     * Constructor for a new MessageView
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/message-view/ Message View}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MessageViewSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: MessageItem
    ): this;
    /**
     * @SINCE 1.58
     *
     * Attaches event handler `fnFunction` to the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when an activeTitle of a MessageItem is pressed.
     */
    attachActiveTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.72) - Use the appropriate event from the wrapper control, instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when description is shown.
     */
    attachItemSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listSelect listSelect} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    attachListSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when the long text description data from a remote URL is loaded.
     */
    attachLongtextLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:urlValidated urlValidated} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when a validation of a URL from long text description is ready.
     */
    attachUrlValidated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the headerButton in the aggregation {@link #getHeaderButton headerButton}.
     */
    destroyHeaderButton(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.58
     *
     * Detaches event handler `fnFunction` from the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachActiveTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.72) - Use the appropriate event from the wrapper control, instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemSelect itemSelect} event of this `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:listSelect listSelect} event of this `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachListSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLongtextLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:urlValidated urlValidated} event of this `sap.m.MessageView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUrlValidated(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MessageView with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessageView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.58
     *
     * Fires event {@link #event:activeTitlePress activeTitlePress} to attached listeners.
     */
    fireActiveTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the message item that contains the activeTitle.
         */
        item?: MessageItem;
      }
    ): this;
    /**
     * @deprecated (since 1.72) - Use the appropriate event from the wrapper control, instead.
     *
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This refers to the control which opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
     */
    fireItemSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Refers to the message item that is being presented.
         */
        item?: MessageItem;
        /**
         * Refers to the type of messages being shown. See sap.ui.core.MessageType values for types.
         */
        messageTypeFilter?: MessageType | keyof typeof MessageType;
      }
    ): this;
    /**
     * Fires event {@link #event:listSelect listSelect} to attached listeners.
     */
    fireListSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the type of messages being shown.
         */
        messageTypeFilter?: MessageType | keyof typeof MessageType;
      }
    ): this;
    /**
     * Fires event {@link #event:longtextLoaded longtextLoaded} to attached listeners.
     */
    fireLongtextLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:urlValidated urlValidated} to attached listeners.
     */
    fireUrlValidated(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
     *
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function.
     */
    getAsyncDescriptionHandler(): any;
    /**
     * Gets current value of property {@link #getAsyncURLHandler asyncURLHandler}.
     *
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function.
     */
    getAsyncURLHandler(): any;
    /**
     * Gets current value of property {@link #getGroupItems groupItems}.
     *
     * Defines whether the MessageItems are grouped or not.
     *
     * Default value is `false`.
     */
    getGroupItems(): boolean;
    /**
     * Gets content of aggregation {@link #getHeaderButton headerButton}.
     *
     * Sets a custom header button.
     */
    getHeaderButton(): Button;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * A list with message items. If only one item is provided, the initial page will be the details page for
     * the item.
     */
    getItems(): MessageItem[];
    /**
     * Returns a metadata object for class sap.m.MessageView.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowDetailsPageHeader showDetailsPageHeader}.
     *
     * Defines whether the header of details page will be shown.
     *
     * Default value is `true`.
     */
    getShowDetailsPageHeader(): boolean;
    /**
     * Checks for the provided `sap.m.MessageItem` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: MessageItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: MessageItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Navigates back to the list page
     */
    navigateBack(): void;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): MessageItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | MessageItem
    ): MessageItem;
    /**
     * Sets a new value for property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
     *
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAsyncDescriptionHandler(
      /**
       * New value for property `asyncDescriptionHandler`
       */
      oAsyncDescriptionHandler?: any
    ): this;
    /**
     * Sets a new value for property {@link #getAsyncURLHandler asyncURLHandler}.
     *
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAsyncURLHandler(
      /**
       * New value for property `asyncURLHandler`
       */
      oAsyncURLHandler?: any
    ): this;
    /**
     * Setter for default description and URL validation callbacks across all instances of MessageView
     */
    static setDefaultHandlers(
      /**
       * An object setting default callbacks
       */
      mDefaultHandlers: {
        /**
         * The description handler
         */
        asyncDescriptionHandler: Function;
        /**
         * The URL handler
         */
        asyncURLHandler: Function;
      }
    ): void;
    /**
     * Sets a new value for property {@link #getGroupItems groupItems}.
     *
     * Defines whether the MessageItems are grouped or not.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGroupItems(
      /**
       * New value for property `groupItems`
       */
      bGroupItems?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getHeaderButton headerButton}.
     */
    setHeaderButton(
      /**
       * The headerButton to set
       */
      oHeaderButton: Button
    ): this;
    /**
     * Sets a new value for property {@link #getShowDetailsPageHeader showDetailsPageHeader}.
     *
     * Defines whether the header of details page will be shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowDetailsPageHeader(
      /**
       * New value for property `showDetailsPageHeader`
       */
      bShowDetailsPageHeader?: boolean
    ): this;
    /**
     * @SINCE 1.58
     *
     * Attaches event handler `fnFunction` to the {@link #event:activeTitlePress activeTitlePress} event of
     * this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when an activeTitle of a MessageItem is pressed.
     */
    attachActiveTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.72) - Use the appropriate event from the wrapper control, instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when description is shown.
     */
    attachItemSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:listSelect listSelect} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    attachListSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:longtextLoaded longtextLoaded} event of this
     * `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when the long text description data from a remote URL is loaded.
     */
    attachLongtextLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:urlValidated urlValidated} event of this `sap.m.MessageView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MessageView` itself.
     *
     * Event fired when a validation of a URL from long text description is ready.
     */
    attachUrlValidated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MessageView` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MessageViewSettings extends $ControlSettings {
    /**
     * Callback function for resolving a promise after description has been asynchronously loaded inside this
     * function.
     */
    asyncDescriptionHandler?: any | PropertyBindingInfo;

    /**
     * Callback function for resolving a promise after a link has been asynchronously validated inside this
     * function.
     */
    asyncURLHandler?: any | PropertyBindingInfo;

    /**
     * Defines whether the MessageItems are grouped or not.
     */
    groupItems?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the header of details page will be shown.
     */
    showDetailsPageHeader?: boolean | PropertyBindingInfo;

    /**
     * A list with message items. If only one item is provided, the initial page will be the details page for
     * the item.
     */
    items?: MessageItem[] | MessageItem | AggregationBindingInfo;

    /**
     * Sets a custom header button.
     */
    headerButton?: Button;

    /**
     * @deprecated (since 1.72) - Use the appropriate event from the wrapper control, instead.
     *
     * Event fired after the popover is opened.
     */
    afterOpen?: Function;

    /**
     * Event fired when description is shown.
     */
    itemSelect?: Function;

    /**
     * Event fired when one of the lists is shown when (not) filtered by type.
     */
    listSelect?: Function;

    /**
     * Event fired when the long text description data from a remote URL is loaded.
     */
    longtextLoaded?: Function;

    /**
     * Event fired when a validation of a URL from long text description is ready.
     */
    urlValidated?: Function;

    /**
     * @SINCE 1.58
     *
     * Event fired when an activeTitle of a MessageItem is pressed.
     */
    activeTitlePress?: Function;
  }
}

declare module "sap/m/MultiComboBox" {
  import {
    default as ComboBoxBase,
    $ComboBoxBaseSettings,
  } from "sap/m/ComboBoxBase";

  import Item from "sap/ui/core/Item";

  import Popover from "sap/m/Popover";

  import Dialog from "sap/m/Dialog";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22.0
   *
   * The MultiComboBox control provides a list box with items and a text field allowing the user to either
   * type a value directly into the control or choose from the list of existing items.
   *
   * A drop-down list for selecting and filtering values. Overview: The MultiComboBox control is commonly
   * used to enable users to select one or more options from a predefined list. The control provides an editable
   * input field to filter the list, and a dropdown arrow of available options. The select options in the
   * list have checkboxes that permit multi-selection. Entered values are displayed as {@link sap.m.Token
   * tokens}.
   *
   * When an invalid character is typed into the text field of the MultiComboBox control, the value state
   * is changed to `sap.ui.core.ValueState.Error` only for a second, as the invalid value is immediately deleted
   * from the input field. Structure: The MultiComboBox consists of the following elements:
   * 	 -  Input field - displays the selected option/s as token/s. Users can type to filter the list.
   * 			Drop-down arrow - expands\collapses the option list.
   * 	 -  Option list - the list of available options. **Note:** Disabled items are not visualized in the
   * 			list with the available options, however they can still be accessed through the `items` aggregation.
   * 			 Usage: When to use::
   * 	 - The user needs to select one or more options from a long list of options (maximum of approximately
   * 			200).  When not to use::
   * 	 - The user needs to choose between two options such as ON or OFF and YES or NO. In this case, consider
   * 			using a {@link sap.m.Switch switch} control instead
   * 	 - You need to display more that one attribute. In this case, consider using the {@link sap.m.SelectDialog
   * 			select dialog} or value help dialog instead.
   * 	 - The user needs to search on multiple attributes. In this case, consider using the {@link sap.m.SelectDialog
   * 			select dialog} or value help dialog instead.
   * 	 - Your use case requires all available options to be displayed right away, without any user interaction.
   * 			In this case, consider using the {@link sap.m.CheckBox checkboxes} instead.  Responsive Behavior:
   * 			If there are many tokens, the control shows only the last selected tokens that fit and for the others
   * 			a label N-more is provided. In case the length of the last selected token is exceeding the width of the
   * 			control, only a label N-Items is shown. In both cases, pressing on the label will show the tokens in
   * 			a popup. On Phones:
   * 	 - A new full-screen dialog opens where all items from the option list are shown.
   * 	 - You can select and deselect items from the option list.
   * 	 - With the help of a toggle button you can switch between showing all tokens and only selected ones.
   *
   * 	 - You can filter the option list by entering a value in the input.  On Tablets:
   * 	 - The auto-complete suggestions appear below or above the input field.
   * 	 - You can review the tokens by swiping them to left or right.  On Desktop:
   * 	 - The auto-complete suggestions appear below or above the input field.
   * 	 - You can review the tokens by pressing the right or left arrows on the keyboard.
   * 	 - You can select single tokens or a range of tokens and you can copy/cut/delete them.
   */
  export default class MultiComboBox extends ComboBoxBase {
    /**
     * Constructor for a new MultiComboBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/multi-combobox/ Multi-Combo Box}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $MultiComboBoxSettings
    );
    /**
     * Constructor for a new MultiComboBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/multi-combobox/ Multi-Combo Box}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $MultiComboBoxSettings
    );

    /**
     * Adds some item `oItem` to the association named `selectedItems`.
     */
    addSelectedItem(
      /**
       * The selected item to add; if empty, nothing is added.
       */
      oItem: Item
    ): this;
    /**
     * Adds selected items. Only items with valid keys are added as selected.
     */
    addSelectedKeys(
      /**
       * An array of item keys that identifies the items to be added as selected
       */
      aKeys: string[]
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiComboBox` itself.
     *
     * Event is fired when selection of an item is changed. Note: please do not use the "change" event inherited
     * from sap.m.InputBase
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionFinish selectionFinish} event of this
     * `sap.m.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiComboBox` itself.
     *
     * Event is fired when user has finished a selection of items in a list box and list box has been closed.
     */
    attachSelectionFinish(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Clones the `sap.m.MultiComboBox` control.
     */
    clone(
      /**
       * Suffix to be added to the ids of the new control and its internal objects.
       */
      sIdSuffix: string
    ): this;
    /**
     * `MultiComboBox` picker configuration
     */
    configPicker(
      /**
       * Picker instance
       */
      oPicker: Popover | Dialog
    ): void;
    /**
     * Destroys all the items in the aggregation named `items`.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionFinish selectionFinish} event of
     * this `sap.m.MultiComboBox`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionFinish(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MultiComboBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiComboBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Item which selection is changed
         */
        changedItem?: Item;
        /**
         * Selection state: true if item is selected, false if item is not selected
         */
        selected?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:selectionFinish selectionFinish} to attached listeners.
     */
    fireSelectionFinish(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected items which are selected after list box has been closed.
         */
        selectedItems?: Item[];
      }
    ): this;
    /**
     * Gets the accessibility info for the control
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * Returns a metadata object for class sap.m.MultiComboBox.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Retrieves the selected item objects from the association named `selectedItems`.
     */
    getSelectedItems(): Item[];
    /**
     * Gets current value of property {@link #getSelectedKeys selectedKeys}.
     *
     * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate
     * keys exists the first item matching the key is used.
     *
     * Default value is `[]`.
     */
    getSelectedKeys(): string[];
    /**
     * Checks whether an item is selected.
     */
    isItemSelected(
      /**
       * The item to check.
       */
      oItem: Item
    ): boolean;
    /**
     * This hook method is called after the MultiComboBox's Pop-up is rendered.
     */
    onAfterRenderingPicker(): void;
    /**
     * This hook method is called before the MultiComboBox is rendered.
     */
    onBeforeRendering(): void;
    /**
     * This hook method is called before the MultiComboBox's Pop-up is rendered.
     */
    onBeforeRenderingPicker(): void;
    /**
     * Handles control click event.
     */
    onclick(oEvent: undefined): void;
    /**
     * Opens the control's picker popup.
     */
    open(): this;
    /**
     * Removes all the controls in the association named selectedItems.
     */
    removeAllSelectedItems(): ID[];
    /**
     * Removes an selectedItem from the association named `selectedItems`.
     */
    removeSelectedItem(
      /**
       * The item to be removed
       */
      oItem: Item | ID | string
    ): ID | null;
    /**
     * Removes selected items. Only items with valid keys are removed.
     */
    removeSelectedKeys(
      /**
       * An array of item keys that identifies the items to be removed
       */
      aKeys: string[]
    ): Item[];
    /**
     * Setter for association `selectedItems`.
     */
    setSelectedItems(
      /**
       * new values for association `selectedItems`. Array of sap.ui.core.Item Id which becomes the new target
       * of this `selectedItems` association. Alternatively, an array of sap.ui.core.Item instance may be given
       * or null.
       */
      aItems: string[] | Item[] | null
    ): this;
    /**
     * Sets a new value for property `selectedKeys`. Keys of the selected items. If the key has no corresponding
     * item, no changes will apply. If duplicate keys exists the first item matching the key is used. When called
     * with a value of null or undefined, the default value of the property will be restored. Default value
     * is [].
     */
    setSelectedKeys(
      /**
       * Keys of items to be set as selected
       */
      aKeys: string[]
    ): this;
    /**
     * Creates picker if doesn't exist yet and sync with Control items
     */
    syncPickerContent(
      /**
       * Force MultiComboBox to SuggestionPopover sync
       */
      bForceListSync?: boolean
    ): Dialog | Popover;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiComboBox` itself.
     *
     * Event is fired when selection of an item is changed. Note: please do not use the "change" event inherited
     * from sap.m.InputBase
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiComboBox` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionFinish selectionFinish} event of this
     * `sap.m.MultiComboBox`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiComboBox` itself.
     *
     * Event is fired when user has finished a selection of items in a list box and list box has been closed.
     */
    attachSelectionFinish(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiComboBox` itself
       */
      oListener?: object
    ): this;
  }

  export interface $MultiComboBoxSettings extends $ComboBoxBaseSettings {
    /**
     * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate
     * keys exists the first item matching the key is used.
     */
    selectedKeys?: string[] | PropertyBindingInfo;

    /**
     * Provides getter and setter for the selected items from the aggregation named items.
     */
    selectedItems?: Array<Item | string>;

    /**
     * Event is fired when selection of an item is changed. Note: please do not use the "change" event inherited
     * from sap.m.InputBase
     */
    selectionChange?: Function;

    /**
     * Event is fired when user has finished a selection of items in a list box and list box has been closed.
     */
    selectionFinish?: Function;
  }
}

declare module "sap/m/MultiInput" {
  import { default as Input, $InputSettings } from "sap/m/Input";

  import Token from "sap/m/Token";

  import Title from "sap/m/Title";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Overview: A multi-input field allows the user to enter multiple values, which are displayed as {@link
   * sap.m.Token tokens}. You can enable auto-complete suggestions or value help to help the user choose the
   * correct entry. You can define validator functions to define what token values are accepted.
   *
   * **Notes:**
   * 	 -  New valid tokens are created, when the user presses Enter, selects a value from the suggestions
   * 			drop-down, or when the focus leaves the field.
   * 	 -  Creating tokens in the control does not automatically update the model to which the "tokens" aggregation
   * 			of the control is bound, no matter if the binding mode is set to "TwoWay". This is left to the application
   * 			logic (check the corresponding sample).
   * 	 -  When multiple values are copied and pasted in the field, separate tokens are created for each of
   * 			them.
   * 	 -  When a single value is copied and pasted in the field, it is shown as a text value, as further editing
   * 			might be required before it is converted into a token.
   * 	 -  Provide meaningful labels for all input fields. Do not use the placeholder as a replacement for
   * 			the label.
   * 	 -  The `showValueHelp` property is overwritten and after initialization of the control, its value becomes
   * 			`truthy`.  Usage: When to use::
   * 	 -  You need to provide the value help option to help users select or search multiple business objects.
   *
   * 	 -  The dataset to choose from is expected to increase over time (for example, to more than 200 values).
   * 			 When not to use::
   * 	 -  When you need to select only one value.
   * 	 -  When you want the user to select from a predefined set of options. Use {@link sap.m.MultiComboBox}
   * 			instead.  Responsive Behavior: If there are many tokens, the control shows only the last selected
   * 			tokens that fit and for the others a label N-more is provided. In case the length of the last
   * 			selected token is exceeding the width of the control, only a label N-Items is shown. In both cases,
   * 			pressing on the label will show the tokens in a popup. On Phones:
   * 	 -  Only the last entered token is displayed.
   * 	 -  A new full-screen dialog opens where the auto-complete suggestions can be selected.
   * 	 -  You can review the tokens by tapping on the token or the input field.   On Tablets:
   *
   * 	 -  The auto-complete suggestions appear below or above the multi-input field.
   * 	 -  You can review the tokens by swiping them to the left or right.  On Desktop:
   * 	 -  The auto-complete suggestions appear below or above the multi-input field.
   * 	 -  You can review the tokens by pressing the right or left arrows on the keyboard.
   * 	 -  You can select single tokens or a range of tokens and you can copy/cut/delete them.
   */
  export default class MultiInput extends Input {
    /**
     * Constructor for a new MultiInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/multiinput/ Multi-Input Field}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiInputSettings
    );
    /**
     * Constructor for a new MultiInput.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/multiinput/ Multi-Input Field}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MultiInputSettings
    );

    /**
     * Adds some token to the aggregation {@link #getTokens tokens}.
     */
    addToken(
      /**
       * The token to add; if empty, nothing is inserted
       */
      oToken: Token
    ): this;
    /**
     * Function validates the given text and adds a new token if validation was successful.
     */
    addValidateToken(
      /**
       * Parameter bag containing the following fields:
       */
      oParameters: {
        /**
         * The source text {sap.m.Token}
         */
        text: string;
        /**
         * Suggested token
         */
        token?: object;
        /**
         * Any object used to find the suggested token
         */
        suggestionObject?: object;
        /**
         * Callback which gets called after validation has finished
         */
        validationCallback?: Function;
      },
      /**
       * [optional] Array of all validators to be used
       */
      aValidators: Array<() => void>
    ): void;
    /**
     * Function adds a validation callback called before any new token gets added to the tokens aggregation.
     */
    addValidator(
      /**
       * The validation function
       */
      fValidator: Function
    ): void;
    /**
     * @deprecated (since 1.46) - Please use the new event tokenUpdate.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenChange tokenChange} event of this `sap.m.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiInput` itself.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    attachTokenChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiInput` itself.
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    attachTokenUpdate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Clones the `sap.m.MultiInput` control.
     */
    clone(): this;
    /**
     * @SINCE 1.28
     * @deprecated (since 1.58)
     *
     * Close multi-line MultiInput in multi-line mode
     */
    closeMultiLine(): void;
    /**
     * Destroys all the tokens in the aggregation {@link #getTokens tokens}.
     */
    destroyTokens(): this;
    /**
     * @deprecated (since 1.46) - Please use the new event tokenUpdate.
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenChange tokenChange} event of this `sap.m.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.MultiInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenUpdate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.MultiInput with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Input.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.46) - Please use the new event tokenUpdate.
     *
     * Fires event {@link #event:tokenChange tokenChange} to attached listeners.
     */
    fireTokenChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Type of tokenChange event. There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
         * Use sap.m.Tokenizer.TokenChangeType.Added for "added", sap.m.Tokenizer.TokenChangeType.Removed for "removed",
         * sap.m.Tokenizer.TokenChangeType.RemovedAll for "removedAll" and sap.m.Tokenizer.TokenChangeType.TokensChanged
         * for "tokensChanged".
         */
        type?: string;
        /**
         * The added token or removed token. This parameter is used when tokenChange type is "added" or "removed".
         */
        token?: Token;
        /**
         * The array of removed tokens. This parameter is used when tokenChange type is "removedAll".
         */
        tokens?: Token[];
        /**
         * The array of tokens that are added. This parameter is used when tokenChange type is "tokenChanged".
         */
        addedTokens?: Token[];
        /**
         * The array of tokens that are removed. This parameter is used when tokenChange type is "tokenChanged".
         */
        removedTokens?: Token[];
      }
    ): this;
    /**
     * @SINCE 1.46
     *
     * Fires event {@link #event:tokenUpdate tokenUpdate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireTokenUpdate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Type of tokenChange event. There are two TokenUpdate types: "added", "removed" Use sap.m.Tokenizer.TokenUpdateType.Added
         * for "added" and sap.m.Tokenizer.TokenUpdateType.Removed for "removed".
         */
        type?: string;
        /**
         * The array of tokens that are added. This parameter is used when tokenUpdate type is "added".
         */
        addedTokens?: Token[];
        /**
         * The array of tokens that are removed. This parameter is used when tokenUpdate type is "removed".
         */
        removedTokens?: Token[];
      }
    ): boolean;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * Gets the picker header title.
     */
    getDialogTitle(): Title | null;
    /**
     * Get the reference element which the message popup should dock to
     */
    getDomRefForValueStateMessage(): Element;
    /**
     * @SINCE 1.28
     * @deprecated (since 1.58) - Replaced with N-more/N-items labels, which work in all cases.
     *
     * Gets current value of property {@link #getEnableMultiLineMode enableMultiLineMode}.
     *
     * If set to true, the MultiInput will be displayed in multi-line display mode. In multi-line display mode,
     * all tokens can be fully viewed and easily edited in the MultiInput. The default value is false. **Note:**
     * This property does not take effect on smartphones or when the editable property is set to false. **Caution:**
     * Do not enable multi-line mode in tables and forms.
     *
     * Default value is `false`.
     */
    getEnableMultiLineMode(): boolean;
    /**
     * @SINCE 1.36
     *
     * Gets current value of property {@link #getMaxTokens maxTokens}.
     *
     * The max number of tokens that is allowed in MultiInput.
     */
    getMaxTokens(): int;
    /**
     * Returns a metadata object for class sap.m.MultiInput.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Function returns domref which acts as reference point for the opening suggestion menu
     */
    getPopupAnchorDomRef(): Element;
    /**
     * Gets content of aggregation {@link #getTokens tokens}.
     *
     * The currently displayed tokens
     */
    getTokens(): Token[];
    /**
     * Function returns all validation callbacks.
     */
    getValidators(): Array<() => void>;
    /**
     * Checks for the provided `sap.m.Token` in the aggregation {@link #getTokens tokens}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfToken(
      /**
       * The token whose index is looked for
       */
      oToken: Token
    ): int;
    /**
     * Inserts a token into the aggregation {@link #getTokens tokens}.
     */
    insertToken(
      /**
       * The token to insert; if empty, nothing is inserted
       */
      oToken: Token,
      /**
       * The `0`-based index the token should be inserted at; for a negative value of `iIndex`, the token is inserted
       * at position 0; for a value greater than the current size of the aggregation, the token is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Gets the supported openers for the valueHelpOnly.
     */
    isValueHelpOnlyOpener(
      /**
       * The target of the event.
       */
      oTarget: HTMLElement
    ): Boolean;
    /**
     * Overwrites the change event handler of the {@link sap.m.InputBase}. In case of added token it will not
     * reset the value.
     */
    onChange(
      /**
       * Event object
       */
      oEvent: object,
      /**
       * Additional event parameters to be passed in to the change event handler if * the value has changed
       */
      mParameters: object,
      /**
       * Passed value on change
       */
      sNewValue: string
    ): boolean | undefined;
    /**
     * Focus is on MultiInput
     */
    onfocusin(
      /**
       * The event object
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * When press ESC, deselect all tokens and all texts
     */
    onsapescape(
      /**
       * The event object
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * When tap on text field, deselect all tokens
     */
    ontap(
      /**
       * The event object
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * @SINCE 1.28
     * @deprecated (since 1.58)
     *
     * Expand multi-line MultiInput in multi-line mode
     */
    openMultiLine(): void;
    /**
     * Removes all the controls from the aggregation {@link #getTokens tokens}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTokens(): Token[];
    /**
     * Function removes all validation callbacks.
     */
    removeAllValidators(): void;
    /**
     * Removes a token from the aggregation {@link #getTokens tokens}.
     */
    removeToken(
      /**
       * The token to remove or its index or id
       */
      vToken: int | string | Token
    ): Token;
    /**
     * Function removes a validation callback.
     */
    removeValidator(
      /**
       * The validation function
       */
      fValidator: Function
    ): void;
    /**
     * @SINCE 1.28
     * @deprecated (since 1.58) - Replaced with N-more/N-items labels, which work in all cases.
     *
     * Sets a new value for property {@link #getEnableMultiLineMode enableMultiLineMode}.
     *
     * If set to true, the MultiInput will be displayed in multi-line display mode. In multi-line display mode,
     * all tokens can be fully viewed and easily edited in the MultiInput. The default value is false. **Note:**
     * This property does not take effect on smartphones or when the editable property is set to false. **Caution:**
     * Do not enable multi-line mode in tables and forms.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableMultiLineMode(
      /**
       * New value for property `enableMultiLineMode`
       */
      bEnableMultiLineMode?: boolean
    ): this;
    /**
     * @SINCE 1.36
     *
     * Sets a new value for property {@link #getMaxTokens maxTokens}.
     *
     * The max number of tokens that is allowed in MultiInput.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxTokens(
      /**
       * New value for property `maxTokens`
       */
      iMaxTokens: int
    ): this;
    /**
     * Function sets an array of tokens, existing tokens will get overridden
     */
    setTokens(
      /**
       * The new token set
       */
      aTokens: Token[]
    ): this;
    /**
     * Updates the inner input field.
     */
    updateInputField(): void;
    /**
     * @deprecated (since 1.46) - Please use the new event tokenUpdate.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenChange tokenChange} event of this `sap.m.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiInput` itself.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    attachTokenChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.MultiInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.MultiInput` itself.
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    attachTokenUpdate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.MultiInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Overwrites the change event handler of the {@link sap.m.InputBase}. In case of added token it will not
     * reset the value.
     */
    onChange(
      /**
       * Event object
       */
      oEvent: object,
      /**
       * Passed value on change
       */
      sNewValue: string
    ): boolean | undefined;
  }

  export interface $MultiInputSettings extends $InputSettings {
    /**
     * @SINCE 1.28
     * @deprecated (since 1.58) - Replaced with N-more/N-items labels, which work in all cases.
     *
     * If set to true, the MultiInput will be displayed in multi-line display mode. In multi-line display mode,
     * all tokens can be fully viewed and easily edited in the MultiInput. The default value is false. **Note:**
     * This property does not take effect on smartphones or when the editable property is set to false. **Caution:**
     * Do not enable multi-line mode in tables and forms.
     */
    enableMultiLineMode?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.36
     *
     * The max number of tokens that is allowed in MultiInput.
     */
    maxTokens?: int | PropertyBindingInfo;

    /**
     * The currently displayed tokens
     */
    tokens?: Token[] | Token | AggregationBindingInfo;

    /**
     * @deprecated (since 1.46) - Please use the new event tokenUpdate.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    tokenChange?: Function;

    /**
     * @SINCE 1.46
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    tokenUpdate?: Function;
  }
}

declare module "sap/m/NavContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize, ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Handles hierarchical navigation between Pages or other fullscreen controls.
   *
   * All children of this control receive navigation events, such as {@link sap.m.NavContainerChild#event:BeforeShow
   * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
   */
  export default class NavContainer extends Control {
    /**
     * Constructor for a new `NavContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a4afb138acf64a61a038aa5b91a4f082 Nav Container}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NavContainerSettings
    );
    /**
     * Constructor for a new `NavContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a4afb138acf64a61a038aa5b91a4f082 Nav Container}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NavContainerSettings
    );

    /**
     * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is
     * identified by a "name". Make sure to only use names that will not collide with transitions which may
     * be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions
     * to ensure this.
     *
     * "to" and "back" are the transition functions for the forward and backward navigation. Both will be called
     * with the following parameters: - oFromPage: the Control which is currently being displayed by the NavContainer
     * - oToPage: the Control which should be displayed by the NavContainer after the transition - fCallback:
     * a function which MUST be called when the transition has completed - oTransitionParameters: a data object
     * that can be given by application code when triggering the transition by calling to() or back(); this
     * object could give additional information to the transition function, like the DOM element which triggered
     * the transition or the desired transition duration
     *
     * The contract for "to" and "back" is that they may do an animation of their choice, but it should not
     * take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class
     * "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do
     * any preparation (e.g. move that page out of the screen or make it transparent) and then should remove
     * this CSS class. After the animation the target page "oToPage" should cover the entire screen and the
     * source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
     * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass
     * method: oFromPage.addStyleClass("sapMNavItemHidden"); When the transition is complete, it MUST call the
     * given fCallback method to inform the NavContainer that navigation has finished!
     *
     * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into
     * a setTimeout(..., 0) block (delayed, but without waiting).
     *
     * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type.
     * However, the transition will always be registered for the type (and ALL instances), not for the single
     * instance on which this method was invoked.
     *
     * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called
     * on a particular NavContainer instance.
     */
    addCustomTransition(
      /**
       * The name of the transition. This name can be used by the application to choose this transition when navigating
       * "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the
       * back() navigation will automatically use the same transition.
       *
       * Make sure to only use names that will not collide with transitions which may be added to the NavContainer
       * later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
       */
      sName: string,
      /**
       * The function which will be called by the NavContainer when the application navigates "to()", using this
       * animation's name. The NavContainer instance is the "this" context within the animation function.
       *
       * See the documentation of NavContainer.addCustomTransitions for more details about this function.
       */
      fTo: object,
      /**
       * The function which will be called by the NavContainer when the application navigates "back()" from a
       * page where it had navigated to using this animation's name. The NavContainer instance is the "this" context
       * within the animation function.
       *
       * See the documentation of NavContainer.addCustomTransitions for more details about this function.
       */
      fBack: object
    ): this;
    /**
     * Adds some page to the aggregation {@link #getPages pages}.
     */
    addPage(
      /**
       * The page to add; if empty, nothing is inserted
       */
      oPage: Control
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.m.NavContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NavContainer` itself.
     *
     * The event is fired when navigation between two pages has completed (once all events to the child controls
     * have been fired). In case of animated transitions this event is fired with some delay after the "navigate"
     * event.
     */
    attachAfterNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NavContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.NavContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NavContainer` itself.
     *
     * The event is fired when navigation between two pages has been triggered (before any events to the child
     * controls are fired). The transition (if any) to the new page has not started yet. This event can be aborted
     * by the application with preventDefault(), which means that there will be no navigation.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NavContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
     *
     * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer,
     * then the "BeforeHide" pseudo event on the source page and "BeforeFirstShow" (if applicable) and"BeforeShow"
     * on the target page. Later - after the transition has completed - the "AfterShow" pseudo event is triggered
     * on the target page and "AfterHide" on the page which has been left. The given backData object is available
     * in the "BeforeFirstShow", "BeforeShow" and "AfterShow" event object as "data" property. The original
     * "data" object from the "to" navigation is also available in these event objects.
     */
    back(
      /**
       * Since version 1.7.1. This optional object can carry any payload data which should be made available to
       * the target page of the back navigation. The event on the target page will contain this data object as
       * "backData" property. (The original data from the "to()" navigation will still be available as "data"
       * property.)
       *
       * In scenarios where the entity triggering the navigation can or should not directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used e.g. when returning from a detail page to
       * transfer any settings done there.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      backData?: object,
      /**
       * Since version 1.7.1. This optional object can give additional information to the transition function,
       * like the DOM element which triggered the transition or the desired transition duration. The animation
       * type can NOT be selected here - it is always the inverse of the "to" navigation.
       *
       * In order to use the "transitionParameters" property, the "data" property must be used (at least "null"
       * must be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameters?: object
    ): this;
    /**
     * @SINCE 1.7.2
     *
     * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is
     * no such page among the previous pages, nothing happens. The transition effect which had been used to
     * get to the current page is inverted and used for this navigation.
     *
     * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer,
     * then the "BeforeHide" pseudo event on the source page and "BeforeFirstShow" (if applicable) and"BeforeShow"
     * on the target page. Later - after the transition has completed - the "AfterShow" pseudo event is triggered
     * on the target page and "AfterHide" on the page which has been left. The given backData object is available
     * in the "BeforeFirstShow", "BeforeShow" and "AfterShow" event object as "data" property. The original
     * "data" object from the "to" navigation is also available in these event objects.
     */
    backToPage(
      /**
       * The ID of the screen to which back navigation should happen. The ID or the control itself can be given.
       * The nearest such page among the previous pages in the history stack will be used.
       */
      pageId: string,
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the "backToPage" navigation. The event on the target page will contain this data object as "backData"
       * property.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      backData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the "transitionParameters" property, the "data" property must be used (at least "null"
       * must be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameters: object
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first
     * added element). If already on the initial page, nothing happens. The transition effect which had been
     * used to get to the current page is inverted and used for this navigation.
     *
     * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer,
     * then the "BeforeHide" pseudo event on the source page and "BeforeFirstShow" (if applicable) and "BeforeShow"
     * on the target page. Later - after the transition has completed - the "AfterShow" pseudo event is triggered
     * on the target page and "AfterHide" on the page which has been left. The given backData object is available
     * in the "BeforeFirstShow", "BeforeShow" and "AfterShow" event object as "data" property.
     */
    backToTop(
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the "backToTop" navigation. The event on the target page will contain this data object as "backData"
       * property.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      backData?: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the "transitionParameters" property, the "data" property must be used (at least "null"
       * must be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameters?: object
    ): this;
    /**
     * Returns whether the current page is the top/initial page.
     *
     * **Note:** going to the initial page again with a row of "to" navigations causes the initial page to be
     * displayed again, but logically one is not at the top level, so this method returns "false" in this case.
     */
    currentPageIsTopPage(): boolean;
    /**
     * Destroys all the pages in the aggregation {@link #getPages pages}.
     */
    destroyPages(): this;
    /**
     * @SINCE 1.7.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:afterNavigate afterNavigate} event of this
     * `sap.m.NavContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.m.NavContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.NavContainer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NavContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.7.1
     *
     * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
     */
    fireAfterNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page which had been shown before navigation.
         */
        from?: Control;
        /**
         * The ID of the page which had been shown before navigation.
         */
        fromId?: string;
        /**
         * The page which is now shown after navigation.
         */
        to?: Control;
        /**
         * The ID of the page which is now shown after navigation.
         */
        toId?: string;
        /**
         * Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to)
         * had not been shown/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Whether was a forward navigation, triggered by "to()".
         */
        isTo?: boolean;
        /**
         * Whether this was a back navigation, triggered by "back()".
         */
        isBack?: boolean;
        /**
         * Whether this was a navigation to the root page, triggered by "backToTop()".
         */
        isBackToTop?: boolean;
        /**
         * Whether this was a navigation to a specific page, triggered by "backToPage()".
         */
        isBackToPage?: boolean;
        /**
         * How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Fires event {@link #event:navigate navigate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page which was shown before the current navigation.
         */
        from?: Control;
        /**
         * The ID of the page which was shown before the current navigation.
         */
        fromId?: string;
        /**
         * The page which will be shown after the current navigation.
         */
        to?: Control;
        /**
         * The ID of the page which will be shown after the current navigation.
         */
        toId?: string;
        /**
         * Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated
         * to) has not been shown/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Whether this is a forward navigation, triggered by "to()".
         */
        isTo?: boolean;
        /**
         * Whether this is a back navigation, triggered by "back()".
         */
        isBack?: boolean;
        /**
         * Whether this is a navigation to the root page, triggered by "backToTop()".
         */
        isBackToTop?: boolean;
        /**
         * Whether this was a navigation to a specific page, triggered by "backToPage()".
         */
        isBackToPage?: boolean;
        /**
         * How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): boolean;
    /**
     * @SINCE 1.30
     *
     * Gets current value of property {@link #getAutoFocus autoFocus}.
     *
     * Determines whether the initial focus is set automatically on first rendering and after navigating to
     * a new page. This is useful when on touch devices the keyboard pops out due to the focus being automatically
     * set on an input field. If necessary, the `AfterShow` event can be used to focus another element, only
     * if `autoFocus` is set to `false`.
     *
     * **Note:** The following scenarios are possible, depending on where the focus was before navigation to
     * a new page:
     * 	 - If `autoFocus` is set to `true` and the focus was inside the current page, the focus will be moved
     * 			automatically on the new page.
     * 	 - If `autoFocus` is set to `false` and the focus was inside the current page, the focus will disappear.
     * 			If the focus was outside the current page, after the navigation it will remain unchanged regardless
     * 			of what is set to the `autoFocus` property.
     * 	 - If the `autoFocus` is set to `false` and at the same time another wrapping control has its own logic
     * 			for focus restoring upon rerendering, the focus will still appear.
     *
     * Default value is `true`.
     */
    getAutoFocus(): boolean;
    /**
     * Returns the currently displayed page-level control.
     *
     * **Note:** Returns `undefined` if no page has been added yet, otherwise returns an instance of `sap.m.Page`,
     * `sap.ui.core.mvc.View`, `sap.m.Carousel` or whatever is aggregated.
     */
    getCurrentPage(): Control;
    /**
     * @SINCE 1.7.1
     *
     * Gets current value of property {@link #getDefaultTransitionName defaultTransitionName}.
     *
     * The type of the transition/animation to apply when "to()" is called without defining a transition type
     * to use. The default is "slide". Other options are: "baseSlide", "fade", "flip" and "show" - and the names
     * of any registered custom transitions.
     *
     * Default value is `"slide"`.
     */
    getDefaultTransitionName(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     *
     * Default value is `'100%'`.
     */
    getHeight(): CSSSize;
    /**
     * ID of the element which is the current target of the association {@link #getInitialPage initialPage},
     * or `null`.
     */
    getInitialPage(): ID;
    /**
     * Returns a metadata object for class sap.m.NavContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns the control with the given ID from the "pages" aggregation (if available).
     */
    getPage(
      /**
       * The ID of the aggregated control to find
       */
      pageId: string
    ): Control;
    /**
     * Gets content of aggregation {@link #getPages pages}.
     *
     * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.mvc.View,
     * sap.m.Carousel or any other control with fullscreen/page semantics.
     *
     * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
     */
    getPages(): Control[];
    /**
     * @SINCE 1.7.1
     *
     * Returns the previous page (the page from which the user drilled down to the current page with "to()").
     *
     * **Note:** this is not the page which the user has seen before, but the page which is the target of the
     * next "back()" navigation. If there is no previous page, `undefined` is returned.
     */
    getPreviousPage(): Control;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the NavContainer is visible.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     *
     * Default value is `'100%'`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getPages pages}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfPage(
      /**
       * The page whose index is looked for
       */
      oPage: Control
    ): int;
    /**
     * Inserts a page into the aggregation {@link #getPages pages}.
     */
    insertPage(
      /**
       * The page to insert; if empty, nothing is inserted
       */
      oPage: Control,
      /**
       * The `0`-based index the page should be inserted at; for a negative value of `iIndex`, the page is inserted
       * at position 0; for a value greater than the current size of the aggregation, the page is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
     *
     * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark
     * and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be
     * possible because there is no previous page in the NavContainer's history stack.
     */
    insertPreviousPage(
      /**
       * The ID of the control/page/screen which is inserted into the history stack. The respective control must
       * be aggregated by the NavContainer, otherwise this will cause an error.
       */
      pageId: string,
      /**
       * The type of the transition/animation which would have been used to navigate from the (inserted) previous
       * page to the current page. When navigating back, the inverse animation will be applied. Options are "slide"
       * (horizontal movement from the right), "baseSlide", "fade", "flip", and "show" and the names of any registered
       * custom transitions.
       */
      transitionName: string,
      /**
       * This optional object can carry any payload data which would have been given to the inserted previous
       * page if the user would have done a normal forward navigation to it.
       */
      data: object
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getPages pages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPages(): Control[];
    /**
     * Removes a page.
     */
    removePage(
      /**
       * the position or ID of the `Control` that should be removed or that `Control` itself; if `vPage` is invalid,
       * a negative value or a value greater or equal than the current size of the aggregation, nothing is removed.
       */
      vPage: int | string | Control
    ): Control;
    /**
     * @SINCE 1.30
     *
     * Sets a new value for property {@link #getAutoFocus autoFocus}.
     *
     * Determines whether the initial focus is set automatically on first rendering and after navigating to
     * a new page. This is useful when on touch devices the keyboard pops out due to the focus being automatically
     * set on an input field. If necessary, the `AfterShow` event can be used to focus another element, only
     * if `autoFocus` is set to `false`.
     *
     * **Note:** The following scenarios are possible, depending on where the focus was before navigation to
     * a new page:
     * 	 - If `autoFocus` is set to `true` and the focus was inside the current page, the focus will be moved
     * 			automatically on the new page.
     * 	 - If `autoFocus` is set to `false` and the focus was inside the current page, the focus will disappear.
     * 			If the focus was outside the current page, after the navigation it will remain unchanged regardless
     * 			of what is set to the `autoFocus` property.
     * 	 - If the `autoFocus` is set to `false` and at the same time another wrapping control has its own logic
     * 			for focus restoring upon rerendering, the focus will still appear.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAutoFocus(
      /**
       * New value for property `autoFocus`
       */
      bAutoFocus?: boolean
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Sets a new value for property {@link #getDefaultTransitionName defaultTransitionName}.
     *
     * The type of the transition/animation to apply when "to()" is called without defining a transition type
     * to use. The default is "slide". Other options are: "baseSlide", "fade", "flip" and "show" - and the names
     * of any registered custom transitions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"slide"`.
     */
    setDefaultTransitionName(
      /**
       * New value for property `defaultTransitionName`
       */
      sDefaultTransitionName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets the associated {@link #getInitialPage initialPage}.
     */
    setInitialPage(
      /**
       * ID of an element which becomes the new target of this initialPage association; alternatively, an element
       * instance may be given
       */
      oInitialPage: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Whether the NavContainer is visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates
     * a new history item inside the NavContainer and allows going back.
     *
     * Note that any modifications to the target page (like setting its title, or anything else that could cause
     * a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related
     * to the page animation.
     *
     * Available transitions currently include "slide" (default), "baseSlide", "fade", "flip", and "show". None
     * of these is currently making use of any given transitionParameters.
     *
     * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer,
     * then the "BeforeHide" pseudo event on the source page and "BeforeFirstShow" (if applicable) and"BeforeShow"
     * on the target page. Later - after the transition has completed - the "AfterShow" pseudo event is triggered
     * on the target page and "AfterHide" on the page which has been left. The given data object is available
     * in the "BeforeFirstShow", "BeforeShow" and "AfterShow" event object as "data" property.
     */
    to(
      /**
       * The screen to which drilldown should happen. The ID or the control itself can be given.
       */
      pageId: string,
      /**
       * The type of the transition/animation to apply. Options are "slide" (horizontal movement from the right),
       * "baseSlide", "fade", "flip", and "show" and the names of any registered custom transitions.
       *
       * None of the standard transitions is currently making use of any given transition parameters.
       */
      transitionName: string,
      /**
       * Since version 1.7.1. This optional object can carry any payload data which should be made available to
       * the target page. The "BeforeShow" event on the target page will contain this data object as "data" property.
       * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      data: object,
      /**
       * Since version 1.7.1. This optional object can contain additional information for the transition function,
       * like the DOM element which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter
       * is used. (it can be given as "null")
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide", "baseSlide" and "fade" transitions
       * do not use any parameter.
       */
      oTransitionParameters: object
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.m.NavContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NavContainer` itself.
     *
     * The event is fired when navigation between two pages has completed (once all events to the child controls
     * have been fired). In case of animated transitions this event is fired with some delay after the "navigate"
     * event.
     */
    attachAfterNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NavContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.7.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.NavContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NavContainer` itself.
     *
     * The event is fired when navigation between two pages has been triggered (before any events to the child
     * controls are fired). The transition (if any) to the new page has not started yet. This event can be aborted
     * by the application with preventDefault(), which means that there will be no navigation.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NavContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
     *
     * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark
     * and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be
     * possible because there is no previous page in the NavContainer's history stack.
     */
    insertPreviousPage(
      /**
       * The ID of the control/page/screen which is inserted into the history stack. The respective control must
       * be aggregated by the NavContainer, otherwise this will cause an error.
       */
      pageId: string,
      /**
       * This optional object can carry any payload data which would have been given to the inserted previous
       * page if the user would have done a normal forward navigation to it.
       */
      data: object
    ): this;
    /**
     * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates
     * a new history item inside the NavContainer and allows going back.
     *
     * Note that any modifications to the target page (like setting its title, or anything else that could cause
     * a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related
     * to the page animation.
     *
     * Available transitions currently include "slide" (default), "baseSlide", "fade", "flip", and "show". None
     * of these is currently making use of any given transitionParameters.
     *
     * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer,
     * then the "BeforeHide" pseudo event on the source page and "BeforeFirstShow" (if applicable) and"BeforeShow"
     * on the target page. Later - after the transition has completed - the "AfterShow" pseudo event is triggered
     * on the target page and "AfterHide" on the page which has been left. The given data object is available
     * in the "BeforeFirstShow", "BeforeShow" and "AfterShow" event object as "data" property.
     */
    to(
      /**
       * The screen to which drilldown should happen. The ID or the control itself can be given.
       */
      pageId: string,
      /**
       * Since version 1.7.1. This optional object can carry any payload data which should be made available to
       * the target page. The "BeforeShow" event on the target page will contain this data object as "data" property.
       * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      data: object,
      /**
       * Since version 1.7.1. This optional object can contain additional information for the transition function,
       * like the DOM element which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter
       * is used. (it can be given as "null")
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide", "baseSlide" and "fade" transitions
       * do not use any parameter.
       */
      oTransitionParameters: object
    ): this;
  }
  /**
   * sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation of
   * pseudo events triggered by sap.m.NavContainer on its child controls when navigation occurs and child
   * controls are displayed/hidden.
   *
   * Interested parties outside the child control can listen to one or more of these events by registering
   * a Delegate:
   * ```javascript
   *
   * page1.addEventDelegate({
   *    onBeforeShow: function(evt) {
   *       // page1 is about to be shown; act accordingly - if required you can read event information from the evt object
   *    },
   *    onAfterHide: function(evt) {
   *       // ...
   *    }
   * });
   * ```
   */
  export interface NavContainerChild {
    __implements__sap_m_NavContainerChild: boolean;
  }

  export interface $NavContainerSettings extends $ControlSettings {
    /**
     * @SINCE 1.30
     *
     * Determines whether the initial focus is set automatically on first rendering and after navigating to
     * a new page. This is useful when on touch devices the keyboard pops out due to the focus being automatically
     * set on an input field. If necessary, the `AfterShow` event can be used to focus another element, only
     * if `autoFocus` is set to `false`.
     *
     * **Note:** The following scenarios are possible, depending on where the focus was before navigation to
     * a new page:
     * 	 - If `autoFocus` is set to `true` and the focus was inside the current page, the focus will be moved
     * 			automatically on the new page.
     * 	 - If `autoFocus` is set to `false` and the focus was inside the current page, the focus will disappear.
     * 			If the focus was outside the current page, after the navigation it will remain unchanged regardless
     * 			of what is set to the `autoFocus` property.
     * 	 - If the `autoFocus` is set to `false` and at the same time another wrapping control has its own logic
     * 			for focus restoring upon rerendering, the focus will still appear.
     */
    autoFocus?: boolean | PropertyBindingInfo;

    /**
     * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available
     * area.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Whether the NavContainer is visible.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.7.1
     *
     * The type of the transition/animation to apply when "to()" is called without defining a transition type
     * to use. The default is "slide". Other options are: "baseSlide", "fade", "flip" and "show" - and the names
     * of any registered custom transitions.
     */
    defaultTransitionName?: string | PropertyBindingInfo;

    /**
     * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.mvc.View,
     * sap.m.Carousel or any other control with fullscreen/page semantics.
     *
     * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
     */
    pages?: Control[] | Control | AggregationBindingInfo;

    /**
     * This association can be used to define which page is displayed initially. If the given page does not
     * exist or no page is given, the first page which has been added is considered as initial page. This value
     * should be set initially and not set/modified while the application is running.
     *
     * This could be used not only for the initial display, but also if the user wants to navigate "up to top",
     * so this page serves as a sort of "home/root page".
     */
    initialPage?: Control | string;

    /**
     * @SINCE 1.7.1
     *
     * The event is fired when navigation between two pages has been triggered (before any events to the child
     * controls are fired). The transition (if any) to the new page has not started yet. This event can be aborted
     * by the application with preventDefault(), which means that there will be no navigation.
     */
    navigate?: Function;

    /**
     * @SINCE 1.7.1
     *
     * The event is fired when navigation between two pages has completed (once all events to the child controls
     * have been fired). In case of animated transitions this event is fired with some delay after the "navigate"
     * event.
     */
    afterNavigate?: Function;
  }
}

declare module "sap/m/NewsContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { Size } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * This control displays the news content text and subheader in a tile.
   */
  export default class NewsContent extends Control {
    /**
     * Constructor for a new sap.m.NewsContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NewsContentSettings
    );
    /**
     * Constructor for a new sap.m.NewsContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NewsContentSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.NewsContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NewsContent` itself.
     *
     * The event is triggered when the News Content is pressed.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NewsContent` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.NewsContent`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.NewsContent with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NewsContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContentText contentText}.
     *
     * The content text.
     */
    getContentText(): string;
    /**
     * Returns a metadata object for class sap.m.NewsContent.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.38.0) - The NewsContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     */
    getSize(): Size | keyof typeof Size;
    /**
     * Gets current value of property {@link #getSubheader subheader}.
     *
     * The subheader.
     */
    getSubheader(): string;
    /**
     * Sets a new value for property {@link #getContentText contentText}.
     *
     * The content text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentText(
      /**
       * New value for property `contentText`
       */
      sContentText?: string
    ): this;
    /**
     * @deprecated (since 1.38.0) - The NewsContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: Size | keyof typeof Size
    ): this;
    /**
     * Sets a new value for property {@link #getSubheader subheader}.
     *
     * The subheader.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSubheader(
      /**
       * New value for property `subheader`
       */
      sSubheader?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.NewsContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NewsContent` itself.
     *
     * The event is triggered when the News Content is pressed.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NewsContent` itself
       */
      oListener?: object
    ): this;
  }

  export interface $NewsContentSettings extends $ControlSettings {
    /**
     * @deprecated (since 1.38.0) - The NewsContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Updates the size of the chart. If not set then the default size is applied based on the device tile.
     */
    size?: (Size | keyof typeof Size) | PropertyBindingInfo;

    /**
     * The content text.
     */
    contentText?: string | PropertyBindingInfo;

    /**
     * The subheader.
     */
    subheader?: string | PropertyBindingInfo;

    /**
     * The event is triggered when the News Content is pressed.
     */
    press?: Function;
  }
}

declare module "sap/m/NotificationList" {
  import { default as ListBase, $ListBaseSettings } from "sap/m/ListBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.90
   *
   * The NotificationList control provides a container for `NotificationListGroup` and `NotificationListItem`.
   */
  export default class NotificationList extends ListBase {
    /**
     * Constructor for a new NotificationList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.ListBase#constructor
     * sap.m.ListBase} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListSettings
    );
    /**
     * Constructor for a new NotificationList.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.ListBase#constructor
     * sap.m.ListBase} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListSettings
    );

    /**
     * Creates a new subclass of class sap.m.NotificationList with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NotificationList>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.NotificationList.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $NotificationListSettings extends $ListBaseSettings {}
}

declare module "sap/m/NotificationListBase" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import Button from "sap/m/Button";

  import { URI, Priority } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38
   *
   * The NotificationListBase is the abstract base class for {@link sap.m.NotificationListItem} and {@link
   * sap.m.NotificationListGroup}.
   *
   * The NotificationList controls are designed for the SAP Fiori notification center. Overview: NotificationListBase
   * defines the general structure of a notification item. Most of the behavioral logic is defined for the
   * single items or groups.
   *
   * Structure: The base holds properties for the following elements:
   * 	 - Author name
   * 	 - Author picture
   * 	 - Time stamp
   * 	 - Priority
   * 	 - Title  Additionally, by setting these properties you can determine if buttons are shown:
   *
   * 	 - `showButtons` - action buttons visibility
   * 	 - `showCloseButton` - close button visibility
   *
   * Note: There are several properties, that are inherited from `ListItemBase` and have no visual representation
   * in the Notifications - `counter`, `highlight`, `highlightText`, `navigated`, `selected`, `type`
   */
  export default class NotificationListBase extends ListItemBase {
    /**
     * Constructor for a new `NotificationListBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListBaseSettings
    );
    /**
     * Constructor for a new `NotificationListBase`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListBaseSettings
    );

    /**
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: Button
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.NotificationListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NotificationListBase` itself.
     *
     * Fired when the close button of the notification is pressed.
     * **Note:** Pressing the close button doesn't destroy the notification automatically.
     */
    attachClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NotificationListBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the NotificationListBase.
     */
    close(): void;
    /**
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:close close} event of this `sap.m.NotificationListBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.NotificationListBase with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NotificationListBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:close close} to attached listeners.
     */
    fireClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAuthorName authorName}.
     *
     * Determines the notification author name.
     *
     * Default value is `empty string`.
     */
    getAuthorName(): string;
    /**
     * Gets current value of property {@link #getAuthorPicture authorPicture}.
     *
     * Determines the URL of the notification author picture.
     */
    getAuthorPicture(): URI;
    /**
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * Action buttons.
     */
    getButtons(): Button[];
    /**
     * Gets current value of property {@link #getDatetime datetime}.
     *
     * The time stamp of the Notification.
     *
     * Default value is `empty string`.
     */
    getDatetime(): string;
    /**
     * Returns a metadata object for class sap.m.NotificationListBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPriority priority}.
     *
     * Determines the priority of the Notification.
     *
     * Default value is `None`.
     */
    getPriority(): Priority | keyof typeof Priority;
    /**
     * Gets current value of property {@link #getShowButtons showButtons}.
     *
     * Determines the action buttons visibility.
     *
     * **Note:** Action buttons are not shown when Notification List Groups are collapsed.
     *
     * Default value is `true`.
     */
    getShowButtons(): boolean;
    /**
     * Gets current value of property {@link #getShowCloseButton showCloseButton}.
     *
     * Determines the visibility of the close button.
     *
     * Default value is `true`.
     */
    getShowCloseButton(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title of the NotificationListBase item.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getButtons buttons}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: Button
    ): int;
    /**
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: Button,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): Button[];
    /**
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | Button
    ): Button;
    /**
     * Sets a new value for property {@link #getAuthorName authorName}.
     *
     * Determines the notification author name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAuthorName(
      /**
       * New value for property `authorName`
       */
      sAuthorName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getAuthorPicture authorPicture}.
     *
     * Determines the URL of the notification author picture.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAuthorPicture(
      /**
       * New value for property `authorPicture`
       */
      sAuthorPicture: URI
    ): this;
    /**
     * Sets a new value for property {@link #getDatetime datetime}.
     *
     * The time stamp of the Notification.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDatetime(
      /**
       * New value for property `datetime`
       */
      sDatetime?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPriority priority}.
     *
     * Determines the priority of the Notification.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setPriority(
      /**
       * New value for property `priority`
       */
      sPriority?: Priority | keyof typeof Priority
    ): this;
    /**
     * Sets a new value for property {@link #getShowButtons showButtons}.
     *
     * Determines the action buttons visibility.
     *
     * **Note:** Action buttons are not shown when Notification List Groups are collapsed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowButtons(
      /**
       * New value for property `showButtons`
       */
      bShowButtons?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowCloseButton showCloseButton}.
     *
     * Determines the visibility of the close button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowCloseButton(
      /**
       * New value for property `showCloseButton`
       */
      bShowCloseButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Determines the title of the NotificationListBase item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:close close} event of this `sap.m.NotificationListBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NotificationListBase` itself.
     *
     * Fired when the close button of the notification is pressed.
     * **Note:** Pressing the close button doesn't destroy the notification automatically.
     */
    attachClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NotificationListBase` itself
       */
      oListener?: object
    ): this;
  }

  export interface $NotificationListBaseSettings extends $ListItemBaseSettings {
    /**
     * Determines the priority of the Notification.
     */
    priority?: (Priority | keyof typeof Priority) | PropertyBindingInfo;

    /**
     * Determines the title of the NotificationListBase item.
     */
    title?: string | PropertyBindingInfo;

    /**
     * The time stamp of the Notification.
     */
    datetime?: string | PropertyBindingInfo;

    /**
     * Determines the action buttons visibility.
     *
     * **Note:** Action buttons are not shown when Notification List Groups are collapsed.
     */
    showButtons?: boolean | PropertyBindingInfo;

    /**
     * Determines the visibility of the close button.
     */
    showCloseButton?: boolean | PropertyBindingInfo;

    /**
     * Determines the notification author name.
     */
    authorName?: string | PropertyBindingInfo;

    /**
     * Determines the URL of the notification author picture.
     */
    authorPicture?: URI | PropertyBindingInfo;

    /**
     * Action buttons.
     */
    buttons?: Button[] | Button | AggregationBindingInfo;

    /**
     * Fired when the close button of the notification is pressed.
     * **Note:** Pressing the close button doesn't destroy the notification automatically.
     */
    close?: Function;
  }
}

declare module "sap/m/NotificationListGroup" {
  import {
    default as NotificationListBase,
    $NotificationListBaseSettings,
  } from "sap/m/NotificationListBase";

  import NotificationListItem from "sap/m/NotificationListItem";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * The `NotificationListGroup` control is used for grouping {@link sap.m.NotificationListItem notification
   * items} of the same type. Behavior: The group handles specific behavior for different use cases:
   *
   * 	 - `autoPriority` - determines the group priority to the highest priority of an item in the group.
   * 	 - `enableCollapseButtonWhenEmpty` - determines if the collapse/expand button for an empty group is
   * 			displayed.
   * 	 - `showEmptyGroup` - determines if the header/footer of an empty group is displayed.
   */
  export default class NotificationListGroup extends NotificationListBase {
    /**
     * Constructor for a new NotificationListGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListGroupSettings
    );
    /**
     * Constructor for a new NotificationListGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListGroupSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: NotificationListItem
    ): this;
    /**
     * @SINCE 1.44
     *
     * Attaches event handler `fnFunction` to the {@link #event:onCollapse onCollapse} event of this `sap.m.NotificationListGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NotificationListGroup` itself.
     *
     * `onCollapse` event is called when collapse property value is changed
     */
    attachOnCollapse(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NotificationListGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.44
     *
     * Detaches event handler `fnFunction` from the {@link #event:onCollapse onCollapse} event of this `sap.m.NotificationListGroup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOnCollapse(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.NotificationListGroup with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NotificationListGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.44
     *
     * Fires event {@link #event:onCollapse onCollapse} to attached listeners.
     */
    fireOnCollapse(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Indicates exact collapse direction
         */
        collapsed?: boolean;
      }
    ): this;
    /**
     * @deprecated (since 1.73)
     *
     * Gets current value of property {@link #getAuthorName authorName}.
     *
     * Determines the notification group's author name.
     *
     * Default value is `empty string`.
     */
    getAuthorName(): string;
    /**
     * @deprecated (since 1.73)
     *
     * Gets current value of property {@link #getAuthorPicture authorPicture}.
     *
     * Determines the URL of the notification group's author picture.
     */
    getAuthorPicture(): URI;
    /**
     * Gets current value of property {@link #getAutoPriority autoPriority}.
     *
     * Determines if the group will automatically set the priority based on the highest priority of its notifications
     * or get its priority from the `priority` property.
     *
     * Default value is `true`.
     */
    getAutoPriority(): boolean;
    /**
     * Gets current value of property {@link #getCollapsed collapsed}.
     *
     * Determines if the group is collapsed or expanded.
     *
     * Default value is `false`.
     */
    getCollapsed(): boolean;
    /**
     * @deprecated (since 1.73)
     *
     * Gets current value of property {@link #getDatetime datetime}.
     *
     * Determines the due date of the NotificationListGroup.
     *
     * Default value is `empty string`.
     */
    getDatetime(): string;
    /**
     * Gets current value of property {@link #getEnableCollapseButtonWhenEmpty enableCollapseButtonWhenEmpty}.
     *
     * Determines if the collapse/expand button for an empty group is displayed.
     *
     * Default value is `false`.
     */
    getEnableCollapseButtonWhenEmpty(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The NotificationListItems inside the group.
     */
    getItems(): NotificationListItem[];
    /**
     * Returns a metadata object for class sap.m.NotificationListGroup.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowEmptyGroup showEmptyGroup}.
     *
     * Determines if the group header/footer of the empty group will be always shown. By default groups with
     * 0 notifications are not shown.
     *
     * Default value is `false`.
     */
    getShowEmptyGroup(): boolean;
    /**
     * Gets current value of property {@link #getShowItemsCounter showItemsCounter}.
     *
     * Determines if the items counter inside the group header will be visible.
     *
     * **Note:** Counter value represents the number of currently visible (loaded) items inside the group.
     *
     * Default value is `true`.
     */
    getShowItemsCounter(): boolean;
    /**
     * Checks for the provided `sap.m.NotificationListItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: NotificationListItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: NotificationListItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): NotificationListItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | NotificationListItem
    ): NotificationListItem;
    /**
     * @deprecated (since 1.73)
     *
     * Sets a new value for property {@link #getAuthorName authorName}.
     *
     * Determines the notification group's author name.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAuthorName(
      /**
       * New value for property `authorName`
       */
      sAuthorName?: string
    ): this;
    /**
     * @deprecated (since 1.73)
     *
     * Sets a new value for property {@link #getAuthorPicture authorPicture}.
     *
     * Determines the URL of the notification group's author picture.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAuthorPicture(
      /**
       * New value for property `authorPicture`
       */
      sAuthorPicture: URI
    ): this;
    /**
     * Sets a new value for property {@link #getAutoPriority autoPriority}.
     *
     * Determines if the group will automatically set the priority based on the highest priority of its notifications
     * or get its priority from the `priority` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAutoPriority(
      /**
       * New value for property `autoPriority`
       */
      bAutoPriority?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getCollapsed collapsed}.
     *
     * Determines if the group is collapsed or expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setCollapsed(
      /**
       * New value for property `collapsed`
       */
      bCollapsed?: boolean
    ): this;
    /**
     * @deprecated (since 1.73)
     *
     * Sets a new value for property {@link #getDatetime datetime}.
     *
     * Determines the due date of the NotificationListGroup.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDatetime(
      /**
       * New value for property `datetime`
       */
      sDatetime?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnableCollapseButtonWhenEmpty enableCollapseButtonWhenEmpty}.
     *
     * Determines if the collapse/expand button for an empty group is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableCollapseButtonWhenEmpty(
      /**
       * New value for property `enableCollapseButtonWhenEmpty`
       */
      bEnableCollapseButtonWhenEmpty?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowEmptyGroup showEmptyGroup}.
     *
     * Determines if the group header/footer of the empty group will be always shown. By default groups with
     * 0 notifications are not shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowEmptyGroup(
      /**
       * New value for property `showEmptyGroup`
       */
      bShowEmptyGroup?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowItemsCounter showItemsCounter}.
     *
     * Determines if the items counter inside the group header will be visible.
     *
     * **Note:** Counter value represents the number of currently visible (loaded) items inside the group.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowItemsCounter(
      /**
       * New value for property `showItemsCounter`
       */
      bShowItemsCounter?: boolean
    ): this;
    /**
     * @SINCE 1.44
     *
     * Attaches event handler `fnFunction` to the {@link #event:onCollapse onCollapse} event of this `sap.m.NotificationListGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NotificationListGroup` itself.
     *
     * `onCollapse` event is called when collapse property value is changed
     */
    attachOnCollapse(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NotificationListGroup` itself
       */
      oListener?: object
    ): this;
  }

  export interface $NotificationListGroupSettings
    extends $NotificationListBaseSettings {
    /**
     * Determines if the group is collapsed or expanded.
     */
    collapsed?: boolean | PropertyBindingInfo;

    /**
     * Determines if the group will automatically set the priority based on the highest priority of its notifications
     * or get its priority from the `priority` property.
     */
    autoPriority?: boolean | PropertyBindingInfo;

    /**
     * Determines if the group header/footer of the empty group will be always shown. By default groups with
     * 0 notifications are not shown.
     */
    showEmptyGroup?: boolean | PropertyBindingInfo;

    /**
     * Determines if the collapse/expand button for an empty group is displayed.
     */
    enableCollapseButtonWhenEmpty?: boolean | PropertyBindingInfo;

    /**
     * Determines if the items counter inside the group header will be visible.
     *
     * **Note:** Counter value represents the number of currently visible (loaded) items inside the group.
     */
    showItemsCounter?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.73)
     *
     * Determines the notification group's author name.
     */
    authorName?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.73)
     *
     * Determines the URL of the notification group's author picture.
     */
    authorPicture?: URI | PropertyBindingInfo;

    /**
     * @deprecated (since 1.73)
     *
     * Determines the due date of the NotificationListGroup.
     */
    datetime?: string | PropertyBindingInfo;

    /**
     * The NotificationListItems inside the group.
     */
    items?:
      | NotificationListItem[]
      | NotificationListItem
      | AggregationBindingInfo;

    /**
     * @SINCE 1.44
     *
     * `onCollapse` event is called when collapse property value is changed
     */
    onCollapse?: Function;
  }
}

declare module "sap/m/NotificationListItem" {
  import {
    default as NotificationListBase,
    $NotificationListBaseSettings,
  } from "sap/m/NotificationListBase";

  import AvatarColor from "sap/m/AvatarColor";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import MessageStrip from "sap/m/MessageStrip";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * The NotificationListItem control shows notification to the user. Structure: The notification item holds
   * properties for the following elements:
   * 	 - `description` - additional detail text.
   * 	 - `hideShowMoreButton` - visibility of the "Show More" button.
   * 	 - `truncate` - determines if title and description are truncated to the first two lines (usually needed
   * 			on mobile devices).  For each item you can set some additional status information about the item
   * 			processing by adding a {@link sap.m.MessageStrip} to the `processingMessage` aggregation.
   */
  export default class NotificationListItem extends NotificationListBase {
    /**
     * Constructor for a new NotificationListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListItemSettings
    );
    /**
     * Constructor for a new NotificationListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $NotificationListItemSettings
    );

    /**
     * Destroys the processingMessage in the aggregation {@link #getProcessingMessage processingMessage}.
     */
    destroyProcessingMessage(): this;
    /**
     * Creates a new subclass of class sap.m.NotificationListItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NotificationListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getAuthorAvatarColor authorAvatarColor}.
     *
     * Determines the background color of the avatar of the author.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     *
     * Default value is `Accent6`.
     */
    getAuthorAvatarColor(): AvatarColor | keyof typeof AvatarColor;
    /**
     * Gets current value of property {@link #getAuthorInitials authorInitials}.
     *
     * Defines the displayed author initials.
     */
    getAuthorInitials(): string;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Determines the description of the NotificationListItem.
     *
     * Default value is `empty string`.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getHideShowMoreButton hideShowMoreButton}.
     *
     * Determines if the "Show More" button should be hidden.
     *
     * Default value is `false`.
     */
    getHideShowMoreButton(): boolean;
    /**
     * Returns a metadata object for class sap.m.NotificationListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getProcessingMessage processingMessage}.
     *
     * The sap.m.MessageStrip control that holds the information about any error that may occur when pressing
     * the notification buttons
     */
    getProcessingMessage(): MessageStrip;
    /**
     * Gets current value of property {@link #getTruncate truncate}.
     *
     * Determines if the text in the title and the description of the notification are truncated to the first
     * two lines.
     *
     * Default value is `true`.
     */
    getTruncate(): boolean;
    /**
     * Sets a new value for property {@link #getAuthorAvatarColor authorAvatarColor}.
     *
     * Determines the background color of the avatar of the author.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Accent6`.
     */
    setAuthorAvatarColor(
      /**
       * New value for property `authorAvatarColor`
       */
      sAuthorAvatarColor?: AvatarColor | keyof typeof AvatarColor
    ): this;
    /**
     * Sets a new value for property {@link #getAuthorInitials authorInitials}.
     *
     * Defines the displayed author initials.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAuthorInitials(
      /**
       * New value for property `authorInitials`
       */
      sAuthorInitials?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Determines the description of the NotificationListItem.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHideShowMoreButton hideShowMoreButton}.
     *
     * Determines if the "Show More" button should be hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideShowMoreButton(
      /**
       * New value for property `hideShowMoreButton`
       */
      bHideShowMoreButton?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getProcessingMessage processingMessage}.
     */
    setProcessingMessage(
      /**
       * The processingMessage to set
       */
      oProcessingMessage: MessageStrip
    ): this;
    /**
     * Sets a new value for property {@link #getTruncate truncate}.
     *
     * Determines if the text in the title and the description of the notification are truncated to the first
     * two lines.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setTruncate(
      /**
       * New value for property `truncate`
       */
      bTruncate?: boolean
    ): this;
  }

  export interface $NotificationListItemSettings
    extends $NotificationListBaseSettings {
    /**
     * Determines the description of the NotificationListItem.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines the displayed author initials.
     */
    authorInitials?: string | PropertyBindingInfo;

    /**
     * Determines if the text in the title and the description of the notification are truncated to the first
     * two lines.
     */
    truncate?: boolean | PropertyBindingInfo;

    /**
     * Determines if the "Show More" button should be hidden.
     */
    hideShowMoreButton?: boolean | PropertyBindingInfo;

    /**
     * Determines the background color of the avatar of the author.
     *
     * **Note:** By using background colors from the predefined sets, your colors can later be customized from
     * the Theme Designer.
     */
    authorAvatarColor?:
      | (AvatarColor | keyof typeof AvatarColor)
      | PropertyBindingInfo;

    /**
     * The sap.m.MessageStrip control that holds the information about any error that may occur when pressing
     * the notification buttons
     */
    processingMessage?: MessageStrip;
  }
}

declare module "sap/m/NumericContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI, CSSSize } from "sap/ui/core/library";

  import {
    DeviationIndicator,
    Size,
    LoadState,
    ValueColor,
  } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Shows numeric values used for example in tiles colored according to their meaning and displays deviations.
   */
  export default class NumericContent extends Control {
    /**
     * Constructor for a new sap.m.GenericTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $NumericContentSettings
    );
    /**
     * Constructor for a new sap.m.GenericTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $NumericContentSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.NumericContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NumericContent` itself.
     *
     * The event is fired when the user chooses the numeric content.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NumericContent` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.NumericContent`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.NumericContent with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NumericContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.73
     * @EXPERIMENTAL (since 1.73)
     *
     * Gets current value of property {@link #getAdaptiveFontSize adaptiveFontSize}.
     *
     * If set to its default value true this property applies the appropriate font style class based on the
     * language. When set to false the font size will always be large
     *
     * Default value is `true`.
     */
    getAdaptiveFontSize(): boolean;
    /**
     * Gets current value of property {@link #getAnimateTextChange animateTextChange}.
     *
     * If set to true, the change of the value will be animated.
     *
     * Default value is `true`.
     */
    getAnimateTextChange(): boolean;
    /**
     * Gets current value of property {@link #getFormatterValue formatterValue}.
     *
     * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the
     * value parameter contains a numeric value only.
     *
     * Default value is `false`.
     */
    getFormatterValue(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon to be displayed as a graphical element within the control. This can be an image or an icon from
     * the icon font.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDescription iconDescription}.
     *
     * Description of an icon that is used in the tooltip.
     */
    getIconDescription(): string;
    /**
     * Gets current value of property {@link #getIndicator indicator}.
     *
     * The indicator arrow that shows value deviation.
     *
     * Default value is `"None"`.
     */
    getIndicator(): DeviationIndicator | keyof typeof DeviationIndicator;
    /**
     * Returns a metadata object for class sap.m.NumericContent.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNullifyValue nullifyValue}.
     *
     * If set to true, the omitted value property is set to 0.
     *
     * Default value is `true`.
     */
    getNullifyValue(): boolean;
    /**
     * Gets current value of property {@link #getScale scale}.
     *
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units. If the scaling prefix contains more than three characters, only the first three characters
     * are displayed.
     */
    getScale(): string;
    /**
     * @deprecated (since 1.38.0) - The NumericContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the control. If not set, then the default size is applied based on the device tile.
     *
     * Default value is `"Auto"`.
     */
    getSize(): Size | keyof typeof Size;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * Default value is `"Loaded"`.
     */
    getState(): LoadState | keyof typeof LoadState;
    /**
     * Gets current value of property {@link #getTruncateValueTo truncateValueTo}.
     *
     * The number of characters of the `value` property to display.
     *
     * **Note** If `adaptiveFontSize` is set to `true` the default value of this property will vary between
     * languages. If `adaptiveFontSize` is set to `false` the default value of this property is `4`.
     */
    getTruncateValueTo(): int;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The actual value.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     *
     * Default value is `"Neutral"`.
     */
    getValueColor(): ValueColor | keyof typeof ValueColor;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the control. If it is not set, the size of the control is defined by the 'size' property.
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWithMargin withMargin}.
     *
     * If the value is set to false, the content is adjusted to the whole size of the control.
     *
     * Default value is `true`.
     */
    getWithMargin(): boolean;
    /**
     * @SINCE 1.73
     * @EXPERIMENTAL (since 1.73)
     *
     * Sets a new value for property {@link #getAdaptiveFontSize adaptiveFontSize}.
     *
     * If set to its default value true this property applies the appropriate font style class based on the
     * language. When set to false the font size will always be large
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAdaptiveFontSize(
      /**
       * New value for property `adaptiveFontSize`
       */
      bAdaptiveFontSize?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAnimateTextChange animateTextChange}.
     *
     * If set to true, the change of the value will be animated.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAnimateTextChange(
      /**
       * New value for property `animateTextChange`
       */
      bAnimateTextChange?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFormatterValue formatterValue}.
     *
     * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the
     * value parameter contains a numeric value only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFormatterValue(
      /**
       * New value for property `formatterValue`
       */
      bFormatterValue?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon to be displayed as a graphical element within the control. This can be an image or an icon from
     * the icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDescription iconDescription}.
     *
     * Description of an icon that is used in the tooltip.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconDescription(
      /**
       * New value for property `iconDescription`
       */
      sIconDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIndicator indicator}.
     *
     * The indicator arrow that shows value deviation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     */
    setIndicator(
      /**
       * New value for property `indicator`
       */
      sIndicator?: DeviationIndicator | keyof typeof DeviationIndicator
    ): this;
    /**
     * Sets a new value for property {@link #getNullifyValue nullifyValue}.
     *
     * If set to true, the omitted value property is set to 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setNullifyValue(
      /**
       * New value for property `nullifyValue`
       */
      bNullifyValue?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getScale scale}.
     *
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units. If the scaling prefix contains more than three characters, only the first three characters
     * are displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setScale(
      /**
       * New value for property `scale`
       */
      sScale?: string
    ): this;
    /**
     * @deprecated (since 1.38.0) - The NumericContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the control. If not set, then the default size is applied based on the device tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: Size | keyof typeof Size
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Indicates the load status.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Loaded"`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: LoadState | keyof typeof LoadState
    ): this;
    /**
     * Sets a new value for property {@link #getTruncateValueTo truncateValueTo}.
     *
     * The number of characters of the `value` property to display.
     *
     * **Note** If `adaptiveFontSize` is set to `true` the default value of this property will vary between
     * languages. If `adaptiveFontSize` is set to `false` the default value of this property is `4`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTruncateValueTo(
      /**
       * New value for property `truncateValueTo`
       */
      iTruncateValueTo: int
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The actual value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueColor valueColor}.
     *
     * The semantic color of the value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     */
    setValueColor(
      /**
       * New value for property `valueColor`
       */
      sValueColor?: ValueColor | keyof typeof ValueColor
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the control. If it is not set, the size of the control is defined by the 'size' property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWithMargin withMargin}.
     *
     * If the value is set to false, the content is adjusted to the whole size of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setWithMargin(
      /**
       * New value for property `withMargin`
       */
      bWithMargin?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.NumericContent`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.NumericContent` itself.
     *
     * The event is fired when the user chooses the numeric content.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.NumericContent` itself
       */
      oListener?: object
    ): this;
  }

  export interface $NumericContentSettings extends $ControlSettings {
    /**
     * If set to true, the change of the value will be animated.
     */
    animateTextChange?: boolean | PropertyBindingInfo;

    /**
     * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the
     * value parameter contains a numeric value only.
     */
    formatterValue?: boolean | PropertyBindingInfo;

    /**
     * The icon to be displayed as a graphical element within the control. This can be an image or an icon from
     * the icon font.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Description of an icon that is used in the tooltip.
     */
    iconDescription?: string | PropertyBindingInfo;

    /**
     * The indicator arrow that shows value deviation.
     */
    indicator?:
      | (DeviationIndicator | keyof typeof DeviationIndicator)
      | PropertyBindingInfo;

    /**
     * If set to true, the omitted value property is set to 0.
     */
    nullifyValue?: boolean | PropertyBindingInfo;

    /**
     * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
     * be used for units. If the scaling prefix contains more than three characters, only the first three characters
     * are displayed.
     */
    scale?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.38.0) - The NumericContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Updates the size of the control. If not set, then the default size is applied based on the device tile.
     */
    size?: (Size | keyof typeof Size) | PropertyBindingInfo;

    /**
     * The number of characters of the `value` property to display.
     *
     * **Note** If `adaptiveFontSize` is set to `true` the default value of this property will vary between
     * languages. If `adaptiveFontSize` is set to `false` the default value of this property is `4`.
     */
    truncateValueTo?: int | PropertyBindingInfo;

    /**
     * The actual value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * The semantic color of the value.
     */
    valueColor?: (ValueColor | keyof typeof ValueColor) | PropertyBindingInfo;

    /**
     * The width of the control. If it is not set, the size of the control is defined by the 'size' property.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * If the value is set to false, the content is adjusted to the whole size of the control.
     */
    withMargin?: boolean | PropertyBindingInfo;

    /**
     * Indicates the load status.
     */
    state?: (LoadState | keyof typeof LoadState) | PropertyBindingInfo;

    /**
     * @SINCE 1.73
     * @EXPERIMENTAL (since 1.73)
     *
     * If set to its default value true this property applies the appropriate font style class based on the
     * language. When set to false the font size will always be large
     */
    adaptiveFontSize?: boolean | PropertyBindingInfo;

    /**
     * The event is fired when the user chooses the numeric content.
     */
    press?: Function;
  }
}

declare module "sap/m/ObjectAttribute" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TextDirection } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The `ObjectAttribute` control displays a text field that can be normal or active. The `ObjectAttribute`
   * fires a `press` event when the user chooses the active text.
   *
   * **Note:** If property `active` is set to `true`, only the value of the `text` property is styled and
   * acts as a link. In this case the `text` property must also be set, as otherwise there will be no link
   * displayed for the user.
   */
  export default class ObjectAttribute extends Control {
    /**
     * Constructor for a new `ObjectAttribute`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectAttributeSettings
    );
    /**
     * Constructor for a new `ObjectAttribute`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectAttributeSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectAttribute`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectAttribute` itself.
     *
     * Fires when the user clicks on active text.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectAttribute` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the customContent in the aggregation {@link #getCustomContent customContent}.
     */
    destroyCustomContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ObjectAttribute`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectAttribute with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectAttribute>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * DOM reference of the ObjectAttribute's text to be used for positioning.
         */
        domRef?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getActive active}.
     *
     * Indicates if the `ObjectAttribute` text is selectable for the user.
     *
     * **Note:** As of version 1.48, only the value of the `text` property becomes active (styled and acts like
     * a link) as opposed to both the `title` and `text` in the previous versions. If you set this property
     * to `true`, you have to also set the `text` property. **Note:** When `active` property is set to `true`,
     * and the text direction of the `title` or the `text` does not match the text direction of the application,
     * the `textDirection` property should be set to ensure correct display.
     */
    getActive(): boolean;
    /**
     * Gets content of aggregation {@link #getCustomContent customContent}.
     *
     * When the aggregation is set, it replaces the `text`, `active` and `textDirection` properties. This also
     * ignores the press event. The provided control is displayed as an active link in case it is a sap.m.Link.
     * **Note:** It will only allow sap.m.Text and sap.m.Link controls.
     */
    getCustomContent(): Control;
    /**
     * Returns a metadata object for class sap.m.ObjectAttribute.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Defines to which DOM reference the Popup should be docked.
     */
    getPopupAnchorDomRef(): Element;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the ObjectAttribute text.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Determines the direction of the text. Available options for the text direction are LTR (left-to-right),
     * RTL (right-to-left), or Inherit. By default the control inherits the text direction from its parent control.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the ObjectAttribute title.
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getActive active}.
     *
     * Indicates if the `ObjectAttribute` text is selectable for the user.
     *
     * **Note:** As of version 1.48, only the value of the `text` property becomes active (styled and acts like
     * a link) as opposed to both the `title` and `text` in the previous versions. If you set this property
     * to `true`, you have to also set the `text` property. **Note:** When `active` property is set to `true`,
     * and the text direction of the `title` or the `text` does not match the text direction of the application,
     * the `textDirection` property should be set to ensure correct display.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getCustomContent customContent}.
     */
    setCustomContent(
      /**
       * The customContent to set
       */
      oCustomContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the ObjectAttribute text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Determines the direction of the text. Available options for the text direction are LTR (left-to-right),
     * RTL (right-to-left), or Inherit. By default the control inherits the text direction from its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the ObjectAttribute title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectAttribute`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectAttribute` itself.
     *
     * Fires when the user clicks on active text.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectAttribute` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectAttributeSettings extends $ControlSettings {
    /**
     * Defines the ObjectAttribute title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the ObjectAttribute text.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Indicates if the `ObjectAttribute` text is selectable for the user.
     *
     * **Note:** As of version 1.48, only the value of the `text` property becomes active (styled and acts like
     * a link) as opposed to both the `title` and `text` in the previous versions. If you set this property
     * to `true`, you have to also set the `text` property. **Note:** When `active` property is set to `true`,
     * and the text direction of the `title` or the `text` does not match the text direction of the application,
     * the `textDirection` property should be set to ensure correct display.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * Determines the direction of the text. Available options for the text direction are LTR (left-to-right),
     * RTL (right-to-left), or Inherit. By default the control inherits the text direction from its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * When the aggregation is set, it replaces the `text`, `active` and `textDirection` properties. This also
     * ignores the press event. The provided control is displayed as an active link in case it is a sap.m.Link.
     * **Note:** It will only allow sap.m.Text and sap.m.Link controls.
     */
    customContent?: Control;

    /**
     * Fires when the user clicks on active text.
     */
    press?: Function;
  }
}

declare module "sap/m/ObjectHeader" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ObjectNumber from "sap/m/ObjectNumber";

  import {
    ID,
    URI,
    TextDirection,
    ValueState,
    TitleLevel,
  } from "sap/ui/core/library";

  import ObjectAttribute from "sap/m/ObjectAttribute";

  import ObjectMarker from "sap/m/ObjectMarker";

  import {
    BackgroundDesign,
    ObjectHeaderContainer,
    ObjectHeaderPictureShape,
  } from "sap/m/library";

  import ObjectStatus from "sap/m/ObjectStatus";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * `ObjectHeader` is a display control that enables the user to easily identify a specific object. The object
   * header title is the key identifier of the object and additional text and icons can be used to further
   * distinguish it from other objects.
   *
   * Responsive behavior:
   *
   * When using the `sap.m.ObjectHeader` in SAP Quartz theme, the breakpoints and layout paddings could be
   * automatically determined by the container's width. To enable this concept and implement responsive padding
   * to the `ObjectHeader` control, add the following class: `sapUiResponsivePadding--header`.
   */
  export default class ObjectHeader extends Control {
    /**
     * Constructor for a new ObjectHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectHeaderSettings
    );
    /**
     * Constructor for a new ObjectHeader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectHeaderSettings
    );

    /**
     * @SINCE 1.38.0
     *
     * Adds some additionalNumber to the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     */
    addAdditionalNumber(
      /**
       * The additionalNumber to add; if empty, nothing is inserted
       */
      oAdditionalNumber: ObjectNumber
    ): this;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute
    ): this;
    /**
     * Adds some marker to the aggregation {@link #getMarkers markers}.
     */
    addMarker(
      /**
       * The marker to add; if empty, nothing is inserted
       */
      oMarker: ObjectMarker
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Adds some status to the aggregation {@link #getStatuses statuses}.
     */
    addStatus(
      /**
       * The status to add; if empty, nothing is inserted
       */
      oStatus: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:iconPress iconPress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the title icon is active and the user taps/clicks on it
     */
    attachIconPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:introPress introPress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the intro is active and the user taps/clicks on it
     */
    attachIntroPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the title is active and the user taps/clicks on it
     */
    attachTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:titleSelectorPress titleSelectorPress} event
     * of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the object header title selector (down-arrow) is pressed
     */
    attachTitleSelectorPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Destroys all the additionalNumbers in the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     */
    destroyAdditionalNumbers(): this;
    /**
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     */
    destroyAttributes(): this;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Destroys the firstStatus in the aggregation {@link #getFirstStatus firstStatus}.
     */
    destroyFirstStatus(): this;
    /**
     * @SINCE 1.21.1
     *
     * Destroys the headerContainer in the aggregation {@link #getHeaderContainer headerContainer}.
     */
    destroyHeaderContainer(): this;
    /**
     * Destroys all the markers in the aggregation {@link #getMarkers markers}.
     */
    destroyMarkers(): this;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Destroys the secondStatus in the aggregation {@link #getSecondStatus secondStatus}.
     */
    destroySecondStatus(): this;
    /**
     * @SINCE 1.16.0
     *
     * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
     */
    destroyStatuses(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:iconPress iconPress} event of this `sap.m.ObjectHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachIconPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:introPress introPress} event of this `sap.m.ObjectHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachIntroPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:titlePress titlePress} event of this `sap.m.ObjectHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:titleSelectorPress titleSelectorPress} event
     * of this `sap.m.ObjectHeader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTitleSelectorPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectHeader with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectHeader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:iconPress iconPress} to attached listeners.
     */
    fireIconPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the object header' icon to be used for positioning.
         */
        domRef?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:introPress introPress} to attached listeners.
     */
    fireIntroPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the object header' intro to be used for positioning.
         */
        domRef?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:titlePress titlePress} to attached listeners.
     */
    fireTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the object header' title to be used for positioning.
         */
        domRef?: object;
      }
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Fires event {@link #event:titleSelectorPress titleSelectorPress} to attached listeners.
     */
    fireTitleSelectorPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Dom reference of the object header' titleArrow to be used for positioning.
         */
        domRef?: object;
      }
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Gets content of aggregation {@link #getAdditionalNumbers additionalNumbers}.
     *
     * NOTE: Only applied if you set "responsive=false". Additional object numbers and units are managed in
     * this aggregation. The numbers are hidden on tablet and phone size screens. When only one number is provided,
     * it is rendered with additional separator from the main ObjectHeader number.
     */
    getAdditionalNumbers(): ObjectNumber[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * The list of Object Attributes
     */
    getAttributes(): ObjectAttribute[];
    /**
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the background color of the `ObjectHeader`.
     *
     * **Note:** The different types of `ObjectHeader` come with different default background:
     * 	 - non responsive - Transparent
     * 	 - responsive - Translucent
     * 	 - condensed - Solid
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets current value of property {@link #getCondensed condensed}.
     *
     * `ObjectHeader` with title, one attribute, number, and number unit.
     *
     * **Note:** Only applied if the `responsive` property is set to `false`.
     *
     * Default value is `false`.
     */
    getCondensed(): boolean;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Gets content of aggregation {@link #getFirstStatus firstStatus}.
     *
     * First status shown on the right side of the attributes above the second status. If it is not set the
     * first attribute will expand to take the entire row.
     */
    getFirstStatus(): ObjectStatus;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getFullScreenOptimized fullScreenOptimized}.
     *
     * Optimizes the display of the elements of the `ObjectHeader`.
     *
     * Set this property to `true` if your app uses a fullscreen layout (as opposed to a master-detail or other
     * split-screen layout).
     *
     * **Note**: Only applied if the `responsive` property is also set to `true`.
     *
     * If set to `true`, the following situations apply:
     * 	 - On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number
     * 			group
     * 	 - On desktop, 4+ attributes/statuses - 4 columns below the Title/Number
     * 	 - On tablet (portrait mode), always in 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number  On phone,
     * 			the attributes and statuses are always positioned in 1 column below the Title/Number of the `ObjectHeader`.
     *
     * If set to `false`, the attributes and statuses are being positioned below the Title/Number of the `ObjectHeader`
     * in 2 or 3 columns depending on their number:
     * 	 - On desktop, 1-4 attributes/statuses - 2 columns
     * 	 - On desktop, 5+ attributes/statuses - 3 columns
     * 	 - On tablet, always in 2 columns
     *
     * Default value is `false`.
     */
    getFullScreenOptimized(): boolean;
    /**
     * @SINCE 1.21.1
     *
     * Gets content of aggregation {@link #getHeaderContainer headerContainer}.
     *
     * This aggregation takes only effect when you set "responsive" to true. It can either be filled with an
     * sap.m.IconTabBar or an sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken
     * care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside
     * the object header, the content will be displayed below the ObjectHeader.
     */
    getHeaderContainer(): ObjectHeaderContainer;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon of the `ObjectHeader`.
     *
     * **Note:** Recursive resolution of binding expressions is not supported by the framework. It works only
     * in ObjectHeader, since it is a composite control and creates an Image control internally.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconActive iconActive}.
     *
     * Determines whether the `ObjectHeader` icon is clickable.
     */
    getIconActive(): boolean;
    /**
     * Gets current value of property {@link #getIconAlt iconAlt}.
     *
     * Determines the alternative text of the `ObjectHeader` icon. The text is displayed if the image for the
     * icon is not available, or cannot be displayed.
     */
    getIconAlt(): string;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to `true` but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to `false`.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getIconTooltip iconTooltip}.
     *
     * Determines the tooltip text of the `ObjectHeader` icon.
     */
    getIconTooltip(): string;
    /**
     * @SINCE 1.61
     *
     * Gets current value of property {@link #getImageShape imageShape}.
     *
     * Determines whether the picture should be displayed in a square or with a circle-shaped mask just like
     * in {@link sap.uxap.ObjectPageHeader}.
     *
     * **Note:** This property takes effect only on Images and it is ignored for Icons.
     *
     * Default value is `Square`.
     */
    getImageShape():
      | ObjectHeaderPictureShape
      | keyof typeof ObjectHeaderPictureShape;
    /**
     * Gets current value of property {@link #getIntro intro}.
     *
     * Determines the introductory text for the `ObjectHeader`.
     */
    getIntro(): string;
    /**
     * Gets current value of property {@link #getIntroActive introActive}.
     *
     * Determines whether the introductory text of the `ObjectHeader` is clickable.
     */
    getIntroActive(): boolean;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getIntroHref introHref}.
     *
     * Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
     * this should not be set, but instead an event handler for the `introPress` event should be registered.
     */
    getIntroHref(): URI;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getIntroTarget introTarget}.
     *
     * Determines the `target` attribute for the intro link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     */
    getIntroTarget(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getIntroTextDirection introTextDirection}.
     *
     * Specifies the intro text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getIntroTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets content of aggregation {@link #getMarkers markers}.
     *
     * List of markers (icon and/or text) that can be displayed for the `ObjectHeader`, such as favorite and
     * flagged.
     *
     *  **Note:** You should use either this aggregation or the already deprecated properties - `markFlagged`
     * and `markFavorite`. Using both can lead to unexpected results.
     */
    getMarkers(): ObjectMarker[];
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Favorite`. You should use either this property or the `markers` aggregation,
     * using both may lead to unpredicted behavior.
     *
     * Gets current value of property {@link #getMarkFavorite markFavorite}.
     *
     * Sets the favorite state for the `ObjectHeader`. The `showMarkers` property must be set to `true` for
     * this property to take effect.
     *
     * Default value is `false`.
     */
    getMarkFavorite(): boolean;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Flagged`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     * Gets current value of property {@link #getMarkFlagged markFlagged}.
     *
     * Sets the flagged state for the `ObjectHeader`. The `showMarkers` property must be set to `true` for this
     * property to take effect.
     *
     * Default value is `false`.
     */
    getMarkFlagged(): boolean;
    /**
     * Returns a metadata object for class sap.m.ObjectHeader.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Determines the displayed number of the `ObjectHeader` number field.
     */
    getNumber(): string;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getNumberState numberState}.
     *
     * Determines the value state of the `number` and `numberUnit` properties.
     *
     * Default value is `None`.
     */
    getNumberState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getNumberTextDirection numberTextDirection}.
     *
     * Specifies the number and unit text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getNumberTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getNumberUnit numberUnit}.
     *
     * Determines the units qualifier of the `ObjectHeader` number.
     *
     * **Note:** The value of the `numberUnit` is not displayed if the number property is set to `null`.
     */
    getNumberUnit(): string;
    /**
     * @SINCE 1.21.1
     *
     * Gets current value of property {@link #getResponsive responsive}.
     *
     * Determines whether the `ObjectHeader` is rendered with a different design that reacts responsively to
     * the screen sizes.
     *
     * When the `responsive` property is set to `true`, the following behavior specifics for the control exist:
     *
     * 	 - If an image (or an icon font) is set to the `icon` property, it is hidden in portrait mode on phone.
     *
     * 	 - The title is truncated to 80 characters if longer. For portrait mode on phone, the title is truncated
     * 			to 50 characters.
     *
     * Default value is `false`.
     */
    getResponsive(): boolean;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Gets content of aggregation {@link #getSecondStatus secondStatus}.
     *
     * Second status shown on the right side of the attributes below the first status. If it is not set the
     * second attribute will expand to take the entire row.
     */
    getSecondStatus(): ObjectStatus;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregationv. This property is valid only if you are
     * using the already deprecated properties - `markFlagged` and `markFavorite`. If you are using `markers`,
     * the visibility of the markers depends on what is set in the aggregation itself.
     *
     * Gets current value of property {@link #getShowMarkers showMarkers}.
     *
     * If set to `true`, the `ObjectHeader` can be marked with icons such as favorite and flag.
     *
     * Default value is `false`.
     */
    getShowMarkers(): boolean;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getShowTitleSelector showTitleSelector}.
     *
     * Determines whether the selector arrow icon/image is displayed and can be pressed.
     *
     * Default value is `false`.
     */
    getShowTitleSelector(): boolean;
    /**
     * @SINCE 1.16.0
     *
     * Gets content of aggregation {@link #getStatuses statuses}.
     *
     * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator
     * controls.
     */
    getStatuses(): Control[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title of the `ObjectHeader`.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleActive titleActive}.
     *
     * Determines whether the title of the `ObjectHeader` is clickable and is set only if a title is provided.
     */
    getTitleActive(): boolean;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getTitleHref titleHref}.
     *
     * Defines the title link target URI. Supports standard hyperlink behavior.
     *
     * **Note:** If an action should be triggered, this property should not be set, but instead an event handler
     * for the `titlePress` event should be registered.
     */
    getTitleHref(): URI;
    /**
     * Gets current value of property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     *
     * Default value is `H1`.
     */
    getTitleLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getTitleSelectorTooltip titleSelectorTooltip}.
     *
     * Determines a custom text for the tooltip of the select title arrow. If not set, a default text of the
     * tooltip will be displayed.
     *
     * Default value is `"Options"`.
     */
    getTitleSelectorTooltip(): string;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getTitleTarget titleTarget}.
     *
     * Determines the `target` attribute for the title link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     */
    getTitleTarget(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Specifies the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTitleTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.38.0
     *
     * Checks for the provided `sap.m.ObjectNumber` in the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAdditionalNumber(
      /**
       * The additionalNumber whose index is looked for
       */
      oAdditionalNumber: ObjectNumber
    ): int;
    /**
     * Checks for the provided `sap.m.ObjectAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: ObjectAttribute
    ): int;
    /**
     * Checks for the provided `sap.m.ObjectMarker` in the aggregation {@link #getMarkers markers}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfMarker(
      /**
       * The marker whose index is looked for
       */
      oMarker: ObjectMarker
    ): int;
    /**
     * @SINCE 1.16.0
     *
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getStatuses statuses}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfStatus(
      /**
       * The status whose index is looked for
       */
      oStatus: Control
    ): int;
    /**
     * @SINCE 1.38.0
     *
     * Inserts a additionalNumber into the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     */
    insertAdditionalNumber(
      /**
       * The additionalNumber to insert; if empty, nothing is inserted
       */
      oAdditionalNumber: ObjectNumber,
      /**
       * The `0`-based index the additionalNumber should be inserted at; for a negative value of `iIndex`, the
       * additionalNumber is inserted at position 0; for a value greater than the current size of the aggregation,
       * the additionalNumber is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a marker into the aggregation {@link #getMarkers markers}.
     */
    insertMarker(
      /**
       * The marker to insert; if empty, nothing is inserted
       */
      oMarker: ObjectMarker,
      /**
       * The `0`-based index the marker should be inserted at; for a negative value of `iIndex`, the marker is
       * inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Inserts a status into the aggregation {@link #getStatuses statuses}.
     */
    insertStatus(
      /**
       * The status to insert; if empty, nothing is inserted
       */
      oStatus: Control,
      /**
       * The `0`-based index the status should be inserted at; for a negative value of `iIndex`, the status is
       * inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Removes a additionalNumber from the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     */
    removeAdditionalNumber(
      /**
       * The additionalNumber to remove or its index or id
       */
      vAdditionalNumber: int | string | ObjectNumber
    ): ObjectNumber;
    /**
     * @SINCE 1.38.0
     *
     * Removes all the controls from the aggregation {@link #getAdditionalNumbers additionalNumbers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAdditionalNumbers(): ObjectNumber[];
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAttributes(): ObjectAttribute[];
    /**
     * Removes all the controls from the aggregation {@link #getMarkers markers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllMarkers(): ObjectMarker[];
    /**
     * @SINCE 1.16.0
     *
     * Removes all the controls from the aggregation {@link #getStatuses statuses}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllStatuses(): Control[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | ObjectAttribute
    ): ObjectAttribute;
    /**
     * Removes a marker from the aggregation {@link #getMarkers markers}.
     */
    removeMarker(
      /**
       * The marker to remove or its index or id
       */
      vMarker: int | string | ObjectMarker
    ): ObjectMarker;
    /**
     * @SINCE 1.16.0
     *
     * Removes a status from the aggregation {@link #getStatuses statuses}.
     */
    removeStatus(
      /**
       * The status to remove or its index or id
       */
      vStatus: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the background color of the `ObjectHeader`.
     *
     * **Note:** The different types of `ObjectHeader` come with different default background:
     * 	 - non responsive - Transparent
     * 	 - responsive - Translucent
     * 	 - condensed - Solid
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * Set the condensed flag
     */
    setCondensed(
      /**
       * the new value
       */
      bCondensed: boolean
    ): this;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Sets the aggregated {@link #getFirstStatus firstStatus}.
     */
    setFirstStatus(
      /**
       * The firstStatus to set
       */
      oFirstStatus: ObjectStatus
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getFullScreenOptimized fullScreenOptimized}.
     *
     * Optimizes the display of the elements of the `ObjectHeader`.
     *
     * Set this property to `true` if your app uses a fullscreen layout (as opposed to a master-detail or other
     * split-screen layout).
     *
     * **Note**: Only applied if the `responsive` property is also set to `true`.
     *
     * If set to `true`, the following situations apply:
     * 	 - On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number
     * 			group
     * 	 - On desktop, 4+ attributes/statuses - 4 columns below the Title/Number
     * 	 - On tablet (portrait mode), always in 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number  On phone,
     * 			the attributes and statuses are always positioned in 1 column below the Title/Number of the `ObjectHeader`.
     *
     * If set to `false`, the attributes and statuses are being positioned below the Title/Number of the `ObjectHeader`
     * in 2 or 3 columns depending on their number:
     * 	 - On desktop, 1-4 attributes/statuses - 2 columns
     * 	 - On desktop, 5+ attributes/statuses - 3 columns
     * 	 - On tablet, always in 2 columns
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFullScreenOptimized(
      /**
       * New value for property `fullScreenOptimized`
       */
      bFullScreenOptimized?: boolean
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Sets the aggregated {@link #getHeaderContainer headerContainer}.
     */
    setHeaderContainer(
      /**
       * The headerContainer to set
       */
      oHeaderContainer: ObjectHeaderContainer
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon of the `ObjectHeader`.
     *
     * **Note:** Recursive resolution of binding expressions is not supported by the framework. It works only
     * in ObjectHeader, since it is a composite control and creates an Image control internally.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconActive iconActive}.
     *
     * Determines whether the `ObjectHeader` icon is clickable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconActive(
      /**
       * New value for property `iconActive`
       */
      bIconActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconAlt iconAlt}.
     *
     * Determines the alternative text of the `ObjectHeader` icon. The text is displayed if the image for the
     * icon is not available, or cannot be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconAlt(
      /**
       * New value for property `iconAlt`
       */
      sIconAlt?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to `true` but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to `false`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconTooltip iconTooltip}.
     *
     * Determines the tooltip text of the `ObjectHeader` icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconTooltip(
      /**
       * New value for property `iconTooltip`
       */
      sIconTooltip?: string
    ): this;
    /**
     * @SINCE 1.61
     *
     * Sets a new value for property {@link #getImageShape imageShape}.
     *
     * Determines whether the picture should be displayed in a square or with a circle-shaped mask just like
     * in {@link sap.uxap.ObjectPageHeader}.
     *
     * **Note:** This property takes effect only on Images and it is ignored for Icons.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Square`.
     */
    setImageShape(
      /**
       * New value for property `imageShape`
       */
      sImageShape?:
        | ObjectHeaderPictureShape
        | keyof typeof ObjectHeaderPictureShape
    ): this;
    /**
     * Sets a new value for property {@link #getIntro intro}.
     *
     * Determines the introductory text for the `ObjectHeader`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIntro(
      /**
       * New value for property `intro`
       */
      sIntro?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIntroActive introActive}.
     *
     * Determines whether the introductory text of the `ObjectHeader` is clickable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIntroActive(
      /**
       * New value for property `introActive`
       */
      bIntroActive?: boolean
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getIntroHref introHref}.
     *
     * Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
     * this should not be set, but instead an event handler for the `introPress` event should be registered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIntroHref(
      /**
       * New value for property `introHref`
       */
      sIntroHref?: URI
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getIntroTarget introTarget}.
     *
     * Determines the `target` attribute for the intro link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIntroTarget(
      /**
       * New value for property `introTarget`
       */
      sIntroTarget?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getIntroTextDirection introTextDirection}.
     *
     * Specifies the intro text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setIntroTextDirection(
      /**
       * New value for property `introTextDirection`
       */
      sIntroTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets the visibility value of the Favorite marker.
     */
    setMarkFavorite(
      /**
       * visibility of the marker
       */
      bMarked: boolean
    ): this;
    /**
     * Sets the visibility value of the Flagged marker.
     */
    setMarkFlagged(
      /**
       * visibility of the marker
       */
      bMarked: boolean
    ): this;
    /**
     * Set the number value to the internal aggregation
     */
    setNumber(
      /**
       * the new value
       */
      sNumber: string
    ): this;
    /**
     * Set the number state to the internal aggregation
     */
    setNumberState(
      /**
       * the new value
       */
      sState: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getNumberTextDirection numberTextDirection}.
     *
     * Specifies the number and unit text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setNumberTextDirection(
      /**
       * New value for property `numberTextDirection`
       */
      sNumberTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Set the number unit to the internal aggregation
     */
    setNumberUnit(
      /**
       * the new value
       */
      sUnit: string
    ): this;
    /**
     * @SINCE 1.21.1
     *
     * Sets a new value for property {@link #getResponsive responsive}.
     *
     * Determines whether the `ObjectHeader` is rendered with a different design that reacts responsively to
     * the screen sizes.
     *
     * When the `responsive` property is set to `true`, the following behavior specifics for the control exist:
     *
     * 	 - If an image (or an icon font) is set to the `icon` property, it is hidden in portrait mode on phone.
     *
     * 	 - The title is truncated to 80 characters if longer. For portrait mode on phone, the title is truncated
     * 			to 50 characters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResponsive(
      /**
       * New value for property `responsive`
       */
      bResponsive?: boolean
    ): this;
    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Sets the aggregated {@link #getSecondStatus secondStatus}.
     */
    setSecondStatus(
      /**
       * The secondStatus to set
       */
      oSecondStatus: ObjectStatus
    ): this;
    /**
     * Sets the visibility value of the Flagged and Favorite markers.
     */
    setShowMarkers(
      /**
       * visibility of all markers
       */
      bMarked: boolean
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getShowTitleSelector showTitleSelector}.
     *
     * Determines whether the selector arrow icon/image is displayed and can be pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowTitleSelector(
      /**
       * New value for property `showTitleSelector`
       */
      bShowTitleSelector?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Determines the title of the `ObjectHeader`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleActive titleActive}.
     *
     * Determines whether the title of the `ObjectHeader` is clickable and is set only if a title is provided.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitleActive(
      /**
       * New value for property `titleActive`
       */
      bTitleActive?: boolean
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getTitleHref titleHref}.
     *
     * Defines the title link target URI. Supports standard hyperlink behavior.
     *
     * **Note:** If an action should be triggered, this property should not be set, but instead an event handler
     * for the `titlePress` event should be registered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitleHref(
      /**
       * New value for property `titleHref`
       */
      sTitleHref?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `H1`.
     */
    setTitleLevel(
      /**
       * New value for property `titleLevel`
       */
      sTitleLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets the new text for the tooltip of the select title arrow to the internal aggregation
     */
    setTitleSelectorTooltip(
      /**
       * the tooltip of the title selector
       */
      sTooltip: string
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getTitleTarget titleTarget}.
     *
     * Determines the `target` attribute for the title link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitleTarget(
      /**
       * New value for property `titleTarget`
       */
      sTitleTarget?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Specifies the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTitleTextDirection(
      /**
       * New value for property `titleTextDirection`
       */
      sTitleTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:iconPress iconPress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the title icon is active and the user taps/clicks on it
     */
    attachIconPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:introPress introPress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the intro is active and the user taps/clicks on it
     */
    attachIntroPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the title is active and the user taps/clicks on it
     */
    attachTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:titleSelectorPress titleSelectorPress} event
     * of this `sap.m.ObjectHeader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectHeader` itself.
     *
     * Event is fired when the object header title selector (down-arrow) is pressed
     */
    attachTitleSelectorPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectHeader` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectHeaderSettings extends $ControlSettings {
    /**
     * Determines the title of the `ObjectHeader`.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines the displayed number of the `ObjectHeader` number field.
     */
    number?: string | PropertyBindingInfo;

    /**
     * Determines the units qualifier of the `ObjectHeader` number.
     *
     * **Note:** The value of the `numberUnit` is not displayed if the number property is set to `null`.
     */
    numberUnit?: string | PropertyBindingInfo;

    /**
     * Determines the introductory text for the `ObjectHeader`.
     */
    intro?: string | PropertyBindingInfo;

    /**
     * Determines whether the introductory text of the `ObjectHeader` is clickable.
     */
    introActive?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the title of the `ObjectHeader` is clickable and is set only if a title is provided.
     */
    titleActive?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon of the `ObjectHeader`.
     *
     * **Note:** Recursive resolution of binding expressions is not supported by the framework. It works only
     * in ObjectHeader, since it is a composite control and creates an Image control internally.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Determines whether the `ObjectHeader` icon is clickable.
     */
    iconActive?: boolean | PropertyBindingInfo;

    /**
     * Determines the alternative text of the `ObjectHeader` icon. The text is displayed if the image for the
     * icon is not available, or cannot be displayed.
     */
    iconAlt?: string | PropertyBindingInfo;

    /**
     * Determines the tooltip text of the `ObjectHeader` icon.
     */
    iconTooltip?: string | PropertyBindingInfo;

    /**
     * By default, this is set to `true` but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to `false`.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.61
     *
     * Determines whether the picture should be displayed in a square or with a circle-shaped mask just like
     * in {@link sap.uxap.ObjectPageHeader}.
     *
     * **Note:** This property takes effect only on Images and it is ignored for Icons.
     */
    imageShape?:
      | (ObjectHeaderPictureShape | keyof typeof ObjectHeaderPictureShape)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Favorite`. You should use either this property or the `markers` aggregation,
     * using both may lead to unpredicted behavior.
     *
     * Sets the favorite state for the `ObjectHeader`. The `showMarkers` property must be set to `true` for
     * this property to take effect.
     */
    markFavorite?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Flagged`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     * Sets the flagged state for the `ObjectHeader`. The `showMarkers` property must be set to `true` for this
     * property to take effect.
     */
    markFlagged?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregationv. This property is valid only if you are
     * using the already deprecated properties - `markFlagged` and `markFavorite`. If you are using `markers`,
     * the visibility of the markers depends on what is set in the aggregation itself.
     *
     * If set to `true`, the `ObjectHeader` can be marked with icons such as favorite and flag.
     */
    showMarkers?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * Determines whether the selector arrow icon/image is displayed and can be pressed.
     */
    showTitleSelector?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * Determines the value state of the `number` and `numberUnit` properties.
     */
    numberState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * `ObjectHeader` with title, one attribute, number, and number unit.
     *
     * **Note:** Only applied if the `responsive` property is set to `false`.
     */
    condensed?: boolean | PropertyBindingInfo;

    /**
     * Determines the background color of the `ObjectHeader`.
     *
     * **Note:** The different types of `ObjectHeader` come with different default background:
     * 	 - non responsive - Transparent
     * 	 - responsive - Translucent
     * 	 - condensed - Solid
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.21.1
     *
     * Determines whether the `ObjectHeader` is rendered with a different design that reacts responsively to
     * the screen sizes.
     *
     * When the `responsive` property is set to `true`, the following behavior specifics for the control exist:
     *
     * 	 - If an image (or an icon font) is set to the `icon` property, it is hidden in portrait mode on phone.
     *
     * 	 - The title is truncated to 80 characters if longer. For portrait mode on phone, the title is truncated
     * 			to 50 characters.
     */
    responsive?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Optimizes the display of the elements of the `ObjectHeader`.
     *
     * Set this property to `true` if your app uses a fullscreen layout (as opposed to a master-detail or other
     * split-screen layout).
     *
     * **Note**: Only applied if the `responsive` property is also set to `true`.
     *
     * If set to `true`, the following situations apply:
     * 	 - On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number
     * 			group
     * 	 - On desktop, 4+ attributes/statuses - 4 columns below the Title/Number
     * 	 - On tablet (portrait mode), always in 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number
     * 	 - On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number  On phone,
     * 			the attributes and statuses are always positioned in 1 column below the Title/Number of the `ObjectHeader`.
     *
     * If set to `false`, the attributes and statuses are being positioned below the Title/Number of the `ObjectHeader`
     * in 2 or 3 columns depending on their number:
     * 	 - On desktop, 1-4 attributes/statuses - 2 columns
     * 	 - On desktop, 5+ attributes/statuses - 3 columns
     * 	 - On tablet, always in 2 columns
     */
    fullScreenOptimized?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Defines the title link target URI. Supports standard hyperlink behavior.
     *
     * **Note:** If an action should be triggered, this property should not be set, but instead an event handler
     * for the `titlePress` event should be registered.
     */
    titleHref?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Determines the `target` attribute for the title link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     */
    titleTarget?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
     * this should not be set, but instead an event handler for the `introPress` event should be registered.
     */
    introHref?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Determines the `target` attribute for the intro link. Options are `_self`, `_top`, `_blank`, `_parent`,
     * `_search`. Alternatively, a frame name can be entered.
     */
    introTarget?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the title text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     */
    titleTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the intro text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     */
    introTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the number and unit text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    numberTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Determines a custom text for the tooltip of the select title arrow. If not set, a default text of the
     * tooltip will be displayed.
     */
    titleSelectorTooltip?: string | PropertyBindingInfo;

    /**
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     */
    titleLevel?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * The list of Object Attributes
     */
    attributes?: ObjectAttribute[] | ObjectAttribute | AggregationBindingInfo;

    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * First status shown on the right side of the attributes above the second status. If it is not set the
     * first attribute will expand to take the entire row.
     */
    firstStatus?: ObjectStatus;

    /**
     * @deprecated (since 1.16.0) - replaced by `statuses` aggregation
     *
     * Second status shown on the right side of the attributes below the first status. If it is not set the
     * second attribute will expand to take the entire row.
     */
    secondStatus?: ObjectStatus;

    /**
     * @SINCE 1.16.0
     *
     * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator
     * controls.
     */
    statuses?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * NOTE: Only applied if you set "responsive=false". Additional object numbers and units are managed in
     * this aggregation. The numbers are hidden on tablet and phone size screens. When only one number is provided,
     * it is rendered with additional separator from the main ObjectHeader number.
     */
    additionalNumbers?: ObjectNumber[] | ObjectNumber | AggregationBindingInfo;

    /**
     * @SINCE 1.21.1
     *
     * This aggregation takes only effect when you set "responsive" to true. It can either be filled with an
     * sap.m.IconTabBar or an sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken
     * care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside
     * the object header, the content will be displayed below the ObjectHeader.
     */
    headerContainer?: ObjectHeaderContainer;

    /**
     * List of markers (icon and/or text) that can be displayed for the `ObjectHeader`, such as favorite and
     * flagged.
     *
     *  **Note:** You should use either this aggregation or the already deprecated properties - `markFlagged`
     * and `markFavorite`. Using both can lead to unexpected results.
     */
    markers?: ObjectMarker[] | ObjectMarker | AggregationBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event is fired when the title is active and the user taps/clicks on it
     */
    titlePress?: Function;

    /**
     * Event is fired when the intro is active and the user taps/clicks on it
     */
    introPress?: Function;

    /**
     * Event is fired when the title icon is active and the user taps/clicks on it
     */
    iconPress?: Function;

    /**
     * @SINCE 1.16.0
     *
     * Event is fired when the object header title selector (down-arrow) is pressed
     */
    titleSelectorPress?: Function;
  }
}

declare module "sap/m/ObjectIdentifier" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, TextDirection } from "sap/ui/core/library";

  import { EmptyIndicatorMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The ObjectIdentifier is a display control that enables the user to easily identify a specific object.
   * The ObjectIdentifier title is the key identifier of the object and additional text can be used to further
   * distinguish it from other objects.
   *
   * **Note:** This control should not be used with {@link sap.m.Label} or in Forms along with {@link sap.m.Label}.
   */
  export default class ObjectIdentifier extends Control {
    /**
     * Constructor for a new ObjectIdentifier.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Identifier}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectIdentifierSettings
    );
    /**
     * Constructor for a new ObjectIdentifier.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Identifier}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectIdentifierSettings
    );

    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.26
     *
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.m.ObjectIdentifier`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectIdentifier` itself.
     *
     * Fires when the title is active and the user taps/clicks on it.
     */
    attachTitlePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectIdentifier` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26
     *
     * Detaches event handler `fnFunction` from the {@link #event:titlePress titlePress} event of this `sap.m.ObjectIdentifier`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTitlePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectIdentifier with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectIdentifier>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.26
     *
     * Fires event {@link #event:titlePress titlePress} to attached listeners.
     */
    fireTitlePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * DOM reference of the object identifier's title.
         */
        domRef?: object;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Gets current value of property {@link #getBadgeAttachments badgeAttachments}.
     *
     * Indicates whether or not the attachments icon is displayed.
     */
    getBadgeAttachments(): boolean;
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Gets current value of property {@link #getBadgeNotes badgeNotes}.
     *
     * Indicates whether or not the notes icon is displayed.
     */
    getBadgeNotes(): boolean;
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Gets current value of property {@link #getBadgePeople badgePeople}.
     *
     * Indicates whether or not the address book icon is displayed.
     */
    getBadgePeople(): boolean;
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * Returns a metadata object for class sap.m.ObjectIdentifier.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the object text.
     */
    getText(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the object title.
     */
    getTitle(): string;
    /**
     * @SINCE 1.26
     *
     * Gets current value of property {@link #getTitleActive titleActive}.
     *
     * Indicates if the ObjectIdentifier's title is clickable.
     *
     * Default value is `false`.
     */
    getTitleActive(): boolean;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Sets a new value for property {@link #getBadgeAttachments badgeAttachments}.
     *
     * Indicates whether or not the attachments icon is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBadgeAttachments(
      /**
       * New value for property `badgeAttachments`
       */
      bBadgeAttachments?: boolean
    ): this;
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Sets a new value for property {@link #getBadgeNotes badgeNotes}.
     *
     * Indicates whether or not the notes icon is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBadgeNotes(
      /**
       * New value for property `badgeNotes`
       */
      bBadgeNotes?: boolean
    ): this;
    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Sets a new value for property {@link #getBadgePeople badgePeople}.
     *
     * Indicates whether or not the address book icon is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBadgePeople(
      /**
       * New value for property `badgePeople`
       */
      bBadgePeople?: boolean
    ): this;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * Sets text. Default value is empty/undefined.
     */
    setText(
      /**
       * New value for property text
       */
      sText: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets the title. Default value is empty/undefined.
     */
    setTitle(
      /**
       * New value for property title
       */
      sTitle: string
    ): this;
    /**
     * Sets property titleActive. Default value is false.
     */
    setTitleActive(
      /**
       * new value for property titleActive
       */
      bValue: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * @SINCE 1.26
     *
     * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.m.ObjectIdentifier`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectIdentifier` itself.
     *
     * Fires when the title is active and the user taps/clicks on it.
     */
    attachTitlePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectIdentifier` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectIdentifierSettings extends $ControlSettings {
    /**
     * Defines the object title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the object text.
     */
    text?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Indicates whether or not the notes icon is displayed.
     */
    badgeNotes?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Indicates whether or not the address book icon is displayed.
     */
    badgePeople?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.24.0) - There is no replacement for the moment.
     *
     * Indicates whether or not the attachments icon is displayed.
     */
    badgeAttachments?: boolean | PropertyBindingInfo;

    /**
     * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26
     *
     * Indicates if the ObjectIdentifier's title is clickable.
     */
    titleActive?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the element's text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;

    /**
     * Association to controls / IDs, which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @SINCE 1.26
     *
     * Fires when the title is active and the user taps/clicks on it.
     */
    titlePress?: Function;
  }
}

declare module "sap/m/ObjectListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ObjectAttribute from "sap/m/ObjectAttribute";

  import ObjectMarker from "sap/m/ObjectMarker";

  import { URI, TextDirection, ValueState } from "sap/ui/core/library";

  import ObjectStatus from "sap/m/ObjectStatus";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * ObjectListItem is a display control that provides summary information about an object as a list item.
   * The ObjectListItem title is the key identifier of the object. Additional text and icons can be used to
   * further distinguish it from other objects. Attributes and statuses can be used to provide additional
   * meaning about the object to the user.
   *
   * **Note:** The control must only be used in the context of a list.
   */
  export default class ObjectListItem extends ListItemBase {
    /**
     * Constructor for a new ObjectListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-list-item/ Object List Item}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectListItemSettings
    );
    /**
     * Constructor for a new ObjectListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-list-item/ Object List Item}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectListItemSettings
    );

    /**
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute
    ): this;
    /**
     * Adds some marker to the aggregation {@link #getMarkers markers}.
     */
    addMarker(
      /**
       * The marker to add; if empty, nothing is inserted
       */
      oMarker: ObjectMarker
    ): this;
    /**
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     */
    destroyAttributes(): this;
    /**
     * Destroys the firstStatus in the aggregation {@link #getFirstStatus firstStatus}.
     */
    destroyFirstStatus(): this;
    /**
     * Destroys all the markers in the aggregation {@link #getMarkers markers}.
     */
    destroyMarkers(): this;
    /**
     * Destroys the secondStatus in the aggregation {@link #getSecondStatus secondStatus}.
     */
    destroySecondStatus(): this;
    /**
     * Creates a new subclass of class sap.m.ObjectListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * Icon displayed when the ObjectListItem is active.
     */
    getActiveIcon(): URI;
    /**
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * List of attributes displayed below the title to the left of the status fields.
     */
    getAttributes(): ObjectAttribute[];
    /**
     * Gets content of aggregation {@link #getFirstStatus firstStatus}.
     *
     * First status text field displayed on the right side of the attributes.
     */
    getFirstStatus(): ObjectStatus;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * ObjectListItem icon displayed to the left of the title.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image (in case this version of image doesn't exist on the server).
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getIntro intro}.
     *
     * Defines the introductory text for the ObjectListItem.
     */
    getIntro(): string;
    /**
     * Gets current value of property {@link #getIntroTextDirection introTextDirection}.
     *
     * Determines the text direction of the item intro. Available options for the intro direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item intro inherits the text direction from its parent.
     *
     * Default value is `Inherit`.
     */
    getIntroTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets content of aggregation {@link #getMarkers markers}.
     *
     * List of markers (icon and/or text) that can be displayed for the `ObjectListItems`, such as favorite
     * and flagged.
     *
     *  **Note:** You should use either this aggregation or the already deprecated properties - `markFlagged`,
     * `markFavorite`, and `markLocked`. Using both can lead to unexpected results.
     */
    getMarkers(): ObjectMarker[];
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Favorite`. You should use either this property or the `markers` aggregation,
     * using both may lead to unpredicted behavior.
     *
     * Gets current value of property {@link #getMarkFavorite markFavorite}.
     *
     * Sets the favorite state for the ObjectListItem.
     */
    getMarkFavorite(): boolean;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Flagged`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     * Gets current value of property {@link #getMarkFlagged markFlagged}.
     *
     * Sets the flagged state for the ObjectListItem.
     */
    getMarkFlagged(): boolean;
    /**
     * @SINCE 1.28
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Locked`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     *
     *
     * Gets current value of property {@link #getMarkLocked markLocked}.
     *
     * Sets the locked state of the ObjectListItem.
     *
     *
     *
     * Default value is `false`.
     */
    getMarkLocked(): boolean;
    /**
     * Returns a metadata object for class sap.m.ObjectListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Defines the ObjectListItem number.
     */
    getNumber(): string;
    /**
     * @SINCE 1.16.0
     *
     * Gets current value of property {@link #getNumberState numberState}.
     *
     * Defines the ObjectListItem number and numberUnit value state.
     *
     * Default value is `None`.
     */
    getNumberState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getNumberTextDirection numberTextDirection}.
     *
     * Determines the text direction of the item number. Available options for the number direction are LTR
     * (left-to-right) and RTL (right-to-left). By default the item number inherits the text direction from
     * its parent.
     *
     * Default value is `Inherit`.
     */
    getNumberTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier of the ObjectListItem.
     */
    getNumberUnit(): string;
    /**
     * Gets content of aggregation {@link #getSecondStatus secondStatus}.
     *
     * Second status text field displayed on the right side of the attributes.
     */
    getSecondStatus(): ObjectStatus;
    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. This property is valid only if you are
     * using the already deprecated properties - `markFlagged`, `markFavorite`, and `markLocked`. If you are
     * using the `markers` aggregation, the visibility of the markers depends on what is set in the aggregation
     * itself.
     *
     * Gets current value of property {@link #getShowMarkers showMarkers}.
     *
     * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.
     */
    getShowMarkers(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the ObjectListItem title.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Determines the text direction of the item title. Available options for the title direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item title inherits the text direction from its parent.
     *
     * Default value is `Inherit`.
     */
    getTitleTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Checks for the provided `sap.m.ObjectAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: ObjectAttribute
    ): int;
    /**
     * Checks for the provided `sap.m.ObjectMarker` in the aggregation {@link #getMarkers markers}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfMarker(
      /**
       * The marker whose index is looked for
       */
      oMarker: ObjectMarker
    ): int;
    /**
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a marker into the aggregation {@link #getMarkers markers}.
     */
    insertMarker(
      /**
       * The marker to insert; if empty, nothing is inserted
       */
      oMarker: ObjectMarker,
      /**
       * The `0`-based index the marker should be inserted at; for a negative value of `iIndex`, the marker is
       * inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAttributes(): ObjectAttribute[];
    /**
     * Removes all the controls from the aggregation {@link #getMarkers markers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllMarkers(): ObjectMarker[];
    /**
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | ObjectAttribute
    ): ObjectAttribute;
    /**
     * Removes a marker from the aggregation {@link #getMarkers markers}.
     */
    removeMarker(
      /**
       * The marker to remove or its index or id
       */
      vMarker: int | string | ObjectMarker
    ): ObjectMarker;
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * Icon displayed when the ObjectListItem is active.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * Sets the aggregated {@link #getFirstStatus firstStatus}.
     */
    setFirstStatus(
      /**
       * The firstStatus to set
       */
      oFirstStatus: ObjectStatus
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * ObjectListItem icon displayed to the left of the title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image (in case this version of image doesn't exist on the server).
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIntro intro}.
     *
     * Defines the introductory text for the ObjectListItem.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIntro(
      /**
       * New value for property `intro`
       */
      sIntro?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIntroTextDirection introTextDirection}.
     *
     * Determines the text direction of the item intro. Available options for the intro direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item intro inherits the text direction from its parent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setIntroTextDirection(
      /**
       * New value for property `introTextDirection`
       */
      sIntroTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets the visibility value of the Favorite marker.
     */
    setMarkFavorite(
      /**
       * the new value
       */
      bMarked: boolean
    ): this;
    /**
     * Sets the visibility value of the Flagged marker.
     */
    setMarkFlagged(
      /**
       * the new value
       */
      bMarked: boolean
    ): this;
    /**
     * Sets the visibility value of the Favorite marker.
     */
    setMarkLocked(
      /**
       * the new value
       */
      bMarked: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Defines the ObjectListItem number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumber(
      /**
       * New value for property `number`
       */
      sNumber?: string
    ): this;
    /**
     * @SINCE 1.16.0
     *
     * Sets a new value for property {@link #getNumberState numberState}.
     *
     * Defines the ObjectListItem number and numberUnit value state.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setNumberState(
      /**
       * New value for property `numberState`
       */
      sNumberState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getNumberTextDirection numberTextDirection}.
     *
     * Determines the text direction of the item number. Available options for the number direction are LTR
     * (left-to-right) and RTL (right-to-left). By default the item number inherits the text direction from
     * its parent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setNumberTextDirection(
      /**
       * New value for property `numberTextDirection`
       */
      sNumberTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier of the ObjectListItem.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumberUnit(
      /**
       * New value for property `numberUnit`
       */
      sNumberUnit?: string
    ): this;
    /**
     * Sets the aggregated {@link #getSecondStatus secondStatus}.
     */
    setSecondStatus(
      /**
       * The secondStatus to set
       */
      oSecondStatus: ObjectStatus
    ): this;
    /**
     * Sets the visibility value of the Flagged and Favorite markers.
     */
    setShowMarkers(
      /**
       * the new value
       */
      bMarked: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the ObjectListItem title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Determines the text direction of the item title. Available options for the title direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item title inherits the text direction from its parent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTitleTextDirection(
      /**
       * New value for property `titleTextDirection`
       */
      sTitleTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
  }

  export interface $ObjectListItemSettings extends $ListItemBaseSettings {
    /**
     * Defines the ObjectListItem title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the ObjectListItem number.
     */
    number?: string | PropertyBindingInfo;

    /**
     * Defines the number units qualifier of the ObjectListItem.
     */
    numberUnit?: string | PropertyBindingInfo;

    /**
     * Defines the introductory text for the ObjectListItem.
     */
    intro?: string | PropertyBindingInfo;

    /**
     * ObjectListItem icon displayed to the left of the title.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Icon displayed when the ObjectListItem is active.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image (in case this version of image doesn't exist on the server).
     *
     * If bandwidth is key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Favorite`. You should use either this property or the `markers` aggregation,
     * using both may lead to unpredicted behavior.
     *
     * Sets the favorite state for the ObjectListItem.
     */
    markFavorite?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Flagged`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     * Sets the flagged state for the ObjectListItem.
     */
    markFlagged?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. This property is valid only if you are
     * using the already deprecated properties - `markFlagged`, `markFavorite`, and `markLocked`. If you are
     * using the `markers` aggregation, the visibility of the markers depends on what is set in the aggregation
     * itself.
     *
     * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.
     */
    showMarkers?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.0
     *
     * Defines the ObjectListItem number and numberUnit value state.
     */
    numberState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Determines the text direction of the item title. Available options for the title direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item title inherits the text direction from its parent.
     */
    titleTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Determines the text direction of the item intro. Available options for the intro direction are LTR (left-to-right)
     * and RTL (right-to-left). By default the item intro inherits the text direction from its parent.
     */
    introTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Determines the text direction of the item number. Available options for the number direction are LTR
     * (left-to-right) and RTL (right-to-left). By default the item number inherits the text direction from
     * its parent.
     */
    numberTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     * @deprecated (since 1.42.0) - replaced by `markers` aggregation. Add {@link sap.m.ObjectMarker} with type
     * `sap.m.ObjectMarkerType.Locked`. You should use either this property or the `markers` aggregation, using
     * both may lead to unpredicted behavior.
     *
     *
     *
     * Sets the locked state of the ObjectListItem.
     */
    markLocked?: boolean | PropertyBindingInfo;

    /**
     * List of attributes displayed below the title to the left of the status fields.
     */
    attributes?: ObjectAttribute[] | ObjectAttribute | AggregationBindingInfo;

    /**
     * First status text field displayed on the right side of the attributes.
     */
    firstStatus?: ObjectStatus;

    /**
     * Second status text field displayed on the right side of the attributes.
     */
    secondStatus?: ObjectStatus;

    /**
     * List of markers (icon and/or text) that can be displayed for the `ObjectListItems`, such as favorite
     * and flagged.
     *
     *  **Note:** You should use either this aggregation or the already deprecated properties - `markFlagged`,
     * `markFavorite`, and `markLocked`. Using both can lead to unexpected results.
     */
    markers?: ObjectMarker[] | ObjectMarker | AggregationBindingInfo;
  }
}

declare module "sap/m/ObjectMarker" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ObjectMarkerType, ObjectMarkerVisibility } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38
   *
   * The `sap.m.ObjectMarker` control represents one of the following predefined types:
   * 	`Flagged` `Favorite` `Draft` `Locked` `LockedBy` `Unsaved` `UnsavedBy`
   * **Note**: Use the `LockedBy/UnsavedBy` type along with the `additionalInfo` property to display the name
   * of the user who locked/changed the object. If `additionalInfo` property is not set when using `LockedBy/UnsavedBy`
   * types, the string "Locked by another user"/"Unsaved changes by another user" will be displayed. If you
   * don't want to display name of the user, simply use the `Locked/Unsaved` types.
   */
  export default class ObjectMarker extends Control {
    /**
     * Constructor for a new ObjectMarker.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Marker}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectMarkerSettings
    );
    /**
     * Constructor for a new ObjectMarker.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Marker}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectMarkerSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectMarker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectMarker` itself.
     *
     * Event is fired when the `ObjectMarker` is interactive and the user taps/clicks on it.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectMarker` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ObjectMarker`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectMarker with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectMarker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAdditionalInfo additionalInfo}.
     *
     * Sets additional information to the displayed `type`.
     *
     * **Note:** If no type is set, the additional information will not be displayed.
     *
     * Default value is `empty string`.
     */
    getAdditionalInfo(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Returns a metadata object for class sap.m.ObjectMarker.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Sets one of the predefined types.
     *
     * **Note**: If the `visibility` property is not specified explicitly, every `type` comes with predefined
     * one as follows:
     * 	 - For `Flagged` and `Favorite` the icon is visible and the text is not displayed
     * 	 - For `Draft` the text is visible and the icon is not displayed
     * 	 - For `Locked`, `LockedBy`, `Unsaved` and `UnsavedBy` - on screens larger than 600px both icon and
     * 			text are visible, otherwise only the icon
     */
    getType(): ObjectMarkerType | keyof typeof ObjectMarkerType;
    /**
     * Gets current value of property {@link #getVisibility visibility}.
     *
     * Sets one of the visibility states. Visibility states are as follows:
     * 	 - `IconOnly` - displays only icon, regardless of the screen size
     * 	 - `TextOnly` - displays only text, regardless of the screen size
     * 	 - `IconAndText` - displays both icon and text, regardless of the screen size
     */
    getVisibility():
      | ObjectMarkerVisibility
      | keyof typeof ObjectMarkerVisibility;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getAdditionalInfo additionalInfo}.
     *
     * Sets additional information to the displayed `type`.
     *
     * **Note:** If no type is set, the additional information will not be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAdditionalInfo(
      /**
       * New value for property `additionalInfo`
       */
      sAdditionalInfo?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Sets one of the predefined types.
     *
     * **Note**: If the `visibility` property is not specified explicitly, every `type` comes with predefined
     * one as follows:
     * 	 - For `Flagged` and `Favorite` the icon is visible and the text is not displayed
     * 	 - For `Draft` the text is visible and the icon is not displayed
     * 	 - For `Locked`, `LockedBy`, `Unsaved` and `UnsavedBy` - on screens larger than 600px both icon and
     * 			text are visible, otherwise only the icon
     *
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType: ObjectMarkerType | keyof typeof ObjectMarkerType
    ): this;
    /**
     * Sets a new value for property {@link #getVisibility visibility}.
     *
     * Sets one of the visibility states. Visibility states are as follows:
     * 	 - `IconOnly` - displays only icon, regardless of the screen size
     * 	 - `TextOnly` - displays only text, regardless of the screen size
     * 	 - `IconAndText` - displays both icon and text, regardless of the screen size
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setVisibility(
      /**
       * New value for property `visibility`
       */
      sVisibility: ObjectMarkerVisibility | keyof typeof ObjectMarkerVisibility
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectMarker`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectMarker` itself.
     *
     * Event is fired when the `ObjectMarker` is interactive and the user taps/clicks on it.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectMarker` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectMarkerSettings extends $ControlSettings {
    /**
     * Sets one of the predefined types.
     *
     * **Note**: If the `visibility` property is not specified explicitly, every `type` comes with predefined
     * one as follows:
     * 	 - For `Flagged` and `Favorite` the icon is visible and the text is not displayed
     * 	 - For `Draft` the text is visible and the icon is not displayed
     * 	 - For `Locked`, `LockedBy`, `Unsaved` and `UnsavedBy` - on screens larger than 600px both icon and
     * 			text are visible, otherwise only the icon
     */
    type?:
      | (ObjectMarkerType | keyof typeof ObjectMarkerType)
      | PropertyBindingInfo;

    /**
     * Sets one of the visibility states. Visibility states are as follows:
     * 	 - `IconOnly` - displays only icon, regardless of the screen size
     * 	 - `TextOnly` - displays only text, regardless of the screen size
     * 	 - `IconAndText` - displays both icon and text, regardless of the screen size
     */
    visibility?:
      | (ObjectMarkerVisibility | keyof typeof ObjectMarkerVisibility)
      | PropertyBindingInfo;

    /**
     * Sets additional information to the displayed `type`.
     *
     * **Note:** If no type is set, the additional information will not be displayed.
     */
    additionalInfo?: string | PropertyBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event is fired when the `ObjectMarker` is interactive and the user taps/clicks on it.
     */
    press?: Function;
  }
}

declare module "sap/m/ObjectNumber" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    ValueState,
    TextAlign,
    TextDirection,
  } from "sap/ui/core/library";

  import { EmptyIndicatorMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The ObjectNumber control displays number and number unit properties for an object. The number can be
   * displayed using semantic colors to provide additional meaning about the object to the user.
   *
   * With 1.63, large design of the control is supported by setting `sapMObjectNumberLarge` CSS class to the
   * `ObjectNumber`.
   *
   * **Note:** To fulfill the design guidelines when you are using `sapMObjectNumberLarge` CSS class set the
   * `emphasized` property to `false`.
   */
  export default class ObjectNumber extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new ObjectNumber.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Number}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectNumberSettings
    );
    /**
     * Constructor for a new ObjectNumber.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Number}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectNumberSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.86
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectNumber`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectNumber` itself.
     *
     * Fires when the user clicks/taps on active `Object Number`.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectNumber` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.86
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ObjectNumber`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectNumber with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectNumber>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.86
     *
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * @SINCE 1.86
     *
     * Gets current value of property {@link #getActive active}.
     *
     * Indicates if the `ObjectNumber` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to set also the `number` or `unit` property.
     *
     * Default value is `false`.
     */
    getActive(): boolean;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getEmphasized emphasized}.
     *
     * Indicates if the object number should appear emphasized.
     *
     * Default value is `true`.
     */
    getEmphasized(): boolean;
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no number.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * @SINCE 1.86
     *
     * Gets current value of property {@link #getInverted inverted}.
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     *
     * Default value is `false`.
     */
    getInverted(): boolean;
    /**
     * Returns a metadata object for class sap.m.ObjectNumber.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Defines the number field.
     */
    getNumber(): string;
    /**
     * @deprecated (since 1.16.1) - replaced by `unit` property
     *
     * Gets current value of property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier.
     */
    getNumberUnit(): string;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Determines the object number's value state. Setting this state will cause the number to be rendered in
     * state-specific colors.
     *
     * Default value is `None`.
     */
    getState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the number and unit.
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left).
     * By default, the control inherits the text direction from its parent control.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.16.1
     *
     * Gets current value of property {@link #getUnit unit}.
     *
     * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
     */
    getUnit(): string;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.86
     *
     * Sets a new value for property {@link #getActive active}.
     *
     * Indicates if the `ObjectNumber` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to set also the `number` or `unit` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEmphasized emphasized}.
     *
     * Indicates if the object number should appear emphasized.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEmphasized(
      /**
       * New value for property `emphasized`
       */
      bEmphasized?: boolean
    ): this;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * @SINCE 1.86
     *
     * Sets a new value for property {@link #getInverted inverted}.
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInverted(
      /**
       * New value for property `inverted`
       */
      bInverted?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Defines the number field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumber(
      /**
       * New value for property `number`
       */
      sNumber?: string
    ): this;
    /**
     * @deprecated (since 1.16.1) - replaced by `unit` property
     *
     * Sets a new value for property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumberUnit(
      /**
       * New value for property `numberUnit`
       */
      sNumberUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Determines the object number's value state. Setting this state will cause the number to be rendered in
     * state-specific colors.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the number and unit.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left).
     * By default, the control inherits the text direction from its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.16.1
     *
     * Sets a new value for property {@link #getUnit unit}.
     *
     * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
    /**
     * @SINCE 1.86
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectNumber`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectNumber` itself.
     *
     * Fires when the user clicks/taps on active `Object Number`.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectNumber` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectNumberSettings extends $ControlSettings {
    /**
     * Defines the number field.
     */
    number?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.16.1) - replaced by `unit` property
     *
     * Defines the number units qualifier.
     */
    numberUnit?: string | PropertyBindingInfo;

    /**
     * Indicates if the object number should appear emphasized.
     */
    emphasized?: boolean | PropertyBindingInfo;

    /**
     * Determines the object number's value state. Setting this state will cause the number to be rendered in
     * state-specific colors.
     */
    state?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.16.1
     *
     * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
     */
    unit?: string | PropertyBindingInfo;

    /**
     * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left).
     * By default, the control inherits the text direction from its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Sets the horizontal alignment of the number and unit.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.86
     *
     * Indicates if the `ObjectNumber` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to set also the `number` or `unit` property.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.86
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     */
    inverted?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Specifies if an empty indicator should be displayed when there is no number.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * @SINCE 1.86
     *
     * Fires when the user clicks/taps on active `Object Number`.
     */
    press?: Function;
  }
}

declare module "sap/m/ObjectStatus" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, URI, TextDirection } from "sap/ui/core/library";

  import { EmptyIndicatorMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Status information that can be either text with a value state, or an icon.
   *
   * With 1.63, large design of the control is supported by setting `sapMObjectStatusLarge` CSS class to the
   * `ObjectStatus`.
   */
  export default class ObjectStatus extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new ObjectStatus.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Status}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectStatusSettings
    );
    /**
     * Constructor for a new ObjectStatus.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/object-display-elements/#-object-status Object
     * Status}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ObjectStatusSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectStatus`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectStatus` itself.
     *
     * Fires when the user clicks/taps on active text.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectStatus` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.54
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ObjectStatus`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ObjectStatus with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ObjectStatus>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.54
     *
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getActive active}.
     *
     * Indicates if the `ObjectStatus` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to also set the `text` or `icon` property.
     *
     * Default value is `false`.
     */
    getActive(): boolean;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Icon URI. This may be either an icon font or image path.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * @SINCE 1.66
     *
     * Gets current value of property {@link #getInverted inverted}.
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     *
     * Default value is `false`.
     */
    getInverted(): boolean;
    /**
     * Returns a metadata object for class sap.m.ObjectStatus.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Defines the text value state. The allowed values are from the enum type `sap.ui.core.ValueState`. Since
     * version 1.66 the `state` property also accepts values from enum type `sap.ui.core.IndicationColor`.
     *
     * Default value is `ValueState.None`.
     */
    getState(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the ObjectStatus text.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Determines the direction of the text, not including the title. Available options for the text direction
     * are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from
     * its parent control.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the ObjectStatus title.
     */
    getTitle(): string;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getActive active}.
     *
     * Indicates if the `ObjectStatus` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to also set the `text` or `icon` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Icon URI. This may be either an icon font or image path.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * @SINCE 1.66
     *
     * Sets a new value for property {@link #getInverted inverted}.
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInverted(
      /**
       * New value for property `inverted`
       */
      bInverted?: boolean
    ): this;
    /**
     * Sets value for the `state` property. The default value is `ValueState.None`.
     */
    setState(
      /**
       * New value for property state. It should be valid value of enumeration `sap.ui.core.ValueState` or `sap.ui.core.IndicationColor`
       */
      sValue: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the ObjectStatus text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Determines the direction of the text, not including the title. Available options for the text direction
     * are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from
     * its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the ObjectStatus title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ObjectStatus`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ObjectStatus` itself.
     *
     * Fires when the user clicks/taps on active text.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ObjectStatus` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ObjectStatusSettings extends $ControlSettings {
    /**
     * Defines the ObjectStatus title.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the ObjectStatus text.
     */
    text?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Indicates if the `ObjectStatus` text and icon can be clicked/tapped by the user.
     *
     * **Note:** If you set this property to `true`, you have to also set the `text` or `icon` property.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * Defines the text value state. The allowed values are from the enum type `sap.ui.core.ValueState`. Since
     * version 1.66 the `state` property also accepts values from enum type `sap.ui.core.IndicationColor`.
     */
    state?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.66
     *
     * Determines whether the background color reflects the set `state` instead of the control's text.
     */
    inverted?: boolean | PropertyBindingInfo;

    /**
     * Icon URI. This may be either an icon font or image path.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Determines the direction of the text, not including the title. Available options for the text direction
     * are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from
     * its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;

    /**
     * Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * @SINCE 1.54
     *
     * Fires when the user clicks/taps on active text.
     */
    press?: Function;
  }
}

declare module "sap/m/OverflowToolbar" {
  import { default as Toolbar, $ToolbarSettings } from "sap/m/Toolbar";

  import { Toolbar as Toolbar1 } from "sap/ui/core/library";

  import { IBar } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28
   *
   * A container control based on {@link sap.m.Toolbar}, that provides overflow when its content does not
   * fit in the visible area.
   *
   * Overview:
   *
   * The content of the `OverflowToolbar` moves into the overflow area from right to left when the available
   * space is not enough in the visible area of the container. It can be accessed by the user through the
   * overflow button that opens it in a popover.
   *
   * **Note:** It is recommended that you use `OverflowToolbar` over {@link sap.m.Toolbar}, unless you want
   * to avoid overflow in favor of shrinking.
   *
   * Usage:
   *
   * Different behavior and priorities can be set for each control inside the `OverflowToolbar`, such as certain
   * controls to appear only in the overflow area or to never move there. For more information, see {@link
   * sap.m.OverflowToolbarLayoutData} and {@link sap.m.OverflowToolbarPriority}.
   *
   * Overflow Behavior: By default, only the following controls can move to the overflow area:
   *
   *
   * 	 - {@link sap.m.Button}
   * 	 - {@link sap.m.CheckBox}
   * 	 - {@link sap.m.ComboBox}
   * 	 - {@link sap.m.DatePicker}
   * 	 - {@link sap.m.DateTimeInput}
   * 	 - {@link sap.m.DateTimePicker}
   * 	 - {@link sap.m.GenericTag}
   * 	 - {@link sap.m.Input}
   * 	 - {@link sap.m.Label}
   * 	 - {@link sap.m.MenuButton}
   * 	 - {@link sap.m.OverflowToolbarButton}
   * 	 - {@link sap.m.OverflowToolbarToggleButton}
   * 	 - {@link sap.m.SearchField}
   * 	 - {@link sap.m.SegmentedButton}
   * 	 - {@link sap.m.Select}
   * 	 - {@link sap.m.TimePicker}
   * 	 - {@link sap.m.ToggleButton}
   * 	 - {@link sap.m.ToolbarSeparator}
   * 	 - {@link sap.ui.comp.smartfield.SmartField}
   * 	 - {@link sap.ui.comp.smartfield.SmartLabel}
   *
   * Additionally, any control that implements the {@link sap.m.IOverflowToolbarContent} interface may define
   * its behavior (most importantly overflow behavior) when placed inside `OverflowToolbar`.
   *
   * **Note:** The `OverflowToolbar` is an adaptive container that checks the available width and hides the
   * part of its content that doesn't fit. It is intended that simple controls, such as {@link sap.m.Button}
   * and {@link sap.m.Label} are used as content. Embedding other adaptive container controls, such as {@link
   * sap.m.Breadcrumbs}, results in competition for the available space - both controls calculate the available
   * space based on the other one's size and both change their width at the same time, leading to incorrectly
   * distributed space.
   *
   * Responsive behavior:
   *
   * The height of the toolbar changes on desktop, tablet, and smartphones.
   */
  export default class OverflowToolbar
    extends Toolbar
    implements Toolbar1, IBar {
    __implements__sap_ui_core_Toolbar: boolean;
    __implements__sap_m_IBar: boolean;
    /**
     * Constructor for a new `OverflowToolbar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/toolbar-overview/#overflow-generic Overflow
     * Toolbar}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarSettings
    );
    /**
     * Constructor for a new `OverflowToolbar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/toolbar-overview/#overflow-generic Overflow
     * Toolbar}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarSettings
    );

    /**
     * Moves each control in the suitable collection - Popover only, movable controls and toolbar only
     */
    _moveControlInSuitableCollection(
      oControl: undefined,

      sPriority: undefined
    ): void;
    /**
     * Removes Control from collections
     */
    _removeContentFromControlsCollections(oControl: undefined): void;
    /**
     * @SINCE 1.40
     *
     * Closes the overflow area. Useful to manually close the overflow after having suppressed automatic closing
     * with "closeOverflowOnInteraction=false".
     */
    closeOverflow(): void;
    /**
     * Creates a new subclass of class sap.m.OverflowToolbar with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Toolbar.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OverflowToolbar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.67
     *
     * Gets current value of property {@link #getAsyncMode asyncMode}.
     *
     * Defines whether the `OverflowToolbar` works in async mode.
     *
     * **Note:** When this property is set to `true`, the `OverflowToolbar` makes its layout recalculations
     * asynchronously. This way it is not blocking the thread immediately after re-rendering or resizing. However,
     * it may lead to flickering, when there is a change in the width of the content of the `OverflowToolbar`.
     *
     * Default value is `false`.
     */
    getAsyncMode(): boolean;
    /**
     * Returns a metadata object for class sap.m.OverflowToolbar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.67
     *
     * Sets the `asyncMode` property.
     */
    setAsyncMode(bValue: boolean): this;
  }

  export interface $OverflowToolbarSettings extends $ToolbarSettings {
    /**
     * @SINCE 1.67
     *
     * Defines whether the `OverflowToolbar` works in async mode.
     *
     * **Note:** When this property is set to `true`, the `OverflowToolbar` makes its layout recalculations
     * asynchronously. This way it is not blocking the thread immediately after re-rendering or resizing. However,
     * it may lead to flickering, when there is a change in the width of the content of the `OverflowToolbar`.
     */
    asyncMode?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/OverflowToolbarButton" {
  import { default as Button, $ButtonSettings } from "sap/m/Button";

  import { IShellBar } from "sap/f/library";

  import { IOverflowToolbarContent } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.28
   *
   * Represents an {@link sap.m.Button} that shows its text only when in the overflow area of an {@link sap.m.OverflowToolbar}.
   *
   * **Note:** This control is intended to be used exclusively in the context of the `OverflowToolbar`, whenever
   * it is required to have buttons that show only an icon in the toolbar, but icon and text in the overflow
   * menu.
   */
  export default class OverflowToolbarButton
    extends Button
    implements IShellBar, IOverflowToolbarContent {
    __implements__sap_f_IShellBar: boolean;
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new `OverflowToolbarButton`.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarButtonSettings
    );
    /**
     * Constructor for a new `OverflowToolbarButton`.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarButtonSettings
    );

    /**
     * Creates a new subclass of class sap.m.OverflowToolbarButton with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Button.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OverflowToolbarButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.OverflowToolbarButton.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $OverflowToolbarButtonSettings extends $ButtonSettings {}
}

declare module "sap/m/OverflowToolbarLayoutData" {
  import {
    default as ToolbarLayoutData,
    $ToolbarLayoutDataSettings,
  } from "sap/m/ToolbarLayoutData";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { OverflowToolbarPriority } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28
   *
   * Holds layout data for the {@link sap.m.OverflowToolbar} items.
   */
  export default class OverflowToolbarLayoutData extends ToolbarLayoutData {
    /**
     * Constructor for a new `OverflowToolbarLayoutData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarLayoutDataSettings
    );
    /**
     * Constructor for a new `OverflowToolbarLayoutData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarLayoutDataSettings
    );

    /**
     * Creates a new subclass of class sap.m.OverflowToolbarLayoutData with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ToolbarLayoutData.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OverflowToolbarLayoutData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getCloseOverflowOnInteraction closeOverflowOnInteraction}.
     *
     * Defines whether the overflow area is automatically closed when interacting with a control in it
     *
     * Default value is `true`.
     */
    getCloseOverflowOnInteraction(): boolean;
    /**
     * @SINCE 1.32
     *
     * Gets current value of property {@link #getGroup group}.
     *
     * Defines OverflowToolbar items group number. Default value is 0, which means that the control does not
     * belong to any group. Elements that belong to a group overflow together. The overall priority of the group
     * is defined by the element with highest priority. Elements that belong to a group are not allowed to have
     * AlwaysOverflow or NeverOverflow priority.
     *
     * Default value is `0`.
     */
    getGroup(): int;
    /**
     * Returns a metadata object for class sap.m.OverflowToolbarLayoutData.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.32)
     *
     * Gets current value of property {@link #getMoveToOverflow moveToOverflow}.
     *
     * The OverflowToolbar item can or cannot move to the overflow area
     *
     * Default value is `true`.
     */
    getMoveToOverflow(): boolean;
    /**
     * @SINCE 1.32
     *
     * Gets current value of property {@link #getPriority priority}.
     *
     * Defines OverflowToolbar items priority. Available priorities are NeverOverflow, High, Low, Disappear
     * and AlwaysOverflow.
     *
     * Default value is `High`.
     */
    getPriority():
      | OverflowToolbarPriority
      | keyof typeof OverflowToolbarPriority;
    /**
     * @deprecated (since 1.32)
     *
     * Gets current value of property {@link #getStayInOverflow stayInOverflow}.
     *
     * The OverflowToolbar item can or cannot stay in the overflow area
     *
     * Default value is `false`.
     */
    getStayInOverflow(): boolean;
    /**
     * @SINCE 1.40
     *
     * Sets a new value for property {@link #getCloseOverflowOnInteraction closeOverflowOnInteraction}.
     *
     * Defines whether the overflow area is automatically closed when interacting with a control in it
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setCloseOverflowOnInteraction(
      /**
       * New value for property `closeOverflowOnInteraction`
       */
      bCloseOverflowOnInteraction?: boolean
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets a new value for property {@link #getGroup group}.
     *
     * Defines OverflowToolbar items group number. Default value is 0, which means that the control does not
     * belong to any group. Elements that belong to a group overflow together. The overall priority of the group
     * is defined by the element with highest priority. Elements that belong to a group are not allowed to have
     * AlwaysOverflow or NeverOverflow priority.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setGroup(
      /**
       * New value for property `group`
       */
      iGroup?: int
    ): this;
    /**
     * @deprecated (since 1.32)
     *
     * Sets a new value for property {@link #getMoveToOverflow moveToOverflow}.
     *
     * The OverflowToolbar item can or cannot move to the overflow area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setMoveToOverflow(
      /**
       * New value for property `moveToOverflow`
       */
      bMoveToOverflow?: boolean
    ): this;
    /**
     * @deprecated (since 1.32)
     *
     * Sets a new value for property {@link #getStayInOverflow stayInOverflow}.
     *
     * The OverflowToolbar item can or cannot stay in the overflow area
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setStayInOverflow(
      /**
       * New value for property `stayInOverflow`
       */
      bStayInOverflow?: boolean
    ): this;
  }

  export interface $OverflowToolbarLayoutDataSettings
    extends $ToolbarLayoutDataSettings {
    /**
     * @deprecated (since 1.32)
     *
     * The OverflowToolbar item can or cannot move to the overflow area
     */
    moveToOverflow?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.32)
     *
     * The OverflowToolbar item can or cannot stay in the overflow area
     */
    stayInOverflow?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.32
     *
     * Defines OverflowToolbar items priority. Available priorities are NeverOverflow, High, Low, Disappear
     * and AlwaysOverflow.
     */
    priority?:
      | (OverflowToolbarPriority | keyof typeof OverflowToolbarPriority)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.32
     *
     * Defines OverflowToolbar items group number. Default value is 0, which means that the control does not
     * belong to any group. Elements that belong to a group overflow together. The overall priority of the group
     * is defined by the element with highest priority. Elements that belong to a group are not allowed to have
     * AlwaysOverflow or NeverOverflow priority.
     */
    group?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Defines whether the overflow area is automatically closed when interacting with a control in it
     */
    closeOverflowOnInteraction?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/OverflowToolbarToggleButton" {
  import {
    default as ToggleButton,
    $ToggleButtonSettings,
  } from "sap/m/ToggleButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.52
   *
   * Represents an {@link sap.m.ToggleButton} that shows its text only when in the overflow area of an {@link
   * sap.m.OverflowToolbar}.
   *
   * **Note:** This control is intended to be used exclusively in the context of the `OverflowToolbar`, whenever
   * it is required to have buttons that show only an icon in the toolbar, but icon and text in the overflow
   * menu.
   */
  export default class OverflowToolbarToggleButton extends ToggleButton {
    /**
     * Constructor for a new `OverflowToolbarToggleButton`.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarToggleButtonSettings
    );
    /**
     * Constructor for a new `OverflowToolbarToggleButton`.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $OverflowToolbarToggleButtonSettings
    );

    /**
     * Creates a new subclass of class sap.m.OverflowToolbarToggleButton with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ToggleButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OverflowToolbarToggleButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.OverflowToolbarToggleButton.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $OverflowToolbarToggleButtonSettings
    extends $ToggleButtonSettings {}
}

declare module "sap/m/P13nColumnsItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.26.0
   *
   * Type for `columnsItems` aggregation in `P13nColumnsPanel` control.
   */
  export default class P13nColumnsItem extends Item {
    /**
     * Constructor for a new P13nColumnsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nColumnsItemSettings
    );
    /**
     * Constructor for a new P13nColumnsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nColumnsItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nColumnsItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nColumnsItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * This property contains the unique table column key
     */
    getColumnKey(): string;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getIndex index}.
     *
     * This property contains the index of a table column
     */
    getIndex(): int;
    /**
     * Returns a metadata object for class sap.m.P13nColumnsItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getTotal total}.
     *
     * This property contains the total flag of a table column.
     */
    getTotal(): boolean;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getVisible visible}.
     *
     * This property decides whether a `P13nColumnsItem` is visible
     */
    getVisible(): boolean;
    /**
     * @SINCE 1.26.0
     *
     * Gets current value of property {@link #getWidth width}.
     *
     * This property contains the with of a table column.
     */
    getWidth(): string;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * This property contains the unique table column key
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey: string
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getIndex index}.
     *
     * This property contains the index of a table column
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIndex(
      /**
       * New value for property `index`
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getTotal total}.
     *
     * This property contains the total flag of a table column.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTotal(
      /**
       * New value for property `total`
       */
      bTotal: boolean
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getVisible visible}.
     *
     * This property decides whether a `P13nColumnsItem` is visible
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible: boolean
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Sets a new value for property {@link #getWidth width}.
     *
     * This property contains the with of a table column.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: string
    ): this;
  }

  export interface $P13nColumnsItemSettings extends $ItemSettings {
    /**
     * @SINCE 1.26.0
     *
     * This property contains the unique table column key
     */
    columnKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * This property contains the index of a table column
     */
    index?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * This property decides whether a `P13nColumnsItem` is visible
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * This property contains the with of a table column.
     */
    width?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * This property contains the total flag of a table column.
     */
    total?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nColumnsPanel" {
  import { default as P13nPanel, $P13nPanelSettings } from "sap/m/P13nPanel";

  import P13nColumnsItem from "sap/m/P13nColumnsItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The `P13nColumnsPanel` control is used to define column-specific settings for table personalization.
   */
  export default class P13nColumnsPanel extends P13nPanel {
    /**
     * Constructor for a new P13nColumnsPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nColumnsPanelSettings
    );
    /**
     * Constructor for a new P13nColumnsPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nColumnsPanelSettings
    );

    /**
     * @SINCE 1.26.0
     *
     * Adds some columnsItem to the aggregation {@link #getColumnsItems columnsItems}.
     */
    addColumnsItem(
      /**
       * The columnsItem to add; if empty, nothing is inserted
       */
      oColumnsItem: P13nColumnsItem
    ): this;
    /**
     * @SINCE 1.26.0
     * @deprecated (since 1.50) - replaced by extended event {@link sap.m.P13nColumnsPanel#event:changeColumnsItems}
     *
     * Attaches event handler `fnFunction` to the {@link #event:addColumnsItem addColumnsItem} event of this
     * `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised when a `columnsItem` is added.
     */
    attachAddColumnsItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeColumnsItems changeColumnsItems} event
     * of this `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised if `columnsItems` is changed or new one needs to be created in the model.
     */
    attachChangeColumnsItems(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - the event `setData` is obsolete.
     *
     * Attaches event handler `fnFunction` to the {@link #event:setData setData} event of this `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised if `setData` is called in model. The event serves the purpose of minimizing such calls since
     * they can take up a lot of performance.
     */
    attachSetData(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Binds aggregation {@link #getColumnsItems columnsItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindColumnsItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Destroys all the columnsItems in the aggregation {@link #getColumnsItems columnsItems}.
     */
    destroyColumnsItems(): this;
    /**
     * @SINCE 1.26.0
     * @deprecated (since 1.50) - replaced by extended event {@link sap.m.P13nColumnsPanel#event:changeColumnsItems}
     *
     * Detaches event handler `fnFunction` from the {@link #event:addColumnsItem addColumnsItem} event of this
     * `sap.m.P13nColumnsPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAddColumnsItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     *
     * Detaches event handler `fnFunction` from the {@link #event:changeColumnsItems changeColumnsItems} event
     * of this `sap.m.P13nColumnsPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChangeColumnsItems(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - the event `setData` is obsolete.
     *
     * Detaches event handler `fnFunction` from the {@link #event:setData setData} event of this `sap.m.P13nColumnsPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSetData(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nColumnsPanel with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nColumnsPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.26.0
     * @deprecated (since 1.50) - replaced by extended event {@link sap.m.P13nColumnsPanel#event:changeColumnsItems}
     *
     * Fires event {@link #event:addColumnsItem addColumnsItem} to attached listeners.
     */
    fireAddColumnsItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * `columnsItem` that needs to be added in the model.
         */
        newItem?: P13nColumnsItem;
      }
    ): this;
    /**
     * @SINCE 1.26.7
     *
     * Fires event {@link #event:changeColumnsItems changeColumnsItems} to attached listeners.
     */
    fireChangeColumnsItems(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Contains `columnsItems` that needs to be created in the model. Deprecated as of version 1.50, replaced
         * by new parameter `items`.
         */
        newItems?: P13nColumnsItem[];
        /**
         * Contains `columnsItems` that needs to be changed in the model. Deprecated as of version 1.50, replaced
         * by new parameter `items`.
         */
        existingItems?: P13nColumnsItem[];
        /**
         * Array contains an object for each item in `items` aggregation enriched with index and visibility information.
         * The item order reflects the current order of columns in the panel.
         */
        items?: object[];
      }
    ): this;
    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - the event `setData` is obsolete.
     *
     * Fires event {@link #event:setData setData} to attached listeners.
     */
    fireSetData(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Gets content of aggregation {@link #getColumnsItems columnsItems}.
     *
     * List of columns that has been changed.
     */
    getColumnsItems(): P13nColumnsItem[];
    /**
     * Returns a metadata object for class sap.m.P13nColumnsPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.26.7
     *
     * Delivers a payload for columnsPanel that can be used at consumer side
     */
    getOkPayload(): object;
    /**
     * @SINCE 1.28
     *
     * Delivers a payload for columnsPanel that can be used at consumer side
     */
    getResetPayload(): object;
    /**
     * @SINCE 1.26.7
     *
     * Gets current value of property {@link #getVisibleItemsThreshold visibleItemsThreshold}.
     *
     * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause
     * performance to slow down. When this happens, the user can receive a corresponding warning triggered by
     * the `visibleItemsThreshold` property. The property needs to be activated and set to the required value
     * by the consuming application to ensure that the warning message is shown when the threshold has been
     * exceeded. In the following example the message will be shown if more than 100 visible columns are selected:
     *
     *
     * ```javascript
     *
     * customData>
     * core:CustomData key="p13nDialogSettings"
     * value='\{"columns":\{"visible": true, "payload": \{"visibleItemsThreshold": 3\}\}\}' />
     * /customData>
     * ```
     *
     *
     * Default value is `-1`.
     */
    getVisibleItemsThreshold(): int;
    /**
     * @SINCE 1.26.0
     *
     * Checks for the provided `sap.m.P13nColumnsItem` in the aggregation {@link #getColumnsItems columnsItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfColumnsItem(
      /**
       * The columnsItem whose index is looked for
       */
      oColumnsItem: P13nColumnsItem
    ): int;
    /**
     * @SINCE 1.26.0
     *
     * Inserts a columnsItem into the aggregation {@link #getColumnsItems columnsItems}.
     */
    insertColumnsItem(
      /**
       * The columnsItem to insert; if empty, nothing is inserted
       */
      oColumnsItem: P13nColumnsItem,
      /**
       * The `0`-based index the columnsItem should be inserted at; for a negative value of `iIndex`, the columnsItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the columnsItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.28
     *
     * This method does a re-initialization of the panel
     */
    reInitialize(): void;
    /**
     * @SINCE 1.26.0
     *
     * Removes all the controls from the aggregation {@link #getColumnsItems columnsItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllColumnsItems(): P13nColumnsItem[];
    /**
     * @SINCE 1.26.0
     *
     * Removes a columnsItem from the aggregation {@link #getColumnsItems columnsItems}.
     */
    removeColumnsItem(
      /**
       * The columnsItem to remove or its index or id
       */
      vColumnsItem: int | string | P13nColumnsItem
    ): P13nColumnsItem;
    /**
     * @SINCE 1.26.7
     *
     * Sets a new value for property {@link #getVisibleItemsThreshold visibleItemsThreshold}.
     *
     * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause
     * performance to slow down. When this happens, the user can receive a corresponding warning triggered by
     * the `visibleItemsThreshold` property. The property needs to be activated and set to the required value
     * by the consuming application to ensure that the warning message is shown when the threshold has been
     * exceeded. In the following example the message will be shown if more than 100 visible columns are selected:
     *
     *
     * ```javascript
     *
     * customData>
     * core:CustomData key="p13nDialogSettings"
     * value='\{"columns":\{"visible": true, "payload": \{"visibleItemsThreshold": 3\}\}\}' />
     * /customData>
     * ```
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     */
    setVisibleItemsThreshold(
      /**
       * New value for property `visibleItemsThreshold`
       */
      iVisibleItemsThreshold?: int
    ): this;
    /**
     * @SINCE 1.26.0
     *
     * Unbinds aggregation {@link #getColumnsItems columnsItems} from model data.
     */
    unbindColumnsItems(): this;
    /**
     * @SINCE 1.26.0
     * @deprecated (since 1.50) - replaced by extended event {@link sap.m.P13nColumnsPanel#event:changeColumnsItems}
     *
     * Attaches event handler `fnFunction` to the {@link #event:addColumnsItem addColumnsItem} event of this
     * `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised when a `columnsItem` is added.
     */
    attachAddColumnsItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeColumnsItems changeColumnsItems} event
     * of this `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised if `columnsItems` is changed or new one needs to be created in the model.
     */
    attachChangeColumnsItems(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - the event `setData` is obsolete.
     *
     * Attaches event handler `fnFunction` to the {@link #event:setData setData} event of this `sap.m.P13nColumnsPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nColumnsPanel` itself.
     *
     * Event raised if `setData` is called in model. The event serves the purpose of minimizing such calls since
     * they can take up a lot of performance.
     */
    attachSetData(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nColumnsPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nColumnsPanelSettings extends $P13nPanelSettings {
    /**
     * @SINCE 1.26.7
     *
     * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause
     * performance to slow down. When this happens, the user can receive a corresponding warning triggered by
     * the `visibleItemsThreshold` property. The property needs to be activated and set to the required value
     * by the consuming application to ensure that the warning message is shown when the threshold has been
     * exceeded. In the following example the message will be shown if more than 100 visible columns are selected:
     *
     *
     * ```javascript
     *
     * customData>
     * core:CustomData key="p13nDialogSettings"
     * value='\{"columns":\{"visible": true, "payload": \{"visibleItemsThreshold": 3\}\}\}' />
     * /customData>
     * ```
     */
    visibleItemsThreshold?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.26.0
     *
     * List of columns that has been changed.
     */
    columnsItems?: P13nColumnsItem[] | P13nColumnsItem | AggregationBindingInfo;

    /**
     * @SINCE 1.26.0
     * @deprecated (since 1.50) - replaced by extended event {@link sap.m.P13nColumnsPanel#event:changeColumnsItems}
     *
     * Event raised when a `columnsItem` is added.
     */
    addColumnsItem?: Function;

    /**
     * @SINCE 1.26.7
     *
     * Event raised if `columnsItems` is changed or new one needs to be created in the model.
     */
    changeColumnsItems?: Function;

    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - the event `setData` is obsolete.
     *
     * Event raised if `setData` is called in model. The event serves the purpose of minimizing such calls since
     * they can take up a lot of performance.
     */
    setData?: Function;
  }
}

declare module "sap/m/P13nConditionPanel" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { P13nConditionOperation } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.26.0
   * @EXPERIMENTAL (since 1.26)
   *
   * The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of the
   * new Personalization dialog.
   */
  export default class P13nConditionPanel extends Control {
    /**
     * Constructor for a new P13nConditionPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nConditionPanelSettings
    );
    /**
     * Constructor for a new P13nConditionPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nConditionPanelSettings
    );

    /**
     * add a single condition.
     */
    addCondition(
      /**
       * the new condition of type `{ "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
       * "keyFieldKey", "value1": "", "value2": ""};`
       */
      oCondition: object
    ): void;
    /**
     * add a single KeyField
     */
    addKeyField(
      /**
       * {key: "CompanyCode", text: "ID"}
       */
      oKeyField: object
    ): void;
    /**
     * add a single operation
     */
    addOperation(
      oOperation: P13nConditionOperation | keyof typeof P13nConditionOperation,
      /**
       * defines the type for which this operations will be used.
       */
      sType: string
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataChange dataChange} event of this `sap.m.P13nConditionPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nConditionPanel` itself.
     *
     * Workaround for updating the binding
     */
    attachDataChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nConditionPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataChange dataChange} event of this `sap.m.P13nConditionPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDataChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nConditionPanel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nConditionPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:dataChange dataChange} to attached listeners.
     */
    fireDataChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getAlwaysShowAddIcon alwaysShowAddIcon}.
     *
     * makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end
     * and you can only append a new condition.
     *
     * Default value is `true`.
     */
    getAlwaysShowAddIcon(): boolean;
    /**
     * Gets current value of property {@link #getAutoAddNewRow autoAddNewRow}.
     *
     * adds initial a new empty condition row
     *
     * Default value is `false`.
     */
    getAutoAddNewRow(): boolean;
    /**
     * Gets current value of property {@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems}.
     *
     * KeyField value can only be selected once. When you set the property to `true` the ConditionPanel will
     * automatically offers on the KeyField drop down only the keyFields which are not used. The default behavior
     * is that in each keyField dropdown all keyfields are listed.
     *
     * Default value is `false`.
     */
    getAutoReduceKeyFieldItems(): boolean;
    /**
     * returns array of all defined conditions.
     */
    getConditions(): object[];
    /**
     * Gets current value of property {@link #getContainerQuery containerQuery}.
     *
     * defines if the mediaQuery or a ContainerResize will be used for layout update. When the `P13nConditionPanel`
     * is used on a dialog the property should be set to `true`!
     *
     * Default value is `false`.
     */
    getContainerQuery(): boolean;
    /**
     * Gets current value of property {@link #getDisableFirstRemoveIcon disableFirstRemoveIcon}.
     *
     * makes the remove icon on the first condition row disabled when only one condition exist.
     *
     * Default value is `false`.
     */
    getDisableFirstRemoveIcon(): boolean;
    /**
     * Gets current value of property {@link #getDisplayFormat displayFormat}.
     *
     * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value
     * of the condition will be converted to upperCase.
     */
    getDisplayFormat(): string;
    /**
     * Gets current value of property {@link #getExclude exclude}.
     *
     * exclude options for filter
     *
     * Default value is `false`.
     */
    getExclude(): boolean;
    /**
     * creates and returns a formatted text for the specified condition
     */
    static getFormatedConditionText(
      /**
       * the operation type sap.m.P13nConditionOperation
       */
      sOperation: string,
      /**
       * value of the first range field
       */
      sValue1: string,
      /**
       * value of the second range field
       */
      sValue2: string,
      /**
       * indicates if the range is an Exclude range
       */
      bExclude: boolean
    ): string;
    /**
     * getter for KeyFields array
     */
    getKeyFields(): object[];
    /**
     * Gets current value of property {@link #getLayoutMode layoutMode}.
     *
     * can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    getLayoutMode(): string;
    /**
     * Gets current value of property {@link #getMaxConditions maxConditions}.
     *
     * defines the max number of conditions on the ConditionPanel
     *
     * Default value is `'-1'`.
     */
    getMaxConditions(): string;
    /**
     * Returns a metadata object for class sap.m.P13nConditionPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * returns the default array of operations
     */
    getOperations(
      /**
       * defines the type for which the operations should be returned.
       */
      sType?: string
    ): Array<P13nConditionOperation | keyof typeof P13nConditionOperation>;
    /**
     * Gets current value of property {@link #getShowLabel showLabel}.
     *
     * show additional labels in the condition
     *
     * Default value is `false`.
     */
    getShowLabel(): boolean;
    /**
     * Gets current value of property {@link #getUsePrevConditionSetting usePrevConditionSetting}.
     *
     * new added condition use the settings from the previous condition as default.
     *
     * Default value is `true`.
     */
    getUsePrevConditionSetting(): boolean;
    /**
     * Gets current value of property {@link #getValidationExecutor validationExecutor}.
     *
     * Calls the validation listener tbd...
     */
    getValidationExecutor(): object;
    /**
     * insert a single condition.
     */
    insertCondition(
      /**
       * the new condition of type `{ "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
       * "keyFieldKey", "value1": "", "value2": ""};`
       */
      oCondition: object,
      /**
       * of the new condition
       */
      index: int
    ): void;
    /**
     * remove all conditions.
     */
    removeAllConditions(): void;
    /**
     * removes all KeyFields
     */
    removeAllKeyFields(): void;
    /**
     * remove all operations
     */
    removeAllOperations(
      /**
       * defines the type for which all operations should be removed
       */
      sType: string
    ): void;
    /**
     * remove a single condition.
     */
    removeCondition(
      /**
       * is the condition which should be removed. can be either a string with the key of the condition of the
       * condition object itself.
       */
      vCondition: object
    ): void;
    /**
     * @SINCE 1.28.0
     *
     * removes all invalid conditions.
     */
    removeInvalidConditions(): void;
    /**
     * @SINCE 1.28.0
     *
     * removes all errors/warning states from the value1/2 fields of all conditions.
     */
    removeValidationErrors(): void;
    /**
     * Sets a new value for property {@link #getAutoAddNewRow autoAddNewRow}.
     *
     * adds initial a new empty condition row
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAutoAddNewRow(
      /**
       * New value for property `autoAddNewRow`
       */
      bAutoAddNewRow?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems}.
     *
     * KeyField value can only be selected once. When you set the property to `true` the ConditionPanel will
     * automatically offers on the KeyField drop down only the keyFields which are not used. The default behavior
     * is that in each keyField dropdown all keyfields are listed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAutoReduceKeyFieldItems(
      /**
       * New value for property `autoReduceKeyFieldItems`
       */
      bAutoReduceKeyFieldItems?: boolean
    ): this;
    /**
     * This method must be used to assign a list of conditions.
     */
    setConditions(
      /**
       * array of Conditions.
       */
      aConditions: object[]
    ): void;
    /**
     * Sets a new value for property {@link #getDisableFirstRemoveIcon disableFirstRemoveIcon}.
     *
     * makes the remove icon on the first condition row disabled when only one condition exist.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisableFirstRemoveIcon(
      /**
       * New value for property `disableFirstRemoveIcon`
       */
      bDisableFirstRemoveIcon?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayFormat displayFormat}.
     *
     * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value
     * of the condition will be converted to upperCase.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplayFormat(
      /**
       * New value for property `displayFormat`
       */
      sDisplayFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getExclude exclude}.
     *
     * exclude options for filter
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setExclude(
      /**
       * New value for property `exclude`
       */
      bExclude?: boolean
    ): this;
    /**
     * This method allows you to specify the KeyFields for the conditions. You can set an array of object with
     * Key and Text properties to define the keyfields.
     */
    setKeyFields(
      /**
       * array of KeyFields `[{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]`
       */
      aKeyFields: Array<any>
    ): void;
    /**
     * Sets a new value for property {@link #getMaxConditions maxConditions}.
     *
     * defines the max number of conditions on the ConditionPanel
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'-1'`.
     */
    setMaxConditions(
      /**
       * New value for property `maxConditions`
       */
      sMaxConditions?: string
    ): this;
    /**
     * setter for the supported operations which we show per condition row. This array of "default" operations
     * will only be used when we do not have on the keyfield itself some specific operations and a keyfield
     * is of not of type date or numeric.
     */
    setOperations(
      /**
       * array of operations `[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]`
       */
      aOperations: Array<
        P13nConditionOperation | keyof typeof P13nConditionOperation
      >,
      /**
       * defines the type for which this operations will be used. is `sType` is not defined the operations will
       * be used as default operations.
       */
      sType: string
    ): void;
    /**
     * Sets a new value for property {@link #getShowLabel showLabel}.
     *
     * show additional labels in the condition
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowLabel(
      /**
       * New value for property `showLabel`
       */
      bShowLabel?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUsePrevConditionSetting usePrevConditionSetting}.
     *
     * new added condition use the settings from the previous condition as default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setUsePrevConditionSetting(
      /**
       * New value for property `usePrevConditionSetting`
       */
      bUsePrevConditionSetting?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
     *
     * Calls the validation listener tbd...
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValidationExecutor(
      /**
       * New value for property `validationExecutor`
       */
      oValidationExecutor?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataChange dataChange} event of this `sap.m.P13nConditionPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nConditionPanel` itself.
     *
     * Workaround for updating the binding
     */
    attachDataChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nConditionPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nConditionPanelSettings extends $ControlSettings {
    /**
     * defines the max number of conditions on the ConditionPanel
     */
    maxConditions?: string | PropertyBindingInfo;

    /**
     * exclude options for filter
     */
    exclude?: boolean | PropertyBindingInfo;

    /**
     * defines if the mediaQuery or a ContainerResize will be used for layout update. When the `P13nConditionPanel`
     * is used on a dialog the property should be set to `true`!
     */
    containerQuery?: boolean | PropertyBindingInfo;

    /**
     * adds initial a new empty condition row
     */
    autoAddNewRow?: boolean | PropertyBindingInfo;

    /**
     * makes the remove icon on the first condition row disabled when only one condition exist.
     */
    disableFirstRemoveIcon?: boolean | PropertyBindingInfo;

    /**
     * makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end
     * and you can only append a new condition.
     */
    alwaysShowAddIcon?: boolean | PropertyBindingInfo;

    /**
     * new added condition use the settings from the previous condition as default.
     */
    usePrevConditionSetting?: boolean | PropertyBindingInfo;

    /**
     * KeyField value can only be selected once. When you set the property to `true` the ConditionPanel will
     * automatically offers on the KeyField drop down only the keyFields which are not used. The default behavior
     * is that in each keyField dropdown all keyfields are listed.
     */
    autoReduceKeyFieldItems?: boolean | PropertyBindingInfo;

    /**
     * can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    layoutMode?: string | PropertyBindingInfo;

    /**
     * show additional labels in the condition
     */
    showLabel?: boolean | PropertyBindingInfo;

    /**
     * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value
     * of the condition will be converted to upperCase.
     */
    displayFormat?: string | PropertyBindingInfo;

    /**
     * Calls the validation listener tbd...
     */
    validationExecutor?: object | PropertyBindingInfo;

    /**
     * Workaround for updating the binding
     */
    dataChange?: Function;
  }
}

declare module "sap/m/P13nDialog" {
  import { default as Dialog, $DialogSettings } from "sap/m/Dialog";

  import P13nPanel from "sap/m/P13nPanel";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The P13nDialog control provides a dialog that contains one or more panels. On each of the panels, one
   * or more changes with regards to a table can be processed. For example, a panel to set a column to invisible,
   * change the order of the columns or a panel to sort or filter tables.
   */
  export default class P13nDialog extends Dialog {
    /**
     * Constructor for a new P13nDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a3c3c5eb54bc4cc38e6cfbd8e90c6a01 Personalization Dialog}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDialogSettings
    );
    /**
     * Constructor for a new P13nDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:a3c3c5eb54bc4cc38e6cfbd8e90c6a01 Personalization Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDialogSettings
    );

    /**
     * Adds some panel to the aggregation {@link #getPanels panels}.
     */
    addPanel(
      /**
       * The panel to add; if empty, nothing is inserted
       */
      oPanel: P13nPanel
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'cancel' button in `P13nDialog` is clicked.
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'ok' button in `P13nDialog` is clicked.
     */
    attachOk(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'reset' button in `P13nDialog` is clicked.
     */
    attachReset(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getPanels panels} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindPanels(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the panels in the aggregation {@link #getPanels panels}.
     */
    destroyPanels(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.m.P13nDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:ok ok} event of this `sap.m.P13nDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOk(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:reset reset} event of this `sap.m.P13nDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachReset(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nDialog with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:ok ok} to attached listeners.
     */
    fireOk(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:reset reset} to attached listeners.
     */
    fireReset(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getInitialVisiblePanelType initialVisiblePanelType}.
     *
     * This property determines which panel is initially shown when dialog is opened. If not defined then the
     * first visible panel of `panels` aggregation is taken. Setting value after the dialog is opened has no
     * effect anymore. Due to extensibility reason the type should be `string`. So it is feasible to add a custom
     * panel without expanding the type.
     */
    getInitialVisiblePanelType(): string;
    /**
     * Returns a metadata object for class sap.m.P13nDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getPanels panels}.
     *
     * The dialog panels displayed in the dialog.
     */
    getPanels(): P13nPanel[];
    /**
     * Gets current value of property {@link #getShowReset showReset}.
     *
     * This property determines whether the 'Restore' button is shown inside the dialog. If this property is
     * set to true, clicking the 'Reset' button will trigger the `reset` event sending a notification that model
     * data must be reset.
     *
     * Default value is `false`.
     */
    getShowReset(): boolean;
    /**
     * @SINCE 1.36.0
     *
     * Gets current value of property {@link #getShowResetEnabled showResetEnabled}.
     *
     * This property determines whether the 'Restore' button is enabled and is taken into account only if `showReset`
     * is set to `true`.
     *
     * Default value is `false`.
     */
    getShowResetEnabled(): boolean;
    /**
     * Gets current value of property {@link #getValidationExecutor validationExecutor}.
     *
     * Calls the validation listener once all panel-relevant validation checks have been done. This callback
     * function is called in order to perform cross-model validation checks.
     */
    getValidationExecutor(): object;
    /**
     * Returns visible panel.
     */
    getVisiblePanel(): P13nPanel | null;
    /**
     * Checks for the provided `sap.m.P13nPanel` in the aggregation {@link #getPanels panels}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfPanel(
      /**
       * The panel whose index is looked for
       */
      oPanel: P13nPanel
    ): int;
    /**
     * Inserts a panel into the aggregation {@link #getPanels panels}.
     */
    insertPanel(
      /**
       * The panel to insert; if empty, nothing is inserted
       */
      oPanel: P13nPanel,
      /**
       * The `0`-based index the panel should be inserted at; for a negative value of `iIndex`, the panel is inserted
       * at position 0; for a value greater than the current size of the aggregation, the panel is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getPanels panels}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPanels(): P13nPanel[];
    /**
     * Removes a panel from the aggregation {@link #getPanels panels}.
     */
    removePanel(
      /**
       * The panel to remove or its index or id
       */
      vPanel: int | string | P13nPanel
    ): P13nPanel;
    /**
     * Sets a new value for property {@link #getInitialVisiblePanelType initialVisiblePanelType}.
     *
     * This property determines which panel is initially shown when dialog is opened. If not defined then the
     * first visible panel of `panels` aggregation is taken. Setting value after the dialog is opened has no
     * effect anymore. Due to extensibility reason the type should be `string`. So it is feasible to add a custom
     * panel without expanding the type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInitialVisiblePanelType(
      /**
       * New value for property `initialVisiblePanelType`
       */
      sInitialVisiblePanelType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowReset showReset}.
     *
     * This property determines whether the 'Restore' button is shown inside the dialog. If this property is
     * set to true, clicking the 'Reset' button will trigger the `reset` event sending a notification that model
     * data must be reset.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowReset(
      /**
       * New value for property `showReset`
       */
      bShowReset?: boolean
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Sets a new value for property {@link #getShowResetEnabled showResetEnabled}.
     *
     * This property determines whether the 'Restore' button is enabled and is taken into account only if `showReset`
     * is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowResetEnabled(
      /**
       * New value for property `showResetEnabled`
       */
      bShowResetEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
     *
     * Calls the validation listener once all panel-relevant validation checks have been done. This callback
     * function is called in order to perform cross-model validation checks.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValidationExecutor(
      /**
       * New value for property `validationExecutor`
       */
      oValidationExecutor?: object
    ): this;
    /**
     * Unbinds aggregation {@link #getPanels panels} from model data.
     */
    unbindPanels(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'cancel' button in `P13nDialog` is clicked.
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'ok' button in `P13nDialog` is clicked.
     */
    attachOk(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.P13nDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDialog` itself.
     *
     * Event fired if the 'reset' button in `P13nDialog` is clicked.
     */
    attachReset(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nDialogSettings extends $DialogSettings {
    /**
     * This property determines which panel is initially shown when dialog is opened. If not defined then the
     * first visible panel of `panels` aggregation is taken. Setting value after the dialog is opened has no
     * effect anymore. Due to extensibility reason the type should be `string`. So it is feasible to add a custom
     * panel without expanding the type.
     */
    initialVisiblePanelType?: string | PropertyBindingInfo;

    /**
     * This property determines whether the 'Restore' button is shown inside the dialog. If this property is
     * set to true, clicking the 'Reset' button will trigger the `reset` event sending a notification that model
     * data must be reset.
     */
    showReset?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.36.0
     *
     * This property determines whether the 'Restore' button is enabled and is taken into account only if `showReset`
     * is set to `true`.
     */
    showResetEnabled?: boolean | PropertyBindingInfo;

    /**
     * Calls the validation listener once all panel-relevant validation checks have been done. This callback
     * function is called in order to perform cross-model validation checks.
     */
    validationExecutor?: object | PropertyBindingInfo;

    /**
     * The dialog panels displayed in the dialog.
     */
    panels?: P13nPanel[] | P13nPanel | AggregationBindingInfo;

    /**
     * Event fired if the 'ok' button in `P13nDialog` is clicked.
     */
    ok?: Function;

    /**
     * Event fired if the 'cancel' button in `P13nDialog` is clicked.
     */
    cancel?: Function;

    /**
     * Event fired if the 'reset' button in `P13nDialog` is clicked.
     */
    reset?: Function;
  }
}

declare module "sap/m/P13nDimMeasureItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34.0
   *
   * Type for `columnsItems` aggregation in `P13nDimMeasurePanel` control.
   */
  export default class P13nDimMeasureItem extends Item {
    /**
     * Constructor for a new P13nDimMeasureItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDimMeasureItemSettings
    );
    /**
     * Constructor for a new P13nDimMeasureItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDimMeasureItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nDimMeasureItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nDimMeasureItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a
     * chart.
     */
    getColumnKey(): string;
    /**
     * Gets current value of property {@link #getIndex index}.
     *
     * Specifies the order of visible dimensions or measures of a chart.
     *
     * Default value is `-1`.
     */
    getIndex(): int;
    /**
     * Returns a metadata object for class sap.m.P13nDimMeasureItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRole role}.
     *
     * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence
     * the chart.
     */
    getRole(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Specifies the visibility of dimensions or measures.
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a
     * chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey: string
    ): this;
    /**
     * Sets a new value for property {@link #getIndex index}.
     *
     * Specifies the order of visible dimensions or measures of a chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `-1`.
     */
    setIndex(
      /**
       * New value for property `index`
       */
      iIndex?: int
    ): this;
    /**
     * Sets a new value for property {@link #getRole role}.
     *
     * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence
     * the chart.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRole(
      /**
       * New value for property `role`
       */
      sRole: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Specifies the visibility of dimensions or measures.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible: boolean
    ): this;
  }

  export interface $P13nDimMeasureItemSettings extends $ItemSettings {
    /**
     * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a
     * chart.
     */
    columnKey?: string | PropertyBindingInfo;

    /**
     * Specifies the order of visible dimensions or measures of a chart.
     */
    index?: int | PropertyBindingInfo;

    /**
     * Specifies the visibility of dimensions or measures.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence
     * the chart.
     */
    role?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nDimMeasurePanel" {
  import { default as P13nPanel, $P13nPanelSettings } from "sap/m/P13nPanel";

  import Item from "sap/ui/core/Item";

  import P13nDimMeasureItem from "sap/m/P13nDimMeasureItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.34.0
   *
   * The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the visibility,
   * the order and roles of dimensions and measures for table personalization.
   */
  export default class P13nDimMeasurePanel extends P13nPanel {
    /**
     * Constructor for a new P13nDimMeasurePanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDimMeasurePanelSettings
    );
    /**
     * Constructor for a new P13nDimMeasurePanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nDimMeasurePanelSettings
    );

    /**
     * Adds some availableChartType to the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     */
    addAvailableChartType(
      /**
       * The availableChartType to add; if empty, nothing is inserted
       */
      oAvailableChartType: Item
    ): this;
    /**
     * Adds some dimMeasureItem to the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     */
    addDimMeasureItem(
      /**
       * The dimMeasureItem to add; if empty, nothing is inserted
       */
      oDimMeasureItem: P13nDimMeasureItem
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeChartType changeChartType} event of this
     * `sap.m.P13nDimMeasurePanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDimMeasurePanel` itself.
     *
     * Event raised when a `ChartType` has been updated.
     */
    attachChangeChartType(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDimMeasurePanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeDimMeasureItems changeDimMeasureItems}
     * event of this `sap.m.P13nDimMeasurePanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDimMeasurePanel` itself.
     *
     * Event raised when one or more `DimMeasureItems` has been updated. Aggregation `DimMeasureItems` should
     * be updated outside...
     */
    attachChangeDimMeasureItems(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDimMeasurePanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getDimMeasureItems dimMeasureItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindDimMeasureItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the availableChartTypes in the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     */
    destroyAvailableChartTypes(): this;
    /**
     * Destroys all the dimMeasureItems in the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     */
    destroyDimMeasureItems(): this;
    /**
     * @SINCE 1.50.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:changeChartType changeChartType} event of
     * this `sap.m.P13nDimMeasurePanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChangeChartType(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:changeDimMeasureItems changeDimMeasureItems}
     * event of this `sap.m.P13nDimMeasurePanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChangeDimMeasureItems(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nDimMeasurePanel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nDimMeasurePanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.50.0
     *
     * Fires event {@link #event:changeChartType changeChartType} to attached listeners.
     */
    fireChangeChartType(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Fires event {@link #event:changeDimMeasureItems changeDimMeasureItems} to attached listeners.
     */
    fireChangeDimMeasureItems(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getAvailableChartTypes availableChartTypes}.
     *
     * Specifies available chart types.
     */
    getAvailableChartTypes(): Item[];
    /**
     * Gets current value of property {@link #getChartTypeKey chartTypeKey}.
     *
     * Specifies a chart type key.
     *
     * Default value is `empty string`.
     */
    getChartTypeKey(): string;
    /**
     * Gets content of aggregation {@link #getDimMeasureItems dimMeasureItems}.
     *
     * List of columns that has been changed.
     */
    getDimMeasureItems(): P13nDimMeasureItem[];
    /**
     * Returns a metadata object for class sap.m.P13nDimMeasurePanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAvailableChartType(
      /**
       * The availableChartType whose index is looked for
       */
      oAvailableChartType: Item
    ): int;
    /**
     * Checks for the provided `sap.m.P13nDimMeasureItem` in the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfDimMeasureItem(
      /**
       * The dimMeasureItem whose index is looked for
       */
      oDimMeasureItem: P13nDimMeasureItem
    ): int;
    /**
     * Inserts a availableChartType into the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     */
    insertAvailableChartType(
      /**
       * The availableChartType to insert; if empty, nothing is inserted
       */
      oAvailableChartType: Item,
      /**
       * The `0`-based index the availableChartType should be inserted at; for a negative value of `iIndex`, the
       * availableChartType is inserted at position 0; for a value greater than the current size of the aggregation,
       * the availableChartType is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a dimMeasureItem into the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     */
    insertDimMeasureItem(
      /**
       * The dimMeasureItem to insert; if empty, nothing is inserted
       */
      oDimMeasureItem: P13nDimMeasureItem,
      /**
       * The `0`-based index the dimMeasureItem should be inserted at; for a negative value of `iIndex`, the dimMeasureItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the dimMeasureItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAvailableChartTypes(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllDimMeasureItems(): P13nDimMeasureItem[];
    /**
     * Removes a availableChartType from the aggregation {@link #getAvailableChartTypes availableChartTypes}.
     */
    removeAvailableChartType(
      /**
       * The availableChartType to remove or its index or id
       */
      vAvailableChartType: int | string | Item
    ): Item;
    /**
     * Removes a dimMeasureItem from the aggregation {@link #getDimMeasureItems dimMeasureItems}.
     */
    removeDimMeasureItem(
      /**
       * The dimMeasureItem to remove or its index or id
       */
      vDimMeasureItem: int | string | P13nDimMeasureItem
    ): P13nDimMeasureItem;
    /**
     * Sets a new value for property {@link #getChartTypeKey chartTypeKey}.
     *
     * Specifies a chart type key.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setChartTypeKey(
      /**
       * New value for property `chartTypeKey`
       */
      sChartTypeKey?: string
    ): this;
    /**
     * Unbinds aggregation {@link #getDimMeasureItems dimMeasureItems} from model data.
     */
    unbindDimMeasureItems(): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeChartType changeChartType} event of this
     * `sap.m.P13nDimMeasurePanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDimMeasurePanel` itself.
     *
     * Event raised when a `ChartType` has been updated.
     */
    attachChangeChartType(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDimMeasurePanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:changeDimMeasureItems changeDimMeasureItems}
     * event of this `sap.m.P13nDimMeasurePanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nDimMeasurePanel` itself.
     *
     * Event raised when one or more `DimMeasureItems` has been updated. Aggregation `DimMeasureItems` should
     * be updated outside...
     */
    attachChangeDimMeasureItems(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nDimMeasurePanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nDimMeasurePanelSettings extends $P13nPanelSettings {
    /**
     * Specifies a chart type key.
     */
    chartTypeKey?: string | PropertyBindingInfo;

    /**
     * List of columns that has been changed.
     */
    dimMeasureItems?:
      | P13nDimMeasureItem[]
      | P13nDimMeasureItem
      | AggregationBindingInfo;

    /**
     * Specifies available chart types.
     */
    availableChartTypes?: Item[] | Item | AggregationBindingInfo;

    /**
     * @SINCE 1.50.0
     *
     * Event raised when one or more `DimMeasureItems` has been updated. Aggregation `DimMeasureItems` should
     * be updated outside...
     */
    changeDimMeasureItems?: Function;

    /**
     * @SINCE 1.50.0
     *
     * Event raised when a `ChartType` has been updated.
     */
    changeChartType?: Function;
  }
}

declare module "sap/m/P13nFilterItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.26.0
   *
   * Type for `filterItems` aggregation in P13nFilterPanel control.
   */
  export default class P13nFilterItem extends Item {
    /**
     * Constructor for a new P13nFilterItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nFilterItemSettings
    );
    /**
     * Constructor for a new P13nFilterItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nFilterItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nFilterItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nFilterItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * key of the column
     */
    getColumnKey(): string;
    /**
     * Gets current value of property {@link #getExclude exclude}.
     *
     * defines if the filter is an include or exclude filter item
     *
     * Default value is `false`.
     */
    getExclude(): boolean;
    /**
     * Returns a metadata object for class sap.m.P13nFilterItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     */
    getOperation(): string;
    /**
     * Gets current value of property {@link #getValue1 value1}.
     *
     * value of the filter
     */
    getValue1(): string;
    /**
     * Gets current value of property {@link #getValue2 value2}.
     *
     * to value of the between filter
     */
    getValue2(): string;
    /**
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * key of the column
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getExclude exclude}.
     *
     * defines if the filter is an include or exclude filter item
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setExclude(
      /**
       * New value for property `exclude`
       */
      bExclude?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setOperation(
      /**
       * New value for property `operation`
       */
      sOperation?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue1 value1}.
     *
     * value of the filter
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue1(
      /**
       * New value for property `value1`
       */
      sValue1?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue2 value2}.
     *
     * to value of the between filter
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue2(
      /**
       * New value for property `value2`
       */
      sValue2?: string
    ): this;
  }

  export interface $P13nFilterItemSettings extends $ItemSettings {
    /**
     * sap.m.P13nConditionOperation
     */
    operation?: string | PropertyBindingInfo;

    /**
     * value of the filter
     */
    value1?: string | PropertyBindingInfo;

    /**
     * to value of the between filter
     */
    value2?: string | PropertyBindingInfo;

    /**
     * key of the column
     */
    columnKey?: string | PropertyBindingInfo;

    /**
     * defines if the filter is an include or exclude filter item
     */
    exclude?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nFilterPanel" {
  import { default as P13nPanel, $P13nPanelSettings } from "sap/m/P13nPanel";

  import P13nFilterItem from "sap/m/P13nFilterItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { P13nConditionOperation } from "sap/m/library";

  import MessageStrip from "sap/m/MessageStrip";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The P13nFilterPanel control is used to define filter-specific settings for table personalization.
   */
  export default class P13nFilterPanel extends P13nPanel {
    /**
     * Constructor for a new P13nFilterPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nFilterPanelSettings
    );
    /**
     * Constructor for a new P13nFilterPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nFilterPanelSettings
    );

    /**
     * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
     */
    addFilterItem(
      /**
       * The filterItem to add; if empty, nothing is inserted
       */
      oFilterItem: P13nFilterItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addFilterItem addFilterItem} event of this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been added.
     */
    attachAddFilterItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @EXPERIMENTAL (since 1.56)
     *
     * Attaches event handler `fnFunction` to the {@link #event:filterItemChanged filterItemChanged} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been changed. reason can be added, updated or removed.
     */
    attachFilterItemChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeFilterItem removeFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been removed.
     */
    attachRemoveFilterItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateFilterItem updateFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been updated.
     */
    attachUpdateFilterItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getFilterItems filterItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindFilterItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
     */
    destroyFilterItems(): this;
    /**
     * Destroys the messageStrip in the aggregation {@link #getMessageStrip messageStrip}.
     */
    destroyMessageStrip(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addFilterItem addFilterItem} event of this
     * `sap.m.P13nFilterPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAddFilterItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @EXPERIMENTAL (since 1.56)
     *
     * Detaches event handler `fnFunction` from the {@link #event:filterItemChanged filterItemChanged} event
     * of this `sap.m.P13nFilterPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFilterItemChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:removeFilterItem removeFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRemoveFilterItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:updateFilterItem updateFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateFilterItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nFilterPanel with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nFilterPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:addFilterItem addFilterItem} to attached listeners.
     */
    fireAddFilterItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @EXPERIMENTAL (since 1.56)
     *
     * Fires event {@link #event:filterItemChanged filterItemChanged} to attached listeners.
     */
    fireFilterItemChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * reason for the changeFilterItem event. Value can be added, updated or removed.
         */
        reason?: string;
        /**
         * key of the changed filterItem
         */
        key?: string;
        /**
         * index of the changed filterItem
         */
        index?: int;
        /**
         * JSON object of the changed filterItem instance (in case of reason=="removed" the itemData parameter does
         * not exist)
         */
        itemData?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:removeFilterItem removeFilterItem} to attached listeners.
     */
    fireRemoveFilterItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:updateFilterItem updateFilterItem} to attached listeners.
     */
    fireUpdateFilterItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns the array of conditions.
     */
    getConditions(): void;
    /**
     * Gets current value of property {@link #getContainerQuery containerQuery}.
     *
     * Defines if the `mediaQuery` or a `ContainerResize` is used for layout update. If the `ConditionPanel`
     * is used in a dialog, the property must be set to `true`.
     *
     * Default value is `false`.
     */
    getContainerQuery(): boolean;
    /**
     * Gets current value of property {@link #getEnableEmptyOperations enableEmptyOperations}.
     *
     * Should empty operation be enabled for certain data types. This is also based on their nullable setting.
     *
     * Default value is `false`.
     */
    getEnableEmptyOperations(): boolean;
    /**
     * Getter for the exclude operations.
     */
    getExcludeOperations(
      /**
       * the type for which the operations are defined
       */
      sType: string
    ): Array<P13nConditionOperation | keyof typeof P13nConditionOperation>;
    /**
     * Gets content of aggregation {@link #getFilterItems filterItems}.
     *
     * Defines filter items.
     */
    getFilterItems(): P13nFilterItem[];
    /**
     * Getter for the include operations.
     */
    getIncludeOperations(
      /**
       * for which the operations are defined
       */
      sType: string
    ): P13nConditionOperation | keyof typeof P13nConditionOperation;
    /**
     * Gets current value of property {@link #getLayoutMode layoutMode}.
     *
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or"Phone" you can set a fixed layout.
     */
    getLayoutMode(): string;
    /**
     * Gets current value of property {@link #getMaxExcludes maxExcludes}.
     *
     * Defines the maximum number of exclude filters.
     *
     * Default value is `'-1'`.
     */
    getMaxExcludes(): string;
    /**
     * Gets current value of property {@link #getMaxIncludes maxIncludes}.
     *
     * Defines the maximum number of include filters.
     *
     * Default value is `'-1'`.
     */
    getMaxIncludes(): string;
    /**
     * Gets content of aggregation {@link #getMessageStrip messageStrip}.
     *
     * Defines an optional message strip to be displayed in the content area
     */
    getMessageStrip(): MessageStrip;
    /**
     * Returns a metadata object for class sap.m.P13nFilterPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.m.P13nFilterItem` in the aggregation {@link #getFilterItems filterItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfFilterItem(
      /**
       * The filterItem whose index is looked for
       */
      oFilterItem: P13nFilterItem
    ): int;
    /**
     * Inserts a filterItem into the aggregation {@link #getFilterItems filterItems}.
     */
    insertFilterItem(
      /**
       * The filterItem to insert; if empty, nothing is inserted
       */
      oFilterItem: P13nFilterItem,
      /**
       * The `0`-based index the filterItem should be inserted at; for a negative value of `iIndex`, the filterItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the filterItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getFilterItems filterItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllFilterItems(): P13nFilterItem[];
    /**
     * Removes a filterItem from the aggregation {@link #getFilterItems filterItems}.
     */
    removeFilterItem(
      /**
       * The filterItem to remove or its index or id
       */
      vFilterItem: int | string | P13nFilterItem
    ): P13nFilterItem;
    /**
     * @SINCE 1.28
     *
     * Removes all invalid conditions.
     */
    removeInvalidConditions(): void;
    /**
     * @SINCE 1.28
     *
     * Removes all errors and warnings states from of all filter conditions.
     */
    removeValidationErrors(): void;
    /**
     * Sets the array of conditions.
     */
    setConditions(
      /**
       * the complete list of conditions
       */
      aConditions: object[]
    ): this;
    /**
     * Sets a new value for property {@link #getContainerQuery containerQuery}.
     *
     * Defines if the `mediaQuery` or a `ContainerResize` is used for layout update. If the `ConditionPanel`
     * is used in a dialog, the property must be set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setContainerQuery(
      /**
       * New value for property `containerQuery`
       */
      bContainerQuery?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableEmptyOperations enableEmptyOperations}.
     *
     * Should empty operation be enabled for certain data types. This is also based on their nullable setting.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableEmptyOperations(
      /**
       * New value for property `enableEmptyOperations`
       */
      bEnableEmptyOperations?: boolean
    ): this;
    /**
     * Setter for the supported exclude operations array.
     */
    setExcludeOperations(
      /**
       * array of operations [`sap.m.P13nConditionOperation.BT`, `sap.m.P13nConditionOperation.EQ`]
       */
      aOperation: Array<
        P13nConditionOperation | keyof typeof P13nConditionOperation
      >,
      /**
       * the type for which the operations are defined
       */
      sType: string
    ): void;
    /**
     * Setter for the supported Include operations array.
     */
    setIncludeOperations(
      /**
       * array of operations [`sap.m.P13nConditionOperation.BT`, `sap.m.P13nConditionOperation.EQ`]
       */
      aOperation: Array<
        P13nConditionOperation | keyof typeof P13nConditionOperation
      >,
      /**
       * the type for which the operations are defined
       */
      sType: string
    ): void;
    /**
     * Sets a new value for property {@link #getLayoutMode layoutMode}.
     *
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or"Phone" you can set a fixed layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLayoutMode(
      /**
       * New value for property `layoutMode`
       */
      sLayoutMode?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxExcludes maxExcludes}.
     *
     * Defines the maximum number of exclude filters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'-1'`.
     */
    setMaxExcludes(
      /**
       * New value for property `maxExcludes`
       */
      sMaxExcludes?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxIncludes maxIncludes}.
     *
     * Defines the maximum number of include filters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'-1'`.
     */
    setMaxIncludes(
      /**
       * New value for property `maxIncludes`
       */
      sMaxIncludes?: string
    ): this;
    /**
     * Sets the aggregated {@link #getMessageStrip messageStrip}.
     */
    setMessageStrip(
      /**
       * The messageStrip to set
       */
      oMessageStrip: MessageStrip
    ): this;
    /**
     * Unbinds aggregation {@link #getFilterItems filterItems} from model data.
     */
    unbindFilterItems(): this;
    /**
     * Checks if the entered and modified conditions are correct, marks invalid fields in yellow (warning).
     */
    validateConditions(): boolean;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addFilterItem addFilterItem} event of this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been added.
     */
    attachAddFilterItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @EXPERIMENTAL (since 1.56)
     *
     * Attaches event handler `fnFunction` to the {@link #event:filterItemChanged filterItemChanged} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been changed. reason can be added, updated or removed.
     */
    attachFilterItemChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeFilterItem removeFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been removed.
     */
    attachRemoveFilterItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateFilterItem updateFilterItem} event of
     * this `sap.m.P13nFilterPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nFilterPanel` itself.
     *
     * Event raised if a filter item has been updated.
     */
    attachUpdateFilterItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nFilterPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nFilterPanelSettings extends $P13nPanelSettings {
    /**
     * Defines the maximum number of include filters.
     */
    maxIncludes?: string | PropertyBindingInfo;

    /**
     * Defines the maximum number of exclude filters.
     */
    maxExcludes?: string | PropertyBindingInfo;

    /**
     * Defines if the `mediaQuery` or a `ContainerResize` is used for layout update. If the `ConditionPanel`
     * is used in a dialog, the property must be set to `true`.
     */
    containerQuery?: boolean | PropertyBindingInfo;

    /**
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or"Phone" you can set a fixed layout.
     */
    layoutMode?: string | PropertyBindingInfo;

    /**
     * Should empty operation be enabled for certain data types. This is also based on their nullable setting.
     */
    enableEmptyOperations?: boolean | PropertyBindingInfo;

    /**
     * Defines filter items.
     */
    filterItems?: P13nFilterItem[] | P13nFilterItem | AggregationBindingInfo;

    /**
     * Defines an optional message strip to be displayed in the content area
     */
    messageStrip?: MessageStrip;

    /**
     * Event raised if a filter item has been added.
     */
    addFilterItem?: Function;

    /**
     * Event raised if a filter item has been removed.
     */
    removeFilterItem?: Function;

    /**
     * Event raised if a filter item has been updated.
     */
    updateFilterItem?: Function;

    /**
     * @EXPERIMENTAL (since 1.56)
     *
     * Event raised if a filter item has been changed. reason can be added, updated or removed.
     */
    filterItemChanged?: Function;
  }
}

declare module "sap/m/P13nGroupItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28.0
   *
   * Type for `groupItems` aggregation in P13nGroupPanel control.
   */
  export default class P13nGroupItem extends Item {
    /**
     * Constructor for a new P13nGroupItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nGroupItemSettings
    );
    /**
     * Constructor for a new P13nGroupItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nGroupItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nGroupItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nGroupItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * key of the column
     */
    getColumnKey(): string;
    /**
     * Returns a metadata object for class sap.m.P13nGroupItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     */
    getOperation(): string;
    /**
     * Gets current value of property {@link #getShowIfGrouped showIfGrouped}.
     *
     * make the grouped column as normalcolumn visible
     *
     * Default value is `false`.
     */
    getShowIfGrouped(): boolean;
    /**
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * key of the column
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setOperation(
      /**
       * New value for property `operation`
       */
      sOperation?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowIfGrouped showIfGrouped}.
     *
     * make the grouped column as normalcolumn visible
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowIfGrouped(
      /**
       * New value for property `showIfGrouped`
       */
      bShowIfGrouped?: boolean
    ): this;
  }

  export interface $P13nGroupItemSettings extends $ItemSettings {
    /**
     * sap.m.P13nConditionOperation
     */
    operation?: string | PropertyBindingInfo;

    /**
     * key of the column
     */
    columnKey?: string | PropertyBindingInfo;

    /**
     * make the grouped column as normalcolumn visible
     */
    showIfGrouped?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nGroupPanel" {
  import { default as P13nPanel, $P13nPanelSettings } from "sap/m/P13nPanel";

  import P13nGroupItem from "sap/m/P13nGroupItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The P13nGroupPanel control is used to define group-specific settings for table personalization.
   */
  export default class P13nGroupPanel extends P13nPanel {
    /**
     * Constructor for a new P13nGroupPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nGroupPanelSettings
    );
    /**
     * Constructor for a new P13nGroupPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nGroupPanelSettings
    );

    /**
     * Adds some groupItem to the aggregation {@link #getGroupItems groupItems}.
     */
    addGroupItem(
      /**
       * The groupItem to add; if empty, nothing is inserted
       */
      oGroupItem: P13nGroupItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addGroupItem addGroupItem} event of this `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been added.
     */
    attachAddGroupItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeGroupItem removeGroupItem} event of this
     * `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been removed.
     */
    attachRemoveGroupItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateGroupItem updateGroupItem} event of this
     * `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been updated.
     */
    attachUpdateGroupItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getGroupItems groupItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindGroupItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the groupItems in the aggregation {@link #getGroupItems groupItems}.
     */
    destroyGroupItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addGroupItem addGroupItem} event of this `sap.m.P13nGroupPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAddGroupItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:removeGroupItem removeGroupItem} event of
     * this `sap.m.P13nGroupPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRemoveGroupItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:updateGroupItem updateGroupItem} event of
     * this `sap.m.P13nGroupPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateGroupItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nGroupPanel with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nGroupPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:addGroupItem addGroupItem} to attached listeners.
     */
    fireAddGroupItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:removeGroupItem removeGroupItem} to attached listeners.
     */
    fireRemoveGroupItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:updateGroupItem updateGroupItem} to attached listeners.
     */
    fireUpdateGroupItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContainerQuery containerQuery}.
     *
     * Defines if `mediaQuery` or `ContainerResize` is used for a layout update. If `ConditionPanel` is used
     * in a dialog, the property must be set to true.
     *
     * Default value is `false`.
     */
    getContainerQuery(): boolean;
    /**
     * Gets content of aggregation {@link #getGroupItems groupItems}.
     *
     * Defined group items.
     */
    getGroupItems(): P13nGroupItem[];
    /**
     * Gets current value of property {@link #getLayoutMode layoutMode}.
     *
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    getLayoutMode(): string;
    /**
     * Gets current value of property {@link #getMaxGroups maxGroups}.
     *
     * Defines the maximum number of groups.
     *
     * Default value is `'-1'`.
     */
    getMaxGroups(): string;
    /**
     * Returns a metadata object for class sap.m.P13nGroupPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.m.P13nGroupItem` in the aggregation {@link #getGroupItems groupItems}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfGroupItem(
      /**
       * The groupItem whose index is looked for
       */
      oGroupItem: P13nGroupItem
    ): int;
    /**
     * Inserts a groupItem into the aggregation {@link #getGroupItems groupItems}.
     */
    insertGroupItem(
      /**
       * The groupItem to insert; if empty, nothing is inserted
       */
      oGroupItem: P13nGroupItem,
      /**
       * The `0`-based index the groupItem should be inserted at; for a negative value of `iIndex`, the groupItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the groupItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getGroupItems groupItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllGroupItems(): P13nGroupItem[];
    /**
     * Removes a groupItem from the aggregation {@link #getGroupItems groupItems}.
     */
    removeGroupItem(
      /**
       * The groupItem to remove or its index or id
       */
      vGroupItem: int | string | P13nGroupItem
    ): P13nGroupItem;
    /**
     * @SINCE 1.28
     *
     * Removes all invalid group conditions.
     */
    removeInvalidConditions(): void;
    /**
     * @SINCE 1.28
     *
     * Removes all errors/warning states from of all group conditions.
     */
    removeValidationErrors(): void;
    /**
     * Sets a new value for property {@link #getContainerQuery containerQuery}.
     *
     * Defines if `mediaQuery` or `ContainerResize` is used for a layout update. If `ConditionPanel` is used
     * in a dialog, the property must be set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setContainerQuery(
      /**
       * New value for property `containerQuery`
       */
      bContainerQuery?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLayoutMode layoutMode}.
     *
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLayoutMode(
      /**
       * New value for property `layoutMode`
       */
      sLayoutMode?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMaxGroups maxGroups}.
     *
     * Defines the maximum number of groups.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'-1'`.
     */
    setMaxGroups(
      /**
       * New value for property `maxGroups`
       */
      sMaxGroups?: string
    ): this;
    /**
     * Setter for the supported operations array.
     */
    setOperations(
      /**
       * array of operations `[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]`
       */
      aOperations: Array<any>
    ): void;
    /**
     * Unbinds aggregation {@link #getGroupItems groupItems} from model data.
     */
    unbindGroupItems(): this;
    /**
     * Checks if the entered or modified conditions are correct, marks invalid fields yellow (Warning) and opens
     * a popup message dialog to let the user know that some values are not correct or missing.
     */
    validateConditions(): boolean;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addGroupItem addGroupItem} event of this `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been added.
     */
    attachAddGroupItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeGroupItem removeGroupItem} event of this
     * `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been removed.
     */
    attachRemoveGroupItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateGroupItem updateGroupItem} event of this
     * `sap.m.P13nGroupPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nGroupPanel` itself.
     *
     * Event raised if a `GroupItem` has been updated.
     */
    attachUpdateGroupItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nGroupPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nGroupPanelSettings extends $P13nPanelSettings {
    /**
     * Defines the maximum number of groups.
     */
    maxGroups?: string | PropertyBindingInfo;

    /**
     * Defines if `mediaQuery` or `ContainerResize` is used for a layout update. If `ConditionPanel` is used
     * in a dialog, the property must be set to true.
     */
    containerQuery?: boolean | PropertyBindingInfo;

    /**
     * Can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    layoutMode?: string | PropertyBindingInfo;

    /**
     * Defined group items.
     */
    groupItems?: P13nGroupItem[] | P13nGroupItem | AggregationBindingInfo;

    /**
     * Event raised if a `GroupItem` has been added.
     */
    addGroupItem?: Function;

    /**
     * Event raised if a `GroupItem` has been removed.
     */
    removeGroupItem?: Function;

    /**
     * Event raised if a `GroupItem` has been updated.
     */
    updateGroupItem?: Function;
  }
}

declare module "sap/m/P13nItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.26.0
   *
   * Base type for `items` aggregation in `P13nPanel` control.
   */
  export default class P13nItem extends UI5Element {
    /**
     * Constructor for a new P13nItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nItemSettings
    );
    /**
     * Constructor for a new P13nItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.34.0
     *
     * Gets current value of property {@link #getAggregationRole aggregationRole}.
     *
     * Defines aggregation role
     */
    getAggregationRole(): string;
    /**
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * Can be used as input for subsequent actions.
     */
    getColumnKey(): string;
    /**
     * @SINCE 1.56.0
     *
     * Gets current value of property {@link #getDescription description}.
     *
     * Defines additional information of the link.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getFormatSettings formatSettings}.
     *
     * A JSON object containing the formatSettings which will be used to pass additional type/format settings
     * for the entered value. if type==time or date or datetime the object will be used for the DateFormatter,
     * TimeFormatter or DateTimeFormatter
     *
     * Below you can find a brief example
     *
     *
     * ```javascript
     *
     * {
     * 		UTC: false,
     * 		style: "medium" //"short" or "long"
     * }
     * ```
     */
    getFormatSettings(): object;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getHref href}.
     *
     * Defines href of a link.
     */
    getHref(): string;
    /**
     * Gets current value of property {@link #getIsDefault isDefault}.
     *
     * the column with isDefault==true will be used as the selected column item on the conditionPanel
     *
     * Default value is `false`.
     */
    getIsDefault(): boolean;
    /**
     * Gets current value of property {@link #getMaxLength maxLength}.
     *
     * specifies the number of characters which can be entered in the value fields of the condition panel
     */
    getMaxLength(): string;
    /**
     * Returns a metadata object for class sap.m.P13nItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNullable nullable}.
     *
     * Defines if the item is nullable
     *
     * Default value is `false`.
     */
    getNullable(): boolean;
    /**
     * Gets current value of property {@link #getPrecision precision}.
     *
     * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used
     * Formatter)
     */
    getPrecision(): string;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getPress press}.
     *
     * Defines press handler of a link.
     */
    getPress(): object;
    /**
     * @SINCE 1.34.0
     *
     * Gets current value of property {@link #getRole role}.
     *
     * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
     */
    getRole(): string;
    /**
     * Gets current value of property {@link #getScale scale}.
     *
     * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
     */
    getScale(): string;
    /**
     * Gets current value of property {@link #getTarget target}.
     *
     * Defines target of a link.
     */
    getTarget(): string;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * data type of the column (text, numeric or date is supported)
     *
     * Default value is `"text"`.
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getTypeInstance typeInstance}.
     *
     * data type instance of the column. Can be used instead of the type, precision, scale and formatSettings
     * properties
     */
    getTypeInstance(): object;
    /**
     * @SINCE 1.34.0
     *
     * Gets current value of property {@link #getValues values}.
     *
     * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank
     * the value field). Next value represent the false value, last entry the true value.
     */
    getValues(): string[];
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Defines visibility of column
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines column width
     */
    getWidth(): string;
    /**
     * @SINCE 1.34.0
     *
     * Sets a new value for property {@link #getAggregationRole aggregationRole}.
     *
     * Defines aggregation role
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAggregationRole(
      /**
       * New value for property `aggregationRole`
       */
      sAggregationRole?: string
    ): this;
    /**
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * Can be used as input for subsequent actions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey?: string
    ): this;
    /**
     * @SINCE 1.56.0
     *
     * Sets a new value for property {@link #getDescription description}.
     *
     * Defines additional information of the link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFormatSettings formatSettings}.
     *
     * A JSON object containing the formatSettings which will be used to pass additional type/format settings
     * for the entered value. if type==time or date or datetime the object will be used for the DateFormatter,
     * TimeFormatter or DateTimeFormatter
     *
     * Below you can find a brief example
     *
     *
     * ```javascript
     *
     * {
     * 		UTC: false,
     * 		style: "medium" //"short" or "long"
     * }
     * ```
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFormatSettings(
      /**
       * New value for property `formatSettings`
       */
      oFormatSettings?: object
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getHref href}.
     *
     * Defines href of a link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHref(
      /**
       * New value for property `href`
       */
      sHref?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIsDefault isDefault}.
     *
     * the column with isDefault==true will be used as the selected column item on the conditionPanel
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIsDefault(
      /**
       * New value for property `isDefault`
       */
      bIsDefault?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxLength maxLength}.
     *
     * specifies the number of characters which can be entered in the value fields of the condition panel
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxLength(
      /**
       * New value for property `maxLength`
       */
      sMaxLength?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNullable nullable}.
     *
     * Defines if the item is nullable
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setNullable(
      /**
       * New value for property `nullable`
       */
      bNullable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getPrecision precision}.
     *
     * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used
     * Formatter)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPrecision(
      /**
       * New value for property `precision`
       */
      sPrecision?: string
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getPress press}.
     *
     * Defines press handler of a link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPress(
      /**
       * New value for property `press`
       */
      oPress?: object
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets a new value for property {@link #getRole role}.
     *
     * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRole(
      /**
       * New value for property `role`
       */
      sRole?: string
    ): this;
    /**
     * Sets a new value for property {@link #getScale scale}.
     *
     * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setScale(
      /**
       * New value for property `scale`
       */
      sScale?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTarget target}.
     *
     * Defines target of a link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTarget(
      /**
       * New value for property `target`
       */
      sTarget?: string
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * The text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * data type of the column (text, numeric or date is supported)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"text"`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTypeInstance typeInstance}.
     *
     * data type instance of the column. Can be used instead of the type, precision, scale and formatSettings
     * properties
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTypeInstance(
      /**
       * New value for property `typeInstance`
       */
      oTypeInstance?: object
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets a new value for property {@link #getValues values}.
     *
     * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank
     * the value field). Next value represent the false value, last entry the true value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValues(
      /**
       * New value for property `values`
       */
      sValues?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Defines visibility of column
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines column width
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: string
    ): this;
  }

  export interface $P13nItemSettings extends $ElementSettings {
    /**
     * Can be used as input for subsequent actions.
     */
    columnKey?: string | PropertyBindingInfo;

    /**
     * The text to be displayed for the item.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines visibility of column
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * data type of the column (text, numeric or date is supported)
     */
    type?: string | PropertyBindingInfo;

    /**
     * data type instance of the column. Can be used instead of the type, precision, scale and formatSettings
     * properties
     */
    typeInstance?: object | PropertyBindingInfo;

    /**
     * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used
     * Formatter)
     */
    precision?: string | PropertyBindingInfo;

    /**
     * A JSON object containing the formatSettings which will be used to pass additional type/format settings
     * for the entered value. if type==time or date or datetime the object will be used for the DateFormatter,
     * TimeFormatter or DateTimeFormatter
     *
     * Below you can find a brief example
     *
     *
     * ```javascript
     *
     * {
     * 		UTC: false,
     * 		style: "medium" //"short" or "long"
     * }
     * ```
     */
    formatSettings?: object | PropertyBindingInfo;

    /**
     * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
     */
    scale?: string | PropertyBindingInfo;

    /**
     * specifies the number of characters which can be entered in the value fields of the condition panel
     */
    maxLength?: string | PropertyBindingInfo;

    /**
     * Defines column width
     */
    width?: string | PropertyBindingInfo;

    /**
     * the column with isDefault==true will be used as the selected column item on the conditionPanel
     */
    isDefault?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank
     * the value field). Next value represent the false value, last entry the true value.
     */
    values?: string[] | PropertyBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
     */
    role?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * Defines aggregation role
     */
    aggregationRole?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * Defines href of a link.
     */
    href?: string | PropertyBindingInfo;

    /**
     * Defines target of a link.
     */
    target?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * Defines press handler of a link.
     */
    press?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.56.0
     *
     * Defines additional information of the link.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines if the item is nullable
     */
    nullable?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nPanel" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import P13nItem from "sap/m/P13nItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * An abstract base type for `panels` aggregation in `P13nDialog` control.
   */
  export default class P13nPanel extends Control {
    /**
     * Constructor for a new P13nPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nPanelSettings
    );
    /**
     * Constructor for a new P13nPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nPanelSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: P13nItem
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeNavigationTo beforeNavigationTo} event
     * of this `sap.m.P13nPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nPanel` itself.
     *
     * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
     */
    attachBeforeNavigationTo(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * This method defines the point in time before the panel becomes active.
     */
    beforeNavigationTo(): void;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.28.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:beforeNavigationTo beforeNavigationTo} event
     * of this `sap.m.P13nPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeNavigationTo(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nPanel with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.28.0
     *
     * Fires event {@link #event:beforeNavigationTo beforeNavigationTo} to attached listeners.
     */
    fireBeforeNavigationTo(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getChangeNotifier changeNotifier}.
     *
     * Callback which notifies a change on this panel.
     */
    getChangeNotifier(): object;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines personalization items (e.g. columns in the `P13nColumnsPanel`).
     */
    getItems(): P13nItem[];
    /**
     * Returns a metadata object for class sap.m.P13nPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.26.7
     * @deprecated (since 1.50) - replaced by the event of the respective inherited control, for example {@link
     * sap.m.P13nColumnsPanel#event:changeColumnsItems} of `P13nColumnsPanel` control.
     *
     * This method can be overwritten by subclass in order to return a payload for Ok action
     */
    getOkPayload(): object;
    /**
     * @SINCE 1.28.0
     *
     * This method can be overwritten by subclass in order to return a payload for Reset action
     */
    getResetPayload(): void;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title text appears in the panel.
     */
    getTitle(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getTitleLarge titleLarge}.
     *
     * Large title text appears e.g. in dialog header in case that only one panel is shown.
     */
    getTitleLarge(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Panel type for generic use. Due to extensibility reason the type of `type` property should be `string`.
     * So it is feasible to add a custom panel without expanding the type.
     */
    getType(): string;
    /**
     * Gets current value of property {@link #getValidationExecutor validationExecutor}.
     *
     * Callback method which is called in order to validate end user entry.
     */
    getValidationExecutor(): object;
    /**
     * Gets current value of property {@link #getValidationListener validationListener}.
     *
     * Callback method which is called in order to register for validation result.
     */
    getValidationListener(): object;
    /**
     * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
     *
     * Enables the vertical Scrolling on the `P13nDialog` when the panel is shown.
     *
     * Default value is `true`.
     */
    getVerticalScrolling(): boolean;
    /**
     * Checks for the provided `sap.m.P13nItem` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: P13nItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: P13nItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove invalid
     * content on the panel.
     */
    onAfterNavigationFrom(): void;
    /**
     * @SINCE 1.28.0
     *
     * This method can be overwritten by subclass in order to prevent navigation to another panel. This could
     * be the case if some content on the panel is considered 'invalid'.
     */
    onBeforeNavigationFrom(): boolean;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): P13nItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | P13nItem
    ): P13nItem;
    /**
     * Sets a new value for property {@link #getChangeNotifier changeNotifier}.
     *
     * Callback which notifies a change on this panel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setChangeNotifier(
      /**
       * New value for property `changeNotifier`
       */
      oChangeNotifier?: object
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title text appears in the panel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getTitleLarge titleLarge}.
     *
     * Large title text appears e.g. in dialog header in case that only one panel is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitleLarge(
      /**
       * New value for property `titleLarge`
       */
      sTitleLarge?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Panel type for generic use. Due to extensibility reason the type of `type` property should be `string`.
     * So it is feasible to add a custom panel without expanding the type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
     *
     * Callback method which is called in order to validate end user entry.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValidationExecutor(
      /**
       * New value for property `validationExecutor`
       */
      oValidationExecutor?: object
    ): this;
    /**
     * Sets a new value for property {@link #getValidationListener validationListener}.
     *
     * Callback method which is called in order to register for validation result.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValidationListener(
      /**
       * New value for property `validationListener`
       */
      oValidationListener?: object
    ): this;
    /**
     * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
     *
     * Enables the vertical Scrolling on the `P13nDialog` when the panel is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVerticalScrolling(
      /**
       * New value for property `verticalScrolling`
       */
      bVerticalScrolling?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.28.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeNavigationTo beforeNavigationTo} event
     * of this `sap.m.P13nPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nPanel` itself.
     *
     * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
     */
    attachBeforeNavigationTo(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nPanelSettings extends $ControlSettings {
    /**
     * Title text appears in the panel.
     */
    title?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Large title text appears e.g. in dialog header in case that only one panel is shown.
     */
    titleLarge?: string | PropertyBindingInfo;

    /**
     * Panel type for generic use. Due to extensibility reason the type of `type` property should be `string`.
     * So it is feasible to add a custom panel without expanding the type.
     */
    type?: string | PropertyBindingInfo;

    /**
     * Enables the vertical Scrolling on the `P13nDialog` when the panel is shown.
     */
    verticalScrolling?: boolean | PropertyBindingInfo;

    /**
     * Callback method which is called in order to validate end user entry.
     */
    validationExecutor?: object | PropertyBindingInfo;

    /**
     * Callback method which is called in order to register for validation result.
     */
    validationListener?: object | PropertyBindingInfo;

    /**
     * Callback which notifies a change on this panel.
     */
    changeNotifier?: object | PropertyBindingInfo;

    /**
     * Defines personalization items (e.g. columns in the `P13nColumnsPanel`).
     */
    items?: P13nItem[] | P13nItem | AggregationBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
     */
    beforeNavigationTo?: Function;
  }
}

declare module "sap/m/P13nSortItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.26.0
   *
   * Type for `sortItems` aggregation in P13nSortPanel control.
   */
  export default class P13nSortItem extends Item {
    /**
     * Constructor for a new P13nSortItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nSortItemSettings
    );
    /**
     * Constructor for a new P13nSortItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nSortItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.P13nSortItem with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nSortItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getColumnKey columnKey}.
     *
     * key of the column
     */
    getColumnKey(): string;
    /**
     * Returns a metadata object for class sap.m.P13nSortItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     */
    getOperation(): string;
    /**
     * Sets a new value for property {@link #getColumnKey columnKey}.
     *
     * key of the column
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnKey(
      /**
       * New value for property `columnKey`
       */
      sColumnKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOperation operation}.
     *
     * sap.m.P13nConditionOperation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setOperation(
      /**
       * New value for property `operation`
       */
      sOperation?: string
    ): this;
  }

  export interface $P13nSortItemSettings extends $ItemSettings {
    /**
     * sap.m.P13nConditionOperation
     */
    operation?: string | PropertyBindingInfo;

    /**
     * key of the column
     */
    columnKey?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/P13nSortPanel" {
  import { default as P13nPanel, $P13nPanelSettings } from "sap/m/P13nPanel";

  import P13nSortItem from "sap/m/P13nSortItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The P13nSortPanel control is used to define settings for sorting in table personalization.
   */
  export default class P13nSortPanel extends P13nPanel {
    /**
     * Constructor for a new P13nSortPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nSortPanelSettings
    );
    /**
     * Constructor for a new P13nSortPanel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $P13nSortPanelSettings
    );

    /**
     * Adds some sortItem to the aggregation {@link #getSortItems sortItems}.
     */
    addSortItem(
      /**
       * The sortItem to add; if empty, nothing is inserted
       */
      oSortItem: P13nSortItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addSortItem addSortItem} event of this `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was added
     */
    attachAddSortItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeSortItem removeSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was removed
     */
    attachRemoveSortItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateSortItem updateSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was updated
     */
    attachUpdateSortItem(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getSortItems sortItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindSortItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the sortItems in the aggregation {@link #getSortItems sortItems}.
     */
    destroySortItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addSortItem addSortItem} event of this `sap.m.P13nSortPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAddSortItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:removeSortItem removeSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRemoveSortItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:updateSortItem updateSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateSortItem(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.P13nSortPanel with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, P13nSortPanel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:addSortItem addSortItem} to attached listeners.
     */
    fireAddSortItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:removeSortItem removeSortItem} to attached listeners.
     */
    fireRemoveSortItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:updateSortItem updateSortItem} to attached listeners.
     */
    fireUpdateSortItem(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getContainerQuery containerQuery}.
     *
     * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel
     * is used on a dialog the property should be set to true!
     *
     * Default value is `false`.
     */
    getContainerQuery(): boolean;
    /**
     * Gets current value of property {@link #getLayoutMode layoutMode}.
     *
     * can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    getLayoutMode(): string;
    /**
     * Returns a metadata object for class sap.m.P13nSortPanel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getSortItems sortItems}.
     *
     * defined Sort Items
     */
    getSortItems(): P13nSortItem[];
    /**
     * Checks for the provided `sap.m.P13nSortItem` in the aggregation {@link #getSortItems sortItems}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfSortItem(
      /**
       * The sortItem whose index is looked for
       */
      oSortItem: P13nSortItem
    ): int;
    /**
     * Inserts a sortItem into the aggregation {@link #getSortItems sortItems}.
     */
    insertSortItem(
      /**
       * The sortItem to insert; if empty, nothing is inserted
       */
      oSortItem: P13nSortItem,
      /**
       * The `0`-based index the sortItem should be inserted at; for a negative value of `iIndex`, the sortItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the sortItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getSortItems sortItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSortItems(): P13nSortItem[];
    /**
     * @SINCE 1.28
     *
     * removes all invalid sort conditions.
     */
    removeInvalidConditions(): void;
    /**
     * Removes a sortItem from the aggregation {@link #getSortItems sortItems}.
     */
    removeSortItem(
      /**
       * The sortItem to remove or its index or id
       */
      vSortItem: int | string | P13nSortItem
    ): P13nSortItem;
    /**
     * @SINCE 1.28
     *
     * removes all errors/warning states from of all sort conditions.
     */
    removeValidationErrors(): void;
    /**
     * Sets a new value for property {@link #getContainerQuery containerQuery}.
     *
     * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel
     * is used on a dialog the property should be set to true!
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setContainerQuery(
      /**
       * New value for property `containerQuery`
       */
      bContainerQuery?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLayoutMode layoutMode}.
     *
     * can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLayoutMode(
      /**
       * New value for property `layoutMode`
       */
      sLayoutMode?: string
    ): this;
    /**
     * setter for the supported operations array
     */
    setOperations(
      /**
       * array of operations `[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]`
       */
      aOperations: Array<any>
    ): this;
    /**
     * Unbinds aggregation {@link #getSortItems sortItems} from model data.
     */
    unbindSortItems(): this;
    /**
     * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and
     * opens a popup message dialog to give the user the feedback that some values are wrong or missing.
     */
    validateConditions(): boolean;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addSortItem addSortItem} event of this `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was added
     */
    attachAddSortItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removeSortItem removeSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was removed
     */
    attachRemoveSortItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:updateSortItem updateSortItem} event of this
     * `sap.m.P13nSortPanel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.P13nSortPanel` itself.
     *
     * event raised when a SortItem was updated
     */
    attachUpdateSortItem(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.P13nSortPanel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $P13nSortPanelSettings extends $P13nPanelSettings {
    /**
     * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel
     * is used on a dialog the property should be set to true!
     */
    containerQuery?: boolean | PropertyBindingInfo;

    /**
     * can be used to control the layout behavior. Default is "" which will automatically change the layout.
     * With "Desktop", "Table" or "Phone" you can set a fixed layout.
     */
    layoutMode?: string | PropertyBindingInfo;

    /**
     * defined Sort Items
     */
    sortItems?: P13nSortItem[] | P13nSortItem | AggregationBindingInfo;

    /**
     * event raised when a SortItem was added
     */
    addSortItem?: Function;

    /**
     * event raised when a SortItem was removed
     */
    removeSortItem?: Function;

    /**
     * event raised when a SortItem was updated
     */
    updateSortItem?: Function;
  }
}

declare module "sap/m/Page" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    PageBackgroundDesign,
    IBar,
    ButtonType,
    TitleAlignment,
  } from "sap/m/library";

  import { URI, TitleLevel } from "sap/ui/core/library";

  import PageAccessibleLandmarkInfo from "sap/m/PageAccessibleLandmarkInfo";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import UI5Element from "sap/ui/core/Element";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A container control that holds one whole screen of an application.
   *
   * Overview: The sap.m.Page is a container control that holds one whole screen of an application. The page
   * has three distinct areas that can hold content - a header, content area and a footer. Structure: Header:
   * The top most area of the page is occupied by the header. The standard header includes a navigation button
   * and a title. Alternatively, you can create your own custom header, which is defined in the `customHeader`
   * aggregation. Content: The content occupies the main part of the page. Only the content area is scrollable
   * by default. This can be prevented by setting `enableScrolling` to `false`. Footer: The footer is optional
   * and occupies the fixed bottom part of the page. Alternatively, the footer can be floating above the bottom
   * part of the content. This is enabled with the `floatingFooter` property.
   *
   * **Note:** All accessibility information for the different areas and their corresponding ARIA roles is
   * set in the aggregation `landmarkInfo` of type {@link sap.m.PageAccessibleLandmarkInfo} Responsive Behavior:
   * When using the sap.m.Page in SAP Quartz theme, the breakpoints and layout paddings could be determined
   * by the container's width. To enable this concept and add responsive paddings to an element of the Page
   * control, you may add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * `sapUiResponsivePadding--subHeader`, `sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`,
   * `sapUiResponsivePadding--floatingFooter`.
   */
  export default class Page extends Control {
    /**
     * Constructor for a new Page.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PageSettings
    );
    /**
     * Constructor for a new Page.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PageSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some headerContent to the aggregation {@link #getHeaderContent headerContent}.
     */
    addHeaderContent(
      /**
       * The headerContent to add; if empty, nothing is inserted
       */
      oHeaderContent: Control
    ): this;
    /**
     * @SINCE 1.12.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.Page`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Page` itself.
     *
     * this event is fired when Nav Button is pressed
     */
    attachNavButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Page` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.12.2) - the navButtonPress event is replacing this event
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonTap navButtonTap} event of this `sap.m.Page`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Page` itself.
     *
     * this event is fired when Nav Button is tapped
     */
    attachNavButtonTap(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Page` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
     */
    destroyCustomHeader(): this;
    /**
     * Destroys the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * Destroys all the headerContent in the aggregation {@link #getHeaderContent headerContent}.
     */
    destroyHeaderContent(): this;
    /**
     * Destroys the landmarkInfo in the aggregation {@link #getLandmarkInfo landmarkInfo}.
     */
    destroyLandmarkInfo(): this;
    /**
     * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
     */
    destroySubHeader(): this;
    /**
     * @SINCE 1.12.2
     *
     * Detaches event handler `fnFunction` from the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.Page`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.12.2) - the navButtonPress event is replacing this event
     *
     * Detaches event handler `fnFunction` from the {@link #event:navButtonTap navButtonTap} event of this `sap.m.Page`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavButtonTap(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Page with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Page>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.12.2
     *
     * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
     */
    fireNavButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @deprecated (since 1.12.2) - the navButtonPress event is replacing this event
     *
     * Fires event {@link #event:navButtonTap navButtonTap} to attached listeners.
     */
    fireNavButtonTap(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * This property is used to set the background color of a page. When a list is placed inside a page, the
     * value "List" should be used to display a gray background. "Standard", with the default background color,
     * is used if not specified.
     *
     * Default value is `Standard`.
     */
    getBackgroundDesign():
      | PageBackgroundDesign
      | keyof typeof PageBackgroundDesign;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of this page
     */
    getContent(): Control[];
    /**
     * @SINCE 1.29.0
     *
     * Gets current value of property {@link #getContentOnlyBusy contentOnlyBusy}.
     *
     * Decides which area is covered by the local BusyIndicator when `page.setBusy()` is called. By default
     * the entire page is covered, including headers and footer. When this property is set to "true", only the
     * content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField
     * in the sub header and live search continuously updates the content area while the user is still able
     * to type.
     *
     * Default value is `false`.
     */
    getContentOnlyBusy(): boolean;
    /**
     * Gets content of aggregation {@link #getCustomHeader customHeader}.
     *
     * The (optional) custom header of this page. Use this aggregation only when a custom header is constructed
     * where the default header consisting of title text + nav button is not sufficient. If this aggregation
     * is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
     */
    getCustomHeader(): IBar;
    /**
     * Gets current value of property {@link #getEnableScrolling enableScrolling}.
     *
     * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll. If
     * set to false, there will be no vertical scrolling at all.
     *
     * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page
     * content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page
     * content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling
     * sub-areas of (vertically-scrolling) Pages.
     *
     * Default value is `true`.
     */
    getEnableScrolling(): boolean;
    /**
     * Gets current value of property {@link #getFloatingFooter floatingFooter}.
     *
     * Decides whether the footer can float. When set to true, the footer is not fixed below the content area
     * anymore, but rather floats over it with a slight offset from the bottom.
     *
     * Default value is `false`.
     */
    getFloatingFooter(): boolean;
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * The (optional) footer of this page. It is always located at the bottom of the page
     */
    getFooter(): IBar;
    /**
     * Gets content of aggregation {@link #getHeaderContent headerContent}.
     *
     * Controls to be added to the right side of the page header. Usually an application would use Button controls
     * and limit the number to one when the application needs to run on smartphones. There is no automatic overflow
     * handling when the space is insufficient. When a customHeader is used, this aggregation will be ignored.
     */
    getHeaderContent(): Control[];
    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * Gets current value of property {@link #getIcon icon}.
     *
     * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is
     * theme-dependent and only has an effect in the MVI theme.
     */
    getIcon(): URI;
    /**
     * Gets content of aggregation {@link #getLandmarkInfo landmarkInfo}.
     *
     * Accessible landmark settings to be applied on the containers of the `sap.m.Page` control.
     *
     * If not set, no landmarks will be written.
     */
    getLandmarkInfo(): PageAccessibleLandmarkInfo;
    /**
     * Returns a metadata object for class sap.m.Page.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * Gets current value of property {@link #getNavButtonText navButtonText}.
     *
     * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which
     * is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
     */
    getNavButtonText(): string;
    /**
     * Gets current value of property {@link #getNavButtonTooltip navButtonTooltip}.
     *
     * The tooltip of the nav button
     *
     * Since version 1.34
     */
    getNavButtonTooltip(): string;
    /**
     * @SINCE 1.12
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property is only usable
     * with a Button text in that theme.
     *
     * Gets current value of property {@link #getNavButtonType navButtonType}.
     *
     * This property is used to set the appearance of the NavButton. By default when showNavButton is set to
     * true, a back button will be shown in iOS and an up button in other platforms. In case you want to show
     * a normal button in the left header area, you can set the value to "Default".
     *
     * Default value is `Back`.
     */
    getNavButtonType(): ButtonType | keyof typeof ButtonType;
    /**
     * @SINCE 1.13.1
     *
     * Gets current value of property {@link #getShowFooter showFooter}.
     *
     * Whether this page shall have a footer
     *
     * Default value is `true`.
     */
    getShowFooter(): boolean;
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * Whether this page shall have a header. If set to true, either the control under the "customHeader" aggregation
     * is used, or if there is no such control, a Header control is constructed from the properties "title",
     * "showNavButton", "navButtonText" and "icon" depending on the platform.
     *
     * Default value is `true`.
     */
    getShowHeader(): boolean;
    /**
     * Gets current value of property {@link #getShowNavButton showNavButton}.
     *
     * A nav button will be rendered on the left area of header bar if this property is set to true.
     *
     * Default value is `false`.
     */
    getShowNavButton(): boolean;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getShowSubHeader showSubHeader}.
     *
     * Whether this page shall show the subheader.
     *
     * Default value is `true`.
     */
    getShowSubHeader(): boolean;
    /**
     * Gets content of aggregation {@link #getSubHeader subHeader}.
     *
     * a subHeader will be rendered directly under the header
     */
    getSubHeader(): IBar;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * The title text appearing in the page header bar.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Gets current value of property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title. Using "Auto" no explicit level information is written. Used
     * for accessibility purposes only.
     *
     * Default value is `Auto`.
     */
    getTitleLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeaderContent headerContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfHeaderContent(
      /**
       * The headerContent whose index is looked for
       */
      oHeaderContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a headerContent into the aggregation {@link #getHeaderContent headerContent}.
     */
    insertHeaderContent(
      /**
       * The headerContent to insert; if empty, nothing is inserted
       */
      oHeaderContent: Control,
      /**
       * The `0`-based index the headerContent should be inserted at; for a negative value of `iIndex`, the headerContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the headerContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getHeaderContent headerContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeaderContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a headerContent from the aggregation {@link #getHeaderContent headerContent}.
     */
    removeHeaderContent(
      /**
       * The headerContent to remove or its index or id
       */
      vHeaderContent: int | string | Control
    ): Control;
    /**
     * Scrolls to the given position. Only available if enableScrolling is set to "true".
     */
    scrollTo(
      /**
       * The vertical pixel position to scroll to. Scrolling down happens with positive values.
       */
      y: int,
      /**
       * The duration of animated scrolling in milliseconds. The value `0` results in immediate scrolling without
       * animation.
       */
      time?: int
    ): this;
    /**
     * @SINCE 1.30
     *
     * Scrolls to an element (DOM or sap.ui.core.Element) within the page if the element is rendered.
     */
    scrollToElement(
      /**
       * The element to which should be scrolled.
       */
      oElement: HTMLElement | UI5Element,
      /**
       * The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as
       * value.
       */
      iTime?: int,
      /**
       * Specifies an additional left and top offset of the target scroll position, relative to the upper left
       * corner of the DOM element
       */
      aOffset?: int[]
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * This property is used to set the background color of a page. When a list is placed inside a page, the
     * value "List" should be used to display a gray background. "Standard", with the default background color,
     * is used if not specified.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?:
        | PageBackgroundDesign
        | keyof typeof PageBackgroundDesign
    ): this;
    /**
     * @SINCE 1.29.0
     *
     * Sets a new value for property {@link #getContentOnlyBusy contentOnlyBusy}.
     *
     * Decides which area is covered by the local BusyIndicator when `page.setBusy()` is called. By default
     * the entire page is covered, including headers and footer. When this property is set to "true", only the
     * content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField
     * in the sub header and live search continuously updates the content area while the user is still able
     * to type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setContentOnlyBusy(
      /**
       * New value for property `contentOnlyBusy`
       */
      bContentOnlyBusy?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getCustomHeader customHeader}.
     */
    setCustomHeader(
      /**
       * The customHeader to set
       */
      oCustomHeader: IBar
    ): this;
    /**
     * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
     *
     * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll. If
     * set to false, there will be no vertical scrolling at all.
     *
     * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page
     * content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page
     * content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling
     * sub-areas of (vertically-scrolling) Pages.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableScrolling(
      /**
       * New value for property `enableScrolling`
       */
      bEnableScrolling?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFloatingFooter floatingFooter}.
     *
     * Decides whether the footer can float. When set to true, the footer is not fixed below the content area
     * anymore, but rather floats over it with a slight offset from the bottom.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFloatingFooter(
      /**
       * New value for property `floatingFooter`
       */
      bFloatingFooter?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getFooter footer}.
     */
    setFooter(
      /**
       * The footer to set
       */
      oFooter: IBar
    ): this;
    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * Sets a new value for property {@link #getIcon icon}.
     *
     * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is
     * theme-dependent and only has an effect in the MVI theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets the aggregated {@link #getLandmarkInfo landmarkInfo}.
     */
    setLandmarkInfo(
      /**
       * The landmarkInfo to set
       */
      oLandmarkInfo: PageAccessibleLandmarkInfo
    ): this;
    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * Sets a new value for property {@link #getNavButtonText navButtonText}.
     *
     * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which
     * is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNavButtonText(
      /**
       * New value for property `navButtonText`
       */
      sNavButtonText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNavButtonTooltip navButtonTooltip}.
     *
     * The tooltip of the nav button
     *
     * Since version 1.34
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNavButtonTooltip(
      /**
       * New value for property `navButtonTooltip`
       */
      sNavButtonTooltip?: string
    ): this;
    /**
     * @SINCE 1.12
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property is only usable
     * with a Button text in that theme.
     *
     * Sets a new value for property {@link #getNavButtonType navButtonType}.
     *
     * This property is used to set the appearance of the NavButton. By default when showNavButton is set to
     * true, a back button will be shown in iOS and an up button in other platforms. In case you want to show
     * a normal button in the left header area, you can set the value to "Default".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Back`.
     */
    setNavButtonType(
      /**
       * New value for property `navButtonType`
       */
      sNavButtonType?: ButtonType | keyof typeof ButtonType
    ): this;
    /**
     * @SINCE 1.13.1
     *
     * Sets a new value for property {@link #getShowFooter showFooter}.
     *
     * Whether this page shall have a footer
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowFooter(
      /**
       * New value for property `showFooter`
       */
      bShowFooter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * Whether this page shall have a header. If set to true, either the control under the "customHeader" aggregation
     * is used, or if there is no such control, a Header control is constructed from the properties "title",
     * "showNavButton", "navButtonText" and "icon" depending on the platform.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowNavButton showNavButton}.
     *
     * A nav button will be rendered on the left area of header bar if this property is set to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowNavButton(
      /**
       * New value for property `showNavButton`
       */
      bShowNavButton?: boolean
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getShowSubHeader showSubHeader}.
     *
     * Whether this page shall show the subheader.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowSubHeader(
      /**
       * New value for property `showSubHeader`
       */
      bShowSubHeader?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getSubHeader subHeader}.
     */
    setSubHeader(
      /**
       * The subHeader to set
       */
      oSubHeader: IBar
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * The title text appearing in the page header bar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Sets a new value for property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title. Using "Auto" no explicit level information is written. Used
     * for accessibility purposes only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleLevel(
      /**
       * New value for property `titleLevel`
       */
      sTitleLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * @SINCE 1.12.2
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.Page`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Page` itself.
     *
     * this event is fired when Nav Button is pressed
     */
    attachNavButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Page` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.12.2) - the navButtonPress event is replacing this event
     *
     * Attaches event handler `fnFunction` to the {@link #event:navButtonTap navButtonTap} event of this `sap.m.Page`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Page` itself.
     *
     * this event is fired when Nav Button is tapped
     */
    attachNavButtonTap(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Page` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PageSettings extends $ControlSettings {
    /**
     * The title text appearing in the page header bar.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the semantic level of the title. Using "Auto" no explicit level information is written. Used
     * for accessibility purposes only.
     */
    titleLevel?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * A nav button will be rendered on the left area of header bar if this property is set to true.
     */
    showNavButton?: boolean | PropertyBindingInfo;

    /**
     * Whether this page shall have a header. If set to true, either the control under the "customHeader" aggregation
     * is used, or if there is no such control, a Header control is constructed from the properties "title",
     * "showNavButton", "navButtonText" and "icon" depending on the platform.
     */
    showHeader?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Whether this page shall show the subheader.
     */
    showSubHeader?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which
     * is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
     */
    navButtonText?: string | PropertyBindingInfo;

    /**
     * The tooltip of the nav button
     *
     * Since version 1.34
     */
    navButtonTooltip?: string | PropertyBindingInfo;

    /**
     * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll. If
     * set to false, there will be no vertical scrolling at all.
     *
     * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page
     * content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page
     * content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling
     * sub-areas of (vertically-scrolling) Pages.
     */
    enableScrolling?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property only affected
     * the NavButton in that theme.
     *
     * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is
     * theme-dependent and only has an effect in the MVI theme.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * This property is used to set the background color of a page. When a list is placed inside a page, the
     * value "List" should be used to display a gray background. "Standard", with the default background color,
     * is used if not specified.
     */
    backgroundDesign?:
      | (PageBackgroundDesign | keyof typeof PageBackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.12
     * @deprecated (since 1.20) - Deprecated since the MVI theme is removed now. This property is only usable
     * with a Button text in that theme.
     *
     * This property is used to set the appearance of the NavButton. By default when showNavButton is set to
     * true, a back button will be shown in iOS and an up button in other platforms. In case you want to show
     * a normal button in the left header area, you can set the value to "Default".
     */
    navButtonType?:
      | (ButtonType | keyof typeof ButtonType)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.13.1
     *
     * Whether this page shall have a footer
     */
    showFooter?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.29.0
     *
     * Decides which area is covered by the local BusyIndicator when `page.setBusy()` is called. By default
     * the entire page is covered, including headers and footer. When this property is set to "true", only the
     * content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField
     * in the sub header and live search continuously updates the content area while the user is still able
     * to type.
     */
    contentOnlyBusy?: boolean | PropertyBindingInfo;

    /**
     * Decides whether the footer can float. When set to true, the footer is not fixed below the content area
     * anymore, but rather floats over it with a slight offset from the bottom.
     */
    floatingFooter?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * The content of this page
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * The (optional) custom header of this page. Use this aggregation only when a custom header is constructed
     * where the default header consisting of title text + nav button is not sufficient. If this aggregation
     * is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
     */
    customHeader?: IBar;

    /**
     * The (optional) footer of this page. It is always located at the bottom of the page
     */
    footer?: IBar;

    /**
     * a subHeader will be rendered directly under the header
     */
    subHeader?: IBar;

    /**
     * Controls to be added to the right side of the page header. Usually an application would use Button controls
     * and limit the number to one when the application needs to run on smartphones. There is no automatic overflow
     * handling when the space is insufficient. When a customHeader is used, this aggregation will be ignored.
     */
    headerContent?: Control[] | Control | AggregationBindingInfo;

    /**
     * Accessible landmark settings to be applied on the containers of the `sap.m.Page` control.
     *
     * If not set, no landmarks will be written.
     */
    landmarkInfo?: PageAccessibleLandmarkInfo;

    /**
     * @deprecated (since 1.12.2) - the navButtonPress event is replacing this event
     *
     * this event is fired when Nav Button is tapped
     */
    navButtonTap?: Function;

    /**
     * @SINCE 1.12.2
     *
     * this event is fired when Nav Button is pressed
     */
    navButtonPress?: Function;
  }
}

declare module "sap/m/PageAccessibleLandmarkInfo" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { AccessibleLandmarkRole } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Settings for accessible landmarks which can be applied to the container elements of a `sap.m.Page` control.
   * These landmarks are e.g. used by assistive technologies (like screenreaders) to provide a meaningful
   * page overview.
   */
  export default class PageAccessibleLandmarkInfo extends UI5Element {
    /**
     * Constructor for a new `sap.m.PageAccessibleLandmarkInfo` element.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new element
       */
      mSettings?: $PageAccessibleLandmarkInfoSettings
    );
    /**
     * Constructor for a new `sap.m.PageAccessibleLandmarkInfo` element.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new element
       */
      mSettings?: $PageAccessibleLandmarkInfoSettings
    );

    /**
     * Creates a new subclass of class sap.m.PageAccessibleLandmarkInfo with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PageAccessibleLandmarkInfo>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getContentLabel contentLabel}.
     *
     * Texts that describe the landmark of the content container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    getContentLabel(): string;
    /**
     * Gets current value of property {@link #getContentRole contentRole}.
     *
     * Landmark role of the content container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * Default value is `"Main"`.
     */
    getContentRole():
      | AccessibleLandmarkRole
      | keyof typeof AccessibleLandmarkRole;
    /**
     * Gets current value of property {@link #getFooterLabel footerLabel}.
     *
     * Texts that describe the landmark of the footer container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    getFooterLabel(): string;
    /**
     * Gets current value of property {@link #getFooterRole footerRole}.
     *
     * Landmark role of the footer container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * Default value is `"Region"`.
     */
    getFooterRole():
      | AccessibleLandmarkRole
      | keyof typeof AccessibleLandmarkRole;
    /**
     * Gets current value of property {@link #getHeaderLabel headerLabel}.
     *
     * Texts that describe the landmark of the header container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    getHeaderLabel(): string;
    /**
     * Gets current value of property {@link #getHeaderRole headerRole}.
     *
     * Landmark role of the header container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * Default value is `"Region"`.
     */
    getHeaderRole():
      | AccessibleLandmarkRole
      | keyof typeof AccessibleLandmarkRole;
    /**
     * Returns a metadata object for class sap.m.PageAccessibleLandmarkInfo.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRootLabel rootLabel}.
     *
     * Texts that describe the landmark of the root container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    getRootLabel(): string;
    /**
     * Gets current value of property {@link #getRootRole rootRole}.
     *
     * Landmark role of the root container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * Default value is `"Region"`.
     */
    getRootRole(): AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole;
    /**
     * Gets current value of property {@link #getSubHeaderLabel subHeaderLabel}.
     *
     * Texts that describe the landmark of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    getSubHeaderLabel(): string;
    /**
     * Gets current value of property {@link #getSubHeaderRole subHeaderRole}.
     *
     * Landmark role of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * Default value is `"None"`.
     */
    getSubHeaderRole():
      | AccessibleLandmarkRole
      | keyof typeof AccessibleLandmarkRole;
    /**
     * Sets a new value for property {@link #getContentLabel contentLabel}.
     *
     * Texts that describe the landmark of the content container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentLabel(
      /**
       * New value for property `contentLabel`
       */
      sContentLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getContentRole contentRole}.
     *
     * Landmark role of the content container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Main"`.
     */
    setContentRole(
      /**
       * New value for property `contentRole`
       */
      sContentRole?:
        | AccessibleLandmarkRole
        | keyof typeof AccessibleLandmarkRole
    ): this;
    /**
     * Sets a new value for property {@link #getFooterLabel footerLabel}.
     *
     * Texts that describe the landmark of the footer container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFooterLabel(
      /**
       * New value for property `footerLabel`
       */
      sFooterLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFooterRole footerRole}.
     *
     * Landmark role of the footer container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Region"`.
     */
    setFooterRole(
      /**
       * New value for property `footerRole`
       */
      sFooterRole?: AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderLabel headerLabel}.
     *
     * Texts that describe the landmark of the header container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeaderLabel(
      /**
       * New value for property `headerLabel`
       */
      sHeaderLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderRole headerRole}.
     *
     * Landmark role of the header container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Region"`.
     */
    setHeaderRole(
      /**
       * New value for property `headerRole`
       */
      sHeaderRole?: AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole
    ): this;
    /**
     * Sets a new value for property {@link #getRootLabel rootLabel}.
     *
     * Texts that describe the landmark of the root container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRootLabel(
      /**
       * New value for property `rootLabel`
       */
      sRootLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRootRole rootRole}.
     *
     * Landmark role of the root container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Region"`.
     */
    setRootRole(
      /**
       * New value for property `rootRole`
       */
      sRootRole?: AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole
    ): this;
    /**
     * Sets a new value for property {@link #getSubHeaderLabel subHeaderLabel}.
     *
     * Texts that describe the landmark of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSubHeaderLabel(
      /**
       * New value for property `subHeaderLabel`
       */
      sSubHeaderLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSubHeaderRole subHeaderRole}.
     *
     * Landmark role of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     */
    setSubHeaderRole(
      /**
       * New value for property `subHeaderRole`
       */
      sSubHeaderRole?:
        | AccessibleLandmarkRole
        | keyof typeof AccessibleLandmarkRole
    ): this;
  }

  export interface $PageAccessibleLandmarkInfoSettings
    extends $ElementSettings {
    /**
     * Landmark role of the root container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     */
    rootRole?:
      | (AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole)
      | PropertyBindingInfo;

    /**
     * Texts that describe the landmark of the root container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    rootLabel?: string | PropertyBindingInfo;

    /**
     * Landmark role of the content container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     */
    contentRole?:
      | (AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole)
      | PropertyBindingInfo;

    /**
     * Texts that describe the landmark of the content container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    contentLabel?: string | PropertyBindingInfo;

    /**
     * Landmark role of the header container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     */
    headerRole?:
      | (AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole)
      | PropertyBindingInfo;

    /**
     * Texts that describe the landmark of the header container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    headerLabel?: string | PropertyBindingInfo;

    /**
     * Landmark role of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     */
    subHeaderRole?:
      | (AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole)
      | PropertyBindingInfo;

    /**
     * Texts that describe the landmark of the subheader container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    subHeaderLabel?: string | PropertyBindingInfo;

    /**
     * Landmark role of the footer container of the corresponding `sap.m.Page` control.
     *
     * If set to `sap.ui.core.AccessibleLandmarkRole.None`, no landmark will be added to the container.
     */
    footerRole?:
      | (AccessibleLandmarkRole | keyof typeof AccessibleLandmarkRole)
      | PropertyBindingInfo;

    /**
     * Texts that describe the landmark of the footer container of the corresponding `sap.m.Page` control.
     *
     * If not set (and a landmark different than `sap.ui.core.AccessibleLandmarkRole.None` is defined), a predefined
     * text is used.
     */
    footerLabel?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/PagingButton" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30
   *
   * Enables users to navigate between items/entities.
   */
  export default class PagingButton extends Control {
    /**
     * Constructor for a new PagingButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PagingButtonSettings
    );
    /**
     * Constructor for a new PagingButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PagingButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:positionChange positionChange} event of this
     * `sap.m.PagingButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PagingButton` itself.
     *
     * Fired when the current position is changed.
     */
    attachPositionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PagingButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:positionChange positionChange} event of this
     * `sap.m.PagingButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPositionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.PagingButton with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PagingButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:positionChange positionChange} to attached listeners.
     */
    firePositionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The number of the new position.
         */
        newPosition?: int;
        /**
         * The number of the old position.
         */
        oldPosition?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getCount count}.
     *
     * Determines the total count of items/entities that the control navigates through. The minimum number of
     * items/entities is 1.
     *
     * Default value is `1`.
     */
    getCount(): int;
    /**
     * Returns a metadata object for class sap.m.PagingButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.36
     *
     * Gets current value of property {@link #getNextButtonTooltip nextButtonTooltip}.
     *
     * Determines the tooltip of the next button.
     *
     * Default value is `empty string`.
     */
    getNextButtonTooltip(): string;
    /**
     * Gets current value of property {@link #getPosition position}.
     *
     * Determines the current position in the items/entities that the control navigates through. Starting (minimum)
     * number is 1.
     *
     * Default value is `1`.
     */
    getPosition(): int;
    /**
     * @SINCE 1.36
     *
     * Gets current value of property {@link #getPreviousButtonTooltip previousButtonTooltip}.
     *
     * Determines the tooltip of the previous button.
     *
     * Default value is `empty string`.
     */
    getPreviousButtonTooltip(): string;
    /**
     * Sets a new value for property {@link #getCount count}.
     *
     * Determines the total count of items/entities that the control navigates through. The minimum number of
     * items/entities is 1.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setCount(
      /**
       * New value for property `count`
       */
      iCount?: int
    ): this;
    /**
     * @SINCE 1.36
     *
     * Sets a new value for property {@link #getNextButtonTooltip nextButtonTooltip}.
     *
     * Determines the tooltip of the next button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setNextButtonTooltip(
      /**
       * New value for property `nextButtonTooltip`
       */
      sNextButtonTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPosition position}.
     *
     * Determines the current position in the items/entities that the control navigates through. Starting (minimum)
     * number is 1.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setPosition(
      /**
       * New value for property `position`
       */
      iPosition?: int
    ): this;
    /**
     * @SINCE 1.36
     *
     * Sets a new value for property {@link #getPreviousButtonTooltip previousButtonTooltip}.
     *
     * Determines the tooltip of the previous button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPreviousButtonTooltip(
      /**
       * New value for property `previousButtonTooltip`
       */
      sPreviousButtonTooltip?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:positionChange positionChange} event of this
     * `sap.m.PagingButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PagingButton` itself.
     *
     * Fired when the current position is changed.
     */
    attachPositionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PagingButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PagingButtonSettings extends $ControlSettings {
    /**
     * Determines the total count of items/entities that the control navigates through. The minimum number of
     * items/entities is 1.
     */
    count?: int | PropertyBindingInfo;

    /**
     * Determines the current position in the items/entities that the control navigates through. Starting (minimum)
     * number is 1.
     */
    position?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.36
     *
     * Determines the tooltip of the next button.
     */
    nextButtonTooltip?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.36
     *
     * Determines the tooltip of the previous button.
     */
    previousButtonTooltip?: string | PropertyBindingInfo;

    /**
     * Fired when the current position is changed.
     */
    positionChange?: Function;
  }
}

declare module "sap/m/Panel" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { PanelAccessibleRole, BackgroundDesign } from "sap/m/library";

  import Toolbar from "sap/m/Toolbar";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * A container control which has a header and content. Overview: The panel is a container for grouping and
   * displaying information. It can be collapsed to save space on the screen. Guidelines::
   * 	 - Nesting two or more panels is not recommended.
   * 	 - Do not stack too many panels on one page.  Structure: A panel consists of a title bar with a
   * 			header text or header toolbar, an info toolbar (optional), and a content area. Using the `headerToolbar`
   * 			aggregation, you can add a toolbar with any toolbar content (i.e. custom buttons, spacers, titles) inside
   * 			the title bar.
   *
   * There are two types of panels: fixed and expandable. Expendable panels are enabled by the `expandable`
   * property. Furthermore you can define an expand animation with the property `expandAnimation`. Usage:
   * When to use::
   * 	 - You need to group or display information and want to give users the option of hiding this information.
   *
   * 	 - You want to show additional information on demand (for example, a panel could show optional input
   * 			fields for an advanced search).
   * 	 - You want to create a panel with controls that do not require user interaction and are not part of
   * 			a form. Depending on the usage, change the `accessibleRole` property from the default `{@link sap.m.PanelAccessibleRole
   * 			Form}` to `{@link sap.m.PanelAccessibleRole Region}` or `{@link sap.m.PanelAccessibleRole Complementary}`.
   * 			 Responsive Behavior:
   * 	 - If the width of the panel is set to 100% (default), the panel and its children are resized responsively,
   * 			depending on its parent container.
   * 	 - If the panel has a fixed defined height, it will take up the space, even if the panel is collapsed.
   *
   * 	 - When the panel is expandable, an arrow icon (pointing to the right) appears in front of the header.
   *
   * 	 - When the animation is activated, expand/collapse uses a smooth animation to open or close the content
   * 			area.
   * 	 - When the panel expands/collapses, the arrow icon rotates 90 degrees clockwise/counter-clockwise.
   *
   * 	 - When the height uses the default property `auto`, the height of the content area is automatically
   * 			adjusted to match the height of its content.
   * 	 - When the height of the panel is set to a fixed size, the content area can be scrolled through.
   */
  export default class Panel extends Control {
    /**
     * Constructor for a new Panel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/panel/ Panel}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PanelSettings
    );
    /**
     * Constructor for a new Panel.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/panel/ Panel}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PanelSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * @SINCE 1.22
     *
     * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.m.Panel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Panel` itself.
     *
     * Indicates that the panel will expand or collapse.
     */
    attachExpand(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Panel` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys the headerToolbar in the aggregation {@link #getHeaderToolbar headerToolbar}.
     */
    destroyHeaderToolbar(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
     */
    destroyInfoToolbar(): this;
    /**
     * @SINCE 1.22
     *
     * Detaches event handler `fnFunction` from the {@link #event:expand expand} event of this `sap.m.Panel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachExpand(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Panel with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Panel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.22
     *
     * Fires event {@link #event:expand expand} to attached listeners.
     */
    fireExpand(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * If the panel will expand, this is true. If the panel will collapse, this is false.
         */
        expand?: boolean;
        /**
         * Identifies whether the event is triggered by an user interaction or by calling setExpanded.
         */
        triggeredByInteraction?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getAccessibleRole accessibleRole}.
     *
     * This property is used to set the accessible aria role of the Panel. Depending on the usage you can change
     * the role from the default `Form` to `Region` or `Complementary`.
     *
     * Default value is `Form`.
     */
    getAccessibleRole(): PanelAccessibleRole | keyof typeof PanelAccessibleRole;
    /**
     * @SINCE 1.30
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * This property is used to set the background color of the Panel. Depending on the theme you can change
     * the state of the background from "Solid" over "Translucent" to "Transparent".
     *
     * Default value is `Translucent`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Determines the content of the Panel. The content will be visible only when the Panel is expanded.
     */
    getContent(): Control[];
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getExpandable expandable}.
     *
     * Specifies whether the control is expandable. This allows for collapsing or expanding the infoToolbar
     * (if available) and content of the Panel. Note: If expandable is set to false, the Panel will always be
     * rendered expanded.
     *
     * Default value is `false`.
     */
    getExpandable(): boolean;
    /**
     * @SINCE 1.26
     *
     * Gets current value of property {@link #getExpandAnimation expandAnimation}.
     *
     * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
     * By default the animation is enabled.
     *
     * Default value is `true`.
     */
    getExpandAnimation(): boolean;
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getExpanded expanded}.
     *
     * Indicates whether the Panel is expanded or not. If expanded is set to true, then both the infoToolbar
     * (if available) and the content are rendered. If expanded is set to false, then only the headerText or
     * headerToolbar is rendered.
     *
     * Default value is `false`.
     */
    getExpanded(): boolean;
    /**
     * Gets current value of property {@link #getHeaderText headerText}.
     *
     * This property is used to set the header text of the Panel. The "headerText" is visible in both expanded
     * and collapsed state. Note: This property is overwritten by the "headerToolbar" aggregation.
     *
     * Default value is `empty string`.
     */
    getHeaderText(): string;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getHeaderToolbar headerToolbar}.
     *
     * This aggregation allows the use of a custom Toolbar as header for the Panel. The "headerToolbar" is visible
     * in both expanded and collapsed state. Use it when you want to add extra controls for user interactions
     * in the header. Note: This aggregation overwrites "headerText" property.
     */
    getHeaderToolbar(): Toolbar;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Determines the Panel height.
     *
     * Default value is `"auto"`.
     */
    getHeight(): CSSSize;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
     *
     * This aggregation allows the use of a custom Toolbar as information bar for the Panel. The "infoToolbar"
     * is placed below the header and is visible only in expanded state. Use it when you want to show extra
     * information to the user.
     */
    getInfoToolbar(): Toolbar;
    /**
     * Returns a metadata object for class sap.m.Panel.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Determines the Panel width.
     *
     * Default value is `"100%"`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.46
     *
     * Sets a new value for property {@link #getAccessibleRole accessibleRole}.
     *
     * This property is used to set the accessible aria role of the Panel. Depending on the usage you can change
     * the role from the default `Form` to `Region` or `Complementary`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Form`.
     */
    setAccessibleRole(
      /**
       * New value for property `accessibleRole`
       */
      sAccessibleRole?: PanelAccessibleRole | keyof typeof PanelAccessibleRole
    ): this;
    /**
     * @SINCE 1.30
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * This property is used to set the background color of the Panel. Depending on the theme you can change
     * the state of the background from "Solid" over "Translucent" to "Transparent".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Translucent`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getExpandable expandable}.
     *
     * Specifies whether the control is expandable. This allows for collapsing or expanding the infoToolbar
     * (if available) and content of the Panel. Note: If expandable is set to false, the Panel will always be
     * rendered expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setExpandable(
      /**
       * New value for property `expandable`
       */
      bExpandable?: boolean
    ): this;
    /**
     * @SINCE 1.26
     *
     * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
     *
     * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
     * By default the animation is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setExpandAnimation(
      /**
       * New value for property `expandAnimation`
       */
      bExpandAnimation?: boolean
    ): this;
    /**
     * Sets the expanded property of the control.
     */
    setExpanded(
      /**
       * Defines whether control is expanded or not.
       */
      bExpanded: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderText headerText}.
     *
     * This property is used to set the header text of the Panel. The "headerText" is visible in both expanded
     * and collapsed state. Note: This property is overwritten by the "headerToolbar" aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeaderText(
      /**
       * New value for property `headerText`
       */
      sHeaderText?: string
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the aggregated {@link #getHeaderToolbar headerToolbar}.
     */
    setHeaderToolbar(
      /**
       * The headerToolbar to set
       */
      oHeaderToolbar: Toolbar
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Determines the Panel height.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"auto"`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
     */
    setInfoToolbar(
      /**
       * The infoToolbar to set
       */
      oInfoToolbar: Toolbar
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Determines the Panel width.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.22
     *
     * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.m.Panel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Panel` itself.
     *
     * Indicates that the panel will expand or collapse.
     */
    attachExpand(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Panel` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PanelSettings extends $ControlSettings {
    /**
     * This property is used to set the header text of the Panel. The "headerText" is visible in both expanded
     * and collapsed state. Note: This property is overwritten by the "headerToolbar" aggregation.
     */
    headerText?: string | PropertyBindingInfo;

    /**
     * Determines the Panel width.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines the Panel height.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Specifies whether the control is expandable. This allows for collapsing or expanding the infoToolbar
     * (if available) and content of the Panel. Note: If expandable is set to false, the Panel will always be
     * rendered expanded.
     */
    expandable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Indicates whether the Panel is expanded or not. If expanded is set to true, then both the infoToolbar
     * (if available) and the content are rendered. If expanded is set to false, then only the headerText or
     * headerToolbar is rendered.
     */
    expanded?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.26
     *
     * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
     * By default the animation is enabled.
     */
    expandAnimation?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30
     *
     * This property is used to set the background color of the Panel. Depending on the theme you can change
     * the state of the background from "Solid" over "Translucent" to "Transparent".
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * This property is used to set the accessible aria role of the Panel. Depending on the usage you can change
     * the role from the default `Form` to `Region` or `Complementary`.
     */
    accessibleRole?:
      | (PanelAccessibleRole | keyof typeof PanelAccessibleRole)
      | PropertyBindingInfo;

    /**
     * Determines the content of the Panel. The content will be visible only when the Panel is expanded.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.16
     *
     * This aggregation allows the use of a custom Toolbar as header for the Panel. The "headerToolbar" is visible
     * in both expanded and collapsed state. Use it when you want to add extra controls for user interactions
     * in the header. Note: This aggregation overwrites "headerText" property.
     */
    headerToolbar?: Toolbar;

    /**
     * @SINCE 1.16
     *
     * This aggregation allows the use of a custom Toolbar as information bar for the Panel. The "infoToolbar"
     * is placed below the header and is visible only in expanded state. Use it when you want to show extra
     * information to the user.
     */
    infoToolbar?: Toolbar;

    /**
     * @SINCE 1.22
     *
     * Indicates that the panel will expand or collapse.
     */
    expand?: Function;
  }
}

declare module "sap/m/PDFViewer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Button from "sap/m/Button";

  import { PDFViewerDisplayType } from "sap/m/library";

  import { CSSSize, URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    default as ManagedObject,
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.48
   *
   * This control enables you to display PDF documents within your app. It can be embedded in your user
   * interface layout, or you can set it to open in a popup dialog. Please note that the PDF Viewer
   * control can be fully displayed on desktop devices only. On mobile devices, only the toolbar with a download
   * button is visible.
   */
  export default class PDFViewer extends Control {
    /**
     * Definition of PDFViewer control
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:cd80a8bca4ac450b86547d78f0653330 PDF Viewer}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PDFViewerSettings
    );
    /**
     * Definition of PDFViewer control
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:cd80a8bca4ac450b86547d78f0653330 PDF Viewer}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PDFViewerSettings
    );

    /**
     * Adds some popupButton to the aggregation {@link #getPopupButtons popupButtons}.
     */
    addPopupButton(
      /**
       * The popupButton to add; if empty, nothing is inserted
       */
      oPopupButton: Button
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when there is an error loading the PDF file.
     */
    attachError(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks, this event is
     * fired as often as defined by the browser's plugin. This may happen after a couple chunks are processed.
     */
    attachLoaded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:sourceValidationFailed sourceValidationFailed}
     * event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when the PDF viewer control cannot check the loaded content. For example, the default
     * configuration of the Mozilla Firefox browser may not allow checking the loaded content. This may also
     * happen when the source PDF file is stored in a different domain. If you want no error message to be displayed
     * when this event is fired, call the preventDefault() method inside the event handler.
     */
    attachSourceValidationFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the errorPlaceholder in the aggregation {@link #getErrorPlaceholder errorPlaceholder}.
     */
    destroyErrorPlaceholder(): this;
    /**
     * Destroys all the popupButtons in the aggregation {@link #getPopupButtons popupButtons}.
     */
    destroyPopupButtons(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.m.PDFViewer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachError(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:loaded loaded} event of this `sap.m.PDFViewer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLoaded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:sourceValidationFailed sourceValidationFailed}
     * event of this `sap.m.PDFViewer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSourceValidationFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Downloads the PDF file.
     */
    downloadPDF(): void;
    /**
     * Creates a new subclass of class sap.m.PDFViewer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PDFViewer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:error error} to attached listeners.
     */
    fireError(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:loaded loaded} to attached listeners.
     */
    fireLoaded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:sourceValidationFailed sourceValidationFailed} to attached listeners.
     */
    fireSourceValidationFailed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getDisplayType displayType}.
     *
     * Defines how the PDF viewer should be displayed.
     * 	 - If set to `Link`, the PDF viewer appears as a toolbar with a download button that can be used to
     * 			download the PDF file.
     *  When the {@link #open} method is called, the user can either open the PDF file in a new tab or download
     * it.
     * 	 - If set to `Embedded`, the PDF viewer appears embedded in the parent container and displays either
     * 			the PDF document or the message defined by the `errorPlaceholderMessage` property.
     * 	 - If set to `Auto`, the appearance of the PDF viewer depends on the device being used:
     * 	On mobile devices (phones, tablets), the PDF viewer appears as a toolbar with a download button.
     * 	 - On desktop devices, the PDF viewer is embedded in its parent container.
     *
     * Default value is `Auto`.
     */
    getDisplayType(): PDFViewerDisplayType | keyof typeof PDFViewerDisplayType;
    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getErrorPlaceholderMessage}.
     *
     * Gets current value of property {@link #getErrorMessage errorMessage}.
     *
     * A custom error message that is displayed when the PDF file cannot be loaded.
     */
    getErrorMessage(): string;
    /**
     * Gets content of aggregation {@link #getErrorPlaceholder errorPlaceholder}.
     *
     * A custom control that can be used instead of the error message specified by the errorPlaceholderMessage
     * property.
     */
    getErrorPlaceholder(): Control;
    /**
     * Gets current value of property {@link #getErrorPlaceholderMessage errorPlaceholderMessage}.
     *
     * A custom text that is displayed instead of the PDF file content when the PDF file cannot be loaded.
     */
    getErrorPlaceholderMessage(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the PDF viewer control, respective to the height of the parent container. Can be
     * set to a percent, pixel, or em value.
     *
     * Default value is `"100%"`.
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.PDFViewer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getPopupButtons popupButtons}.
     *
     * A multiple aggregation for buttons that can be added to the footer of the popup dialog. Works only if
     * the PDF viewer is set to open in a popup dialog.
     */
    getPopupButtons(): Button[];
    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getTitle}.
     *
     * Gets current value of property {@link #getPopupHeaderTitle popupHeaderTitle}.
     *
     * A custom title for the PDF viewer popup dialog. Works only if the PDF viewer is set to open in a popup
     * dialog.
     */
    getPopupHeaderTitle(): string;
    /**
     * Gets current value of property {@link #getShowDownloadButton showDownloadButton}.
     *
     * Shows or hides the download button.
     *
     * Default value is `true`.
     */
    getShowDownloadButton(): boolean;
    /**
     * Gets current value of property {@link #getSource source}.
     *
     * Specifies the path to the PDF file to display. Can be set to a relative or an absolute path.
     *  Optionally, this property can also be set to a data URI path or a blob URL in all major web browsers
     * except Internet Explorer and Microsoft Edge, provided that this data URI or blob URL is allowed in advance.
     * For more information about URL filtering, see {@link topic:91f3768f6f4d1014b6dd926db0e91070 URLList Validator
     * Filtering}.
     */
    getSource(): URI;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * A custom title for the PDF viewer.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the PDF viewer control, respective to the width of the parent container. Can be
     * set to a percent, pixel, or em value.
     *
     * Default value is `"100%"`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getPopupButtons popupButtons}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfPopupButton(
      /**
       * The popupButton whose index is looked for
       */
      oPopupButton: Button
    ): int;
    /**
     * Inserts a popupButton into the aggregation {@link #getPopupButtons popupButtons}.
     */
    insertPopupButton(
      /**
       * The popupButton to insert; if empty, nothing is inserted
       */
      oPopupButton: Button,
      /**
       * The `0`-based index the popupButton should be inserted at; for a negative value of `iIndex`, the popupButton
       * is inserted at position 0; for a value greater than the current size of the aggregation, the popupButton
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Triggers rerendering of this element and its children.
     */
    invalidate(
      /**
       * Child control for which the method was called
       */
      oOrigin?: ManagedObject
    ): void;
    /**
     * Opens the PDF viewer in a popup dialog.
     */
    open(): void;
    /**
     * Removes all the controls from the aggregation {@link #getPopupButtons popupButtons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPopupButtons(): Button[];
    /**
     * Removes a popupButton from the aggregation {@link #getPopupButtons popupButtons}.
     */
    removePopupButton(
      /**
       * The popupButton to remove or its index or id
       */
      vPopupButton: int | string | Button
    ): Button;
    /**
     * Sets a new value for property {@link #getDisplayType displayType}.
     *
     * Defines how the PDF viewer should be displayed.
     * 	 - If set to `Link`, the PDF viewer appears as a toolbar with a download button that can be used to
     * 			download the PDF file.
     *  When the {@link #open} method is called, the user can either open the PDF file in a new tab or download
     * it.
     * 	 - If set to `Embedded`, the PDF viewer appears embedded in the parent container and displays either
     * 			the PDF document or the message defined by the `errorPlaceholderMessage` property.
     * 	 - If set to `Auto`, the appearance of the PDF viewer depends on the device being used:
     * 	On mobile devices (phones, tablets), the PDF viewer appears as a toolbar with a download button.
     * 	 - On desktop devices, the PDF viewer is embedded in its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setDisplayType(
      /**
       * New value for property `displayType`
       */
      sDisplayType?: PDFViewerDisplayType | keyof typeof PDFViewerDisplayType
    ): this;
    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getErrorPlaceholderMessage}.
     *
     * Sets a new value for property {@link #getErrorMessage errorMessage}.
     *
     * A custom error message that is displayed when the PDF file cannot be loaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setErrorMessage(
      /**
       * New value for property `errorMessage`
       */
      sErrorMessage?: string
    ): this;
    /**
     * Sets the aggregated {@link #getErrorPlaceholder errorPlaceholder}.
     */
    setErrorPlaceholder(
      /**
       * The errorPlaceholder to set
       */
      oErrorPlaceholder: Control
    ): this;
    /**
     * Sets a new value for property {@link #getErrorPlaceholderMessage errorPlaceholderMessage}.
     *
     * A custom text that is displayed instead of the PDF file content when the PDF file cannot be loaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setErrorPlaceholderMessage(
      /**
       * New value for property `errorPlaceholderMessage`
       */
      sErrorPlaceholderMessage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the PDF viewer control, respective to the height of the parent container. Can be
     * set to a percent, pixel, or em value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getTitle}.
     *
     * Sets a new value for property {@link #getPopupHeaderTitle popupHeaderTitle}.
     *
     * A custom title for the PDF viewer popup dialog. Works only if the PDF viewer is set to open in a popup
     * dialog.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPopupHeaderTitle(
      /**
       * New value for property `popupHeaderTitle`
       */
      sPopupHeaderTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowDownloadButton showDownloadButton}.
     *
     * Shows or hides the download button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowDownloadButton(
      /**
       * New value for property `showDownloadButton`
       */
      bShowDownloadButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSource source}.
     *
     * Specifies the path to the PDF file to display. Can be set to a relative or an absolute path.
     *  Optionally, this property can also be set to a data URI path or a blob URL in all major web browsers
     * except Internet Explorer and Microsoft Edge, provided that this data URI or blob URL is allowed in advance.
     * For more information about URL filtering, see {@link topic:91f3768f6f4d1014b6dd926db0e91070 URLList Validator
     * Filtering}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSource(
      /**
       * New value for property `source`
       */
      sSource?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * A custom title for the PDF viewer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the PDF viewer control, respective to the width of the parent container. Can be
     * set to a percent, pixel, or em value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when there is an error loading the PDF file.
     */
    attachError(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks, this event is
     * fired as often as defined by the browser's plugin. This may happen after a couple chunks are processed.
     */
    attachLoaded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:sourceValidationFailed sourceValidationFailed}
     * event of this `sap.m.PDFViewer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PDFViewer` itself.
     *
     * This event is fired when the PDF viewer control cannot check the loaded content. For example, the default
     * configuration of the Mozilla Firefox browser may not allow checking the loaded content. This may also
     * happen when the source PDF file is stored in a different domain. If you want no error message to be displayed
     * when this event is fired, call the preventDefault() method inside the event handler.
     */
    attachSourceValidationFailed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PDFViewer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PDFViewerSettings extends $ControlSettings {
    /**
     * Defines the height of the PDF viewer control, respective to the height of the parent container. Can be
     * set to a percent, pixel, or em value.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the width of the PDF viewer control, respective to the width of the parent container. Can be
     * set to a percent, pixel, or em value.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Specifies the path to the PDF file to display. Can be set to a relative or an absolute path.
     *  Optionally, this property can also be set to a data URI path or a blob URL in all major web browsers
     * except Internet Explorer and Microsoft Edge, provided that this data URI or blob URL is allowed in advance.
     * For more information about URL filtering, see {@link topic:91f3768f6f4d1014b6dd926db0e91070 URLList Validator
     * Filtering}.
     */
    source?: URI | PropertyBindingInfo;

    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getErrorPlaceholderMessage}.
     *
     * A custom error message that is displayed when the PDF file cannot be loaded.
     */
    errorMessage?: string | PropertyBindingInfo;

    /**
     * A custom text that is displayed instead of the PDF file content when the PDF file cannot be loaded.
     */
    errorPlaceholderMessage?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.50.0) - replaced by {@link sap.m.PDFViewer#getTitle}.
     *
     * A custom title for the PDF viewer popup dialog. Works only if the PDF viewer is set to open in a popup
     * dialog.
     */
    popupHeaderTitle?: string | PropertyBindingInfo;

    /**
     * A custom title for the PDF viewer.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Shows or hides the download button.
     */
    showDownloadButton?: boolean | PropertyBindingInfo;

    /**
     * Defines how the PDF viewer should be displayed.
     * 	 - If set to `Link`, the PDF viewer appears as a toolbar with a download button that can be used to
     * 			download the PDF file.
     *  When the {@link #open} method is called, the user can either open the PDF file in a new tab or download
     * it.
     * 	 - If set to `Embedded`, the PDF viewer appears embedded in the parent container and displays either
     * 			the PDF document or the message defined by the `errorPlaceholderMessage` property.
     * 	 - If set to `Auto`, the appearance of the PDF viewer depends on the device being used:
     * 	On mobile devices (phones, tablets), the PDF viewer appears as a toolbar with a download button.
     * 	 - On desktop devices, the PDF viewer is embedded in its parent container.
     */
    displayType?:
      | (PDFViewerDisplayType | keyof typeof PDFViewerDisplayType)
      | PropertyBindingInfo;

    /**
     * A custom control that can be used instead of the error message specified by the errorPlaceholderMessage
     * property.
     */
    errorPlaceholder?: Control;

    /**
     * A multiple aggregation for buttons that can be added to the footer of the popup dialog. Works only if
     * the PDF viewer is set to open in a popup dialog.
     */
    popupButtons?: Button[] | Button | AggregationBindingInfo;

    /**
     * This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks, this event is
     * fired as often as defined by the browser's plugin. This may happen after a couple chunks are processed.
     */
    loaded?: Function;

    /**
     * This event is fired when there is an error loading the PDF file.
     */
    error?: Function;

    /**
     * This event is fired when the PDF viewer control cannot check the loaded content. For example, the default
     * configuration of the Mozilla Firefox browser may not allow checking the loaded content. This may also
     * happen when the source PDF file is stored in a different domain. If you want no error message to be displayed
     * when this event is fired, call the preventDefault() method inside the event handler.
     */
    sourceValidationFailed?: Function;
  }
}

declare module "sap/m/PlanningCalendar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import PlanningCalendarRow from "sap/m/PlanningCalendarRow";

  import DateTypeRange from "sap/ui/unified/DateTypeRange";

  import PlanningCalendarView from "sap/m/PlanningCalendarView";

  import CalendarAppointment from "sap/ui/unified/CalendarAppointment";

  import {
    CalendarAppointmentHeight,
    CalendarAppointmentRoundWidth,
    CalendarAppointmentVisualization,
    GroupAppointmentsMode,
  } from "sap/ui/unified/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import CalendarLegend from "sap/ui/unified/CalendarLegend";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Displays rows with appointments for different entities (such as persons or teams) for the selected time
   * interval.
   *
   * Overview:
   *
   * You can use the `PlanningCalendar` to represent a calendar containing multiple rows with appointments,
   * where each row represents a different person.
   *
   * You can configure different time-interval views that the user can switch between, such as hours or days,
   * and even a whole week/month. The available navigation allows the user to select a specific interval using
   * a picker, or move to the previous/next interval using arrows.
   *
   * **Note:** The `PlanningCalendar` uses parts of the `sap.ui.unified` library. This library will be loaded
   * after the `PlanningCalendar`, if it wasn't loaded first. This could lead to a waiting time when a `PlanningCalendar`
   * is used for the first time. To prevent this, apps that use the `PlanningCalendar` should also load the
   * `sap.ui.unified` library.
   *
   * Usage:
   *
   * The `PlanningCalendar` has the following structure from top to bottom:
   *
   *
   * 	 - A toolbar where you can add your own buttons or other controls using the `toolbarContent` aggregation.
   *
   * 	 - A header containing a drop-down menu for selecting the {@link sap.m.PlanningCalendarView PlanningCalendarViews},
   * 			and navigation for moving through the intervals using arrows or selecting a specific interval with a
   * 			picker. Custom views can be configured using the `views` aggregation. If not configured, the following
   * 			set of default built-in views is available - Hours, Days, 1 Week, 1 Month, and Months. Setting a custom
   * 			view(s) replaces the built-in ones.
   * 	 - The rows of the `PlanningCalendar` that contain the assigned appointments. They can be configured
   * 			with the `rows` aggregation, which is of type {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
   *
   *
   * Since 1.48 the empty space in the cell that is below an appointment can be removed by adding the `sapUiCalendarAppFitVertically`
   * CSS class to the `PlanningCalendar`. Please note that it should be used only for a `PlanningCalendar`
   * with one appointment per day for a row that doesn't have interval headers set.
   *
   * Since 1.44 alternating row colors can be suppressed by adding the `sapMPlanCalSuppressAlternatingRowColors`
   * CSS class to the `PlanningCalendar`.
   *
   * Responsive behavior:
   *
   * You can define the number of displayed intervals based on the size of the `PlanningCalendar` using the
   * {@link sap.m.PlanningCalendarView PlanningCalendarView}'s properties.
   */
  export default class PlanningCalendar extends Control {
    /**
     * Constructor for a new `PlanningCalendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/planning-calendar/ Planning Calendar}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarSettings
    );
    /**
     * Constructor for a new `PlanningCalendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/planning-calendar/ Planning Calendar}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sID?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarSettings
    );

    /**
     * @SINCE 1.40.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some row to the aggregation {@link #getRows rows}.
     */
    addRow(
      /**
       * The row to add; if empty, nothing is inserted
       */
      oRow: PlanningCalendarRow
    ): this;
    /**
     * Adds some specialDate to the aggregation {@link #getSpecialDates specialDates}.
     */
    addSpecialDate(
      /**
       * The specialDate to add; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange
    ): this;
    /**
     * Adds some toolbarContent to the aggregation {@link #getToolbarContent toolbarContent}.
     */
    addToolbarContent(
      /**
       * The toolbarContent to add; if empty, nothing is inserted
       */
      oToolbarContent: Control
    ): this;
    /**
     * Adds some view to the aggregation {@link #getViews views}.
     */
    addView(
      /**
       * The view to add; if empty, nothing is inserted
       */
      oView: PlanningCalendarView
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:appointmentSelect appointmentSelect} event of
     * this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired if an appointment is selected.
     */
    attachAppointmentSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:intervalSelect intervalSelect} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired if an interval was selected in the calendar header or in the row.
     */
    attachIntervalSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:rowHeaderClick rowHeaderClick} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fires when a row header is clicked.
     */
    attachRowHeaderClick(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rowSelectionChange rowSelectionChange} event
     * of this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fires when row selection is changed.
     */
    attachRowSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:startDateChange startDateChange} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired when the `startDate` property was changed while navigating in the `PlanningCalendar`. The new value
     * can be obtained using the `sap.m.PlanningCalendar#getStartDate()` method. **Note:** This event is fired
     * in case when the `viewKey` property is changed, and as a result of which the view requires a change in
     * the `startDate` property.
     */
    attachStartDateChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:viewChange viewChange} event of this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired when the `viewKey` property was changed by user interaction.
     */
    attachViewChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the rows in the aggregation {@link #getRows rows}.
     */
    destroyRows(): this;
    /**
     * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
     */
    destroySpecialDates(): this;
    /**
     * Destroys all the toolbarContent in the aggregation {@link #getToolbarContent toolbarContent}.
     */
    destroyToolbarContent(): this;
    /**
     * Destroys all the views in the aggregation {@link #getViews views}.
     */
    destroyViews(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:appointmentSelect appointmentSelect} event
     * of this `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:intervalSelect intervalSelect} event of this
     * `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachIntervalSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:rowHeaderClick rowHeaderClick} event of this
     * `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRowHeaderClick(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:rowSelectionChange rowSelectionChange} event
     * of this `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRowSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:startDateChange startDateChange} event of
     * this `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachStartDateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:viewChange viewChange} event of this `sap.m.PlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachViewChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.PlanningCalendar with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PlanningCalendar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:appointmentSelect appointmentSelect} to attached listeners.
     */
    fireAppointmentSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * The selected appointments in case a group appointment is selected.
         */
        appointments?: CalendarAppointment[];
        /**
         * If set, the appointment was selected using multiple selection (e.g. Shift + single mouse click), meaning
         * more than the current appointment could be selected.
         */
        multiSelect?: boolean;
        /**
         * Gives the ID of the DOM element of the clicked appointment
         */
        domRefId?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:intervalSelect intervalSelect} to attached listeners.
     */
    fireIntervalSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Start date of the selected interval, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * Interval end date as a JavaScript date object.
         */
        endDate?: object;
        /**
         * If set, the selected interval is a subinterval.
         */
        subInterval?: boolean;
        /**
         * Row of the selected interval.
         */
        row?: PlanningCalendarRow;
      }
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Fires event {@link #event:rowHeaderClick rowHeaderClick} to attached listeners.
     */
    fireRowHeaderClick(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The ID of the `PlanningCalendarRowHeader` of the selected appointment.
         *
         * **Note:** Intended to be used as an easy way to get an ID of a `PlanningCalendarRowHeader`. Do NOT use
         * for modification.
         */
        headerId?: string;
        /**
         * The row user clicked on.
         */
        row?: PlanningCalendarRow;
      }
    ): this;
    /**
     * Fires event {@link #event:rowSelectionChange rowSelectionChange} to attached listeners.
     */
    fireRowSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Array of rows whose selection has changed.
         */
        rows?: PlanningCalendarRow[];
      }
    ): this;
    /**
     * Fires event {@link #event:startDateChange startDateChange} to attached listeners.
     */
    fireStartDateChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:viewChange viewChange} to attached listeners.
     */
    fireViewChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.81.0
     *
     * Gets current value of property {@link #getAppointmentHeight appointmentHeight}.
     *
     * Determines the different possible sizes for appointments.
     *
     * Default value is `Regular`.
     */
    getAppointmentHeight():
      | CalendarAppointmentHeight
      | keyof typeof CalendarAppointmentHeight;
    /**
     * @SINCE 1.81.0
     * @EXPERIMENTAL (since 1.81.0)
     *
     * Gets current value of property {@link #getAppointmentRoundWidth appointmentRoundWidth}.
     *
     * Defines rounding of the width CalendarAppoinment **Note:** This property is applied, when
     * the calendar interval type is day and the view shows more than 20 days
     *
     * Default value is `None`.
     */
    getAppointmentRoundWidth():
      | CalendarAppointmentRoundWidth
      | keyof typeof CalendarAppointmentRoundWidth;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getAppointmentsReducedHeight appointmentsReducedHeight}.
     *
     * Determines whether the appointments that have only title without text are rendered with smaller height.
     *
     * **Note:** On phone devices this property is ignored, appointments are always rendered in full height
     * to facilitate touching.
     *
     * Default value is `false`.
     */
    getAppointmentsReducedHeight(): boolean;
    /**
     * @SINCE 1.40.0
     *
     * Gets current value of property {@link #getAppointmentsVisualization appointmentsVisualization}.
     *
     * Determines how the appointments are visualized depending on the used theme.
     *
     * Default value is `Standard`.
     */
    getAppointmentsVisualization():
      | CalendarAppointmentVisualization
      | keyof typeof CalendarAppointmentVisualization;
    /**
     * @SINCE 1.40.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.50
     *
     * Gets current value of property {@link #getBuiltInViews builtInViews}.
     *
     * Defines the list of predefined views as an array. The views should be specified by their keys.
     *
     * The default predefined views and their keys are available at {@link sap.m.PlanningCalendarBuiltInView}.
     *
     * **Note:** If set, all specified views will be displayed along with any custom views (if available). If
     * not set and no custom views are available, all default views will be displayed. If not set and there
     * are any custom views available, only the custom views will be displayed.
     *
     * Default value is `[]`.
     */
    getBuiltInViews(): string[];
    /**
     * @SINCE 1.54
     *
     * Getter for custom appointments sorter (if any).
     */
    getCustomAppointmentsSorterCallback(): appointmentsSorterCallback;
    /**
     * Getter for the end point in time of the shown interval
     */
    getEndDate(): Object;
    /**
     * @SINCE 1.48.0
     *
     * Gets current value of property {@link #getGroupAppointmentsMode groupAppointmentsMode}.
     *
     * Defines the mode in which the overlapping appointments are displayed.
     *
     * **Note:** This property takes effect, only if the `intervalType` of the current calendar view is set
     * to `sap.ui.unified.CalendarIntervalType.Month`. On phone devices this property is ignored, and the default
     * value is applied.
     *
     * Default value is `Collapsed`.
     */
    getGroupAppointmentsMode():
      | GroupAppointmentsMode
      | keyof typeof GroupAppointmentsMode;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Specifies the height of the `PlanningCalendar`. **Note:** If the set height is less than the displayed
     * content, it will not be applied
     */
    getHeight(): CSSSize;
    /**
     * @SINCE 1.40.0
     *
     * ID of the element which is the current target of the association {@link #getLegend legend}, or `null`.
     */
    getLegend(): ID;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getMaxDate maxDate}.
     *
     * Defines the maximum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the current `minDate`, the `minDate` is set to the first
     * date of the month in which the `maxDate` belongs.
     */
    getMaxDate(): object;
    /**
     * Returns a metadata object for class sap.m.PlanningCalendar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getMinDate minDate}.
     *
     * Defines the minimum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the current `maxDate`, the `maxDate` is set to the last
     * date of the month in which the `minDate` belongs.
     */
    getMinDate(): object;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are
     * assigned.
     */
    getNoDataText(): string;
    /**
     * Gets content of aggregation {@link #getRows rows}.
     *
     * Rows of the `PlanningCalendar`.
     */
    getRows(): PlanningCalendarRow[];
    /**
     * @SINCE 1.54
     *
     * Holds the selected appointments. If no appointments are selected, an empty array is returned.
     */
    getSelectedAppointments(): CalendarAppointment[];
    /**
     * Returns an array containing the selected rows. If no row is selected, an empty array is returned.
     */
    getSelectedRows(): PlanningCalendarRow[];
    /**
     * @SINCE 1.50
     *
     * Gets current value of property {@link #getShowDayNamesLine showDayNamesLine}.
     *
     * Determines whether the day names are displayed in a separate line or inside the single days.
     *
     * Default value is `false`.
     */
    getShowDayNamesLine(): boolean;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getShowEmptyIntervalHeaders showEmptyIntervalHeaders}.
     *
     * Determines whether the space (at the top of the intervals), where the assigned interval headers appear,
     * should remain visible even when no interval headers are present in the visible time frame. If set to
     * `false`, this space would collapse/disappear when no interval headers are assigned.
     *
     * **Note:** This property takes effect, only if `showIntervalHeaders` is also set to `true`.
     *
     * Default value is `true`.
     */
    getShowEmptyIntervalHeaders(): boolean;
    /**
     * Gets current value of property {@link #getShowIntervalHeaders showIntervalHeaders}.
     *
     * Determines whether the assigned interval headers are displayed. You can assign them using the `intervalHeaders`
     * aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
     *
     * **Note:** If you set both `showIntervalHeaders` and `showEmptyIntervalHeaders` properties to `true`,
     * the space (at the top of the intervals) where the assigned interval headers appear, will remain visible
     * even if no interval headers are assigned.
     *
     * Default value is `true`.
     */
    getShowIntervalHeaders(): boolean;
    /**
     * Gets current value of property {@link #getShowRowHeaders showRowHeaders}.
     *
     * Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
     * is displayed.
     *
     * Default value is `true`.
     */
    getShowRowHeaders(): boolean;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getShowWeekNumbers showWeekNumbers}.
     *
     * Determines if the week numbers are displayed.
     *
     * Default value is `false`.
     */
    getShowWeekNumbers(): boolean;
    /**
     * Gets current value of property {@link #getSingleSelection singleSelection}.
     *
     * Determines whether only a single row can be selected.
     *
     * Default value is `true`.
     */
    getSingleSelection(): boolean;
    /**
     * Gets content of aggregation {@link #getSpecialDates specialDates}.
     *
     * Special days in the header calendar visualized as date range with a type.
     *
     * **Note:** If one day is assigned to more than one type, only the first type will be used.
     */
    getSpecialDates(): DateTypeRange[];
    /**
     * Gets current value of property {@link #getStartDate startDate}.
     *
     * Determines the start date of the row, as a JavaScript date object. The current date is used as default.
     */
    getStartDate(): object;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getStickyHeader stickyHeader}.
     *
     * Determines whether the header area will remain visible (fixed on top) when the rest of the content is
     * scrolled out of view.
     *
     * The sticky header behavior is automatically disabled on phones in landscape mode for better visibility
     * of the content.
     *
     * **Note:** There is limited browser support, hence the API is in experimental state. Browsers that currently
     * support this feature are Chrome (desktop and mobile), Safari (desktop and mobile) and Edge 41.
     *
     * There are also some known issues with respect to the scrolling behavior and focus handling. A few are
     * given below:
     *
     * When the PlanningCalendar is placed in certain layout containers, for example the `GridLayout` control,
     * the column headers do not fix at the top of the viewport. Similar behavior is also observed with the
     * `ObjectPage` control.
     *
     * This API should not be used in production environment.
     *
     * **Note:** The `stickyHeader` of the `PlanningCalendar` uses the `sticky` property of `sap.m.Table`. Therefore,
     * all features and restrictions of the property in `sap.m.Table` apply to the `PlanningCalendar` as well.
     *
     * Default value is `false`.
     */
    getStickyHeader(): boolean;
    /**
     * Gets content of aggregation {@link #getToolbarContent toolbarContent}.
     *
     * The content of the toolbar.
     */
    getToolbarContent(): Control[];
    /**
     * Gets current value of property {@link #getViewKey viewKey}.
     *
     * Defines the key of the `PlanningCalendarView` used for the output.
     *
     * **Note:** The default value is set `Hour`. If you are using your own views, the keys of these views should
     * be used instead.
     *
     * Default value is `CalendarIntervalType.Hour`.
     */
    getViewKey(): string;
    /**
     * Gets content of aggregation {@link #getViews views}.
     *
     * Views of the `PlanningCalendar`.
     *
     * **Note:** If not set, all the default views are available. Their keys are defined in {@link sap.ui.unified.CalendarIntervalType}.
     */
    getViews(): PlanningCalendarView[];
    /**
     * Getter for how many intervals are currently displayed
     */
    getVisibleIntervalsCount(): number;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Specifies the width of the `PlanningCalendar`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.PlanningCalendarRow` in the aggregation {@link #getRows rows}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfRow(
      /**
       * The row whose index is looked for
       */
      oRow: PlanningCalendarRow
    ): int;
    /**
     * Checks for the provided `sap.ui.unified.DateTypeRange` in the aggregation {@link #getSpecialDates specialDates}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSpecialDate(
      /**
       * The specialDate whose index is looked for
       */
      oSpecialDate: DateTypeRange
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getToolbarContent toolbarContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfToolbarContent(
      /**
       * The toolbarContent whose index is looked for
       */
      oToolbarContent: Control
    ): int;
    /**
     * Checks for the provided `sap.m.PlanningCalendarView` in the aggregation {@link #getViews views}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfView(
      /**
       * The view whose index is looked for
       */
      oView: PlanningCalendarView
    ): int;
    /**
     * Inserts a row into the aggregation {@link #getRows rows}.
     */
    insertRow(
      /**
       * The row to insert; if empty, nothing is inserted
       */
      oRow: PlanningCalendarRow,
      /**
       * The `0`-based index the row should be inserted at; for a negative value of `iIndex`, the row is inserted
       * at position 0; for a value greater than the current size of the aggregation, the row is inserted at the
       * last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a specialDate into the aggregation {@link #getSpecialDates specialDates}.
     */
    insertSpecialDate(
      /**
       * The specialDate to insert; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange,
      /**
       * The `0`-based index the specialDate should be inserted at; for a negative value of `iIndex`, the specialDate
       * is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a toolbarContent into the aggregation {@link #getToolbarContent toolbarContent}.
     */
    insertToolbarContent(
      /**
       * The toolbarContent to insert; if empty, nothing is inserted
       */
      oToolbarContent: Control,
      /**
       * The `0`-based index the toolbarContent should be inserted at; for a negative value of `iIndex`, the toolbarContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the toolbarContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a view into the aggregation {@link #getViews views}.
     */
    insertView(
      /**
       * The view to insert; if empty, nothing is inserted
       */
      oView: PlanningCalendarView,
      /**
       * The `0`-based index the view should be inserted at; for a negative value of `iIndex`, the view is inserted
       * at position 0; for a value greater than the current size of the aggregation, the view is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getRows rows}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllRows(): PlanningCalendarRow[];
    /**
     * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSpecialDates(): DateTypeRange[];
    /**
     * Removes all the controls from the aggregation {@link #getToolbarContent toolbarContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllToolbarContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getViews views}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllViews(): PlanningCalendarView[];
    /**
     * @SINCE 1.40.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a row from the aggregation {@link #getRows rows}.
     */
    removeRow(
      /**
       * The row to remove or its index or id
       */
      vRow: int | string | PlanningCalendarRow
    ): PlanningCalendarRow;
    /**
     * Removes a specialDate from the aggregation {@link #getSpecialDates specialDates}.
     */
    removeSpecialDate(
      /**
       * The specialDate to remove or its index or id
       */
      vSpecialDate: int | string | DateTypeRange
    ): DateTypeRange;
    /**
     * Removes a toolbarContent from the aggregation {@link #getToolbarContent toolbarContent}.
     */
    removeToolbarContent(
      /**
       * The toolbarContent to remove or its index or id
       */
      vToolbarContent: int | string | Control
    ): Control;
    /**
     * Removes a view from the aggregation {@link #getViews views}.
     */
    removeView(
      /**
       * The view to remove or its index or id
       */
      vView: int | string | PlanningCalendarView
    ): PlanningCalendarView;
    /**
     * Selects or deselects all `PlanningCalendarRows`.
     *
     * **Note:** Selection only works if `singleSelection` is set to `false`.
     */
    selectAllRows(
      /**
       * Indicator showing whether `PlanningCalendarRows` should be selected or deselected
       */
      bSelect: boolean
    ): this;
    /**
     * @SINCE 1.81.0
     *
     * Sets a new value for property {@link #getAppointmentHeight appointmentHeight}.
     *
     * Determines the different possible sizes for appointments.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     */
    setAppointmentHeight(
      /**
       * New value for property `appointmentHeight`
       */
      sAppointmentHeight?:
        | CalendarAppointmentHeight
        | keyof typeof CalendarAppointmentHeight
    ): this;
    /**
     * @SINCE 1.81.0
     * @EXPERIMENTAL (since 1.81.0)
     *
     * Sets a new value for property {@link #getAppointmentRoundWidth appointmentRoundWidth}.
     *
     * Defines rounding of the width CalendarAppoinment **Note:** This property is applied, when
     * the calendar interval type is day and the view shows more than 20 days
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setAppointmentRoundWidth(
      /**
       * New value for property `appointmentRoundWidth`
       */
      sAppointmentRoundWidth?:
        | CalendarAppointmentRoundWidth
        | keyof typeof CalendarAppointmentRoundWidth
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getAppointmentsReducedHeight appointmentsReducedHeight}.
     *
     * Determines whether the appointments that have only title without text are rendered with smaller height.
     *
     * **Note:** On phone devices this property is ignored, appointments are always rendered in full height
     * to facilitate touching.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAppointmentsReducedHeight(
      /**
       * New value for property `appointmentsReducedHeight`
       */
      bAppointmentsReducedHeight?: boolean
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Sets a new value for property {@link #getAppointmentsVisualization appointmentsVisualization}.
     *
     * Determines how the appointments are visualized depending on the used theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setAppointmentsVisualization(
      /**
       * New value for property `appointmentsVisualization`
       */
      sAppointmentsVisualization?:
        | CalendarAppointmentVisualization
        | keyof typeof CalendarAppointmentVisualization
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets a new value for property {@link #getBuiltInViews builtInViews}.
     *
     * Defines the list of predefined views as an array. The views should be specified by their keys.
     *
     * The default predefined views and their keys are available at {@link sap.m.PlanningCalendarBuiltInView}.
     *
     * **Note:** If set, all specified views will be displayed along with any custom views (if available). If
     * not set and no custom views are available, all default views will be displayed. If not set and there
     * are any custom views available, only the custom views will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[]`.
     */
    setBuiltInViews(
      /**
       * New value for property `builtInViews`
       */
      sBuiltInViews?: string[]
    ): this;
    /**
     * @SINCE 1.54
     *
     * Setter for custom sorting of appointments. If not used, the appointments will be sorted according to
     * their duration vertically. For example, the start time and order to the X axis won't change.
     */
    setCustomAppointmentsSorterCallback(
      fnSorter: appointmentsSorterCallback
    ): this;
    /**
     * @SINCE 1.48.0
     *
     * Sets a new value for property {@link #getGroupAppointmentsMode groupAppointmentsMode}.
     *
     * Defines the mode in which the overlapping appointments are displayed.
     *
     * **Note:** This property takes effect, only if the `intervalType` of the current calendar view is set
     * to `sap.ui.unified.CalendarIntervalType.Month`. On phone devices this property is ignored, and the default
     * value is applied.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Collapsed`.
     */
    setGroupAppointmentsMode(
      /**
       * New value for property `groupAppointmentsMode`
       */
      sGroupAppointmentsMode?:
        | GroupAppointmentsMode
        | keyof typeof GroupAppointmentsMode
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Specifies the height of the `PlanningCalendar`. **Note:** If the set height is less than the displayed
     * content, it will not be applied
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Sets the associated {@link #getLegend legend}.
     */
    setLegend(
      /**
       * ID of an element which becomes the new target of this legend association; alternatively, an element instance
       * may be given
       */
      oLegend: ID | CalendarLegend
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getMaxDate maxDate}.
     *
     * Defines the maximum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the current `minDate`, the `minDate` is set to the first
     * date of the month in which the `maxDate` belongs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxDate(
      /**
       * New value for property `maxDate`
       */
      oMaxDate?: object
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getMinDate minDate}.
     *
     * Defines the minimum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the current `maxDate`, the `maxDate` is set to the last
     * date of the month in which the `minDate` belongs.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMinDate(
      /**
       * New value for property `minDate`
       */
      oMinDate?: object
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are
     * assigned.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets a new value for property {@link #getShowDayNamesLine showDayNamesLine}.
     *
     * Determines whether the day names are displayed in a separate line or inside the single days.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowDayNamesLine(
      /**
       * New value for property `showDayNamesLine`
       */
      bShowDayNamesLine?: boolean
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getShowEmptyIntervalHeaders showEmptyIntervalHeaders}.
     *
     * Determines whether the space (at the top of the intervals), where the assigned interval headers appear,
     * should remain visible even when no interval headers are present in the visible time frame. If set to
     * `false`, this space would collapse/disappear when no interval headers are assigned.
     *
     * **Note:** This property takes effect, only if `showIntervalHeaders` is also set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowEmptyIntervalHeaders(
      /**
       * New value for property `showEmptyIntervalHeaders`
       */
      bShowEmptyIntervalHeaders?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIntervalHeaders showIntervalHeaders}.
     *
     * Determines whether the assigned interval headers are displayed. You can assign them using the `intervalHeaders`
     * aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
     *
     * **Note:** If you set both `showIntervalHeaders` and `showEmptyIntervalHeaders` properties to `true`,
     * the space (at the top of the intervals) where the assigned interval headers appear, will remain visible
     * even if no interval headers are assigned.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowIntervalHeaders(
      /**
       * New value for property `showIntervalHeaders`
       */
      bShowIntervalHeaders?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowRowHeaders showRowHeaders}.
     *
     * Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
     * is displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowRowHeaders(
      /**
       * New value for property `showRowHeaders`
       */
      bShowRowHeaders?: boolean
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getShowWeekNumbers showWeekNumbers}.
     *
     * Determines if the week numbers are displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowWeekNumbers(
      /**
       * New value for property `showWeekNumbers`
       */
      bShowWeekNumbers?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getSingleSelection singleSelection}.
     *
     * Determines whether only a single row can be selected.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setSingleSelection(
      /**
       * New value for property `singleSelection`
       */
      bSingleSelection?: boolean
    ): this;
    /**
     * Sets the given date as start date. The current date is used as default. Depending on the current view
     * the start date may be adjusted (for example, the week view shows always the first weekday of the same
     * week as the given date).
     */
    setStartDate(
      /**
       * the date to set as `sap.m.PlanningCalendar` `startDate`. May be changed(adjusted) if property `startDate`
       * is adjusted. See remark about week view above.
       */
      oDate: Date
    ): this;
    /**
     * Sets the stickyHeader property.
     */
    setStickyHeader(
      /**
       * Whether the header area will remain visible (fixed on top)
       */
      bStick: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getViewKey viewKey}.
     *
     * Defines the key of the `PlanningCalendarView` used for the output.
     *
     * **Note:** The default value is set `Hour`. If you are using your own views, the keys of these views should
     * be used instead.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `CalendarIntervalType.Hour`.
     */
    setViewKey(
      /**
       * New value for property `viewKey`
       */
      sViewKey?: string
    ): this;
    /**
     * Sets the width property and ensures that the start date is in sync with each row timeline.
     */
    setWidth(
      /**
       * the width to be set to the PlanningCalendar
       */
      sWidth: undefined
    ): object;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:appointmentSelect appointmentSelect} event of
     * this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired if an appointment is selected.
     */
    attachAppointmentSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:intervalSelect intervalSelect} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired if an interval was selected in the calendar header or in the row.
     */
    attachIntervalSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:rowHeaderClick rowHeaderClick} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fires when a row header is clicked.
     */
    attachRowHeaderClick(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:rowSelectionChange rowSelectionChange} event
     * of this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fires when row selection is changed.
     */
    attachRowSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:startDateChange startDateChange} event of this
     * `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired when the `startDate` property was changed while navigating in the `PlanningCalendar`. The new value
     * can be obtained using the `sap.m.PlanningCalendar#getStartDate()` method. **Note:** This event is fired
     * in case when the `viewKey` property is changed, and as a result of which the view requires a change in
     * the `startDate` property.
     */
    attachStartDateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:viewChange viewChange} event of this `sap.m.PlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendar` itself.
     *
     * Fired when the `viewKey` property was changed by user interaction.
     */
    attachViewChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendar` itself
       */
      oListener?: object
    ): this;
  }
  /**
   * A comparison function for appointments.
   *
   * Used by the {@link sap.m.PlanningCalendar PlanningCalendar} to sort appointments in a timeline.
   */
  export type appointmentsSorterCallback = (
    appointment1: CalendarAppointment,
    appointment2: CalendarAppointment
  ) => void;

  export interface $PlanningCalendarSettings extends $ControlSettings {
    /**
     * Determines the start date of the row, as a JavaScript date object. The current date is used as default.
     */
    startDate?: object | PropertyBindingInfo;

    /**
     * Defines the key of the `PlanningCalendarView` used for the output.
     *
     * **Note:** The default value is set `Hour`. If you are using your own views, the keys of these views should
     * be used instead.
     */
    viewKey?: string | PropertyBindingInfo;

    /**
     * Determines whether only a single row can be selected.
     */
    singleSelection?: boolean | PropertyBindingInfo;

    /**
     * Specifies the width of the `PlanningCalendar`.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Specifies the height of the `PlanningCalendar`. **Note:** If the set height is less than the displayed
     * content, it will not be applied
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the assigned interval headers are displayed. You can assign them using the `intervalHeaders`
     * aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
     *
     * **Note:** If you set both `showIntervalHeaders` and `showEmptyIntervalHeaders` properties to `true`,
     * the space (at the top of the intervals) where the assigned interval headers appear, will remain visible
     * even if no interval headers are assigned.
     */
    showIntervalHeaders?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Determines whether the space (at the top of the intervals), where the assigned interval headers appear,
     * should remain visible even when no interval headers are present in the visible time frame. If set to
     * `false`, this space would collapse/disappear when no interval headers are assigned.
     *
     * **Note:** This property takes effect, only if `showIntervalHeaders` is also set to `true`.
     */
    showEmptyIntervalHeaders?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
     * is displayed.
     */
    showRowHeaders?: boolean | PropertyBindingInfo;

    /**
     * Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are
     * assigned.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.48.0
     *
     * Defines the mode in which the overlapping appointments are displayed.
     *
     * **Note:** This property takes effect, only if the `intervalType` of the current calendar view is set
     * to `sap.ui.unified.CalendarIntervalType.Month`. On phone devices this property is ignored, and the default
     * value is applied.
     */
    groupAppointmentsMode?:
      | (GroupAppointmentsMode | keyof typeof GroupAppointmentsMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Determines whether the appointments that have only title without text are rendered with smaller height.
     *
     * **Note:** On phone devices this property is ignored, appointments are always rendered in full height
     * to facilitate touching.
     */
    appointmentsReducedHeight?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.81.0
     *
     * Determines the different possible sizes for appointments.
     */
    appointmentHeight?:
      | (CalendarAppointmentHeight | keyof typeof CalendarAppointmentHeight)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.81.0
     * @EXPERIMENTAL (since 1.81.0)
     *
     * Defines rounding of the width CalendarAppoinment **Note:** This property is applied, when
     * the calendar interval type is day and the view shows more than 20 days
     */
    appointmentRoundWidth?:
      | (
          | CalendarAppointmentRoundWidth
          | keyof typeof CalendarAppointmentRoundWidth
        )
      | PropertyBindingInfo;

    /**
     * @SINCE 1.40.0
     *
     * Determines how the appointments are visualized depending on the used theme.
     */
    appointmentsVisualization?:
      | (
          | CalendarAppointmentVisualization
          | keyof typeof CalendarAppointmentVisualization
        )
      | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Defines the minimum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `minDate` is set to be after the current `maxDate`, the `maxDate` is set to the last
     * date of the month in which the `minDate` belongs.
     */
    minDate?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Defines the maximum date that can be displayed and selected in the `PlanningCalendar`. This must be a
     * JavaScript date object.
     *
     * **Note:** If the `maxDate` is set to be before the current `minDate`, the `minDate` is set to the first
     * date of the month in which the `maxDate` belongs.
     */
    maxDate?: object | PropertyBindingInfo;

    /**
     * @SINCE 1.50
     *
     * Determines whether the day names are displayed in a separate line or inside the single days.
     */
    showDayNamesLine?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Determines if the week numbers are displayed.
     */
    showWeekNumbers?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.50
     *
     * Defines the list of predefined views as an array. The views should be specified by their keys.
     *
     * The default predefined views and their keys are available at {@link sap.m.PlanningCalendarBuiltInView}.
     *
     * **Note:** If set, all specified views will be displayed along with any custom views (if available). If
     * not set and no custom views are available, all default views will be displayed. If not set and there
     * are any custom views available, only the custom views will be displayed.
     */
    builtInViews?: string[] | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines whether the header area will remain visible (fixed on top) when the rest of the content is
     * scrolled out of view.
     *
     * The sticky header behavior is automatically disabled on phones in landscape mode for better visibility
     * of the content.
     *
     * **Note:** There is limited browser support, hence the API is in experimental state. Browsers that currently
     * support this feature are Chrome (desktop and mobile), Safari (desktop and mobile) and Edge 41.
     *
     * There are also some known issues with respect to the scrolling behavior and focus handling. A few are
     * given below:
     *
     * When the PlanningCalendar is placed in certain layout containers, for example the `GridLayout` control,
     * the column headers do not fix at the top of the viewport. Similar behavior is also observed with the
     * `ObjectPage` control.
     *
     * This API should not be used in production environment.
     *
     * **Note:** The `stickyHeader` of the `PlanningCalendar` uses the `sticky` property of `sap.m.Table`. Therefore,
     * all features and restrictions of the property in `sap.m.Table` apply to the `PlanningCalendar` as well.
     */
    stickyHeader?: boolean | PropertyBindingInfo;

    /**
     * Rows of the `PlanningCalendar`.
     */
    rows?: PlanningCalendarRow[] | PlanningCalendarRow | AggregationBindingInfo;

    /**
     * Views of the `PlanningCalendar`.
     *
     * **Note:** If not set, all the default views are available. Their keys are defined in {@link sap.ui.unified.CalendarIntervalType}.
     */
    views?:
      | PlanningCalendarView[]
      | PlanningCalendarView
      | AggregationBindingInfo;

    /**
     * Special days in the header calendar visualized as date range with a type.
     *
     * **Note:** If one day is assigned to more than one type, only the first type will be used.
     */
    specialDates?: DateTypeRange[] | DateTypeRange | AggregationBindingInfo;

    /**
     * The content of the toolbar.
     */
    toolbarContent?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.40.0
     *
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @SINCE 1.40.0
     *
     * Association to the `CalendarLegend` explaining the colors of the `Appointments`.
     *
     * **Note:** The legend does not have to be rendered but must exist, and all required types must be assigned.
     */
    legend?: CalendarLegend | string;

    /**
     * Fired if an appointment is selected.
     */
    appointmentSelect?: Function;

    /**
     * Fired if an interval was selected in the calendar header or in the row.
     */
    intervalSelect?: Function;

    /**
     * Fires when row selection is changed.
     */
    rowSelectionChange?: Function;

    /**
     * Fired when the `startDate` property was changed while navigating in the `PlanningCalendar`. The new value
     * can be obtained using the `sap.m.PlanningCalendar#getStartDate()` method. **Note:** This event is fired
     * in case when the `viewKey` property is changed, and as a result of which the view requires a change in
     * the `startDate` property.
     */
    startDateChange?: Function;

    /**
     * Fired when the `viewKey` property was changed by user interaction.
     */
    viewChange?: Function;

    /**
     * @SINCE 1.46.0
     *
     * Fires when a row header is clicked.
     */
    rowHeaderClick?: Function;
  }
}

declare module "sap/m/PlanningCalendarLegend" {
  import {
    default as CalendarLegend,
    $CalendarLegendSettings,
  } from "sap/ui/unified/CalendarLegend";

  import CalendarLegendItem from "sap/ui/unified/CalendarLegendItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.50
   *
   * A legend for the {@link sap.m.PlanningCalendar} that displays the special dates and appointments in colors
   * with their corresponding description. The `PlanningCalendarLegend` extends {@link sap.ui.unified.CalendarLegend}
   * and overwrites the default value for property `columnWidth` to `auto`
   */
  export default class PlanningCalendarLegend extends CalendarLegend {
    /**
     * Constructor for a new `PlanningCalendarLegend`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarLegendSettings
    );
    /**
     * Constructor for a new `PlanningCalendarLegend`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarLegendSettings
    );

    /**
     * Adds some appointmentItem to the aggregation {@link #getAppointmentItems appointmentItems}.
     */
    addAppointmentItem(
      /**
       * The appointmentItem to add; if empty, nothing is inserted
       */
      oAppointmentItem: CalendarLegendItem
    ): this;
    /**
     * Destroys all the appointmentItems in the aggregation {@link #getAppointmentItems appointmentItems}.
     */
    destroyAppointmentItems(): this;
    /**
     * Creates a new subclass of class sap.m.PlanningCalendarLegend with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.unified.CalendarLegend.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PlanningCalendarLegend>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getAppointmentItems appointmentItems}.
     *
     * The legend items which show color and type information about the calendar appointments.
     */
    getAppointmentItems(): CalendarLegendItem[];
    /**
     * Gets current value of property {@link #getAppointmentItemsHeader appointmentItemsHeader}.
     *
     * Defines the text displayed in the header of the appointment items list. It is commonly related to the
     * calendar appointments.
     *
     * Default value is `"Appointments"`.
     */
    getAppointmentItemsHeader(): string;
    /**
     * Gets current value of property {@link #getItemsHeader itemsHeader}.
     *
     * Defines the text displayed in the header of the items list. It is commonly related to the calendar days.
     *
     * Default value is `"Calendar"`.
     */
    getItemsHeader(): string;
    /**
     * Returns a metadata object for class sap.m.PlanningCalendarLegend.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.unified.CalendarLegendItem` in the aggregation {@link #getAppointmentItems
     * appointmentItems}. and returns its index if found or -1 otherwise.
     */
    indexOfAppointmentItem(
      /**
       * The appointmentItem whose index is looked for
       */
      oAppointmentItem: CalendarLegendItem
    ): int;
    /**
     * Inserts a appointmentItem into the aggregation {@link #getAppointmentItems appointmentItems}.
     */
    insertAppointmentItem(
      /**
       * The appointmentItem to insert; if empty, nothing is inserted
       */
      oAppointmentItem: CalendarLegendItem,
      /**
       * The `0`-based index the appointmentItem should be inserted at; for a negative value of `iIndex`, the
       * appointmentItem is inserted at position 0; for a value greater than the current size of the aggregation,
       * the appointmentItem is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAppointmentItems appointmentItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAppointmentItems(): CalendarLegendItem[];
    /**
     * Removes a appointmentItem from the aggregation {@link #getAppointmentItems appointmentItems}.
     */
    removeAppointmentItem(
      /**
       * The appointmentItem to remove or its index or id
       */
      vAppointmentItem: int | string | CalendarLegendItem
    ): CalendarLegendItem;
    /**
     * Sets a new value for property {@link #getAppointmentItemsHeader appointmentItemsHeader}.
     *
     * Defines the text displayed in the header of the appointment items list. It is commonly related to the
     * calendar appointments.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Appointments"`.
     */
    setAppointmentItemsHeader(
      /**
       * New value for property `appointmentItemsHeader`
       */
      sAppointmentItemsHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getItemsHeader itemsHeader}.
     *
     * Defines the text displayed in the header of the items list. It is commonly related to the calendar days.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Calendar"`.
     */
    setItemsHeader(
      /**
       * New value for property `itemsHeader`
       */
      sItemsHeader?: string
    ): this;
  }

  export interface $PlanningCalendarLegendSettings
    extends $CalendarLegendSettings {
    /**
     * Defines the text displayed in the header of the items list. It is commonly related to the calendar days.
     */
    itemsHeader?: string | PropertyBindingInfo;

    /**
     * Defines the text displayed in the header of the appointment items list. It is commonly related to the
     * calendar appointments.
     */
    appointmentItemsHeader?: string | PropertyBindingInfo;

    /**
     * The legend items which show color and type information about the calendar appointments.
     */
    appointmentItems?:
      | CalendarLegendItem[]
      | CalendarLegendItem
      | AggregationBindingInfo;
  }
}

declare module "sap/m/PlanningCalendarRow" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import CalendarAppointment from "sap/ui/unified/CalendarAppointment";

  import Control from "sap/ui/core/Control";

  import DateTypeRange from "sap/ui/unified/DateTypeRange";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Represents a row in the {@link sap.m.PlanningCalendar}.
   *
   * This element holds the data of one row in the {@link sap.m.PlanningCalendar}. Once the header information
   * (for example, person information) is assigned, the appointments are assigned. The `sap.m.PlanningCalendarRow`
   * allows you to modify appointments at row level.
   */
  export default class PlanningCalendarRow extends UI5Element {
    /**
     * Constructor for a new `PlanningCalendarRow`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarRowSettings
    );
    /**
     * Constructor for a new `PlanningCalendarRow`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarRowSettings
    );

    /**
     * Adds some appointment to the aggregation {@link #getAppointments appointments}.
     */
    addAppointment(
      /**
       * The appointment to add; if empty, nothing is inserted
       */
      oAppointment: CalendarAppointment
    ): this;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Adds some headerContent to the aggregation {@link #getHeaderContent headerContent}.
     */
    addHeaderContent(
      /**
       * The headerContent to add; if empty, nothing is inserted
       */
      oHeaderContent: Control
    ): this;
    /**
     * Adds some intervalHeader to the aggregation {@link #getIntervalHeaders intervalHeaders}.
     */
    addIntervalHeader(
      /**
       * The intervalHeader to add; if empty, nothing is inserted
       */
      oIntervalHeader: CalendarAppointment
    ): this;
    /**
     * @SINCE 1.56
     *
     * Adds some specialDate to the aggregation {@link #getSpecialDates specialDates}.
     */
    addSpecialDate(
      /**
       * The specialDate to add; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentCreate appointmentCreate} event of
     * this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is created.
     */
    attachAppointmentCreate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDragEnter appointmentDragEnter} event
     * of this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is dropped.
     *
     * When this event handler is attached, the default behavior of the `enableAppointmentsDragAndDrop` property
     * to move appointments only within their original calendar row is no longer valid. You can move the appointment
     * around all rows for which `enableAppointmentsDragAndDrop` is set to true. In this case, the drop target
     * area is indicated by a placeholder. In the event handler you can call the `preventDefault` method of
     * the event to prevent this default behavior. In this case, the placeholder will no longer be available
     * and it will not be possible to drop the appointment in the row.
     */
    attachAppointmentDragEnter(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDrop appointmentDrop} event of this
     * `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is dropped.
     */
    attachAppointmentDrop(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentResize appointmentResize} event of
     * this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is resized.
     */
    attachAppointmentResize(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the appointments in the aggregation {@link #getAppointments appointments}.
     */
    destroyAppointments(): this;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Destroys all the headerContent in the aggregation {@link #getHeaderContent headerContent}.
     */
    destroyHeaderContent(): this;
    /**
     * Destroys all the intervalHeaders in the aggregation {@link #getIntervalHeaders intervalHeaders}.
     */
    destroyIntervalHeaders(): this;
    /**
     * @SINCE 1.56
     *
     * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
     */
    destroySpecialDates(): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentCreate appointmentCreate} event
     * of this `sap.m.PlanningCalendarRow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentCreate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentDragEnter appointmentDragEnter}
     * event of this `sap.m.PlanningCalendarRow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentDragEnter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.54
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentDrop appointmentDrop} event of
     * this `sap.m.PlanningCalendarRow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentDrop(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentResize appointmentResize} event
     * of this `sap.m.PlanningCalendarRow`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentResize(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.PlanningCalendarRow with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PlanningCalendarRow>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.56
     *
     * Fires event {@link #event:appointmentCreate appointmentCreate} to attached listeners.
     */
    fireAppointmentCreate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Start date of the created appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * End date of the created appointment, as a JavaScript date object.
         */
        endDate?: object;
        /**
         * The row of the appointment.
         */
        calendarRow?: PlanningCalendarRow;
      }
    ): this;
    /**
     * @SINCE 1.56
     *
     * Fires event {@link #event:appointmentDragEnter appointmentDragEnter} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireAppointmentDragEnter(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The dropped appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * Start date of the dropped appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * Dropped appointment end date as a JavaScript date object.
         */
        endDate?: object;
        /**
         * The row of the appointment.
         */
        calendarRow?: PlanningCalendarRow;
      }
    ): boolean;
    /**
     * @SINCE 1.54
     *
     * Fires event {@link #event:appointmentDrop appointmentDrop} to attached listeners.
     */
    fireAppointmentDrop(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The dropped appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * Start date of the dropped appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * Dropped appointment end date as a JavaScript date object.
         */
        endDate?: object;
        /**
         * The row of the appointment.
         */
        calendarRow?: PlanningCalendarRow;
        /**
         * The drop type. If true - it's "Copy", if false - it's "Move".
         */
        copy?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.56
     *
     * Fires event {@link #event:appointmentResize appointmentResize} to attached listeners.
     */
    fireAppointmentResize(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The resized appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * Start date of the resized appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * End date of the resized appointment, as a JavaScript date object.
         */
        endDate?: object;
      }
    ): this;
    /**
     * Gets content of aggregation {@link #getAppointments appointments}.
     *
     * The appointments to be displayed in the row. Appointments that outside the visible time frame are not
     * rendered.
     *
     * **Note:** For performance reasons, only appointments in the visible time range or nearby should be assigned.
     */
    getAppointments(): CalendarAppointment[];
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getEnableAppointmentsCreate enableAppointmentsCreate}.
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     *
     * **Notes:** In "One month" view, the appointments cannot be created on small screen (as there they are
     * displayed as a list below the dates).
     *
     * Default value is `false`.
     */
    getEnableAppointmentsCreate(): boolean;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getEnableAppointmentsDragAndDrop enableAppointmentsDragAndDrop}.
     *
     * Determines whether the appointments in the row are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     *
     * By default, appointments can be dragged only within their original `PlanningCalendarRow`. When `enableAppointmentsDragAndDrop`
     * is set to true, attaching the {@link #event:appointmentDragEnter appointmentDragEnter} event can change
     * the default behavior and allow appointments to be dragged between calendar rows.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours:
     *  For views where the displayed intervals are hours, the placeholder snaps on every interval of 30 minutes.
     * After the appointment is dropped, the {@link #event:appointmentDrop appointmentDrop} event is fired,
     * containing the new start and end JavaScript date objects.
     *  For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30"
     * lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new start
     * date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can snap on every
     * 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later and would be either
     * "hh:27:30" or "hh:57:30".
     *
     * Days:
     *  For views where intervals are days, the placeholder highlights the whole day and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.
     *
     * Months:
     *  For views where intervals are months, the placeholder highlights the whole month and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed month but the original date and time is preserved.
     *
     * **Note:** In "One month" view, the appointments are not draggable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not draggable.
     *
     * Default value is `false`.
     */
    getEnableAppointmentsDragAndDrop(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getEnableAppointmentsResize enableAppointmentsResize}.
     *
     * Determines whether the appointments in the row are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours: For views where the displayed intervals are hours, the appointment snaps on every interval of
     * 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event
     * is fired, containing the new start and end JavaScript date objects.
     *
     * Days: For views where intervals are days, the appointment snaps to the end of the day. After the resize
     * is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing the new
     * start and end JavaScript date objects. The `endDate` time is changed to 00:00:00
     *
     * Months: For views where intervals are months, the appointment snaps to the end of the month. The {@link
     * #event:appointmentResize appointmentResize} event is fired, containing the new start and end JavaScript
     * date objects. The `endDate` is set to the 00:00:00 and first day of the following month.
     *
     * **Notes:** In "One month" view, the appointments are not resizable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not resizable
     *
     * Default value is `false`.
     */
    getEnableAppointmentsResize(): boolean;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Gets content of aggregation {@link #getHeaderContent headerContent}.
     *
     * Holds the header content of the row.
     *
     * **Note:** If the `headerContent` aggregation is added, then the set icon, description, title and tooltip
     * are ignored.
     */
    getHeaderContent(): Control[];
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Specifies the URI of an image or an icon registered in `sap.ui.core.IconPool`.
     */
    getIcon(): URI;
    /**
     * Gets content of aggregation {@link #getIntervalHeaders intervalHeaders}.
     *
     * The appointments to be displayed at the top of the intervals (for example, for public holidays). Appointments
     * outside the visible time frame are not rendered.
     *
     * Keep in mind that the `intervalHeaders` should always fill whole intervals. If they are shorter or longer
     * than one interval, they are not displayed.
     *
     * **Note:** For performance reasons, only appointments in the visible time range or nearby should be assigned.
     */
    getIntervalHeaders(): CalendarAppointment[];
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Defines the identifier of the row.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.PlanningCalendarRow.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNoAppointmentsText noAppointmentsText}.
     *
     * Defines the text that is displayed when no {@link sap.ui.unified.CalendarAppointment CalendarAppointments}
     * are assigned.
     */
    getNoAppointmentsText(): string;
    /**
     * Gets current value of property {@link #getNonWorkingDays nonWorkingDays}.
     *
     * Determines whether the provided weekdays are displayed as non-working days. Valid values inside the array
     * are from 0 to 6 (other values are ignored). If not set, the weekend defined in the locale settings is
     * displayed as non-working days.
     *
     * **Note:** The non-working days are visualized if the `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Day`.
     */
    getNonWorkingDays(): int[];
    /**
     * Gets current value of property {@link #getNonWorkingHours nonWorkingHours}.
     *
     * Determines whether the provided hours are displayed as non-working hours. Valid values inside the array
     * are from 0 to 23 (other values are ignored).
     *
     * **Note:** The non-working hours are visualized if `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Hour`.
     */
    getNonWorkingHours(): int[];
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the `PlanningCalendarRow`.
     *
     * **Note:** Binding the `selected` property in single selection modes may cause unwanted results if you
     * have more than one selected row in your binding.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets content of aggregation {@link #getSpecialDates specialDates}.
     *
     * Holds the special dates in the context of a row. A single date or a date range can be set.
     *
     * **Note** Only date or date ranges of type `sap.ui.unified.CalendarDayType.NonWorking` will be visualized
     * in the `PlanningCalendarRow`. If the aggregation is set as another type, the date or date range will
     * be ignored and will not be displayed in the control.
     */
    getSpecialDates(): DateTypeRange[];
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text of the header (for example, the department of the person).
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the header (for example, the name of the person).
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.ui.unified.CalendarAppointment` in the aggregation {@link #getAppointments
     * appointments}. and returns its index if found or -1 otherwise.
     */
    indexOfAppointment(
      /**
       * The appointment whose index is looked for
       */
      oAppointment: CalendarAppointment
    ): int;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getHeaderContent headerContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfHeaderContent(
      /**
       * The headerContent whose index is looked for
       */
      oHeaderContent: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.unified.CalendarAppointment` in the aggregation {@link #getIntervalHeaders
     * intervalHeaders}. and returns its index if found or -1 otherwise.
     */
    indexOfIntervalHeader(
      /**
       * The intervalHeader whose index is looked for
       */
      oIntervalHeader: CalendarAppointment
    ): int;
    /**
     * @SINCE 1.56
     *
     * Checks for the provided `sap.ui.unified.DateTypeRange` in the aggregation {@link #getSpecialDates specialDates}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSpecialDate(
      /**
       * The specialDate whose index is looked for
       */
      oSpecialDate: DateTypeRange
    ): int;
    /**
     * Inserts a appointment into the aggregation {@link #getAppointments appointments}.
     */
    insertAppointment(
      /**
       * The appointment to insert; if empty, nothing is inserted
       */
      oAppointment: CalendarAppointment,
      /**
       * The `0`-based index the appointment should be inserted at; for a negative value of `iIndex`, the appointment
       * is inserted at position 0; for a value greater than the current size of the aggregation, the appointment
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Inserts a headerContent into the aggregation {@link #getHeaderContent headerContent}.
     */
    insertHeaderContent(
      /**
       * The headerContent to insert; if empty, nothing is inserted
       */
      oHeaderContent: Control,
      /**
       * The `0`-based index the headerContent should be inserted at; for a negative value of `iIndex`, the headerContent
       * is inserted at position 0; for a value greater than the current size of the aggregation, the headerContent
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a intervalHeader into the aggregation {@link #getIntervalHeaders intervalHeaders}.
     */
    insertIntervalHeader(
      /**
       * The intervalHeader to insert; if empty, nothing is inserted
       */
      oIntervalHeader: CalendarAppointment,
      /**
       * The `0`-based index the intervalHeader should be inserted at; for a negative value of `iIndex`, the intervalHeader
       * is inserted at position 0; for a value greater than the current size of the aggregation, the intervalHeader
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.56
     *
     * Inserts a specialDate into the aggregation {@link #getSpecialDates specialDates}.
     */
    insertSpecialDate(
      /**
       * The specialDate to insert; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange,
      /**
       * The `0`-based index the specialDate should be inserted at; for a negative value of `iIndex`, the specialDate
       * is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAppointments appointments}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAppointments(): CalendarAppointment[];
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Removes all the controls from the aggregation {@link #getHeaderContent headerContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeaderContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getIntervalHeaders intervalHeaders}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllIntervalHeaders(): CalendarAppointment[];
    /**
     * @SINCE 1.56
     *
     * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSpecialDates(): DateTypeRange[];
    /**
     * Removes a appointment from the aggregation {@link #getAppointments appointments}.
     */
    removeAppointment(
      /**
       * The appointment to remove or its index or id
       */
      vAppointment: int | string | CalendarAppointment
    ): CalendarAppointment;
    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Removes a headerContent from the aggregation {@link #getHeaderContent headerContent}.
     */
    removeHeaderContent(
      /**
       * The headerContent to remove or its index or id
       */
      vHeaderContent: int | string | Control
    ): Control;
    /**
     * Removes a intervalHeader from the aggregation {@link #getIntervalHeaders intervalHeaders}.
     */
    removeIntervalHeader(
      /**
       * The intervalHeader to remove or its index or id
       */
      vIntervalHeader: int | string | CalendarAppointment
    ): CalendarAppointment;
    /**
     * @SINCE 1.56
     *
     * Removes a specialDate from the aggregation {@link #getSpecialDates specialDates}.
     */
    removeSpecialDate(
      /**
       * The specialDate to remove or its index or id
       */
      vSpecialDate: int | string | DateTypeRange
    ): DateTypeRange;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getEnableAppointmentsCreate enableAppointmentsCreate}.
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     *
     * **Notes:** In "One month" view, the appointments cannot be created on small screen (as there they are
     * displayed as a list below the dates).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsCreate(
      /**
       * New value for property `enableAppointmentsCreate`
       */
      bEnableAppointmentsCreate?: boolean
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getEnableAppointmentsDragAndDrop enableAppointmentsDragAndDrop}.
     *
     * Determines whether the appointments in the row are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     *
     * By default, appointments can be dragged only within their original `PlanningCalendarRow`. When `enableAppointmentsDragAndDrop`
     * is set to true, attaching the {@link #event:appointmentDragEnter appointmentDragEnter} event can change
     * the default behavior and allow appointments to be dragged between calendar rows.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours:
     *  For views where the displayed intervals are hours, the placeholder snaps on every interval of 30 minutes.
     * After the appointment is dropped, the {@link #event:appointmentDrop appointmentDrop} event is fired,
     * containing the new start and end JavaScript date objects.
     *  For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30"
     * lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new start
     * date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can snap on every
     * 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later and would be either
     * "hh:27:30" or "hh:57:30".
     *
     * Days:
     *  For views where intervals are days, the placeholder highlights the whole day and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.
     *
     * Months:
     *  For views where intervals are months, the placeholder highlights the whole month and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed month but the original date and time is preserved.
     *
     * **Note:** In "One month" view, the appointments are not draggable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not draggable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsDragAndDrop(
      /**
       * New value for property `enableAppointmentsDragAndDrop`
       */
      bEnableAppointmentsDragAndDrop?: boolean
    ): this;
    /**
     * @SINCE 1.56
     *
     * Sets a new value for property {@link #getEnableAppointmentsResize enableAppointmentsResize}.
     *
     * Determines whether the appointments in the row are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours: For views where the displayed intervals are hours, the appointment snaps on every interval of
     * 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event
     * is fired, containing the new start and end JavaScript date objects.
     *
     * Days: For views where intervals are days, the appointment snaps to the end of the day. After the resize
     * is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing the new
     * start and end JavaScript date objects. The `endDate` time is changed to 00:00:00
     *
     * Months: For views where intervals are months, the appointment snaps to the end of the month. The {@link
     * #event:appointmentResize appointmentResize} event is fired, containing the new start and end JavaScript
     * date objects. The `endDate` is set to the 00:00:00 and first day of the following month.
     *
     * **Notes:** In "One month" view, the appointments are not resizable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not resizable
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsResize(
      /**
       * New value for property `enableAppointmentsResize`
       */
      bEnableAppointmentsResize?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Specifies the URI of an image or an icon registered in `sap.ui.core.IconPool`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Defines the identifier of the row.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNoAppointmentsText noAppointmentsText}.
     *
     * Defines the text that is displayed when no {@link sap.ui.unified.CalendarAppointment CalendarAppointments}
     * are assigned.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoAppointmentsText(
      /**
       * New value for property `noAppointmentsText`
       */
      sNoAppointmentsText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNonWorkingDays nonWorkingDays}.
     *
     * Determines whether the provided weekdays are displayed as non-working days. Valid values inside the array
     * are from 0 to 6 (other values are ignored). If not set, the weekend defined in the locale settings is
     * displayed as non-working days.
     *
     * **Note:** The non-working days are visualized if the `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Day`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNonWorkingDays(
      /**
       * New value for property `nonWorkingDays`
       */
      sNonWorkingDays?: int[]
    ): this;
    /**
     * Sets a new value for property {@link #getNonWorkingHours nonWorkingHours}.
     *
     * Determines whether the provided hours are displayed as non-working hours. Valid values inside the array
     * are from 0 to 23 (other values are ignored).
     *
     * **Note:** The non-working hours are visualized if `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Hour`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNonWorkingHours(
      /**
       * New value for property `nonWorkingHours`
       */
      sNonWorkingHours?: int[]
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the `PlanningCalendarRow`.
     *
     * **Note:** Binding the `selected` property in single selection modes may cause unwanted results if you
     * have more than one selected row in your binding.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text of the header (for example, the department of the person).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the header (for example, the name of the person).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle: string
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentCreate appointmentCreate} event of
     * this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is created.
     */
    attachAppointmentCreate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDragEnter appointmentDragEnter} event
     * of this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is dropped.
     *
     * When this event handler is attached, the default behavior of the `enableAppointmentsDragAndDrop` property
     * to move appointments only within their original calendar row is no longer valid. You can move the appointment
     * around all rows for which `enableAppointmentsDragAndDrop` is set to true. In this case, the drop target
     * area is indicated by a placeholder. In the event handler you can call the `preventDefault` method of
     * the event to prevent this default behavior. In this case, the placeholder will no longer be available
     * and it will not be possible to drop the appointment in the row.
     */
    attachAppointmentDragEnter(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDrop appointmentDrop} event of this
     * `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is dropped.
     */
    attachAppointmentDrop(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentResize appointmentResize} event of
     * this `sap.m.PlanningCalendarRow`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PlanningCalendarRow` itself.
     *
     * Fired if an appointment is resized.
     */
    attachAppointmentResize(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PlanningCalendarRow` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PlanningCalendarRowSettings extends $ElementSettings {
    /**
     * Defines the title of the header (for example, the name of the person).
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the text of the header (for example, the department of the person).
     */
    text?: string | PropertyBindingInfo;

    /**
     * Specifies the URI of an image or an icon registered in `sap.ui.core.IconPool`.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Determines whether the provided weekdays are displayed as non-working days. Valid values inside the array
     * are from 0 to 6 (other values are ignored). If not set, the weekend defined in the locale settings is
     * displayed as non-working days.
     *
     * **Note:** The non-working days are visualized if the `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Day`.
     */
    nonWorkingDays?: int[] | PropertyBindingInfo;

    /**
     * Determines whether the provided hours are displayed as non-working hours. Valid values inside the array
     * are from 0 to 23 (other values are ignored).
     *
     * **Note:** The non-working hours are visualized if `intervalType` property of the {@link sap.m.PlanningCalendarView}
     * is set to `Hour`.
     */
    nonWorkingHours?: int[] | PropertyBindingInfo;

    /**
     * Defines the selected state of the `PlanningCalendarRow`.
     *
     * **Note:** Binding the `selected` property in single selection modes may cause unwanted results if you
     * have more than one selected row in your binding.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Defines the identifier of the row.
     */
    key?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines whether the appointments in the row are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     *
     * By default, appointments can be dragged only within their original `PlanningCalendarRow`. When `enableAppointmentsDragAndDrop`
     * is set to true, attaching the {@link #event:appointmentDragEnter appointmentDragEnter} event can change
     * the default behavior and allow appointments to be dragged between calendar rows.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours:
     *  For views where the displayed intervals are hours, the placeholder snaps on every interval of 30 minutes.
     * After the appointment is dropped, the {@link #event:appointmentDrop appointmentDrop} event is fired,
     * containing the new start and end JavaScript date objects.
     *  For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30"
     * lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new start
     * date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can snap on every
     * 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later and would be either
     * "hh:27:30" or "hh:57:30".
     *
     * Days:
     *  For views where intervals are days, the placeholder highlights the whole day and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.
     *
     * Months:
     *  For views where intervals are months, the placeholder highlights the whole month and after the appointment
     * is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the
     * new start and end JavaScript date objects with changed month but the original date and time is preserved.
     *
     * **Note:** In "One month" view, the appointments are not draggable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not draggable.
     */
    enableAppointmentsDragAndDrop?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Determines whether the appointments in the row are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * Specifics based on the intervals (hours, days or months) displayed in the `PlanningCalendar` views:
     *
     * Hours: For views where the displayed intervals are hours, the appointment snaps on every interval of
     * 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event
     * is fired, containing the new start and end JavaScript date objects.
     *
     * Days: For views where intervals are days, the appointment snaps to the end of the day. After the resize
     * is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing the new
     * start and end JavaScript date objects. The `endDate` time is changed to 00:00:00
     *
     * Months: For views where intervals are months, the appointment snaps to the end of the month. The {@link
     * #event:appointmentResize appointmentResize} event is fired, containing the new start and end JavaScript
     * date objects. The `endDate` is set to the 00:00:00 and first day of the following month.
     *
     * **Notes:** In "One month" view, the appointments are not resizable on small screen (as there they are
     * displayed as a list below the dates). Group appointments are also not resizable
     */
    enableAppointmentsResize?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     *
     * **Notes:** In "One month" view, the appointments cannot be created on small screen (as there they are
     * displayed as a list below the dates).
     */
    enableAppointmentsCreate?: boolean | PropertyBindingInfo;

    /**
     * Defines the text that is displayed when no {@link sap.ui.unified.CalendarAppointment CalendarAppointments}
     * are assigned.
     */
    noAppointmentsText?: string | PropertyBindingInfo;

    /**
     * The appointments to be displayed in the row. Appointments that outside the visible time frame are not
     * rendered.
     *
     * **Note:** For performance reasons, only appointments in the visible time range or nearby should be assigned.
     */
    appointments?:
      | CalendarAppointment[]
      | CalendarAppointment
      | AggregationBindingInfo;

    /**
     * The appointments to be displayed at the top of the intervals (for example, for public holidays). Appointments
     * outside the visible time frame are not rendered.
     *
     * Keep in mind that the `intervalHeaders` should always fill whole intervals. If they are shorter or longer
     * than one interval, they are not displayed.
     *
     * **Note:** For performance reasons, only appointments in the visible time range or nearby should be assigned.
     */
    intervalHeaders?:
      | CalendarAppointment[]
      | CalendarAppointment
      | AggregationBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Holds the special dates in the context of a row. A single date or a date range can be set.
     *
     * **Note** Only date or date ranges of type `sap.ui.unified.CalendarDayType.NonWorking` will be visualized
     * in the `PlanningCalendarRow`. If the aggregation is set as another type, the date or date range will
     * be ignored and will not be displayed in the control.
     */
    specialDates?: DateTypeRange[] | DateTypeRange | AggregationBindingInfo;

    /**
     * @SINCE 1.67
     * @EXPERIMENTAL (since 1.67)
     *
     * Holds the header content of the row.
     *
     * **Note:** If the `headerContent` aggregation is added, then the set icon, description, title and tooltip
     * are ignored.
     */
    headerContent?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Fired if an appointment is dropped.
     */
    appointmentDrop?: Function;

    /**
     * @SINCE 1.56
     *
     * Fired if an appointment is dropped.
     *
     * When this event handler is attached, the default behavior of the `enableAppointmentsDragAndDrop` property
     * to move appointments only within their original calendar row is no longer valid. You can move the appointment
     * around all rows for which `enableAppointmentsDragAndDrop` is set to true. In this case, the drop target
     * area is indicated by a placeholder. In the event handler you can call the `preventDefault` method of
     * the event to prevent this default behavior. In this case, the placeholder will no longer be available
     * and it will not be possible to drop the appointment in the row.
     */
    appointmentDragEnter?: Function;

    /**
     * @SINCE 1.56
     *
     * Fired if an appointment is resized.
     */
    appointmentResize?: Function;

    /**
     * @SINCE 1.56
     *
     * Fired if an appointment is created.
     */
    appointmentCreate?: Function;
  }
}

declare module "sap/m/PlanningCalendarView" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import {
    CalendarAppointmentHeight,
    CalendarIntervalType,
  } from "sap/ui/unified/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34.0
   *
   * View of the {@link sap.m.PlanningCalendar}.
   *
   * The `PlanningCalendarView` defines the type of the intervals (hours, days, months) and how many intervals
   * are displayed.
   */
  export default class PlanningCalendarView extends UI5Element {
    /**
     * Constructor for a new `PlanningCalendarView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarViewSettings
    );
    /**
     * Constructor for a new `PlanningCalendarView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PlanningCalendarViewSettings
    );

    /**
     * Creates a new subclass of class sap.m.PlanningCalendarView with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PlanningCalendarView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.81.0
     *
     * Gets current value of property {@link #getAppointmentHeight appointmentHeight}.
     *
     * Determines the different possible sizes for appointments.
     *
     * Default value is `Regular`.
     */
    getAppointmentHeight():
      | CalendarAppointmentHeight
      | keyof typeof CalendarAppointmentHeight;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Defines the description of the `PlanningCalendarView`.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIntervalsL intervalsL}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more
     * than 1024 pixels wide.
     *
     * Default value is `12`.
     */
    getIntervalsL(): int;
    /**
     * Gets current value of property {@link #getIntervalsM intervalsM}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between
     * 600 and 1024 pixels wide.
     *
     * Default value is `8`.
     */
    getIntervalsM(): int;
    /**
     * Gets current value of property {@link #getIntervalsS intervalsS}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less
     * than 600 pixels wide. **Note:** On a phone the maximum visible intervals are 8.
     *
     * Default value is `6`.
     */
    getIntervalsS(): int;
    /**
     * Gets current value of property {@link #getIntervalType intervalType}.
     *
     * Determines the type of the intervals of the row.
     *
     * **Note:** Not all predefined interval types are supported for this property. For more information, see
     * the descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
     *
     * Default value is `Hour`.
     */
    getIntervalType(): CalendarIntervalType;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Defines the key of the view. This must be set to identify the used view in the {@link sap.m.PlanningCalendar}.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.PlanningCalendarView.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowSubIntervals showSubIntervals}.
     *
     * If set, subintervals are displayed as lines in the rows.
     *
     *
     * 	 - Quarter hour subintervals for interval type `Hour`.
     * 	 - Hour subintervals for interval types `Day`, `Week` and `OneMonth`.
     * 	 - Day subintervals for interval type `Month`.
     *
     * Default value is `false`.
     */
    getShowSubIntervals(): boolean;
    /**
     * @SINCE 1.81.0
     *
     * Sets a new value for property {@link #getAppointmentHeight appointmentHeight}.
     *
     * Determines the different possible sizes for appointments.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Regular`.
     */
    setAppointmentHeight(
      /**
       * New value for property `appointmentHeight`
       */
      sAppointmentHeight?:
        | CalendarAppointmentHeight
        | keyof typeof CalendarAppointmentHeight
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Defines the description of the `PlanningCalendarView`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription: string
    ): this;
    /**
     * Sets a new value for property {@link #getIntervalsL intervalsL}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more
     * than 1024 pixels wide.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `12`.
     */
    setIntervalsL(
      /**
       * New value for property `intervalsL`
       */
      iIntervalsL?: int
    ): this;
    /**
     * Sets a new value for property {@link #getIntervalsM intervalsM}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between
     * 600 and 1024 pixels wide.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `8`.
     */
    setIntervalsM(
      /**
       * New value for property `intervalsM`
       */
      iIntervalsM?: int
    ): this;
    /**
     * Sets a new value for property {@link #getIntervalsS intervalsS}.
     *
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less
     * than 600 pixels wide. **Note:** On a phone the maximum visible intervals are 8.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `6`.
     */
    setIntervalsS(
      /**
       * New value for property `intervalsS`
       */
      iIntervalsS?: int
    ): this;
    /**
     * Sets a new value for property {@link #getIntervalType intervalType}.
     *
     * Determines the type of the intervals of the row.
     *
     * **Note:** Not all predefined interval types are supported for this property. For more information, see
     * the descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Hour`.
     */
    setIntervalType(
      /**
       * New value for property `intervalType`
       */
      sIntervalType?: CalendarIntervalType
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Defines the key of the view. This must be set to identify the used view in the {@link sap.m.PlanningCalendar}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowSubIntervals showSubIntervals}.
     *
     * If set, subintervals are displayed as lines in the rows.
     *
     *
     * 	 - Quarter hour subintervals for interval type `Hour`.
     * 	 - Hour subintervals for interval types `Day`, `Week` and `OneMonth`.
     * 	 - Day subintervals for interval type `Month`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSubIntervals(
      /**
       * New value for property `showSubIntervals`
       */
      bShowSubIntervals?: boolean
    ): this;
  }

  export interface $PlanningCalendarViewSettings extends $ElementSettings {
    /**
     * Defines the key of the view. This must be set to identify the used view in the {@link sap.m.PlanningCalendar}.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Determines the type of the intervals of the row.
     *
     * **Note:** Not all predefined interval types are supported for this property. For more information, see
     * the descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
     */
    intervalType?: CalendarIntervalType | PropertyBindingInfo;

    /**
     * Defines the description of the `PlanningCalendarView`.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less
     * than 600 pixels wide. **Note:** On a phone the maximum visible intervals are 8.
     */
    intervalsS?: int | PropertyBindingInfo;

    /**
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between
     * 600 and 1024 pixels wide.
     */
    intervalsM?: int | PropertyBindingInfo;

    /**
     * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more
     * than 1024 pixels wide.
     */
    intervalsL?: int | PropertyBindingInfo;

    /**
     * If set, subintervals are displayed as lines in the rows.
     *
     *
     * 	 - Quarter hour subintervals for interval type `Hour`.
     * 	 - Hour subintervals for interval types `Day`, `Week` and `OneMonth`.
     * 	 - Day subintervals for interval type `Month`.
     */
    showSubIntervals?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.81.0
     *
     * Determines the different possible sizes for appointments.
     */
    appointmentHeight?:
      | (CalendarAppointmentHeight | keyof typeof CalendarAppointmentHeight)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/plugins/ColumnResizer" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.91
   *
   * Enables column resizing for the `sap.m.Table`. This plugin can be added to the control via its `dependents`
   * aggregation and there must only be 1 instance of the plugin per control.
   */
  export default class ColumnResizer extends UI5Element {
    /**
     * Constructor for a new ColumnResizer plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the `ColumnResizer`
       */
      mSettings?: $ColumnResizerSettings
    );
    /**
     * Constructor for a new ColumnResizer plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new `ColumnResizer`, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the `ColumnResizer`
       */
      mSettings?: $ColumnResizerSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:columnResize columnResize} event of this `sap.m.plugins.ColumnResizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.ColumnResizer` itself.
     *
     * This event is fired when the column is resized.
     */
    attachColumnResize(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.ColumnResizer` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:columnResize columnResize} event of this `sap.m.plugins.ColumnResizer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachColumnResize(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.plugins.ColumnResizer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ColumnResizer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:columnResize columnResize} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireColumnResize(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The column being resized.
         */
        column?: UI5Element;
        /**
         * The new width of the column.
         */
        width?: CSSSize;
      }
    ): boolean;
    /**
     * Returns a metadata object for class sap.m.plugins.ColumnResizer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Displays the resize handle for the provided column `DOM` reference.
     */
    startResizing(
      /**
       * column DOM reference
       */
      oDomRef: HTMLElement
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:columnResize columnResize} event of this `sap.m.plugins.ColumnResizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.ColumnResizer` itself.
     *
     * This event is fired when the column is resized.
     */
    attachColumnResize(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.ColumnResizer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ColumnResizerSettings extends $ElementSettings {
    /**
     * This event is fired when the column is resized.
     */
    columnResize?: Function;
  }
}

declare module "sap/m/plugins/DataStateIndicator" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Filter from "sap/ui/model/Filter";

  import DataState from "sap/ui/model/DataState";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ValueState } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.73
   *
   * This plugin implements a message strip used to show binding-related messages.
   */
  export default class DataStateIndicator extends UI5Element {
    /**
     * Constructor for a new DataStateIndicator plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the `DataStateIndicator`
       */
      mSettings?: $DataStateIndicatorSettings
    );
    /**
     * Constructor for a new DataStateIndicator plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new `DataStateIndicator`, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the `DataStateIndicator`
       */
      mSettings?: $DataStateIndicatorSettings
    );

    /**
     * @SINCE 1.89
     *
     * Attaches event handler `fnFunction` to the {@link #event:applyFilter applyFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the user filters data state messages and if the `enableFiltering` property is
     * set to `true`.
     */
    attachApplyFilter(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.89
     *
     * Attaches event handler `fnFunction` to the {@link #event:clearFilter clearFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the user clears the data state message filter and if the `enableFiltering` property
     * is set to `true`.
     */
    attachClearFilter(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataStateChange dataStateChange} event of this
     * `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the {@link sap.ui.model.DataState data state} of the plugin parent is changed.
     */
    attachDataStateChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.89
     *
     * Detaches event handler `fnFunction` from the {@link #event:applyFilter applyFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachApplyFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.89
     *
     * Detaches event handler `fnFunction` from the {@link #event:clearFilter clearFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachClearFilter(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:dataStateChange dataStateChange} event of
     * this `sap.m.plugins.DataStateIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDataStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.plugins.DataStateIndicator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DataStateIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.89
     *
     * Fires event {@link #event:applyFilter applyFilter} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireApplyFilter(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The filter object representing the entries with messages.
         */
        filter?: Filter;
      }
    ): boolean;
    /**
     * @SINCE 1.89
     *
     * Fires event {@link #event:clearFilter clearFilter} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireClearFilter(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Fires event {@link #event:dataStateChange dataStateChange} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireDataStateChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The data state object.
         */
        dataState?: DataState;
        /**
         * The messages (@see sap.ui.core.message.Message) from the current `dataState` object filtered by the given
         * `filter` function.
         */
        filteredMessages?: object[];
      }
    ): boolean;
    /**
     * @SINCE 1.89
     *
     * Gets current value of property {@link #getEnableFiltering enableFiltering}.
     *
     * Enables filtering for data state messages if this property is set to `true`. A link is provided to the
     * user that allows them to filter. After the binding-related messages have been filtered by the user, all
     * the existing filters are only taken into account once the message filter has been cleared again.
     *
     * **Note:** This feature must be enabled for OData models only.
     *
     * Default value is `false`.
     */
    getEnableFiltering(): boolean;
    /**
     * Gets current value of property {@link #getFilter filter}.
     *
     * Defines a predicate to test each message of the data state.
     *
     * This callback gets called using the {@link sap.ui.core.message.Message message} and {@link sap.ui.core.Control
     * related control} parameters. Return `true` to keep the message, `false` otherwise.
     */
    getFilter(): Function;
    /**
     * Returns a metadata object for class sap.m.plugins.DataStateIndicator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.89
     *
     * Return whether message filtering is active or not.
     */
    isFiltering(): boolean;
    /**
     * Refreshes the messages displayed for the current data state. The current data state is evaluated again,
     * and the filters are applied.
     */
    refresh(): void;
    /**
     * @SINCE 1.89
     *
     * Sets a new value for property {@link #getEnableFiltering enableFiltering}.
     *
     * Enables filtering for data state messages if this property is set to `true`. A link is provided to the
     * user that allows them to filter. After the binding-related messages have been filtered by the user, all
     * the existing filters are only taken into account once the message filter has been cleared again.
     *
     * **Note:** This feature must be enabled for OData models only.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableFiltering(
      /**
       * New value for property `enableFiltering`
       */
      bEnableFiltering?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFilter filter}.
     *
     * Defines a predicate to test each message of the data state.
     *
     * This callback gets called using the {@link sap.ui.core.message.Message message} and {@link sap.ui.core.Control
     * related control} parameters. Return `true` to keep the message, `false` otherwise.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFilter(
      /**
       * New value for property `filter`
       */
      fnFilter: Function
    ): this;
    /**
     * Shows a message.
     */
    showMessage(
      /**
       * The message text, if empty, the message is hidden
       */
      sText?: string,
      /**
       * The message type
       */
      sType?: ValueState | keyof typeof ValueState
    ): void;
    /**
     * @SINCE 1.89
     *
     * Attaches event handler `fnFunction` to the {@link #event:applyFilter applyFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the user filters data state messages and if the `enableFiltering` property is
     * set to `true`.
     */
    attachApplyFilter(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.89
     *
     * Attaches event handler `fnFunction` to the {@link #event:clearFilter clearFilter} event of this `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the user clears the data state message filter and if the `enableFiltering` property
     * is set to `true`.
     */
    attachClearFilter(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:dataStateChange dataStateChange} event of this
     * `sap.m.plugins.DataStateIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.DataStateIndicator` itself.
     *
     * This event is fired when the {@link sap.ui.model.DataState data state} of the plugin parent is changed.
     */
    attachDataStateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.DataStateIndicator` itself
       */
      oListener?: object
    ): this;
  }

  export interface $DataStateIndicatorSettings extends $ElementSettings {
    /**
     * Defines a predicate to test each message of the data state.
     *
     * This callback gets called using the {@link sap.ui.core.message.Message message} and {@link sap.ui.core.Control
     * related control} parameters. Return `true` to keep the message, `false` otherwise.
     */
    filter?: Function | PropertyBindingInfo;

    /**
     * @SINCE 1.89
     *
     * Enables filtering for data state messages if this property is set to `true`. A link is provided to the
     * user that allows them to filter. After the binding-related messages have been filtered by the user, all
     * the existing filters are only taken into account once the message filter has been cleared again.
     *
     * **Note:** This feature must be enabled for OData models only.
     */
    enableFiltering?: boolean | PropertyBindingInfo;

    /**
     * This event is fired when the {@link sap.ui.model.DataState data state} of the plugin parent is changed.
     */
    dataStateChange?: Function;

    /**
     * @SINCE 1.89
     *
     * This event is fired when the user filters data state messages and if the `enableFiltering` property is
     * set to `true`.
     */
    applyFilter?: Function;

    /**
     * @SINCE 1.89
     *
     * This event is fired when the user clears the data state message filter and if the `enableFiltering` property
     * is set to `true`.
     */
    clearFilter?: Function;
  }
}

declare module "sap/m/plugins/PasteProvider" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.91
   *
   * Provides cross-platform paste capabilities for the `sap.m.Button` control which allows the user to initiate
   * a paste action.
   */
  export default class PasteProvider extends UI5Element {
    /**
     * Constructor for a new PasteProvider plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the `PasteProvider`
       */
      mSettings?: $PasteProviderSettings
    );
    /**
     * Constructor for a new PasteProvider plugin.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new `PasteProvider`, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the `PasteProvider`
       */
      mSettings?: $PasteProviderSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.m.plugins.PasteProvider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.PasteProvider` itself.
     *
     * This event gets fired when the user pastes content from the clipboard or when the Paste button is pressed
     * if the clipboard access has already been granted. Pasting can be done via the paste feature of the mobile
     * device or the standard paste keyboard shortcut while the popover is open. By default, a synthetic `Clipboard`
     * event that represents the paste data gets dispatched for the control defined in the `pasteFor` association.
     * To avoid this, call `preventDefault` on the event instance.
     */
    attachPaste(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.PasteProvider` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:paste paste} event of this `sap.m.plugins.PasteProvider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPaste(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.plugins.PasteProvider with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PasteProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:paste paste} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    firePaste(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Two-dimentional array of strings with data from the clipboard. The first dimension represents the rows,
         * and the second dimension represents the cells of the tabular data.
         */
        data?: Array<string[]>;
        /**
         * The text data, with all special characters, from the clipboard.
         */
        text?: string;
      }
    ): boolean;
    /**
     * Returns a metadata object for class sap.m.plugins.PasteProvider.
     */
    static getMetadata(): ElementMetadata;
    /**
     * ID of the element which is the current target of the association {@link #getPasteFor pasteFor}, or `null`.
     */
    getPasteFor(): ID;
    /**
     * Sets the associated {@link #getPasteFor pasteFor}.
     */
    setPasteFor(
      /**
       * ID of an element which becomes the new target of this pasteFor association; alternatively, an element
       * instance may be given
       */
      oPasteFor: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.m.plugins.PasteProvider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.plugins.PasteProvider` itself.
     *
     * This event gets fired when the user pastes content from the clipboard or when the Paste button is pressed
     * if the clipboard access has already been granted. Pasting can be done via the paste feature of the mobile
     * device or the standard paste keyboard shortcut while the popover is open. By default, a synthetic `Clipboard`
     * event that represents the paste data gets dispatched for the control defined in the `pasteFor` association.
     * To avoid this, call `preventDefault` on the event instance.
     */
    attachPaste(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.plugins.PasteProvider` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PasteProviderSettings extends $ElementSettings {
    /**
     * Defines the control which the paste is associated with.
     */
    pasteFor?: Control | string;

    /**
     * This event gets fired when the user pastes content from the clipboard or when the Paste button is pressed
     * if the clipboard access has already been granted. Pasting can be done via the paste feature of the mobile
     * device or the standard paste keyboard shortcut while the popover is open. By default, a synthetic `Clipboard`
     * event that represents the paste data gets dispatched for the control defined in the `pasteFor` association.
     * To avoid this, call `preventDefault` on the event instance.
     */
    paste?: Function;
  }
}

declare module "sap/m/Popover" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { PopupInterface, ID, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PlacementType, TitleAlignment } from "sap/m/library";

  import Button from "sap/m/Button";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Displays additional information for an object in a compact way.
   *
   * Overview: The popover displays additional information for an object in a compact way and without leaving
   * the page. The popover can contain various UI elements such as fields, tables, images, and charts. It
   * can also include actions in the footer. Structure: The popover has three main areas:
   * 	 - Header (optional) - with a back button and a title
   * 	 - Content - holds all the controls
   * 	 - Footer (optional) - with additional action buttons  Guidelines:
   * 	 - Do not overlap popovers.
   * 	 - You can determine the {@link sap.m.PlacementType placement} of the popover relative to the control
   * 			that opens it.
   * 	 - Ensure that the content has a basic design and shows only the most important information.  Usage:
   * 			When to use::
   * 	 - You need to define your own structure of controls within the popover.  When not to use::
   *
   * 	 - The {@link sap.m.QuickView QuickView} is more appropriate for your use case.  Responsive Behavior:
   * 			The popover is closed when the user clicks or taps outside the popover or selects an action within the
   * 			popover, which calls the popover's `close()` method. You can prevent this with the `modal` property.
   * 			The popover can be resized when the `resizable` property is enabled.
   *
   * When using the sap.m.Popover in Sap Quartz theme, the breakpoints and layout paddings could be determined
   * by the container's width. To enable this concept and add responsive paddings to an element of the Popover
   * control, you may add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * `sapUiResponsivePadding--subHeader`, `sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`.
   *
   * 	 - {@link sap.m.Popover} is not responsive on mobile devices - it will always be rendered as
   * 			a popover and you have to take care of its size and position.
   * 	 - {@link sap.m.ResponsivePopover} is adaptive and responsive. It renders as a dialog with a close button
   * 			in the header on phones, and as a popover on tablets.
   */
  export default class Popover extends Control implements PopupInterface {
    __implements__sap_ui_core_PopupInterface: boolean;
    /**
     * Constructor for a new Popover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/popover/ Popover}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );
    /**
     * Constructor for a new Popover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/popover/ Popover}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PopoverSettings
    );

    /**
     * Hook called after adjusment of the Popover position.
     */
    _afterAdjustPositionAndArrowHook(): void;
    /**
     * Hook called before adjusment of the Popover position.
     */
    _beforeAdjustPositionAndArrowHook(): void;
    /**
     * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the title
     * and buttons if needed inside, and finally return this newly create header.
     */
    _getAnyHeader(): object;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired after the popover is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired before the popover is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired before the popover is opened.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the popover when it's already opened.
     */
    close(): this;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
     */
    destroyBeginButton(): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
     */
    destroyCustomHeader(): this;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
     */
    destroyEndButton(): this;
    /**
     * Destroys the footer in the aggregation {@link #getFooter footer}.
     */
    destroyFooter(): this;
    /**
     * @SINCE 1.15.1
     *
     * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
     */
    destroySubHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Popover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Popover with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Popover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This refers to the control which opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This refers to the control which opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This refers to the control which opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This refers to the control which opens the popover.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getBeginButton beginButton}.
     *
     * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is
     * set to false, the property is ignored.
     */
    getBeginButton(): Control;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content inside the popover.
     */
    getContent(): Control[];
    /**
     * @SINCE 1.9.0
     *
     * Gets current value of property {@link #getContentHeight contentHeight}.
     *
     * Set the height of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     */
    getContentHeight(): CSSSize;
    /**
     * @SINCE 1.36
     *
     * Gets current value of property {@link #getContentMinWidth contentMinWidth}.
     *
     * Sets the minimum width of the content area inside popover.
     *
     * Default value is `empty string`.
     */
    getContentMinWidth(): CSSSize;
    /**
     * @SINCE 1.9.0
     *
     * Gets current value of property {@link #getContentWidth contentWidth}.
     *
     * Set the width of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     */
    getContentWidth(): CSSSize;
    /**
     * Gets content of aggregation {@link #getCustomHeader customHeader}.
     *
     * Any control that needed to be displayed in the header area. When this is set, the showHeader property
     * is ignored, and only this customHeader is shown on the top of popover.
     */
    getCustomHeader(): Control;
    /**
     * @deprecated (since 1.15.0) - This property is deprecated. Please use properties verticalScrolling and
     * horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling
     * and horizontalScrolling.
     *
     * Gets current value of property {@link #getEnableScrolling enableScrolling}.
     *
     * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead.
     * If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
     *
     * Default value is `true`.
     */
    getEnableScrolling(): boolean;
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getEndButton endButton}.
     *
     * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader
     * is set to false, the property is ignored.
     */
    getEndButton(): Control;
    /**
     * Gets content of aggregation {@link #getFooter footer}.
     *
     * This is optional footer which is shown on the bottom of the popover.
     */
    getFooter(): Control;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * This property indicates if user can scroll horizontally inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     *
     * Default value is `true`.
     */
    getHorizontalScrolling(): boolean;
    /**
     * @SINCE 1.15.0
     *
     * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus},
     * or `null`.
     */
    getInitialFocus(): ID;
    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the beginButton
     * instead.
     *
     * ID of the element which is the current target of the association {@link #getLeftButton leftButton}, or
     * `null`.
     */
    getLeftButton(): ID;
    /**
     * Returns a metadata object for class sap.m.Popover.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getModal modal}.
     *
     * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with
     * the background. The default value is false.
     *
     * Default value is `false`.
     */
    getModal(): boolean;
    /**
     * Gets current value of property {@link #getOffsetX offsetX}.
     *
     * The offset for the popover placement in the x axis. It's with unit pixel.
     *
     * Default value is `0`.
     */
    getOffsetX(): int;
    /**
     * Gets current value of property {@link #getOffsetY offsetY}.
     *
     * The offset for the popover placement in the y axis. It's with unit pixel.
     *
     * Default value is `0`.
     */
    getOffsetY(): int;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left,
     * sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal,
     * sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical,
     * sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto.
     * The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause
     * any rerendering of the popover, but it will take effect when it's opened again.
     *
     * Default value is `Right`.
     */
    getPlacement(): PlacementType | keyof typeof PlacementType;
    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Gets current value of property {@link #getResizable resizable}.
     *
     * Whether resize option is enabled. Note:* This property is effective only on Desktop
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the endButton
     * instead.
     *
     * ID of the element which is the current target of the association {@link #getRightButton rightButton},
     * or `null`.
     */
    getRightButton(): ID;
    /**
     * @SINCE 1.31
     *
     * Gets current value of property {@link #getShowArrow showArrow}.
     *
     * Whether Popover arrow should be visible
     *
     * Default value is `true`.
     */
    getShowArrow(): boolean;
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * If a header should be shown at the top of the popover.
     *
     * Default value is `true`.
     */
    getShowHeader(): boolean;
    /**
     * @SINCE 1.15.1
     *
     * Gets content of aggregation {@link #getSubHeader subHeader}.
     *
     * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at
     * the beginning of Popover when there's no main header. SubHeader is out of the content area and won't
     * be scrolled when content's size is bigger than the content area's size.
     */
    getSubHeader(): Control;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Title text appears in the header. This property will be ignored when `showHeader` is set to `false`.
     * If you want to show a header in the `sap.m.Popover`, don't forget to set the {@link #setShowHeader showHeader}
     * property to `true`.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
     *
     * This property indicates if user can scroll vertically inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     *
     * Default value is `true`.
     */
    getVerticalScrolling(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes
     * opening and closing animations), otherwise it returns false.
     */
    isOpen(): boolean;
    /**
     * Opens the Popover and sets the Popover position according to the {@link #getPlacement() placement} property
     * around the `oControl` parameter.
     */
    openBy(
      /**
       * This is the control to which the Popover will be placed. It can be not only a UI5 control, but also an
       * existing DOM reference. The side of the placement depends on the placement property set in the Popover.
       */
      oControl: object,
      /**
       * Indicates whether popover should be managed by InstanceManager or not
       */
      bSkipInstanceManager: boolean
    ): this;
    /**
     * Calculate outerHeight of the element; used as hook for SVG elements
     */
    static outerHeight(
      /**
       * An Element for which outerHeight will be calculated.
       */
      oElement: HTMLElement,
      /**
       * Determines if the margins should be included in the calculated outerHeight * @returns {number} The outer
       * height of the element
       */
      bIncludeMargin?: boolean
    ): void;
    /**
     * Calculate outerWidth of the element; used as hook for SVG elements
     */
    static outerWidth(
      /**
       * An Element for which outerWidth will be calculated
       */
      oElement: HTMLElement,
      /**
       * Determines if the margins should be included in the calculated outerWidth
       */
      bIncludeMargin?: boolean
    ): number;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getBeginButton beginButton}.
     */
    setBeginButton(
      /**
       * The beginButton to set
       */
      oBeginButton: Control
    ): this;
    /**
     * Setter for property `bounce`.
     *
     * Default value is empty
     */
    setBounce(
      /**
       * New value for property `bounce`
       */
      bBounce: boolean
    ): this;
    /**
     * @SINCE 1.9.0
     *
     * Sets a new value for property {@link #getContentHeight contentHeight}.
     *
     * Set the height of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentHeight(
      /**
       * New value for property `contentHeight`
       */
      sContentHeight?: CSSSize
    ): this;
    /**
     * @SINCE 1.36
     *
     * Sets a new value for property {@link #getContentMinWidth contentMinWidth}.
     *
     * Sets the minimum width of the content area inside popover.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setContentMinWidth(
      /**
       * New value for property `contentMinWidth`
       */
      sContentMinWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.9.0
     *
     * Sets a new value for property {@link #getContentWidth contentWidth}.
     *
     * Set the width of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentWidth(
      /**
       * New value for property `contentWidth`
       */
      sContentWidth?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getCustomHeader customHeader}.
     */
    setCustomHeader(
      /**
       * The customHeader to set
       */
      oCustomHeader: Control
    ): this;
    /**
     * @deprecated (since 1.15.0) - This property is deprecated. Please use properties verticalScrolling and
     * horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling
     * and horizontalScrolling.
     *
     * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
     *
     * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead.
     * If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableScrolling(
      /**
       * New value for property `enableScrolling`
       */
      bEnableScrolling?: boolean
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getEndButton endButton}.
     */
    setEndButton(
      /**
       * The endButton to set
       */
      oEndButton: Control
    ): this;
    /**
     * @SINCE 1.16.8
     *
     * The followOf feature closes the Popover when the position of the control that opened the Popover changes
     * by at least 32 pixels (on desktop browsers). This may lead to unwanted closing of the Popover.
     *
     * This function is for enabling/disabling the followOf feature.
     */
    setFollowOf(
      /**
       * Enables the followOf feature
       */
      bValue: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getFooter footer}.
     */
    setFooter(
      /**
       * The footer to set
       */
      oFooter: Control
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * This property indicates if user can scroll horizontally inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setHorizontalScrolling(
      /**
       * New value for property `horizontalScrolling`
       */
      bHorizontalScrolling?: boolean
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets the associated {@link #getInitialFocus initialFocus}.
     */
    setInitialFocus(
      /**
       * ID of an element which becomes the new target of this initialFocus association; alternatively, an element
       * instance may be given
       */
      oInitialFocus: ID | Control
    ): this;
    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the beginButton
     * instead.
     *
     * Sets the associated {@link #getLeftButton leftButton}.
     */
    setLeftButton(
      /**
       * ID of an element which becomes the new target of this leftButton association; alternatively, an element
       * instance may be given
       */
      oLeftButton: ID | Button
    ): this;
    /**
     * Setter for property `modal`. This overwrites the default setter of the property `modal` to avoid rerendering
     * the whole popover control.
     *
     * Default value is `false`
     */
    setModal(
      /**
       * New value for property `modal`.
       */
      bModal: boolean,
      /**
       * A CSS class (or space-separated list of classes) that should be added to the block layer.
       */
      sModalCSSClass?: string
    ): this;
    /**
     * Sets a new value for property {@link #getOffsetX offsetX}.
     *
     * The offset for the popover placement in the x axis. It's with unit pixel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setOffsetX(
      /**
       * New value for property `offsetX`
       */
      iOffsetX?: int
    ): this;
    /**
     * Sets a new value for property {@link #getOffsetY offsetY}.
     *
     * The offset for the popover placement in the y axis. It's with unit pixel.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setOffsetY(
      /**
       * New value for property `offsetY`
       */
      iOffsetY?: int
    ): this;
    /**
     * Set the placement of the Popover.
     */
    setPlacement(
      /**
       * The position of the Popover
       */
      sPlacement: PlacementType | keyof typeof PlacementType
    ): this;
    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Sets a new value for property {@link #getResizable resizable}.
     *
     * Whether resize option is enabled. Note:* This property is effective only on Desktop
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResizable(
      /**
       * New value for property `resizable`
       */
      bResizable?: boolean
    ): this;
    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the endButton
     * instead.
     *
     * Sets the associated {@link #getRightButton rightButton}.
     */
    setRightButton(
      /**
       * ID of an element which becomes the new target of this rightButton association; alternatively, an element
       * instance may be given
       */
      oRightButton: ID | Button
    ): this;
    /**
     * @SINCE 1.31
     *
     * Sets a new value for property {@link #getShowArrow showArrow}.
     *
     * Whether Popover arrow should be visible
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowArrow(
      /**
       * New value for property `showArrow`
       */
      bShowArrow?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * If a header should be shown at the top of the popover.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * @SINCE 1.15.1
     *
     * Sets the aggregated {@link #getSubHeader subHeader}.
     */
    setSubHeader(
      /**
       * The subHeader to set
       */
      oSubHeader: Control
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Title text appears in the header. This property will be ignored when `showHeader` is set to `false`.
     * If you want to show a header in the `sap.m.Popover`, don't forget to set the {@link #setShowHeader showHeader}
     * property to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
     *
     * This property indicates if user can scroll vertically inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVerticalScrolling(
      /**
       * New value for property `verticalScrolling`
       */
      bVerticalScrolling?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired after the popover is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired after the popover is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired before the popover is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.Popover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Popover` itself.
     *
     * This event will be fired before the popover is opened.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Popover` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PopoverSettings extends $ControlSettings {
    /**
     * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left,
     * sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal,
     * sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical,
     * sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto.
     * The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause
     * any rerendering of the popover, but it will take effect when it's opened again.
     */
    placement?:
      | (PlacementType | keyof typeof PlacementType)
      | PropertyBindingInfo;

    /**
     * If a header should be shown at the top of the popover.
     */
    showHeader?: boolean | PropertyBindingInfo;

    /**
     * Title text appears in the header. This property will be ignored when `showHeader` is set to `false`.
     * If you want to show a header in the `sap.m.Popover`, don't forget to set the {@link #setShowHeader showHeader}
     * property to `true`.
     */
    title?: string | PropertyBindingInfo;

    /**
     * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with
     * the background. The default value is false.
     */
    modal?: boolean | PropertyBindingInfo;

    /**
     * The offset for the popover placement in the x axis. It's with unit pixel.
     */
    offsetX?: int | PropertyBindingInfo;

    /**
     * The offset for the popover placement in the y axis. It's with unit pixel.
     */
    offsetY?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.31
     *
     * Whether Popover arrow should be visible
     */
    showArrow?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.9.0
     *
     * Set the width of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     */
    contentWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.36
     *
     * Sets the minimum width of the content area inside popover.
     */
    contentMinWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.9.0
     *
     * Set the height of the content area inside Popover. When controls which adapt their size to the parent
     * control are added directly into Popover, for example sap.m.Page control, a size needs to be specified
     * to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the
     * right way. This values isn't necessary for controls added to Popover directly which can decide their
     * size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their
     * size to the parent control.
     */
    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @deprecated (since 1.15.0) - This property is deprecated. Please use properties verticalScrolling and
     * horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling
     * and horizontalScrolling.
     *
     * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead.
     * If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
     */
    enableScrolling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * This property indicates if user can scroll vertically inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     */
    verticalScrolling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * This property indicates if user can scroll horizontally inside popover when the content is bigger than
     * the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover,
     * this property needs to be set to false to disable the scrolling in popover in order to make the scrolling
     * in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer
     * as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property
     * to false automatically ignoring the existing value of this property.
     */
    horizontalScrolling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16.5
     * @deprecated (since 1.42) - This parameter is obsolete and has no effect.
     *
     * Whether bouncing is enabled.
     */
    bounce?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Whether resize option is enabled. *Note:* This property is effective only on Desktop
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * The content inside the popover.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Any control that needed to be displayed in the header area. When this is set, the showHeader property
     * is ignored, and only this customHeader is shown on the top of popover.
     */
    customHeader?: Control;

    /**
     * @SINCE 1.15.1
     *
     * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at
     * the beginning of Popover when there's no main header. SubHeader is out of the content area and won't
     * be scrolled when content's size is bigger than the content area's size.
     */
    subHeader?: Control;

    /**
     * This is optional footer which is shown on the bottom of the popover.
     */
    footer?: Control;

    /**
     * @SINCE 1.15.1
     *
     * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is
     * set to false, the property is ignored.
     */
    beginButton?: Control;

    /**
     * @SINCE 1.15.1
     *
     * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader
     * is set to false, the property is ignored.
     */
    endButton?: Control;

    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the beginButton
     * instead.
     *
     * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other
     * platforms. Please set this to null if you want to remove the left button from the bar. And the button
     * is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
     */
    leftButton?: Button | string;

    /**
     * @deprecated (since 1.15.1) - This property has been deprecated since 1.15.1. Please use the endButton
     * instead.
     *
     * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove
     * the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader
     * is set to false, this property will be ignored.
     */
    rightButton?: Button | string;

    /**
     * @SINCE 1.15.0
     *
     * Focus on the popover is set in the sequence of `beginButton` and `endButton`, when available. But if
     * a control other than these two buttons needs to get the focus, set the `initialFocus` with the control
     * which should be focused on.
     */
    initialFocus?: Control | string;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * This event will be fired after the popover is opened.
     */
    afterOpen?: Function;

    /**
     * This event will be fired after the popover is closed.
     */
    afterClose?: Function;

    /**
     * This event will be fired before the popover is opened.
     */
    beforeOpen?: Function;

    /**
     * This event will be fired before the popover is closed.
     */
    beforeClose?: Function;
  }
}

declare module "sap/m/ProgressIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    CSSSize,
    ValueState,
    TextDirection,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.13.1
   *
   * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator
   * is filled with a color. Additionally, a user-defined string can be displayed on the ProgressIndicator.
   */
  export default class ProgressIndicator
    extends Control
    implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new ProgressIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/progress-indicator/ Progress Indicator}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProgressIndicatorSettings
    );
    /**
     * Constructor for a new ProgressIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/progress-indicator/ Progress Indicator}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ProgressIndicatorSettings
    );

    /**
     * @SINCE 1.69
     *
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * @SINCE 1.69
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Creates a new subclass of class sap.m.ProgressIndicator with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ProgressIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns the `sap.m.ProgressIndicator` accessibility information.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.69
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.69
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.73
     *
     * Gets current value of property {@link #getDisplayAnimation displayAnimation}.
     *
     * Determines whether a percentage change is displayed with animation.
     *
     * Default value is `true`.
     */
    getDisplayAnimation(): boolean;
    /**
     * @SINCE 1.50
     *
     * Gets current value of property {@link #getDisplayOnly displayOnly}.
     *
     * Determines whether the control is in display-only state where the control has different visualization
     * and cannot be focused.
     *
     * Default value is `false`.
     */
    getDisplayOnly(): boolean;
    /**
     * Gets current value of property {@link #getDisplayValue displayValue}.
     *
     * Specifies the text value to be displayed in the bar.
     */
    getDisplayValue(): string;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * @SINCE 1.15.0
     *
     * Gets current value of property {@link #getHeight height}.
     *
     * Specifies the height of the control. The default value depends on the theme. Suggested size for normal
     * use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.ProgressIndicator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPercentValue percentValue}.
     *
     * Specifies the numerical value in percent for the length of the progress bar.
     *
     * **Note:** If a value greater than 100 is provided, the `percentValue` is set to 100. In other cases of
     * invalid value, `percentValue` is set to its default of 0.
     *
     * Default value is `0`.
     */
    getPercentValue(): float;
    /**
     * Gets current value of property {@link #getShowValue showValue}.
     *
     * Indicates whether the displayValue should be shown in the ProgressIndicator.
     *
     * Default value is `true`.
     */
    getShowValue(): boolean;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success,
     * Information, None (default value). The color for each state depends on the theme.
     *
     * Default value is `None`.
     */
    getState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control
     * inherits text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Specifies the width of the control.
     *
     * Default value is `'100%'`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.69
     *
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * @SINCE 1.69
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.69
     *
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.69
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.73
     *
     * Sets a new value for property {@link #getDisplayAnimation displayAnimation}.
     *
     * Determines whether a percentage change is displayed with animation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setDisplayAnimation(
      /**
       * New value for property `displayAnimation`
       */
      bDisplayAnimation?: boolean
    ): this;
    /**
     * @SINCE 1.50
     *
     * Sets a new value for property {@link #getDisplayOnly displayOnly}.
     *
     * Determines whether the control is in display-only state where the control has different visualization
     * and cannot be focused.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisplayOnly(
      /**
       * New value for property `displayOnly`
       */
      bDisplayOnly?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDisplayValue displayValue}.
     *
     * Specifies the text value to be displayed in the bar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplayValue(
      /**
       * New value for property `displayValue`
       */
      sDisplayValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.15.0
     *
     * Sets a new value for property {@link #getHeight height}.
     *
     * Specifies the height of the control. The default value depends on the theme. Suggested size for normal
     * use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getPercentValue percentValue}.
     *
     * Specifies the numerical value in percent for the length of the progress bar.
     *
     * **Note:** If a value greater than 100 is provided, the `percentValue` is set to 100. In other cases of
     * invalid value, `percentValue` is set to its default of 0.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setPercentValue(
      /**
       * New value for property `percentValue`
       */
      fPercentValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getShowValue showValue}.
     *
     * Indicates whether the displayValue should be shown in the ProgressIndicator.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowValue(
      /**
       * New value for property `showValue`
       */
      bShowValue?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success,
     * Information, None (default value). The color for each state depends on the theme.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control
     * inherits text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Specifies the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ProgressIndicatorSettings extends $ControlSettings {
    /**
     * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success,
     * Information, None (default value). The color for each state depends on the theme.
     */
    state?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Specifies the text value to be displayed in the bar.
     */
    displayValue?: string | PropertyBindingInfo;

    /**
     * Specifies the numerical value in percent for the length of the progress bar.
     *
     * **Note:** If a value greater than 100 is provided, the `percentValue` is set to 100. In other cases of
     * invalid value, `percentValue` is set to its default of 0.
     */
    percentValue?: float | PropertyBindingInfo;

    /**
     * Indicates whether the displayValue should be shown in the ProgressIndicator.
     */
    showValue?: boolean | PropertyBindingInfo;

    /**
     * Specifies the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.15.0
     *
     * Specifies the height of the control. The default value depends on the theme. Suggested size for normal
     * use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control
     * inherits text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.50
     *
     * Determines whether the control is in display-only state where the control has different visualization
     * and cannot be focused.
     */
    displayOnly?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.73
     *
     * Determines whether a percentage change is displayed with animation.
     */
    displayAnimation?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.69
     *
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * @SINCE 1.69
     *
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledBy).
     */
    ariaLabelledBy?: Array<Control | string>;
  }
}

declare module "sap/m/PullToRefresh" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.9.2
   *
   * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable
   * page. Do not place it into a page with disabled scrolling. On touch devices it gets hidden by default
   * and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event. In
   * non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh"
   * event when clicked.
   */
  export default class PullToRefresh extends Control {
    /**
     * Constructor for a new PullToRefresh.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:fde40159afce478eb488ee4d0f9ebb99 Pull to Refresh}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $PullToRefreshSettings
    );
    /**
     * Constructor for a new PullToRefresh.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:fde40159afce478eb488ee4d0f9ebb99 Pull to Refresh}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $PullToRefreshSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:refresh refresh} event of this `sap.m.PullToRefresh`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PullToRefresh` itself.
     *
     * Event indicates that the user has requested new data
     */
    attachRefresh(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PullToRefresh` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:refresh refresh} event of this `sap.m.PullToRefresh`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRefresh(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.PullToRefresh with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PullToRefresh>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:refresh refresh} to attached listeners.
     */
    fireRefresh(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getCustomIcon customIcon}.
     *
     * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px
     * height.
     */
    getCustomIcon(): URI;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Optional description. May be used to inform a user, for example, when the list has been updated last
     * time.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Returns a metadata object for class sap.m.PullToRefresh.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowIcon showIcon}.
     *
     * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS
     * theme for the PullToRefresh control.
     *
     * Default value is `false`.
     */
    getShowIcon(): boolean;
    /**
     * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
     */
    hide(): void;
    /**
     * Sets a new value for property {@link #getCustomIcon customIcon}.
     *
     * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px
     * height.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCustomIcon(
      /**
       * New value for property `customIcon`
       */
      sCustomIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Optional description. May be used to inform a user, for example, when the list has been updated last
     * time.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcon showIcon}.
     *
     * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS
     * theme for the PullToRefresh control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowIcon(
      /**
       * New value for property `showIcon`
       */
      bShowIcon?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:refresh refresh} event of this `sap.m.PullToRefresh`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.PullToRefresh` itself.
     *
     * Event indicates that the user has requested new data
     */
    attachRefresh(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.PullToRefresh` itself
       */
      oListener?: object
    ): this;
  }

  export interface $PullToRefreshSettings extends $ControlSettings {
    /**
     * Optional description. May be used to inform a user, for example, when the list has been updated last
     * time.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS
     * theme for the PullToRefresh control.
     */
    showIcon?: boolean | PropertyBindingInfo;

    /**
     * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px
     * height.
     */
    customIcon?: URI | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is the key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Event indicates that the user has requested new data
     */
    refresh?: Function;
  }
}

declare module "sap/m/QuickView" {
  import {
    default as QuickViewBase,
    $QuickViewBaseSettings,
  } from "sap/m/QuickViewBase";

  import Control from "sap/ui/core/Control";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PlacementType } from "sap/m/library";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28.11
   *
   * A responsive popover that displays information on an object in a business-card format. Overview: The
   * quick view is used to show business information on either a person or an entity (e.g. a company). It
   * uses a set of pre-defined controls. Objects can be linked together and you can navigate between several
   * objects. An unlimited number of objects can be linked. Structure: Each card is represented by a {@link
   * sap.m.QuickViewPage} which holds all the information (icon, title, header, description) for the object.
   * A single quick view can hold multiple objects, each showing information on a single entity. Usage: When
   * to use:
   * 	 - You want to display a concise overview of an object (an employee or a company).
   * 	 - Information on the object can be split into concrete groups.  When not to use:
   * 	 - You want to display complex information about an object.  Responsive Behavior: The quick view
   * 			is displayed in a {@link sap.m.Popover popover} on desktop and a full-screen {@link sap.m.Dialog dialog}
   * 			on mobile devices.
   */
  export default class QuickView extends QuickViewBase {
    /**
     * Constructor for a new QuickView.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/quickview/ Quick View}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewSettings
    );
    /**
     * Constructor for a new QuickView.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/quickview/ Quick View}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires after the QuickView is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires after the QuickView is opened.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires before the QuickView is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires before the QuickView is opened.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the QuickView.
     */
    close(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.QuickView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.QuickView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.QuickView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.QuickView`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.QuickView with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the control, which opens the QuickView.
         */
        openBy?: Control;
        /**
         * This parameter contains the control, which triggers the close of the QuickView. It is undefined when
         * running on desktop or tablet.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the control, which opens the QuickView.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the control, which opens the QuickView.
         */
        openBy?: Control;
        /**
         * This parameter contains the control, which triggers the close of the QuickView. It is undefined when
         * running on desktop or tablet.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter refers to the control, which opens the QuickView.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Returns a metadata object for class sap.m.QuickView.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please
     * refer the documentation of the placement property of sap.m.Popover.
     *
     * Default value is `Right`.
     */
    getPlacement(): PlacementType | keyof typeof PlacementType;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the QuickView. The property takes effect only when running on desktop or tablet.
     *
     * Default value is `'320px'`.
     */
    getWidth(): CSSSize;
    /**
     * Opens the QuickView.
     */
    openBy(
      /**
       * The control which opens the QuickView.
       */
      oControl: Control
    ): this;
    /**
     * The method sets placement position of the QuickView.
     */
    setPlacement(
      /**
       * The side from which the QuickView appears relative to the control that opens it.
       */
      sPlacement: PlacementType | keyof typeof PlacementType
    ): this;
    /**
     * The method sets the width of the QuickView. Works only on desktop or tablet.
     */
    setWidth(
      /**
       * The new width of the QuickView.
       */
      sWidth: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires after the QuickView is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires after the QuickView is opened.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires before the QuickView is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.QuickView`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickView` itself.
     *
     * This event fires before the QuickView is opened.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickView` itself
       */
      oListener?: object
    ): this;
  }

  export interface $QuickViewSettings extends $QuickViewBaseSettings {
    /**
     * This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please
     * refer the documentation of the placement property of sap.m.Popover.
     */
    placement?:
      | (PlacementType | keyof typeof PlacementType)
      | PropertyBindingInfo;

    /**
     * The width of the QuickView. The property takes effect only when running on desktop or tablet.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * This event fires after the QuickView is opened.
     */
    afterOpen?: Function;

    /**
     * This event fires after the QuickView is closed.
     */
    afterClose?: Function;

    /**
     * This event fires before the QuickView is opened.
     */
    beforeOpen?: Function;

    /**
     * This event fires before the QuickView is closed.
     */
    beforeClose?: Function;
  }
}

declare module "sap/m/QuickViewBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import QuickViewPage from "sap/m/QuickViewPage";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.28.11
   *
   * QuickViewBase class provides base functionality for QuickView and QuickViewCard. Do not use it directly.
   */
  export default class QuickViewBase extends Control {
    /**
     * Constructor for a new QuickViewBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewBaseSettings
    );
    /**
     * Constructor for a new QuickViewBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewBaseSettings
    );

    /**
     * Adds some page to the aggregation {@link #getPages pages}.
     */
    addPage(
      /**
       * The page to add; if empty, nothing is inserted
       */
      oPage: QuickViewPage
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.m.QuickViewBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickViewBase` itself.
     *
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event.
     */
    attachAfterNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickViewBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.QuickViewBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickViewBase` itself.
     *
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickViewBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getPages pages} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindPages(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the pages in the aggregation {@link #getPages pages}.
     */
    destroyPages(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterNavigate afterNavigate} event of this
     * `sap.m.QuickViewBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.m.QuickViewBase`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.QuickViewBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickViewBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
     */
    fireAfterNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Determines the page, which has been displayed before navigation.
         */
        from?: Control;
        /**
         * Determines the ID of the page, which has been displayed before navigation.
         */
        fromId?: string;
        /**
         * Determines the page, which is now displayed after navigation.
         */
        to?: Control;
        /**
         * Determines the ID of the page, which is now displayed after navigation.
         */
        toId?: string;
        /**
         * Determines whether the "to" page (a control with the ID of the page, which has been navigated to) has
         * not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether this was a forward navigation.
         */
        isTo?: boolean;
        /**
         * Determines whether this was a back navigation.
         */
        isBack?: boolean;
        /**
         * Determines whether this was a navigation to the root page.
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page.
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
        /**
         * Determines whether this is a navigation to the top page.
         */
        isTopPage?: boolean;
        /**
         * Determines which link initiated the navigation.
         */
        navOrigin?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:navigate navigate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page which was displayed before the current navigation.
         */
        from?: Control;
        /**
         * The ID of the page which was displayed before the current navigation.
         */
        fromId?: string;
        /**
         * The page which will be displayed after the current navigation.
         */
        to?: Control;
        /**
         * The ID of the page which will be displayed after the current navigation.
         */
        toId?: string;
        /**
         * Determines whether the "to" page (a control with the ID of the page which is currently navigated to)
         * has not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether this is a forward navigation.
         */
        isTo?: boolean;
        /**
         * Determines whether this is a back navigation.
         */
        isBack?: boolean;
        /**
         * Determines whether this is a navigation to the root page.
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page.
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
        /**
         * Determines which link initiated the navigation.
         */
        navOrigin?: Control;
      }
    ): boolean;
    /**
     * Returns a metadata object for class sap.m.QuickViewBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getPages pages}.
     *
     * Displays a page header, object icon or image, object name with short description, and object information
     * divided in groups
     */
    getPages(): QuickViewPage[];
    /**
     * Checks for the provided `sap.m.QuickViewPage` in the aggregation {@link #getPages pages}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfPage(
      /**
       * The page whose index is looked for
       */
      oPage: QuickViewPage
    ): int;
    /**
     * Inserts a page into the aggregation {@link #getPages pages}.
     */
    insertPage(
      /**
       * The page to insert; if empty, nothing is inserted
       */
      oPage: QuickViewPage,
      /**
       * The `0`-based index the page should be inserted at; for a negative value of `iIndex`, the page is inserted
       * at position 0; for a value greater than the current size of the aggregation, the page is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Navigates to the previous page if there is such.
     */
    navigateBack(): void;
    /**
     * Removes all the controls from the aggregation {@link #getPages pages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPages(): QuickViewPage[];
    /**
     * Removes a page from the aggregation {@link #getPages pages}.
     */
    removePage(
      /**
       * The page to remove or its index or id
       */
      vPage: int | string | QuickViewPage
    ): QuickViewPage;
    /**
     * Unbinds aggregation {@link #getPages pages} from model data.
     */
    unbindPages(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.m.QuickViewBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickViewBase` itself.
     *
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event.
     */
    attachAfterNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickViewBase` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.QuickViewBase`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.QuickViewBase` itself.
     *
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.QuickViewBase` itself
       */
      oListener?: object
    ): this;
  }

  export interface $QuickViewBaseSettings extends $ControlSettings {
    /**
     * Displays a page header, object icon or image, object name with short description, and object information
     * divided in groups
     */
    pages?: QuickViewPage[] | QuickViewPage | AggregationBindingInfo;

    /**
     * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
     * new page has not started yet. This event can be aborted by the application with preventDefault(), which
     * means that there will be no navigation.
     */
    navigate?: Function;

    /**
     * The event is fired when navigation between two pages has completed. In case of animated transitions this
     * event is fired with some delay after the "navigate" event.
     */
    afterNavigate?: Function;
  }
}

declare module "sap/m/QuickViewCard" {
  import {
    default as QuickViewBase,
    $QuickViewBaseSettings,
  } from "sap/m/QuickViewBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28.11
   *
   * The QuickViewCard control displays information of an object in a business-card format. It also allows
   * this object to be linked to another object using one of the links. Clicking that link updates the information
   * with the data of the linked object. Unlimited number of objects can be linked.
   */
  export default class QuickViewCard extends QuickViewBase {
    /**
     * Constructor for a new QuickViewCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewCardSettings
    );
    /**
     * Constructor for a new QuickViewCard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewCardSettings
    );

    /**
     * Creates a new subclass of class sap.m.QuickViewCard with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickViewCard>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.QuickViewCard.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowVerticalScrollBar showVerticalScrollBar}.
     *
     * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
     *
     * Default value is `true`.
     */
    getShowVerticalScrollBar(): boolean;
    /**
     * Sets a new value for property {@link #getShowVerticalScrollBar showVerticalScrollBar}.
     *
     * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowVerticalScrollBar(
      /**
       * New value for property `showVerticalScrollBar`
       */
      bShowVerticalScrollBar?: boolean
    ): this;
  }

  export interface $QuickViewCardSettings extends $QuickViewBaseSettings {
    /**
     * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
     */
    showVerticalScrollBar?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/QuickViewGroup" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import QuickViewGroupElement from "sap/m/QuickViewGroupElement";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.28.11
   *
   * QuickViewGroup consists of a title (optional) and an entity of group elements.
   */
  export default class QuickViewGroup extends UI5Element {
    /**
     * Constructor for a new QuickViewGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewGroupSettings
    );
    /**
     * Constructor for a new QuickViewGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewGroupSettings
    );

    /**
     * Adds some element to the aggregation {@link #getElements elements}.
     */
    addElement(
      /**
       * The element to add; if empty, nothing is inserted
       */
      oElement: QuickViewGroupElement
    ): this;
    /**
     * Binds aggregation {@link #getElements elements} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindElements(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the elements in the aggregation {@link #getElements elements}.
     */
    destroyElements(): this;
    /**
     * Creates a new subclass of class sap.m.QuickViewGroup with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickViewGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getElements elements}.
     *
     * A combination of one label and another control (Link or Text) associated to this label.
     */
    getElements(): QuickViewGroupElement[];
    /**
     * Gets current value of property {@link #getHeading heading}.
     *
     * The title of the group
     *
     * Default value is `empty string`.
     */
    getHeading(): string;
    /**
     * Returns a metadata object for class sap.m.QuickViewGroup.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Determines whether the group is visible on the screen.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Checks for the provided `sap.m.QuickViewGroupElement` in the aggregation {@link #getElements elements}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfElement(
      /**
       * The element whose index is looked for
       */
      oElement: QuickViewGroupElement
    ): int;
    /**
     * Inserts a element into the aggregation {@link #getElements elements}.
     */
    insertElement(
      /**
       * The element to insert; if empty, nothing is inserted
       */
      oElement: QuickViewGroupElement,
      /**
       * The `0`-based index the element should be inserted at; for a negative value of `iIndex`, the element
       * is inserted at position 0; for a value greater than the current size of the aggregation, the element
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getElements elements}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllElements(): QuickViewGroupElement[];
    /**
     * Removes a element from the aggregation {@link #getElements elements}.
     */
    removeElement(
      /**
       * The element to remove or its index or id
       */
      vElement: int | string | QuickViewGroupElement
    ): QuickViewGroupElement;
    /**
     * Sets a new value for property {@link #getHeading heading}.
     *
     * The title of the group
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeading(
      /**
       * New value for property `heading`
       */
      sHeading?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Determines whether the group is visible on the screen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getElements elements} from model data.
     */
    unbindElements(): this;
  }

  export interface $QuickViewGroupSettings extends $ElementSettings {
    /**
     * Determines whether the group is visible on the screen.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * The title of the group
     */
    heading?: string | PropertyBindingInfo;

    /**
     * A combination of one label and another control (Link or Text) associated to this label.
     */
    elements?:
      | QuickViewGroupElement[]
      | QuickViewGroupElement
      | AggregationBindingInfo;
  }
}

declare module "sap/m/QuickViewGroupElement" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { QuickViewGroupElementType } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28.11
   *
   * QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to
   * this label.
   */
  export default class QuickViewGroupElement extends UI5Element {
    /**
     * Constructor for a new QuickViewGroupElement.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewGroupElementSettings
    );
    /**
     * Constructor for a new QuickViewGroupElement.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewGroupElementSettings
    );

    /**
     * Creates a new subclass of class sap.m.QuickViewGroupElement with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickViewGroupElement>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getEmailSubject emailSubject}.
     *
     * The subject of the email. Works only with QuickViewGroupElement of type email.
     *
     * Default value is `empty string`.
     */
    getEmailSubject(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Specifies the text displayed below the associated label.
     *
     * Default value is `empty string`.
     */
    getLabel(): string;
    /**
     * Returns a metadata object for class sap.m.QuickViewGroupElement.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPageLinkId pageLinkId}.
     *
     * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement. Works
     * only with QuickViewGroupElement of type pageLink.
     *
     * Default value is `empty string`.
     */
    getPageLinkId(): string;
    /**
     * Gets current value of property {@link #getTarget target}.
     *
     * Specifies the target of the link - it works like the target property of the HTML  tag. Works only
     * with QuickViewGroupElement of type link.
     *
     * Default value is `"_blank"`.
     */
    getTarget(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or
     * a link to another QuickViewPage. Default value is 'text'.
     *
     * Default value is `text`.
     */
    getType():
      | QuickViewGroupElementType
      | keyof typeof QuickViewGroupElementType;
    /**
     * Gets current value of property {@link #getUrl url}.
     *
     * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type
     * link.
     *
     * Default value is `empty string`.
     */
    getUrl(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Specifies the text of the control that associates with the label.
     *
     * Default value is `empty string`.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Determines whether the element should be visible on the screen.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getEmailSubject emailSubject}.
     *
     * The subject of the email. Works only with QuickViewGroupElement of type email.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setEmailSubject(
      /**
       * New value for property `emailSubject`
       */
      sEmailSubject?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Specifies the text displayed below the associated label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPageLinkId pageLinkId}.
     *
     * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement. Works
     * only with QuickViewGroupElement of type pageLink.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPageLinkId(
      /**
       * New value for property `pageLinkId`
       */
      sPageLinkId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTarget target}.
     *
     * Specifies the target of the link - it works like the target property of the HTML  tag. Works only
     * with QuickViewGroupElement of type link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"_blank"`.
     */
    setTarget(
      /**
       * New value for property `target`
       */
      sTarget?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or
     * a link to another QuickViewPage. Default value is 'text'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `text`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: QuickViewGroupElementType | keyof typeof QuickViewGroupElementType
    ): this;
    /**
     * Sets a new value for property {@link #getUrl url}.
     *
     * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type
     * link.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setUrl(
      /**
       * New value for property `url`
       */
      sUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Specifies the text of the control that associates with the label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Determines whether the element should be visible on the screen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $QuickViewGroupElementSettings extends $ElementSettings {
    /**
     * Determines whether the element should be visible on the screen.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Specifies the text displayed below the associated label.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Specifies the text of the control that associates with the label.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type
     * link.
     */
    url?: string | PropertyBindingInfo;

    /**
     * Specifies the target of the link - it works like the target property of the HTML  tag. Works only
     * with QuickViewGroupElement of type link.
     */
    target?: string | PropertyBindingInfo;

    /**
     * Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or
     * a link to another QuickViewPage. Default value is 'text'.
     */
    type?:
      | (QuickViewGroupElementType | keyof typeof QuickViewGroupElementType)
      | PropertyBindingInfo;

    /**
     * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement. Works
     * only with QuickViewGroupElement of type pageLink.
     */
    pageLinkId?: string | PropertyBindingInfo;

    /**
     * The subject of the email. Works only with QuickViewGroupElement of type email.
     */
    emailSubject?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/QuickViewPage" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import QuickViewGroup from "sap/m/QuickViewGroup";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.28.11
   *
   * QuickViewPage consists of a page header, an object icon or image, an object name with short description,
   * and an object information divided in groups. The control uses the sap.m.SimpleForm control to display
   * information.
   */
  export default class QuickViewPage extends Control {
    /**
     * Constructor for a new QuickViewPage.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewPageSettings
    );
    /**
     * Constructor for a new QuickViewPage.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $QuickViewPageSettings
    );

    /**
     * Adds some group to the aggregation {@link #getGroups groups}.
     */
    addGroup(
      /**
       * The group to add; if empty, nothing is inserted
       */
      oGroup: QuickViewGroup
    ): this;
    /**
     * Binds aggregation {@link #getGroups groups} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindGroups(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the groups in the aggregation {@link #getGroups groups}.
     */
    destroyGroups(): this;
    /**
     * Creates a new subclass of class sap.m.QuickViewPage with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, QuickViewPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getCrossAppNavCallback crossAppNavCallback}.
     *
     * Specifies the application which provides target and param configuration for cross-application navigation
     * from the 'page header'.
     */
    getCrossAppNavCallback(): object;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Specifies the text displayed under the header of the content section
     *
     * Default value is `empty string`.
     */
    getDescription(): string;
    /**
     * @SINCE 1.69
     *
     * Gets current value of property {@link #getFallbackIcon fallbackIcon}.
     *
     * Defines the fallback icon displayed in case of wrong image src or loading issues.
     *
     * **Note** Accepted values are only icons from the SAP icon font.
     */
    getFallbackIcon(): URI;
    /**
     * Gets content of aggregation {@link #getGroups groups}.
     *
     * QuickViewGroup consists of a title (optional) and an entity of group elements.
     */
    getGroups(): QuickViewGroup[];
    /**
     * Gets current value of property {@link #getHeader header}.
     *
     * Specifies the text displayed in the header of the control.
     *
     * Default value is `empty string`.
     */
    getHeader(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Specifies the URL of the icon displayed under the header of the page
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Returns a metadata object for class sap.m.QuickViewPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPageId pageId}.
     *
     * Page id
     *
     * Default value is `empty string`.
     */
    getPageId(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Specifies the text displayed in the header of the content section of the control.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleUrl titleUrl}.
     *
     * Specifies the URL which opens when the title or the thumbnail is clicked.
     *
     * Default value is `empty string`.
     */
    getTitleUrl(): string;
    /**
     * Checks for the provided `sap.m.QuickViewGroup` in the aggregation {@link #getGroups groups}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfGroup(
      /**
       * The group whose index is looked for
       */
      oGroup: QuickViewGroup
    ): int;
    /**
     * Inserts a group into the aggregation {@link #getGroups groups}.
     */
    insertGroup(
      /**
       * The group to insert; if empty, nothing is inserted
       */
      oGroup: QuickViewGroup,
      /**
       * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
       * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getGroups groups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllGroups(): QuickViewGroup[];
    /**
     * Removes a group from the aggregation {@link #getGroups groups}.
     */
    removeGroup(
      /**
       * The group to remove or its index or id
       */
      vGroup: int | string | QuickViewGroup
    ): QuickViewGroup;
    /**
     * Sets a new value for property {@link #getCrossAppNavCallback crossAppNavCallback}.
     *
     * Specifies the application which provides target and param configuration for cross-application navigation
     * from the 'page header'.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setCrossAppNavCallback(
      /**
       * New value for property `crossAppNavCallback`
       */
      oCrossAppNavCallback: object
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Specifies the text displayed under the header of the content section
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * @SINCE 1.69
     *
     * Sets a new value for property {@link #getFallbackIcon fallbackIcon}.
     *
     * Defines the fallback icon displayed in case of wrong image src or loading issues.
     *
     * **Note** Accepted values are only icons from the SAP icon font.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFallbackIcon(
      /**
       * New value for property `fallbackIcon`
       */
      sFallbackIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getHeader header}.
     *
     * Specifies the text displayed in the header of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeader(
      /**
       * New value for property `header`
       */
      sHeader?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Specifies the URL of the icon displayed under the header of the page
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getPageId pageId}.
     *
     * Page id
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setPageId(
      /**
       * New value for property `pageId`
       */
      sPageId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Specifies the text displayed in the header of the content section of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleUrl titleUrl}.
     *
     * Specifies the URL which opens when the title or the thumbnail is clicked.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitleUrl(
      /**
       * New value for property `titleUrl`
       */
      sTitleUrl?: string
    ): this;
    /**
     * Unbinds aggregation {@link #getGroups groups} from model data.
     */
    unbindGroups(): this;
  }

  export interface $QuickViewPageSettings extends $ControlSettings {
    /**
     * Page id
     */
    pageId?: string | PropertyBindingInfo;

    /**
     * Specifies the text displayed in the header of the control.
     */
    header?: string | PropertyBindingInfo;

    /**
     * Specifies the text displayed in the header of the content section of the control.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Specifies the URL which opens when the title or the thumbnail is clicked.
     */
    titleUrl?: string | PropertyBindingInfo;

    /**
     * Specifies the application which provides target and param configuration for cross-application navigation
     * from the 'page header'.
     */
    crossAppNavCallback?: object | PropertyBindingInfo;

    /**
     * Specifies the text displayed under the header of the content section
     */
    description?: string | PropertyBindingInfo;

    /**
     * Specifies the URL of the icon displayed under the header of the page
     */
    icon?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.69
     *
     * Defines the fallback icon displayed in case of wrong image src or loading issues.
     *
     * **Note** Accepted values are only icons from the SAP icon font.
     */
    fallbackIcon?: URI | PropertyBindingInfo;

    /**
     * QuickViewGroup consists of a title (optional) and an entity of group elements.
     */
    groups?: QuickViewGroup[] | QuickViewGroup | AggregationBindingInfo;
  }
}

declare module "sap/m/RadioButton" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    TextAlign,
    TextDirection,
    ValueState,
    CSSSize,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * RadioButton is a control similar to a {@link sap.m.CheckBox checkbox}, but it allows you to choose only
   * one of the predefined set of options. Multiple radio buttons have to belong to the same group (have the
   * same value for `groupName`) in order to be mutually exclusive.
   *
   * It is recommended to use the wrapper control {@link sap.m.RadioButtonGroup RadioButtonGroup} instead
   * of individual radio buttons. This will provide better screen reader support for the user. Use the `RadioButton`
   * control on its own only if there is a wrapper control that handles the screen reader support. For example,
   * such wrappers are sap.m.List, sap.m.Table and sap.f.GridList.
   *
   * Structure:
   * 	 - Radio buttons can have a value state like Error or Warning.
   * 	 - Radio buttons can be arranged vertically by setting the `column` to a number higher than 1.
   * 	 - Radio button options need to have a {@link sap.m.Label label}.  Usage: When to use::
   * 	 - You quickly need to choose between at least two alternatives.
   * 	 - You need to place other controls between the radio button options.  When not to use::
   * 	 - You want to select multiple values for the same option. Use {@link sap.m.CheckBox checkboxes} instead.
   *
   * 	 - When the default value is recommended for most users in most situations. Use a {@link sap.m.Select
   * 			drop-down} instead as is saves space by not showing all the alternatives.
   * 	 - You want have more than 8 options. Use a {@link sap.m.Select drop-down} instead.
   * 	 - When the options are mutually exclusive e.g. ON/OFF. Use a {@link sap.m.Switch switch} instead.
   * 	 - Avoid using horizontally aligned radio buttons as they will be cut off on phones.
   *
   * **Note:** The order in which the RadioButtons will be selected one after another is determined upon instantiation
   * of the control. This order is consistent with the ARIA attributes for position, which the same button
   * will receive when added to specific group.
   *
   * **Example:** If three buttons are created (`button1, button2, button3`) in consecutive order, initially
   * they will have the same positions and TAB order. However if after that `button1` and `button3` are moved
   * to a new group and then `button2` is added to the same group, their TAB order and position in this group
   * will be `button1, button3, button2`.
   */
  export default class RadioButton extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new RadioButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/radio-button/ Radio Button}
     */
    constructor(
      /**
       * Initial settings for the new control Enables users to select a single option from a set of options.
       */
      mSettings?: $RadioButtonSettings
    );
    /**
     * Constructor for a new RadioButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/radio-button/ Radio Button}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control Enables users to select a single option from a set of options.
       */
      mSettings?: $RadioButtonSettings
    );

    /**
     * Maintains the RadioButton's internal Label's text property.
     */
    _updateLabelProperties(
      /**
       * The text to be set
       */
      sText: string
    ): void;
    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.RadioButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RadioButton` itself.
     *
     * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RadioButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.RadioButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Destroys all related objects to the RadioButton
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.RadioButton with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RadioButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Checks whether the RadioButton is active or not.
         */
        selected?: boolean;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Gets current value of property {@link #getActiveHandling activeHandling}.
     *
     * This is a flag to switch on activeHandling. When it is switched off, there will not be visual changes
     * on active state. Default value is 'true'
     *
     * Default value is `true`.
     */
    getActiveHandling(): boolean;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.25
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Specifies whether the user can select the radio button.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Specifies if the radio button is disabled.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getGroupName groupName}.
     *
     * Name of the radio button group the current radio button belongs to. You can define a new name for the
     * group. If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default.
     * Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected,
     * all others are unselected.
     *
     * **Note** To ensure screen reader support it is recommended to use the {@link sap.m.RadioButtonGroup RadioButtonGroup}
     * wrapper instead of using the `groupName` property. Use this property only in cases where a wrapper control
     * will handle the screen reader support. For example such wrappers are `sap.m.List`, `sap.m.Table` and
     * `sap.f.GridList`.
     *
     * Default value is `'sapMRbDefaultGroup'`.
     */
    getGroupName(): string;
    /**
     * Returns a metadata object for class sap.m.RadioButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Specifies the select state of the radio button
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Specifies the text displayed next to the RadioButton
     */
    getText(): string;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.42
     *
     * Gets current value of property {@link #getUseEntireWidth useEntireWidth}.
     *
     * Indicates if the given width will be applied for the whole RadioButton or only it's label. By Default
     * width is set only for the label.
     *
     * Default value is `false`.
     */
    getUseEntireWidth(): boolean;
    /**
     * @SINCE 1.25
     *
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Marker for the correctness of the current value e.g., Error, Success, etc.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the RadioButton or it's label depending on the useEntireWidth property. By Default width is
     * set only for the label.
     *
     * Default value is `empty string`.
     */
    getWidth(): CSSSize;
    /**
     * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
     */
    onsapselect(
      /**
       * provides information for the event
       */
      oEvent: object
    ): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveHandling activeHandling}.
     *
     * This is a flag to switch on activeHandling. When it is switched off, there will not be visual changes
     * on active state. Default value is 'true'
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setActiveHandling(
      /**
       * New value for property `activeHandling`
       */
      bActiveHandling?: boolean
    ): this;
    /**
     * @SINCE 1.25
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Specifies whether the user can select the radio button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Specifies if the radio button is disabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets RadioButton's groupName. Only one radioButton from the same group can be selected
     */
    setGroupName(
      /**
       * Name of the group to which the RadioButton will belong.
       */
      sGroupName: string
    ): this;
    /**
     * Sets the state of the RadioButton to selected.
     */
    setSelected(
      /**
       * defines if the radio button is selected
       */
      bSelected: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets the tab index of the control
     */
    setTabIndex(
      /**
       * Greater than or equal to -1
       */
      iTabIndex: int
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Specifies the text displayed next to the RadioButton
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets a new value for property {@link #getUseEntireWidth useEntireWidth}.
     *
     * Indicates if the given width will be applied for the whole RadioButton or only it's label. By Default
     * width is set only for the label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUseEntireWidth(
      /**
       * New value for property `useEntireWidth`
       */
      bUseEntireWidth?: boolean
    ): this;
    /**
     * @SINCE 1.25
     *
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Marker for the correctness of the current value e.g., Error, Success, etc.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the RadioButton or it's label depending on the useEntireWidth property. By Default width is
     * set only for the label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.RadioButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RadioButton` itself.
     *
     * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RadioButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $RadioButtonSettings extends $ControlSettings {
    /**
     * Specifies if the radio button is disabled.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Specifies the select state of the radio button
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Name of the radio button group the current radio button belongs to. You can define a new name for the
     * group. If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default.
     * Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected,
     * all others are unselected.
     *
     * **Note** To ensure screen reader support it is recommended to use the {@link sap.m.RadioButtonGroup RadioButtonGroup}
     * wrapper instead of using the `groupName` property. Use this property only in cases where a wrapper control
     * will handle the screen reader support. For example such wrappers are `sap.m.List`, `sap.m.Table` and
     * `sap.f.GridList`.
     */
    groupName?: string | PropertyBindingInfo;

    /**
     * Specifies the text displayed next to the RadioButton
     */
    text?: string | PropertyBindingInfo;

    /**
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Width of the RadioButton or it's label depending on the useEntireWidth property. By Default width is
     * set only for the label.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.42
     *
     * Indicates if the given width will be applied for the whole RadioButton or only it's label. By Default
     * width is set only for the label.
     */
    useEntireWidth?: boolean | PropertyBindingInfo;

    /**
     * This is a flag to switch on activeHandling. When it is switched off, there will not be visual changes
     * on active state. Default value is 'true'
     */
    activeHandling?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.25
     *
     * Specifies whether the user can select the radio button.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.25
     *
     * Marker for the correctness of the current value e.g., Error, Success, etc.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End",
     * "Left", and "Right".
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
     */
    select?: Function;
  }
}

declare module "sap/m/RadioButtonGroup" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    TextDirection,
    ValueState,
    CSSSize,
  } from "sap/ui/core/library";

  import RadioButton from "sap/m/RadioButton";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.25.0
   *
   * This control is used as a wrapper for a group of {@link sap.m.RadioButton} controls, which can be used
   * as a single UI element. You can select only one of the grouped radio buttons at a time. Structure:
   *
   * 	 - The radio buttons are stored in the `buttons` aggregation.
   * 	 - By setting the `columns` property, you can create layouts like a 'matrix', 'vertical' or 'horizontal'.
   *
   * 	 - **Note:**For proper display on all devices, we recommend creating radio button groups with only one
   * 			row or only one column.  Usage: When to use::
   * 	 - You want to attach a single event handler on a group of buttons, rather than on each individual button.
   * 			 When not to use::
   * 	 - Do not put two radio button groups right next to each other as it is difficult to determine which
   * 			buttons belong to which group.
   */
  export default class RadioButtonGroup
    extends Control
    implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new RadioButtonGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control A wrapper control for a group of radio buttons.
       */
      mSettings?: $RadioButtonGroupSettings
    );
    /**
     * Constructor for a new RadioButtonGroup.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control A wrapper control for a group of radio buttons.
       */
      mSettings?: $RadioButtonGroupSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds a new radio button to the group.
     */
    addButton(
      /**
       * The button which will be added to the group.
       */
      oButton: RadioButton
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.RadioButtonGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RadioButtonGroup` itself.
     *
     * Fires when selection is changed by user interaction.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RadioButtonGroup` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getButtons buttons} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindButtons(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Creates a new instance of RadioButtonGroup, with the same settings as the RadioButtonGroup on which the
     * method is called. Event handlers are not cloned.
     */
    clone(): this;
    /**
     * Destroys all radio buttons.
     */
    destroyButtons(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.RadioButtonGroup`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Exits the radio button group.
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.RadioButtonGroup with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RadioButtonGroup>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Index of the selected RadioButton.
         */
        selectedIndex?: int;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * Returns a list of the RadioButtons in a RadioButtonGroup
     */
    getButtons(): RadioButton[];
    /**
     * Gets current value of property {@link #getColumns columns}.
     *
     * Specifies the maximum number of radio buttons displayed in one line.
     *
     * Default value is `1`.
     */
    getColumns(): int;
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * Specifies whether the user can change the selected value of the RadioButtonGroup. When the property is
     * set to false, the control obtains visual styles different from its visual styles for the normal and the
     * disabled state. Additionally, the control is no longer interactive, but can receive focus.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Switches the enabled state of the control. All radio buttons inside a disabled group are disabled.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns a metadata object for class sap.m.RadioButtonGroup.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns the selected radio button.
     */
    getSelectedButton(): RadioButton;
    /**
     * Gets current value of property {@link #getSelectedIndex selectedIndex}.
     *
     * Determines the index of the selected/checked RadioButton. Default is 0. If no radio button is selected,
     * the selectedIndex property will return -1.
     *
     * Default value is `0`.
     */
    getSelectedIndex(): int;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Marker for the correctness of the current value e.g., Error, Success, etc. Changing this property will
     * also change the state of all radio buttons inside the group. Note: Setting this attribute to sap.ui.core.ValueState.Error
     * when the accessibility feature is enabled, sets the value of the invalid property for the whole RadioButtonGroup
     * to "true".
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Specifies the width of the RadioButtonGroup.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.RadioButton` in the aggregation {@link #getButtons buttons}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: RadioButton
    ): int;
    /**
     * Adds a new radio button to the group at a specified index.
     */
    insertButton(
      /**
       * The radio button which will be added to the group.
       */
      oButton: RadioButton,
      /**
       * The index, at which the radio button will be added.
       */
      iIndex: number
    ): this;
    /**
     * Overwrites the onAfterRendering
     */
    onAfterRendering(): void;
    /**
     * Overwrites the onBeforeRendering method.
     */
    onBeforeRendering(): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all radio buttons.
     */
    removeAllButtons(): Array<any>;
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a radio button from the group.
     */
    removeButton(): RadioButton;
    /**
     * Sets a new value for property {@link #getColumns columns}.
     *
     * Specifies the maximum number of radio buttons displayed in one line.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setColumns(
      /**
       * New value for property `columns`
       */
      iColumns?: int
    ): this;
    /**
     * Sets the editable property of the RadioButtonGroup. Single buttons preserve the value of their editable
     * property. If the group is set to editable=false the buttons are also displayed and function as read only.
     * Non editable radio buttons can still obtain focus.
     */
    setEditable(
      /**
       * Defines whether the radio buttons should be interactive.
       */
      bEditable: boolean
    ): this;
    /**
     * Sets the enabled property of the RadioButtonGroup. Single buttons preserve internally the value of their
     * enabled property. If the group is set to enabled=false the buttons are also displayed as disabled and
     * getEnabled returns false.
     */
    setEnabled(
      /**
       * Defines whether the radio buttons should be interactive.
       */
      bEnabled: boolean
    ): this;
    /**
     * Sets the selected sap.m.RadioButton using sap.m.RadioButton.
     */
    setSelectedButton(
      /**
       * The item to be selected.
       */
      oSelectedButton: RadioButton
    ): this;
    /**
     * Sets the selected sap.m.RadioButton using index.
     */
    setSelectedIndex(
      /**
       * The index of the radio button which has to be selected.
       */
      iSelectedIndex: number
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Marker for the correctness of the current value e.g., Error, Success, etc. Changing this property will
     * also change the state of all radio buttons inside the group. Note: Setting this attribute to sap.ui.core.ValueState.Error
     * when the accessibility feature is enabled, sets the value of the invalid property for the whole RadioButtonGroup
     * to "true".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Specifies the width of the RadioButtonGroup.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds aggregation {@link #getButtons buttons} from model data.
     */
    unbindButtons(): this;
    /**
     * Updates the buttons in the group.
     */
    updateButtons(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.RadioButtonGroup`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RadioButtonGroup` itself.
     *
     * Fires when selection is changed by user interaction.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RadioButtonGroup` itself
       */
      oListener?: object
    ): this;
  }

  export interface $RadioButtonGroupSettings extends $ControlSettings {
    /**
     * Specifies the width of the RadioButtonGroup.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Specifies the maximum number of radio buttons displayed in one line.
     */
    columns?: int | PropertyBindingInfo;

    /**
     * Specifies whether the user can change the selected value of the RadioButtonGroup. When the property is
     * set to false, the control obtains visual styles different from its visual styles for the normal and the
     * disabled state. Additionally, the control is no longer interactive, but can receive focus.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Marker for the correctness of the current value e.g., Error, Success, etc. Changing this property will
     * also change the state of all radio buttons inside the group. Note: Setting this attribute to sap.ui.core.ValueState.Error
     * when the accessibility feature is enabled, sets the value of the invalid property for the whole RadioButtonGroup
     * to "true".
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Determines the index of the selected/checked RadioButton. Default is 0. If no radio button is selected,
     * the selectedIndex property will return -1.
     */
    selectedIndex?: int | PropertyBindingInfo;

    /**
     * Switches the enabled state of the control. All radio buttons inside a disabled group are disabled.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * This property specifies the element's text directionality with enumerated options. By default, the control
     * inherits text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Returns a list of the RadioButtons in a RadioButtonGroup
     */
    buttons?: RadioButton[] | RadioButton | AggregationBindingInfo;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Fires when selection is changed by user interaction.
     */
    select?: Function;
  }
}

declare module "sap/m/RangeSlider" {
  import { default as Slider, $SliderSettings } from "sap/m/Slider";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.38
   *
   * Represents a numerical interval and two handles to select a sub-range within it. Overview: The purpose
   * of the control is to enable visual selection of sub-ranges within a given interval. Notes:
   *
   * 	 - The RangeSlider extends the functionality of the {@link sap.m.Slider Slider}
   * 	 - The right and left handle can be moved individually and their positions could therefore switch.
   * 	 - The entire range can be moved along the interval.
   * 	 - The right and left handle can select the same value
   *
   * Usage: The most common usecase is to select and move sub-ranges on a continuous numerical scale.
   *
   * Responsive Behavior: You can move the currently selected range by clicking on it and dragging it along
   * the interval.
   */
  export default class RangeSlider extends Slider {
    /**
     * Constructor for a new `RangeSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/range-slider/ Range Slider}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $RangeSliderSettings
    );
    /**
     * Constructor for a new `RangeSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/range-slider/ Range Slider}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $RangeSliderSettings
    );

    /**
     * Creates a new subclass of class sap.m.RangeSlider with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Slider.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RangeSlider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.RangeSlider.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRange range}.
     *
     * Determines the currently selected range on the slider.
     *
     * If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the
     * console.
     *
     * Default value is `[0, 100]`.
     */
    getRange(): float[];
    /**
     * Gets current value of property {@link #getValue2 value2}.
     *
     * Current second value of the slider. (Position of the second handle.)
     *
     * **Note:** If the value is not in the valid range (between `min` and `max`) it will be changed to be in
     * the valid range. If it is smaller than `value` it will be set to the same value.
     *
     * Default value is `100`.
     */
    getValue2(): float;
    /**
     * Sets a new value for property {@link #getRange range}.
     *
     * Determines the currently selected range on the slider.
     *
     * If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the
     * console.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `[0, 100]`.
     */
    setRange(
      /**
       * New value for property `range`
       */
      sRange?: float[]
    ): this;
    /**
     * Sets a new value for property {@link #getValue2 value2}.
     *
     * Current second value of the slider. (Position of the second handle.)
     *
     * **Note:** If the value is not in the valid range (between `min` and `max`) it will be changed to be in
     * the valid range. If it is smaller than `value` it will be set to the same value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setValue2(
      /**
       * New value for property `value2`
       */
      fValue2?: float
    ): this;
    /**
     * Updates values of the advanced tooltips.
     */
    updateAdvancedTooltipDom(
      /**
       * The new value
       */
      sNewValue: string
    ): void;
  }

  export interface $RangeSliderSettings extends $SliderSettings {
    /**
     * Current second value of the slider. (Position of the second handle.)
     *
     * **Note:** If the value is not in the valid range (between `min` and `max`) it will be changed to be in
     * the valid range. If it is smaller than `value` it will be set to the same value.
     */
    value2?: float | PropertyBindingInfo;

    /**
     * Determines the currently selected range on the slider.
     *
     * If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the
     * console.
     */
    range?: float[] | PropertyBindingInfo;
  }
}

declare module "sap/m/RatingIndicator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, URI, CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { RatingIndicatorVisualMode } from "sap/m/library";

  /**
   * @SINCE 1.14
   *
   * The rating indicator is used to display a specific number of icons that are used to rate an item. Additionally
   * it is also used to display the average over all ratings. Structure:
   * 	 - The rating indicator can use different icons (default: stars) which are defined as URIs in the properties
   * 			`iconHovered`, `iconSelected` and `iconUnselected`.
   * 	 - The rating indicator can display half-values ({@link sap.m.RatingIndicatorVisualMode visualMode}
   * 			= Half) when it is used to show the average. Half-values can't be selected by the user.  Usage:
   * 			The preferred number of icons is between 5 (default) and 7. Responsive Behavior: You can display icons
   * 			in 4 recommended sizes:
   * 	 - large - 32px
   * 	 - medium(default) - 22px
   * 	 - small - 16px
   * 	 - XS - 12px  **Note:** If no icon size is set, the rating indicator will set it according to the
   * 			content density.
   */
  export default class RatingIndicator extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new RatingIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/rating-indicator/ Rating Indicator}
     */
    constructor(
      /**
       * Initial settings for the new control Enables users to rate an item on a numeric scale.
       */
      mSettings?: $RatingIndicatorSettings
    );
    /**
     * Constructor for a new RatingIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/rating-indicator/ Rating Indicator}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control Enables users to rate an item on a numeric scale.
       */
      mSettings?: $RatingIndicatorSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RatingIndicator` itself.
     *
     * The event is fired when the user has done a rating.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RatingIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RatingIndicator` itself.
     *
     * This event is triggered during the dragging period, each time the rating value changes.
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RatingIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds property {@link #getValue value} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindValue(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.RatingIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.RatingIndicator`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.RatingIndicator with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RatingIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The rated value
         */
        value?: int;
      }
    ): this;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current value of the rating after a live change event.
         */
        value?: float;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.50.0
     *
     * Gets current value of property {@link #getDisplayOnly displayOnly}.
     *
     * The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the
     * tab chain. This setting is used for forms in review mode.
     *
     * Default value is `false`.
     */
    getDisplayOnly(): boolean;
    /**
     * @SINCE 1.52.0
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is
     * focusable, and in the tab chain but not interactive.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Value "true" is required to let the user rate with this control. It is recommended to set this parameter
     * to "false" for the "Small" size which is meant for indicating a value only
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getIconHovered iconHovered}.
     *
     * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon
     * will be used if the property is not set
     */
    getIconHovered(): URI;
    /**
     * Gets current value of property {@link #getIconSelected iconSelected}.
     *
     * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon
     * will be used if the property is not set
     */
    getIconSelected(): URI;
    /**
     * Gets current value of property {@link #getIconSize iconSize}.
     *
     * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure
     * that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.
     * Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons
     * correspondingly.
     */
    getIconSize(): CSSSize;
    /**
     * Gets current value of property {@link #getIconUnselected iconUnselected}.
     *
     * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star
     * icon will be used if the property is not set
     */
    getIconUnselected(): URI;
    /**
     * Gets current value of property {@link #getMaxValue maxValue}.
     *
     * The number of displayed rating symbols
     *
     * Default value is `5`.
     */
    getMaxValue(): int;
    /**
     * Returns a metadata object for class sap.m.RatingIndicator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The indicated value of the rating
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Gets current value of property {@link #getVisualMode visualMode}.
     *
     * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
     *
     * Default value is `Half`.
     */
    getVisualMode():
      | RatingIndicatorVisualMode
      | keyof typeof RatingIndicatorVisualMode;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.50.0
     *
     * Sets a new value for property {@link #getDisplayOnly displayOnly}.
     *
     * The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the
     * tab chain. This setting is used for forms in review mode.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisplayOnly(
      /**
       * New value for property `displayOnly`
       */
      bDisplayOnly?: boolean
    ): this;
    /**
     * @SINCE 1.52.0
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is
     * focusable, and in the tab chain but not interactive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Value "true" is required to let the user rate with this control. It is recommended to set this parameter
     * to "false" for the "Small" size which is meant for indicating a value only
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconHovered iconHovered}.
     *
     * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon
     * will be used if the property is not set
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconHovered(
      /**
       * New value for property `iconHovered`
       */
      sIconHovered?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconSelected iconSelected}.
     *
     * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon
     * will be used if the property is not set
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconSelected(
      /**
       * New value for property `iconSelected`
       */
      sIconSelected?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconSize iconSize}.
     *
     * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure
     * that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.
     * Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons
     * correspondingly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconSize(
      /**
       * New value for property `iconSize`
       */
      sIconSize?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getIconUnselected iconUnselected}.
     *
     * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star
     * icon will be used if the property is not set
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconUnselected(
      /**
       * New value for property `iconUnselected`
       */
      sIconUnselected?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getMaxValue maxValue}.
     *
     * The number of displayed rating symbols
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `5`.
     */
    setMaxValue(
      /**
       * New value for property `maxValue`
       */
      iMaxValue?: int
    ): this;
    /**
     * Sets the rating value. The method is automatically checking whether the value is in the valid range of
     * 0-{@link #getMaxValue maxValue} and if it is a valid number. Calling the setter with null or undefined
     * will reset the value to it's default.
     */
    setValue(
      /**
       * The rating value to be set.
       */
      fValue: float
    ): this;
    /**
     * Sets a new value for property {@link #getVisualMode visualMode}.
     *
     * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Half`.
     */
    setVisualMode(
      /**
       * New value for property `visualMode`
       */
      sVisualMode?:
        | RatingIndicatorVisualMode
        | keyof typeof RatingIndicatorVisualMode
    ): this;
    /**
     * Unbinds property {@link #getValue value} from model data.
     */
    unbindValue(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RatingIndicator` itself.
     *
     * The event is fired when the user has done a rating.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RatingIndicator` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.RatingIndicator`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.RatingIndicator` itself.
     *
     * This event is triggered during the dragging period, each time the rating value changes.
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.RatingIndicator` itself
       */
      oListener?: object
    ): this;
  }

  export interface $RatingIndicatorSettings extends $ControlSettings {
    /**
     * Value "true" is required to let the user rate with this control. It is recommended to set this parameter
     * to "false" for the "Small" size which is meant for indicating a value only
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * The number of displayed rating symbols
     */
    maxValue?: int | PropertyBindingInfo;

    /**
     * The indicated value of the rating
     */
    value?: float | PropertyBindingInfo;

    /**
     * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure
     * that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.
     * Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons
     * correspondingly.
     */
    iconSize?: CSSSize | PropertyBindingInfo;

    /**
     * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon
     * will be used if the property is not set
     */
    iconSelected?: URI | PropertyBindingInfo;

    /**
     * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star
     * icon will be used if the property is not set
     */
    iconUnselected?: URI | PropertyBindingInfo;

    /**
     * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon
     * will be used if the property is not set
     */
    iconHovered?: URI | PropertyBindingInfo;

    /**
     * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
     */
    visualMode?:
      | (RatingIndicatorVisualMode | keyof typeof RatingIndicatorVisualMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.50.0
     *
     * The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the
     * tab chain. This setting is used for forms in review mode.
     */
    displayOnly?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.52.0
     *
     * Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is
     * focusable, and in the tab chain but not interactive.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * The event is fired when the user has done a rating.
     */
    change?: Function;

    /**
     * This event is triggered during the dragging period, each time the rating value changes.
     */
    liveChange?: Function;
  }
}

declare module "sap/m/ResponsivePopover" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize, URI } from "sap/ui/core/library";

  import Button from "sap/m/Button";

  import { IBar, PlacementType, TitleAlignment } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.15.1
   *
   * Overview: The responsive popover acts as a {@link sap.m.Popover popover} on desktop and tablet, while
   * on phone it acts as a {@link sap.m.Dialog dialog} with `stretch` set to true.
   *
   * **Note:** It is recommended that `ResponsivePopover` is used in fragments otherwise there might be some
   * implications on the user experience. For example, on desktop, open or close functions of the `Popover`
   * might not be called.
   *
   * Usage: When you want to make sure that all content is visible on any device.
   */
  export default class ResponsivePopover extends Control {
    /**
     * Constructor for a new ResponsivePopover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/popover/ Responsive Popover}
     */
    constructor(
      /**
       * Initial settings for the new control A popover-based control that behaves differently according to the
       * device it is on.
       */
      mSettings?: $ResponsivePopoverSettings
    );
    /**
     * Constructor for a new ResponsivePopover.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/popover/ Responsive Popover}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control A popover-based control that behaves differently according to the
       * device it is on.
       */
      mSettings?: $ResponsivePopoverSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds content to the ResponsivePopover
     */
    addContent(
      /**
       * The control to be added to the content
       */
      oControl: Control
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired after popover or dialog is closed.
     */
    attachAfterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired after popover or dialog is open.
     */
    attachAfterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired before popover or dialog is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired before popover or dialog is open.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes the ResponsivePopover.
     */
    close(): this;
    /**
     * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
     */
    destroyBeginButton(): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
     */
    destroyCustomHeader(): this;
    /**
     * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
     */
    destroyEndButton(): this;
    /**
     * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
     */
    destroySubHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterClose afterClose} event of this `sap.m.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterOpen afterOpen} event of this `sap.m.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ResponsivePopover`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ResponsivePopover with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResponsivePopover>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterClose afterClose} to attached listeners.
     */
    fireAfterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter contains the control which is passed as the parameter when calling openBy method. When
         * runs on the phone, this parameter is undefined.
         */
        openBy?: Control;
        /**
         * This parameter contains the control which triggers the close of the ResponsivePopover. This parameter
         * is undefined when runs on desktop or tablet.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
     */
    fireAfterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter contains the control which is passed as the parameter when calling openBy method. When
         * runs on the phone, this parameter is undefined.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter contains the control which is passed as the parameter when calling openBy method. When
         * runs on the phone, this parameter is undefined.
         */
        openBy?: Control;
        /**
         * This parameter contains the control which triggers the close of the ResponsivePopover. This parameter
         * is undefined when runs on desktop or tablet.
         */
        origin?: Button;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * This parameter contains the control which is passed as the parameter when calling openBy method. When
         * runs on the phone, this parameter is undefined.
         */
        openBy?: Control;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Getter for beginButton aggregation
     */
    getBeginButton(): Button;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getContentHeight contentHeight}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight
     * and sap.m.Dialog#contentHeight
     */
    getContentHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getContentWidth contentWidth}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth
     * and sap.m.Dialog#contentWidth
     */
    getContentWidth(): CSSSize;
    /**
     * Gets content of aggregation {@link #getCustomHeader customHeader}.
     *
     * CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader
     * and sap.m.Dialog#customHeader
     */
    getCustomHeader(): IBar;
    /**
     * Getter for endButton aggregation
     */
    getEndButton(): Button;
    /**
     * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling
     * and sap.m.Dialog#horizontalScrolling
     *
     * Default value is `true`.
     */
    getHorizontalScrolling(): boolean;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * This property only takes effect on phone. Please see the documentation sap.m.Dialog#icon.
     */
    getIcon(): URI;
    /**
     * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus},
     * or `null`.
     */
    getInitialFocus(): ID;
    /**
     * Returns a metadata object for class sap.m.ResponsivePopover.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getModal modal}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
     */
    getModal(): boolean;
    /**
     * Gets current value of property {@link #getOffsetX offsetX}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
     */
    getOffsetX(): int;
    /**
     * Gets current value of property {@link #getOffsetY offsetY}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
     */
    getOffsetY(): int;
    /**
     * Gets current value of property {@link #getPlacement placement}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
     *
     * Default value is `Right`.
     */
    getPlacement(): PlacementType | keyof typeof PlacementType;
    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Gets current value of property {@link #getResizable resizable}.
     *
     * Whether resize option is enabled.
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * Gets current value of property {@link #getShowArrow showArrow}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
     *
     * Default value is `true`.
     */
    getShowArrow(): boolean;
    /**
     * Gets current value of property {@link #getShowCloseButton showCloseButton}.
     *
     * Determines if a close button should be inserted into the dialog's header dynamically to close the dialog.
     * This property only takes effect on phone. **Note:** The close button could be placed only in a sap.m.Bar
     * if a sap.m.Toolbar is passed as a header - the property will not take effect.
     *
     * Default value is `true`.
     */
    getShowCloseButton(): boolean;
    /**
     * Gets current value of property {@link #getShowHeader showHeader}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader
     * and sap.m.Dialog#showHeader
     *
     * Default value is `true`.
     */
    getShowHeader(): boolean;
    /**
     * Gets content of aggregation {@link #getSubHeader subHeader}.
     *
     * SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and
     * sap.m.Dialog#subHeader
     */
    getSubHeader(): IBar;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and
     * sap.m.Dialog#title
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling
     * and sap.m.Dialog#verticalScrolling
     *
     * Default value is `true`.
     */
    getVerticalScrolling(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Checks whether the ResponsivePopover is currently open.
     */
    isOpen(): boolean;
    /**
     * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter
     * on tablet or desktop and is full screen on phone. Therefore the control parameter is only used on tablet
     * or desktop and is ignored on phone.
     */
    openBy(
      /**
       * When this control is displayed on tablet or desktop, the ResponsivePopover is positioned relative to
       * this control.
       */
      oParent: object
    ): object;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Setter for beginButton aggregation
     */
    setBeginButton(
      /**
       * The button that will be set as an aggregation
       */
      oButton: Button
    ): this;
    /**
     * Sets a new value for property {@link #getContentHeight contentHeight}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight
     * and sap.m.Dialog#contentHeight
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentHeight(
      /**
       * New value for property `contentHeight`
       */
      sContentHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getContentWidth contentWidth}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth
     * and sap.m.Dialog#contentWidth
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentWidth(
      /**
       * New value for property `contentWidth`
       */
      sContentWidth?: CSSSize
    ): this;
    /**
     * Sets the aggregated {@link #getCustomHeader customHeader}.
     */
    setCustomHeader(
      /**
       * The customHeader to set
       */
      oCustomHeader: IBar
    ): this;
    /**
     * Setter for endButton aggregation
     */
    setEndButton(
      /**
       * The button that will be set as an aggregation
       */
      oButton: Button
    ): this;
    /**
     * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling
     * and sap.m.Dialog#horizontalScrolling
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setHorizontalScrolling(
      /**
       * New value for property `horizontalScrolling`
       */
      bHorizontalScrolling?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * This property only takes effect on phone. Please see the documentation sap.m.Dialog#icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets the associated {@link #getInitialFocus initialFocus}.
     */
    setInitialFocus(
      /**
       * ID of an element which becomes the new target of this initialFocus association; alternatively, an element
       * instance may be given
       */
      oInitialFocus: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getModal modal}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setModal(
      /**
       * New value for property `modal`
       */
      bModal?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getOffsetX offsetX}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setOffsetX(
      /**
       * New value for property `offsetX`
       */
      iOffsetX?: int
    ): this;
    /**
     * Sets a new value for property {@link #getOffsetY offsetY}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setOffsetY(
      /**
       * New value for property `offsetY`
       */
      iOffsetY?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPlacement placement}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Right`.
     */
    setPlacement(
      /**
       * New value for property `placement`
       */
      sPlacement?: PlacementType | keyof typeof PlacementType
    ): this;
    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Sets a new value for property {@link #getResizable resizable}.
     *
     * Whether resize option is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResizable(
      /**
       * New value for property `resizable`
       */
      bResizable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowArrow showArrow}.
     *
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowArrow(
      /**
       * New value for property `showArrow`
       */
      bShowArrow?: boolean
    ): this;
    /**
     * Determines if the close button to the ResponsivePopover is shown or not. Works only when ResponsivePopover
     * is used as a dialog
     */
    setShowCloseButton(
      /**
       * Defines whether the close button is shown
       */
      bShowCloseButton: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowHeader showHeader}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader
     * and sap.m.Dialog#showHeader
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHeader(
      /**
       * New value for property `showHeader`
       */
      bShowHeader?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getSubHeader subHeader}.
     */
    setSubHeader(
      /**
       * The subHeader to set
       */
      oSubHeader: IBar
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and
     * sap.m.Dialog#title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
     *
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling
     * and sap.m.Dialog#verticalScrolling
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVerticalScrolling(
      /**
       * New value for property `verticalScrolling`
       */
      bVerticalScrolling?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterClose afterClose} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired after popover or dialog is closed.
     */
    attachAfterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterOpen afterOpen} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired after popover or dialog is open.
     */
    attachAfterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired before popover or dialog is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.ResponsivePopover`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ResponsivePopover` itself.
     *
     * Event is fired before popover or dialog is open.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ResponsivePopover` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ResponsivePopoverSettings extends $ControlSettings {
    /**
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
     */
    placement?:
      | (PlacementType | keyof typeof PlacementType)
      | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader
     * and sap.m.Dialog#showHeader
     */
    showHeader?: boolean | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and
     * sap.m.Dialog#title
     */
    title?: string | PropertyBindingInfo;

    /**
     * This property only takes effect on phone. Please see the documentation sap.m.Dialog#icon.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
     */
    modal?: boolean | PropertyBindingInfo;

    /**
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
     */
    offsetX?: int | PropertyBindingInfo;

    /**
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
     */
    offsetY?: int | PropertyBindingInfo;

    /**
     * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
     */
    showArrow?: boolean | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth
     * and sap.m.Dialog#contentWidth
     */
    contentWidth?: CSSSize | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight
     * and sap.m.Dialog#contentHeight
     */
    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling
     * and sap.m.Dialog#horizontalScrolling
     */
    horizontalScrolling?: boolean | PropertyBindingInfo;

    /**
     * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling
     * and sap.m.Dialog#verticalScrolling
     */
    verticalScrolling?: boolean | PropertyBindingInfo;

    /**
     * Determines if a close button should be inserted into the dialog's header dynamically to close the dialog.
     * This property only takes effect on phone. **Note:** The close button could be placed only in a sap.m.Bar
     * if a sap.m.Toolbar is passed as a header - the property will not take effect.
     */
    showCloseButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.36.4
     * @EXPERIMENTAL (since 1.36.4)
     *
     * Whether resize option is enabled.
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader
     * and sap.m.Dialog#customHeader
     */
    customHeader?: IBar;

    /**
     * SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and
     * sap.m.Dialog#subHeader
     */
    subHeader?: IBar;

    /**
     * BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode)
     * of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed
     * in header, please use customHeader instead.
     */
    beginButton?: Button;

    /**
     * EndButton is supported by both variants. It is always show in the right part (left part in RTL mode)
     * of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed
     * in header, please use customHeader instead.
     */
    endButton?: Button;

    /**
     * InitialFocus is supported by both variants. Please see the documentation on sap.m.Popover#initialFocus
     * and sap.m.Dialog#initialFocus
     */
    initialFocus?: Control | string;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Event is fired before popover or dialog is open.
     */
    beforeOpen?: Function;

    /**
     * Event is fired after popover or dialog is open.
     */
    afterOpen?: Function;

    /**
     * Event is fired before popover or dialog is closed.
     */
    beforeClose?: Function;

    /**
     * Event is fired after popover or dialog is closed.
     */
    afterClose?: Function;
  }
}

declare module "sap/m/ResponsiveScale" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import { IScale } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.46
   *
   * **Overview**
   *
   * A {@link sap.m.Slider} element represents a scale with tickmarks and labels. The purpose of the element
   * is to decouple the scale logic from other controls i.e. Slider / RangeSlider
   *
   * The most important properties of the ResponsiveScale are:
   * 	 -  tickmarksBetweenLabels - Puts a label on every N-th tickmark.
   */
  export default class ResponsiveScale extends UI5Element implements IScale {
    __implements__sap_m_IScale: boolean;
    /**
     * Constructor for a new `ResponsiveScale`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ResponsiveScaleSettings
    );
    /**
     * Constructor for a new `ResponsiveScale`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ResponsiveScaleSettings
    );

    /**
     * How many tickmarks could be placed on the axis/scale?
     */
    calcNumberOfTickmarks(
      /**
       * Size of the scale. This is the distance between the start and end point i.e. 0..100
       */
      fSize: float,
      /**
       * The step walking from start to end.
       */
      fStep: float,
      /**
       * Limits the number of tickmarks.
       */
      iTickmarksThreshold: int
    ): number;
    /**
     * Creates a new subclass of class sap.m.ResponsiveScale with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ResponsiveScale>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.ResponsiveScale.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTickmarksBetweenLabels tickmarksBetweenLabels}.
     *
     * Put a label on every N-th tickmark.
     *
     * Default value is `0`.
     */
    getTickmarksBetweenLabels(): int;
    /**
     * Sets a new value for property {@link #getTickmarksBetweenLabels tickmarksBetweenLabels}.
     *
     * Put a label on every N-th tickmark.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setTickmarksBetweenLabels(
      /**
       * New value for property `tickmarksBetweenLabels`
       */
      iTickmarksBetweenLabels?: int
    ): this;
  }

  export interface $ResponsiveScaleSettings extends $ElementSettings {
    /**
     * Put a label on every N-th tickmark.
     */
    tickmarksBetweenLabels?: int | PropertyBindingInfo;
  }
}

declare module "sap/m/routing/RouteMatchedHandler" {
  import BaseObject from "sap/ui/base/Object";

  import Router from "sap/ui/core/routing/Router";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.28) - use {@link sap.m.routing.Router} or {@link sap.m.routing.Targets} instead.
   * The functionality of the routematched handler is built in into these two classes, there is no need to
   * create this anymore.
   *
   * This class will attach to the Events of a provided router and add the views created by it to a {@link
   * sap.m.SplitContainer} or a {@link sap.m.NavContainer} Control, if this is the target control of the route.
   *  If the targetControl is no {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer}, It will only
   * close the dialogs, according to the property value.
   *
   *  When a navigation is triggered, this class will try to determine the transition of the pages based on
   * the history.
   *  Eg: if a user presses browser back, it will show a backwards animation.
   *
   *  The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register
   * on the RouteMatched event of the Router, the visual navigation did not take place yet.
   *
   *  Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable,
   * for example if someone bookmarked a detail page, and wants to navigate to a masterPage.
   *  If you want this case to always show a backwards transition, you should specify a "viewLevel" property
   * on your Route.
   *  The viewLevel has to be an integer. The Master should have a lower number than the detail.
   *  These levels should represent the user process of your application and they do not have to match the
   * container structure of your Routes.
   *  If the user navigates between views with the same viewLevel, the history is asked for the direction.
   *
   *  You can specify a property "transition" in a route to define which transition will be applied when navigating.
   * If it is not defined, the nav container will take its default transition.
   *  You can also specify "transitionParameters" on a Route, to give the transition parameters.
   *
   *  preservePageInSplitContainer is deprecated since 1.28 since Targets make this parameter obsolete. If
   * you want to preserve the current view when navigating, but you want to navigate to it when nothing is
   * displayed in the navContainer, you can set preservePageInSplitContainer = true
   *  When the route that has this flag directly matches the pattern, the view will still be switched by the
   * splitContainer.
   */
  export default class RouteMatchedHandler extends BaseObject {
    /**
     * Instantiates a RouteMatchedHandler.
     * See:
     * 	sap.m.NavContainer
     */
    constructor(
      /**
       * A router that creates views
       */
      router: Router,
      /**
       * If set to `true` it will close all open dialogs before navigating. If set to `false` it will just navigate
       * without closing dialogs.
       */
      closeDialogs?: boolean
    );

    /**
     * Removes the routeMatchedHandler from the Router
     */
    destroy(): this;
    /**
     * Creates a new subclass of class sap.m.routing.RouteMatchedHandler with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, RouteMatchedHandler>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets if a navigation should close dialogs
     */
    getCloseDialogs(): boolean;
    /**
     * Returns a metadata object for class sap.m.routing.RouteMatchedHandler.
     */
    static getMetadata(): Metadata;
    /**
     * Sets if a navigation should close dialogs
     */
    setCloseDialogs(
      /**
       * close dialogs if true
       */
      bCloseDialogs: boolean
    ): this;
  }
}

declare module "sap/m/routing/Router" {
  import Router1 from "sap/ui/core/routing/Router";

  import UIComponent from "sap/ui/core/UIComponent";

  import Metadata from "sap/ui/base/Metadata";

  import TargetHandler from "sap/m/routing/TargetHandler";

  /**
   * @SINCE 1.28.1
   *
   * SAPUI5 mobile `Router`. The difference to the {@link sap.ui.core.routing.Router} are the `viewLevel`,
   * `transition`, and `transitionParameters` properties that you can specify in every Route or Target created
   * by this router.
   */
  export default class Router extends Router1 {
    /**
     * Constructor for a new `sap.m.routing.Router`. See `{@link sap.ui.core.routing.Router}` for the constructor
     * arguments.
     */
    constructor(
      /**
       * may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.
       *  Each of the routes contained in the array/object will be added to the router.
       *
       *
       * One way of defining routes is an array:
       * ```javascript
       *
       * [
       *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
       *     {
       *         name: "firstRoute"
       *         pattern : "usefulPattern"
       *     },
       *     //Will create a route called 'anotherRoute'
       *     {
       *         name: "anotherRoute"
       *         pattern : "anotherPattern"
       *     },
       *     //Will create a route for a nested component with the prefix 'componentPrefix'
       *     {
       *         pattern: "componentPattern",
       *         name: "componentRoute",
       *         target: [
       *              {
       *                  name: "subComponent",
       *                  prefix: "componentPrefix"
       *              }
       *         ]
       *     }
       * ]
       * ```
       *
       *
       * The alternative way of defining routes is an Object.
       *  If you choose this way, the name attribute is the name of the property.
       * ```javascript
       *
       * {
       *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
       *     firstRoute : {
       *         pattern : "usefulPattern"
       *     },
       *     //Will create a route called 'anotherRoute'
       *     anotherRoute : {
       *         pattern : "anotherPattern"
       *     },
       *     //Will create a route for a nested component with the prefix 'componentPrefix'
       *     componentRoute{
       *         pattern: "componentPattern",
       *         target: [
       *              {
       *                  name: "subComponent",
       *                  prefix: "componentPrefix"
       *              }
       *         ]
       *     }
       * }
       * ```
       *  The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}
       */
      oRoutes?: object | object[],
      /**
       * Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.
       *  This config will be used for routes and for targets, used in the router
       *  Eg: if the config object specifies :
       * ```javascript
       *
       *
       * { viewType : "XML" }
       *
       * ```
       *  The targets look like this:
       * ```javascript
       *
       * {
       *     xmlTarget : {
       *         ...
       *     },
       *     jsTarget : {
       *         viewType : "JS"
       *         ...
       *     },
       *     componentTarget: {
       *         type: "Component",
       *         name: "subComponent",
       *         id: "mySubComponent",
       *         options: {
       *             // the Component configuration:
       *             manifest: true
       *             ...
       *         },
       *         controlId: "myRootView",
       *         controlAggregation: "content"
       *     }
       * }
       * ```
       *  Then the effective config will look like this:
       * ```javascript
       *
       * {
       *     xmlTarget : {
       *         viewType : "XML"
       *         ...
       *     },
       *     jsTarget : {
       *         viewType : "JS"
       *         ...
       *     },
       * 	   componentTarget: {
       *         type: "Component",
       *         name: "subComponent",
       *         id: "mySubComponent",
       *         options: {
       *             // the Component configuration:
       *             manifest: true
       *             ...
       *         },
       *         controlId: "myRootView",
       *         controlAggregation: "content"
       *     }
       * }
       * ```
       *
       *
       * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget
       * is specifying it, so the viewType will be JS.
       */
      oConfig?: {
        /**
         * @since 1.34. Whether the views which are loaded within this router instance asyncly.
         */
        async?: boolean;
      },
      /**
       * the Component of all the views that will be created by this Router,
       *  will get forwarded to the {@link sap.ui.core.routing.Views#constructor}.
       *  If you are using the componentMetadata to define your routes you should skip this parameter.
       */
      oOwner?: UIComponent,
      /**
       * the target configuration, see {@link sap.m.routing.Targets#constructor} documentation (the options object).
       *  You should use Targets to create and display views. The route should only contain routing relevant properties.
       *  **Example:**
       * ```javascript
       *
       *
       *     new Router(
       *     // Routes
       *     [
       *         {
       *             // no view creation related properties are in the route
       *             name: "startRoute",
       *             //no hash
       *             pattern: "",
       *             // you can find this target in the targetConfig
       *             target: "welcome"
       *         }
       *     ],
       *     // Default values shared by routes and Targets
       *     {
       *         viewNamespace: "my.application.namespace",
       *         viewType: "XML"
       *     },
       *     // You should only use this constructor when you are not using a router with a component.
       *     // Please use the metadata of a component to define your routes and targets.
       *     // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
       *     null,
       *     // Target config
       *     {
       *          //same name as in the route called 'startRoute'
       *          welcome: {
       *              // All properties for creating and placing a view go here or in the config
       *              viewName: "Welcome",
       *              controlId: "app",
       *              controlAggregation: "pages"
       *          }
       *     })
       *
       * ```
       */
      oTargetsConfig?: object
    );

    /**
     * Creates a new subclass of class sap.m.routing.Router with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.routing.Router.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Router>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.routing.Router.
     */
    static getMetadata(): Metadata;
    /**
     * Returns the TargetHandler instance.
     */
    getTargetHandler(): TargetHandler;
  }
}

declare module "sap/m/routing/TargetHandler" {
  import BaseObject from "sap/ui/base/Object";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @SINCE 1.28.1
   *
   * Used for closing dialogs and showing transitions in `NavContainers` when targets are displayed.
   *
   * **Note:** You should not create an own instance of this class. It is created when using `{@link sap.m.routing.Router}`
   * or `{@link sap.m.routing.Targets}`. You may use the `{@link #setCloseDialogs}` function to specify if
   * dialogs should be closed on displaying other views.
   */
  export default class TargetHandler extends BaseObject {
    /**
     * Constructor for a new `TargetHandler`.
     */
    constructor(
      /**
       * Closes all open dialogs before navigating, if set to `true` (default). If set to `false`, it will just
       * navigate without closing dialogs.
       */
      closeDialogs: boolean
    );

    /**
     * Creates a new subclass of class sap.m.routing.TargetHandler with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TargetHandler>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets if a navigation should close dialogs.
     */
    getCloseDialogs(): boolean;
    /**
     * Returns a metadata object for class sap.m.routing.TargetHandler.
     */
    static getMetadata(): Metadata;
    /**
     * Sets if a navigation should close dialogs.
     */
    setCloseDialogs(
      /**
       * Close dialogs if `true`
       */
      bCloseDialogs: boolean
    ): this;
  }
}

declare module "sap/m/routing/Targets" {
  import Targets1 from "sap/ui/core/routing/Targets";

  import Views from "sap/ui/core/routing/Views";

  import Metadata from "sap/ui/base/Metadata";

  import TargetHandler from "sap/m/routing/TargetHandler";

  /**
   * @SINCE 1.28.1
   *
   * Provides a convenient way for placing views into the correct containers of your app.
   *
   * The mobile extension of `Targets` also handles the triggering of page navigation when the target control
   * is an `{@link sap.m.SplitContainer}`, an `{@link sap.m.NavContainer}` or a control which extends one
   * of these. Other controls are also allowed, but the extra parameters `viewLevel`, `transition` and `transitionParameters`
   * are ignored and it behaves as `{@link sap.ui.core.routing.Targets}`.
   *
   * When a target is displayed, dialogs will be closed. To change this use `{@link #getTargetHandler}` and
   * `{@link sap.m.routing.TargetHandler#setCloseDialogs}`.
   */
  export default class Targets extends Targets1 {
    /**
     * Constructor for a new `Targets` class.
     */
    constructor(oOptions: {
      /**
       * the views instance will create the views of all the targets defined, so if 2 targets have the same viewName,
       * the same instance of the view will be displayed.
       */
      views: Views;
      /**
       * this config allows all the values oOptions.targets.anyName allows, these will be the default values for
       * properties used in the target.
       *  For example if you are only using xmlViews in your app you can specify viewType="XML" so you don't have
       * to repeat this in every target.
       *  If a target specifies viewType="JS", the JS will be stronger than the XML here is an example.
       *
       *
       * ```javascript
       *
       *
       * {
       *     config: {
       *         viewType : "XML"
       *     }
       *     targets : {
       *         xmlTarget : {
       *             ...
       *         },
       *         jsTarget : {
       *             viewType : "JS"
       *             ...
       *         }
       *     }
       * }
       *
       * ```
       *  Then the effective config that will be used looks like this:
       * ```javascript
       *
       *
       * {
       *     xmlTarget : {
       *         // coming from the defaults
       *         viewType : "XML"
       *         ...
       *     },
       *     jsTarget : {
       *        // XML is overwritten by the "JS" of the targets property
       *        viewType : "JS"
       *       ...
       *     }
       * }
       *
       * ```
       */
      config?: {
        /**
         * The id of the rootView - This should be the id of the view that contains the control with the controlId
         * since the control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the
         * rootView. If you are using a component and add the routing.targets **do not set this parameter**, since
         * the component will set the rootView to the view created by the {@link sap.ui.core.UIComponent#createContent}
         * function. If you specify the "parent" property of a target, the control will not be searched in the root
         * view but in the view Created by the parent (see parent documentation).
         */
        rootView?: string;
        /**
         * @since 1.34 Whether the views which are created through this Targets are loaded asyncly. This option
         * can be set only when the Targets is used standalone without the involvement of a Router. Otherwise the
         * async option is inherited from the Router.
         */
        async?: boolean;
      };
      /**
       * One or multiple targets in a map.
       */
      targets: {
        /**
         * a new target, the key severs as a name. An example:
         * ```javascript
         *
         *
         * {
         *     targets: {
         *         welcome: {
         *             viewName: "Welcome",
         *             viewType: "XML",
         *             ....
         *             // Other target parameters
         *         },
         *         goodbye: {
         *             viewName: "Bye",
         *             viewType: "JS",
         *             ....
         *             // Other target parameters
         *         }
         *     }
         * }
         *
         * ```
         *
         *
         * This will create two targets named 'welcome' and 'goodbye' you can display both of them or one of them
         * using the {@link #display} function.
         */
        anyName: {
          /**
           * The name of a view that will be created. To place the view into a Control use the controlAggregation
           * and controlId. Views will only be created once per viewName.
           * ```javascript
           *
           *
           * {
           *     targets: {
           *         // If display("masterWelcome") is called, the master view will be placed in the 'MasterPages' of a control with the id splitContainter
           *         masterWelcome: {
           *             viewName: "Welcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "masterPages"
           *         },
           *         // If display("detailWelcome") is called after the masterWelcome, the view will be removed from the master pages and added to the detail pages, since the same instance is used. Also the controls inside of the view will have the same state.
           *         detailWelcome: {
           *             // same view here, that's why the same instance is used
           *             viewName: "Welcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "detailPages"
           *         }
           *     }
           * }
           *
           * ```
           *
           *
           * If you want to have a second instance of the welcome view you can use the following:
           *
           *
           * ```javascript
           *
           *
           * // Some code you execute before you display the taget named 'detailWelcome':
           * var oView = sap.ui.view(({ viewName : "Welcome", type : sap.ui.core.mvc.ViewType.XML});
           * oTargets.getViews().setView("WelcomeWithAlias", oView)
           *
           * {
           *     targets: {
           *         // If display("masterWelcome") is called, the master viewName will be placed in the 'MasterPages' of a control with the id splitContainter
           *         masterWelcome: {
           *             viewName: "Welcome",
           *             controlId: "splitContainer",
           *             controlAggregation: "masterPages"
           *         },
           *         // If display("detailWelcome") is called after the masterWelcome, a second instance with an own controller instance will be added in the detail pages.
           *         detailWelcome: {
           *             // same viewName here, that's why the same instance is used
           *             viewName: "WelcomeWithAlias",
           *             controlId: "splitContainer",
           *             controlAggregation: "detailPages"
           *         }
           *     }
           * }
           *
           * ```
           */
          viewName: string;
          /**
           * The type of the view that is going to be created. These are the supported types: {@link sap.ui.core.mvc.ViewType}.
           * You always have to provide a viewType except if `oOptions.config.viewType` is set or using {@link sap.ui.core.routing.Views#setView}.
           */
          viewType?: string;
          /**
           * A prefix that will be prepended in front of the viewName.
           *  **Example:** viewName is set to "myView" and viewPath is set to "myApp" - the created viewName will
           * be "myApp.myView".
           */
          viewPath?: string;
          /**
           * The id of the created view. This is will be prefixed with the id of the component set to the views instance
           * provided in oOptions.views. For details see {@link sap.ui.core.routing.Views#getView}.
           */
          viewId?: string;
          /**
           * The id of the parent of the controlId - This should be the id of the view that contains your controlId,
           * since the target control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function
           * of the targetParent. By default, this will be the view created by a component, so you do not have to
           * provide this parameter. If you are using children, the view created by the parent of the child is taken.
           * You only need to specify this, if you are not using a Targets instance created by a component and you
           * should give the id of root view of your application to this property.
           */
          targetParent?: string;
          /**
           * The id of the control where you want to place the view created by this target. The view of the target
           * will be put into this container Control, using the controlAggregation property. You have to specify both
           * properties or the target will not be able to place itself. An example for containers are {@link sap.ui.ux3.Shell}
           * with the aggregation 'content' or a {@link sap.m.NavContainer} with the aggregation 'pages'.
           */
          controlId?: string;
          /**
           * The name of an aggregation of the controlId, that contains views. Eg: a {@link sap.m.NavContainer} has
           * an aggregation 'pages', another Example is the {@link sap.ui.ux3.Shell} it has 'content'.
           */
          controlAggregation?: string;
          /**
           * Defines a boolean that can be passed to specify if the aggregation should be cleared - all items will
           * be removed - before adding the View to it. When using a {@link sap.ui.ux3.Shell} this should be true.
           * For a {@link sap.m.NavContainer} it should be false. When you use the {@link sap.m.routing.Router} the
           * default will be false.
           */
          clearControlAggregation?: boolean;
          /**
           * A reference to another target, using the name of the target. If you display a target that has a parent,
           * the parent will also be displayed. Also the control you specify with the controlId parameter, will be
           * searched inside of the view of the parent not in the rootView, provided in the config. The control will
           * be searched using the byId function of a view. When it is not found, the global id is checked.
           *  The main usecase for the parent property is placing a view inside a smaller container of a view, which
           * is also created by targets. This is useful for lazy loading views, only if the user really navigates
           * to this part of your application.
           *  **Example:** Our aim is to lazy load a tab of an IconTabBar (a control that displays a view initially
           * and when a user clicks on it the view changes). It's a perfect candidate to lazy load something inside
           * of it.
           *  **Example app structure:**
           *  We have a rootView that is returned by the createContent function of our UIComponent. This view contains
           * an sap.m.App control with the id 'myApp'
           * ```javascript
           *
           *
           * <View xmlns="sap.m">
           *     <App id="myApp"/>
           * </View>
           *
           * ```
           *  an xml view called 'Detail'
           * ```javascript
           *
           *
           * <View xmlns="sap.m">
           *     <IconTabBar>
           *         <items>
           *             <IconTabFilter>
           *                 <!-- content of our first tab -->
           *             <IconTabFilter>
           *             <IconTabFilter id="mySecondTab">
           *                 <!-- nothing here, since we will lazy load this one with a target -->
           *             <IconTabFilter>
           *         </items>
           *     </IconTabBar>
           * </View>
           *
           * ```
           *  and a view called 'SecondTabContent', this one contains our content we want to have lazy loaded. Now
           * we need to create our Targets instance with a config matching our app:
           * ```javascript
           *
           *
           *     new Targets({
           *         //Creates our views except for root, we created this one before - when using a component you
           *         views: new Views(),
           *         config: {
           *             // all of our views have that type
           *             viewType: 'XML',
           *             // a reference to the app control in the rootView created by our UIComponent
           *             controlId: 'myApp',
           *             // An app has a pages aggregation where the views need to be put into
           *             controlAggregation: 'pages'
           *         },
           *         targets: {
           *             detail: {
           *                 viewName: 'Detail'
           *             },
           *             secondTabContent: {
           *                 // A reference to the detail target defined above
           *                 parent: 'detail',
           *                 // A reference to the second Tab container in the Detail view. Here the target does not look in the rootView, it looks in the Parent view (Detail).
           *                 controlId: 'mySecondTab',
           *                 // An IconTabFilter has an aggregation called content so we need to overwrite the pages set in the config as default.
           *                 controlAggregation: 'content',
           *                 // A view containing the content
           *                 viewName: 'SecondTabContent'
           *             }
           *         }
           *     });
           *
           * ```
           *
           *
           * Now if we call ` oTargets.display("secondTabContent") `, 2 views will be created: Detail and SecondTabContent.
           * The 'Detail' view will be put into the pages aggregation of the App. And afterwards the 'SecondTabContent'
           * view will be put into the content Aggregation of the second IconTabFilter. So a parent will always be
           * created before the target referencing it.
           */
          parent?: string;
          /**
           * If you are having an application that has a logical order of views (eg: a create account process, first
           * provide user data, then review and confirm them). You always want to show a backwards transition if a
           * navigation from the confirm to the userData page takes place. Therefore you may use the viewLevel. The
           * viewLevel has to be an integer. The user data page should have a lower number than the confirm page.
           * These levels should represent the user process of your application and they do not have to match the
           * container structure of your Targets. If the user navigates between views with the same viewLevel, a forward
           * transition is taken. If you pass a direction into the display function, the viewLevel will be ignored.
           *  **Example:**
           *
           * ```javascript
           *
           *
           *     {
           *         targets: {
           *             startPage: {
           *                 viewLevel: 0
           *                 // more properties
           *             },
           *             userData: {
           *                 viewLevel: 1
           *                 // more properties
           *             },
           *             confirmRegistration: {
           *                 viewLevel: 2
           *                 // more properties
           *             },
           *             settings: {
           *                 //no view level here
           *             }
           *         }
           *     }
           *
           * ```
           *
           *
           * Currently the 'userData' target is displayed.
           * 	 -  If we navigate to 'startPage' the navContainer will show a backwards navigation, since the viewLevel
           * 			is lower.
           * 	 -  If we navigate to 'userData' the navContainer will show a forwards navigation, since the viewLevel
           * 			is higher.
           * 	 -  If we navigate to 'settings' the navContainer will show a forwards navigation, since the viewLevel
           * 			is not defined and cannot be compared.
           */
          viewLevel?: int;
          /**
           * define which transition of the {@link sap.m.NavContainer} will be applied when navigating. If it is not
           * defined, the nav container will take its default transition.
           */
          transition?: string;
          /**
           * define the transitionParameters of the {@link sap.m.NavContainer}
           */
          transitionParameters?: string;
        };
      };
    });

    /**
     * Creates a new subclass of class sap.m.routing.Targets with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.routing.Targets.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Targets>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.routing.Targets.
     */
    static getMetadata(): Metadata;
    /**
     * Returns the TargetHandler instance.
     */
    getTargetHandler(): TargetHandler;
  }
}

declare module "sap/m/ScrollContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import UI5Element from "sap/ui/core/Element";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * The ScrollContainer is a control that can display arbitrary content within a limited screen area and
   * provides scrolling to make all content accessible. When not to use: Do not nest scrolling areas that
   * scroll in the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with
   * scrolling enabled).
   */
  export default class ScrollContainer extends Control {
    /**
     * Constructor for a new ScrollContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ScrollContainerSettings
    );
    /**
     * Constructor for a new ScrollContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ScrollContainerSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.ScrollContainer with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ScrollContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of the ScrollContainer.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getFocusable focusable}.
     *
     * Whether the scroll container can be focused.
     *
     * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction
     * requires an additional tab stop on the container.
     *
     * Default value is `false`.
     */
    getFocusable(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * The height of the ScrollContainer. By default the height equals the content height. If only horizontal
     * scrolling is used, do not set the height or make sure the height is always larger than the height of
     * the content.
     *
     * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
     * container must be defined.
     *
     * Default value is `'auto'`.
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getHorizontal horizontal}.
     *
     * Whether horizontal scrolling should be possible.
     *
     * Default value is `true`.
     */
    getHorizontal(): boolean;
    /**
     * Returns a metadata object for class sap.m.ScrollContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVertical vertical}.
     *
     * Whether vertical scrolling should be possible.
     *
     * Note that this is off by default because typically a Page is used as fullscreen element which can handle
     * vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be
     * set to "true". Important: it is not supported to have nested controls that both enable scrolling into
     * the same dimension.
     *
     * Default value is `false`.
     */
    getVertical(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * The width of the ScrollContainer. If not set, it consumes the complete available width, behaving like
     * normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits
     * or wraps.
     *
     * Default value is `'auto'`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Scrolls to the given position. When called while the control is not rendered (yet), the scrolling position
     * is still applied, but there is no animation.
     */
    scrollTo(
      /**
       * The horizontal pixel position to scroll to. Scrolling to the right happens with positive values. In right-to-left
       * mode scrolling starts at the right side and higher values scroll to the left. If only vertical scrolling
       * is enabled, give 0 as value.
       */
      x: int,
      /**
       * The vertical pixel position to scroll to. Scrolling down happens with positive values. If only horizontal
       * scrolling is enabled, give 0 as value.
       */
      y: int,
      /**
       * The duration of animated scrolling in milliseconds. The value `0` results in immediate scrolling without
       * animation.
       */
      time?: int
    ): this;
    /**
     * @SINCE 1.30
     *
     * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
     */
    scrollToElement(
      /**
       * The element to which should be scrolled.
       */
      element: HTMLElement | UI5Element,
      /**
       * The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave
       * it default.
       */
      time?: int
    ): this;
    /**
     * Sets a new value for property {@link #getFocusable focusable}.
     *
     * Whether the scroll container can be focused.
     *
     * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction
     * requires an additional tab stop on the container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFocusable(
      /**
       * New value for property `focusable`
       */
      bFocusable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * The height of the ScrollContainer. By default the height equals the content height. If only horizontal
     * scrolling is used, do not set the height or make sure the height is always larger than the height of
     * the content.
     *
     * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
     * container must be defined.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'auto'`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getHorizontal horizontal}.
     *
     * Whether horizontal scrolling should be possible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setHorizontal(
      /**
       * New value for property `horizontal`
       */
      bHorizontal?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVertical vertical}.
     *
     * Whether vertical scrolling should be possible.
     *
     * Note that this is off by default because typically a Page is used as fullscreen element which can handle
     * vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be
     * set to "true". Important: it is not supported to have nested controls that both enable scrolling into
     * the same dimension.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setVertical(
      /**
       * New value for property `vertical`
       */
      bVertical?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * The width of the ScrollContainer. If not set, it consumes the complete available width, behaving like
     * normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits
     * or wraps.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'auto'`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ScrollContainerSettings extends $ControlSettings {
    /**
     * The width of the ScrollContainer. If not set, it consumes the complete available width, behaving like
     * normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits
     * or wraps.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * The height of the ScrollContainer. By default the height equals the content height. If only horizontal
     * scrolling is used, do not set the height or make sure the height is always larger than the height of
     * the content.
     *
     * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
     * container must be defined.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Whether horizontal scrolling should be possible.
     */
    horizontal?: boolean | PropertyBindingInfo;

    /**
     * Whether vertical scrolling should be possible.
     *
     * Note that this is off by default because typically a Page is used as fullscreen element which can handle
     * vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be
     * set to "true". Important: it is not supported to have nested controls that both enable scrolling into
     * the same dimension.
     */
    vertical?: boolean | PropertyBindingInfo;

    /**
     * Whether the scroll container can be focused.
     *
     * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction
     * requires an additional tab stop on the container.
     */
    focusable?: boolean | PropertyBindingInfo;

    /**
     * The content of the ScrollContainer.
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/SearchField" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, CSSSize } from "sap/ui/core/library";

  import { IShellBar } from "sap/f/library";

  import SuggestionItem from "sap/m/SuggestionItem";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * An input field to search for a specific item. Overview: A search field is needed when the user needs
   * to find specific information in large amounts of data. The search field is also the control of choice
   * for filtering down a given amount of information. Structure: The search input field can be used in two
   * ways:
   * 	 - Manual search - The search is triggered after the user presses the search button. Manual search uses
   * 			a “starts with” approach.
   * 	 - Live search (search-as-you-type) - The search is triggered after each button press. A suggestion
   * 			list is shown below the search field. Live search uses a “contains” approach.  Usage: When to use::
   *
   * 	 -  Use live search whenever possible.
   * 	 -  Use a manual search only if the amount of data is too large and if your app would otherwise run
   * 			into performance issues.   Responsive Behavior: On mobile devices, there is no refresh button in
   * 			the search field. "Pull Down to Refresh" is used instead. The "Pull Down to Refresh" arrow icon is animated
   * 			and spins to signal that the user should release it.
   */
  export default class SearchField
    extends Control
    implements IFormContent, IShellBar {
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_f_IShellBar: boolean;
    /**
     * Constructor for a new SearchField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/search/ Search Field}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SearchFieldSettings
    );
    /**
     * Constructor for a new SearchField.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/search/ Search Field}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SearchFieldSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.34
     *
     * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    addSuggestionItem(
      /**
       * The suggestionItem to add; if empty, nothing is inserted
       */
      oSuggestionItem: SuggestionItem
    ): this;
    /**
     * @SINCE 1.77
     *
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired when the user changes the value of the search field. Unlike the `liveChange` event,
     * the `change` event is not fired for each key press.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired each time when the value of the search field is changed by the user - e.g. at each
     * key press. Do not invalidate a focused search field, especially during the liveChange event.
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * Event which is fired when the user triggers a search.
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.34
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired when the search field is initially focused or its value is changed by the user. This
     * event means that suggestion data should be updated, in case if suggestions are used. Use the value parameter
     * to create new suggestions for it.
     */
    attachSuggest(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds property {@link #getValue value} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindValue(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * @SINCE 1.34
     *
     * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    destroySuggestionItems(): this;
    /**
     * @SINCE 1.77
     *
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.SearchField`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.SearchField`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.m.SearchField`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.34
     *
     * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.m.SearchField`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSuggest(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SearchField with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SearchField>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.77
     *
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new value of the control.
         */
        value?: string;
      }
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Current search string.
         */
        newValue?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:search search} to attached listeners.
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The search query string.
         */
        query?: string;
        /**
         * Suggestion list item in case if the user has selected an item from the suggestions list.
         */
        suggestionItem?: SuggestionItem;
        /**
         * Indicates if the user pressed the refresh icon.
         */
        refreshButtonPressed?: boolean;
        /**
         * Indicates if the user pressed the clear icon.
         */
        clearButtonPressed?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.34
     *
     * Fires event {@link #event:suggest suggest} to attached listeners.
     */
    fireSuggest(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Current search string of the search field.
         */
        suggestValue?: string;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is true).
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * @SINCE 1.34
     *
     * Gets current value of property {@link #getEnableSuggestions enableSuggestions}.
     *
     * If true, a `suggest` event is fired when user types in the input and when the input is focused. On a
     * phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
     *
     * Default value is `false`.
     */
    getEnableSuggestions(): boolean;
    /**
     * Gets current value of property {@link #getMaxLength maxLength}.
     *
     * Maximum number of characters. Value '0' means the feature is switched off.
     *
     * Default value is `0`.
     */
    getMaxLength(): int;
    /**
     * Returns a metadata object for class sap.m.SearchField.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Text shown when no value available. Default placeholder text is the word "Search" in the current local
     * language (if supported) or in English.
     */
    getPlaceholder(): string;
    /**
     * @SINCE 1.34
     *
     * Function returns DOM element which acts as reference point for the opening suggestion menu
     */
    getPopupAnchorDomRef(): Element;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getRefreshButtonTooltip refreshButtonTooltip}.
     *
     * Tooltip text of the refresh button. If it is not set, the Default tooltip text is the word "Refresh"
     * in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.
     */
    getRefreshButtonTooltip(): string;
    /**
     * @SINCE 1.20
     * @deprecated (since 1.38) - This parameter is deprecated and has no effect in run time. The cursor position
     * of a focused search field is restored after re-rendering automatically.
     *
     * Gets current value of property {@link #getSelectOnFocus selectOnFocus}.
     *
     * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If
     * an application re-renders the SearchField during the liveChange event, set this property to false to
     * disable text selection by focus.
     *
     * Default value is `true`.
     */
    getSelectOnFocus(): boolean;
    /**
     * @deprecated (since 1.16.0) - This parameter is deprecated. Use "showSearchButton" instead.
     *
     * Gets current value of property {@link #getShowMagnifier showMagnifier}.
     *
     * Set to false to hide the magnifier icon.
     *
     * Default value is `true`.
     */
    getShowMagnifier(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getShowRefreshButton showRefreshButton}.
     *
     * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or
     * F5 key on keyboard, the user can reload the results list without changing the search string.
     *
     * Default value is `false`.
     */
    getShowRefreshButton(): boolean;
    /**
     * @SINCE 1.23
     *
     * Gets current value of property {@link #getShowSearchButton showSearchButton}.
     *
     * Set to true to show the search button with the magnifier icon. If false, both the search and refresh
     * buttons are not displayed even if the "showRefreshButton" property is true.
     *
     * Default value is `true`.
     */
    getShowSearchButton(): boolean;
    /**
     * @SINCE 1.34
     *
     * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * `SuggestionItems` are the items which will be shown in the suggestions list. The following properties
     * can be used:
     * 	 - `key` is not displayed and may be used as internal technical field
     * 	 - `text` is displayed as normal suggestion text
     * 	 - `icon`
     * 	 - `description` - additional text may be used to visually display search item type or category
     */
    getSuggestionItems(): SuggestionItem[];
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Input Value.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Invisible inputs are not rendered.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the CSS width of the input. If not set, width is 100%.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.34
     *
     * Checks for the provided `sap.m.SuggestionItem` in the aggregation {@link #getSuggestionItems suggestionItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSuggestionItem(
      /**
       * The suggestionItem whose index is looked for
       */
      oSuggestionItem: SuggestionItem
    ): int;
    /**
     * @SINCE 1.34
     *
     * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    insertSuggestionItem(
      /**
       * The suggestionItem to insert; if empty, nothing is inserted
       */
      oSuggestionItem: SuggestionItem,
      /**
       * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.34
     *
     * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSuggestionItems(): SuggestionItem[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.34
     *
     * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
     */
    removeSuggestionItem(
      /**
       * The suggestionItem to remove or its index or id
       */
      vSuggestionItem: int | string | SuggestionItem
    ): SuggestionItem;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Boolean property to enable the control (default is true).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.34
     *
     * Sets a new value for property {@link #getEnableSuggestions enableSuggestions}.
     *
     * If true, a `suggest` event is fired when user types in the input and when the input is focused. On a
     * phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableSuggestions(
      /**
       * New value for property `enableSuggestions`
       */
      bEnableSuggestions?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxLength maxLength}.
     *
     * Maximum number of characters. Value '0' means the feature is switched off.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxLength(
      /**
       * New value for property `maxLength`
       */
      iMaxLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Text shown when no value available. Default placeholder text is the word "Search" in the current local
     * language (if supported) or in English.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getRefreshButtonTooltip refreshButtonTooltip}.
     *
     * Tooltip text of the refresh button. If it is not set, the Default tooltip text is the word "Refresh"
     * in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRefreshButtonTooltip(
      /**
       * New value for property `refreshButtonTooltip`
       */
      sRefreshButtonTooltip?: string
    ): this;
    /**
     * @SINCE 1.20
     * @deprecated (since 1.38) - This parameter is deprecated and has no effect in run time. The cursor position
     * of a focused search field is restored after re-rendering automatically.
     *
     * Sets a new value for property {@link #getSelectOnFocus selectOnFocus}.
     *
     * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If
     * an application re-renders the SearchField during the liveChange event, set this property to false to
     * disable text selection by focus.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setSelectOnFocus(
      /**
       * New value for property `selectOnFocus`
       */
      bSelectOnFocus?: boolean
    ): this;
    /**
     * @deprecated (since 1.16.0) - This parameter is deprecated. Use "showSearchButton" instead.
     *
     * Sets a new value for property {@link #getShowMagnifier showMagnifier}.
     *
     * Set to false to hide the magnifier icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowMagnifier(
      /**
       * New value for property `showMagnifier`
       */
      bShowMagnifier?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getShowRefreshButton showRefreshButton}.
     *
     * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or
     * F5 key on keyboard, the user can reload the results list without changing the search string.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowRefreshButton(
      /**
       * New value for property `showRefreshButton`
       */
      bShowRefreshButton?: boolean
    ): this;
    /**
     * @SINCE 1.23
     *
     * Sets a new value for property {@link #getShowSearchButton showSearchButton}.
     *
     * Set to true to show the search button with the magnifier icon. If false, both the search and refresh
     * buttons are not displayed even if the "showRefreshButton" property is true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowSearchButton(
      /**
       * New value for property `showSearchButton`
       */
      bShowSearchButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Input Value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Invisible inputs are not rendered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the CSS width of the input. If not set, width is 100%.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.34
     *
     * Toggle visibility of the suggestion list.
     */
    suggest(
      /**
       * If the value is `true` the suggestions are displayed. If the value is `false` the suggestions are hidden.
       * An empty suggestion list is not shown on desktop and tablet devices.
       *
       *
       * This method may be called only as a response to the `suggest` event to ensure that the suggestion list
       * is shown at the moment when the user expects it.
       */
      bShow?: boolean | undefined
    ): this;
    /**
     * Unbinds property {@link #getValue value} from model data.
     */
    unbindValue(): this;
    /**
     * @SINCE 1.77
     *
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired when the user changes the value of the search field. Unlike the `liveChange` event,
     * the `change` event is not fired for each key press.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.9.1
     *
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired each time when the value of the search field is changed by the user - e.g. at each
     * key press. Do not invalidate a focused search field, especially during the liveChange event.
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * Event which is fired when the user triggers a search.
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.34
     *
     * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.m.SearchField`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SearchField` itself.
     *
     * This event is fired when the search field is initially focused or its value is changed by the user. This
     * event means that suggestion data should be updated, in case if suggestions are used. Use the value parameter
     * to create new suggestions for it.
     */
    attachSuggest(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SearchField` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SearchFieldSettings extends $ControlSettings {
    /**
     * Input Value.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Defines the CSS width of the input. If not set, width is 100%.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Boolean property to enable the control (default is true).
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Invisible inputs are not rendered.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Maximum number of characters. Value '0' means the feature is switched off.
     */
    maxLength?: int | PropertyBindingInfo;

    /**
     * Text shown when no value available. Default placeholder text is the word "Search" in the current local
     * language (if supported) or in English.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.16.0) - This parameter is deprecated. Use "showSearchButton" instead.
     *
     * Set to false to hide the magnifier icon.
     */
    showMagnifier?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or
     * F5 key on keyboard, the user can reload the results list without changing the search string.
     */
    showRefreshButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Tooltip text of the refresh button. If it is not set, the Default tooltip text is the word "Refresh"
     * in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.
     */
    refreshButtonTooltip?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.23
     *
     * Set to true to show the search button with the magnifier icon. If false, both the search and refresh
     * buttons are not displayed even if the "showRefreshButton" property is true.
     */
    showSearchButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.34
     *
     * If true, a `suggest` event is fired when user types in the input and when the input is focused. On a
     * phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
     */
    enableSuggestions?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.20
     * @deprecated (since 1.38) - This parameter is deprecated and has no effect in run time. The cursor position
     * of a focused search field is restored after re-rendering automatically.
     *
     * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If
     * an application re-renders the SearchField during the liveChange event, set this property to false to
     * disable text selection by focus.
     */
    selectOnFocus?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.34
     *
     * `SuggestionItems` are the items which will be shown in the suggestions list. The following properties
     * can be used:
     * 	 - `key` is not displayed and may be used as internal technical field
     * 	 - `text` is displayed as normal suggestion text
     * 	 - `icon`
     * 	 - `description` - additional text may be used to visually display search item type or category
     */
    suggestionItems?:
      | SuggestionItem[]
      | SuggestionItem
      | AggregationBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Event which is fired when the user triggers a search.
     */
    search?: Function;

    /**
     * @SINCE 1.77
     *
     * This event is fired when the user changes the value of the search field. Unlike the `liveChange` event,
     * the `change` event is not fired for each key press.
     */
    change?: Function;

    /**
     * @SINCE 1.9.1
     *
     * This event is fired each time when the value of the search field is changed by the user - e.g. at each
     * key press. Do not invalidate a focused search field, especially during the liveChange event.
     */
    liveChange?: Function;

    /**
     * @SINCE 1.34
     *
     * This event is fired when the search field is initially focused or its value is changed by the user. This
     * event means that suggestion data should be updated, in case if suggestions are used. Use the value parameter
     * to create new suggestions for it.
     */
    suggest?: Function;
  }
}

declare module "sap/m/SegmentedButton" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    URI,
    TextDirection,
    CSSSize,
  } from "sap/ui/core/library";

  import { IOverflowToolbarContent } from "sap/m/library";

  import Button from "sap/m/Button";

  import SegmentedButtonItem from "sap/m/SegmentedButtonItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * A horizontal control made of multiple buttons, which can display a title or an image.
   *
   * Overview:
   *
   * The `SegmentedButton` shows a group of buttons. When the user clicks or taps one of the buttons, it stays
   * in a pressed state. It automatically resizes the buttons to fit proportionally within the control. When
   * no width is set, the control uses the available width.
   */
  export default class SegmentedButton
    extends Control
    implements IFormContent, IOverflowToolbarContent {
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new `SegmentedButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Segmented Button}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonSettings
    );
    /**
     * Constructor for a new `SegmentedButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Segmented Button}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Adds some button to the aggregation {@link #getButtons buttons}.
     */
    addButton(
      /**
       * The button to add; if empty, nothing is inserted
       */
      oButton: Button
    ): this;
    /**
     * Adds item to `items` aggregation.
     */
    addItem(
      /**
       * The item to be added
       */
      oItem: SegmentedButtonItem
    ): this;
    /**
     * @deprecated (since 1.52) - replaced by `selectionChange` event
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButton` itself.
     *
     * Fires when the user selects a button, which returns the ID and button object.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButton` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.52
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButton` itself.
     *
     * Fires when the user selects an item, which returns the item object.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButton` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.28
     *
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Binds property {@link #getSelectedKey selectedKey} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindSelectedKey(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Adds a Button with a text as title, a URI for an icon, enabled and textDirection. Only one is allowed.
     */
    createButton(
      /**
       * Defines the title text of the newly created Button
       */
      sText: string,
      /**
       * Icon to be displayed as graphical element within the Button. Density related image will be loaded if
       * image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
       */
      sURI: URI,
      /**
       * Enables the control. Buttons that are disabled have other colors than enabled ones, depending on custom
       * settings.
       */
      bEnabled?: boolean,
      /**
       * Element's text directionality with enumerated options
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): Button;
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
     */
    destroyButtons(): this;
    /**
     * @SINCE 1.28
     *
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * @deprecated (since 1.52) - replaced by `selectionChange` event
     *
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.SegmentedButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.52
     *
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.SegmentedButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SegmentedButton with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SegmentedButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.52) - replaced by `selectionChange` event
     *
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Reference to the button, that has been selected.
         */
        button?: Button;
        /**
         * ID of the button, which has been selected.
         */
        id?: string;
        /**
         * Key of the button, which has been selected. This property is only filled when the control is initiated
         * with the items aggregation.
         */
        key?: string;
      }
    ): this;
    /**
     * @SINCE 1.52
     *
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Reference to the item, that has been selected.
         */
        item?: SegmentedButtonItem;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Gets content of aggregation {@link #getButtons buttons}.
     *
     * The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface
     * for the buttons displayed by the control. Only the properties ID, icon, text, enabled and textDirections
     * of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively,
     * you can use the createButton method to add buttons.
     */
    getButtons(): Button[];
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and
     * you cannot focus or click on them.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * `SegmentedButton` must not be stretched in Form because ResizeHandler is used internally in order to
     * manage the width of the SegmentedButton depending on the container size
     */
    getFormDoNotAdjustWidth(): boolean;
    /**
     * @SINCE 1.28
     *
     * Gets content of aggregation {@link #getItems items}.
     *
     * Aggregation of items to be displayed. The items set in this aggregation are used as an interface for
     * the buttons displayed by the control. The "items" and "buttons" aggregations should NOT be used simultaneously
     * as it causes the control to work incorrectly. Note: If `width` is supplied in percetange to `SegmentedButtonItem`
     * instances and the sum of all percentages exeeds 100%, then the buttons display could overlap other elements
     * in the page.
     */
    getItems(): SegmentedButtonItem[];
    /**
     * Returns a metadata object for class sap.m.SegmentedButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.52) - replaced by `selectedItem` association
     *
     * ID of the element which is the current target of the association {@link #getSelectedButton selectedButton},
     * or `null`.
     */
    getSelectedButton(): ID;
    /**
     * @SINCE 1.52
     *
     * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem},
     * or `null`.
     */
    getSelectedItem(): ID;
    /**
     * @SINCE 1.28
     *
     * Gets the `selectedKey` and is usable only when the control is initiated with the `items` aggregation.
     */
    getSelectedKey(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make
     * all buttons inside of the same size (based on the biggest button).
     */
    getWidth(): CSSSize;
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getButtons buttons}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfButton(
      /**
       * The button whose index is looked for
       */
      oButton: Button
    ): int;
    /**
     * @SINCE 1.28
     *
     * Checks for the provided `sap.m.SegmentedButtonItem` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: SegmentedButtonItem
    ): int;
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Inserts a button into the aggregation {@link #getButtons buttons}.
     */
    insertButton(
      /**
       * The button to insert; if empty, nothing is inserted
       */
      oButton: Button,
      /**
       * The `0`-based index the button should be inserted at; for a negative value of `iIndex`, the button is
       * inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts item into `items` aggregation.
     */
    insertItem(
      /**
       * The item to be inserted
       */
      oItem: SegmentedButtonItem,
      /**
       * index the item should be inserted at
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Removes all the controls from the aggregation {@link #getButtons buttons}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllButtons(): Button[];
    /**
     * Removes all items from `items` aggregation
     */
    removeAllItems(
      /**
       * If `true` the control invalidation will be suppressed
       */
      bSuppressInvalidate?: boolean
    ): void;
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * Removes a button from the aggregation {@link #getButtons buttons}.
     */
    removeButton(
      /**
       * The button to remove or its index or id
       */
      vButton: int | string | Button
    ): Button;
    /**
     * Removes an item from `items` aggregation.
     */
    removeItem(
      /**
       * The item to be removed
       */
      oItem: SegmentedButtonItem
    ): void;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and
     * you cannot focus or click on them.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Setter for association `selectedButton`.
     */
    setSelectedButton(
      /**
       * New value for association `setSelectedButton` An sap.m.Button instance which becomes the new target of
       * this `selectedButton` association. Alternatively, the ID of an sap.m.Button instance may be given as
       * a string. If the value of null, undefined, or an empty string is provided the first item will be selected.
       */
      vButton: string | Button | null | undefined
    ): this;
    /**
     * Setter for association `selectedItem`.
     */
    setSelectedItem(
      /**
       * New value for association `setSelectedItem` An sap.m.SegmentedButtonItem instance which becomes the new
       * target of this `selectedItem` association. Alternatively, the ID of an `sap.m.SegmentedButtonItem` instance
       * may be given as a string. If the value of null, undefined, or an empty string is provided, the first
       * item will be selected.
       */
      vItem: string | SegmentedButtonItem | null | undefined
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets the `selectedKey` and is usable only when the control is initiated with the `items` aggregation.
     */
    setSelectedKey(
      /**
       * The key of the button to be selected
       */
      sKey: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make
     * all buttons inside of the same size (based on the biggest button).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.28
     *
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.28.0
     *
     * Unbinds property {@link #getSelectedKey selectedKey} from model data.
     */
    unbindSelectedKey(): this;
    /**
     * @deprecated (since 1.52) - replaced by `selectionChange` event
     *
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButton` itself.
     *
     * Fires when the user selects a button, which returns the ID and button object.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButton` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.52
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.SegmentedButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButton` itself.
     *
     * Fires when the user selects an item, which returns the item object.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SegmentedButtonSettings extends $ControlSettings {
    /**
     * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make
     * all buttons inside of the same size (based on the biggest button).
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and
     * you cannot focus or click on them.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Key of the selected item. If no item to this key is found in the items aggregation, no changes will apply.
     * Only the items aggregation is affected. If duplicate keys exist, the first item matching the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.28.0) - replaced by `items` aggregation
     *
     * The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface
     * for the buttons displayed by the control. Only the properties ID, icon, text, enabled and textDirections
     * of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively,
     * you can use the createButton method to add buttons.
     */
    buttons?: Button[] | Button | AggregationBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Aggregation of items to be displayed. The items set in this aggregation are used as an interface for
     * the buttons displayed by the control. The "items" and "buttons" aggregations should NOT be used simultaneously
     * as it causes the control to work incorrectly. Note: If `width` is supplied in percetange to `SegmentedButtonItem`
     * instances and the sum of all percentages exeeds 100%, then the buttons display could overlap other elements
     * in the page.
     */
    items?:
      | SegmentedButtonItem[]
      | SegmentedButtonItem
      | AggregationBindingInfo;

    /**
     * @deprecated (since 1.52) - replaced by `selectedItem` association
     *
     * A reference to the currently selected button control. By default or if the association is set to false
     * (null, undefined, "", false), the first button will be selected. If the association is set to an invalid
     * value (for example, an ID of a button that does not exist) the selection on the SegmentedButton will
     * be removed.
     */
    selectedButton?: Button | string;

    /**
     * @SINCE 1.52
     *
     * A reference to the currently selected item control.
     */
    selectedItem?: SegmentedButtonItem | string;

    /**
     * Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / IDs, which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.52) - replaced by `selectionChange` event
     *
     * Fires when the user selects a button, which returns the ID and button object.
     */
    select?: Function;

    /**
     * @SINCE 1.52
     *
     * Fires when the user selects an item, which returns the item object.
     */
    selectionChange?: Function;
  }
}

declare module "sap/m/SegmentedButtonItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.28
   *
   * Used for creating buttons for the {@link sap.m.SegmentedButton}. It is derived from the {@link sap.ui.core.Item}.
   */
  export default class SegmentedButtonItem extends Item {
    /**
     * Constructor for a new `SegmentedButtonItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonItemSettings
    );
    /**
     * Constructor for a new `SegmentedButtonItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SegmentedButtonItemSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.SegmentedButtonItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButtonItem` itself.
     *
     * Fires when the user clicks on an individual button.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButtonItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.SegmentedButtonItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Cleanup
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.SegmentedButtonItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SegmentedButtonItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon, which belongs to the button. This can be a URI to an image or an icon font URI.
     */
    getIcon(): string;
    /**
     * Returns a metadata object for class sap.m.SegmentedButtonItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real button.
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the buttons.
     */
    getWidth(): CSSSize;
    /**
     * Called once during the element's initialization
     */
    init(): void;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon, which belongs to the button. This can be a URI to an image or an icon font URI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the buttons.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.SegmentedButtonItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SegmentedButtonItem` itself.
     *
     * Fires when the user clicks on an individual button.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SegmentedButtonItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SegmentedButtonItemSettings extends $ItemSettings {
    /**
     * The icon, which belongs to the button. This can be a URI to an image or an icon font URI.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead
     * of the real button.
     */
    visible?: boolean | PropertyBindingInfo;

    /**
     * Sets the width of the buttons.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Fires when the user clicks on an individual button.
     */
    press?: Function;
  }
}

declare module "sap/m/Select" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    URI,
    CSSSize,
    TextAlign,
    TextDirection,
    ValueState,
  } from "sap/ui/core/library";

  import {
    IOverflowToolbarContent,
    SelectColumnRatio,
    SelectType,
  } from "sap/m/library";

  import { IShellBar } from "sap/f/library";

  import Item from "sap/ui/core/Item";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * The `sap.m.Select` control provides a list of items that allows users to select an item.
   */
  export default class Select
    extends Control
    implements IFormContent, IOverflowToolbarContent, IShellBar {
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_m_IOverflowToolbarContent: boolean;
    __implements__sap_f_IShellBar: boolean;
    /**
     * Constructor for a new `sap.m.Select`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/select/ Select}
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $SelectSettings
    );
    /**
     * Constructor for a new `sap.m.Select`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/select/ Select}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $SelectSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds an item to the aggregation named `items`.
     */
    addItem(
      /**
       * The item to be added; if empty, nothing is added.
       */
      oItem: Item
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Select`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Select` itself.
     *
     * This event is fired when the value in the selection field is changed in combination with one of the following
     * actions:
     * 	 - The focus leaves the selection field
     * 	 - The Enter key is pressed
     * 	 - The item is pressed
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Select` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.16
     *
     * Closes the control's picker popup.
     */
    close(): this;
    /**
     * Creates a picker popup container where the selection should take place.
     */
    createPicker(
      /**
       * The picker type
       */
      sPickerType: string
    ): Control;
    /**
     * Destroys all the items in the aggregation named `items`.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.Select`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Select with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Select>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item.
         */
        selectedItem?: Item;
      }
    ): this;
    /**
     * Returns the `sap.m.Select` accessibility information.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getAutoAdjustWidth autoAdjustWidth}.
     *
     * Indicates whether the width of the input field is determined by the selected item's content.
     *
     * Default value is `false`.
     */
    getAutoAdjustWidth(): boolean;
    /**
     * @SINCE 1.86
     * @EXPERIMENTAL (since 1.86)
     *
     * Gets current value of property {@link #getColumnRatio columnRatio}.
     *
     * Determines the ratio between the first and the second column when secondary values are displayed.
     *
     * **Note:** This property takes effect only when the `showSecondaryValues` property is set to `true`.
     *
     * Default value is `"3:2"`.
     */
    getColumnRatio(): SelectColumnRatio;
    /**
     * @SINCE 1.66.0
     *
     * Gets current value of property {@link #getEditable editable}.
     *
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled but CAN still be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled and CANNOT be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * @SINCE 1.22.0
     *
     * Gets the enabled items from the aggregation named `items`.
     */
    getEnabledItems(
      /**
       * Items to filter.
       */
      aItems?: Item[]
    ): Item[];
    /**
     * @SINCE 1.16
     *
     * Gets the first item from the aggregation named `items`.
     */
    getFirstItem(): Item | null;
    /**
     * Returns the DOM Element that should get the focus.
     */
    getFocusDomRef(): Element;
    /**
     * @SINCE 1.34
     *
     * Gets current value of property {@link #getForceSelection forceSelection}.
     *
     * Indicates whether the selection is restricted to one of the items in the list. **Note:** We strongly
     * recommend that you always set this property to `false` and bind the `selectedKey` property to the desired
     * value for better interoperability with data binding.
     *
     * Default value is `true`.
     */
    getForceSelection(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getIcon icon}.
     *
     * The URI to the icon that will be displayed only when using the `IconOnly` type.
     *
     * Default value is `empty string`.
     */
    getIcon(): URI;
    /**
     * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
     *
     * By default, this is the Id of the control itself.
     */
    getIdForLabel(): string;
    /**
     * @SINCE 1.16
     *
     * Gets the item from the aggregation named `items` at the given 0-based index.
     */
    getItemAt(
      /**
       * Index of the item to return.
       */
      iIndex: int
    ): Item | null;
    /**
     * @SINCE 1.16
     *
     * Gets the item with the given key from the aggregation named `items`.
     *
     * **Note: ** If duplicate keys exist, the first item matching the key is returned.
     */
    getItemByKey(
      /**
       * An item key that specifies the item to be retrieved.
       */
      sKey: string
    ): Item;
    /**
     * Gets aggregation `items`.
     *
     * **Note**: This is the default aggregation.
     */
    getItems(): Item[];
    /**
     * @SINCE 1.16
     *
     * Gets the last item from the aggregation named `items`.
     */
    getLastItem(): Item | null;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the control.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     *
     * Default value is `"100%"`.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.Select.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Enables the `sap.m.Select` to move inside the sap.m.OverflowToolbar. Required by the {@link sap.m.IOverflowToolbarContent}
     * interface.
     */
    getOverflowToolbarConfig(): object;
    /**
     * @SINCE 1.74
     *
     * Gets current value of property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * @SINCE 1.77
     *
     * Gets current value of property {@link #getResetOnMissingKey resetOnMissingKey}.
     *
     * Modifies the behavior of the `setSelectedKey` method so that the selected item is cleared when a provided
     * selected key is missing.
     *
     * Default value is `false`.
     */
    getResetOnMissingKey(): boolean;
    /**
     * Gets the selected item object from the aggregation named `items`.
     */
    getSelectedItem(): Item | null;
    /**
     * @SINCE 1.12
     *
     * Gets current value of property {@link #getSelectedItemId selectedItemId}.
     *
     * ID of the selected item.
     *
     * Default value is `empty string`.
     */
    getSelectedItemId(): string;
    /**
     * @SINCE 1.11
     *
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Key of the selected item.
     *
     * **Notes:**
     * 	 -  If duplicate keys exist, the first item matching the key is used.
     * 	 -  If invalid or none `selectedKey` is used, the first item is being selected.
     * 	 -  Invalid or missing `selectedKey` leads to severe functional issues in `sap.ui.table.Table`, when
     * 			the `sap.m.Select` is used inside a `sap.ui.table.Table` column.
     *
     * Default value is `empty string`.
     */
    getSelectedKey(): string;
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * Default value is `false`.
     */
    getShowSecondaryValues(): boolean;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text within the input field.
     *
     * Default value is `Initial`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.28
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Specifies the direction of the text within the input field with enumerated options. By default, the control
     * inherits text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.16
     *
     * Gets current value of property {@link #getType type}.
     *
     * Type of a select. Possible values `Default`, `IconOnly`.
     *
     * Default value is `Default`.
     */
    getType(): SelectType | keyof typeof SelectType;
    /**
     * @SINCE 1.40.2
     *
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`, `Information`.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.40.5
     *
     * Gets current value of property {@link #getValueStateText valueStateText}.
     *
     * Defines the text of the value state message popup. If this is not specified, a default text is shown
     * from the resource bundle.
     *
     * Default value is `empty string`.
     */
    getValueStateText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the field. By default, the field width is automatically adjusted to the size of its
     * content and the default width of the field is calculated based on the widest list item in the dropdown
     * list. If the width defined is smaller than its content, only the field width is changed whereas the dropdown
     * list keeps the width of its content. If the dropdown list is wider than the visual viewport, it is truncated
     * and an ellipsis is displayed for each item. For phones, the width of the dropdown list is always the
     * same as the viewport.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     *
     * Default value is `"auto"`.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.69
     *
     * Gets current value of property {@link #getWrapItemsText wrapItemsText}.
     *
     * Determines whether the text in the items wraps on multiple lines when the available width is not enough.
     * When the text is truncated (`wrapItemsText` property is set to `false`), the max width of the `SelectList`
     * is 600px. When `wrapItemsText` is set to `true`, `SelectList` takes all of the available width.
     *
     * Default value is `false`.
     */
    getWrapItemsText(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Item
    ): int;
    /**
     * Inserts an item into the aggregation named `items`.
     */
    insertItem(
      /**
       * The item to be inserted; if empty, nothing is inserted.
       */
      oItem: Item,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position.
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Indicates whether the control's picker popup is opened.
     */
    isOpen(): boolean;
    /**
     * @SINCE 1.16
     *
     * Open the control's picker popup.
     */
    open(): this;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the items in the aggregation named `items`. Additionally unregisters them from the hosting
     * UIArea.
     */
    removeAllItems(): Item[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes an item from the aggregation named `items`.
     */
    removeItem(
      /**
       * The item to be removed or its index or ID.
       */
      vItem: int | string | Item
    ): Item;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getAutoAdjustWidth autoAdjustWidth}.
     *
     * Indicates whether the width of the input field is determined by the selected item's content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAutoAdjustWidth(
      /**
       * New value for property `autoAdjustWidth`
       */
      bAutoAdjustWidth?: boolean
    ): this;
    /**
     * @SINCE 1.86
     * @EXPERIMENTAL (since 1.86)
     *
     * Sets a new value for property {@link #getColumnRatio columnRatio}.
     *
     * Determines the ratio between the first and the second column when secondary values are displayed.
     *
     * **Note:** This property takes effect only when the `showSecondaryValues` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"3:2"`.
     */
    setColumnRatio(
      /**
       * New value for property `columnRatio`
       */
      sColumnRatio?: SelectColumnRatio
    ): this;
    /**
     * @SINCE 1.66.0
     *
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled but CAN still be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled and CANNOT be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.34
     *
     * Sets a new value for property {@link #getForceSelection forceSelection}.
     *
     * Indicates whether the selection is restricted to one of the items in the list. **Note:** We strongly
     * recommend that you always set this property to `false` and bind the `selectedKey` property to the desired
     * value for better interoperability with data binding.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setForceSelection(
      /**
       * New value for property `forceSelection`
       */
      bForceSelection?: boolean
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The URI to the icon that will be displayed only when using the `IconOnly` type.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the control.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      sMaxWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * @SINCE 1.74
     *
     * Sets a new value for property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * @SINCE 1.77
     *
     * Sets a new value for property {@link #getResetOnMissingKey resetOnMissingKey}.
     *
     * Modifies the behavior of the `setSelectedKey` method so that the selected item is cleared when a provided
     * selected key is missing.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setResetOnMissingKey(
      /**
       * New value for property `resetOnMissingKey`
       */
      bResetOnMissingKey?: boolean
    ): this;
    /**
     * Sets the `selectedItem` association.
     *
     * Default value is `null`.
     */
    setSelectedItem(
      /**
       * New value for the `selectedItem` association. If an ID of a `sap.ui.core.Item` is given, the item with
       * this ID becomes the `selectedItem` association. Alternatively, a `sap.ui.core.Item` instance may be given
       * or `null`. If the value of `null` is provided, the first enabled item will be selected (if any items
       * exist).
       */
      vItem: string | Item | null
    ): this;
    /**
     * @SINCE 1.12
     *
     * Sets the `selectedItemId` property.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedItemId(
      /**
       * New value for property `selectedItemId`. If the provided `vItem` has a default value, the first enabled
       * item will be selected (if any items exist).
       */
      vItem?: string | undefined
    ): this;
    /**
     * @SINCE 1.11
     *
     * Sets property `selectedKey`.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`. If the `forceSelection` property is set to `true` and the provided
       * `sKey` is an empty string `""` or `undefined`, the value of `sKey` is changed to match the `key` of the
       * first enabled item and the first enabled item is selected (if any items exist).
       *
       * In the case that an item has the default key value, it is selected instead. If duplicate keys exist,
       * the first item matching the key is selected.
       */
      sKey: string
    ): this;
    /**
     * @SINCE 1.40
     *
     * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSecondaryValues(
      /**
       * New value for property `showSecondaryValues`
       */
      bShowSecondaryValues?: boolean
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text within the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Initial`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * @SINCE 1.28
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Specifies the direction of the text within the input field with enumerated options. By default, the control
     * inherits text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.16
     *
     * Sets a new value for property {@link #getType type}.
     *
     * Type of a select. Possible values `Default`, `IconOnly`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: SelectType | keyof typeof SelectType
    ): this;
    /**
     * @SINCE 1.40.2
     *
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`, `Information`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.40.5
     *
     * Sets a new value for property {@link #getValueStateText valueStateText}.
     *
     * Defines the text of the value state message popup. If this is not specified, a default text is shown
     * from the resource bundle.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setValueStateText(
      /**
       * New value for property `valueStateText`
       */
      sValueStateText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the field. By default, the field width is automatically adjusted to the size of its
     * content and the default width of the field is calculated based on the widest list item in the dropdown
     * list. If the width defined is smaller than its content, only the field width is changed whereas the dropdown
     * list keeps the width of its content. If the dropdown list is wider than the visual viewport, it is truncated
     * and an ellipsis is displayed for each item. For phones, the width of the dropdown list is always the
     * same as the viewport.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"auto"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.69
     *
     * Sets the `wrapItemsText` property.
     */
    setWrapItemsText(bWrap: boolean): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Select`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Select` itself.
     *
     * This event is fired when the value in the selection field is changed in combination with one of the following
     * actions:
     * 	 - The focus leaves the selection field
     * 	 - The Enter key is pressed
     * 	 - The item is pressed
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Select` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SelectSettings extends $ControlSettings {
    /**
     * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
     */
    name?: string | PropertyBindingInfo;

    /**
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled and CANNOT be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.66.0
     *
     * Determines whether the user can modify the selected item. When the property is set to `false`, the control
     * appears as disabled but CAN still be focused.
     *
     * **Note:** When both `enabled` and `editable` properties are set to `false`, `enabled` has priority over
     * `editable`.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Sets the width of the field. By default, the field width is automatically adjusted to the size of its
     * content and the default width of the field is calculated based on the widest list item in the dropdown
     * list. If the width defined is smaller than its content, only the field width is changed whereas the dropdown
     * list keeps the width of its content. If the dropdown list is wider than the visual viewport, it is truncated
     * and an ellipsis is displayed for each item. For phones, the width of the dropdown list is always the
     * same as the viewport.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Sets the maximum width of the control.
     *
     * **Note:** This property is ignored if the `autoAdjustWidth` property is set to `true`.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.11
     *
     * Key of the selected item.
     *
     * **Notes:**
     * 	 -  If duplicate keys exist, the first item matching the key is used.
     * 	 -  If invalid or none `selectedKey` is used, the first item is being selected.
     * 	 -  Invalid or missing `selectedKey` leads to severe functional issues in `sap.ui.table.Table`, when
     * 			the `sap.m.Select` is used inside a `sap.ui.table.Table` column.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.12
     *
     * ID of the selected item.
     */
    selectedItemId?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * The URI to the icon that will be displayed only when using the `IconOnly` type.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Type of a select. Possible values `Default`, `IconOnly`.
     */
    type?: (SelectType | keyof typeof SelectType) | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * Indicates whether the width of the input field is determined by the selected item's content.
     */
    autoAdjustWidth?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Sets the horizontal alignment of the text within the input field.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.28
     *
     * Specifies the direction of the text within the input field with enumerated options. By default, the control
     * inherits text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.40.2
     *
     * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`, `Information`.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.40.5
     *
     * Defines the text of the value state message popup. If this is not specified, a default text is shown
     * from the resource bundle.
     */
    valueStateText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     */
    showSecondaryValues?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.77
     *
     * Modifies the behavior of the `setSelectedKey` method so that the selected item is cleared when a provided
     * selected key is missing.
     */
    resetOnMissingKey?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.34
     *
     * Indicates whether the selection is restricted to one of the items in the list. **Note:** We strongly
     * recommend that you always set this property to `false` and bind the `selectedKey` property to the desired
     * value for better interoperability with data binding.
     */
    forceSelection?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.69
     *
     * Determines whether the text in the items wraps on multiple lines when the available width is not enough.
     * When the text is truncated (`wrapItemsText` property is set to `false`), the max width of the `SelectList`
     * is 600px. When `wrapItemsText` is set to `true`, `SelectList` takes all of the available width.
     */
    wrapItemsText?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.86
     * @EXPERIMENTAL (since 1.86)
     *
     * Determines the ratio between the first and the second column when secondary values are displayed.
     *
     * **Note:** This property takes effect only when the `showSecondaryValues` property is set to `true`.
     */
    columnRatio?: SelectColumnRatio | PropertyBindingInfo;

    /**
     * @SINCE 1.74
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the items contained within this control.
     *
     * **Note:** For items with icons you can use {@link sap.ui.core.ListItem}.
     *
     * Example:
     *
     *
     * ```javascript
     *
     * ` <ListItem text="Paper plane" icon="sap-icon://paper-plane"></ListItem> `
     * ```
     */
    items?: Item[] | Item | AggregationBindingInfo;

    /**
     * Sets or retrieves the selected item from the aggregation named items.
     */
    selectedItem?: Item | string;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / IDs which label this control (see WAI-ARIA attribute `aria-labelledby`).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when the value in the selection field is changed in combination with one of the following
     * actions:
     * 	 - The focus leaves the selection field
     * 	 - The Enter key is pressed
     * 	 - The item is pressed
     */
    change?: Function;
  }
}

declare module "sap/m/SelectDialog" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ListItemBase from "sap/m/ListItemBase";

  import StandardListItem from "sap/m/StandardListItem";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TitleAlignment } from "sap/m/library";

  import Context from "sap/ui/model/Context";

  import Model from "sap/ui/model/Model";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Overview: A SelectDialog is a dialog containing a list, search functionality to filter it and a confirmation/cancel
   * button. The list used in the dialog is a growing list and can be filled with any kind of list item. Structure:
   * Dialog structure: The select dialog has the following components:
   * 	 - Header - title of the dialog
   * 	 - Search field - input field to enter search terms
   * 	 - Info toolbar (only in multi-select) - displays the number of currently selected items
   * 	 - Content - {@link sap.m.StandardListItem standard list items}, {@link sap.m.DisplayListItem display
   * 			list items} or {@link sap.m.FeedListItem feed list items}
   * 	 - Button toolbar - for confirmation/cancellation buttons   List structure & selection:
   * 	 -  The search field triggers the events `search` and `liveChange` where a filter function can be applied
   * 			to the list binding.
   * 	 -  The growing functionality of the list does not support two-way Binding, so if you use this control
   * 			with a JSON model make sure the binding mode is set to `OneWay` and that you update the selection model
   * 			manually with the items passed in the `confirm` event.
   * 	 -  In the multi-select mode of the select dialog, checkboxes are provided for choosing multiple entries.
   *
   * 	 -  You can set `rememberSelections` to `true` to store the current selection and load this state when
   * 			the dialog is opened again.
   * 	 -  When cancelling the selection, the event `change` will be fired and the selection is restored to
   * 			the state when the dialog was opened.
   * 	 - The SelectDialog is usually displayed at the center of the screen. Its size and position can be changed
   * 			by the user. To enable this you need to set the `resizable` and `draggable` properties. Both properties
   * 			are available only in desktop mode.  Usage: When to use::
   * 	 - You need to select one or more entries from a comprehensive list that contains multiple attributes
   * 			or values.   When not to use::
   * 	 -  You need to pick one item from a predefined set of options. Use {@link sap.m.Select select} or {@link
   * 			sap.m.ComboBox combobox} instead.
   * 	 -  You need to select a range of item. Use {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog value
   * 			help dialog} instead.
   * 	 -  You need to be able to add your own values to an existing list. Use a {@link sap.m.Dialog dialog}
   * 			instead.   Note:: The property `growing` determines the progressive loading. If it's set to `true`
   * 			(the default value), the selected count (if present) and search, will work for currently loaded items
   * 			only. To make sure that all items in the list are loaded at once and the above features works properly,
   * 			we recommend setting the `growing` property to `false`. Responsive Behavior:
   * 	 -  On phones, the select dialog takes up the whole screen.
   * 	 -  On desktop and tablet devices, the select dialog appears as a popover.   When using the `sap.m.SelectDialog`
   * 			in SAP Quartz themes, the breakpoints and layout paddings could be determined by the dialog's width.
   * 			To enable this concept and add responsive paddings to an element of the control, you have to add the
   * 			following classes depending on your use case: `sapUiResponsivePadding--header`, `sapUiResponsivePadding--subHeader`,
   * 			`sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`.
   */
  export default class SelectDialog extends Control {
    /**
     * Constructor for a new SelectDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/select-dialog/ Select Dialog}
     */
    constructor(
      /**
       * Initial settings for the new control A dialog that enables users to select one or more items from a comprehensive
       * list.
       */
      mSettings?: $SelectDialogSettings
    );
    /**
     * Constructor for a new SelectDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/select-dialog/ Select Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control A dialog that enables users to select one or more items from a comprehensive
       * list.
       */
      mSettings?: $SelectDialogSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ListItemBase
    ): this;
    /**
     * Forward method to the inner dialog: addStyleClass
     */
    addStyleClass(
      /**
       * CSS class name to add
       */
      sStyleClass: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the cancel button is clicked or ESC key is pressed
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or
     * by pressing the confirmation button in multi selection mode . The items being selected are returned as
     * event parameters.
     */
    attachConfirm(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the search button has been clicked on the searchfield on the visual control
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.68
     *
     * Clears the selections in the `sap.m.SelectDialog` and its internally used `sap.m.List` control.
     *
     * Use this method whenever the application logic expects changes in the model providing data for the SelectDialog
     * that will modify the position of the items, or will change the set with completely new items.
     */
    clearSelection(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.m.SelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:confirm confirm} event of this `sap.m.SelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachConfirm(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.SelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.m.SelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SelectDialog with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:confirm confirm} to attached listeners.
     */
    fireConfirm(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is
         * enabled and multiple items are selected, only the first selected item is returned.
         */
        selectedItem?: StandardListItem;
        /**
         * Returns an array containing the visible selected list items. If no items are selected, an empty array
         * is returned.
         */
        selectedItems?: StandardListItem[];
        /**
         * Returns the binding contexts of the selected items including the non-visible items, but excluding the
         * not loaded items. See {@link sap.m.ListBase#getSelectedContexts getSelectedContexts} of `sap.m.ListBase`.
         * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but
         * NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no data
         * binding is used. NOTE: When the list binding is pre-filtered and there are items in the selection that
         * are not visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not
         * be included in the selectedContexts array unless they are displayed at least once.
         */
        selectedContexts?: object[];
      }
    ): this;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The value to search for, which can change at any keypress
         */
        value?: string;
        /**
         * The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to
         * a model.
         */
        itemsBinding?: any;
      }
    ): this;
    /**
     * Fires event {@link #event:search search} to attached listeners.
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The value entered in the search
         */
        value?: string;
        /**
         * The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation
         * is bound to a model.
         */
        itemsBinding?: any;
        /**
         * Returns if the Clear button is pressed.
         */
        clearButtonPressed?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.68
     *
     * Gets current value of property {@link #getConfirmButtonText confirmButtonText}.
     *
     * Overwrites the default text for the confirmation button.
     */
    getConfirmButtonText(): string;
    /**
     * Get the internal Dialog's contentHeight property {@link sap.m.Dialog}
     */
    getContentHeight(): CSSSize;
    /**
     * Get the internal Dialog's contentWidth property {@link sap.m.Dialog}
     */
    getContentWidth(): CSSSize;
    /**
     * Forward method to the inner dialog: getDomRef
     */
    getDomRef(): Element;
    /**
     * @SINCE 1.70
     *
     * Gets current value of property {@link #getDraggable draggable}.
     *
     * When set to `true`, the SelectDialog is draggable by its header. The default value is `false`. **Note**:
     * The SelectDialog can be draggable only in desktop mode.
     *
     * Default value is `false`.
     */
    getDraggable(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getGrowing growing}.
     *
     * If set to `true`, enables the growing feature of the control to load more items by requesting from the
     * bound model (progressive loading). **Note:** This feature only works when an `items` aggregation is bound.
     * **Note:** Growing property, must not be used together with two-way binding. **Note:** If the property
     * is set to `true`, selected count (if present) and search, will work for currently loaded items only.
     * To make sure that all items in the table are loaded at once and the above features work properly, we
     * recommend setting the `growing` property to false.
     *
     * Default value is `true`.
     */
    getGrowing(): boolean;
    /**
     * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
     *
     * Determines the number of items initially displayed in the list. Also defines the number of items to be
     * requested from the model for each grow. **Note:** This property could take affect only be used if the
     * property `growing` is set to `true`.
     */
    getGrowingThreshold(): int;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the
     * dialog but other combinations are also possible.
     */
    getItems(): ListItemBase[];
    /**
     * Returns a metadata object for class sap.m.SelectDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMultiSelect multiSelect}.
     *
     * Determines if the user can select several options from the list
     *
     * Default value is `false`.
     */
    getMultiSelect(): boolean;
    /**
     * Get the internal List's no data text property
     */
    getNoDataText(): string;
    /**
     * @SINCE 1.18
     *
     * Gets current value of property {@link #getRememberSelections rememberSelections}.
     *
     * This flag controls whether the dialog clears the selection after the confirm event has been fired. If
     * the dialog needs to be opened multiple times in the same context to allow for corrections of previous
     * user inputs, set this flag to `true`.
     *
     * **Note:** The sap.m.SelectDialog uses {@link sap.m.ListBase#rememberSelections this} property of the
     * ListBase and therefore its limitations also apply here.
     *
     * Default value is `false`.
     */
    getRememberSelections(): boolean;
    /**
     * @SINCE 1.70
     *
     * Gets current value of property {@link #getResizable resizable}.
     *
     * When set to `true`, the SelectDialog will have a resize handler in its bottom right corner. The default
     * value is `false`. **Note**: The SelectDialog can be resizable only in desktop mode.
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * @SINCE 1.58
     *
     * Gets current value of property {@link #getShowClearButton showClearButton}.
     *
     * This flag controls whether the Clear button is shown. When set to `true`, it provides a way to clear
     * selection mode in Select Dialog. We recommended enabling of the Clear button in the following cases,
     * where a mechanism to clear the value is needed: In case of single selection mode(default mode) for Select
     * Dialog and `rememberSelections` is set to `true`. Clear button needs to be enabled in order to allow
     * users to clear the selection. In case of using `sap.m.Input` with `valueHelpOnly` set to `true`, the
     * Clear button could be used for clearing selection. In case the application stores a value and uses only
     * Select Dialog to edit/maintain it. **Note:**When used with oData, only the loaded selections will be
     * cleared.
     *
     * Default value is `false`.
     */
    getShowClearButton(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title text that appears in the dialog header
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Forward method to the inner dialog: hasStyleClass
     */
    hasStyleClass(): boolean;
    /**
     * Checks for the provided `sap.m.ListItemBase` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ListItemBase
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ListItemBase,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Invalidates the dialog instead of this control (we don't have a renderer)
     */
    invalidate(): this;
    /**
     * Is called after renderer is finished to show the busy state
     */
    onAfterRendering(): this;
    /**
     * Opens the internal dialog with a searchfield and a list.
     */
    open(
      /**
       * A value for the search can be passed to match with the filter applied to the list binding.
       */
      sSearchValue: string
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ListItemBase[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ListItemBase
    ): ListItemBase;
    /**
     * Forward method to the inner dialog: removeStyleClass
     */
    removeStyleClass(
      /**
       * CSS class name to remove
       */
      sStyleClass: string
    ): this;
    /**
     * Set the binding context for the internal list AND the current control so that both controls can be used
     * with the context
     */
    setBindingContext(
      /**
       * The new context
       */
      oContext: Context,
      /**
       * The optional model name
       */
      sModelName: string
    ): this;
    /**
     * Sets the busyIndicatorDelay value to the internal list
     */
    setBusyIndicatorDelay(
      /**
       * Value for the busyIndicatorDelay.
       */
      iValue: int
    ): this;
    /**
     * Sets the text of the confirmation button.
     */
    setConfirmButtonText(
      /**
       * The text for the confirm button
       */
      sText: string
    ): this;
    /**
     * Set the internal Dialog's contentHeight property {@link sap.m.Dialog}
     */
    setContentHeight(
      /**
       * The new content width value for the dialog
       */
      sHeight: CSSSize
    ): this;
    /**
     * Set the internal Dialog's contentWidth property {@link sap.m.Dialog}
     */
    setContentWidth(
      /**
       * The new content width value for the dialog
       */
      sWidth: CSSSize
    ): this;
    /**
     * Sets the draggable property.
     */
    setDraggable(
      /**
       * Value for the draggable property
       */
      bValue: boolean
    ): this;
    /**
     * Sets the growing to the internal list
     */
    setGrowing(
      /**
       * Value for the list's growing.
       */
      bValue: boolean
    ): this;
    /**
     * Sets the growing threshold to the internal list
     */
    setGrowingThreshold(
      /**
       * Value for the list's growing threshold.
       */
      iValue: int
    ): this;
    /**
     * Set the model for the internal list AND the current control so that both controls can be used with data
     * binding
     */
    setModel(
      /**
       * the model that holds the data for the list
       */
      oModel: Model,
      /**
       * the optional model name
       */
      sModelName?: string
    ): this;
    /**
     * Enable/Disable multi selection mode.
     */
    setMultiSelect(
      /**
       * Flag for multi selection mode
       */
      bMulti: boolean
    ): this;
    /**
     * Set the internal List's no data text property
     */
    setNoDataText(
      /**
       * The no data text for the list
       */
      sNoDataText: string
    ): this;
    /**
     * @SINCE 1.18
     *
     * Sets a new value for property {@link #getRememberSelections rememberSelections}.
     *
     * This flag controls whether the dialog clears the selection after the confirm event has been fired. If
     * the dialog needs to be opened multiple times in the same context to allow for corrections of previous
     * user inputs, set this flag to `true`.
     *
     * **Note:** The sap.m.SelectDialog uses {@link sap.m.ListBase#rememberSelections this} property of the
     * ListBase and therefore its limitations also apply here.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRememberSelections(
      /**
       * New value for property `rememberSelections`
       */
      bRememberSelections?: boolean
    ): this;
    /**
     * Sets the resizable property.
     */
    setResizable(
      /**
       * Value for the resizable property
       */
      bValue: boolean
    ): this;
    /**
     * Sets the Clear button visible state
     */
    setShowClearButton(
      /**
       * Value for the Clear button visible state.
       */
      bVisible: boolean
    ): this;
    /**
     * Set the title of the internal dialog
     */
    setTitle(
      /**
       * The title text for the dialog
       */
      sTitle: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Forward method to the inner dialog: toggleStyleClass.
     */
    toggleStyleClass(
      /**
       * CSS class name to add or remove
       */
      sStyleClass: string,
      /**
       * Whether style class should be added (or removed); when this parameter is not given, the given style class
       * will be toggled (removed, if present, and added if not present)
       */
      bAdd?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the cancel button is clicked or ESC key is pressed
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or
     * by pressing the confirmation button in multi selection mode . The items being selected are returned as
     * event parameters.
     */
    attachConfirm(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.SelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectDialog` itself.
     *
     * This event will be fired when the search button has been clicked on the searchfield on the visual control
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SelectDialogSettings extends $ControlSettings {
    /**
     * Determines the title text that appears in the dialog header
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines the text shown when the list has no data
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Determines if the user can select several options from the list
     */
    multiSelect?: boolean | PropertyBindingInfo;

    /**
     * Determines the number of items initially displayed in the list. Also defines the number of items to be
     * requested from the model for each grow. **Note:** This property could take affect only be used if the
     * property `growing` is set to `true`.
     */
    growingThreshold?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * If set to `true`, enables the growing feature of the control to load more items by requesting from the
     * bound model (progressive loading). **Note:** This feature only works when an `items` aggregation is bound.
     * **Note:** Growing property, must not be used together with two-way binding. **Note:** If the property
     * is set to `true`, selected count (if present) and search, will work for currently loaded items only.
     * To make sure that all items in the table are loaded at once and the above features work properly, we
     * recommend setting the `growing` property to false.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.18
     *
     * Determines the content width of the inner dialog. For more information, see the dialog documentation.
     */
    contentWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.18
     *
     * This flag controls whether the dialog clears the selection after the confirm event has been fired. If
     * the dialog needs to be opened multiple times in the same context to allow for corrections of previous
     * user inputs, set this flag to `true`.
     *
     * **Note:** The sap.m.SelectDialog uses {@link sap.m.ListBase#rememberSelections this} property of the
     * ListBase and therefore its limitations also apply here.
     */
    rememberSelections?: boolean | PropertyBindingInfo;

    /**
     * Determines the content height of the inner dialog. For more information, see the dialog documentation.
     */
    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.58
     *
     * This flag controls whether the Clear button is shown. When set to `true`, it provides a way to clear
     * selection mode in Select Dialog. We recommended enabling of the Clear button in the following cases,
     * where a mechanism to clear the value is needed: In case of single selection mode(default mode) for Select
     * Dialog and `rememberSelections` is set to `true`. Clear button needs to be enabled in order to allow
     * users to clear the selection. In case of using `sap.m.Input` with `valueHelpOnly` set to `true`, the
     * Clear button could be used for clearing selection. In case the application stores a value and uses only
     * Select Dialog to edit/maintain it. **Note:**When used with oData, only the loaded selections will be
     * cleared.
     */
    showClearButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.68
     *
     * Overwrites the default text for the confirmation button.
     */
    confirmButtonText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.70
     *
     * When set to `true`, the SelectDialog is draggable by its header. The default value is `false`. **Note**:
     * The SelectDialog can be draggable only in desktop mode.
     */
    draggable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.70
     *
     * When set to `true`, the SelectDialog will have a resize handler in its bottom right corner. The default
     * value is `false`. **Note**: The SelectDialog can be resizable only in desktop mode.
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the
     * dialog but other combinations are also possible.
     */
    items?: ListItemBase[] | ListItemBase | AggregationBindingInfo;

    /**
     * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or
     * by pressing the confirmation button in multi selection mode . The items being selected are returned as
     * event parameters.
     */
    confirm?: Function;

    /**
     * This event will be fired when the search button has been clicked on the searchfield on the visual control
     */
    search?: Function;

    /**
     * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
     */
    liveChange?: Function;

    /**
     * This event will be fired when the cancel button is clicked or ESC key is pressed
     */
    cancel?: Function;
  }
}

declare module "sap/m/SelectionDetails" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Item from "sap/ui/core/Item";

  import SelectionDetailsItem from "sap/m/SelectionDetailsItem";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  import { SelectionDetailsActionLevel } from "sap/m/library";

  import Interface from "sap/ui/base/Interface";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.48.0
   *
   * The protected control provides a popover that displays the details of the items selected in the chart.
   * This control should only be used in the toolbars of sap.suite.ui.commons.ChartContainer and sap.ui.comp.smartchart.SmartChart
   * controls. Initially, the control is rendered as a button that opens the popup after clicking on it. **Note:**It
   * is protected and should only be used within the framework itself.
   */
  export default class SelectionDetails extends Control {
    /**
     * Constructor for a new SelectionDetails.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SelectionDetailsSettings
    );
    /**
     * Constructor for a new SelectionDetails.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SelectionDetailsSettings
    );

    /**
     * Adds some action to the aggregation {@link #getActions actions}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Item
    ): this;
    /**
     * Adds some actionGroup to the aggregation {@link #getActionGroups actionGroups}.
     */
    addActionGroup(
      /**
       * The actionGroup to add; if empty, nothing is inserted
       */
      oActionGroup: Item
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: SelectionDetailsItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered when a custom action is pressed.
     */
    attachActionPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is open.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches an event handler to the given listener to react to user selection interaction.
     */
    attachSelectionHandler(
      /**
       * The identifier of the event to listen for
       */
      eventId: string,
      /**
       * The object which triggers the event to register on
       */
      listener: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the actionGroups in the aggregation {@link #getActionGroups actionGroups}.
     */
    destroyActionGroups(): this;
    /**
     * Destroys all the actions in the aggregation {@link #getActions actions}.
     */
    destroyActions(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachActionPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches the event which was attached by `attachSelectionHandler`.
     */
    detachSelectionHandler(): this;
    /**
     * Creates a new subclass of class sap.m.SelectionDetails with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectionDetails>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:actionPress actionPress} to attached listeners.
     */
    fireActionPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The action that has to be processed once the action has been pressed
         */
        action?: Item;
        /**
         * If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains
         * a reference to the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action group
         * of the SelectionDetails popover is pressed, this parameter refers to all {@link sap.m.SelectionDetailsItem
         * items}
         */
        items?: SelectionDetailsItem;
        /**
         * The action level of action buttons. The available levels are Item, List and Group
         */
        level?:
          | SelectionDetailsActionLevel
          | keyof typeof SelectionDetailsActionLevel;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
     */
    fireBeforeClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
     */
    fireBeforeOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:navigate navigate} to attached listeners.
     */
    fireNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item on which the action has been pressed. Can be null in case a navigation was done without item
         * context, e.g. action press.
         */
        item?: SelectionDetailsItem;
        /**
         * Direction of the triggered navigation, possible values are "to" and "back".
         */
        direction?: string;
        /**
         * The content of the currently viewed page that was previously added via {@link sap.m.SelectionDetailsFacade#navTo}.
         * This contains the content of the page before the navigation was triggered. Can be null in case of first
         * event triggering.
         */
        content?: Control;
      }
    ): this;
    /**
     * Gets content of aggregation {@link #getActionGroups actionGroups}.
     *
     * Contains actions that are rendered as a dedicated {@link sap.m.StandardListItem item}. In case an action
     * group is pressed, a navigation should be triggered via `navTo` method. A maximum of 5 actionGroups is
     * displayed inside the popover, though more can be added to the aggregation.
     */
    getActionGroups(): Item[];
    /**
     * Gets content of aggregation {@link #getActions actions}.
     *
     * Contains custom actions shown in the responsive toolbar below items on the first page.
     */
    getActions(): Item[];
    /**
     * Returns the public facade of the SelectionDetails control for non inner framework usages.
     */
    getFacade(): Interface;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Contains {@link sap.m.SelectionDetailsItem items} that are displayed on the first page.
     */
    getItems(): SelectionDetailsItem[];
    /**
     * Returns a metadata object for class sap.m.SelectionDetails.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getActions actions}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: Item
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getActionGroups actionGroups}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfActionGroup(
      /**
       * The actionGroup whose index is looked for
       */
      oActionGroup: Item
    ): int;
    /**
     * Checks for the provided `sap.m.SelectionDetailsItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: SelectionDetailsItem
    ): int;
    /**
     * Inserts a action into the aggregation {@link #getActions actions}.
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: Item,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a actionGroup into the aggregation {@link #getActionGroups actionGroups}.
     */
    insertActionGroup(
      /**
       * The actionGroup to insert; if empty, nothing is inserted
       */
      oActionGroup: Item,
      /**
       * The `0`-based index the actionGroup should be inserted at; for a negative value of `iIndex`, the actionGroup
       * is inserted at position 0; for a value greater than the current size of the aggregation, the actionGroup
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: SelectionDetailsItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Method to register the factory function that creates the SelectionDetailsItems. The factory function
     * is called for every selected entry separately with three parameters. First parameter is the display data
     * array for each item out of the selection. Second parameter is the data array for each item out of the
     * selection. Third parameter is the binding context for each item in the selection. This is undefined if
     * no binding is used. Fourth parameter is `oData`. Can be undefined.
     */
    registerSelectionDetailsItemFactory(
      /**
       * Data to be passed to the factory function
       */
      data: any,
      /**
       * The item factory function that returns SelectionDetailsItems
       */
      factory: Function
    ): this;
    /**
     * Removes a action from the aggregation {@link #getActions actions}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Item
    ): Item;
    /**
     * Removes a actionGroup from the aggregation {@link #getActionGroups actionGroups}.
     */
    removeActionGroup(
      /**
       * The actionGroup to remove or its index or id
       */
      vActionGroup: int | string | Item
    ): Item;
    /**
     * Removes all the controls from the aggregation {@link #getActionGroups actionGroups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActionGroups(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActions(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): SelectionDetailsItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | SelectionDetailsItem
    ): SelectionDetailsItem;
    /**
     * Sets the popover to modal or non-modal based on the given parameter. This only takes effect on desktop
     * or tablet. Please see the documentation {@link sap.m.ResponsivePopover#modal}.
     */
    setPopoverModal(
      /**
       * New value for property modal of the internally used popover.
       */
      modal: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered when a custom action is pressed.
     */
    attachActionPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is open.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SelectionDetailsSettings extends $ControlSettings {
    /**
     * Contains {@link sap.m.SelectionDetailsItem items} that are displayed on the first page.
     */
    items?:
      | SelectionDetailsItem[]
      | SelectionDetailsItem
      | AggregationBindingInfo;

    /**
     * Contains custom actions shown in the responsive toolbar below items on the first page.
     */
    actions?: Item[] | Item | AggregationBindingInfo;

    /**
     * Contains actions that are rendered as a dedicated {@link sap.m.StandardListItem item}. In case an action
     * group is pressed, a navigation should be triggered via `navTo` method. A maximum of 5 actionGroups is
     * displayed inside the popover, though more can be added to the aggregation.
     */
    actionGroups?: Item[] | Item | AggregationBindingInfo;

    /**
     * Event is triggered before the popover is open.
     */
    beforeOpen?: Function;

    /**
     * Event is triggered before the popover is closed.
     */
    beforeClose?: Function;

    /**
     * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
     */
    navigate?: Function;

    /**
     * Event is triggered when a custom action is pressed.
     */
    actionPress?: Function;
  }
}

declare module "sap/m/SelectionDetailsFacade" {
  import Item from "sap/ui/core/Item";

  import Control from "sap/ui/core/Control";

  /**
   * @SINCE 1.48.0
   *
   * The public facade of the {@link sap.m.SelectionDetails} control.
   */
  export default class SelectionDetailsFacade {
    /**
     * Describes the public facade of the {@link sap.m.SelectionDetails} control.
     */
    constructor();

    /**
     * Adds some action to the aggregation {@link #getActions actions}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Item
    ): this;
    /**
     * Adds some actionGroup to the aggregation {@link #getActionGroups actionGroups}.
     */
    addActionGroup(
      /**
       * The actionGroup to add; if empty, nothing is inserted
       */
      oActionGroup: Item
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered when a custom action is pressed.
     */
    attachActionPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is closed.
     */
    attachBeforeClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is open.
     */
    attachBeforeOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
     */
    attachNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Closes SelectionDetails if open.
     */
    close(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachActionPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Returns `true` if the labels of the {@link sap.m.SelectionDetailsItemLine} elements are wrapped, `false`
     * otherwise.
     */
    getWrapLabels(): boolean;
    /**
     * Returns true if the SelectionDetails is enabled, otherwise false.
     */
    isEnabled(): boolean;
    /**
     * Returns true if the SelectionDetails is open, otherwise false.
     */
    isOpen(): boolean;
    /**
     * Wraps the given content in {@link sap.m.Page page}, adds it to existing {@link sap.m.NavContainer NavContainer}
     * and navigates to this newly created page. Has no effect if the SelectionDetails is closed. Lazily processes
     * dependencies for the navigation event.
     */
    navTo(
      /**
       * The title property of the {@link sap.m.Page page} control to which the navigation should occur.
       */
      title: string,
      /**
       * The content of the control to which the navigation should occur.
       */
      content: Control
    ): this;
    /**
     * Removes a action from the aggregation {@link #getActions actions}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Item
    ): Item;
    /**
     * Removes a actionGroup from the aggregation {@link #getActionGroups actionGroups}.
     */
    removeActionGroup(
      /**
       * The actionGroup to remove or its index or id
       */
      vActionGroup: int | string | Item
    ): Item;
    /**
     * Removes all the controls from the aggregation {@link #getActionGroups actionGroups}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActionGroups(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActions(): Item[];
    /**
     * Enables line wrapping for the labels of the of the {@link sap.m.SelectionDetailsItemLine} elements.
     */
    setWrapLabels(
      /**
       * True to apply wrapping to the labels of the {@link sap.m.SelectionDetailsItemLine} elements.
       */
      bWrap: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:actionPress actionPress} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered when a custom action is pressed.
     */
    attachActionPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeClose beforeClose} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is closed.
     */
    attachBeforeClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpen beforeOpen} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered before the popover is open.
     */
    attachBeforeOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.m.SelectionDetails`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectionDetails` itself.
     *
     * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
     */
    attachNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectionDetails` itself
       */
      oListener?: object
    ): this;
  }
}

declare module "sap/m/SelectionDetailsItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Item from "sap/ui/core/Item";

  import SelectionDetailsItemLine from "sap/m/SelectionDetailsItemLine";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Interface from "sap/ui/base/Interface";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.48.0
   *
   * This protected element provides an item for {@link sap.m.SelectionDetails} that is shown inside a list.
   * The item includes SelectionDetailsItemLine as its lines that are displayed in one block above the optional
   * actions. **Note:**It is protected and should only be used within the framework itself.
   */
  export default class SelectionDetailsItem extends UI5Element {
    /**
     * Constructor for a new SelectionDetailsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SelectionDetailsItemSettings
    );
    /**
     * Constructor for a new SelectionDetailsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SelectionDetailsItemSettings
    );

    /**
     * Adds some action to the aggregation {@link #getActions actions}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Item
    ): this;
    /**
     * Adds some line to the aggregation {@link #getLines lines}.
     */
    addLine(
      /**
       * The line to add; if empty, nothing is inserted
       */
      oLine: SelectionDetailsItemLine
    ): this;
    /**
     * Binds aggregation {@link #getLines lines} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindLines(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the actions in the aggregation {@link #getActions actions}.
     */
    destroyActions(): this;
    /**
     * Destroys all the lines in the aggregation {@link #getLines lines}.
     */
    destroyLines(): this;
    /**
     * Creates a new subclass of class sap.m.SelectionDetailsItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectionDetailsItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getActions actions}.
     *
     * Contains custom actions shown below the main content of the item.
     */
    getActions(): Item[];
    /**
     * Gets current value of property {@link #getEnableNav enableNav}.
     *
     * Determines whether or not the item is active and a navigation event is triggered on press.
     *
     * Default value is `false`.
     */
    getEnableNav(): boolean;
    /**
     * Returns the public facade of the SelectionDetailsItem for non inner framework usages.
     */
    getFacade(): Interface;
    /**
     * Gets content of aggregation {@link #getLines lines}.
     *
     * Contains a record of information about, for example, measures and dimensions. These entries are usually
     * obtained via selection in chart controls.
     */
    getLines(): SelectionDetailsItemLine[];
    /**
     * Returns a metadata object for class sap.m.SelectionDetailsItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getActions actions}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: Item
    ): int;
    /**
     * Checks for the provided `sap.m.SelectionDetailsItemLine` in the aggregation {@link #getLines lines}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfLine(
      /**
       * The line whose index is looked for
       */
      oLine: SelectionDetailsItemLine
    ): int;
    /**
     * Inserts a action into the aggregation {@link #getActions actions}.
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: Item,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a line into the aggregation {@link #getLines lines}.
     */
    insertLine(
      /**
       * The line to insert; if empty, nothing is inserted
       */
      oLine: SelectionDetailsItemLine,
      /**
       * The `0`-based index the line should be inserted at; for a negative value of `iIndex`, the line is inserted
       * at position 0; for a value greater than the current size of the aggregation, the line is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a action from the aggregation {@link #getActions actions}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Item
    ): Item;
    /**
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActions(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getLines lines}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllLines(): SelectionDetailsItemLine[];
    /**
     * Removes a line from the aggregation {@link #getLines lines}.
     */
    removeLine(
      /**
       * The line to remove or its index or id
       */
      vLine: int | string | SelectionDetailsItemLine
    ): SelectionDetailsItemLine;
    /**
     * Sets a new value for property {@link #getEnableNav enableNav}.
     *
     * Determines whether or not the item is active and a navigation event is triggered on press.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableNav(
      /**
       * New value for property `enableNav`
       */
      bEnableNav?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getLines lines} from model data.
     */
    unbindLines(): this;
  }

  export interface $SelectionDetailsItemSettings extends $ElementSettings {
    /**
     * Determines whether or not the item is active and a navigation event is triggered on press.
     */
    enableNav?: boolean | PropertyBindingInfo;

    /**
     * Contains a record of information about, for example, measures and dimensions. These entries are usually
     * obtained via selection in chart controls.
     */
    lines?:
      | SelectionDetailsItemLine[]
      | SelectionDetailsItemLine
      | AggregationBindingInfo;

    /**
     * Contains custom actions shown below the main content of the item.
     */
    actions?: Item[] | Item | AggregationBindingInfo;
  }
}

declare module "sap/m/SelectionDetailsItemLine" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.48.0
   *
   * This Element provides a means to fill an {@link sap.m.SelectionDetailsItem} with content. It is used
   * for a form-like display of a label followed by a value with an optional unit. If the unit is used, the
   * value is displayed bold. **Note:**It is protected and should ony be used within the framework
   * itself.
   */
  export default class SelectionDetailsItemLine extends UI5Element {
    /**
     * Constructor for a new SelectionDetailsItemLine.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new element
       */
      mSettings?: $SelectionDetailsItemLineSettings
    );
    /**
     * Constructor for a new SelectionDetailsItemLine.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new element, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new element
       */
      mSettings?: $SelectionDetailsItemLineSettings
    );

    /**
     * Creates a new subclass of class sap.m.SelectionDetailsItemLine with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectionDetailsItemLine>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDisplayValue displayValue}.
     *
     * The display value of the line. If this property is set, it overrides the value property and is displayed
     * as is.
     */
    getDisplayValue(): string;
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * The label that is shown as the first part of the line. It may contain the name of the currently selected
     * dimension or measure.
     */
    getLabel(): string;
    /**
     * Gets current value of property {@link #getLineMarker lineMarker}.
     *
     * A string to be rendered by the control as a line marker. This string must be a valid SVG definition.
     * The only valid tags are: svg, path, line.
     */
    getLineMarker(): string;
    /**
     * Returns a metadata object for class sap.m.SelectionDetailsItemLine.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * The unit of the given value. If this unit is given, the line is displayed bold.
     */
    getUnit(): string;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * The value of the line, for example the value of the currently selected measure. Expected type is a string,
     * number or a plain object, including date and time properties of type string.
     */
    getValue(): any;
    /**
     * Sets a new value for property {@link #getDisplayValue displayValue}.
     *
     * The display value of the line. If this property is set, it overrides the value property and is displayed
     * as is.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDisplayValue(
      /**
       * New value for property `displayValue`
       */
      sDisplayValue?: string
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * The label that is shown as the first part of the line. It may contain the name of the currently selected
     * dimension or measure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel: string
    ): this;
    /**
     * Sets a new value for property {@link #getLineMarker lineMarker}.
     *
     * A string to be rendered by the control as a line marker. This string must be a valid SVG definition.
     * The only valid tags are: svg, path, line.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLineMarker(
      /**
       * New value for property `lineMarker`
       */
      sLineMarker?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * The unit of the given value. If this unit is given, the line is displayed bold.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * The value of the line, for example the value of the currently selected measure. Expected type is a string,
     * number or a plain object, including date and time properties of type string.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      oValue: any
    ): this;
  }

  export interface $SelectionDetailsItemLineSettings extends $ElementSettings {
    /**
     * The label that is shown as the first part of the line. It may contain the name of the currently selected
     * dimension or measure.
     */
    label?: string | PropertyBindingInfo;

    /**
     * The value of the line, for example the value of the currently selected measure. Expected type is a string,
     * number or a plain object, including date and time properties of type string.
     */
    value?: any | PropertyBindingInfo;

    /**
     * The display value of the line. If this property is set, it overrides the value property and is displayed
     * as is.
     */
    displayValue?: string | PropertyBindingInfo;

    /**
     * The unit of the given value. If this unit is given, the line is displayed bold.
     */
    unit?: string | PropertyBindingInfo;

    /**
     * A string to be rendered by the control as a line marker. This string must be a valid SVG definition.
     * The only valid tags are: svg, path, line.
     */
    lineMarker?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/SelectList" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import Item from "sap/ui/core/Item";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { SelectListKeyboardNavigationMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26.0
   *
   * The `sap.m.SelectList` displays a list of items that allows the user to select an item.
   */
  export default class SelectList extends Control {
    /**
     * Constructor for a new `sap.m.SelectList`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $SelectListSettings
    );
    /**
     * Constructor for a new `sap.m.SelectList`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $SelectListSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Item
    ): this;
    /**
     * @SINCE 1.32.4
     *
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.m.SelectList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectList` itself.
     *
     * This event is fired when an item is pressed.
     */
    attachItemPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectList` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.SelectList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectList` itself.
     *
     * This event is fired when the selection has changed.
     *
     * **Note: ** The selection can be changed by pressing a non-selected item or via keyboard and after the
     * enter or space key is pressed.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectList` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Clear the selection.
     */
    clearSelection(): void;
    /**
     * Destroys all the items in the aggregation named `items`.
     */
    destroyItems(): this;
    /**
     * @SINCE 1.32.4
     *
     * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.m.SelectList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.SelectList`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SelectList with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SelectList>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.32.4
     *
     * Fires event {@link #event:itemPress itemPress} to attached listeners.
     */
    fireItemPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The pressed item.
         */
        item?: Item;
      }
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item.
         */
        selectedItem?: Item;
      }
    ): this;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Retrieves the default selected item from the aggregation named `items`.
     */
    getDefaultSelectedItem(aItems?: Item[]): Item | null;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can change the selection.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets the enabled items from the aggregation named `items`.
     */
    getEnabledItems(
      /**
       * items to filter
       */
      aItems?: Item[]
    ): Item[];
    /**
     * Gets the first item from the aggregation named `items`.
     */
    getFirstItem(): Item | null;
    /**
     * @SINCE 1.91
     *
     * Gets current value of property {@link #getHideDisabledItems hideDisabledItems}.
     *
     * Determines whether the disabled items are hidden from the DOM structure.
     *
     * Default value is `false`.
     */
    getHideDisabledItems(): boolean;
    /**
     * Gets the item from the aggregation named `items` at the given 0-based index.
     */
    getItemAt(
      /**
       * Index of the item to return.
       */
      iIndex: int
    ): Item | null;
    /**
     * Gets the item with the given key from the aggregation named `items`.
     *
     * **Note: ** If duplicate keys exists, the first item matching the key is returned.
     */
    getItemByKey(
      /**
       * An item key that specifies the item to retrieve.
       */
      sKey: string
    ): Item | null;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Defines the items contained within this control.
     */
    getItems(): Item[];
    /**
     * @SINCE 1.38
     *
     * Gets current value of property {@link #getKeyboardNavigationMode keyboardNavigationMode}.
     *
     * Defines the keyboard navigation mode.
     *
     * **Note:** The `sap.m.SelectListKeyboardNavigationMode.None` enumeration value, is only intended for use
     * in some composite controls that handles keyboard navigation by themselves.
     *
     * Default value is `Delimited`.
     */
    getKeyboardNavigationMode():
      | SelectListKeyboardNavigationMode
      | keyof typeof SelectListKeyboardNavigationMode;
    /**
     * Gets the enabled items from the aggregation named `items`.
     */
    getLastItem(): Item | null;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the control.
     *
     * Default value is `"100%"`.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.SelectList.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the selected item object from the aggregation named `items`.
     */
    getSelectedItem(): Item | null;
    /**
     * Gets current value of property {@link #getSelectedItemId selectedItemId}.
     *
     * ID of the selected item.
     *
     * Default value is `empty string`.
     */
    getSelectedItemId(): string;
    /**
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Key of the selected item.
     *
     * **Note: ** If duplicate keys exist, the first item matching the key is used.
     *
     * Default value is `empty string`.
     */
    getSelectedKey(): string;
    /**
     * @SINCE 1.32.3
     *
     * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * Default value is `false`.
     */
    getShowSecondaryValues(): boolean;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the control.
     *
     * Default value is `"auto"`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Item
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Item,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the items in the aggregation named `items`. Additionally unregisters them from the hosting
     * UIArea.
     */
    removeAllItems(): Item[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes an item from the aggregation named `items`.
     */
    removeItem(
      /**
       * The item to remove or its index or id.
       */
      vItem: int | string | Item
    ): Item;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can change the selection.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.91
     *
     * Sets a new value for property {@link #getHideDisabledItems hideDisabledItems}.
     *
     * Determines whether the disabled items are hidden from the DOM structure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setHideDisabledItems(
      /**
       * New value for property `hideDisabledItems`
       */
      bHideDisabledItems?: boolean
    ): this;
    /**
     * @SINCE 1.38
     *
     * Sets a new value for property {@link #getKeyboardNavigationMode keyboardNavigationMode}.
     *
     * Defines the keyboard navigation mode.
     *
     * **Note:** The `sap.m.SelectListKeyboardNavigationMode.None` enumeration value, is only intended for use
     * in some composite controls that handles keyboard navigation by themselves.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Delimited`.
     */
    setKeyboardNavigationMode(
      /**
       * New value for property `keyboardNavigationMode`
       */
      sKeyboardNavigationMode?:
        | SelectListKeyboardNavigationMode
        | keyof typeof SelectListKeyboardNavigationMode
    ): this;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      sMaxWidth?: CSSSize
    ): this;
    /**
     * Sets the `selectedItem` association.
     */
    setSelectedItem(
      /**
       * New value for the `selectedItem` association. If an ID of a `sap.ui.core.Item` is given, the item with
       * this ID becomes the `selectedItem` association. Alternatively, a `sap.ui.core.Item` instance may be given
       * or `null` to clear the selection.
       */
      vItem: string | Item | null
    ): this;
    /**
     * Sets property `selectedItemId`.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedItemId(
      /**
       * New value for property `selectedItemId`.
       */
      vItem: string | undefined
    ): this;
    /**
     * Sets property `selectedKey`.
     *
     * Default value is an empty string `""` or `undefined`.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`.
       */
      sKey: string
    ): this;
    /**
     * Updates and synchronizes `selectedItem` association, `selectedItemId` and `selectedKey` properties.
     */
    setSelection(vItem: string | Item | null): void;
    /**
     * @SINCE 1.32.3
     *
     * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowSecondaryValues(
      /**
       * New value for property `showSecondaryValues`
       */
      bShowSecondaryValues?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"auto"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.32.4
     *
     * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.m.SelectList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectList` itself.
     *
     * This event is fired when an item is pressed.
     */
    attachItemPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectList` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.SelectList`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SelectList` itself.
     *
     * This event is fired when the selection has changed.
     *
     * **Note: ** The selection can be changed by pressing a non-selected item or via keyboard and after the
     * enter or space key is pressed.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SelectList` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SelectListSettings extends $ControlSettings {
    /**
     * Indicates whether the user can change the selection.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Sets the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Sets the maximum width of the control.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;

    /**
     * Key of the selected item.
     *
     * **Note: ** If duplicate keys exist, the first item matching the key is used.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * ID of the selected item.
     */
    selectedItemId?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.32.3
     *
     * Indicates whether the text values of the `additionalText` property of a {@link sap.ui.core.ListItem}
     * are shown.
     */
    showSecondaryValues?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38
     *
     * Defines the keyboard navigation mode.
     *
     * **Note:** The `sap.m.SelectListKeyboardNavigationMode.None` enumeration value, is only intended for use
     * in some composite controls that handles keyboard navigation by themselves.
     */
    keyboardNavigationMode?:
      | (
          | SelectListKeyboardNavigationMode
          | keyof typeof SelectListKeyboardNavigationMode
        )
      | PropertyBindingInfo;

    /**
     * @SINCE 1.91
     *
     * Determines whether the disabled items are hidden from the DOM structure.
     */
    hideDisabledItems?: boolean | PropertyBindingInfo;

    /**
     * Defines the items contained within this control.
     */
    items?: Item[] | Item | AggregationBindingInfo;

    /**
     * Sets or retrieves the selected item from the aggregation named items.
     */
    selectedItem?: Item | string;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / IDs which label this control (see WAI-ARIA attribute `aria-labelledby`).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired when the selection has changed.
     *
     * **Note: ** The selection can be changed by pressing a non-selected item or via keyboard and after the
     * enter or space key is pressed.
     */
    selectionChange?: Function;

    /**
     * @SINCE 1.32.4
     *
     * This event is fired when an item is pressed.
     */
    itemPress?: Function;
  }
}

declare module "sap/m/semantic/AddAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * An AddAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   *
   * See {@link sap.m.semantic.MasterPage#addAction}, {@link sap.m.semantic.FullscreenPage#addAction}, {@link
   * sap.m.semantic.DetailPage#addAction}
   */
  export default class AddAction extends SemanticButton {
    /**
     * Constructor for a new AddAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $AddActionSettings
    );
    /**
     * Constructor for a new AddAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $AddActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.AddAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AddAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.AddAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $AddActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/CancelAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A CancelAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class CancelAction extends SemanticButton {
    /**
     * Constructor for a new CancelAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $CancelActionSettings
    );
    /**
     * Constructor for a new CancelAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $CancelActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.CancelAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, CancelAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.CancelAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $CancelActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/DeleteAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.36
   *
   * A DeleteAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class DeleteAction extends SemanticButton {
    /**
     * Constructor for a new DeleteAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $DeleteActionSettings
    );
    /**
     * Constructor for a new DeleteAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $DeleteActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.DeleteAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DeleteAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.DeleteAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $DeleteActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/DetailPage" {
  import {
    default as ShareMenuPage,
    $ShareMenuPageSettings,
  } from "sap/m/semantic/ShareMenuPage";

  import AddAction from "sap/m/semantic/AddAction";

  import CancelAction from "sap/m/semantic/CancelAction";

  import DeleteAction from "sap/m/semantic/DeleteAction";

  import DiscussInJamAction from "sap/m/semantic/DiscussInJamAction";

  import DraftIndicator from "sap/m/DraftIndicator";

  import EditAction from "sap/m/semantic/EditAction";

  import FavoriteAction from "sap/m/semantic/FavoriteAction";

  import FlagAction from "sap/m/semantic/FlagAction";

  import ForwardAction from "sap/m/semantic/ForwardAction";

  import MainAction from "sap/m/semantic/MainAction";

  import MessagesIndicator from "sap/m/semantic/MessagesIndicator";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import NegativeAction from "sap/m/semantic/NegativeAction";

  import OpenInAction from "sap/m/semantic/OpenInAction";

  import PagingButton from "sap/m/PagingButton";

  import PositiveAction from "sap/m/semantic/PositiveAction";

  import PrintAction from "sap/m/semantic/PrintAction";

  import SaveAction from "sap/m/semantic/SaveAction";

  import Button from "sap/m/Button";

  import SendEmailAction from "sap/m/semantic/SendEmailAction";

  import SendMessageAction from "sap/m/semantic/SendMessageAction";

  import ShareInJamAction from "sap/m/semantic/ShareInJamAction";

  /**
   * @SINCE 1.30.0
   *
   * A DetailPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following
   * types:
   *
   *
   * 	 - {@link sap.m.semantic.AddAction}
   * 	 - {@link sap.m.semantic.MainAction}
   * 	 - {@link sap.m.semantic.PositiveAction}
   * 	 - {@link sap.m.semantic.NegativeAction}
   * 	 - {@link sap.m.semantic.ForwardAction}
   * 	 - {@link sap.m.semantic.EditAction}
   * 	 - {@link sap.m.semantic.SaveAction}
   * 	 - {@link sap.m.semantic.DeleteAction}
   * 	 - {@link sap.m.semantic.CancelAction}
   * 	 - {@link sap.m.semantic.FlagAction}
   * 	 - {@link sap.m.semantic.FavoriteAction}
   * 	 - {@link sap.m.semantic.OpenInAction}
   * 	 - {@link sap.m.semantic.DiscussInJamAction}
   * 	 - {@link sap.m.semantic.ShareInJamAction}
   * 	 - {@link sap.m.semantic.SendEmailAction}
   * 	 - {@link sap.m.semantic.SendMessageAction}
   * 	 - {@link sap.m.semantic.PrintAction}
   * 	 - {@link sap.m.semantic.MessagesIndicator}
   * 	 - {@link sap.m.DraftIndicator}
   */
  export default class DetailPage extends ShareMenuPage {
    /**
     * Constructor for a new DetailPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $DetailPageSettings
    );
    /**
     * Constructor for a new DetailPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $DetailPageSettings
    );

    /**
     * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
     */
    destroyAddAction(): this;
    /**
     * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
     */
    destroyCancelAction(): this;
    /**
     * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
     */
    destroyDeleteAction(): this;
    /**
     * Destroys the discussInJamAction in the aggregation {@link #getDiscussInJamAction discussInJamAction}.
     */
    destroyDiscussInJamAction(): this;
    /**
     * Destroys the draftIndicator in the aggregation {@link #getDraftIndicator draftIndicator}.
     */
    destroyDraftIndicator(): this;
    /**
     * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
     */
    destroyEditAction(): this;
    /**
     * Destroys the favoriteAction in the aggregation {@link #getFavoriteAction favoriteAction}.
     */
    destroyFavoriteAction(): this;
    /**
     * Destroys the flagAction in the aggregation {@link #getFlagAction flagAction}.
     */
    destroyFlagAction(): this;
    /**
     * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
     */
    destroyForwardAction(): this;
    /**
     * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
     */
    destroyMainAction(): this;
    /**
     * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
     */
    destroyMessagesIndicator(): this;
    /**
     * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
     */
    destroyNegativeAction(): this;
    /**
     * Destroys the openInAction in the aggregation {@link #getOpenInAction openInAction}.
     */
    destroyOpenInAction(): this;
    /**
     * Destroys the pagingAction in the aggregation {@link #getPagingAction pagingAction}.
     */
    destroyPagingAction(): this;
    /**
     * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
     */
    destroyPositiveAction(): this;
    /**
     * Destroys the printAction in the aggregation {@link #getPrintAction printAction}.
     */
    destroyPrintAction(): this;
    /**
     * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
     */
    destroySaveAction(): this;
    /**
     * Destroys the saveAsTileAction in the aggregation {@link #getSaveAsTileAction saveAsTileAction}.
     */
    destroySaveAsTileAction(): this;
    /**
     * Destroys the sendEmailAction in the aggregation {@link #getSendEmailAction sendEmailAction}.
     */
    destroySendEmailAction(): this;
    /**
     * Destroys the sendMessageAction in the aggregation {@link #getSendMessageAction sendMessageAction}.
     */
    destroySendMessageAction(): this;
    /**
     * Destroys the shareInJamAction in the aggregation {@link #getShareInJamAction shareInJamAction}.
     */
    destroyShareInJamAction(): this;
    /**
     * Creates a new subclass of class sap.m.semantic.DetailPage with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DetailPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getAddAction addAction}.
     *
     * Add action
     */
    getAddAction(): AddAction;
    /**
     * Gets content of aggregation {@link #getCancelAction cancelAction}.
     *
     * Cancel action
     */
    getCancelAction(): CancelAction;
    /**
     * Gets content of aggregation {@link #getDeleteAction deleteAction}.
     *
     * Delete action
     */
    getDeleteAction(): DeleteAction;
    /**
     * Gets content of aggregation {@link #getDiscussInJamAction discussInJamAction}.
     *
     * DiscussInJam action
     */
    getDiscussInJamAction(): DiscussInJamAction;
    /**
     * Gets content of aggregation {@link #getDraftIndicator draftIndicator}.
     *
     * DraftIndicator
     */
    getDraftIndicator(): DraftIndicator;
    /**
     * Gets content of aggregation {@link #getEditAction editAction}.
     *
     * Edit action
     */
    getEditAction(): EditAction;
    /**
     * Gets content of aggregation {@link #getFavoriteAction favoriteAction}.
     *
     * Favorite action
     */
    getFavoriteAction(): FavoriteAction;
    /**
     * Gets content of aggregation {@link #getFlagAction flagAction}.
     *
     * Flag action
     */
    getFlagAction(): FlagAction;
    /**
     * Gets content of aggregation {@link #getForwardAction forwardAction}.
     *
     * Negative action
     */
    getForwardAction(): ForwardAction;
    /**
     * Gets content of aggregation {@link #getMainAction mainAction}.
     *
     * Main action
     */
    getMainAction(): MainAction;
    /**
     * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
     *
     * MessagesIndicator
     */
    getMessagesIndicator(): MessagesIndicator;
    /**
     * Returns a metadata object for class sap.m.semantic.DetailPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getNegativeAction negativeAction}.
     *
     * Negative action
     */
    getNegativeAction(): NegativeAction;
    /**
     * Gets content of aggregation {@link #getOpenInAction openInAction}.
     *
     * OpenIn action
     */
    getOpenInAction(): OpenInAction;
    /**
     * Gets content of aggregation {@link #getPagingAction pagingAction}.
     *
     * Paging action
     */
    getPagingAction(): PagingButton;
    /**
     * Gets content of aggregation {@link #getPositiveAction positiveAction}.
     *
     * Positive action
     */
    getPositiveAction(): PositiveAction;
    /**
     * Gets content of aggregation {@link #getPrintAction printAction}.
     *
     * Print action
     */
    getPrintAction(): PrintAction;
    /**
     * Gets content of aggregation {@link #getSaveAction saveAction}.
     *
     * Save action
     */
    getSaveAction(): SaveAction;
    /**
     * Gets content of aggregation {@link #getSaveAsTileAction saveAsTileAction}.
     *
     * SaveAsTile button
     */
    getSaveAsTileAction(): Button;
    /**
     * Gets content of aggregation {@link #getSendEmailAction sendEmailAction}.
     *
     * SendEmail action
     */
    getSendEmailAction(): SendEmailAction;
    /**
     * Gets content of aggregation {@link #getSendMessageAction sendMessageAction}.
     *
     * SendMessage action
     */
    getSendMessageAction(): SendMessageAction;
    /**
     * Gets content of aggregation {@link #getShareInJamAction shareInJamAction}.
     *
     * ShareInJam action
     */
    getShareInJamAction(): ShareInJamAction;
    /**
     * Sets the aggregated {@link #getAddAction addAction}.
     */
    setAddAction(
      /**
       * The addAction to set
       */
      oAddAction: AddAction
    ): this;
    /**
     * Sets the aggregated {@link #getCancelAction cancelAction}.
     */
    setCancelAction(
      /**
       * The cancelAction to set
       */
      oCancelAction: CancelAction
    ): this;
    /**
     * Sets the aggregated {@link #getDeleteAction deleteAction}.
     */
    setDeleteAction(
      /**
       * The deleteAction to set
       */
      oDeleteAction: DeleteAction
    ): this;
    /**
     * Sets the aggregated {@link #getDiscussInJamAction discussInJamAction}.
     */
    setDiscussInJamAction(
      /**
       * The discussInJamAction to set
       */
      oDiscussInJamAction: DiscussInJamAction
    ): this;
    /**
     * Sets the aggregated {@link #getDraftIndicator draftIndicator}.
     */
    setDraftIndicator(
      /**
       * The draftIndicator to set
       */
      oDraftIndicator: DraftIndicator
    ): this;
    /**
     * Sets the aggregated {@link #getEditAction editAction}.
     */
    setEditAction(
      /**
       * The editAction to set
       */
      oEditAction: EditAction
    ): this;
    /**
     * Sets the aggregated {@link #getFavoriteAction favoriteAction}.
     */
    setFavoriteAction(
      /**
       * The favoriteAction to set
       */
      oFavoriteAction: FavoriteAction
    ): this;
    /**
     * Sets the aggregated {@link #getFlagAction flagAction}.
     */
    setFlagAction(
      /**
       * The flagAction to set
       */
      oFlagAction: FlagAction
    ): this;
    /**
     * Sets the aggregated {@link #getForwardAction forwardAction}.
     */
    setForwardAction(
      /**
       * The forwardAction to set
       */
      oForwardAction: ForwardAction
    ): this;
    /**
     * Sets the aggregated {@link #getMainAction mainAction}.
     */
    setMainAction(
      /**
       * The mainAction to set
       */
      oMainAction: MainAction
    ): this;
    /**
     * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
     */
    setMessagesIndicator(
      /**
       * The messagesIndicator to set
       */
      oMessagesIndicator: MessagesIndicator
    ): this;
    /**
     * Sets the aggregated {@link #getNegativeAction negativeAction}.
     */
    setNegativeAction(
      /**
       * The negativeAction to set
       */
      oNegativeAction: NegativeAction
    ): this;
    /**
     * Sets the aggregated {@link #getOpenInAction openInAction}.
     */
    setOpenInAction(
      /**
       * The openInAction to set
       */
      oOpenInAction: OpenInAction
    ): this;
    /**
     * Sets the aggregated {@link #getPagingAction pagingAction}.
     */
    setPagingAction(
      /**
       * The pagingAction to set
       */
      oPagingAction: PagingButton
    ): this;
    /**
     * Sets the aggregated {@link #getPositiveAction positiveAction}.
     */
    setPositiveAction(
      /**
       * The positiveAction to set
       */
      oPositiveAction: PositiveAction
    ): this;
    /**
     * Sets the aggregated {@link #getPrintAction printAction}.
     */
    setPrintAction(
      /**
       * The printAction to set
       */
      oPrintAction: PrintAction
    ): this;
    /**
     * Sets the aggregated {@link #getSaveAction saveAction}.
     */
    setSaveAction(
      /**
       * The saveAction to set
       */
      oSaveAction: SaveAction
    ): this;
    /**
     * Sets the aggregated {@link #getSaveAsTileAction saveAsTileAction}.
     */
    setSaveAsTileAction(
      /**
       * The saveAsTileAction to set
       */
      oSaveAsTileAction: Button
    ): this;
    /**
     * Sets the aggregated {@link #getSendEmailAction sendEmailAction}.
     */
    setSendEmailAction(
      /**
       * The sendEmailAction to set
       */
      oSendEmailAction: SendEmailAction
    ): this;
    /**
     * Sets the aggregated {@link #getSendMessageAction sendMessageAction}.
     */
    setSendMessageAction(
      /**
       * The sendMessageAction to set
       */
      oSendMessageAction: SendMessageAction
    ): this;
    /**
     * Sets the aggregated {@link #getShareInJamAction shareInJamAction}.
     */
    setShareInJamAction(
      /**
       * The shareInJamAction to set
       */
      oShareInJamAction: ShareInJamAction
    ): this;
  }

  export interface $DetailPageSettings extends $ShareMenuPageSettings {
    /**
     * Add action
     */
    addAction?: AddAction;

    /**
     * Main action
     */
    mainAction?: MainAction;

    /**
     * Positive action
     */
    positiveAction?: PositiveAction;

    /**
     * Negative action
     */
    negativeAction?: NegativeAction;

    /**
     * Negative action
     */
    forwardAction?: ForwardAction;

    /**
     * Edit action
     */
    editAction?: EditAction;

    /**
     * Save action
     */
    saveAction?: SaveAction;

    /**
     * Delete action
     */
    deleteAction?: DeleteAction;

    /**
     * Cancel action
     */
    cancelAction?: CancelAction;

    /**
     * Flag action
     */
    flagAction?: FlagAction;

    /**
     * Favorite action
     */
    favoriteAction?: FavoriteAction;

    /**
     * OpenIn action
     */
    openInAction?: OpenInAction;

    /**
     * DiscussInJam action
     */
    discussInJamAction?: DiscussInJamAction;

    /**
     * ShareInJam action
     */
    shareInJamAction?: ShareInJamAction;

    /**
     * SendEmail action
     */
    sendEmailAction?: SendEmailAction;

    /**
     * SendMessage action
     */
    sendMessageAction?: SendMessageAction;

    /**
     * Print action
     */
    printAction?: PrintAction;

    /**
     * MessagesIndicator
     */
    messagesIndicator?: MessagesIndicator;

    /**
     * SaveAsTile button
     */
    saveAsTileAction?: Button;

    /**
     * Paging action
     */
    pagingAction?: PagingButton;

    /**
     * DraftIndicator
     */
    draftIndicator?: DraftIndicator;
  }
}

declare module "sap/m/semantic/DiscussInJamAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A DiscussInJamAction button has default semantic-specific properties and is eligible for aggregation
   * content of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class DiscussInJamAction extends SemanticButton {
    /**
     * Constructor for a new DiscussInJamAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $DiscussInJamActionSettings
    );
    /**
     * Constructor for a new DiscussInJamAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $DiscussInJamActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.DiscussInJamAction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, DiscussInJamAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.DiscussInJamAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $DiscussInJamActionSettings
    extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/EditAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * An EditAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class EditAction extends SemanticButton {
    /**
     * Constructor for a new EditAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $EditActionSettings
    );
    /**
     * Constructor for a new EditAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $EditActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.EditAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, EditAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.EditAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $EditActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/FavoriteAction" {
  import {
    default as SemanticToggleButton,
    $SemanticToggleButtonSettings,
  } from "sap/m/semantic/SemanticToggleButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A FavoriteAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class FavoriteAction extends SemanticToggleButton {
    /**
     * Constructor for a new FavoriteAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FavoriteActionSettings
    );
    /**
     * Constructor for a new FavoriteAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FavoriteActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.FavoriteAction with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FavoriteAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.FavoriteAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $FavoriteActionSettings
    extends $SemanticToggleButtonSettings {}
}

declare module "sap/m/semantic/FilterAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A FilterAction is a {@link sap.m.Button} control enhanced with styling according to the semantics of
   * a common "Filter" action.
   *
   * A FilterAction cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * Your app should listen to the `press` event of {@link sap.m.semantic.FilterAction} in order to trigger
   * the display of the filtering options.
   *
   * If your filtering options are a simple list of items and require single choice only, then you can consider
   * using a {@link sap.m.semantic.FilterSelect} instead.
   */
  export default class FilterAction
    extends SemanticButton
    implements semantic.IFilter {
    __implements__sap_m_semantic_IFilter: boolean;
    /**
     * Constructor for a new FilterAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FilterActionSettings
    );
    /**
     * Constructor for a new FilterAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FilterActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.FilterAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FilterAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.FilterAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $FilterActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/FilterSelect" {
  import {
    default as SemanticSelect,
    $SemanticSelectSettings,
  } from "sap/m/semantic/SemanticSelect";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A FilterSelect is a {@link sap.m.Select} control enhanced with styling according to the semantics of
   * a common "Filter" action.
   *
   * A FilterSelect cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * The filtering options should be added to the `items` aggregation of {@link sap.m.semantic.FilterSelect}
   * and will be displayed as a pop-up list with support for single-item selection. If this simple popup list
   * is not sufficient for your use case, you can implement your own custom dialog by using {@link sap.m.semantic.FilterAction}
   * to trigger the dialog opening.
   */
  export default class FilterSelect
    extends SemanticSelect
    implements semantic.IFilter {
    __implements__sap_m_semantic_IFilter: boolean;
    /**
     * Constructor for a new FilterSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FilterSelectSettings
    );
    /**
     * Constructor for a new FilterSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FilterSelectSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.FilterSelect with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FilterSelect>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.FilterSelect.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $FilterSelectSettings extends $SemanticSelectSettings {}
}

declare module "sap/m/semantic/FlagAction" {
  import {
    default as SemanticToggleButton,
    $SemanticToggleButtonSettings,
  } from "sap/m/semantic/SemanticToggleButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A FlagAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class FlagAction extends SemanticToggleButton {
    /**
     * Constructor for a new FlagAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FlagActionSettings
    );
    /**
     * Constructor for a new FlagAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $FlagActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.FlagAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FlagAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.FlagAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $FlagActionSettings extends $SemanticToggleButtonSettings {}
}

declare module "sap/m/semantic/ForwardAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A ForwardAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class ForwardAction extends SemanticButton {
    /**
     * Constructor for a new ForwardAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $ForwardActionSettings
    );
    /**
     * Constructor for a new ForwardAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $ForwardActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.ForwardAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ForwardAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.ForwardAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $ForwardActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/FullscreenPage" {
  import {
    default as ShareMenuPage,
    $ShareMenuPageSettings,
  } from "sap/m/semantic/ShareMenuPage";

  import AddAction from "sap/m/semantic/AddAction";

  import CancelAction from "sap/m/semantic/CancelAction";

  import DeleteAction from "sap/m/semantic/DeleteAction";

  import DiscussInJamAction from "sap/m/semantic/DiscussInJamAction";

  import DraftIndicator from "sap/m/DraftIndicator";

  import EditAction from "sap/m/semantic/EditAction";

  import FavoriteAction from "sap/m/semantic/FavoriteAction";

  import FlagAction from "sap/m/semantic/FlagAction";

  import ForwardAction from "sap/m/semantic/ForwardAction";

  import MainAction from "sap/m/semantic/MainAction";

  import MessagesIndicator from "sap/m/semantic/MessagesIndicator";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import NegativeAction from "sap/m/semantic/NegativeAction";

  import OpenInAction from "sap/m/semantic/OpenInAction";

  import PagingButton from "sap/m/PagingButton";

  import PositiveAction from "sap/m/semantic/PositiveAction";

  import PrintAction from "sap/m/semantic/PrintAction";

  import SaveAction from "sap/m/semantic/SaveAction";

  import Button from "sap/m/Button";

  import SendEmailAction from "sap/m/semantic/SendEmailAction";

  import SendMessageAction from "sap/m/semantic/SendMessageAction";

  import ShareInJamAction from "sap/m/semantic/ShareInJamAction";

  /**
   * @SINCE 1.30.0
   *
   * A FullscreenPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following
   * types:
   *
   *
   * 	 - {@link sap.m.semantic.AddAction}
   * 	 - {@link sap.m.semantic.MainAction}
   * 	 - {@link sap.m.semantic.PositiveAction}
   * 	 - {@link sap.m.semantic.NegativeAction}
   * 	 - {@link sap.m.semantic.ForwardAction}
   * 	 - {@link sap.m.semantic.EditAction}
   * 	 - {@link sap.m.semantic.SaveAction}
   * 	 - {@link sap.m.semantic.DeleteAction}
   * 	 - {@link sap.m.semantic.CancelAction}
   * 	 - {@link sap.m.semantic.FlagAction}
   * 	 - {@link sap.m.semantic.FavoriteAction}
   * 	 - {@link sap.m.semantic.OpenInAction}
   * 	 - {@link sap.m.semantic.DiscussInJamAction}
   * 	 - {@link sap.m.semantic.ShareInJamAction}
   * 	 - {@link sap.m.semantic.SendEmailAction}
   * 	 - {@link sap.m.semantic.SendMessageAction}
   * 	 - {@link sap.m.semantic.PrintAction}
   * 	 - {@link sap.m.semantic.MessagesIndicator}
   * 	 - {@link sap.m.DraftIndicator}
   */
  export default class FullscreenPage extends ShareMenuPage {
    /**
     * Constructor for a new FullscreenPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $FullscreenPageSettings
    );
    /**
     * Constructor for a new FullscreenPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $FullscreenPageSettings
    );

    /**
     * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
     */
    destroyAddAction(): this;
    /**
     * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
     */
    destroyCancelAction(): this;
    /**
     * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
     */
    destroyDeleteAction(): this;
    /**
     * Destroys the discussInJamAction in the aggregation {@link #getDiscussInJamAction discussInJamAction}.
     */
    destroyDiscussInJamAction(): this;
    /**
     * Destroys the draftIndicator in the aggregation {@link #getDraftIndicator draftIndicator}.
     */
    destroyDraftIndicator(): this;
    /**
     * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
     */
    destroyEditAction(): this;
    /**
     * Destroys the favoriteAction in the aggregation {@link #getFavoriteAction favoriteAction}.
     */
    destroyFavoriteAction(): this;
    /**
     * Destroys the flagAction in the aggregation {@link #getFlagAction flagAction}.
     */
    destroyFlagAction(): this;
    /**
     * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
     */
    destroyForwardAction(): this;
    /**
     * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
     */
    destroyMainAction(): this;
    /**
     * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
     */
    destroyMessagesIndicator(): this;
    /**
     * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
     */
    destroyNegativeAction(): this;
    /**
     * Destroys the openInAction in the aggregation {@link #getOpenInAction openInAction}.
     */
    destroyOpenInAction(): this;
    /**
     * Destroys the pagingAction in the aggregation {@link #getPagingAction pagingAction}.
     */
    destroyPagingAction(): this;
    /**
     * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
     */
    destroyPositiveAction(): this;
    /**
     * Destroys the printAction in the aggregation {@link #getPrintAction printAction}.
     */
    destroyPrintAction(): this;
    /**
     * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
     */
    destroySaveAction(): this;
    /**
     * Destroys the saveAsTileAction in the aggregation {@link #getSaveAsTileAction saveAsTileAction}.
     */
    destroySaveAsTileAction(): this;
    /**
     * Destroys the sendEmailAction in the aggregation {@link #getSendEmailAction sendEmailAction}.
     */
    destroySendEmailAction(): this;
    /**
     * Destroys the sendMessageAction in the aggregation {@link #getSendMessageAction sendMessageAction}.
     */
    destroySendMessageAction(): this;
    /**
     * Destroys the shareInJamAction in the aggregation {@link #getShareInJamAction shareInJamAction}.
     */
    destroyShareInJamAction(): this;
    /**
     * Creates a new subclass of class sap.m.semantic.FullscreenPage with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, FullscreenPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getAddAction addAction}.
     *
     * Add action
     */
    getAddAction(): AddAction;
    /**
     * Gets content of aggregation {@link #getCancelAction cancelAction}.
     *
     * Cancel action
     */
    getCancelAction(): CancelAction;
    /**
     * Gets content of aggregation {@link #getDeleteAction deleteAction}.
     *
     * Delete action
     */
    getDeleteAction(): DeleteAction;
    /**
     * Gets content of aggregation {@link #getDiscussInJamAction discussInJamAction}.
     *
     * DiscussInJam action
     */
    getDiscussInJamAction(): DiscussInJamAction;
    /**
     * Gets content of aggregation {@link #getDraftIndicator draftIndicator}.
     *
     * DraftIndicator
     */
    getDraftIndicator(): DraftIndicator;
    /**
     * Gets content of aggregation {@link #getEditAction editAction}.
     *
     * Edit action
     */
    getEditAction(): EditAction;
    /**
     * Gets content of aggregation {@link #getFavoriteAction favoriteAction}.
     *
     * Favorite action
     */
    getFavoriteAction(): FavoriteAction;
    /**
     * Gets content of aggregation {@link #getFlagAction flagAction}.
     *
     * Flag action
     */
    getFlagAction(): FlagAction;
    /**
     * Gets content of aggregation {@link #getForwardAction forwardAction}.
     *
     * Negative action
     */
    getForwardAction(): ForwardAction;
    /**
     * Gets content of aggregation {@link #getMainAction mainAction}.
     *
     * Main action
     */
    getMainAction(): MainAction;
    /**
     * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
     *
     * MessagesIndicator
     */
    getMessagesIndicator(): MessagesIndicator;
    /**
     * Returns a metadata object for class sap.m.semantic.FullscreenPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getNegativeAction negativeAction}.
     *
     * Negative action
     */
    getNegativeAction(): NegativeAction;
    /**
     * Gets content of aggregation {@link #getOpenInAction openInAction}.
     *
     * OpenIn action
     */
    getOpenInAction(): OpenInAction;
    /**
     * Gets content of aggregation {@link #getPagingAction pagingAction}.
     *
     * Paging action
     */
    getPagingAction(): PagingButton;
    /**
     * Gets content of aggregation {@link #getPositiveAction positiveAction}.
     *
     * Positive action
     */
    getPositiveAction(): PositiveAction;
    /**
     * Gets content of aggregation {@link #getPrintAction printAction}.
     *
     * Print action
     */
    getPrintAction(): PrintAction;
    /**
     * Gets content of aggregation {@link #getSaveAction saveAction}.
     *
     * Save action
     */
    getSaveAction(): SaveAction;
    /**
     * Gets content of aggregation {@link #getSaveAsTileAction saveAsTileAction}.
     *
     * SaveAsTile button
     */
    getSaveAsTileAction(): Button;
    /**
     * Gets content of aggregation {@link #getSendEmailAction sendEmailAction}.
     *
     * SendEmail action
     */
    getSendEmailAction(): SendEmailAction;
    /**
     * Gets content of aggregation {@link #getSendMessageAction sendMessageAction}.
     *
     * SendMessage action
     */
    getSendMessageAction(): SendMessageAction;
    /**
     * Gets content of aggregation {@link #getShareInJamAction shareInJamAction}.
     *
     * ShareInJam action
     */
    getShareInJamAction(): ShareInJamAction;
    /**
     * Sets the aggregated {@link #getAddAction addAction}.
     */
    setAddAction(
      /**
       * The addAction to set
       */
      oAddAction: AddAction
    ): this;
    /**
     * Sets the aggregated {@link #getCancelAction cancelAction}.
     */
    setCancelAction(
      /**
       * The cancelAction to set
       */
      oCancelAction: CancelAction
    ): this;
    /**
     * Sets the aggregated {@link #getDeleteAction deleteAction}.
     */
    setDeleteAction(
      /**
       * The deleteAction to set
       */
      oDeleteAction: DeleteAction
    ): this;
    /**
     * Sets the aggregated {@link #getDiscussInJamAction discussInJamAction}.
     */
    setDiscussInJamAction(
      /**
       * The discussInJamAction to set
       */
      oDiscussInJamAction: DiscussInJamAction
    ): this;
    /**
     * Sets the aggregated {@link #getDraftIndicator draftIndicator}.
     */
    setDraftIndicator(
      /**
       * The draftIndicator to set
       */
      oDraftIndicator: DraftIndicator
    ): this;
    /**
     * Sets the aggregated {@link #getEditAction editAction}.
     */
    setEditAction(
      /**
       * The editAction to set
       */
      oEditAction: EditAction
    ): this;
    /**
     * Sets the aggregated {@link #getFavoriteAction favoriteAction}.
     */
    setFavoriteAction(
      /**
       * The favoriteAction to set
       */
      oFavoriteAction: FavoriteAction
    ): this;
    /**
     * Sets the aggregated {@link #getFlagAction flagAction}.
     */
    setFlagAction(
      /**
       * The flagAction to set
       */
      oFlagAction: FlagAction
    ): this;
    /**
     * Sets the aggregated {@link #getForwardAction forwardAction}.
     */
    setForwardAction(
      /**
       * The forwardAction to set
       */
      oForwardAction: ForwardAction
    ): this;
    /**
     * Sets the aggregated {@link #getMainAction mainAction}.
     */
    setMainAction(
      /**
       * The mainAction to set
       */
      oMainAction: MainAction
    ): this;
    /**
     * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
     */
    setMessagesIndicator(
      /**
       * The messagesIndicator to set
       */
      oMessagesIndicator: MessagesIndicator
    ): this;
    /**
     * Sets the aggregated {@link #getNegativeAction negativeAction}.
     */
    setNegativeAction(
      /**
       * The negativeAction to set
       */
      oNegativeAction: NegativeAction
    ): this;
    /**
     * Sets the aggregated {@link #getOpenInAction openInAction}.
     */
    setOpenInAction(
      /**
       * The openInAction to set
       */
      oOpenInAction: OpenInAction
    ): this;
    /**
     * Sets the aggregated {@link #getPagingAction pagingAction}.
     */
    setPagingAction(
      /**
       * The pagingAction to set
       */
      oPagingAction: PagingButton
    ): this;
    /**
     * Sets the aggregated {@link #getPositiveAction positiveAction}.
     */
    setPositiveAction(
      /**
       * The positiveAction to set
       */
      oPositiveAction: PositiveAction
    ): this;
    /**
     * Sets the aggregated {@link #getPrintAction printAction}.
     */
    setPrintAction(
      /**
       * The printAction to set
       */
      oPrintAction: PrintAction
    ): this;
    /**
     * Sets the aggregated {@link #getSaveAction saveAction}.
     */
    setSaveAction(
      /**
       * The saveAction to set
       */
      oSaveAction: SaveAction
    ): this;
    /**
     * Sets the aggregated {@link #getSaveAsTileAction saveAsTileAction}.
     */
    setSaveAsTileAction(
      /**
       * The saveAsTileAction to set
       */
      oSaveAsTileAction: Button
    ): this;
    /**
     * Sets the aggregated {@link #getSendEmailAction sendEmailAction}.
     */
    setSendEmailAction(
      /**
       * The sendEmailAction to set
       */
      oSendEmailAction: SendEmailAction
    ): this;
    /**
     * Sets the aggregated {@link #getSendMessageAction sendMessageAction}.
     */
    setSendMessageAction(
      /**
       * The sendMessageAction to set
       */
      oSendMessageAction: SendMessageAction
    ): this;
    /**
     * Sets the aggregated {@link #getShareInJamAction shareInJamAction}.
     */
    setShareInJamAction(
      /**
       * The shareInJamAction to set
       */
      oShareInJamAction: ShareInJamAction
    ): this;
  }

  export interface $FullscreenPageSettings extends $ShareMenuPageSettings {
    /**
     * Add action
     */
    addAction?: AddAction;

    /**
     * Main action
     */
    mainAction?: MainAction;

    /**
     * Positive action
     */
    positiveAction?: PositiveAction;

    /**
     * Negative action
     */
    negativeAction?: NegativeAction;

    /**
     * Negative action
     */
    forwardAction?: ForwardAction;

    /**
     * Edit action
     */
    editAction?: EditAction;

    /**
     * Save action
     */
    saveAction?: SaveAction;

    /**
     * Delete action
     */
    deleteAction?: DeleteAction;

    /**
     * Cancel action
     */
    cancelAction?: CancelAction;

    /**
     * Flag action
     */
    flagAction?: FlagAction;

    /**
     * Favorite action
     */
    favoriteAction?: FavoriteAction;

    /**
     * OpenIn action
     */
    openInAction?: OpenInAction;

    /**
     * DiscussInJam action
     */
    discussInJamAction?: DiscussInJamAction;

    /**
     * ShareInJam action
     */
    shareInJamAction?: ShareInJamAction;

    /**
     * SendEmail action
     */
    sendEmailAction?: SendEmailAction;

    /**
     * SendMessage action
     */
    sendMessageAction?: SendMessageAction;

    /**
     * Print action
     */
    printAction?: PrintAction;

    /**
     * MessagesIndicator
     */
    messagesIndicator?: MessagesIndicator;

    /**
     * SaveAsTile button
     */
    saveAsTileAction?: Button;

    /**
     * Paging action
     */
    pagingAction?: PagingButton;

    /**
     * DraftIndicator
     */
    draftIndicator?: DraftIndicator;
  }
}

declare module "sap/m/semantic/GroupAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A GroupAction is a {@link sap.m.Button} control enhanced with styling according to the semantics of a
   * common "Group" action.
   *
   * A GroupAction cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * Your app should listen to the `press` event of {@link sap.m.semantic.GroupAction} in order to trigger
   * the display of the grouping options.
   *
   * If your grouping options are a simple list of items and require single choice only, then you can consider
   * using a {@link sap.m.semantic.GroupSelect} instead.
   */
  export default class GroupAction
    extends SemanticButton
    implements semantic.IGroup {
    __implements__sap_m_semantic_IGroup: boolean;
    /**
     * Constructor for a new GroupAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $GroupActionSettings
    );
    /**
     * Constructor for a new GroupAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $GroupActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.GroupAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GroupAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.GroupAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $GroupActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/GroupSelect" {
  import {
    default as SemanticSelect,
    $SemanticSelectSettings,
  } from "sap/m/semantic/SemanticSelect";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A GroupSelect is a {@link sap.m.Select} control enhanced with styling according to the semantics of a
   * common "Group" acton.
   *
   * A GroupSelect cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * The grouping options should be added to the `items` aggregation of {@link sap.m.semantic.GroupSelect}
   * and will be displayed as a pop-up list with support for single-item selection. If this simple popup list
   * is not sufficient for your use case, you can implement your own custom dialog by using {@link sap.m.semantic.GroupAction}
   * to trigger the dialog opening.
   */
  export default class GroupSelect
    extends SemanticSelect
    implements semantic.IGroup {
    __implements__sap_m_semantic_IGroup: boolean;
    /**
     * Constructor for a new GroupSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $GroupSelectSettings
    );
    /**
     * Constructor for a new GroupSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $GroupSelectSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.GroupSelect with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, GroupSelect>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.GroupSelect.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $GroupSelectSettings extends $SemanticSelectSettings {}
}

declare module "sap/m/semantic/MainAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A MainAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class MainAction extends SemanticButton {
    /**
     * Constructor for a new MainAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MainActionSettings
    );
    /**
     * Constructor for a new MainAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MainActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.MainAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MainAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.MainAction.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Button text
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Button text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $MainActionSettings extends $SemanticButtonSettings {
    /**
     * Button text
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/semantic/MasterPage" {
  import {
    default as SemanticPage,
    $SemanticPageSettings,
  } from "sap/m/semantic/SemanticPage";

  import AddAction from "sap/m/semantic/AddAction";

  import CancelAction from "sap/m/semantic/CancelAction";

  import DeleteAction from "sap/m/semantic/DeleteAction";

  import EditAction from "sap/m/semantic/EditAction";

  import { semantic } from "sap/m/library";

  import ForwardAction from "sap/m/semantic/ForwardAction";

  import MainAction from "sap/m/semantic/MainAction";

  import MessagesIndicator from "sap/m/semantic/MessagesIndicator";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import MultiSelectAction from "sap/m/semantic/MultiSelectAction";

  import NegativeAction from "sap/m/semantic/NegativeAction";

  import PositiveAction from "sap/m/semantic/PositiveAction";

  import SaveAction from "sap/m/semantic/SaveAction";

  /**
   * @SINCE 1.30.0
   *
   * A MasterPage is a {@link sap.m.semantic.SemanticPage} that supports semantic content of the following
   * types:
   *
   *
   * 	 - {@link sap.m.semantic.AddAction}
   * 	 - {@link sap.m.semantic.MainAction}
   * 	 - {@link sap.m.semantic.PositiveAction}
   * 	 - {@link sap.m.semantic.NegativeAction}
   * 	 - {@link sap.m.semantic.ForwardAction}
   * 	 - {@link sap.m.semantic.EditAction}
   * 	 - {@link sap.m.semantic.SaveAction}
   * 	 - {@link sap.m.semantic.DeleteAction}
   * 	 - {@link sap.m.semantic.CancelAction}
   * 	 - {@link sap.m.semantic.MultiSelectAction}
   * 	 - {@link sap.m.semantic.FlagAction}
   * 	 - {@link sap.m.semantic.FavoriteAction}
   * 	 - {@link sap.m.semantic.SortAction}
   * 	 - {@link sap.m.semantic.SortSelect}
   * 	 - {@link sap.m.semantic.FilterAction}
   * 	 - {@link sap.m.semantic.FilterSelect}
   * 	 - {@link sap.m.semantic.GroupAction}
   * 	 - {@link sap.m.semantic.GroupSelect}
   * 	 - {@link sap.m.semantic.MessagesIndicator}
   */
  export default class MasterPage extends SemanticPage {
    /**
     * Constructor for a new MasterPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $MasterPageSettings
    );
    /**
     * Constructor for a new MasterPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $MasterPageSettings
    );

    /**
     * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
     */
    destroyAddAction(): this;
    /**
     * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
     */
    destroyCancelAction(): this;
    /**
     * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
     */
    destroyDeleteAction(): this;
    /**
     * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
     */
    destroyEditAction(): this;
    /**
     * Destroys the filter in the aggregation {@link #getFilter filter}.
     */
    destroyFilter(): this;
    /**
     * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
     */
    destroyForwardAction(): this;
    /**
     * Destroys the group in the aggregation {@link #getGroup group}.
     */
    destroyGroup(): this;
    /**
     * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
     */
    destroyMainAction(): this;
    /**
     * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
     */
    destroyMessagesIndicator(): this;
    /**
     * Destroys the multiSelectAction in the aggregation {@link #getMultiSelectAction multiSelectAction}.
     */
    destroyMultiSelectAction(): this;
    /**
     * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
     */
    destroyNegativeAction(): this;
    /**
     * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
     */
    destroyPositiveAction(): this;
    /**
     * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
     */
    destroySaveAction(): this;
    /**
     * Destroys the sort in the aggregation {@link #getSort sort}.
     */
    destroySort(): this;
    /**
     * Creates a new subclass of class sap.m.semantic.MasterPage with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MasterPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getAddAction addAction}.
     *
     * Add action
     */
    getAddAction(): AddAction;
    /**
     * Gets content of aggregation {@link #getCancelAction cancelAction}.
     *
     * Cancel action
     */
    getCancelAction(): CancelAction;
    /**
     * Gets content of aggregation {@link #getDeleteAction deleteAction}.
     *
     * Delete action
     */
    getDeleteAction(): DeleteAction;
    /**
     * Gets content of aggregation {@link #getEditAction editAction}.
     *
     * Edit action
     */
    getEditAction(): EditAction;
    /**
     * Gets content of aggregation {@link #getFilter filter}.
     *
     * Filter action
     */
    getFilter(): semantic.IFilter;
    /**
     * Gets content of aggregation {@link #getForwardAction forwardAction}.
     *
     * Forward action
     */
    getForwardAction(): ForwardAction;
    /**
     * Gets content of aggregation {@link #getGroup group}.
     *
     * Group action
     */
    getGroup(): semantic.IGroup;
    /**
     * Gets content of aggregation {@link #getMainAction mainAction}.
     *
     * Main action
     */
    getMainAction(): MainAction;
    /**
     * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
     *
     * MessagesIndicator
     */
    getMessagesIndicator(): MessagesIndicator;
    /**
     * Returns a metadata object for class sap.m.semantic.MasterPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getMultiSelectAction multiSelectAction}.
     *
     * MultiSelect action
     */
    getMultiSelectAction(): MultiSelectAction;
    /**
     * Gets content of aggregation {@link #getNegativeAction negativeAction}.
     *
     * Negative action
     */
    getNegativeAction(): NegativeAction;
    /**
     * Gets content of aggregation {@link #getPositiveAction positiveAction}.
     *
     * Positive action
     */
    getPositiveAction(): PositiveAction;
    /**
     * Gets content of aggregation {@link #getSaveAction saveAction}.
     *
     * Save action
     */
    getSaveAction(): SaveAction;
    /**
     * Gets content of aggregation {@link #getSort sort}.
     *
     * Sort action
     */
    getSort(): semantic.ISort;
    /**
     * Sets the aggregated {@link #getAddAction addAction}.
     */
    setAddAction(
      /**
       * The addAction to set
       */
      oAddAction: AddAction
    ): this;
    /**
     * Sets the aggregated {@link #getCancelAction cancelAction}.
     */
    setCancelAction(
      /**
       * The cancelAction to set
       */
      oCancelAction: CancelAction
    ): this;
    /**
     * Sets the aggregated {@link #getDeleteAction deleteAction}.
     */
    setDeleteAction(
      /**
       * The deleteAction to set
       */
      oDeleteAction: DeleteAction
    ): this;
    /**
     * Sets the aggregated {@link #getEditAction editAction}.
     */
    setEditAction(
      /**
       * The editAction to set
       */
      oEditAction: EditAction
    ): this;
    /**
     * Sets the aggregated {@link #getFilter filter}.
     */
    setFilter(
      /**
       * The filter to set
       */
      oFilter: semantic.IFilter
    ): this;
    /**
     * Sets the aggregated {@link #getForwardAction forwardAction}.
     */
    setForwardAction(
      /**
       * The forwardAction to set
       */
      oForwardAction: ForwardAction
    ): this;
    /**
     * Sets the aggregated {@link #getGroup group}.
     */
    setGroup(
      /**
       * The group to set
       */
      oGroup: semantic.IGroup
    ): this;
    /**
     * Sets the aggregated {@link #getMainAction mainAction}.
     */
    setMainAction(
      /**
       * The mainAction to set
       */
      oMainAction: MainAction
    ): this;
    /**
     * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
     */
    setMessagesIndicator(
      /**
       * The messagesIndicator to set
       */
      oMessagesIndicator: MessagesIndicator
    ): this;
    /**
     * Sets the aggregated {@link #getMultiSelectAction multiSelectAction}.
     */
    setMultiSelectAction(
      /**
       * The multiSelectAction to set
       */
      oMultiSelectAction: MultiSelectAction
    ): this;
    /**
     * Sets the aggregated {@link #getNegativeAction negativeAction}.
     */
    setNegativeAction(
      /**
       * The negativeAction to set
       */
      oNegativeAction: NegativeAction
    ): this;
    /**
     * Sets the aggregated {@link #getPositiveAction positiveAction}.
     */
    setPositiveAction(
      /**
       * The positiveAction to set
       */
      oPositiveAction: PositiveAction
    ): this;
    /**
     * Sets the aggregated {@link #getSaveAction saveAction}.
     */
    setSaveAction(
      /**
       * The saveAction to set
       */
      oSaveAction: SaveAction
    ): this;
    /**
     * Sets the aggregated {@link #getSort sort}.
     */
    setSort(
      /**
       * The sort to set
       */
      oSort: semantic.ISort
    ): this;
  }

  export interface $MasterPageSettings extends $SemanticPageSettings {
    /**
     * Add action
     */
    addAction?: AddAction;

    /**
     * Main action
     */
    mainAction?: MainAction;

    /**
     * Positive action
     */
    positiveAction?: PositiveAction;

    /**
     * Negative action
     */
    negativeAction?: NegativeAction;

    /**
     * MultiSelect action
     */
    multiSelectAction?: MultiSelectAction;

    /**
     * Forward action
     */
    forwardAction?: ForwardAction;

    /**
     * Edit action
     */
    editAction?: EditAction;

    /**
     * Save action
     */
    saveAction?: SaveAction;

    /**
     * Delete action
     */
    deleteAction?: DeleteAction;

    /**
     * Cancel action
     */
    cancelAction?: CancelAction;

    /**
     * Sort action
     */
    sort?: semantic.ISort;

    /**
     * Filter action
     */
    filter?: semantic.IFilter;

    /**
     * Group action
     */
    group?: semantic.IGroup;

    /**
     * MessagesIndicator
     */
    messagesIndicator?: MessagesIndicator;
  }
}

declare module "sap/m/semantic/MessagesIndicator" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A MessagesIndicator button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class MessagesIndicator extends SemanticButton {
    /**
     * Constructor for a new MessagesIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MessagesIndicatorSettings
    );
    /**
     * Constructor for a new MessagesIndicator.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MessagesIndicatorSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.MessagesIndicator with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MessagesIndicator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.MessagesIndicator.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $MessagesIndicatorSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/MultiSelectAction" {
  import {
    default as SemanticToggleButton,
    $SemanticToggleButtonSettings,
  } from "sap/m/semantic/SemanticToggleButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A MultiSelectAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class MultiSelectAction extends SemanticToggleButton {
    /**
     * Constructor for a new MultiSelectAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MultiSelectActionSettings
    );
    /**
     * Constructor for a new MultiSelectAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticToggleButton#constructor
     * sap.m.semantic.SemanticToggleButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $MultiSelectActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.MultiSelectAction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, MultiSelectAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.MultiSelectAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $MultiSelectActionSettings
    extends $SemanticToggleButtonSettings {}
}

declare module "sap/m/semantic/NegativeAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A NegativeAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class NegativeAction extends SemanticButton {
    /**
     * Constructor for a new NegativeAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $NegativeActionSettings
    );
    /**
     * Constructor for a new NegativeAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $NegativeActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.NegativeAction with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, NegativeAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.NegativeAction.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Button text
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Button text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $NegativeActionSettings extends $SemanticButtonSettings {
    /**
     * Button text
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/semantic/OpenInAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * An OpenInAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class OpenInAction extends SemanticButton {
    /**
     * Constructor for a new OpenInAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $OpenInActionSettings
    );
    /**
     * Constructor for a new OpenInAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $OpenInActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.OpenInAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OpenInAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.OpenInAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $OpenInActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/PositiveAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A PositiveAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class PositiveAction extends SemanticButton {
    /**
     * Constructor for a new PositiveAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $PositiveActionSettings
    );
    /**
     * Constructor for a new PositiveAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $PositiveActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.PositiveAction with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PositiveAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.PositiveAction.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Button text
     */
    getText(): string;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Button text
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
  }

  export interface $PositiveActionSettings extends $SemanticButtonSettings {
    /**
     * Button text
     */
    text?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/semantic/PrintAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A PrintAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class PrintAction extends SemanticButton {
    /**
     * Constructor for a new PrintAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $PrintActionSettings
    );
    /**
     * Constructor for a new PrintAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $PrintActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.PrintAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PrintAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.PrintAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $PrintActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/SaveAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A SaveAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SaveAction extends SemanticButton {
    /**
     * Constructor for a new SaveAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SaveActionSettings
    );
    /**
     * Constructor for a new SaveAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SaveActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SaveAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SaveAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SaveAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SaveActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/SemanticButton" {
  import {
    default as SemanticControl,
    $SemanticControlSettings,
  } from "sap/m/semantic/SemanticControl";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A semantic button is either a {@link sap.m.Button} or {@link sap.m.semantic.SemanticOverflowToolbarButton}
   * , eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SemanticButton extends SemanticControl {
    /**
     * Constructor for a new SemanticButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticButtonSettings
    );
    /**
     * Constructor for a new SemanticButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.semantic.SemanticButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticButton` itself.
     *
     * See {@link sap.m.Button#event:press}
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.semantic.SemanticButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.semantic.SemanticButton with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SemanticButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * See {@link sap.m.Button#enabled}
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns a metadata object for class sap.m.semantic.SemanticButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * See {@link sap.m.Button#enabled}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.semantic.SemanticButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticButton` itself.
     *
     * See {@link sap.m.Button#event:press}
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SemanticButtonSettings extends $SemanticControlSettings {
    /**
     * See {@link sap.m.Button#enabled}
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * See {@link sap.m.Button#event:press}
     */
    press?: Function;
  }
}

declare module "sap/m/semantic/SemanticControl" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A semantic control is an abstraction for either a {@link sap.m.semantic.SemanticButton} or {@link sap.m.semantic.SemanticSelect}
   * , eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SemanticControl extends UI5Element {
    /**
     * Constructor for a new SemanticControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SemanticControlSettings
    );
    /**
     * Constructor for a new SemanticControl.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SemanticControlSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SemanticControl with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SemanticControl>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SemanticControl.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Implementation of a commonly used function that adapts `sap.ui.core.Element` to provide DOM reference
     * for opening popovers.
     */
    getPopupAnchorDomRef(): Element;
    /**
     * Gets current value of property {@link #getVisible visible}.
     *
     * See {@link sap.ui.core.Control#visible}
     *
     * Default value is `true`.
     */
    getVisible(): boolean;
    /**
     * Sets a new value for property {@link #getVisible visible}.
     *
     * See {@link sap.ui.core.Control#visible}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisible(
      /**
       * New value for property `visible`
       */
      bVisible?: boolean
    ): this;
  }

  export interface $SemanticControlSettings extends $ElementSettings {
    /**
     * See {@link sap.ui.core.Control#visible}
     */
    visible?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/semantic/SemanticPage" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Button from "sap/m/Button";

  import { PageBackgroundDesign, semantic, IBar } from "sap/m/library";

  import PageAccessibleLandmarkInfo from "sap/m/PageAccessibleLandmarkInfo";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TitleLevel } from "sap/ui/core/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * An enhanced {@link sap.m.Page}, that can contain controls with semantic meaning, see {@link sap.m.semantic.SemanticControl}.
   *
   * **Note:** This control implements the SAP Fiori 1.0 design guidelines. For SAP Fiori 2.0, see the {@link
   * sap.f.semantic.SemanticPage}.
   *
   * Overview:
   *
   * The main functionality of the `SemanticPage` is to predefine the placement, behavior and styles of the
   * page elements.
   *
   * Content specified in the semantic aggregations will be automatically positioned in dedicated sections
   * of the footer or the header of the page.
   *
   * Structure:
   *
   * The semantics of the content are the following:
   * 	 - Visual properties (for example, `AddAction` will be styled as an icon button)
   * 	 - Position in the page (UX guidelines specify that some buttons should be in the header only, while
   * 			others are in the footer or the "share" menu, so we do the correct positioning)
   * 	 - Sequence order (UX guidelines define a specific sequence order of semantic controls with respect
   * 			to each other)
   * 	 - Default localized tooltip for icon-only buttons
   * 	 - Overflow behavior (UX guidelines define which buttons are allowed to go to the overflow of the toolbar
   * 			when the screen gets narrower). For icon buttons, we ensure that the text label of the button appears
   * 			when the button is in overflow, as specified by UX.
   * 	 - Screen reader support (invisible text for reading the semantic type)
   *
   * In addition to the predefined semantic controls, the `SemanticPage` can host also custom app controls.
   * It preserves most of the API of the {@link sap.m.Page} for specifying page content.
   *
   * Usage:
   *
   * The app developer only has to specify the action type, and the required styling and positioning are automatically
   * added.
   */
  export default class SemanticPage extends Control {
    /**
     * Constructor for a new `SemanticPage`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:4a97a07ec8f5441d901994d82eaab1f5 Semantic Page}
     * 	{@link topic:84f3d52f492648d5b594e4f45dca7727 Semantic Pages}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticPageSettings
    );
    /**
     * Constructor for a new `SemanticPage`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:4a97a07ec8f5441d901994d82eaab1f5 Semantic Page}
     * 	{@link topic:84f3d52f492648d5b594e4f45dca7727 Semantic Pages}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticPageSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Adds some customFooterContent to the aggregation {@link #getCustomFooterContent customFooterContent}.
     */
    addCustomFooterContent(
      /**
       * The customFooterContent to add; if empty, nothing is inserted
       */
      oCustomFooterContent: Button
    ): this;
    /**
     * Adds some customHeaderContent to the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     */
    addCustomHeaderContent(
      /**
       * The customHeaderContent to add; if empty, nothing is inserted
       */
      oCustomHeaderContent: Button
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.semantic.SemanticPage`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticPage` itself.
     *
     * See {@link sap.m.Page#navButtonPress}
     */
    attachNavButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticPage` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Destroys all the customFooterContent in the aggregation {@link #getCustomFooterContent customFooterContent}.
     */
    destroyCustomFooterContent(): this;
    /**
     * Destroys all the customHeaderContent in the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     */
    destroyCustomHeaderContent(): this;
    /**
     * Destroys the landmarkInfo in the aggregation {@link #getLandmarkInfo landmarkInfo}.
     */
    destroyLandmarkInfo(): this;
    /**
     * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
     */
    destroySubHeader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.semantic.SemanticPage`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.semantic.SemanticPage with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SemanticPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
     */
    fireNavButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the backgound color of the page. For more information, see {@link sap.m.Page#backgroundDesign}.
     *
     * Default value is `Standard`.
     */
    getBackgroundDesign():
      | PageBackgroundDesign
      | keyof typeof PageBackgroundDesign;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * See {@link sap.m.Page#content}
     */
    getContent(): Control[];
    /**
     * Gets content of aggregation {@link #getCustomFooterContent customFooterContent}.
     *
     * Custom footer buttons
     */
    getCustomFooterContent(): Button[];
    /**
     * Gets content of aggregation {@link #getCustomHeaderContent customHeaderContent}.
     *
     * Custom header buttons
     */
    getCustomHeaderContent(): Button[];
    /**
     * Gets current value of property {@link #getEnableScrolling enableScrolling}.
     *
     * See {@link sap.m.Page#enableScrolling}
     *
     * Default value is `true`.
     */
    getEnableScrolling(): boolean;
    /**
     * @SINCE 1.40.1
     *
     * Gets current value of property {@link #getFloatingFooter floatingFooter}.
     *
     * Determines whether the floating footer behavior is enabled. If set to `true`, the content is visible
     * when it's underneath the footer.
     *
     * Default value is `false`.
     */
    getFloatingFooter(): boolean;
    /**
     * Gets content of aggregation {@link #getLandmarkInfo landmarkInfo}.
     *
     * Accessible landmark settings to be applied to the containers of the `sap.m.Page` control.
     *
     * If not set, no landmarks will be written.
     */
    getLandmarkInfo(): PageAccessibleLandmarkInfo;
    /**
     * Returns a metadata object for class sap.m.semantic.SemanticPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getSemanticRuleSet semanticRuleSet}.
     *
     * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
     *
     * Default value is `Classic`.
     */
    getSemanticRuleSet():
      | semantic.SemanticRuleSetType
      | keyof typeof semantic.SemanticRuleSetType;
    /**
     * Gets current value of property {@link #getShowFooter showFooter}.
     *
     * Hides or shows the page footer
     *
     * Default value is `true`.
     */
    getShowFooter(): boolean;
    /**
     * Gets current value of property {@link #getShowNavButton showNavButton}.
     *
     * See {@link sap.m.Page#showNavButton}
     *
     * Default value is `false`.
     */
    getShowNavButton(): boolean;
    /**
     * Gets current value of property {@link #getShowSubHeader showSubHeader}.
     *
     * See {@link sap.m.Page#showSubHeader}
     *
     * Default value is `true`.
     */
    getShowSubHeader(): boolean;
    /**
     * Gets content of aggregation {@link #getSubHeader subHeader}.
     *
     * See {@link sap.m.Page#subHeader}
     */
    getSubHeader(): IBar;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * See {@link sap.m.Page#title}
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleLevel titleLevel}.
     *
     * See {@link sap.m.Page#titleLevel}
     *
     * Default value is `Auto`.
     */
    getTitleLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getCustomFooterContent customFooterContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfCustomFooterContent(
      /**
       * The customFooterContent whose index is looked for
       */
      oCustomFooterContent: Button
    ): int;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfCustomHeaderContent(
      /**
       * The customHeaderContent whose index is looked for
       */
      oCustomHeaderContent: Button
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customFooterContent into the aggregation {@link #getCustomFooterContent customFooterContent}.
     */
    insertCustomFooterContent(
      /**
       * The customFooterContent to insert; if empty, nothing is inserted
       */
      oCustomFooterContent: Button,
      /**
       * The `0`-based index the customFooterContent should be inserted at; for a negative value of `iIndex`,
       * the customFooterContent is inserted at position 0; for a value greater than the current size of the aggregation,
       * the customFooterContent is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a customHeaderContent into the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     */
    insertCustomHeaderContent(
      /**
       * The customHeaderContent to insert; if empty, nothing is inserted
       */
      oCustomHeaderContent: Button,
      /**
       * The `0`-based index the customHeaderContent should be inserted at; for a negative value of `iIndex`,
       * the customHeaderContent is inserted at position 0; for a value greater than the current size of the aggregation,
       * the customHeaderContent is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomFooterContent customFooterContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCustomFooterContent(): Button[];
    /**
     * Removes all the controls from the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCustomHeaderContent(): Button[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Removes a customFooterContent from the aggregation {@link #getCustomFooterContent customFooterContent}.
     */
    removeCustomFooterContent(
      /**
       * The customFooterContent to remove or its index or id
       */
      vCustomFooterContent: int | string | Button
    ): Button;
    /**
     * Removes a customHeaderContent from the aggregation {@link #getCustomHeaderContent customHeaderContent}.
     */
    removeCustomHeaderContent(
      /**
       * The customHeaderContent to remove or its index or id
       */
      vCustomHeaderContent: int | string | Button
    ): Button;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the backgound color of the page. For more information, see {@link sap.m.Page#backgroundDesign}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?:
        | PageBackgroundDesign
        | keyof typeof PageBackgroundDesign
    ): this;
    /**
     * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
     *
     * See {@link sap.m.Page#enableScrolling}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableScrolling(
      /**
       * New value for property `enableScrolling`
       */
      bEnableScrolling?: boolean
    ): this;
    /**
     * @SINCE 1.40.1
     *
     * Sets a new value for property {@link #getFloatingFooter floatingFooter}.
     *
     * Determines whether the floating footer behavior is enabled. If set to `true`, the content is visible
     * when it's underneath the footer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFloatingFooter(
      /**
       * New value for property `floatingFooter`
       */
      bFloatingFooter?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getLandmarkInfo landmarkInfo}.
     */
    setLandmarkInfo(
      /**
       * The landmarkInfo to set
       */
      oLandmarkInfo: PageAccessibleLandmarkInfo
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getSemanticRuleSet semanticRuleSet}.
     *
     * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Classic`.
     */
    setSemanticRuleSet(
      /**
       * New value for property `semanticRuleSet`
       */
      sSemanticRuleSet?:
        | semantic.SemanticRuleSetType
        | keyof typeof semantic.SemanticRuleSetType
    ): this;
    /**
     * Sets a new value for property {@link #getShowFooter showFooter}.
     *
     * Hides or shows the page footer
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowFooter(
      /**
       * New value for property `showFooter`
       */
      bShowFooter?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowNavButton showNavButton}.
     *
     * See {@link sap.m.Page#showNavButton}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowNavButton(
      /**
       * New value for property `showNavButton`
       */
      bShowNavButton?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSubHeader showSubHeader}.
     *
     * See {@link sap.m.Page#showSubHeader}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowSubHeader(
      /**
       * New value for property `showSubHeader`
       */
      bShowSubHeader?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getSubHeader subHeader}.
     */
    setSubHeader(
      /**
       * The subHeader to set
       */
      oSubHeader: IBar
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * See {@link sap.m.Page#title}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleLevel titleLevel}.
     *
     * See {@link sap.m.Page#titleLevel}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleLevel(
      /**
       * New value for property `titleLevel`
       */
      sTitleLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navButtonPress navButtonPress} event of this
     * `sap.m.semantic.SemanticPage`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticPage` itself.
     *
     * See {@link sap.m.Page#navButtonPress}
     */
    attachNavButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticPage` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SemanticPageSettings extends $ControlSettings {
    /**
     * See {@link sap.m.Page#title}
     */
    title?: string | PropertyBindingInfo;

    /**
     * See {@link sap.m.Page#titleLevel}
     */
    titleLevel?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * See {@link sap.m.Page#showNavButton}
     */
    showNavButton?: boolean | PropertyBindingInfo;

    /**
     * See {@link sap.m.Page#showSubHeader}
     */
    showSubHeader?: boolean | PropertyBindingInfo;

    /**
     * See {@link sap.m.Page#enableScrolling}
     */
    enableScrolling?: boolean | PropertyBindingInfo;

    /**
     * Hides or shows the page footer
     */
    showFooter?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.40.1
     *
     * Determines whether the floating footer behavior is enabled. If set to `true`, the content is visible
     * when it's underneath the footer.
     */
    floatingFooter?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
     */
    semanticRuleSet?:
      | (
          | semantic.SemanticRuleSetType
          | keyof typeof semantic.SemanticRuleSetType
        )
      | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Determines the backgound color of the page. For more information, see {@link sap.m.Page#backgroundDesign}.
     */
    backgroundDesign?:
      | (PageBackgroundDesign | keyof typeof PageBackgroundDesign)
      | PropertyBindingInfo;

    /**
     * See {@link sap.m.Page#subHeader}
     */
    subHeader?: IBar;

    /**
     * See {@link sap.m.Page#content}
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Custom header buttons
     */
    customHeaderContent?: Button[] | Button | AggregationBindingInfo;

    /**
     * Custom footer buttons
     */
    customFooterContent?: Button[] | Button | AggregationBindingInfo;

    /**
     * Accessible landmark settings to be applied to the containers of the `sap.m.Page` control.
     *
     * If not set, no landmarks will be written.
     */
    landmarkInfo?: PageAccessibleLandmarkInfo;

    /**
     * See {@link sap.m.Page#navButtonPress}
     */
    navButtonPress?: Function;
  }
}

declare module "sap/m/semantic/SemanticSelect" {
  import {
    default as SemanticControl,
    $SemanticControlSettings,
  } from "sap/m/semantic/SemanticControl";

  import Item from "sap/ui/core/Item";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  /**
   * @SINCE 1.30
   *
   * A semantic select is a {@link sap.m.Select} eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SemanticSelect extends SemanticControl {
    /**
     * Constructor for a new SemanticSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticSelectSettings
    );
    /**
     * Constructor for a new SemanticSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticSelectSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Item
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.semantic.SemanticSelect`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticSelect` itself.
     *
     * See {@link sap.m.Select#event:change}
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticSelect` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.semantic.SemanticSelect`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.semantic.SemanticSelect with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SemanticSelect>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item.
         */
        selectedItem?: Item;
      }
    ): this;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * See {@link sap.m.Select#getEnabled}
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * See {@link sap.m.Select#getItems}
     */
    getItems(): Item[];
    /**
     * Returns a metadata object for class sap.m.semantic.SemanticSelect.
     */
    static getMetadata(): ElementMetadata;
    /**
     * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem},
     * or `null`.
     */
    getSelectedItem(): ID;
    /**
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * See {@link sap.m.Select#getSelectedKey}
     *
     * Default value is `empty string`.
     */
    getSelectedKey(): string;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Item
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Item,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): Item[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | Item
    ): Item;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * See {@link sap.m.Select#getEnabled}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets the associated {@link #getSelectedItem selectedItem}.
     */
    setSelectedItem(
      /**
       * ID of an element which becomes the new target of this selectedItem association; alternatively, an element
       * instance may be given
       */
      oSelectedItem: ID | Item
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedKey selectedKey}.
     *
     * See {@link sap.m.Select#getSelectedKey}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`
       */
      sSelectedKey?: string
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.semantic.SemanticSelect`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.semantic.SemanticSelect` itself.
     *
     * See {@link sap.m.Select#event:change}
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.semantic.SemanticSelect` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SemanticSelectSettings extends $SemanticControlSettings {
    /**
     * See {@link sap.m.Select#getEnabled}
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * See {@link sap.m.Select#getSelectedKey}
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * See {@link sap.m.Select#getItems}
     */
    items?: Item[] | Item | AggregationBindingInfo;

    /**
     * See {@link sap.m.Select#getSelectedItem}
     */
    selectedItem?: Item | string;

    /**
     * See {@link sap.m.Select#event:change}
     */
    change?: Function;
  }
}

declare module "sap/m/semantic/SemanticToggleButton" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A SemanticToggleButton is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SemanticToggleButton extends SemanticButton {
    /**
     * Constructor for a new SemanticToggleButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticToggleButtonSettings
    );
    /**
     * Constructor for a new SemanticToggleButton.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SemanticToggleButtonSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SemanticToggleButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SemanticToggleButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPressed pressed}.
     *
     * The property is “true” when the control is toggled. The default state of this property is "false".
     *
     * Default value is `false`.
     */
    getPressed(): boolean;
    /**
     * Sets a new value for property {@link #getPressed pressed}.
     *
     * The property is “true” when the control is toggled. The default state of this property is "false".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPressed(
      /**
       * New value for property `pressed`
       */
      bPressed?: boolean
    ): this;
  }

  export interface $SemanticToggleButtonSettings
    extends $SemanticButtonSettings {
    /**
     * The property is “true” when the control is toggled. The default state of this property is "false".
     */
    pressed?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/semantic/SendEmailAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A SendEmailAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SendEmailAction extends SemanticButton {
    /**
     * Constructor for a new SendEmailAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SendEmailActionSettings
    );
    /**
     * Constructor for a new SendEmailAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SendEmailActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SendEmailAction with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SendEmailAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SendEmailAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SendEmailActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/SendMessageAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A SendMessageAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class SendMessageAction extends SemanticButton {
    /**
     * Constructor for a new SendMessageAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SendMessageActionSettings
    );
    /**
     * Constructor for a new SendMessageAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SendMessageActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SendMessageAction with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SendMessageAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SendMessageAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SendMessageActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/ShareInJamAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A ShareInJamAction button has default semantic-specific properties and is eligible for aggregation content
   * of a {@link sap.m.semantic.SemanticPage}.
   */
  export default class ShareInJamAction extends SemanticButton {
    /**
     * Constructor for a new ShareInJamAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $ShareInJamActionSettings
    );
    /**
     * Constructor for a new ShareInJamAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $ShareInJamActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.ShareInJamAction with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ShareInJamAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.ShareInJamAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $ShareInJamActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/ShareMenuPage" {
  import {
    default as SemanticPage,
    $SemanticPageSettings,
  } from "sap/m/semantic/SemanticPage";

  import Button from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { AggregationBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30.0
   *
   * A ShareMenuPage is a {@link sap.m.semantic.SemanticPage} with support for "share" menu in the footer.
   */
  export default class ShareMenuPage extends SemanticPage {
    /**
     * Constructor for a new ShareMenuPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ShareMenuPageSettings
    );
    /**
     * Constructor for a new ShareMenuPage
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ShareMenuPageSettings
    );

    /**
     * Adds some customShareMenuContent to the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     */
    addCustomShareMenuContent(
      /**
       * The customShareMenuContent to add; if empty, nothing is inserted
       */
      oCustomShareMenuContent: Button
    ): this;
    /**
     * Destroys all the customShareMenuContent in the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     */
    destroyCustomShareMenuContent(): this;
    /**
     * Creates a new subclass of class sap.m.semantic.ShareMenuPage with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ShareMenuPage>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     *
     * Custom share menu buttons
     */
    getCustomShareMenuContent(): Button[];
    /**
     * Returns a metadata object for class sap.m.semantic.ShareMenuPage.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Checks for the provided `sap.m.Button` in the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfCustomShareMenuContent(
      /**
       * The customShareMenuContent whose index is looked for
       */
      oCustomShareMenuContent: Button
    ): int;
    /**
     * Inserts a customShareMenuContent into the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     */
    insertCustomShareMenuContent(
      /**
       * The customShareMenuContent to insert; if empty, nothing is inserted
       */
      oCustomShareMenuContent: Button,
      /**
       * The `0`-based index the customShareMenuContent should be inserted at; for a negative value of `iIndex`,
       * the customShareMenuContent is inserted at position 0; for a value greater than the current size of the
       * aggregation, the customShareMenuContent is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCustomShareMenuContent(): Button[];
    /**
     * Removes a customShareMenuContent from the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
     */
    removeCustomShareMenuContent(
      /**
       * The customShareMenuContent to remove or its index or id
       */
      vCustomShareMenuContent: int | string | Button
    ): Button;
  }

  export interface $ShareMenuPageSettings extends $SemanticPageSettings {
    /**
     * Custom share menu buttons
     */
    customShareMenuContent?: Button[] | Button | AggregationBindingInfo;
  }
}

declare module "sap/m/semantic/SortAction" {
  import {
    default as SemanticButton,
    $SemanticButtonSettings,
  } from "sap/m/semantic/SemanticButton";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A SortAction is a {@link sap.m.Button} control enhanced with styling according to the semantics of a
   * common "Sort" action.
   *
   * A SortAction cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * Your app should listen to the `press` event of {@link sap.m.semantic.SortAction} in order to trigger
   * the display of the sorting options.
   *
   * If your sorting options are a simple list of items and require single choice only, then you can consider
   * using a {@link sap.m.semantic.SortSelect} instead.
   */
  export default class SortAction
    extends SemanticButton
    implements semantic.ISort {
    __implements__sap_m_semantic_ISort: boolean;
    /**
     * Constructor for a new SortAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SortActionSettings
    );
    /**
     * Constructor for a new SortAction.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor
     * sap.m.semantic.SemanticButton} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SortActionSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SortAction with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SortAction>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SortAction.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SortActionSettings extends $SemanticButtonSettings {}
}

declare module "sap/m/semantic/SortSelect" {
  import {
    default as SemanticSelect,
    $SemanticSelectSettings,
  } from "sap/m/semantic/SemanticSelect";

  import { semantic } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.30.0
   *
   * A SortSelect is a {@link sap.m.Select} control enhanced with styling according to the semantics of a
   * common "Sort" acton.
   *
   * A SortSelect cannot be used independently but only as aggregation content of a {@link sap.m.semantic.SemanticPage}.
   *
   * The sorting options should be added to the `items` aggregation of {@link sap.m.semantic.SortSelect} and
   * will be displayed as a pop-up list with support for single-item selection. If this simple popup list
   * is not sufficient for your use case, you can implement your own custom dialog by using {@link sap.m.semantic.SortAction}
   * to trigger the dialog opening.
   */
  export default class SortSelect
    extends SemanticSelect
    implements semantic.ISort {
    __implements__sap_m_semantic_ISort: boolean;
    /**
     * Constructor for a new SortSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SortSelectSettings
    );
    /**
     * Constructor for a new SortSelect.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.semantic.SemanticSelect#constructor
     * sap.m.semantic.SemanticSelect} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Optional initial settings for the new control: a map/JSON-object with initial property values, event
       * listeners etc. for the new object
       */
      mSettings?: $SortSelectSettings
    );

    /**
     * Creates a new subclass of class sap.m.semantic.SortSelect with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SortSelect>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.semantic.SortSelect.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SortSelectSettings extends $SemanticSelectSettings {}
}

declare module "sap/m/Shell" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSColor, URI, TitleLevel } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   *
   * The Shell control can be used as root element of applications. It can contain an App or a `SplitApp`
   * control. The Shell provides some overarching functionality for the overall application and takes care
   * of visual adaptation, such as a frame around the App, on desktop browser platforms.
   */
  export default class Shell extends Control {
    /**
     * Constructor for a new Shell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ShellSettings
    );
    /**
     * Constructor for a new Shell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ShellSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:logout logout} event of this `sap.m.Shell`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Shell` itself.
     *
     * Fires when the user presses the logout button/link.
     */
    attachLogout(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Shell` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the app in the aggregation {@link #getApp app}.
     */
    destroyApp(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:logout logout} event of this `sap.m.Shell`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLogout(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Shell with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Shell>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:logout logout} to attached listeners.
     */
    fireLogout(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getApp app}.
     *
     * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
     */
    getApp(): Control;
    /**
     * Gets current value of property {@link #getAppWidthLimited appWidthLimited}.
     *
     * Determines whether the width of the content (the aggregated App) should be limited or extended to the
     * full screen width.
     *
     * Default value is `true`.
     */
    getAppWidthLimited(): boolean;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Defines the background color of the Shell. If set, this color will override the default background defined
     * by the theme. This should only be set when really required. Any configured background image will be placed
     * above this colored background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     */
    getBackgroundColor(): CSSColor;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * Defines the background image of the Shell. If set, this image will override the default background defined
     * by the theme. This should only be set when really required. This background image will be placed above
     * any color set for the background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     */
    getBackgroundImage(): URI;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and
     * 1 (fully opaque). This can be used to improve readability of the Shell content by making the background
     * image partly transparent.
     *
     * Default value is `1`.
     */
    getBackgroundOpacity(): float;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Determines whether the background image (if configured) should be proportionally stretched to cover the
     * whole Shell (false, default) or whether it should be tiled (true).
     *
     * Default value is `false`.
     */
    getBackgroundRepeat(): boolean;
    /**
     * Gets current value of property {@link #getHeaderRightText headerRightText}.
     *
     * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of
     * the header (if there is enough space to display the header at all - this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden).
     */
    getHeaderRightText(): string;
    /**
     * Gets current value of property {@link #getHomeIcon homeIcon}.
     *
     * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop
     * browsers.
     *
     * This property should be only set once, and as early as possible. Subsequent calls replace the previous
     * icon settings and may lead to different behavior depending on the browser.
     *
     * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be
     * given as desktop browser bookmark icon (other file formats may not work in all browsers). The `precomposed`
     * flag defines whether there is already a glow effect contained in the home screen images (or whether iOS
     * should add such an effect). The given structure could look like this: { 'phone':'phone-icon_57x57.png',
     * 'phone@2':'phone-retina_114x114.png', 'tablet':'tablet-icon_72x72.png', 'tablet@2':'tablet-retina_144x144.png',
     * 'precomposed':true, 'favicon':'favicon.ico' }
     *
     * See jQuery.sap.setIcons() for full documentation.
     */
    getHomeIcon(): object;
    /**
     * Gets current value of property {@link #getLogo logo}.
     *
     * Defines the logo to be displayed next to the App when the screen is sufficiently large.
     *
     * Note: If property value isn't set, then the logo address is taken from the theme parameters. For reference
     * please see: {@link sap.ui.core.theming.Parameters}
     */
    getLogo(): URI;
    /**
     * Returns a metadata object for class sap.m.Shell.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getShowLogout showLogout}.
     *
     * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden.
     *
     * Default value is `true`.
     */
    getShowLogout(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the application title, which may or may not be displayed outside the actual application, depending
     * on the available screen size.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     *
     * Default value is `H1`.
     */
    getTitleLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Sets the aggregated {@link #getApp app}.
     */
    setApp(
      /**
       * The app to set
       */
      oApp: Control
    ): this;
    /**
     * Sets a new value for property {@link #getAppWidthLimited appWidthLimited}.
     *
     * Determines whether the width of the content (the aggregated App) should be limited or extended to the
     * full screen width.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAppWidthLimited(
      /**
       * New value for property `appWidthLimited`
       */
      bAppWidthLimited?: boolean
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Defines the background color of the Shell. If set, this color will override the default background defined
     * by the theme. This should only be set when really required. Any configured background image will be placed
     * above this colored background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: CSSColor
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * Defines the background image of the Shell. If set, this image will override the default background defined
     * by the theme. This should only be set when really required. This background image will be placed above
     * any color set for the background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and
     * 1 (fully opaque). This can be used to improve readability of the Shell content by making the background
     * image partly transparent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setBackgroundOpacity(
      /**
       * New value for property `backgroundOpacity`
       */
      fBackgroundOpacity?: float
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Determines whether the background image (if configured) should be proportionally stretched to cover the
     * whole Shell (false, default) or whether it should be tiled (true).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setBackgroundRepeat(
      /**
       * New value for property `backgroundRepeat`
       */
      bBackgroundRepeat?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeaderRightText headerRightText}.
     *
     * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of
     * the header (if there is enough space to display the header at all - this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeaderRightText(
      /**
       * New value for property `headerRightText`
       */
      sHeaderRightText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHomeIcon homeIcon}.
     *
     * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop
     * browsers.
     *
     * This property should be only set once, and as early as possible. Subsequent calls replace the previous
     * icon settings and may lead to different behavior depending on the browser.
     *
     * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be
     * given as desktop browser bookmark icon (other file formats may not work in all browsers). The `precomposed`
     * flag defines whether there is already a glow effect contained in the home screen images (or whether iOS
     * should add such an effect). The given structure could look like this: { 'phone':'phone-icon_57x57.png',
     * 'phone@2':'phone-retina_114x114.png', 'tablet':'tablet-icon_72x72.png', 'tablet@2':'tablet-retina_144x144.png',
     * 'precomposed':true, 'favicon':'favicon.ico' }
     *
     * See jQuery.sap.setIcons() for full documentation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHomeIcon(
      /**
       * New value for property `homeIcon`
       */
      oHomeIcon?: object
    ): this;
    /**
     * Sets a new value for property {@link #getLogo logo}.
     *
     * Defines the logo to be displayed next to the App when the screen is sufficiently large.
     *
     * Note: If property value isn't set, then the logo address is taken from the theme parameters. For reference
     * please see: {@link sap.ui.core.theming.Parameters}
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLogo(
      /**
       * New value for property `logo`
       */
      sLogo?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getShowLogout showLogout}.
     *
     * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowLogout(
      /**
       * New value for property `showLogout`
       */
      bShowLogout?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the application title, which may or may not be displayed outside the actual application, depending
     * on the available screen size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitleLevel titleLevel}.
     *
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `H1`.
     */
    setTitleLevel(
      /**
       * New value for property `titleLevel`
       */
      sTitleLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:logout logout} event of this `sap.m.Shell`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Shell` itself.
     *
     * Fires when the user presses the logout button/link.
     */
    attachLogout(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Shell` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ShellSettings extends $ControlSettings {
    /**
     * Defines the application title, which may or may not be displayed outside the actual application, depending
     * on the available screen size.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the logo to be displayed next to the App when the screen is sufficiently large.
     *
     * Note: If property value isn't set, then the logo address is taken from the theme parameters. For reference
     * please see: {@link sap.ui.core.theming.Parameters}
     */
    logo?: URI | PropertyBindingInfo;

    /**
     * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden.
     */
    showLogout?: boolean | PropertyBindingInfo;

    /**
     * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of
     * the header (if there is enough space to display the header at all - this only happens on very tall screens
     * (1568px height), otherwise, it is always hidden).
     */
    headerRightText?: string | PropertyBindingInfo;

    /**
     * Determines whether the width of the content (the aggregated App) should be limited or extended to the
     * full screen width.
     */
    appWidthLimited?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Defines the background color of the Shell. If set, this color will override the default background defined
     * by the theme. This should only be set when really required. Any configured background image will be placed
     * above this colored background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     */
    backgroundColor?: CSSColor | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Defines the background image of the Shell. If set, this image will override the default background defined
     * by the theme. This should only be set when really required. This background image will be placed above
     * any color set for the background. Use the backgroundRepeat property to define whether this image should
     * be stretched to cover the complete Shell or whether it should be tiled.
     */
    backgroundImage?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Determines whether the background image (if configured) should be proportionally stretched to cover the
     * whole Shell (false, default) or whether it should be tiled (true).
     */
    backgroundRepeat?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and
     * 1 (fully opaque). This can be used to improve readability of the Shell content by making the background
     * image partly transparent.
     */
    backgroundOpacity?: float | PropertyBindingInfo;

    /**
     * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop
     * browsers.
     *
     * This property should be only set once, and as early as possible. Subsequent calls replace the previous
     * icon settings and may lead to different behavior depending on the browser.
     *
     * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be
     * given as desktop browser bookmark icon (other file formats may not work in all browsers). The `precomposed`
     * flag defines whether there is already a glow effect contained in the home screen images (or whether iOS
     * should add such an effect). The given structure could look like this: { 'phone':'phone-icon_57x57.png',
     * 'phone@2':'phone-retina_114x114.png', 'tablet':'tablet-icon_72x72.png', 'tablet@2':'tablet-retina_144x144.png',
     * 'precomposed':true, 'favicon':'favicon.ico' }
     *
     * See jQuery.sap.setIcons() for full documentation.
     */
    homeIcon?: object | PropertyBindingInfo;

    /**
     * Defines the semantic level of the title.
     *
     * This information is used by assistive technologies, such as screen readers to create a hierarchical site
     * map for faster navigation. Depending on this setting an HTML h1-h6 element is used.
     */
    titleLevel?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
     */
    app?: Control;

    /**
     * Fires when the user presses the logout button/link.
     */
    logout?: Function;
  }
}

declare module "sap/m/SinglePlanningCalendar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import CalendarAppointment from "sap/ui/unified/CalendarAppointment";

  import DateTypeRange from "sap/ui/unified/DateTypeRange";

  import SinglePlanningCalendarView from "sap/m/SinglePlanningCalendarView";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PlanningCalendarStickyMode } from "sap/m/library";

  import PlanningCalendarLegend from "sap/m/PlanningCalendarLegend";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.61
   *
   * Displays a calendar of a single entity (such as person, resource) for the selected time interval.
   *
   * Overview:
   *
   * **Note:** The `SinglePlanningCalendar` uses parts of the `sap.ui.unified` library. This library will
   * be loaded after the `SinglePlanningCalendar`, if it wasn't previously loaded. This could lead to a waiting
   * time when a `SinglePlanningCalendar` is used for the first time. To prevent this, apps using the `SinglePlanningCalendar`
   * must also load the `sap.ui.unified` library.
   *
   * The `SinglePlanningCalendar` has the following structure:
   *
   *
   * 	A `PlanningCalendarHeader` at the top. It contains the `title` set from the corresponding property,
   * the `SegmentedButton`, which facilitates navigation through the views, controls, passed to the `actions`
   * aggregation and the navigation, assisting the user in choosing the desired time period. The views, either
   * custom or not, can be configured and passed through the `views` aggregation.
   *
   * To create custom views, extend the `SinglePlanningCalendarView` basic view class. It defines three methods
   * that should be overwritten: `getEntityCount`, `getScrollEntityCount` and `calculateStartDate`
   * 	 - `getEntityCount` - returns number of columns to be displayed
   * 	 - `getScrollEntityCount` - used when next and previous arrows in the calendar are used. For example,
   * 			in work week view, the `getEntityCount` returns 5 (5 columns from Monday to Friday), but when next arrow
   * 			is selected, the control navigates 7 days ahead and `getScrollEntityCount` returns 7.
   * 	 - `calculateStartDate` - calculates the first day displayed in the calendar based on the `startDate`
   * 			property of the `SinglePlanningCalendar`. For example, it returns the first date of a month or a week
   * 			to display the first 10 days of the month.
   *
   * A `SinglePlanningCalendarGrid` or `SinglePlanningCalendarMonthGrid`, which displays the appointments,
   * set to the visual time range. An all-day appointment is an appointment which starts at 00:00 and ends
   * in 00:00 on any day in the future.
   */
  export default class SinglePlanningCalendar extends Control {
    /**
     * Constructor for a new `SinglePlanningCalendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarSettings
    );

    /**
     * Adds some action to the aggregation {@link #getActions actions}.
     */
    addAction(
      /**
       * The action to add; if empty, nothing is inserted
       */
      oAction: Control
    ): this;
    /**
     * Adds some appointment to the aggregation {@link #getAppointments appointments}.
     */
    addAppointment(
      /**
       * The appointment to add; if empty, nothing is inserted
       */
      oAppointment: CalendarAppointment
    ): this;
    /**
     * @SINCE 1.66
     *
     * Adds some specialDate to the aggregation {@link #getSpecialDates specialDates}.
     */
    addSpecialDate(
      /**
       * The specialDate to add; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange
    ): this;
    /**
     * Adds some view to the aggregation {@link #getViews views}.
     */
    addView(
      /**
       * The view to add; if empty, nothing is inserted
       */
      oView: SinglePlanningCalendarView
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentCreate appointmentCreate} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if an appointment is created.
     */
    attachAppointmentCreate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.64
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDrop appointmentDrop} event of this
     * `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if an appointment is dropped.
     */
    attachAppointmentDrop(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentResize appointmentResize} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when an appointment is resized.
     */
    attachAppointmentResize(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:appointmentSelect appointmentSelect} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when the selected state of an appointment is changed.
     */
    attachAppointmentSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:cellPress cellPress} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when a grid cell is pressed.
     */
    attachCellPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerDateSelect headerDateSelect} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if a date is selected in the calendar header.
     */
    attachHeaderDateSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:moreLinkPress moreLinkPress} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when a 'more' button is pressed. **Note:** The 'more' button appears in a month view cell when
     * multiple appointments exist and the available space is not sufficient to display all of them.
     */
    attachMoreLinkPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:startDateChange startDateChange} event of this
     * `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * `startDate` is changed while navigating in the `SinglePlanningCalendar`.
     */
    attachStartDateChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.71.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:viewChange viewChange} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * The view was changed by user interaction.
     */
    attachViewChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the actions in the aggregation {@link #getActions actions}.
     */
    destroyActions(): this;
    /**
     * Destroys all the appointments in the aggregation {@link #getAppointments appointments}.
     */
    destroyAppointments(): this;
    /**
     * @SINCE 1.66
     *
     * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
     */
    destroySpecialDates(): this;
    /**
     * Destroys all the views in the aggregation {@link #getViews views}.
     */
    destroyViews(): this;
    /**
     * @SINCE 1.65
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentCreate appointmentCreate} event
     * of this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentCreate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.64
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentDrop appointmentDrop} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentDrop(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Detaches event handler `fnFunction` from the {@link #event:appointmentResize appointmentResize} event
     * of this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentResize(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:appointmentSelect appointmentSelect} event
     * of this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAppointmentSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Detaches event handler `fnFunction` from the {@link #event:cellPress cellPress} event of this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCellPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:headerDateSelect headerDateSelect} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachHeaderDateSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:moreLinkPress moreLinkPress} event of this
     * `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachMoreLinkPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:startDateChange startDateChange} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachStartDateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.71.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:viewChange viewChange} event of this `sap.m.SinglePlanningCalendar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachViewChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendar with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.65
     *
     * Fires event {@link #event:appointmentCreate appointmentCreate} to attached listeners.
     */
    fireAppointmentCreate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Start date of the created appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * End date of the created appointment, as a JavaScript date object.
         */
        endDate?: object;
      }
    ): this;
    /**
     * @SINCE 1.64
     *
     * Fires event {@link #event:appointmentDrop appointmentDrop} to attached listeners.
     */
    fireAppointmentDrop(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The dropped appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * Start date of the dropped appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * Dropped appointment end date as a JavaScript date object.
         */
        endDate?: object;
        /**
         * The drop type. If true - it's "Copy", if false - it's "Move".
         */
        copy?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.65
     *
     * Fires event {@link #event:appointmentResize appointmentResize} to attached listeners.
     */
    fireAppointmentResize(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The resized appointment.
         */
        appointment?: CalendarAppointment;
        /**
         * Start date of the resized appointment, as a JavaScript date object.
         */
        startDate?: object;
        /**
         * End date of the resized appointment, as a JavaScript date object.
         */
        endDate?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:appointmentSelect appointmentSelect} to attached listeners.
     */
    fireAppointmentSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The appointment on which the event was triggered.
         */
        appointment?: CalendarAppointment;
        /**
         * All appointments with changed selected state.
         */
        appointments?: CalendarAppointment[];
      }
    ): this;
    /**
     * @SINCE 1.65
     *
     * Fires event {@link #event:cellPress cellPress} to attached listeners.
     */
    fireCellPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The start date as a JavaScript date object of the focused grid cell.
         */
        startDate?: object;
        /**
         * The end date as a JavaScript date object of the focused grid cell.
         */
        endDate?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:headerDateSelect headerDateSelect} to attached listeners.
     */
    fireHeaderDateSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Date of the selected header, as a JavaScript date object. It is considered as a local date.
         */
        date?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:moreLinkPress moreLinkPress} to attached listeners.
     */
    fireMoreLinkPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The date as a JavaScript date object of the cell with the pressed more link.
         */
        date?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:startDateChange startDateChange} to attached listeners.
     */
    fireStartDateChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new start date, as a JavaScript date object. It is considered as a local date.
         */
        date?: object;
      }
    ): this;
    /**
     * @SINCE 1.71.0
     *
     * Fires event {@link #event:viewChange viewChange} to attached listeners.
     */
    fireViewChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getActions actions}.
     *
     * The controls to be passed to the toolbar.
     */
    getActions(): Control[];
    /**
     * Gets content of aggregation {@link #getAppointments appointments}.
     *
     * The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered.
     * Appointments, longer than a day, will be displayed in all of the affected days. To display an all-day
     * appointment, the appointment must start at 00:00 and end on any day in the future in 00:00h.
     */
    getAppointments(): CalendarAppointment[];
    /**
     * @SINCE 1.65
     *
     * Gets current value of property {@link #getEnableAppointmentsCreate enableAppointmentsCreate}.
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     *
     * Default value is `false`.
     */
    getEnableAppointmentsCreate(): boolean;
    /**
     * @SINCE 1.64
     *
     * Gets current value of property {@link #getEnableAppointmentsDragAndDrop enableAppointmentsDragAndDrop}.
     *
     * Determines whether the appointments in the grid are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     *
     * Default value is `false`.
     */
    getEnableAppointmentsDragAndDrop(): boolean;
    /**
     * @SINCE 1.65
     *
     * Gets current value of property {@link #getEnableAppointmentsResize enableAppointmentsResize}.
     *
     * Determines whether the appointments are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * The appointment snaps on every interval of 30 minutes. After the resize is finished, the {@link #event:appointmentResize
     * appointmentResize} event is fired, containing the new start and end JavaScript date objects.
     *
     * Default value is `false`.
     */
    getEnableAppointmentsResize(): boolean;
    /**
     * Gets current value of property {@link #getEndHour endHour}.
     *
     * Determines the end hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the next hours are displayed as non-working. The passed hour is considered as 24-hour based.
     *
     * Default value is `24`.
     */
    getEndHour(): int;
    /**
     * Gets current value of property {@link #getFullDay fullDay}.
     *
     * Determines if all of the hours in a day are displayed. If set to `false`, the hours shown are between
     * the `startHour` and `endHour`.
     *
     * Default value is `true`.
     */
    getFullDay(): boolean;
    /**
     * @SINCE 1.65.0
     *
     * ID of the element which is the current target of the association {@link #getLegend legend}, or `null`.
     */
    getLegend(): ID;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.62
     *
     * Holds the selected appointments. If no appointments are selected, an empty array is returned.
     */
    getSelectedAppointments(): CalendarAppointment[];
    /**
     * ID of the element which is the current target of the association {@link #getSelectedView selectedView},
     * or `null`.
     */
    getSelectedView(): ID;
    /**
     * @SINCE 1.66
     *
     * Gets content of aggregation {@link #getSpecialDates specialDates}.
     *
     * Special days in the header visualized as a date range with type.
     *
     * **Note:** If one day is assigned to more than one type, only the first type is used.
     */
    getSpecialDates(): DateTypeRange[];
    /**
     * Gets current value of property {@link #getStartDate startDate}.
     *
     * Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
     * The time part will be ignored. The current date is used as default.
     */
    getStartDate(): object;
    /**
     * Gets current value of property {@link #getStartHour startHour}.
     *
     * Determines the start hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the previous hours are displayed as non-working. The passed hour is considered as 24-hour based.
     *
     * Default value is `0`.
     */
    getStartHour(): int;
    /**
     * @SINCE 1.62
     *
     * Gets current value of property {@link #getStickyMode stickyMode}.
     *
     * Determines which part of the control will remain fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Limited browser support. Browsers which do not support this feature:
     * 	 - Microsoft Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     *
     * Default value is `None`.
     */
    getStickyMode():
      | PlanningCalendarStickyMode
      | keyof typeof PlanningCalendarStickyMode;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title of the `SinglePlanningCalendar`.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * @SINCE 1.75
     *
     * Finds the view object by given key
     */
    getViewByKey(
      /**
       * The key of the view
       */
      sKey: String
    ): SinglePlanningCalendarView;
    /**
     * Gets content of aggregation {@link #getViews views}.
     *
     * Views of the `SinglePlanningCalendar`.
     *
     * **Note:** If not set, the Week view is available.
     */
    getViews(): SinglePlanningCalendarView[];
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getActions actions}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfAction(
      /**
       * The action whose index is looked for
       */
      oAction: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.unified.CalendarAppointment` in the aggregation {@link #getAppointments
     * appointments}. and returns its index if found or -1 otherwise.
     */
    indexOfAppointment(
      /**
       * The appointment whose index is looked for
       */
      oAppointment: CalendarAppointment
    ): int;
    /**
     * @SINCE 1.66
     *
     * Checks for the provided `sap.ui.unified.DateTypeRange` in the aggregation {@link #getSpecialDates specialDates}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSpecialDate(
      /**
       * The specialDate whose index is looked for
       */
      oSpecialDate: DateTypeRange
    ): int;
    /**
     * Checks for the provided `sap.m.SinglePlanningCalendarView` in the aggregation {@link #getViews views}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfView(
      /**
       * The view whose index is looked for
       */
      oView: SinglePlanningCalendarView
    ): int;
    /**
     * Inserts a action into the aggregation {@link #getActions actions}.
     */
    insertAction(
      /**
       * The action to insert; if empty, nothing is inserted
       */
      oAction: Control,
      /**
       * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
       * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a appointment into the aggregation {@link #getAppointments appointments}.
     */
    insertAppointment(
      /**
       * The appointment to insert; if empty, nothing is inserted
       */
      oAppointment: CalendarAppointment,
      /**
       * The `0`-based index the appointment should be inserted at; for a negative value of `iIndex`, the appointment
       * is inserted at position 0; for a value greater than the current size of the aggregation, the appointment
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.66
     *
     * Inserts a specialDate into the aggregation {@link #getSpecialDates specialDates}.
     */
    insertSpecialDate(
      /**
       * The specialDate to insert; if empty, nothing is inserted
       */
      oSpecialDate: DateTypeRange,
      /**
       * The `0`-based index the specialDate should be inserted at; for a negative value of `iIndex`, the specialDate
       * is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a view into the aggregation {@link #getViews views}.
     */
    insertView(
      /**
       * The view to insert; if empty, nothing is inserted
       */
      oView: SinglePlanningCalendarView,
      /**
       * The `0`-based index the view should be inserted at; for a negative value of `iIndex`, the view is inserted
       * at position 0; for a value greater than the current size of the aggregation, the view is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes a action from the aggregation {@link #getActions actions}.
     */
    removeAction(
      /**
       * The action to remove or its index or id
       */
      vAction: int | string | Control
    ): Control;
    /**
     * Removes all the controls from the aggregation {@link #getActions actions}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllActions(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getAppointments appointments}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAppointments(): CalendarAppointment[];
    /**
     * @SINCE 1.66
     *
     * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSpecialDates(): DateTypeRange[];
    /**
     * Removes all the controls from the aggregation {@link #getViews views}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllViews(): SinglePlanningCalendarView[];
    /**
     * Removes a appointment from the aggregation {@link #getAppointments appointments}.
     */
    removeAppointment(
      /**
       * The appointment to remove or its index or id
       */
      vAppointment: int | string | CalendarAppointment
    ): CalendarAppointment;
    /**
     * @SINCE 1.66
     *
     * Removes a specialDate from the aggregation {@link #getSpecialDates specialDates}.
     */
    removeSpecialDate(
      /**
       * The specialDate to remove or its index or id
       */
      vSpecialDate: int | string | DateTypeRange
    ): DateTypeRange;
    /**
     * Removes a view from the aggregation {@link #getViews views}.
     */
    removeView(
      /**
       * The view to remove or its index or id
       */
      vView: int | string | SinglePlanningCalendarView
    ): SinglePlanningCalendarView;
    /**
     * @SINCE 1.65
     *
     * Sets a new value for property {@link #getEnableAppointmentsCreate enableAppointmentsCreate}.
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsCreate(
      /**
       * New value for property `enableAppointmentsCreate`
       */
      bEnableAppointmentsCreate?: boolean
    ): this;
    /**
     * @SINCE 1.64
     *
     * Sets a new value for property {@link #getEnableAppointmentsDragAndDrop enableAppointmentsDragAndDrop}.
     *
     * Determines whether the appointments in the grid are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsDragAndDrop(
      /**
       * New value for property `enableAppointmentsDragAndDrop`
       */
      bEnableAppointmentsDragAndDrop?: boolean
    ): this;
    /**
     * @SINCE 1.65
     *
     * Sets a new value for property {@link #getEnableAppointmentsResize enableAppointmentsResize}.
     *
     * Determines whether the appointments are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * The appointment snaps on every interval of 30 minutes. After the resize is finished, the {@link #event:appointmentResize
     * appointmentResize} event is fired, containing the new start and end JavaScript date objects.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableAppointmentsResize(
      /**
       * New value for property `enableAppointmentsResize`
       */
      bEnableAppointmentsResize?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEndHour endHour}.
     *
     * Determines the end hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the next hours are displayed as non-working. The passed hour is considered as 24-hour based.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `24`.
     */
    setEndHour(
      /**
       * New value for property `endHour`
       */
      iEndHour?: int
    ): this;
    /**
     * Sets a new value for property {@link #getFullDay fullDay}.
     *
     * Determines if all of the hours in a day are displayed. If set to `false`, the hours shown are between
     * the `startHour` and `endHour`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setFullDay(
      /**
       * New value for property `fullDay`
       */
      bFullDay?: boolean
    ): this;
    /**
     * @SINCE 1.65.0
     *
     * Sets the associated {@link #getLegend legend}.
     */
    setLegend(
      /**
       * ID of an element which becomes the new target of this legend association; alternatively, an element instance
       * may be given
       */
      oLegend: ID | PlanningCalendarLegend
    ): this;
    /**
     * Sets the associated {@link #getSelectedView selectedView}.
     */
    setSelectedView(
      /**
       * ID of an element which becomes the new target of this selectedView association; alternatively, an element
       * instance may be given
       */
      oSelectedView: ID | SinglePlanningCalendarView
    ): this;
    /**
     * Sets a new value for property {@link #getStartDate startDate}.
     *
     * Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
     * The time part will be ignored. The current date is used as default.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setStartDate(
      /**
       * New value for property `startDate`
       */
      oStartDate: object
    ): this;
    /**
     * Sets a new value for property {@link #getStartHour startHour}.
     *
     * Determines the start hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the previous hours are displayed as non-working. The passed hour is considered as 24-hour based.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setStartHour(
      /**
       * New value for property `startHour`
       */
      iStartHour?: int
    ): this;
    /**
     * @SINCE 1.62
     *
     * Sets a new value for property {@link #getStickyMode stickyMode}.
     *
     * Determines which part of the control will remain fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Limited browser support. Browsers which do not support this feature:
     * 	 - Microsoft Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setStickyMode(
      /**
       * New value for property `stickyMode`
       */
      sStickyMode?:
        | PlanningCalendarStickyMode
        | keyof typeof PlanningCalendarStickyMode
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Determines the title of the `SinglePlanningCalendar`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentCreate appointmentCreate} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if an appointment is created.
     */
    attachAppointmentCreate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.64
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentDrop appointmentDrop} event of this
     * `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if an appointment is dropped.
     */
    attachAppointmentDrop(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:appointmentResize appointmentResize} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when an appointment is resized.
     */
    attachAppointmentResize(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:appointmentSelect appointmentSelect} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when the selected state of an appointment is changed.
     */
    attachAppointmentSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.65
     *
     * Attaches event handler `fnFunction` to the {@link #event:cellPress cellPress} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when a grid cell is pressed.
     */
    attachCellPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:headerDateSelect headerDateSelect} event of
     * this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired if a date is selected in the calendar header.
     */
    attachHeaderDateSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:moreLinkPress moreLinkPress} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * Fired when a 'more' button is pressed. **Note:** The 'more' button appears in a month view cell when
     * multiple appointments exist and the available space is not sufficient to display all of them.
     */
    attachMoreLinkPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:startDateChange startDateChange} event of this
     * `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * `startDate` is changed while navigating in the `SinglePlanningCalendar`.
     */
    attachStartDateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.71.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:viewChange viewChange} event of this `sap.m.SinglePlanningCalendar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SinglePlanningCalendar` itself.
     *
     * The view was changed by user interaction.
     */
    attachViewChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SinglePlanningCalendar` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SinglePlanningCalendarSettings extends $ControlSettings {
    /**
     * Determines the title of the `SinglePlanningCalendar`.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
     * The time part will be ignored. The current date is used as default.
     */
    startDate?: object | PropertyBindingInfo;

    /**
     * Determines the start hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the previous hours are displayed as non-working. The passed hour is considered as 24-hour based.
     */
    startHour?: int | PropertyBindingInfo;

    /**
     * Determines the end hour of the grid to be shown if the `fullDay` property is set to `false`. Otherwise
     * the next hours are displayed as non-working. The passed hour is considered as 24-hour based.
     */
    endHour?: int | PropertyBindingInfo;

    /**
     * Determines if all of the hours in a day are displayed. If set to `false`, the hours shown are between
     * the `startHour` and `endHour`.
     */
    fullDay?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.62
     *
     * Determines which part of the control will remain fixed at the top of the page during vertical scrolling
     * as long as the control is in the viewport.
     *
     * **Note:** Limited browser support. Browsers which do not support this feature:
     * 	 - Microsoft Internet Explorer
     * 	 - Microsoft Edge lower than version 41 (EdgeHTML 16)
     * 	 - Mozilla Firefox lower than version 59
     */
    stickyMode?:
      | (PlanningCalendarStickyMode | keyof typeof PlanningCalendarStickyMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.64
     *
     * Determines whether the appointments in the grid are draggable.
     *
     * The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment
     * can be dropped by the user.
     */
    enableAppointmentsDragAndDrop?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.65
     *
     * Determines whether the appointments are resizable.
     *
     * The resize interaction is visualized by making the appointment transparent.
     *
     * The appointment snaps on every interval of 30 minutes. After the resize is finished, the {@link #event:appointmentResize
     * appointmentResize} event is fired, containing the new start and end JavaScript date objects.
     */
    enableAppointmentsResize?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.65
     *
     * Determines whether the appointments can be created by dragging on empty cells.
     *
     * See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events
     * snapping
     */
    enableAppointmentsCreate?: boolean | PropertyBindingInfo;

    /**
     * The controls to be passed to the toolbar.
     */
    actions?: Control[] | Control | AggregationBindingInfo;

    /**
     * The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered.
     * Appointments, longer than a day, will be displayed in all of the affected days. To display an all-day
     * appointment, the appointment must start at 00:00 and end on any day in the future in 00:00h.
     */
    appointments?:
      | CalendarAppointment[]
      | CalendarAppointment
      | AggregationBindingInfo;

    /**
     * Views of the `SinglePlanningCalendar`.
     *
     * **Note:** If not set, the Week view is available.
     */
    views?:
      | SinglePlanningCalendarView[]
      | SinglePlanningCalendarView
      | AggregationBindingInfo;

    /**
     * @SINCE 1.66
     *
     * Special days in the header visualized as a date range with type.
     *
     * **Note:** If one day is assigned to more than one type, only the first type is used.
     */
    specialDates?: DateTypeRange[] | DateTypeRange | AggregationBindingInfo;

    /**
     * Corresponds to the currently selected view.
     */
    selectedView?: SinglePlanningCalendarView | string;

    /**
     * @SINCE 1.65.0
     *
     * Association to the `PlanningCalendarLegend` explaining the colors of the `Appointments`.
     *
     * **Note:** The legend does not have to be rendered but must exist and all required types must be assigned.
     */
    legend?: PlanningCalendarLegend | string;

    /**
     * Fired when the selected state of an appointment is changed.
     */
    appointmentSelect?: Function;

    /**
     * @SINCE 1.64
     *
     * Fired if an appointment is dropped.
     */
    appointmentDrop?: Function;

    /**
     * @SINCE 1.65
     *
     * Fired when an appointment is resized.
     */
    appointmentResize?: Function;

    /**
     * @SINCE 1.65
     *
     * Fired if an appointment is created.
     */
    appointmentCreate?: Function;

    /**
     * Fired if a date is selected in the calendar header.
     */
    headerDateSelect?: Function;

    /**
     * `startDate` is changed while navigating in the `SinglePlanningCalendar`.
     */
    startDateChange?: Function;

    /**
     * @SINCE 1.65
     *
     * Fired when a grid cell is pressed.
     */
    cellPress?: Function;

    /**
     * Fired when a 'more' button is pressed. **Note:** The 'more' button appears in a month view cell when
     * multiple appointments exist and the available space is not sufficient to display all of them.
     */
    moreLinkPress?: Function;

    /**
     * @SINCE 1.71.0
     *
     * The view was changed by user interaction.
     */
    viewChange?: Function;
  }
}

declare module "sap/m/SinglePlanningCalendarDayView" {
  import {
    default as SinglePlanningCalendarView,
    $SinglePlanningCalendarViewSettings,
  } from "sap/m/SinglePlanningCalendarView";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.61
   *
   * Represents a day view of the {@link sap.m.SinglePlanningCalendar}. The purpose of the element is to decouple
   * the view logic from parent control `SinglePlanningCalendar`.
   */
  export default class SinglePlanningCalendarDayView extends SinglePlanningCalendarView {
    /**
     * Constructor for a new `SinglePlanningCalendarDayView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarDayViewSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendarDayView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarDayViewSettings
    );

    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendarDayView with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SinglePlanningCalendarView.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendarDayView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendarDayView.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SinglePlanningCalendarDayViewSettings
    extends $SinglePlanningCalendarViewSettings {}
}

declare module "sap/m/SinglePlanningCalendarMonthView" {
  import {
    default as SinglePlanningCalendarView,
    $SinglePlanningCalendarViewSettings,
  } from "sap/m/SinglePlanningCalendarView";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.69
   *
   * Represents a one month view of the `SinglePlanningCalendar`. The purpose of the element is to decouple
   * the view logic from parent control `SinglePlanningCalendar`.
   */
  export default class SinglePlanningCalendarMonthView extends SinglePlanningCalendarView {
    /**
     * Constructor for a new `SinglePlanningCalendarMonthView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarMonthViewSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendarMonthView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarMonthViewSettings
    );

    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendarMonthView with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SinglePlanningCalendarView.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendarMonthView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendarMonthView.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SinglePlanningCalendarMonthViewSettings
    extends $SinglePlanningCalendarViewSettings {}
}

declare module "sap/m/SinglePlanningCalendarView" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.61
   *
   * Represents a day view of the {@link sap.m.SinglePlanningCalendar}. The purpose of the element is to decouple
   * the view logic from parent control `SinglePlanningCalendar`.
   */
  export default class SinglePlanningCalendarView extends UI5Element {
    /**
     * Constructor for a new `SinglePlanningCalendarView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarViewSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendarView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarViewSettings
    );

    /**
     * Should calculate the startDate which will be displayed in the `sap.m.SinglePlanningCalendar` based on
     * a given date.
     */
    calculateStartDate(
      /**
       * the given date
       */
      oDate: object
    ): void;
    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendarView with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendarView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Should return the number of columns to be displayed in the grid of the `sap.m.SinglePlanningCalendar`.
     */
    getEntityCount(): void;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Indicates a unique key for the view
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendarView.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Should return a number of entities until the next/previous startDate of the `sap.m.SinglePlanningCalendar`
     * after navigating forward/backward with the arrows. For example, by pressing the forward button inside
     * the work week view, the next startDate of a work week will be 7 entities (days) away from the current
     * one.
     */
    getScrollEntityCount(): void;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Adds a title for the view
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Indicates a unique key for the view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Adds a title for the view
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle: string
    ): this;
  }

  export interface $SinglePlanningCalendarViewSettings
    extends $ElementSettings {
    /**
     * Indicates a unique key for the view
     */
    key?: string | PropertyBindingInfo;

    /**
     * Adds a title for the view
     */
    title?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/SinglePlanningCalendarWeekView" {
  import {
    default as SinglePlanningCalendarView,
    $SinglePlanningCalendarViewSettings,
  } from "sap/m/SinglePlanningCalendarView";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.61
   *
   * Represents a week view of the {@link sap.m.SinglePlanningCalendar}. The purpose of the element is to
   * decouple the view logic from parent control `SinglePlanningCalendar`.
   */
  export default class SinglePlanningCalendarWeekView extends SinglePlanningCalendarView {
    /**
     * Constructor for a new `SinglePlanningCalendarWeekView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarWeekViewSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendarWeekView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarWeekViewSettings
    );

    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendarWeekView with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SinglePlanningCalendarView.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendarWeekView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendarWeekView.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SinglePlanningCalendarWeekViewSettings
    extends $SinglePlanningCalendarViewSettings {}
}

declare module "sap/m/SinglePlanningCalendarWorkWeekView" {
  import {
    default as SinglePlanningCalendarView,
    $SinglePlanningCalendarViewSettings,
  } from "sap/m/SinglePlanningCalendarView";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.61
   *
   * Represents a week view of the {@link sap.m.SinglePlanningCalendar}. The purpose of the element is to
   * decouple the view logic from parent control `SinglePlanningCalendar`.
   */
  export default class SinglePlanningCalendarWorkWeekView extends SinglePlanningCalendarView {
    /**
     * Constructor for a new `SinglePlanningCalendarWorkWeekView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarWorkWeekViewSettings
    );
    /**
     * Constructor for a new `SinglePlanningCalendarWorkWeekView`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.SinglePlanningCalendarView#constructor
     * sap.m.SinglePlanningCalendarView} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SinglePlanningCalendarWorkWeekViewSettings
    );

    /**
     * Creates a new subclass of class sap.m.SinglePlanningCalendarWorkWeekView with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SinglePlanningCalendarView.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SinglePlanningCalendarWorkWeekView>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.SinglePlanningCalendarWorkWeekView.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $SinglePlanningCalendarWorkWeekViewSettings
    extends $SinglePlanningCalendarViewSettings {}
}

declare module "sap/m/Slider" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID, CSSSize } from "sap/ui/core/library";

  import SliderTooltipBase from "sap/m/SliderTooltipBase";

  import UI5Element from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { IScale } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * Overview:
   *
   * A {@link sap.m.Slider} control represents a numerical range and a handle. The purpose of the control
   * is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.
   *
   * **Notes:**
   * 	 - Only horizontal sliders are possible.
   * 	 - The handle can be moved in steps of predefined size. This is done with the `step` property.
   * 	 - Setting the property `showAdvancedTooltip` shows an input field above the handle
   * 	 - Setting the property `inputsAsTooltips` enables the user to enter a specific value in the handle's
   * 			tooltip.
   *
   * Structure:
   *
   * The most important properties of the Slider are:
   * 	 -  min - The minimum value of the slider range
   * 	 -  max - The maximum value of the slider range
   * 	 -  value - The current value of the slider
   * 	 -  progress - Determines if a progress bar will be shown on the slider range
   * 	 -  step - Determines the increments in which the slider will move  These properties determine
   * 			the visualization of the tooltips:
   * 	 -  `showAdvancedTooltip` - Determines if a tooltip should be displayed above the handle
   * 	 -  `inputsAsTooltips` - Determines if the tooltip displayed above the slider's handle should include
   * 			an input field
   *
   * Usage:
   *
   * The most common usecase is to select values on a continuous numerical scale (e.g. temperature, volume,
   * etc. ).
   *
   * Responsive Behavior:
   *
   * The `sap.m.Slider` control adjusts to the size of its parent container by recalculating and resizing
   * the width of the control. You can move the slider handle in several different ways:
   * 	 -  Drag and drop to the desired value
   * 	 -  Click/tap on the range bar to move the handle to that location
   * 	 -  Enter the desired value in the input field (if available)
   * 	 -  Keyboard (Arrow keys, "+" and "-")
   */
  export default class Slider extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new `Slider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/slider/ Slider}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderSettings
    );
    /**
     * Constructor for a new `Slider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/slider/ Slider}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * @SINCE 1.56
     *
     * Adds some customTooltip to the aggregation {@link #getCustomTooltips customTooltips}.
     */
    addCustomTooltip(
      /**
       * The customTooltip to add; if empty, nothing is inserted
       */
      oCustomTooltip: SliderTooltipBase
    ): this;
    /**
     * Creates default tooltips, if needed, and forwards properties to them
     */
    assignDefaultTooltips(
      /**
       * Array of strings for ID generation
       */
      aTooltipIds?: Array<any>
    ): void;
    /**
     * Creates custom tooltips, if needed, and forwards properties to them
     */
    associateCustomTooltips(
      /**
       * Count of the tooltips
       */
      iTooltipCount?: number
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Slider` itself.
     *
     * This event is triggered after the end user finishes interacting, if there is any change.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Slider` itself.
     *
     * This event is triggered during the dragging period, each time the slider value changes.
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56
     *
     * Destroys all the customTooltips in the aggregation {@link #getCustomTooltips customTooltips}.
     */
    destroyCustomTooltips(): this;
    /**
     * @SINCE 1.46
     *
     * Destroys the scale in the aggregation {@link #getScale scale}.
     */
    destroyScale(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.Slider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.Slider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Slider with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Slider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current value of the slider after a change.
         */
        value?: float;
      }
    ): this;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current value of the slider after a live change.
         */
        value?: float;
      }
    ): this;
    /**
     * Forwards properties to a given control
     */
    forwardProperties(
      /**
       * Array of properties to forward
       */
      aProperties?: Array<any>,
      /**
       * Control to which should be forward
       */
      oControl?: UI5Element
    ): void;
    /**
     * Forwards properties to default tooltips
     */
    forwardPropertiesToDefaultTooltips(
      /**
       * Count of the tooltips
       */
      iTooltipCount?: number
    ): void;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.56
     *
     * Gets content of aggregation {@link #getCustomTooltips customTooltips}.
     *
     * Aggregation for user-defined tooltips. **Note:** In case of Slider, only the first tooltip of the aggregation
     * is used. In the RangeSlider case - the first two. If no custom tooltips are provided, the default are
     * used
     */
    getCustomTooltips(): SliderTooltipBase[];
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can change the value.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getEnableTickmarks enableTickmarks}.
     *
     * Enables tickmarks visualisation
     *
     * Default value is `false`.
     */
    getEnableTickmarks(): boolean;
    /**
     * @SINCE 1.42
     *
     * Gets current value of property {@link #getInputsAsTooltips inputsAsTooltips}.
     *
     * Indicates whether input fields should be used as tooltips for the handles. **Note:** Setting this option
     * to `true` will only work if `showAdvancedTooltip` is set to `true`.
     *
     * Default value is `false`.
     */
    getInputsAsTooltips(): boolean;
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * The maximum value.
     *
     * Default value is `100`.
     */
    getMax(): float;
    /**
     * Returns a metadata object for class sap.m.Slider.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * The minimum value.
     *
     * Default value is `0`.
     */
    getMin(): float;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the
     * server via submit).
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getProgress progress}.
     *
     * Indicate whether a progress bar indicator is shown.
     *
     * Default value is `true`.
     */
    getProgress(): boolean;
    /**
     * @SINCE 1.46
     *
     * Gets content of aggregation {@link #getScale scale}.
     *
     * Scale for visualisation of tickmarks and labels
     */
    getScale(): IScale;
    /**
     * @SINCE 1.42
     *
     * Gets current value of property {@link #getShowAdvancedTooltip showAdvancedTooltip}.
     *
     * Indicate whether the handle's advanced tooltip is shown. **Note:** Setting this option to `true` will
     * ignore the value set in `showHandleTooltip`. This will cause only the advanced tooltip to be shown.
     *
     * Default value is `false`.
     */
    getShowAdvancedTooltip(): boolean;
    /**
     * @SINCE 1.31
     *
     * Gets current value of property {@link #getShowHandleTooltip showHandleTooltip}.
     *
     * Indicate whether the handle tooltip is shown.
     *
     * Default value is `true`.
     */
    getShowHandleTooltip(): boolean;
    /**
     * Gets current value of property {@link #getStep step}.
     *
     * Define the amount of units to change the slider when adjusting by drag and drop.
     *
     * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result
     * in possible selection of the values 0, 5, 10).
     *
     * The step must be positive, if a negative number is provided, the default value will be used instead.
     * If the width of the slider converted to pixels is less than the range (max - min), the value will be
     * rounded to multiples of the step size.
     *
     * Default value is `1`.
     */
    getStep(): float;
    /**
     * Gets the tooltips that should be shown. Returns custom tooltips if provided. Otherwise - default tooltips
     */
    getUsedTooltips(): SliderTooltipBase[];
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Define the value.
     *
     * If the value is lower/higher than the allowed minimum/maximum, the value of the properties `min`/`max`
     * are used instead.
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * Default value is `"100%"`.
     */
    getWidth(): CSSSize;
    /**
     * Handles change of Tooltip's inputs.
     */
    handleTooltipChange(oEvent: jQuery.Event): void;
    /**
     * @SINCE 1.56
     *
     * Checks for the provided `sap.m.SliderTooltipBase` in the aggregation {@link #getCustomTooltips customTooltips}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfCustomTooltip(
      /**
       * The customTooltip whose index is looked for
       */
      oCustomTooltip: SliderTooltipBase
    ): int;
    /**
     * Assigns tooltips and forwards properties to them
     */
    initAndSyncTooltips(
      /**
       * Array of strings for ID generation
       */
      aTooltipIds?: Array<any>
    ): void;
    /**
     * Creates a default SliderTooltip instance and adds it as an aggregation
     */
    initDefaultTooltip(
      /**
       * The tooltip ID
       */
      sId?: string
    ): void;
    /**
     * Creates a SliderTooltipContainer
     */
    initTooltipContainer(): void;
    /**
     * @SINCE 1.56
     *
     * Inserts a customTooltip into the aggregation {@link #getCustomTooltips customTooltips}.
     */
    insertCustomTooltip(
      /**
       * The customTooltip to insert; if empty, nothing is inserted
       */
      oCustomTooltip: SliderTooltipBase,
      /**
       * The `0`-based index the customTooltip should be inserted at; for a negative value of `iIndex`, the customTooltip
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customTooltip
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.56
     *
     * Removes all the controls from the aggregation {@link #getCustomTooltips customTooltips}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCustomTooltips(): SliderTooltipBase[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.56
     *
     * Removes a customTooltip from the aggregation {@link #getCustomTooltips customTooltips}.
     */
    removeCustomTooltip(
      /**
       * The customTooltip to remove or its index or id
       */
      vCustomTooltip: int | string | SliderTooltipBase
    ): SliderTooltipBase;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can change the value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getEnableTickmarks enableTickmarks}.
     *
     * Enables tickmarks visualisation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableTickmarks(
      /**
       * New value for property `enableTickmarks`
       */
      bEnableTickmarks?: boolean
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets a new value for property {@link #getInputsAsTooltips inputsAsTooltips}.
     *
     * Indicates whether input fields should be used as tooltips for the handles. **Note:** Setting this option
     * to `true` will only work if `showAdvancedTooltip` is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInputsAsTooltips(
      /**
       * New value for property `inputsAsTooltips`
       */
      bInputsAsTooltips?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMax max}.
     *
     * The maximum value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `100`.
     */
    setMax(
      /**
       * New value for property `max`
       */
      fMax?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMin min}.
     *
     * The minimum value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMin(
      /**
       * New value for property `min`
       */
      fMin?: float
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the
     * server via submit).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getProgress progress}.
     *
     * Indicate whether a progress bar indicator is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setProgress(
      /**
       * New value for property `progress`
       */
      bProgress?: boolean
    ): this;
    /**
     * @SINCE 1.46
     *
     * Sets the aggregated {@link #getScale scale}.
     */
    setScale(
      /**
       * The scale to set
       */
      oScale: IScale
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets a new value for property {@link #getShowAdvancedTooltip showAdvancedTooltip}.
     *
     * Indicate whether the handle's advanced tooltip is shown. **Note:** Setting this option to `true` will
     * ignore the value set in `showHandleTooltip`. This will cause only the advanced tooltip to be shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowAdvancedTooltip(
      /**
       * New value for property `showAdvancedTooltip`
       */
      bShowAdvancedTooltip?: boolean
    ): this;
    /**
     * @SINCE 1.31
     *
     * Sets a new value for property {@link #getShowHandleTooltip showHandleTooltip}.
     *
     * Indicate whether the handle tooltip is shown.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowHandleTooltip(
      /**
       * New value for property `showHandleTooltip`
       */
      bShowHandleTooltip?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStep step}.
     *
     * Define the amount of units to change the slider when adjusting by drag and drop.
     *
     * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result
     * in possible selection of the values 0, 5, 10).
     *
     * The step must be positive, if a negative number is provided, the default value will be used instead.
     * If the width of the slider converted to pixels is less than the range (max - min), the value will be
     * rounded to multiples of the step size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStep(
      /**
       * New value for property `step`
       */
      fStep?: float
    ): this;
    /**
     * Sets the property `value`.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * new value for property `value`.
       */
      fNewValue: float,
      /**
       * The options object
       */
      mOptions: object
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Decrements the value by multiplying the step the `step` with the given parameter.
     */
    stepDown(
      /**
       * The number of steps the slider goes down.
       */
      iStep?: int
    ): this;
    /**
     * Increments the value by multiplying the `step` with the given parameter.
     */
    stepUp(
      /**
       * The number of steps the slider goes up.
       */
      iStep?: int
    ): this;
    /**
     * Updates value of the advanced tooltip.
     */
    updateAdvancedTooltipDom(
      /**
       * The new value
       */
      sNewValue: string
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Slider` itself.
     *
     * This event is triggered after the end user finishes interacting, if there is any change.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Slider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.Slider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Slider` itself.
     *
     * This event is triggered during the dragging period, each time the slider value changes.
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Slider` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SliderSettings extends $ControlSettings {
    /**
     * Defines the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Indicates whether the user can change the value.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the
     * server via submit).
     */
    name?: string | PropertyBindingInfo;

    /**
     * The minimum value.
     */
    min?: float | PropertyBindingInfo;

    /**
     * The maximum value.
     */
    max?: float | PropertyBindingInfo;

    /**
     * Define the amount of units to change the slider when adjusting by drag and drop.
     *
     * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result
     * in possible selection of the values 0, 5, 10).
     *
     * The step must be positive, if a negative number is provided, the default value will be used instead.
     * If the width of the slider converted to pixels is less than the range (max - min), the value will be
     * rounded to multiples of the step size.
     */
    step?: float | PropertyBindingInfo;

    /**
     * Indicate whether a progress bar indicator is shown.
     */
    progress?: boolean | PropertyBindingInfo;

    /**
     * Define the value.
     *
     * If the value is lower/higher than the allowed minimum/maximum, the value of the properties `min`/`max`
     * are used instead.
     */
    value?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.31
     *
     * Indicate whether the handle tooltip is shown.
     */
    showHandleTooltip?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.42
     *
     * Indicate whether the handle's advanced tooltip is shown. **Note:** Setting this option to `true` will
     * ignore the value set in `showHandleTooltip`. This will cause only the advanced tooltip to be shown.
     */
    showAdvancedTooltip?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.42
     *
     * Indicates whether input fields should be used as tooltips for the handles. **Note:** Setting this option
     * to `true` will only work if `showAdvancedTooltip` is set to `true`.
     */
    inputsAsTooltips?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * Enables tickmarks visualisation
     */
    enableTickmarks?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Scale for visualisation of tickmarks and labels
     */
    scale?: IScale;

    /**
     * @SINCE 1.56
     *
     * Aggregation for user-defined tooltips. **Note:** In case of Slider, only the first tooltip of the aggregation
     * is used. In the RangeSlider case - the first two. If no custom tooltips are provided, the default are
     * used
     */
    customTooltips?:
      | SliderTooltipBase[]
      | SliderTooltipBase
      | AggregationBindingInfo;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / IDs which label this control (see WAI-ARIA attribute `aria-labelledby`).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is triggered after the end user finishes interacting, if there is any change.
     */
    change?: Function;

    /**
     * This event is triggered during the dragging period, each time the slider value changes.
     */
    liveChange?: Function;
  }
}

declare module "sap/m/SliderTooltipBase" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.56
   *
   * A Control that visualizes `Slider` and `RangeSlider` tooltips.
   */
  export default class SliderTooltipBase extends Control {
    /**
     * Constructor for a new SliderTooltipBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderTooltipBaseSettings
    );
    /**
     * Constructor for a new SliderTooltipBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SliderTooltipBaseSettings
    );

    /**
     * Creates a new subclass of class sap.m.SliderTooltipBase with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SliderTooltipBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.SliderTooltipBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the value of the tooltip.
     */
    getValue(): float;
    /**
     * Called once the value of the Slider is changed by interaction.
     */
    sliderValueChanged(
      /**
       * The new Slider value
       */
      fValue?: float
    ): void;
  }

  export interface $SliderTooltipBaseSettings extends $ControlSettings {}
}

declare module "sap/m/SlideTile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import GenericTile from "sap/m/GenericTile";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { GenericTileScope, TileSizeBehavior } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { CSSSize } from "sap/ui/core/library";

  /**
   * @SINCE 1.34
   *
   * The control that displays multiple GenericTile controls as changing slides.
   */
  export default class SlideTile extends Control {
    /**
     * Constructor for a new sap.m.SlideTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SlideTileSettings
    );
    /**
     * Constructor for a new sap.m.SlideTile control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SlideTileSettings
    );

    /**
     * Adds some tile to the aggregation {@link #getTiles tiles}.
     */
    addTile(
      /**
       * The tile to add; if empty, nothing is inserted
       */
      oTile: GenericTile
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.SlideTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SlideTile` itself.
     *
     * The event is fired when the user chooses the tile. The event is available only in Actions scope.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SlideTile` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getTiles tiles} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindTiles(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the tiles in the aggregation {@link #getTiles tiles}.
     */
    destroyTiles(): this;
    /**
     * @SINCE 1.46.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.SlideTile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SlideTile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SlideTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.46.0
     *
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current scope the SlideTile was in when the event occurred.
         */
        scope?: GenericTileScope | keyof typeof GenericTileScope;
        /**
         * The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
         */
        action?: string;
        /**
         * The Element's DOM Element. In Actions scope the domRef points to the DOM Element of the remove button
         * (if pressed) or the more icon.
         */
        domRef?: any;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDisplayTime displayTime}.
     *
     * The time of the slide display in milliseconds.
     *
     * Default value is `5000`.
     */
    getDisplayTime(): int;
    /**
     * Returns a metadata object for class sap.m.SlideTile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getScope scope}.
     *
     * Changes the visualization in order to enable additional actions with the SlideTile control.
     *
     * Default value is `"Display"`.
     */
    getScope(): GenericTileScope | keyof typeof GenericTileScope;
    /**
     * Gets current value of property {@link #getSizeBehavior sizeBehavior}.
     *
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen. This property has to be set consistently for the `SlideTile`
     * along with all its inner `GenericTile` elements, so that they match one another visually.
     *
     * Default value is `Responsive`.
     */
    getSizeBehavior(): TileSizeBehavior | keyof typeof TileSizeBehavior;
    /**
     * Gets content of aggregation {@link #getTiles tiles}.
     *
     * The set of Generic Tiles to be shown in the control.
     */
    getTiles(): GenericTile[];
    /**
     * Gets current value of property {@link #getTransitionTime transitionTime}.
     *
     * The time of the slide changing in milliseconds.
     *
     * Default value is `500`.
     */
    getTransitionTime(): int;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getWidth width}.
     *
     * Width of the control.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.GenericTile` in the aggregation {@link #getTiles tiles}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfTile(
      /**
       * The tile whose index is looked for
       */
      oTile: GenericTile
    ): int;
    /**
     * Inserts a tile into the aggregation {@link #getTiles tiles}.
     */
    insertTile(
      /**
       * The tile to insert; if empty, nothing is inserted
       */
      oTile: GenericTile,
      /**
       * The `0`-based index the tile should be inserted at; for a negative value of `iIndex`, the tile is inserted
       * at position 0; for a value greater than the current size of the aggregation, the tile is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getTiles tiles}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTiles(): GenericTile[];
    /**
     * Removes a tile from the aggregation {@link #getTiles tiles}.
     */
    removeTile(
      /**
       * The tile to remove or its index or id
       */
      vTile: int | string | GenericTile
    ): GenericTile;
    /**
     * Sets a new value for property {@link #getDisplayTime displayTime}.
     *
     * The time of the slide display in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `5000`.
     */
    setDisplayTime(
      /**
       * New value for property `displayTime`
       */
      iDisplayTime?: int
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getScope scope}.
     *
     * Changes the visualization in order to enable additional actions with the SlideTile control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Display"`.
     */
    setScope(
      /**
       * New value for property `scope`
       */
      sScope?: GenericTileScope | keyof typeof GenericTileScope
    ): this;
    /**
     * Sets a new value for property {@link #getSizeBehavior sizeBehavior}.
     *
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen. This property has to be set consistently for the `SlideTile`
     * along with all its inner `GenericTile` elements, so that they match one another visually.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Responsive`.
     */
    setSizeBehavior(
      /**
       * New value for property `sizeBehavior`
       */
      sSizeBehavior?: TileSizeBehavior | keyof typeof TileSizeBehavior
    ): this;
    /**
     * Sets a new value for property {@link #getTransitionTime transitionTime}.
     *
     * The time of the slide changing in milliseconds.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `500`.
     */
    setTransitionTime(
      /**
       * New value for property `transitionTime`
       */
      iTransitionTime?: int
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getWidth width}.
     *
     * Width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
    /**
     * Unbinds aggregation {@link #getTiles tiles} from model data.
     */
    unbindTiles(): this;
    /**
     * @SINCE 1.46.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.SlideTile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SlideTile` itself.
     *
     * The event is fired when the user chooses the tile. The event is available only in Actions scope.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SlideTile` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SlideTileSettings extends $ControlSettings {
    /**
     * The time of the slide display in milliseconds.
     */
    displayTime?: int | PropertyBindingInfo;

    /**
     * The time of the slide changing in milliseconds.
     */
    transitionTime?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * Changes the visualization in order to enable additional actions with the SlideTile control.
     */
    scope?:
      | (GenericTileScope | keyof typeof GenericTileScope)
      | PropertyBindingInfo;

    /**
     * If set to `TileSizeBehavior.Small`, the tile size is the same as it would be on a small-screened phone
     * (374px wide and lower), regardless of the screen size of the actual device being used. If set to `TileSizeBehavior.Responsive`,
     * the tile size adapts to the size of the screen. This property has to be set consistently for the `SlideTile`
     * along with all its inner `GenericTile` elements, so that they match one another visually.
     */
    sizeBehavior?:
      | (TileSizeBehavior | keyof typeof TileSizeBehavior)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * The set of Generic Tiles to be shown in the control.
     */
    tiles?: GenericTile[] | GenericTile | AggregationBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * The event is fired when the user chooses the tile. The event is available only in Actions scope.
     */
    press?: Function;
  }
}

declare module "sap/m/SplitApp" {
  import {
    default as SplitContainer,
    $SplitContainerSettings,
  } from "sap/m/SplitContainer";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A container control that is used to display a master-detail view, suitable for mobile applications.
   *
   * Overview: The control extends the functionalities of the {@link sap.m.SplitContainer}. It adds certain
   * header tags to the HTML page which are considered useful for mobile applications and allows the configuration
   * of the application's home icon via the `homeIcon` property.
   *
   * Usage: SplitApp should take the full width of the page and be used as the root of the application, not
   * as child of another container.
   */
  export default class SplitApp extends SplitContainer {
    /**
     * Constructor for a new SplitApp.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:eedfe79e4c19462eafe8780aeab16a3c Split App}
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/split-screen/ Split App}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitAppSettings
    );
    /**
     * Constructor for a new SplitApp.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link topic:eedfe79e4c19462eafe8780aeab16a3c Split App}
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/split-screen/ Split App}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitAppSettings
    );

    /**
     * @deprecated (since 1.87) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:orientationChange orientationChange} event of
     * this `sap.m.SplitApp`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitApp` itself.
     *
     * Fires when orientation (portrait/landscape) is changed.
     */
    attachOrientationChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitApp` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.87) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Detaches event handler `fnFunction` from the {@link #event:orientationChange orientationChange} event
     * of this `sap.m.SplitApp`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOrientationChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SplitApp with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SplitContainer.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SplitApp>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.87) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Fires event {@link #event:orientationChange orientationChange} to attached listeners.
     */
    fireOrientationChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Returns true if the device is in landscape mode.
         */
        landscape?: boolean;
      }
    ): this;
    /**
     * Gets current value of property {@link #getHomeIcon homeIcon}.
     *
     * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home
     * screen". Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
     * The icon must be in PNG format. The property can either store the URL of one single icon or an object
     * holding icon URLs for the different required sizes. Note that if single icon is used for all devices,
     * when scaled, its quality can regress. A desktop icon (used for bookmarks and overriding the favicon)
     * can also be configured. This requires an object to be given and the "icon" property of this object then
     * defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO
     * format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file
     * can contain different images for different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The image size is 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one
     * of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare
     * effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed
     * property to true.
     */
    getHomeIcon(): any;
    /**
     * Returns a metadata object for class sap.m.SplitApp.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Sets a new value for property {@link #getHomeIcon homeIcon}.
     *
     * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home
     * screen". Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
     * The icon must be in PNG format. The property can either store the URL of one single icon or an object
     * holding icon URLs for the different required sizes. Note that if single icon is used for all devices,
     * when scaled, its quality can regress. A desktop icon (used for bookmarks and overriding the favicon)
     * can also be configured. This requires an object to be given and the "icon" property of this object then
     * defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO
     * format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file
     * can contain different images for different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The image size is 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one
     * of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare
     * effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed
     * property to true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHomeIcon(
      /**
       * New value for property `homeIcon`
       */
      oHomeIcon?: any
    ): this;
    /**
     * @deprecated (since 1.87) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Attaches event handler `fnFunction` to the {@link #event:orientationChange orientationChange} event of
     * this `sap.m.SplitApp`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitApp` itself.
     *
     * Fires when orientation (portrait/landscape) is changed.
     */
    attachOrientationChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitApp` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SplitAppSettings extends $SplitContainerSettings {
    /**
     * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home
     * screen". Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
     * The icon must be in PNG format. The property can either store the URL of one single icon or an object
     * holding icon URLs for the different required sizes. Note that if single icon is used for all devices,
     * when scaled, its quality can regress. A desktop icon (used for bookmarks and overriding the favicon)
     * can also be configured. This requires an object to be given and the "icon" property of this object then
     * defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO
     * format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file
     * can contain different images for different resolutions.
     *
     * One example is:
     *
     * app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png',
     * 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });
     *
     * The image size is 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one
     * of the sizes is not given, the largest given icon will be used for this size.
     *
     * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare
     * effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed
     * property to true.
     */
    homeIcon?: any | PropertyBindingInfo;

    /**
     * @deprecated (since 1.87) - use {@link sap.ui.Device.orientation.attachHandler} instead.
     *
     * Fires when orientation (portrait/landscape) is changed.
     */
    orientationChange?: Function;
  }
}

declare module "sap/m/SplitContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { URI, ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { SplitAppMode } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * A container control that is used to display a master-detail view.
   *
   * Overview: The SplitContainer divides the screen into two areas:
   * 	 - Master area - contains a list of available items where the user can search and filter.
   * 	 - Details area - contains a control which shows further details on the item(s) selected from the master
   * 			view.  Both areas have separate headers and footer bars with navigation and actions.
   *
   * Usage: SplitContainer should take the full width of the page in order to work properly. When to use:
   *
   * 	 - You need to review and process different items quickly with minimal navigation.  When not to
   * 			use:
   * 	 - You need to offer complex filters for the list of items.
   * 	 - You need to see different attributes for each item in the list, and compare these values across items.
   *
   * 	 - You want to display a single object. Do not use the master list to display different facets of the
   * 			same object.
   *
   * Responsive Behavior: On narrow screens, such as phones or tablet devices in portrait mode, the master
   * list and the details are split into two separate pages. The user can navigate between the list and details,
   * and see all the available information for each area.
   */
  export default class SplitContainer extends Control {
    /**
     * Constructor for a new SplitContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitContainerSettings
    );
    /**
     * Constructor for a new SplitContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SplitContainerSettings
    );

    /**
     * Adds some detailPage to the aggregation {@link #getDetailPages detailPages}.
     */
    addDetailPage(
      /**
       * The detailPage to add; if empty, nothing is inserted
       */
      oDetailPage: Control
    ): this;
    /**
     * Adds some masterPage to the aggregation {@link #getMasterPages masterPages}.
     */
    addMasterPage(
      /**
       * The masterPage to add; if empty, nothing is inserted
       */
      oMasterPage: Control
    ): this;
    /**
     * @SINCE 1.11.1
     *
     * Adds a content entity either to master area or detail area depending on the master parameter.
     *
     * The method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App.
     * So that the same code line can be reused.
     */
    addPage(
      /**
       * The content entities between which this SplitContainer navigates in either master area or detail area
       * depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.mvc.View, sap.m.Carousel
       * or any other control with fullscreen/page semantics.
       */
      oPage: Control,
      /**
       * States if the page should be added to the master area. If it's set to false, the page is added to detail
       * area.
       */
      bMaster: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterDetailNavigate afterDetailNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in detail area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the "navigate" event.
     */
    attachAfterDetailNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterClose afterMasterClose} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when the master area is fully closed after the animation (if any).
     */
    attachAfterMasterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterNavigate afterMasterNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in master area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the navigate event.
     */
    attachAfterMasterNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterOpen afterMasterOpen} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when the master area is fully opened after animation if any.
     */
    attachAfterMasterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeMasterClose beforeMasterClose} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires before the master area is closed.
     */
    attachBeforeMasterClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeMasterOpen beforeMasterOpen} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires before the master area is opened.
     */
    attachBeforeMasterOpen(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailNavigate detailNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in detail area has been triggered. The transition (if any) to
     * the new page has not started yet. NOTE: This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    attachDetailNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:masterButton masterButton} event of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the
     * SplitContainer control does not handle the placement of the master button automatically.
     */
    attachMasterButton(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:masterNavigate masterNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in master area has been triggered. The transition (if any) to
     * the new page has not started yet. This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    attachMasterNavigate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Navigates back to the previous detail page found in the history.
     */
    backDetail(
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the back navigation. The event on the target page will contain this data object as backData property.
       * (The original data from the to() navigation will still be available as data property.)
       *
       * In scenarios where the entity triggering the navigation can or should not directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used, for example, when returning from a detail
       * page to transfer any settings done there.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oBackData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element,
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the transitionParameters property, the data property must be used (at least "null" must
       * be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameter: object
    ): this;
    /**
     * Navigates back to the previous master page which is found in the history.
     */
    backMaster(
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the back navigation. The event on the target page will contain this data object as backData property
       * (the original data from the to() navigation will still be available as data property).
       *
       * In scenarios where the entity triggering the navigation can or should not directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used, for example, when returning from a detail
       * page to transfer any settings done there.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oBackData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element,
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the transitionParameters property, the data property must be used (at least "null" must
       * be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameter: object
    ): this;
    /**
     * @SINCE 1.10.0
     *
     * Navigates back to the nearest previous page in the SplitContainer history with the given ID (if there
     * is no such page among the previous pages, nothing happens). The transition effect, which had been used
     * to get to the current page is inverted and used for this navigation.
     *
     * Calling this navigation method, first triggers the (cancelable) navigate event on the SplitContainer,
     * then the BeforeHide pseudo event on the source page, BeforeFirstShow (if applicable), and BeforeShow
     * on the target page. Later, after the transition has completed, the AfterShow pseudo event is triggered
     * on the target page and AfterHide - on the page, which has been left. The given backData object is available
     * in the BeforeFirstShow, BeforeShow, and AfterShow event objects as data property. The original "data"
     * object from the "to" navigation is also available in these event objects.
     */
    backToPage(
      /**
       * The screen to which is being navigated to. The ID or the control itself can be given.
       */
      sPageId: string,
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the back navigation. The event on the target page will contain this data object as backData property.
       * (the original data from the to() navigation will still be available as data property).
       *
       * In scenarios, where the entity triggering the navigation can't or shouldn't directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used, for example, when returning from a detail
       * page to transfer any settings done there.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oBackData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element,
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the transitionParameters property, the data property must be used (at least "null" must
       * be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameters: object
    ): this;
    /**
     * Navigates back to the initial/top level of Detail (this is the element aggregated as initialPage, or
     * the first added element). NOTE: If already on the initial page, nothing happens. The transition effect
     * which had been used to get to the current page is inverted and used for this navigation.
     */
    backToTopDetail(
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the back navigation. The event on the target page will contain this data object as backData property
       * (the original data from the to() navigation will still be available as data property).
       *
       * In scenarios where the entity triggering the navigation can or should not directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used, for example, when returning from a detail
       * page to transfer any settings done there.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oBackData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element,
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the transitionParameters property, the data property must be used (at least "null" must
       * be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameter: object
    ): Control;
    /**
     * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or
     * the first added element). NOTE: If already on the initial page, nothing happens. The transition effect
     * which had been used to get to the current page is inverted and used for this navigation.
     */
    backToTopMaster(
      /**
       * This optional object can carry any payload data which should be made available to the target page of
       * the back navigation. The event on the target page will contain this data object as "backData" property.
       * (The original data from the "to()" navigation will still be available as "data" property.)
       *
       * In scenarios where the entity triggering the navigation can or should not directly initialize the target
       * page, it can fill this object and the target page itself (or a listener on it) can take over the initialization,
       * using the given data. For back navigation this can be used e.g. when returning from a detail page to
       * transfer any settings done there.
       *
       * When the "transitionParameters" object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      oBackData: object,
      /**
       * This optional object can give additional information to the transition function, like the DOM element
       * which triggered the transition or the desired transition duration. The animation type can NOT be selected
       * here - it is always the inverse of the "to" navigation.
       *
       * In order to use the transitionParameters property, the data property must be used (at least "null" must
       * be given) for a proper parameter order.
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition.
       */
      oTransitionParameter: object
    ): Control;
    /**
     * Destroys all the detailPages in the aggregation {@link #getDetailPages detailPages}.
     */
    destroyDetailPages(): this;
    /**
     * Destroys all the masterPages in the aggregation {@link #getMasterPages masterPages}.
     */
    destroyMasterPages(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterDetailNavigate afterDetailNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterDetailNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterMasterClose afterMasterClose} event of
     * this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterMasterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterMasterNavigate afterMasterNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterMasterNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterMasterOpen afterMasterOpen} event of
     * this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterMasterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeMasterClose beforeMasterClose} event
     * of this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeMasterClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeMasterOpen beforeMasterOpen} event of
     * this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeMasterOpen(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:detailNavigate detailNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDetailNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:masterButton masterButton} event of this `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachMasterButton(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:masterNavigate masterNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachMasterNavigate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.SplitContainer with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SplitContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterDetailNavigate afterDetailNavigate} to attached listeners.
     */
    fireAfterDetailNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page, which had been displayed before navigation.
         */
        from?: Control;
        /**
         * The ID of the page, which had been displayed before navigation.
         */
        fromId?: string;
        /**
         * The page, which is now displayed after navigation.
         */
        to?: Control;
        /**
         * The ID of the page, which is now displayed after navigation.
         */
        toId?: string;
        /**
         * Determines whether the "to" page (more precisely: a control with the ID of the page, which has been navigated
         * to) has not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether was a forward navigation, triggered by to().
         */
        isTo?: boolean;
        /**
         * Determines whether this was a back navigation, triggered by back().
         */
        isBack?: boolean;
        /**
         * Determines whether this was a navigation to the root page, triggered by backToTop().
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page, triggered by backToPage().
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:afterMasterClose afterMasterClose} to attached listeners.
     */
    fireAfterMasterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:afterMasterNavigate afterMasterNavigate} to attached listeners.
     */
    fireAfterMasterNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page, which had been displayed before navigation.
         */
        from?: Control;
        /**
         * The ID of the page, which had been displayed before navigation.
         */
        fromId?: string;
        /**
         * The page, which is now displayed after navigation.
         */
        to?: Control;
        /**
         * The ID of the page, which is now displayed after navigation.
         */
        toId?: string;
        /**
         * Whether the "to" page (more precisely: a control with the ID of the page, which has been navigated to)
         * has not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether was a forward navigation, triggered by to().
         */
        isTo?: boolean;
        /**
         * Determines whether this was a back navigation, triggered by back().
         */
        isBack?: boolean;
        /**
         * Determines whether this was a navigation to the root page, triggered by backToTop().
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page, triggered by backToPage().
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:afterMasterOpen afterMasterOpen} to attached listeners.
     */
    fireAfterMasterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeMasterClose beforeMasterClose} to attached listeners.
     */
    fireBeforeMasterClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:beforeMasterOpen beforeMasterOpen} to attached listeners.
     */
    fireBeforeMasterOpen(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:detailNavigate detailNavigate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireDetailNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page, which was displayed before the current navigation.
         */
        from?: Control;
        /**
         * The ID of the page, which was displayed before the current navigation.
         */
        fromId?: string;
        /**
         * The page, which will be displayed after the current navigation.
         */
        to?: Control;
        /**
         * The ID of the page, which will be displayed after the current navigation.
         */
        toId?: string;
        /**
         * Determines whether the "to" page (more precisely: a control with the ID of the page, which is currently
         * navigated to) has not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether this is a forward navigation, triggered by to().
         */
        isTo?: boolean;
        /**
         * Determines whether this is a back navigation, triggered by back().
         */
        isBack?: boolean;
        /**
         * Determines whether this is a navigation to the root page, triggered by backToTop().
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page, triggered by backToPage().
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): boolean;
    /**
     * Fires event {@link #event:masterButton masterButton} to attached listeners.
     */
    fireMasterButton(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:masterNavigate masterNavigate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireMasterNavigate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The page, which was displayed before the current navigation.
         */
        from?: Control;
        /**
         * The ID of the page, which was displayed before the current navigation.
         */
        fromId?: string;
        /**
         * The page, which will be displayed after the current navigation.
         */
        to?: Control;
        /**
         * The ID of the page, which will be displayed after the current navigation.
         */
        toId?: string;
        /**
         * Determines whether the "to" page (more precisely: a control with the ID of the page, which is currently
         * being navigated to) has not been displayed/navigated to before.
         */
        firstTime?: boolean;
        /**
         * Determines whether this is a forward navigation, triggered by to().
         */
        isTo?: boolean;
        /**
         * Determines whether this is a back navigation, triggered by back().
         */
        isBack?: boolean;
        /**
         * Determines whether this is a navigation to the root page, triggered by backToTop().
         */
        isBackToTop?: boolean;
        /**
         * Determines whether this was a navigation to a specific page, triggered by backToPage().
         */
        isBackToPage?: boolean;
        /**
         * Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
         */
        direction?: string;
      }
    ): boolean;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundColor backgroundColor}.
     *
     * Determines the background color of the SplitContainer. If set, this color overrides the default one,
     * which is defined by the theme (should only be used when really required). Any configured background image
     * will be placed above this colored background, but any theme adaptation in the Theme Designer will override
     * this setting. Use the backgroundRepeat property to define whether this image should be stretched to cover
     * the complete SplitContainer or whether it should be tiled.
     */
    getBackgroundColor(): string;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundImage backgroundImage}.
     *
     * Sets the background image of the SplitContainer. When set, this image overrides the default background
     * defined by the theme (should only be used when really required). This background image will be placed
     * above any color set for the background, but any theme adaptation in the Theme Designer will override
     * this image setting. Use the backgroundRepeat property to define whether this image should be stretched
     * to cover the complete SplitContainer or whether it should be tiled.
     */
    getBackgroundImage(): URI;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque). This
     * can be used to improve the content visibility by making the background image partly transparent.
     *
     * Default value is `1`.
     */
    getBackgroundOpacity(): float;
    /**
     * @SINCE 1.11.2
     *
     * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Defines whether the background image (if configured) is proportionally stretched to cover the whole SplitContainer
     * (false) or whether it should be tiled (true).
     *
     * Default value is `false`.
     */
    getBackgroundRepeat(): boolean;
    /**
     * Returns the current displayed detail page.
     */
    getCurrentDetailPage(): Control;
    /**
     * Returns the current displayed master page.
     */
    getCurrentMasterPage(): Control;
    /**
     * @SINCE 1.11.1
     *
     * Returns the currently displayed page either in master area or in detail area. When the parameter is set
     * to true, the current page in master area is returned, otherwise, the current page in detail area is returned.
     *
     * This method is provided mainly for API consistency between sap.m.SplitContainer and sap.m.App, so that
     * the same code line can be reused.
     */
    getCurrentPage(
      /**
       * States if this function returns the current page in master area. If it's set to false, the current page
       * in detail area will be returned.
       */
      bMaster: boolean
    ): Control;
    /**
     * Gets current value of property {@link #getDefaultTransitionNameDetail defaultTransitionNameDetail}.
     *
     * Determines the type of the transition/animation to apply when to() is called without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     *
     * Default value is `"slide"`.
     */
    getDefaultTransitionNameDetail(): string;
    /**
     * Gets current value of property {@link #getDefaultTransitionNameMaster defaultTransitionNameMaster}.
     *
     * Determines the type of the transition/animation to apply when to() is called, without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     *
     * Default value is `"slide"`.
     */
    getDefaultTransitionNameMaster(): string;
    /**
     * @SINCE 1.11.1
     *
     * Returns the page with the given ID in detail area. If there's no page that has the given ID, null is
     * returned.
     */
    getDetailPage(
      /**
       * The ID of the page that needs to be fetched.
       */
      sId: string
    ): Control;
    /**
     * Gets content of aggregation {@link #getDetailPages detailPages}.
     *
     * Determines the content entities, between which the SplitContainer navigates in detail area. These can
     * be of type sap.m.Page, sap.ui.core.mvc.View, sap.m.Carousel or any other control with fullscreen/page
     * semantics. These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
     */
    getDetailPages(): Control[];
    /**
     * ID of the element which is the current target of the association {@link #getInitialDetail initialDetail},
     * or `null`.
     */
    getInitialDetail(): ID;
    /**
     * ID of the element which is the current target of the association {@link #getInitialMaster initialMaster},
     * or `null`.
     */
    getInitialMaster(): ID;
    /**
     * Gets current value of property {@link #getMasterButtonText masterButtonText}.
     *
     * Determines the text displayed in master button, which has a default value "Navigation". This text is
     * only displayed in iOS platform and the icon from the current page in detail area is displayed in the
     * master button for the other platforms. The master button is shown/hidden depending on the orientation
     * of the device and whether the master area is opened or not. SplitContainer manages the show/hide of the
     * master button by itself only when the pages added to the detail area are sap.m.Page with built-in header
     * or sap.m.Page with built-in header, which is wrapped by one or several sap.ui.core.mvc.View. Otherwise,
     * the show/hide of master button needs to be managed by the application.
     */
    getMasterButtonText(): string;
    /**
     * @SINCE 1.48
     *
     * Gets current value of property {@link #getMasterButtonTooltip masterButtonTooltip}.
     *
     * Specifies the tooltip of the master button. If the tooltip is not specified, the title of the page, which
     * is displayed is the master part, is set as tooltip to the master button.
     */
    getMasterButtonTooltip(): string;
    /**
     * @SINCE 1.11.1
     *
     * Returns the page with the given ID in master area (if there's no page that has the given ID, null is
     * returned).
     */
    getMasterPage(
      /**
       * The ID of the page that needs to be fetched
       */
      sId: string
    ): Control;
    /**
     * Gets content of aggregation {@link #getMasterPages masterPages}.
     *
     * Determines the content entities, between which the SplitContainer navigates in master area. These can
     * be of type sap.m.Page, sap.ui.core.mvc.View, sap.m.Carousel or any other control with fullscreen/page
     * semantics. These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
     */
    getMasterPages(): Control[];
    /**
     * Returns a metadata object for class sap.m.SplitContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
     * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode. Other possible
     * values are Hide (Master is always hidden) and Popover (master is displayed in popover).
     *
     * Default value is `ShowHideMode`.
     */
    getMode(): SplitAppMode | keyof typeof SplitAppMode;
    /**
     * @SINCE 1.11.1
     *
     * Returns the page with the given ID from either master area, or detail area depending on the master parameter
     * (if there's no page that has the given ID, null is returned).
     */
    getPage(
      /**
       * The ID of the page that needs to be fetched
       */
      sId: string,
      /**
       * If the page with given ID should be fetched from the master area. If it's set to false, the page will
       * be fetched from detail area.
       */
      bMaster: boolean
    ): Control;
    /**
     * Returns the previous page (the page, from which the user drilled down to the current page with to()).
     * Note: this is not the page, which the user has seen before, but the page which is the target of the next
     * back() navigation. If there is no previous page, "undefined" is returned.
     */
    getPreviousPage(
      /**
       * States if this function returns the previous page in master area. If it's set to false, the previous
       * page in detail area will be returned.
       */
      bMaster: boolean
    ): Control;
    /**
     * Used to hide the master page when in ShowHideMode and the device is in portrait mode.
     */
    hideMaster(): this;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getDetailPages detailPages}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfDetailPage(
      /**
       * The detailPage whose index is looked for
       */
      oDetailPage: Control
    ): int;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getMasterPages masterPages}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfMasterPage(
      /**
       * The masterPage whose index is looked for
       */
      oMasterPage: Control
    ): int;
    /**
     * Inserts a detailPage into the aggregation {@link #getDetailPages detailPages}.
     */
    insertDetailPage(
      /**
       * The detailPage to insert; if empty, nothing is inserted
       */
      oDetailPage: Control,
      /**
       * The `0`-based index the detailPage should be inserted at; for a negative value of `iIndex`, the detailPage
       * is inserted at position 0; for a value greater than the current size of the aggregation, the detailPage
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a masterPage into the aggregation {@link #getMasterPages masterPages}.
     */
    insertMasterPage(
      /**
       * The masterPage to insert; if empty, nothing is inserted
       */
      oMasterPage: Control,
      /**
       * The `0`-based index the masterPage should be inserted at; for a negative value of `iIndex`, the masterPage
       * is inserted at position 0; for a value greater than the current size of the aggregation, the masterPage
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
     *
     * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark
     * and then wants to navigate up in the drilldown hierarchy. Normally, such a back navigation would not
     * be possible as there is no previous page in the SplitContainer's history stack.
     */
    insertPreviousPage(
      /**
       * The ID of the control/page/screen, which is inserted into the history stack. The respective control must
       * be aggregated by the SplitContainer, otherwise this will cause an error.
       */
      sPageId: string,
      /**
       * The type of the transition/animation which would have been used to navigate from the (inserted) previous
       * page to the current page. When navigating back, the inverse animation will be applied. Options are "slide"
       * (horizontal movement from the right), "baseSlide", "fade", "flip", and "show" and the names of any registered
       * custom transitions.
       */
      transitionName: string,
      /**
       * This optional object can carry any payload data which would have been given to the inserted previous
       * page if the user would have done a normal forward navigation to it.
       */
      oData: object
    ): this;
    /**
     * @SINCE 1.16.5
     *
     * Returns whether master area is currently displayed on the screen. In desktop browser or tablet, this
     * method returns true when master area is displayed on the screen, regardless if in portrait or landscape
     * mode. On mobile phone devices, this method returns true when the currently displayed page is from the
     * pages, which are added to the master area, otherwise, it returns false.
     */
    isMasterShown(): boolean;
    /**
     * Removes all the controls from the aggregation {@link #getDetailPages detailPages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllDetailPages(): Control[];
    /**
     * Removes all the controls from the aggregation {@link #getMasterPages masterPages}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllMasterPages(): Control[];
    /**
     * Removes a detailPage from the aggregation {@link #getDetailPages detailPages}.
     */
    removeDetailPage(
      /**
       * The detailPage to remove or its index or id
       */
      vDetailPage: int | string | Control
    ): Control;
    /**
     * Removes a masterPage from the aggregation {@link #getMasterPages masterPages}.
     */
    removeMasterPage(
      /**
       * The masterPage to remove or its index or id
       */
      vMasterPage: int | string | Control
    ): Control;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
     *
     * Determines the background color of the SplitContainer. If set, this color overrides the default one,
     * which is defined by the theme (should only be used when really required). Any configured background image
     * will be placed above this colored background, but any theme adaptation in the Theme Designer will override
     * this setting. Use the backgroundRepeat property to define whether this image should be stretched to cover
     * the complete SplitContainer or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundColor(
      /**
       * New value for property `backgroundColor`
       */
      sBackgroundColor?: string
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
     *
     * Sets the background image of the SplitContainer. When set, this image overrides the default background
     * defined by the theme (should only be used when really required). This background image will be placed
     * above any color set for the background, but any theme adaptation in the Theme Designer will override
     * this image setting. Use the backgroundRepeat property to define whether this image should be stretched
     * to cover the complete SplitContainer or whether it should be tiled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setBackgroundImage(
      /**
       * New value for property `backgroundImage`
       */
      sBackgroundImage?: URI
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
     *
     * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque). This
     * can be used to improve the content visibility by making the background image partly transparent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setBackgroundOpacity(
      /**
       * New value for property `backgroundOpacity`
       */
      fBackgroundOpacity?: float
    ): this;
    /**
     * @SINCE 1.11.2
     *
     * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
     *
     * Defines whether the background image (if configured) is proportionally stretched to cover the whole SplitContainer
     * (false) or whether it should be tiled (true).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setBackgroundRepeat(
      /**
       * New value for property `backgroundRepeat`
       */
      bBackgroundRepeat?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultTransitionNameDetail defaultTransitionNameDetail}.
     *
     * Determines the type of the transition/animation to apply when to() is called without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"slide"`.
     */
    setDefaultTransitionNameDetail(
      /**
       * New value for property `defaultTransitionNameDetail`
       */
      sDefaultTransitionNameDetail?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDefaultTransitionNameMaster defaultTransitionNameMaster}.
     *
     * Determines the type of the transition/animation to apply when to() is called, without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"slide"`.
     */
    setDefaultTransitionNameMaster(
      /**
       * New value for property `defaultTransitionNameMaster`
       */
      sDefaultTransitionNameMaster?: string
    ): this;
    /**
     * Sets the associated {@link #getInitialDetail initialDetail}.
     */
    setInitialDetail(
      /**
       * ID of an element which becomes the new target of this initialDetail association; alternatively, an element
       * instance may be given
       */
      oInitialDetail: ID | Control
    ): this;
    /**
     * Sets the associated {@link #getInitialMaster initialMaster}.
     */
    setInitialMaster(
      /**
       * ID of an element which becomes the new target of this initialMaster association; alternatively, an element
       * instance may be given
       */
      oInitialMaster: ID | Control
    ): this;
    /**
     * Sets a new value for property {@link #getMasterButtonText masterButtonText}.
     *
     * Determines the text displayed in master button, which has a default value "Navigation". This text is
     * only displayed in iOS platform and the icon from the current page in detail area is displayed in the
     * master button for the other platforms. The master button is shown/hidden depending on the orientation
     * of the device and whether the master area is opened or not. SplitContainer manages the show/hide of the
     * master button by itself only when the pages added to the detail area are sap.m.Page with built-in header
     * or sap.m.Page with built-in header, which is wrapped by one or several sap.ui.core.mvc.View. Otherwise,
     * the show/hide of master button needs to be managed by the application.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMasterButtonText(
      /**
       * New value for property `masterButtonText`
       */
      sMasterButtonText?: string
    ): this;
    /**
     * @SINCE 1.48
     *
     * Sets a new value for property {@link #getMasterButtonTooltip masterButtonTooltip}.
     *
     * Specifies the tooltip of the master button. If the tooltip is not specified, the title of the page, which
     * is displayed is the master part, is set as tooltip to the master button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMasterButtonTooltip(
      /**
       * New value for property `masterButtonTooltip`
       */
      sMasterButtonTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
     * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode. Other possible
     * values are Hide (Master is always hidden) and Popover (master is displayed in popover).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `ShowHideMode`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: SplitAppMode | keyof typeof SplitAppMode
    ): this;
    /**
     * Used to make the master page visible when in ShowHideMode and the device is in portrait mode.
     */
    showMaster(): this;
    /**
     * @SINCE 1.10.0
     *
     * Navigates to the given page inside the SplitContainer. The navigation is done inside the master area
     * if the page has been added, otherwise, it tries to do the page navigation in the detail area.
     */
    to(
      /**
       * The screen to which we are navigating to. The ID or the control itself can be given.
       */
      sPageId: string,
      /**
       * The type of the transition/animation to apply. Options are "slide" (horizontal movement from the right),
       * "baseSlide", "fade", "flip", and "show" and the names of any registered custom transitions.
       *
       * None of the standard transitions is currently making use of any given transition parameters.
       */
      transitionName: string,
      /**
       * This optional object can carry any payload data which should be made available to the target page. The
       * BeforeShow event on the target page will contain this data object as data property.
       *
       * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the transitionParameters object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      oData: object,
      /**
       * This optional object can contain additional information for the transition function, like the DOM element
       * which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the "data" parameter must be given when the transitionParameters parameter
       * is used (it can be given as "null").
       *
       * NOTE: It depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use
       * any parameter.
       */
      oTransitionParameters: object
    ): this;
    /**
     * Navigates to a given detail page.
     */
    toDetail(
      sPageId: string,
      /**
       * The type of the transition/animation to apply. Options are "slide" (horizontal movement from the right),
       * "baseSlide", "fade", "flip", and "show" and the names of any registered custom transitions.
       *
       * None of the standard transitions is currently making use of any given transition parameters.
       */
      sTransitionName: string,
      /**
       * This optional object can carry any payload data which should be made available to the target page. The
       * BeforeShow event on the target page will contain this data object as data property.
       *
       * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oData: object,
      /**
       * This optional object can contain additional information for the transition function, like the DOM element,
       * which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the data parameter must be given when the transitionParameters parameter
       * is used (it can be given as "null").
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use
       * any parameter.
       */
      oTransitionParameter: object
    ): this;
    /**
     * Navigates to a given master page.
     */
    toMaster(
      /**
       * The screen to which drilldown should happen. The ID or the control itself can be given.
       */
      sPageId: string,
      /**
       * The type of the transition/animation to apply. Options are "slide" (horizontal movement from the right),
       * "baseSlide", "fade", "flip", and "show" and the names of any registered custom transitions.
       *
       * None of the standard transitions is currently making use of any given transition parameters.
       */
      sTransitionName: string,
      /**
       * Since version 1.7.1. This optional object can carry any payload data which should be made available to
       * the target page. The BeforeShow event on the target page will contain this data object as data property.
       *
       * Use case: in scenarios where the entity triggering the navigation can't or shouldn't directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the transitionParameters object is used, this data object must also be given (either as object or
       * as null) in order to have a proper parameter order.
       */
      oData: object,
      /**
       * Since version 1.7.1. This optional object can contain additional information for the transition function,
       * like the DOM element, which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the data parameter must be given when the transitionParameters parameter
       * is used (it can be given as "null").
       *
       * NOTE: it depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use
       * any parameter.
       */
      oTransitionParameters: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterDetailNavigate afterDetailNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in detail area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the "navigate" event.
     */
    attachAfterDetailNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterClose afterMasterClose} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when the master area is fully closed after the animation (if any).
     */
    attachAfterMasterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterNavigate afterMasterNavigate} event
     * of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in master area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the navigate event.
     */
    attachAfterMasterNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterMasterOpen afterMasterOpen} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when the master area is fully opened after animation if any.
     */
    attachAfterMasterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeMasterClose beforeMasterClose} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires before the master area is closed.
     */
    attachBeforeMasterClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeMasterOpen beforeMasterOpen} event of
     * this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires before the master area is opened.
     */
    attachBeforeMasterOpen(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:detailNavigate detailNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in detail area has been triggered. The transition (if any) to
     * the new page has not started yet. NOTE: This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    attachDetailNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:masterButton masterButton} event of this `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the
     * SplitContainer control does not handle the placement of the master button automatically.
     */
    attachMasterButton(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:masterNavigate masterNavigate} event of this
     * `sap.m.SplitContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.SplitContainer` itself.
     *
     * Fires when navigation between two pages in master area has been triggered. The transition (if any) to
     * the new page has not started yet. This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    attachMasterNavigate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.SplitContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
     *
     * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark
     * and then wants to navigate up in the drilldown hierarchy. Normally, such a back navigation would not
     * be possible as there is no previous page in the SplitContainer's history stack.
     */
    insertPreviousPage(
      /**
       * The ID of the control/page/screen, which is inserted into the history stack. The respective control must
       * be aggregated by the SplitContainer, otherwise this will cause an error.
       */
      sPageId: string,
      /**
       * This optional object can carry any payload data which would have been given to the inserted previous
       * page if the user would have done a normal forward navigation to it.
       */
      oData: object
    ): this;
    /**
     * @SINCE 1.10.0
     *
     * Navigates to the given page inside the SplitContainer. The navigation is done inside the master area
     * if the page has been added, otherwise, it tries to do the page navigation in the detail area.
     */
    to(
      /**
       * The screen to which we are navigating to. The ID or the control itself can be given.
       */
      sPageId: string,
      /**
       * This optional object can carry any payload data which should be made available to the target page. The
       * BeforeShow event on the target page will contain this data object as data property.
       *
       * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize
       * the target page, it can fill this object and the target page itself (or a listener on it) can take over
       * the initialization, using the given data.
       *
       * When the transitionParameters object is used, this "data" object must also be given (either as object
       * or as null) in order to have a proper parameter order.
       */
      oData: object,
      /**
       * This optional object can contain additional information for the transition function, like the DOM element
       * which triggered the transition or the desired transition duration.
       *
       * For a proper parameter order, the "data" parameter must be given when the transitionParameters parameter
       * is used (it can be given as "null").
       *
       * NOTE: It depends on the transition function how the object should be structured and which parameters
       * are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use
       * any parameter.
       */
      oTransitionParameters: object
    ): this;
  }

  export interface $SplitContainerSettings extends $ControlSettings {
    /**
     * Determines the type of the transition/animation to apply when to() is called without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     */
    defaultTransitionNameDetail?: string | PropertyBindingInfo;

    /**
     * Determines the type of the transition/animation to apply when to() is called, without defining the transition
     * to use. The default is "slide", other options are "fade", "show", and the names of any registered custom
     * transitions.
     */
    defaultTransitionNameMaster?: string | PropertyBindingInfo;

    /**
     * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
     * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode. Other possible
     * values are Hide (Master is always hidden) and Popover (master is displayed in popover).
     */
    mode?: (SplitAppMode | keyof typeof SplitAppMode) | PropertyBindingInfo;

    /**
     * Determines the text displayed in master button, which has a default value "Navigation". This text is
     * only displayed in iOS platform and the icon from the current page in detail area is displayed in the
     * master button for the other platforms. The master button is shown/hidden depending on the orientation
     * of the device and whether the master area is opened or not. SplitContainer manages the show/hide of the
     * master button by itself only when the pages added to the detail area are sap.m.Page with built-in header
     * or sap.m.Page with built-in header, which is wrapped by one or several sap.ui.core.mvc.View. Otherwise,
     * the show/hide of master button needs to be managed by the application.
     */
    masterButtonText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.48
     *
     * Specifies the tooltip of the master button. If the tooltip is not specified, the title of the page, which
     * is displayed is the master part, is set as tooltip to the master button.
     */
    masterButtonTooltip?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Determines the background color of the SplitContainer. If set, this color overrides the default one,
     * which is defined by the theme (should only be used when really required). Any configured background image
     * will be placed above this colored background, but any theme adaptation in the Theme Designer will override
     * this setting. Use the backgroundRepeat property to define whether this image should be stretched to cover
     * the complete SplitContainer or whether it should be tiled.
     */
    backgroundColor?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Sets the background image of the SplitContainer. When set, this image overrides the default background
     * defined by the theme (should only be used when really required). This background image will be placed
     * above any color set for the background, but any theme adaptation in the Theme Designer will override
     * this image setting. Use the backgroundRepeat property to define whether this image should be stretched
     * to cover the complete SplitContainer or whether it should be tiled.
     */
    backgroundImage?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Defines whether the background image (if configured) is proportionally stretched to cover the whole SplitContainer
     * (false) or whether it should be tiled (true).
     */
    backgroundRepeat?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.11.2
     *
     * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque). This
     * can be used to improve the content visibility by making the background image partly transparent.
     */
    backgroundOpacity?: float | PropertyBindingInfo;

    /**
     * Determines the content entities, between which the SplitContainer navigates in master area. These can
     * be of type sap.m.Page, sap.ui.core.mvc.View, sap.m.Carousel or any other control with fullscreen/page
     * semantics. These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
     */
    masterPages?: Control[] | Control | AggregationBindingInfo;

    /**
     * Determines the content entities, between which the SplitContainer navigates in detail area. These can
     * be of type sap.m.Page, sap.ui.core.mvc.View, sap.m.Carousel or any other control with fullscreen/page
     * semantics. These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:BeforeShow
     * BeforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
     */
    detailPages?: Control[] | Control | AggregationBindingInfo;

    /**
     * Sets the initial detail page, which is displayed on application launch.
     */
    initialDetail?: Control | string;

    /**
     * Sets the initial master page, which is displayed on application launch.
     */
    initialMaster?: Control | string;

    /**
     * Fires when navigation between two pages in master area has been triggered. The transition (if any) to
     * the new page has not started yet. This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    masterNavigate?: Function;

    /**
     * Fires when navigation between two pages in master area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the navigate event.
     */
    afterMasterNavigate?: Function;

    /**
     * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the
     * SplitContainer control does not handle the placement of the master button automatically.
     */
    masterButton?: Function;

    /**
     * Fires before the master area is opened.
     */
    beforeMasterOpen?: Function;

    /**
     * Fires when the master area is fully opened after animation if any.
     */
    afterMasterOpen?: Function;

    /**
     * Fires before the master area is closed.
     */
    beforeMasterClose?: Function;

    /**
     * Fires when the master area is fully closed after the animation (if any).
     */
    afterMasterClose?: Function;

    /**
     * Fires when navigation between two pages in detail area has been triggered. The transition (if any) to
     * the new page has not started yet. NOTE: This event can be aborted by the application with preventDefault(),
     * which means that there will be no navigation.
     */
    detailNavigate?: Function;

    /**
     * Fires when navigation between two pages in detail area has completed. NOTE: In case of animated transitions
     * this event is fired with some delay after the "navigate" event.
     */
    afterDetailNavigate?: Function;
  }
}

declare module "sap/m/StandardListItem" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import { URI, ValueState, TextDirection } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * `sap.m.StandardListItem` is a list item providing the most common use cases, e.g. image, title and description.
   */
  export default class StandardListItem extends ListItemBase {
    /**
     * Constructor for a new StandardListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/standard-list-item/ Standard List Item}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardListItemSettings
    );
    /**
     * Constructor for a new StandardListItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/standard-list-item/ Standard List Item}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardListItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.StandardListItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StandardListItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * Defines the icon that is shown while the list item is pressed.
     */
    getActiveIcon(): URI;
    /**
     * @SINCE 1.16.3
     *
     * Gets current value of property {@link #getAdaptTitleSize adaptTitleSize}.
     *
     * By default, the title size adapts to the available space and gets bigger if the description is empty.
     * If you have list items with and without descriptions, this results in titles with different sizes. In
     * this case, it can be better to switch the size adaption off by setting this property to `false`.
     *
     * Default value is `true`.
     */
    getAdaptTitleSize(): boolean;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Defines the additional information for the title. **Note:** This is only visible when the `title` property
     * is not empty.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the list item icon.
     */
    getIcon(): URI;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, one or more requests are sent to get the density perfect version of the icon if the given
     * version of the icon doesn't exist on the server. **Note:** If bandwidth is a key factor for the application,
     * set this value to `false`.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getIconInset iconInset}.
     *
     * Defines the indentation of the icon. If set to `false`, the icon will not be shown as embedded. Instead
     * it will take the full height of the list item.
     *
     * Default value is `true`.
     */
    getIconInset(): boolean;
    /**
     * Gets current value of property {@link #getInfo info}.
     *
     * Defines an additional information text.
     */
    getInfo(): string;
    /**
     * Gets current value of property {@link #getInfoState infoState}.
     *
     * Defines the state of the information text, e.g. `Error`, `Warning`, `Success`.
     *
     * Default value is `None`.
     */
    getInfoState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.74
     *
     * Gets current value of property {@link #getInfoStateInverted infoStateInverted}.
     *
     * Determines the inverted rendering behavior of the info text and the info state. The color defined by
     * the `infoState` property is rendered as the background color for the info text, if this property is set
     * to `true`.
     *
     * Default value is `false`.
     */
    getInfoStateInverted(): boolean;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getInfoTextDirection infoTextDirection}.
     *
     * Defines the `info` directionality with enumerated options. By default, the control inherits text direction
     * from the DOM.
     *
     * Default value is `Inherit`.
     */
    getInfoTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Returns a metadata object for class sap.m.StandardListItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the list item.
     */
    getTitle(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Defines the `title` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTitleTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.67
     *
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Defines the wrapping behavior of title and description texts.
     *
     * **Note:**
     *
     * In the desktop mode, initial rendering of the control contains 300 characters along with a button to
     * expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.
     *
     * Default value is `false`.
     */
    getWrapping(): boolean;
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * Defines the icon that is shown while the list item is pressed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * @SINCE 1.16.3
     *
     * Sets a new value for property {@link #getAdaptTitleSize adaptTitleSize}.
     *
     * By default, the title size adapts to the available space and gets bigger if the description is empty.
     * If you have list items with and without descriptions, this results in titles with different sizes. In
     * this case, it can be better to switch the size adaption off by setting this property to `false`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setAdaptTitleSize(
      /**
       * New value for property `adaptTitleSize`
       */
      bAdaptTitleSize?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Defines the additional information for the title. **Note:** This is only visible when the `title` property
     * is not empty.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the list item icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, one or more requests are sent to get the density perfect version of the icon if the given
     * version of the icon doesn't exist on the server. **Note:** If bandwidth is a key factor for the application,
     * set this value to `false`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIconInset iconInset}.
     *
     * Defines the indentation of the icon. If set to `false`, the icon will not be shown as embedded. Instead
     * it will take the full height of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconInset(
      /**
       * New value for property `iconInset`
       */
      bIconInset?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getInfo info}.
     *
     * Defines an additional information text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInfo(
      /**
       * New value for property `info`
       */
      sInfo?: string
    ): this;
    /**
     * Sets a new value for property {@link #getInfoState infoState}.
     *
     * Defines the state of the information text, e.g. `Error`, `Warning`, `Success`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setInfoState(
      /**
       * New value for property `infoState`
       */
      sInfoState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.74
     *
     * Sets a new value for property {@link #getInfoStateInverted infoStateInverted}.
     *
     * Determines the inverted rendering behavior of the info text and the info state. The color defined by
     * the `infoState` property is rendered as the background color for the info text, if this property is set
     * to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setInfoStateInverted(
      /**
       * New value for property `infoStateInverted`
       */
      bInfoStateInverted?: boolean
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getInfoTextDirection infoTextDirection}.
     *
     * Defines the `info` directionality with enumerated options. By default, the control inherits text direction
     * from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setInfoTextDirection(
      /**
       * New value for property `infoTextDirection`
       */
      sInfoTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the list item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
     *
     * Defines the `title` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTitleTextDirection(
      /**
       * New value for property `titleTextDirection`
       */
      sTitleTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * @SINCE 1.67
     *
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Defines the wrapping behavior of title and description texts.
     *
     * **Note:**
     *
     * In the desktop mode, initial rendering of the control contains 300 characters along with a button to
     * expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
  }

  export interface $StandardListItemSettings extends $ListItemBaseSettings {
    /**
     * Defines the title of the list item.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the additional information for the title. **Note:** This is only visible when the `title` property
     * is not empty.
     */
    description?: string | PropertyBindingInfo;

    /**
     * Defines the list item icon.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Defines the indentation of the icon. If set to `false`, the icon will not be shown as embedded. Instead
     * it will take the full height of the list item.
     */
    iconInset?: boolean | PropertyBindingInfo;

    /**
     * By default, one or more requests are sent to get the density perfect version of the icon if the given
     * version of the icon doesn't exist on the server. **Note:** If bandwidth is a key factor for the application,
     * set this value to `false`.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Defines the icon that is shown while the list item is pressed.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * Defines an additional information text.
     */
    info?: string | PropertyBindingInfo;

    /**
     * Defines the state of the information text, e.g. `Error`, `Warning`, `Success`.
     */
    infoState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.16.3
     *
     * By default, the title size adapts to the available space and gets bigger if the description is empty.
     * If you have list items with and without descriptions, this results in titles with different sizes. In
     * this case, it can be better to switch the size adaption off by setting this property to `false`.
     */
    adaptTitleSize?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the `title` text directionality with enumerated options. By default, the control inherits text
     * direction from the DOM.
     */
    titleTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * Defines the `info` directionality with enumerated options. By default, the control inherits text direction
     * from the DOM.
     */
    infoTextDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.67
     *
     * Defines the wrapping behavior of title and description texts.
     *
     * **Note:**
     *
     * In the desktop mode, initial rendering of the control contains 300 characters along with a button to
     * expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.74
     *
     * Determines the inverted rendering behavior of the info text and the info state. The color defined by
     * the `infoState` property is rendered as the background color for the info text, if this property is set
     * to `true`.
     */
    infoStateInverted?: boolean | PropertyBindingInfo;
  }
}

declare module "sap/m/StandardTile" {
  import { default as Tile, $TileSettings } from "sap/m/Tile";

  import { ID, URI, ValueState } from "sap/ui/core/library";

  import Control from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { StandardTileType } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   * @deprecated (since 1.50) - replaced by {@link sap.m.GenericTile}
   *
   * The StandardTile control is displayed in the tile container.
   */
  export default class StandardTile extends Tile {
    /**
     * Constructor for a new StandardTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardTileSettings
    );
    /**
     * Constructor for a new StandardTile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardTileSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Creates a new subclass of class sap.m.StandardTile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Tile.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StandardTile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getActiveIcon activeIcon}.
     *
     * Defines the active icon of the StandardTile.
     */
    getActiveIcon(): URI;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Gets the icon of the `StandardTile` control.
     */
    getIcon(): Object;
    /**
     * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * Default value is `true`.
     */
    getIconDensityAware(): boolean;
    /**
     * Gets current value of property {@link #getInfo info}.
     *
     * Defines the description of the StandardTile.
     */
    getInfo(): string;
    /**
     * Gets current value of property {@link #getInfoState infoState}.
     *
     * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
     *
     * Default value is `None`.
     */
    getInfoState(): ValueState | keyof typeof ValueState;
    /**
     * Returns a metadata object for class sap.m.StandardTile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNumber number}.
     *
     * Defines the number field of the StandardTile.
     */
    getNumber(): string;
    /**
     * Gets current value of property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier of the StandardTile.
     */
    getNumberUnit(): string;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the StandardTile.
     */
    getTitle(): string;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Defines the type of the StandardTile.
     *
     * Default value is `None`.
     */
    getType(): StandardTileType | keyof typeof StandardTileType;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getActiveIcon activeIcon}.
     *
     * Defines the active icon of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setActiveIcon(
      /**
       * New value for property `activeIcon`
       */
      sActiveIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the icon of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
     *
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIconDensityAware(
      /**
       * New value for property `iconDensityAware`
       */
      bIconDensityAware?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getInfo info}.
     *
     * Defines the description of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInfo(
      /**
       * New value for property `info`
       */
      sInfo?: string
    ): this;
    /**
     * Sets a new value for property {@link #getInfoState infoState}.
     *
     * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setInfoState(
      /**
       * New value for property `infoState`
       */
      sInfoState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * Sets a new value for property {@link #getNumber number}.
     *
     * Defines the number field of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumber(
      /**
       * New value for property `number`
       */
      sNumber?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNumberUnit numberUnit}.
     *
     * Defines the number units qualifier of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumberUnit(
      /**
       * New value for property `numberUnit`
       */
      sNumberUnit?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Defines the type of the StandardTile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: StandardTileType | keyof typeof StandardTileType
    ): this;
  }

  export interface $StandardTileSettings extends $TileSettings {
    /**
     * Defines the title of the StandardTile.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the description of the StandardTile.
     */
    info?: string | PropertyBindingInfo;

    /**
     * Defines the icon of the StandardTile.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Defines the active icon of the StandardTile.
     */
    activeIcon?: URI | PropertyBindingInfo;

    /**
     * Defines the number field of the StandardTile.
     */
    number?: string | PropertyBindingInfo;

    /**
     * Defines the number units qualifier of the StandardTile.
     */
    numberUnit?: string | PropertyBindingInfo;

    /**
     * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
     */
    infoState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * Defines the type of the StandardTile.
     */
    type?:
      | (StandardTileType | keyof typeof StandardTileType)
      | PropertyBindingInfo;

    /**
     * By default, this is set to true but then one or more requests are sent trying to get the density perfect
     * version of image if this version of image doesn't exist on the server.
     *
     * If bandwidth is key for the application, set this value to false.
     */
    iconDensityAware?: boolean | PropertyBindingInfo;

    /**
     * Association to controls / IDs, which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;
  }
}

declare module "sap/m/StandardTreeItem" {
  import {
    default as TreeItemBase,
    $TreeItemBaseSettings,
  } from "sap/m/TreeItemBase";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.42.0
   *
   * The `sap.m.StandardTreeItem` is a tree item providing a title, image, etc.
   */
  export default class StandardTreeItem extends TreeItemBase {
    /**
     * Constructor for a new StandardTreeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardTreeItemSettings
    );
    /**
     * Constructor for a new StandardTreeItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StandardTreeItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.StandardTreeItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.TreeItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StandardTreeItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the tree item icon.
     */
    getIcon(): URI;
    /**
     * Returns a metadata object for class sap.m.StandardTreeItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the item.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Defines the tree item icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Defines the title of the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }

  export interface $StandardTreeItemSettings extends $TreeItemBaseSettings {
    /**
     * Defines the title of the item.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Defines the tree item icon.
     */
    icon?: URI | PropertyBindingInfo;
  }
}

declare module "sap/m/StepInput" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IFormContent,
    ID,
    CSSSize,
    TextAlign,
    ValueState,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    StepInputStepModeType,
    StepInputValidationMode,
  } from "sap/m/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.40
   *
   * Allows the user to change the input values with predefined increments (steps).
   *
   * Overview:
   *
   * The `StepInput` consists of an input field and buttons with icons to increase/decrease the value.
   *
   * The user can change the value of the control by pressing the increase/decrease buttons, by typing a number
   * directly, by using the keyboard up/down and page up/down, or by using the mouse scroll wheel. Decimal
   * values are supported.
   *
   * Usage:
   *
   * The default step is 1 but the app developer can set a different one.
   *
   * On desktop, the control supports a larger step, when using the keyboard page up/down keys. You can set
   * a multiple of the step with the use of the `largerStep` property. The default value is 2 (two times the
   * set step). For example, when using the keyboard page up/down keys the value increases/decreases with
   * a double of the default step. If the set step is 2, the larger step is also 2 and the current value is
   * 1, using the page up key will increase the value to 5 (1 + 2*2).
   *
   * App developers can set a maximum and minimum value for the `StepInput`. The increase/decrease button
   * and the up/down keyboard navigation become disabled when the value reaches the max/min or a new value
   * is entered from the input which is greater/less than the max/min.
   *
   * When to use
   * 	 - To adjust amounts, quantities, or other values quickly.
   * 	 - To adjust values for a specific step.
   *
   * When not to use
   * 	 - To enter a static number (for example, postal code, phone number, or ID). In this case, use the regular
   * 			{@link sap.m.Input} instead.
   * 	 - To display a value that rarely needs to be adjusted and does not pertain to a particular step. In
   * 			this case, use the regular {@link sap.m.Input} instead.
   * 	 - To enter dates and times. In this case, use the {@link sap.m.DatePicker}, {@link sap.m.DateRangeSelection},
   * 			{@link sap.m.TimePicker}, or {@link sap.m.DateTimePicker} instead.
   *
   * **Note:** The control uses a JavaScript number to keep its value, which has a certain precision limit.
   *
   * In general, exponential notation is used:
   * 	 - if there are more than 21 digits before the decimal point.
   * 	 - if number starts with "0." followed by more than five zeros.
   *
   * Exponential notation is not supported by the control and using it may lead to unpredictable behavior.
   *
   * Also, the JavaScript number persists its precision up to 16 digits. If the user enters a number with
   * a greater precision, the value will be rounded.
   *
   * This restriction comes from JavaScript itself and it cannot be worked around in a feasible way.
   *
   * **Note:** Formatting of decimal numbers is browser dependent, regardless of framework number formatting.
   */
  export default class StepInput extends Control implements IFormContent {
    __implements__sap_ui_core_IFormContent: boolean;
    /**
     * Constructor for a new `StepInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/step-input/ Step Input}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $StepInputSettings
    );
    /**
     * Constructor for a new `StepInput`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/step-input/ Step Input}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $StepInputSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.StepInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.StepInput` itself.
     *
     * Is fired when one of the following happens:
     *
     * 	 - the text in the input has changed and the focus leaves the input field or the enter key is pressed.
     *
     * 	 - One of the decrement or increment buttons is pressed
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.StepInput` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.StepInput`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.StepInput with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, StepInput>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new `value` of the `control`.
         */
        value?: string;
      }
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getDescription description}.
     *
     * Determines the description text after the input field, for example units of measurement, currencies.
     */
    getDescription(): string;
    /**
     * @SINCE 1.46
     *
     * Gets current value of property {@link #getDisplayValuePrecision displayValuePrecision}.
     *
     * Determines the number of digits after the decimal point.
     *
     * The value should be between 0 (default) and 20. In case the value is not valid it will be set to the
     * default value.
     *
     * Default value is `0`.
     */
    getDisplayValuePrecision(): int;
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to the non-editable
     * control, highlight it, and copy the text from it.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getFieldWidth fieldWidth}.
     *
     * Determines the distribution of space between the input field and the description text . Default value
     * is 50% (leaving the other 50% for the description).
     *
     * **Note:** This property takes effect only if the `description` property is also set.
     *
     * Default value is `'50%'`.
     */
    getFieldWidth(): CSSSize;
    /**
     * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
     *
     * By default, this is the Id of the control itself.
     */
    getIdForLabel(): string;
    /**
     * Gets current value of property {@link #getLargerStep largerStep}.
     *
     * Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown
     * keys. Default value is 2 times larger than the set step.
     *
     * Default value is `2`.
     */
    getLargerStep(): float;
    /**
     * Gets current value of property {@link #getMax max}.
     *
     * Sets the maximum possible value of the defined range.
     */
    getMax(): float;
    /**
     * Returns a metadata object for class sap.m.StepInput.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMin min}.
     *
     * Sets the minimum possible value of the defined range.
     */
    getMin(): float;
    /**
     * @SINCE 1.44.15
     *
     * Gets current value of property {@link #getName name}.
     *
     * Defines the name of the control for the purposes of form submission.
     */
    getName(): string;
    /**
     * @SINCE 1.44.15
     *
     * Gets current value of property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    getPlaceholder(): string;
    /**
     * @SINCE 1.44.15
     *
     * Gets current value of property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * Default value is `false`.
     */
    getRequired(): boolean;
    /**
     * Gets current value of property {@link #getStep step}.
     *
     * Increases/decreases the value of the input. **Note:**
     * 	 - The value of the `step` property should not contain more digits after the decimal point than what
     * 			is set to the `displayValuePrecision` property, as it may lead to an increase/decrease that is not visible
     * 			for the user. For example, if the `value` is set to 1.22 and the `displayValuePrecision` is set to one
     * 			digit after the decimal, the user will see 1.2. In this case, if the `value` of the `step` property is
     * 			set to 1.005 and the user selects `increase`, the resulting value will increase to 1.2261 but the displayed
     * 			value will remain as 1.2 as it will be rounded to the first digit after the decimal point.
     * 	 - Depending on what is set for the `value` and the `displayValuePrecision` properties, it is possible
     * 			the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.
     *
     * Default value is `1`.
     */
    getStep(): float;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getStepMode stepMode}.
     *
     * Defines the calculation mode for the provided `step` and `largerStep`.
     *
     * If the user increases/decreases the value by `largerStep`, this calculation will consider it as well.
     * For example, if the current `value` is 3, `step` is 5, `largerStep` is 5 and the user chooses PageUp,
     * the calculation logic will consider the value of 3x5=15 to decide what will be the next `value`.
     *
     * Default value is `AdditionAndSubtraction`.
     */
    getStepMode(): StepInputStepModeType | keyof typeof StepInputStepModeType;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is displayed inside the input field.
     *
     * Default value is `End`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getValidationMode validationMode}.
     *
     * Defines when the validation of the typed value will happen. By default this happens on focus out.
     *
     * Default value is `FocusOut`.
     */
    getValidationMode():
      | StepInputValidationMode
      | keyof typeof StepInputValidationMode;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Determines the value of the `StepInput` and can be set initially from the app developer.
     *
     * Default value is `0`.
     */
    getValue(): float;
    /**
     * Gets current value of property {@link #getValueState valueState}.
     *
     * Accepts the core enumeration ValueState.type that supports `None`, `Error`, `Warning` and `Success`.
     * ValueState is managed internally only when validation is triggered by user interaction.
     *
     * Default value is `None`.
     */
    getValueState(): ValueState | keyof typeof ValueState;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up.
     */
    getValueStateText(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control.
     */
    getWidth(): CSSSize;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getDescription description}.
     *
     * Determines the description text after the input field, for example units of measurement, currencies.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * @SINCE 1.46
     *
     * Sets a new value for property {@link #getDisplayValuePrecision displayValuePrecision}.
     *
     * Determines the number of digits after the decimal point.
     *
     * The value should be between 0 (default) and 20. In case the value is not valid it will be set to the
     * default value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setDisplayValuePrecision(
      /**
       * New value for property `displayValuePrecision`
       */
      iDisplayValuePrecision?: int
    ): this;
    /**
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to the non-editable
     * control, highlight it, and copy the text from it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getFieldWidth fieldWidth}.
     *
     * Determines the distribution of space between the input field and the description text . Default value
     * is 50% (leaving the other 50% for the description).
     *
     * **Note:** This property takes effect only if the `description` property is also set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'50%'`.
     */
    setFieldWidth(
      /**
       * New value for property `fieldWidth`
       */
      sFieldWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLargerStep largerStep}.
     *
     * Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown
     * keys. Default value is 2 times larger than the set step.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     */
    setLargerStep(
      /**
       * New value for property `largerStep`
       */
      fLargerStep?: float
    ): this;
    /**
     * @SINCE 1.44.15
     *
     * Sets a new value for property {@link #getName name}.
     *
     * Defines the name of the control for the purposes of form submission.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * @SINCE 1.44.15
     *
     * Sets a new value for property {@link #getPlaceholder placeholder}.
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPlaceholder(
      /**
       * New value for property `placeholder`
       */
      sPlaceholder?: string
    ): this;
    /**
     * @SINCE 1.44.15
     *
     * Sets a new value for property {@link #getRequired required}.
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRequired(
      /**
       * New value for property `required`
       */
      bRequired?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getStep step}.
     *
     * Increases/decreases the value of the input. **Note:**
     * 	 - The value of the `step` property should not contain more digits after the decimal point than what
     * 			is set to the `displayValuePrecision` property, as it may lead to an increase/decrease that is not visible
     * 			for the user. For example, if the `value` is set to 1.22 and the `displayValuePrecision` is set to one
     * 			digit after the decimal, the user will see 1.2. In this case, if the `value` of the `step` property is
     * 			set to 1.005 and the user selects `increase`, the resulting value will increase to 1.2261 but the displayed
     * 			value will remain as 1.2 as it will be rounded to the first digit after the decimal point.
     * 	 - Depending on what is set for the `value` and the `displayValuePrecision` properties, it is possible
     * 			the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `1`.
     */
    setStep(
      /**
       * New value for property `step`
       */
      fStep?: float
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getStepMode stepMode}.
     *
     * Defines the calculation mode for the provided `step` and `largerStep`.
     *
     * If the user increases/decreases the value by `largerStep`, this calculation will consider it as well.
     * For example, if the current `value` is 3, `step` is 5, `largerStep` is 5 and the user chooses PageUp,
     * the calculation logic will consider the value of 3x5=15 to decide what will be the next `value`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `AdditionAndSubtraction`.
     */
    setStepMode(
      /**
       * New value for property `stepMode`
       */
      sStepMode?: StepInputStepModeType | keyof typeof StepInputStepModeType
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Defines the horizontal alignment of the text that is displayed inside the input field.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `End`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getValue value}.
     *
     * Determines the value of the `StepInput` and can be set initially from the app developer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setValue(
      /**
       * New value for property `value`
       */
      fValue?: float
    ): this;
    /**
     * Sets a new value for property {@link #getValueState valueState}.
     *
     * Accepts the core enumeration ValueState.type that supports `None`, `Error`, `Warning` and `Success`.
     * ValueState is managed internally only when validation is triggered by user interaction.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setValueState(
      /**
       * New value for property `valueState`
       */
      sValueState?: ValueState | keyof typeof ValueState
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getValueStateText valueStateText}.
     *
     * Defines the text that appears in the value state message pop-up.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueStateText(
      /**
       * New value for property `valueStateText`
       */
      sValueStateText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.StepInput`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.StepInput` itself.
     *
     * Is fired when one of the following happens:
     *
     * 	 - the text in the input has changed and the focus leaves the input field or the enter key is pressed.
     *
     * 	 - One of the decrement or increment buttons is pressed
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.StepInput` itself
       */
      oListener?: object
    ): this;
  }

  export interface $StepInputSettings extends $ControlSettings {
    /**
     * Sets the minimum possible value of the defined range.
     */
    min?: float | PropertyBindingInfo;

    /**
     * Sets the maximum possible value of the defined range.
     */
    max?: float | PropertyBindingInfo;

    /**
     * Increases/decreases the value of the input. **Note:**
     * 	 - The value of the `step` property should not contain more digits after the decimal point than what
     * 			is set to the `displayValuePrecision` property, as it may lead to an increase/decrease that is not visible
     * 			for the user. For example, if the `value` is set to 1.22 and the `displayValuePrecision` is set to one
     * 			digit after the decimal, the user will see 1.2. In this case, if the `value` of the `step` property is
     * 			set to 1.005 and the user selects `increase`, the resulting value will increase to 1.2261 but the displayed
     * 			value will remain as 1.2 as it will be rounded to the first digit after the decimal point.
     * 	 - Depending on what is set for the `value` and the `displayValuePrecision` properties, it is possible
     * 			the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.
     */
    step?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines the calculation mode for the provided `step` and `largerStep`.
     *
     * If the user increases/decreases the value by `largerStep`, this calculation will consider it as well.
     * For example, if the current `value` is 3, `step` is 5, `largerStep` is 5 and the user chooses PageUp,
     * the calculation logic will consider the value of 3x5=15 to decide what will be the next `value`.
     */
    stepMode?:
      | (StepInputStepModeType | keyof typeof StepInputStepModeType)
      | PropertyBindingInfo;

    /**
     * Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown
     * keys. Default value is 2 times larger than the set step.
     */
    largerStep?: float | PropertyBindingInfo;

    /**
     * Determines the value of the `StepInput` and can be set initially from the app developer.
     */
    value?: float | PropertyBindingInfo;

    /**
     * @SINCE 1.44.15
     *
     * Defines the name of the control for the purposes of form submission.
     */
    name?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.44.15
     *
     * Defines a short hint intended to aid the user with data entry when the control has no value.
     */
    placeholder?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.44.15
     *
     * Indicates that user input is required. This property is only needed for accessibility purposes when a
     * single relationship between the field and a label (see aggregation `labelFor` of `sap.m.Label`) cannot
     * be established (e.g. one label should label multiple fields).
     */
    required?: boolean | PropertyBindingInfo;

    /**
     * Defines the width of the control.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Accepts the core enumeration ValueState.type that supports `None`, `Error`, `Warning` and `Success`.
     * ValueState is managed internally only when validation is triggered by user interaction.
     */
    valueState?: (ValueState | keyof typeof ValueState) | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Defines the text that appears in the value state message pop-up.
     */
    valueStateText?: string | PropertyBindingInfo;

    /**
     * Defines whether the control can be modified by the user or not. **Note:** A user can tab to the non-editable
     * control, highlight it, and copy the text from it.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
     * focused and they are out of the tab-chain.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.46
     *
     * Determines the number of digits after the decimal point.
     *
     * The value should be between 0 (default) and 20. In case the value is not valid it will be set to the
     * default value.
     */
    displayValuePrecision?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines the description text after the input field, for example units of measurement, currencies.
     */
    description?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Determines the distribution of space between the input field and the description text . Default value
     * is 50% (leaving the other 50% for the description).
     *
     * **Note:** This property takes effect only if the `description` property is also set.
     */
    fieldWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines the horizontal alignment of the text that is displayed inside the input field.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines when the validation of the typed value will happen. By default this happens on focus out.
     */
    validationMode?:
      | (StepInputValidationMode | keyof typeof StepInputValidationMode)
      | PropertyBindingInfo;

    /**
     * Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Is fired when one of the following happens:
     *
     * 	 - the text in the input has changed and the focus leaves the input field or the enter key is pressed.
     *
     * 	 - One of the decrement or increment buttons is pressed
     */
    change?: Function;
  }
}

declare module "sap/m/SuggestionItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import RenderManager from "sap/ui/core/RenderManager";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * Display suggestion list items.
   *
   * **Note:** The inherited `enabled` property is not supported. If an item shouldn't be selected, remove
   * it from the list instead.
   */
  export default class SuggestionItem extends Item {
    /**
     * Constructor for a new SuggestionItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $SuggestionItemSettings
    );
    /**
     * Constructor for a new SuggestionItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $SuggestionItemSettings
    );

    /**
     * Creates a new subclass of class sap.m.SuggestionItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SuggestionItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getDescription description}.
     *
     * Additional text of type string, optionally to be displayed along with this item.
     *
     * Default value is `empty string`.
     */
    getDescription(): string;
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     *
     * Default value is `empty string`.
     */
    getIcon(): string;
    /**
     * Returns a metadata object for class sap.m.SuggestionItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Return suggestion text. By default, it is the value of the `text` property.
     *
     * Subclasses may override this function.
     */
    getSuggestionText(): string;
    /**
     * Produces the HTML of the suggestion item and writes it to render-output-buffer.
     *
     * Subclasses may override this function.
     */
    render(
      /**
       * The `RenderManager`
       */
      oRM: RenderManager,
      /**
       * The item which should be rendered
       */
      oItem: SuggestionItem,
      /**
       * The search text that should be emphasized
       */
      sSearch: string,
      /**
       * The item is selected
       */
      bSelected: boolean
    ): void;
    /**
     * Sets a new value for property {@link #getDescription description}.
     *
     * Additional text of type string, optionally to be displayed along with this item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDescription(
      /**
       * New value for property `description`
       */
      sDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: string
    ): this;
  }

  export interface $SuggestionItemSettings extends $ItemSettings {
    /**
     * The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.
     */
    icon?: string | PropertyBindingInfo;

    /**
     * Additional text of type string, optionally to be displayed along with this item.
     */
    description?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/Switch" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IFormContent, ID } from "sap/ui/core/library";

  import { IOverflowToolbarContent, SwitchType } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * A switch is a user interface control on mobile devices that is used for change between binary states.
   * The user can also drag the button handle or tap to change the state.
   */
  export default class Switch
    extends Control
    implements IFormContent, IOverflowToolbarContent {
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new Switch.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/switch/ Switch}
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $SwitchSettings
    );
    /**
     * Constructor for a new Switch.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/switch/ Switch}
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $SwitchSettings
    );

    /**
     * @SINCE 1.27.0
     *
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Switch`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Switch` itself.
     *
     * Triggered when a switch changes the state.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Switch` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.Switch`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Switch with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Switch>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new state of the switch.
         */
        state?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.27.0
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getCustomTextOff customTextOff}.
     *
     * Custom text for the "OFF" state.
     *
     * "OFF" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     *
     * Default value is `empty string`.
     */
    getCustomTextOff(): string;
    /**
     * Gets current value of property {@link #getCustomTextOn customTextOn}.
     *
     * Custom text for the "ON" state.
     *
     * "ON" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     *
     * Default value is `empty string`.
     */
    getCustomTextOn(): string;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Whether the switch is enabled.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Returns a metadata object for class sap.m.Switch.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server
     * via submit).
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * A boolean value indicating whether the switch is on or off.
     *
     * Default value is `false`.
     */
    getState(): boolean;
    /**
     * Gets current value of property {@link #getType type}.
     *
     * Type of a Switch. Possibles values "Default", "AcceptReject".
     *
     * Default value is `Default`.
     */
    getType(): SwitchType | keyof typeof SwitchType;
    /**
     * @SINCE 1.27.0
     *
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * @SINCE 1.27.0
     *
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getCustomTextOff customTextOff}.
     *
     * Custom text for the "OFF" state.
     *
     * "OFF" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setCustomTextOff(
      /**
       * New value for property `customTextOff`
       */
      sCustomTextOff?: string
    ): this;
    /**
     * Sets a new value for property {@link #getCustomTextOn customTextOn}.
     *
     * Custom text for the "ON" state.
     *
     * "ON" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setCustomTextOn(
      /**
       * New value for property `customTextOn`
       */
      sCustomTextOn?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Whether the switch is enabled.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server
     * via submit).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * A boolean value indicating whether the switch is on or off.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setState(
      /**
       * New value for property `state`
       */
      bState?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getType type}.
     *
     * Type of a Switch. Possibles values "Default", "AcceptReject".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setType(
      /**
       * New value for property `type`
       */
      sType?: SwitchType | keyof typeof SwitchType
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.Switch`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Switch` itself.
     *
     * Triggered when a switch changes the state.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Switch` itself
       */
      oListener?: object
    ): this;
  }

  export interface $SwitchSettings extends $ControlSettings {
    /**
     * A boolean value indicating whether the switch is on or off.
     */
    state?: boolean | PropertyBindingInfo;

    /**
     * Custom text for the "ON" state.
     *
     * "ON" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     */
    customTextOn?: string | PropertyBindingInfo;

    /**
     * Custom text for the "OFF" state.
     *
     * "OFF" translated to the current language is the default value. Beware that the given text will be cut
     * off if available space is exceeded.
     */
    customTextOff?: string | PropertyBindingInfo;

    /**
     * Whether the switch is enabled.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server
     * via submit).
     */
    name?: string | PropertyBindingInfo;

    /**
     * Type of a Switch. Possibles values "Default", "AcceptReject".
     */
    type?: (SwitchType | keyof typeof SwitchType) | PropertyBindingInfo;

    /**
     * @SINCE 1.27.0
     *
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Triggered when a switch changes the state.
     */
    change?: Function;
  }
}

declare module "sap/m/TabContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import TabContainerItem from "sap/m/TabContainerItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { PageBackgroundDesign } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  /**
   * @SINCE 1.34
   *
   * A container control for managing multiple tabs, allowing the user to open and edit different items simultaneously.
   *
   * Overview:
   *
   * The control contains a `TabStrip` area where the user can choose which tab to view/edit. When the open
   * tabs are more than what can be displayed on the screen, there is an overflow mechanism. To access the
   * tabs hidden in the overflow area, the user has to either use the overflow button (left or right arrow)
   * to scroll them horizontally or the overflow overview button (down arrow) and view all open items as a
   * list.
   *
   * Each tab has a title and a Close Tab button. The title is truncated, if it's longer than 25 characters.
   * On desktop, the Close Tab button is displayed on the currently active tab and for the other tabs
   * it appears on mouse hover. On mobile devices, the Close Tab buttons are always visible.
   *
   * To show that the open items have unsaved changes, the corresponding tabs can display an asterisk (*)
   * after the title as a visual indication that the item is not saved. This is managed by the app developer
   * using {@link sap.m.TabContainerItem TabContainerItem}'s `modified` property.
   *
   * Usage:
   *
   * The `TabContainer` can have an Add New Tab button, which appears as a '+' icon on the top-right
   * area of the control. When the user clicks or taps this button, the `addNewButtonPress` event is fired.
   *
   * Responsive behavior:
   *
   * The `TabContainer` is a full-page container that takes 100% of its parent width and height. As the control
   * is expected to occupy the whole parent, it should be the only child of its parent.
   *
   * When using the `sap.m.TabContainer` in SAP Quartz theme, the breakpoints and layout paddings could be
   * determined by the container's width. To enable this concept and add responsive padding to the `TabContainer`
   * control, you may add the following class: `sapUiResponsivePadding--header`.
   */
  export default class TabContainer extends Control {
    /**
     * Constructor for a new `TabContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerSettings
    );
    /**
     * Constructor for a new `TabContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: TabContainerItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addNewButtonPress addNewButtonPress} event of
     * this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when the Add New Tab button is pressed.
     */
    attachAddNewButtonPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClose itemClose} event of this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when an item is closed.
     */
    attachItemClose(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when an item is pressed.
     */
    attachItemSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:addNewButtonPress addNewButtonPress} event
     * of this `sap.m.TabContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAddNewButtonPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemClose itemClose} event of this `sap.m.TabContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemClose(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemSelect itemSelect} event of this `sap.m.TabContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TabContainer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TabContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:addNewButtonPress addNewButtonPress} to attached listeners.
     */
    fireAddNewButtonPress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:itemClose itemClose} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireItemClose(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item to be closed.
         */
        item?: TabContainerItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireItemSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected item.
         */
        item?: TabContainerItem;
      }
    ): boolean;
    /**
     * @SINCE 1.71
     *
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the background color of the content in `TabContainer`.
     *
     * Default value is `List`.
     */
    getBackgroundDesign():
      | PageBackgroundDesign
      | keyof typeof PageBackgroundDesign;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items displayed in the `TabContainer`.
     */
    getItems(): TabContainerItem[];
    /**
     * Returns a metadata object for class sap.m.TabContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem},
     * or `null`.
     */
    getSelectedItem(): ID;
    /**
     * Gets current value of property {@link #getShowAddNewButton showAddNewButton}.
     *
     * Defines whether an Add New Tab button is displayed in the `TabStrip`.
     *
     * Default value is `false`.
     */
    getShowAddNewButton(): boolean;
    /**
     * Checks for the provided `sap.m.TabContainerItem` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: TabContainerItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: TabContainerItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): TabContainerItem[];
    /**
     * Removes an item from the aggregation named `items`.
     */
    removeItem(
      /**
       * The item to remove or its index or ID
       */
      vItem: int | string | TabContainerItem
    ): TabContainerItem;
    /**
     * @SINCE 1.71
     *
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Determines the background color of the content in `TabContainer`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `List`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?:
        | PageBackgroundDesign
        | keyof typeof PageBackgroundDesign
    ): this;
    /**
     * Sets the associated {@link #getSelectedItem selectedItem}.
     */
    setSelectedItem(
      /**
       * ID of an element which becomes the new target of this selectedItem association; alternatively, an element
       * instance may be given
       */
      oSelectedItem: ID | TabContainerItem
    ): this;
    /**
     * Sets a new value for property {@link #getShowAddNewButton showAddNewButton}.
     *
     * Defines whether an Add New Tab button is displayed in the `TabStrip`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowAddNewButton(
      /**
       * New value for property `showAddNewButton`
       */
      bShowAddNewButton?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:addNewButtonPress addNewButtonPress} event of
     * this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when the Add New Tab button is pressed.
     */
    attachAddNewButtonPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemClose itemClose} event of this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when an item is closed.
     */
    attachItemClose(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemSelect itemSelect} event of this `sap.m.TabContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainer` itself.
     *
     * Fired when an item is pressed.
     */
    attachItemSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TabContainerSettings extends $ControlSettings {
    /**
     * Defines whether an Add New Tab button is displayed in the `TabStrip`.
     */
    showAddNewButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.71
     *
     * Determines the background color of the content in `TabContainer`.
     */
    backgroundDesign?:
      | (PageBackgroundDesign | keyof typeof PageBackgroundDesign)
      | PropertyBindingInfo;

    /**
     * The items displayed in the `TabContainer`.
     */
    items?: TabContainerItem[] | TabContainerItem | AggregationBindingInfo;

    /**
     * Sets or retrieves the selected item from the `items` aggregation.
     */
    selectedItem?: TabContainerItem | string;

    /**
     * Fired when an item is closed.
     */
    itemClose?: Function;

    /**
     * Fired when an item is pressed.
     */
    itemSelect?: Function;

    /**
     * Fired when the Add New Tab button is pressed.
     */
    addNewButtonPress?: Function;
  }
}

declare module "sap/m/TabContainerItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import Control from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.34
   *
   * An item to be used in a TabContainer.
   */
  export default class TabContainerItem extends UI5Element {
    /**
     * Constructor for a new `TabContainerItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerItemSettings
    );
    /**
     * Constructor for a new `TabContainerItem`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TabContainerItemSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.TabContainerItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainerItem` itself.
     *
     * Sends information that some of the properties have changed.
     */
    attachItemPropertyChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainerItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.TabContainerItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemPropertyChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TabContainerItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TabContainerItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:itemPropertyChanged itemPropertyChanged} to attached listeners.
     */
    fireItemPropertyChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item changed.
         */
        itemChanged?: TabContainerItem;
        /**
         * The key of the property.
         */
        propertyKey?: string;
        /**
         * The value of the property.
         */
        propertyValue?: any;
      }
    ): this;
    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Gets current value of property {@link #getAdditionalText additionalText}.
     *
     * Determines additional text to be displayed for the item.
     *
     * Default value is `empty string`.
     */
    getAdditionalText(): string;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content displayed for this item.
     */
    getContent(): Control[];
    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Gets current value of property {@link #getIcon icon}.
     *
     * Defines the icon to be displayed as graphical element within the `TabContainerItem`. It can be an image
     * or an icon from the icon font.
     */
    getIcon(): URI;
    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Gets current value of property {@link #getIconTooltip iconTooltip}.
     *
     * Determines the tooltip text of the `TabContainerItem`'s icon.
     */
    getIconTooltip(): string;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Determines the name of the item. Can be used as input for subsequent actions.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.TabContainerItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getModified modified}.
     *
     * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to
     * indicate that they haven't been saved.
     *
     * Default value is `false`.
     */
    getModified(): boolean;
    /**
     * Gets current value of property {@link #getName name}.
     *
     * Determines the text to be displayed for the item.
     *
     * Default value is `empty string`.
     */
    getName(): string;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Sets a new value for property {@link #getAdditionalText additionalText}.
     *
     * Determines additional text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setAdditionalText(
      /**
       * New value for property `additionalText`
       */
      sAdditionalText?: string
    ): this;
    /**
     * Property setter for the icon
     */
    setIcon(
      /**
       * new value of the Icon property
       */
      sIcon: URI
    ): this;
    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Sets a new value for property {@link #getIconTooltip iconTooltip}.
     *
     * Determines the tooltip text of the `TabContainerItem`'s icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setIconTooltip(
      /**
       * New value for property `iconTooltip`
       */
      sIconTooltip?: string
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Determines the name of the item. Can be used as input for subsequent actions.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getModified modified}.
     *
     * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to
     * indicate that they haven't been saved.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setModified(
      /**
       * New value for property `modified`
       */
      bModified?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getName name}.
     *
     * Determines the text to be displayed for the item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * Overwrites the method in order to suppress invalidation for some properties.
     */
    setProperty(
      /**
       * Property name to be set
       */
      sName: string,
      /**
       * Property value to be set
       */
      vValue: boolean | string | object,
      /**
       * Whether invalidation to be suppressed
       */
      bSuppressInvalidation: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.TabContainerItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TabContainerItem` itself.
     *
     * Sends information that some of the properties have changed.
     */
    attachItemPropertyChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TabContainerItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TabContainerItemSettings extends $ElementSettings {
    /**
     * Determines the text to be displayed for the item.
     */
    name?: string | PropertyBindingInfo;

    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Determines additional text to be displayed for the item.
     */
    additionalText?: string | PropertyBindingInfo;

    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Defines the icon to be displayed as graphical element within the `TabContainerItem`. It can be an image
     * or an icon from the icon font.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @EXPERIMENTAL (since 1.63)
     *
     * Determines the tooltip text of the `TabContainerItem`'s icon.
     */
    iconTooltip?: string | PropertyBindingInfo;

    /**
     * Determines the name of the item. Can be used as input for subsequent actions.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to
     * indicate that they haven't been saved.
     */
    modified?: boolean | PropertyBindingInfo;

    /**
     * The content displayed for this item.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Sends information that some of the properties have changed.
     */
    itemPropertyChanged?: Function;
  }
}

declare module "sap/m/Table" {
  import { default as ListBase, $ListBaseSettings } from "sap/m/ListBase";

  import Column from "sap/m/Column";

  import Control from "sap/ui/core/Control";

  import ColumnListItem from "sap/m/ColumnListItem";

  import { BackgroundDesign, PopinLayout } from "sap/m/library";

  import { Priority } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * The `sap.m.Table` control provides a set of sophisticated and convenience functions for responsive table
   * design.
   *
   * To render the `sap.m.Table` control properly, the order of the `columns` aggregation should match with
   * the order of the `cells` aggregation (`sap.m.ColumnListItem`).
   *
   * The `sap.m.Table` control requires at least one visible `sap.m.Column` in the `columns` aggregation,
   * therefore applications must avoid configuring all columns to be shown in the pop-in. If such a conflict
   * is detected, then the table prevents one column from moving to the pop-in.
   *
   * For mobile devices, the recommended limit of table rows is 100 (based on 4 columns) to assure proper
   * performance. To improve initial rendering of large tables, use the `growing` feature.
   *
   * See section "{@link topic:5eb6f63e0cc547d0bdc934d3652fdc9b Creating Tables}" and "{@link topic:38855e06486f4910bfa6f4485f7c2bac
   * Configuring Responsive Behavior of a Table}" in the documentation for an introduction to `sap.m.Table`
   * control.
   */
  export default class Table extends ListBase {
    /**
     * Constructor for a new Table.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/responsive-table/ Responsive Table}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSettings
    );
    /**
     * Constructor for a new Table.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/responsive-table/ Responsive Table}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSettings
    );

    /**
     * Adds some column to the aggregation {@link #getColumns columns}.
     */
    addColumn(
      /**
       * The column to add; if empty, nothing is inserted
       */
      oColumn: Column
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    attachBeforeOpenContextMenu(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * This event gets fired when the user pastes content from the clipboard to the table. Pasting can be done
     * via the context menu or the standard paste keyboard shortcut, if the focus is inside the table.
     */
    attachPaste(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.77
     *
     * Attaches event handler `fnFunction` to the {@link #event:popinChanged popinChanged} event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * Fired when the table pop-in has changed.
     */
    attachPopinChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the columns in the aggregation {@link #getColumns columns}.
     */
    destroyColumns(): this;
    /**
     * @SINCE 1.54
     *
     * Detaches event handler `fnFunction` from the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeOpenContextMenu(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Detaches event handler `fnFunction` from the {@link #event:paste paste} event of this `sap.m.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPaste(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.77
     *
     * Detaches event handler `fnFunction` from the {@link #event:popinChanged popinChanged} event of this `sap.m.Table`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPopinChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * This method is a hook for the RenderManager that gets called during the rendering of child Controls.
     * It allows to add, remove and update existing accessibility attributes (ARIA) of those controls.
     */
    enhanceAccessibilityState(
      /**
       * The Control that gets rendered by the RenderManager
       */
      oElement: Control,
      /**
       * The mapping of "aria-" prefixed attributes
       */
      mAriaProps: Object
    ): void;
    /**
     * Creates a new subclass of class sap.m.Table with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Table>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.54
     *
     * Fires event {@link #event:beforeOpenContextMenu beforeOpenContextMenu} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeOpenContextMenu(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Item in which the context menu was opened.
         */
        listItem?: ColumnListItem;
        /**
         * Column in which the context menu was opened. **Note:** This parameter might be undefined for the items
         * that are not part of a column definition.
         */
        column?: Column;
      }
    ): boolean;
    /**
     * @SINCE 1.60
     *
     * Fires event {@link #event:paste paste} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    firePaste(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * 2D array of strings with data from the clipboard. The first dimension represents the rows, and the second
         * dimension represents the cells of the tabular data.
         */
        data?: Array<string[]>;
      }
    ): boolean;
    /**
     * @SINCE 1.77
     *
     * Fires event {@link #event:popinChanged popinChanged} to attached listeners.
     */
    firePopinChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Returns true if there are visible columns in the pop-in area
         */
        hasPopin?: boolean;
        /**
         * Returns array of all visible columns in the pop-in area.
         */
        visibleInPopin?: Column[];
        /**
         * Returns array of columns that are hidden in the pop-in based on their importance. See {@link sap.m.Column#getImportance}
         */
        hiddenInPopin?: Column[];
      }
    ): this;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getAlternateRowColors alternateRowColors}.
     *
     * Enables alternating table row colors. **Note:** This property can only be used with the Belize and Belize
     * Deep themes. Alternate row coloring is not available for the High Contrast Black/White themes.
     *
     * Default value is `false`.
     */
    getAlternateRowColors(): boolean;
    /**
     * @SINCE 1.76
     *
     * Gets current value of property {@link #getAutoPopinMode autoPopinMode}.
     *
     * Enables the auto pop-in behavior for the table control.
     *
     * If this property is set to `true`, the table control overwrites the `demandPopin` and the `minScreenWidth`
     * properties of the `sap.m.Column` control. The pop-in behavior depends on the `importance` property of
     * the `sap.m.Column` control. Columns configured with this property are moved to the pop-in area in the
     * following order:
     *
     *
     * 	 - With importance `High`: moved last
     * 	 - With importance `Medium` or `None`: moved second
     * 	 - With importance `Low`: moved first
     *
     * **Note:** If this property is changed from `true` to `false`, the application must reconfigure the `demandPopin`
     * and `minScreenWidth` properties of the `sap.m.Column` control by itself. There is no automatic mechanism
     * that restores the old values if `autoPopinMode` was set from `false` to `true` before.
     *
     * Default value is `false`.
     */
    getAutoPopinMode(): boolean;
    /**
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Sets the background style of the table. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     *
     * Default value is `Translucent`.
     */
    getBackgroundDesign(): BackgroundDesign | keyof typeof BackgroundDesign;
    /**
     * Getter for aggregation columns.
     */
    getColumns(
      /**
       * set true to get the columns in an order that respects personalization settings
       */
      bSort?: Boolean
    ): Column[];
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getContextualWidth contextualWidth}.
     *
     * Defines the contextual width for the `sap.m.Table` control. By defining this property the table adapts
     * the pop-in behavior based on the container in which the table is placed or the configured contextual
     * width. By default, `sap.m.Table` renders in pop-in behavior only depending on the window size or device.
     *
     * For example, by setting the `contextualWidth` property to 600px or Tablet, the table can be placed in
     * a container with 600px width, where the pop-in is used. You can use specific CSS sizes (for example,
     * 600px or 600), you can also use the `sap.m.ScreenSize` enumeration (for example, Phone, Tablet, Desktop,
     * Small, Medium, Large, ....). If this property is set to `Auto`, the `ResizeHandler` will manage the contextual
     * width of the table. **Note:** Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px)
     * can be applied to the `contextualWidth` property. Due to the rendering cost, we recommend to use the
     * valid value mentioned before except for "Auto".
     *
     * Default value is `"Inherit"`.
     */
    getContextualWidth(): string;
    /**
     * @SINCE 1.22
     *
     * Gets current value of property {@link #getFixedLayout fixedLayout}.
     *
     * Defines the algorithm to be used to layout the table cells, rows, and columns. This property allows three
     * possible values:
     * 	 - `true`
     * 	 - `false`
     * 	 - `Strict`
     *
     * By default, the table is rendered with a fixed layout algorithm (`fixedLayout=true`). This means the
     * horizontal layout only depends on the table's width and the width of the columns, not the content of
     * the cells. Cells in subsequent rows do not affect column width. This allows a browser to provide a faster
     * table layout since the browser can begin to display the table once the first row has been analyzed.
     *
     * If this property is set to `false`, `sap.m.Table` is rendered with an auto layout algorithm. This means,
     * the width of the table and its cells depends on the content of the cells. The column width is set by
     * the widest unbreakable content inside the cells. This can make the rendering slow, since the browser
     * needs to go through all the content in the table before determining the final layout.
     *
     *
     * If this property is set to `Strict` and the `width` property is defined for all columns (and not the
     * expected "auto" value), then the `sap.m.Table` control renders a placeholder column which occupies the
     * remaining width of the control to ensure the column width setting is strictly applied.
     *
     *
     * If there is only one remaining column with a width larger than the table, then this column gets the maximum
     * width available in the table. If the column width is smaller than the table, then the column width is
     * retained, and the remaining width of the table is occupied by the placeholder column.
     *
     *
     * The placeholder column gets rendered only if there are no columns in the pop-in area.
     *
     *
     * **Note:** Since `sap.m.Table` does not have its own scrollbars, setting `fixedLayout` to false can force
     * the table to overflow, which may cause visual problems. It is suggested to use this property when a table
     * has a few columns in wide screens or within the horizontal scroll container (e.g `sap.m.Dialog`) to handle
     * overflow. In auto layout mode the `width` property of `sap.m.Column` is taken into account as a minimum
     * width.
     *
     * Default value is `true`.
     */
    getFixedLayout(): any;
    /**
     * @SINCE 1.77
     *
     * Gets current value of property {@link #getHiddenInPopin hiddenInPopin}.
     *
     * Defines which columns should be hidden instead of moved into the pop-in area depending on their importance.
     * See {@link sap.m.Column#getImportance}
     *
     * **Note:** To hide columns based on their importance, it's mandatory to set `demandPopin="true"` for the
     * `sap.m.Column` control or set `autoPopinMode="true"` for the `sap.m.Table` control. See {@link topic:38855e06486f4910bfa6f4485f7c2bac
     * Configuring Responsive Behavior of a Table} and {@link sap.m.Table#getAutoPopinMode}.
     */
    getHiddenInPopin(): Array<Priority | keyof typeof Priority>;
    /**
     * Returns a metadata object for class sap.m.Table.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getPopinLayout popinLayout}.
     *
     * Defines the layout in which the table pop-in rows are rendered. **Note:** The `demandPopin` and `minScreenWidth`
     * properties of the `Column` control must be configured appropriately.
     *
     * Default value is `Block`.
     */
    getPopinLayout(): PopinLayout | keyof typeof PopinLayout;
    /**
     * @SINCE 1.22.1
     *
     * Gets current value of property {@link #getShowOverlay showOverlay}.
     *
     * Setting this property to `true` will show an overlay on top of the table content and prevents the user
     * interaction with it.
     *
     * Default value is `false`.
     */
    getShowOverlay(): boolean;
    /**
     * Checks for the provided `sap.m.Column` in the aggregation {@link #getColumns columns}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfColumn(
      /**
       * The column whose index is looked for
       */
      oColumn: Column
    ): int;
    /**
     * Inserts a column into the aggregation {@link #getColumns columns}.
     */
    insertColumn(
      /**
       * The column to insert; if empty, nothing is inserted
       */
      oColumn: Column,
      /**
       * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
       * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColumns columns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllColumns(): Column[];
    /**
     * Removes a column from the aggregation {@link #getColumns columns}.
     */
    removeColumn(
      /**
       * The column to remove or its index or id
       */
      vColumn: int | string | Column
    ): Column;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getAlternateRowColors alternateRowColors}.
     *
     * Enables alternating table row colors. **Note:** This property can only be used with the Belize and Belize
     * Deep themes. Alternate row coloring is not available for the High Contrast Black/White themes.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAlternateRowColors(
      /**
       * New value for property `alternateRowColors`
       */
      bAlternateRowColors?: boolean
    ): this;
    /**
     * @SINCE 1.76
     *
     * Sets a new value for property {@link #getAutoPopinMode autoPopinMode}.
     *
     * Enables the auto pop-in behavior for the table control.
     *
     * If this property is set to `true`, the table control overwrites the `demandPopin` and the `minScreenWidth`
     * properties of the `sap.m.Column` control. The pop-in behavior depends on the `importance` property of
     * the `sap.m.Column` control. Columns configured with this property are moved to the pop-in area in the
     * following order:
     *
     *
     * 	 - With importance `High`: moved last
     * 	 - With importance `Medium` or `None`: moved second
     * 	 - With importance `Low`: moved first
     *
     * **Note:** If this property is changed from `true` to `false`, the application must reconfigure the `demandPopin`
     * and `minScreenWidth` properties of the `sap.m.Column` control by itself. There is no automatic mechanism
     * that restores the old values if `autoPopinMode` was set from `false` to `true` before.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setAutoPopinMode(
      /**
       * New value for property `autoPopinMode`
       */
      bAutoPopinMode?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
     *
     * Sets the background style of the table. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Translucent`.
     */
    setBackgroundDesign(
      /**
       * New value for property `backgroundDesign`
       */
      sBackgroundDesign?: BackgroundDesign | keyof typeof BackgroundDesign
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getContextualWidth contextualWidth}.
     *
     * Defines the contextual width for the `sap.m.Table` control. By defining this property the table adapts
     * the pop-in behavior based on the container in which the table is placed or the configured contextual
     * width. By default, `sap.m.Table` renders in pop-in behavior only depending on the window size or device.
     *
     * For example, by setting the `contextualWidth` property to 600px or Tablet, the table can be placed in
     * a container with 600px width, where the pop-in is used. You can use specific CSS sizes (for example,
     * 600px or 600), you can also use the `sap.m.ScreenSize` enumeration (for example, Phone, Tablet, Desktop,
     * Small, Medium, Large, ....). If this property is set to `Auto`, the `ResizeHandler` will manage the contextual
     * width of the table. **Note:** Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px)
     * can be applied to the `contextualWidth` property. Due to the rendering cost, we recommend to use the
     * valid value mentioned before except for "Auto".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Inherit"`.
     */
    setContextualWidth(
      /**
       * New value for property `contextualWidth`
       */
      sContextualWidth?: string
    ): this;
    /**
     * @SINCE 1.22
     *
     * Sets a new value for property {@link #getFixedLayout fixedLayout}.
     *
     * Defines the algorithm to be used to layout the table cells, rows, and columns. This property allows three
     * possible values:
     * 	 - `true`
     * 	 - `false`
     * 	 - `Strict`
     *
     * By default, the table is rendered with a fixed layout algorithm (`fixedLayout=true`). This means the
     * horizontal layout only depends on the table's width and the width of the columns, not the content of
     * the cells. Cells in subsequent rows do not affect column width. This allows a browser to provide a faster
     * table layout since the browser can begin to display the table once the first row has been analyzed.
     *
     * If this property is set to `false`, `sap.m.Table` is rendered with an auto layout algorithm. This means,
     * the width of the table and its cells depends on the content of the cells. The column width is set by
     * the widest unbreakable content inside the cells. This can make the rendering slow, since the browser
     * needs to go through all the content in the table before determining the final layout.
     *
     *
     * If this property is set to `Strict` and the `width` property is defined for all columns (and not the
     * expected "auto" value), then the `sap.m.Table` control renders a placeholder column which occupies the
     * remaining width of the control to ensure the column width setting is strictly applied.
     *
     *
     * If there is only one remaining column with a width larger than the table, then this column gets the maximum
     * width available in the table. If the column width is smaller than the table, then the column width is
     * retained, and the remaining width of the table is occupied by the placeholder column.
     *
     *
     * The placeholder column gets rendered only if there are no columns in the pop-in area.
     *
     *
     * **Note:** Since `sap.m.Table` does not have its own scrollbars, setting `fixedLayout` to false can force
     * the table to overflow, which may cause visual problems. It is suggested to use this property when a table
     * has a few columns in wide screens or within the horizontal scroll container (e.g `sap.m.Dialog`) to handle
     * overflow. In auto layout mode the `width` property of `sap.m.Column` is taken into account as a minimum
     * width.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setFixedLayout(
      /**
       * New value for property `fixedLayout`
       */
      oFixedLayout?: any
    ): this;
    /**
     * @SINCE 1.77
     *
     * Sets a new value for property {@link #getHiddenInPopin hiddenInPopin}.
     *
     * Defines which columns should be hidden instead of moved into the pop-in area depending on their importance.
     * See {@link sap.m.Column#getImportance}
     *
     * **Note:** To hide columns based on their importance, it's mandatory to set `demandPopin="true"` for the
     * `sap.m.Column` control or set `autoPopinMode="true"` for the `sap.m.Table` control. See {@link topic:38855e06486f4910bfa6f4485f7c2bac
     * Configuring Responsive Behavior of a Table} and {@link sap.m.Table#getAutoPopinMode}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHiddenInPopin(
      /**
       * New value for property `hiddenInPopin`
       */
      sHiddenInPopin: Array<Priority | keyof typeof Priority>
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getPopinLayout popinLayout}.
     *
     * Defines the layout in which the table pop-in rows are rendered. **Note:** The `demandPopin` and `minScreenWidth`
     * properties of the `Column` control must be configured appropriately.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Block`.
     */
    setPopinLayout(
      /**
       * New value for property `popinLayout`
       */
      sPopinLayout?: PopinLayout | keyof typeof PopinLayout
    ): this;
    /**
     * @SINCE 1.22.1
     *
     * Sets a new value for property {@link #getShowOverlay showOverlay}.
     *
     * Setting this property to `true` will show an overlay on top of the table content and prevents the user
     * interaction with it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowOverlay(
      /**
       * New value for property `showOverlay`
       */
      bShowOverlay?: boolean
    ): this;
    /**
     * @SINCE 1.54
     *
     * Attaches event handler `fnFunction` to the {@link #event:beforeOpenContextMenu beforeOpenContextMenu}
     * event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    attachBeforeOpenContextMenu(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.60
     *
     * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * This event gets fired when the user pastes content from the clipboard to the table. Pasting can be done
     * via the context menu or the standard paste keyboard shortcut, if the focus is inside the table.
     */
    attachPaste(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.77
     *
     * Attaches event handler `fnFunction` to the {@link #event:popinChanged popinChanged} event of this `sap.m.Table`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Table` itself.
     *
     * Fired when the table pop-in has changed.
     */
    attachPopinChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Table` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TableSettings extends $ListBaseSettings {
    /**
     * Sets the background style of the table. Depending on the theme, you can change the state of the background
     * from `Solid` to `Translucent` or to `Transparent`.
     */
    backgroundDesign?:
      | (BackgroundDesign | keyof typeof BackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.22
     *
     * Defines the algorithm to be used to layout the table cells, rows, and columns. This property allows three
     * possible values:
     * 	 - `true`
     * 	 - `false`
     * 	 - `Strict`
     *
     * By default, the table is rendered with a fixed layout algorithm (`fixedLayout=true`). This means the
     * horizontal layout only depends on the table's width and the width of the columns, not the content of
     * the cells. Cells in subsequent rows do not affect column width. This allows a browser to provide a faster
     * table layout since the browser can begin to display the table once the first row has been analyzed.
     *
     * If this property is set to `false`, `sap.m.Table` is rendered with an auto layout algorithm. This means,
     * the width of the table and its cells depends on the content of the cells. The column width is set by
     * the widest unbreakable content inside the cells. This can make the rendering slow, since the browser
     * needs to go through all the content in the table before determining the final layout.
     *
     *
     * If this property is set to `Strict` and the `width` property is defined for all columns (and not the
     * expected "auto" value), then the `sap.m.Table` control renders a placeholder column which occupies the
     * remaining width of the control to ensure the column width setting is strictly applied.
     *
     *
     * If there is only one remaining column with a width larger than the table, then this column gets the maximum
     * width available in the table. If the column width is smaller than the table, then the column width is
     * retained, and the remaining width of the table is occupied by the placeholder column.
     *
     *
     * The placeholder column gets rendered only if there are no columns in the pop-in area.
     *
     *
     * **Note:** Since `sap.m.Table` does not have its own scrollbars, setting `fixedLayout` to false can force
     * the table to overflow, which may cause visual problems. It is suggested to use this property when a table
     * has a few columns in wide screens or within the horizontal scroll container (e.g `sap.m.Dialog`) to handle
     * overflow. In auto layout mode the `width` property of `sap.m.Column` is taken into account as a minimum
     * width.
     */
    fixedLayout?: any | PropertyBindingInfo;

    /**
     * @SINCE 1.22.1
     *
     * Setting this property to `true` will show an overlay on top of the table content and prevents the user
     * interaction with it.
     */
    showOverlay?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Enables alternating table row colors. **Note:** This property can only be used with the Belize and Belize
     * Deep themes. Alternate row coloring is not available for the High Contrast Black/White themes.
     */
    alternateRowColors?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Defines the layout in which the table pop-in rows are rendered. **Note:** The `demandPopin` and `minScreenWidth`
     * properties of the `Column` control must be configured appropriately.
     */
    popinLayout?:
      | (PopinLayout | keyof typeof PopinLayout)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Defines the contextual width for the `sap.m.Table` control. By defining this property the table adapts
     * the pop-in behavior based on the container in which the table is placed or the configured contextual
     * width. By default, `sap.m.Table` renders in pop-in behavior only depending on the window size or device.
     *
     * For example, by setting the `contextualWidth` property to 600px or Tablet, the table can be placed in
     * a container with 600px width, where the pop-in is used. You can use specific CSS sizes (for example,
     * 600px or 600), you can also use the `sap.m.ScreenSize` enumeration (for example, Phone, Tablet, Desktop,
     * Small, Medium, Large, ....). If this property is set to `Auto`, the `ResizeHandler` will manage the contextual
     * width of the table. **Note:** Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px)
     * can be applied to the `contextualWidth` property. Due to the rendering cost, we recommend to use the
     * valid value mentioned before except for "Auto".
     */
    contextualWidth?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.76
     *
     * Enables the auto pop-in behavior for the table control.
     *
     * If this property is set to `true`, the table control overwrites the `demandPopin` and the `minScreenWidth`
     * properties of the `sap.m.Column` control. The pop-in behavior depends on the `importance` property of
     * the `sap.m.Column` control. Columns configured with this property are moved to the pop-in area in the
     * following order:
     *
     *
     * 	 - With importance `High`: moved last
     * 	 - With importance `Medium` or `None`: moved second
     * 	 - With importance `Low`: moved first
     *
     * **Note:** If this property is changed from `true` to `false`, the application must reconfigure the `demandPopin`
     * and `minScreenWidth` properties of the `sap.m.Column` control by itself. There is no automatic mechanism
     * that restores the old values if `autoPopinMode` was set from `false` to `true` before.
     */
    autoPopinMode?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.77
     *
     * Defines which columns should be hidden instead of moved into the pop-in area depending on their importance.
     * See {@link sap.m.Column#getImportance}
     *
     * **Note:** To hide columns based on their importance, it's mandatory to set `demandPopin="true"` for the
     * `sap.m.Column` control or set `autoPopinMode="true"` for the `sap.m.Table` control. See {@link topic:38855e06486f4910bfa6f4485f7c2bac
     * Configuring Responsive Behavior of a Table} and {@link sap.m.Table#getAutoPopinMode}.
     */
    hiddenInPopin?:
      | Array<Priority | keyof typeof Priority>
      | PropertyBindingInfo;

    /**
     * Defines the columns of the table.
     */
    columns?: Column[] | Column | AggregationBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Fired when the context menu is opened. When the context menu is opened, the binding context of the item
     * is set to the given `contextMenu`.
     */
    beforeOpenContextMenu?: Function;

    /**
     * @SINCE 1.60
     *
     * This event gets fired when the user pastes content from the clipboard to the table. Pasting can be done
     * via the context menu or the standard paste keyboard shortcut, if the focus is inside the table.
     */
    paste?: Function;

    /**
     * @SINCE 1.77
     *
     * Fired when the table pop-in has changed.
     */
    popinChanged?: Function;
  }
}

declare module "sap/m/TablePersoController" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { ID, CSSSize } from "sap/ui/core/library";

  import Table from "sap/m/Table";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import { ResetAllMode } from "sap/m/library";

  import TablePersoDialog from "sap/m/TablePersoDialog";

  /**
   * Table Personalization Controller
   */
  export default class TablePersoController extends ManagedObject {
    /**
     * The TablePersoController can be used to connect a table that you want to provide a personalization dialog
     * for, with a persistence service such as one provided by the unified shell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TablePersoControllerSettings
    );
    /**
     * The TablePersoController can be used to connect a table that you want to provide a personalization dialog
     * for, with a persistence service such as one provided by the unified shell.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional id for the new control; generated automatically if no non-empty id is given Note: this can be
       * omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TablePersoControllerSettings
    );

    /**
     * Activates the controller, i.e. tries to retrieve existing persisted personalizations, creates a TablePersoDialog
     * for the associated table and attaches a close handler to apply the personalizations to the table and
     * persist them.
     *
     * This method should be called when the table to be personalized knows its columns. Usually, this is when
     * that table's view has set its model, which is typically done in the corresponding controller's init method.
     * For example
     * ```javascript
     *
     *  onInit: function () {
     *
     * 		// set explored app's demo model on this sample
     * 		var oModel = new JSONModel(sap.ui.require.toUrl("sap/ui/demo/mock/products.json"));
     * 		var oGroupingModel = new JSONModel({ hasGrouping: false});
     * 		this.getView().setModel(oModel);
     * 		this.getView().setModel(oGroupingModel, 'Grouping');
     *
     * 		// init and activate controller
     * 		this._oTPC = new TablePersoController({
     * 			table: this.getView().byId("productsTable"),
     * 			//specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
     * 			componentName: "demoApp",
     * 			persoService: DemoPersoService,
     * 		}).activate();
     * 	}
     * ```
     */
    activate(): this;
    /**
     * Adds some table into the association {@link #getTables tables}.
     */
    addTable(
      /**
       * The tables to add; if empty, nothing is inserted
       */
      vTable: ID | Table
    ): this;
    /**
     * Applies the personalizations by getting the existing personalizations and adjusting to the table.
     */
    applyPersonalizations(
      /**
       * the table to be personalized.
       */
      oTable: Table
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:personalizationsDone personalizationsDone} event
     * of this `sap.m.TablePersoController`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoController` itself.
     */
    attachPersonalizationsDone(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoController` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the persoService in the aggregation {@link #getPersoService persoService}.
     */
    destroyPersoService(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:personalizationsDone personalizationsDone}
     * event of this `sap.m.TablePersoController`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPersonalizationsDone(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Do some clean up: remove event delegates, etc
     */
    exit(): void;
    /**
     * Creates a new subclass of class sap.m.TablePersoController with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TablePersoController>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:personalizationsDone personalizationsDone} to attached listeners.
     */
    firePersonalizationsDone(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getComponentName componentName}.
     *
     * Available options for the text direction are LTR and RTL. By default the control inherits the text direction
     * from its parent control.
     */
    getComponentName(): string;
    /**
     * Gets current value of property {@link #getContentHeight contentHeight}.
     */
    getContentHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getContentWidth contentWidth}.
     */
    getContentWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getHasGrouping hasGrouping}.
     *
     * Default value is `false`.
     */
    getHasGrouping(): boolean;
    /**
     * Returns a metadata object for class sap.m.TablePersoController.
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Gets content of aggregation {@link #getPersoService persoService}.
     */
    getPersoService(): Object;
    /**
     * Gets current value of property {@link #getResetAllMode resetAllMode}.
     *
     * Controls the behavior of the Reset button of the `TablePersoDialog`.
     *  The value must be specified in the constructor and cannot be set or modified later.
     *  If set to `Default`, the Reset button sets the table back to the initial state of the attached table
     * when the controller is activated.
     *  If set to `ServiceDefault`, the Reset button goes back to the initial settings of `persoService`.
     *  If set to `ServiceReset`, the Reset button calls the `getResetPersData` of the attached `persoService`
     * and uses it to reset the table.
     *
     *
     * Default value is `Default`.
     */
    getResetAllMode(): ResetAllMode | keyof typeof ResetAllMode;
    /**
     * Gets current value of property {@link #getShowResetAll showResetAll}.
     *
     * Controls the visibility of the Reset button of the `TablePersoDialog`.
     *
     *
     * Default value is `true`.
     */
    getShowResetAll(): boolean;
    /**
     * Gets current value of property {@link #getShowSelectAll showSelectAll}.
     *
     * Default value is `true`.
     */
    getShowSelectAll(): boolean;
    /**
     * ID of the element which is the current target of the association {@link #getTable table}, or `null`.
     */
    getTable(): ID;
    /**
     * Returns a _tablePersoDialog instance if available. It can be NULL if the controller has not been activated
     * yet.
     *
     * This function makes a private aggregate publicly accessable. This is necessary for downward compatibility
     * reasons: in the first versions of the tablePersoProvider developers still worked with the TablePersoDialog
     * directly, which is now not necessary any longer.
     */
    getTablePersoDialog(): TablePersoDialog;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getTables
     * tables}.
     */
    getTables(): ID[];
    /**
     * Initializes the TablePersoController instance after creation.
     */
    init(): void;
    /**
     * Opens the TablePersoDialog, stores the personalized settings on close, modifies the table columns, and
     * sends them to the persistence service
     */
    openDialog(): void;
    /**
     * Refresh the personalizations: reloads the personalization information from the table perso provider,
     * applies it to the controller's table and updates the controller's table perso dialog.
     *
     * Use case for a 'refresh' call would be that the table which is personalized changed its columns during
     * runtime, after personalization has been activated.
     */
    refresh(): void;
    /**
     * Removes all the controls in the association named {@link #getTables tables}.
     */
    removeAllTables(): ID[];
    /**
     * Removes an table from the association named {@link #getTables tables}.
     */
    removeTable(
      /**
       * The table to be removed or its index or ID
       */
      vTable: int | ID | Table
    ): ID;
    /**
     * Persist the personalizations
     */
    savePersonalizations(): void;
    /**
     * Using this method, the first part of tablePerso persistence ids can be provided, in case the table's
     * app does not provide that part itself.
     *
     * If a component name is set using this method, it will be used, regardless of whether the table's app
     * has a different component name or not.
     */
    setComponentName(
      /**
       * the new component name.
       */
      sCompName: string
    ): this;
    /**
     * Reflector for the controller's 'contentHeight' property.
     */
    setContentHeight(
      /**
       * the new height of the TablePersoDialog.
       */
      sHeight: CSSSize
    ): this;
    /**
     * Reflector for the controller's 'contentWidth' property.
     */
    setContentWidth(
      /**
       * the new width of the tablePersoDialog
       */
      sWidth: CSSSize
    ): this;
    /**
     * Reflector for the controller's 'hasGrouping' property.
     */
    setHasGrouping(
      /**
       * is the tablePersoDialog displayed in grouping mode or not.
       */
      bHasGrouping: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getPersoService persoService}.
     */
    setPersoService(
      /**
       * The persoService to set
       */
      oPersoService: Object
    ): this;
    /**
     * Sets a new value for property {@link #getResetAllMode resetAllMode}.
     *
     * Controls the behavior of the Reset button of the `TablePersoDialog`.
     *  The value must be specified in the constructor and cannot be set or modified later.
     *  If set to `Default`, the Reset button sets the table back to the initial state of the attached table
     * when the controller is activated.
     *  If set to `ServiceDefault`, the Reset button goes back to the initial settings of `persoService`.
     *  If set to `ServiceReset`, the Reset button calls the `getResetPersData` of the attached `persoService`
     * and uses it to reset the table.
     *
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Default`.
     */
    setResetAllMode(
      /**
       * New value for property `resetAllMode`
       */
      sResetAllMode?: ResetAllMode | keyof typeof ResetAllMode
    ): this;
    /**
     * Reflector for the controller's 'showResetAll' property.
     */
    setShowResetAll(
      /**
       * is the tablePersoDialog's 'UndoPersonalization' button displayed or not.
       */
      bShowResetAll: boolean
    ): this;
    /**
     * Reflector for the controller's 'showSelectAll' property.
     */
    setShowSelectAll(
      /**
       * is the tablePersoDialog's 'Display All' checkbox displayed or not.
       */
      bShowSelectAll: boolean
    ): this;
    /**
     * Sets the associated {@link #getTable table}.
     */
    setTable(
      /**
       * ID of an element which becomes the new target of this table association; alternatively, an element instance
       * may be given
       */
      oTable: ID | Table
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:personalizationsDone personalizationsDone} event
     * of this `sap.m.TablePersoController`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoController` itself.
     */
    attachPersonalizationsDone(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoController` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TablePersoControllerSettings
    extends $ManagedObjectSettings {
    contentWidth?: CSSSize | PropertyBindingInfo;

    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * Available options for the text direction are LTR and RTL. By default the control inherits the text direction
     * from its parent control.
     */
    componentName?: string | PropertyBindingInfo;

    hasGrouping?: boolean | PropertyBindingInfo;

    showSelectAll?: boolean | PropertyBindingInfo;

    /**
     * Controls the visibility of the Reset button of the `TablePersoDialog`.
     */
    showResetAll?: boolean | PropertyBindingInfo;

    /**
     * Controls the behavior of the Reset button of the `TablePersoDialog`.
     *  The value must be specified in the constructor and cannot be set or modified later.
     *  If set to `Default`, the Reset button sets the table back to the initial state of the attached table
     * when the controller is activated.
     *  If set to `ServiceDefault`, the Reset button goes back to the initial settings of `persoService`.
     *  If set to `ServiceReset`, the Reset button calls the `getResetPersData` of the attached `persoService`
     * and uses it to reset the table.
     */
    resetAllMode?:
      | (ResetAllMode | keyof typeof ResetAllMode)
      | PropertyBindingInfo;

    persoService?: Object;

    table?: Table | string;

    /**
     * Also several tables may be personalized at once given they have same columns.
     */
    tables?: Array<Table | string>;

    personalizationsDone?: Function;
  }
}

declare module "sap/m/TablePersoDialog" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { CSSSize, ID } from "sap/ui/core/library";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  import Table from "sap/m/Table";

  /**
   * Table Personalization Dialog
   */
  export default class TablePersoDialog extends ManagedObject {
    /**
     * The TablePersoDialog can be used to display and allow modification of personalization settings relating
     * to a Table. It displays the columns of the table that it refers to by using
     * 	 - The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers
     * 			a non-null value for a column
     * 	 - the column header control's 'text' property if no caption property is available
     * 	 - the column header control's 'title' property if neither 'text' nor 'caption' property are available
     *
     * 	 - the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning
     * 			is logged.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TablePersoDialogSettings
    );
    /**
     * The TablePersoDialog can be used to display and allow modification of personalization settings relating
     * to a Table. It displays the columns of the table that it refers to by using
     * 	 - The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers
     * 			a non-null value for a column
     * 	 - the column header control's 'text' property if no caption property is available
     * 	 - the column header control's 'title' property if neither 'text' nor 'caption' property are available
     *
     * 	 - the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning
     * 			is logged.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * optional id for the new control; generated automatically if no non-empty id is given Note: this can be
       * omitted, no matter whether `mSettings` will be given or not!
       */
      sId?: string,
      /**
       * optional map/JSON-object with initial settings for the new component instance
       */
      mSettings?: $TablePersoDialogSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.TablePersoDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoDialog` itself.
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.TablePersoDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoDialog` itself.
     */
    attachConfirm(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @deprecated (since 1.30.1) - This aggregate is no longer used. It collided with the TablePersoController's
     * persoService reference
     *
     * Destroys the persoService in the aggregation {@link #getPersoService persoService}.
     */
    destroyPersoService(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.m.TablePersoDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:confirm confirm} event of this `sap.m.TablePersoDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachConfirm(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TablePersoDialog with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TablePersoDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:confirm confirm} to attached listeners.
     */
    fireConfirm(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets current value of property {@link #getColumnInfoCallback columnInfoCallback}.
     */
    getColumnInfoCallback(): object;
    /**
     * Gets current value of property {@link #getContentHeight contentHeight}.
     */
    getContentHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getContentWidth contentWidth}.
     */
    getContentWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getHasGrouping hasGrouping}.
     */
    getHasGrouping(): boolean;
    /**
     * Gets current value of property {@link #getInitialColumnState initialColumnState}.
     */
    getInitialColumnState(): object;
    /**
     * Returns a metadata object for class sap.m.TablePersoDialog.
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * ID of the element which is the current target of the association {@link #getPersoDialogFor persoDialogFor},
     * or `null`.
     */
    getPersoDialogFor(): ID;
    /**
     * Gets current value of property {@link #getPersoMap persoMap}.
     */
    getPersoMap(): object;
    /**
     * @deprecated (since 1.30.1) - This aggregate is no longer used. It collided with the TablePersoController's
     * persoService reference
     *
     * Gets content of aggregation {@link #getPersoService persoService}.
     *
     * Refers to the service for reading and writing the personalization.
     */
    getPersoService(): Object;
    /**
     * Gets current value of property {@link #getShowResetAll showResetAll}.
     */
    getShowResetAll(): boolean;
    /**
     * Gets current value of property {@link #getShowSelectAll showSelectAll}.
     */
    getShowSelectAll(): boolean;
    /**
     * Initializes the TablePersoDialog instance after creation.
     */
    init(): void;
    /**
     * Sets the content of the dialog, being list items representing the associated table's column settings,
     * and opens the dialog
     */
    open(): void;
    /**
     * Returns the personalizations made. Currently supports a 'columns' property which holds an array of settings,
     * one element per column in the associated table. The element contains column-specific information as follows:
     * id: column id; order: new order; text: the column's header text that was displayed in the dialog; visible:
     * visibility (true or false).
     */
    retrievePersonalizations(): object;
    /**
     * Sets a new value for property {@link #getColumnInfoCallback columnInfoCallback}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setColumnInfoCallback(
      /**
       * New value for property `columnInfoCallback`
       */
      oColumnInfoCallback: object
    ): this;
    /**
     * Sets a new value for property {@link #getContentHeight contentHeight}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentHeight(
      /**
       * New value for property `contentHeight`
       */
      sContentHeight: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getContentWidth contentWidth}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContentWidth(
      /**
       * New value for property `contentWidth`
       */
      sContentWidth: CSSSize
    ): this;
    /**
     * Setter to turn on/ switch off TablePersoDialog's grouping mode.
     */
    setHasGrouping(
      /**
       * groping mode on or off.
       */
      bHasGrouping: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getInitialColumnState initialColumnState}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setInitialColumnState(
      /**
       * New value for property `initialColumnState`
       */
      oInitialColumnState: object
    ): this;
    /**
     * Sets the associated {@link #getPersoDialogFor persoDialogFor}.
     */
    setPersoDialogFor(
      /**
       * ID of an element which becomes the new target of this persoDialogFor association; alternatively, an element
       * instance may be given
       */
      oPersoDialogFor: ID | Table
    ): this;
    /**
     * Sets a new value for property {@link #getPersoMap persoMap}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPersoMap(
      /**
       * New value for property `persoMap`
       */
      oPersoMap: object
    ): this;
    /**
     * @deprecated (since 1.30.1) - This aggregate is no longer used. It collided with the TablePersoController's
     * persoService reference
     *
     * Sets the aggregated {@link #getPersoService persoService}.
     */
    setPersoService(
      /**
       * The persoService to set
       */
      oPersoService: Object
    ): this;
    /**
     * Setter to show/hide TablePersoDialog's 'Undo Personalization' button.
     */
    setShowResetAll(
      /**
       * 'undo Personalization' button visible or not.
       */
      bShowResetAll: boolean
    ): this;
    /**
     * Setter to show/hide TablePersoDialog's 'selectAll' checkbox.
     */
    setShowSelectAll(
      /**
       * selectAll checkbox visible or not.
       */
      bShowSelectAll: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.TablePersoDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoDialog` itself.
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.TablePersoDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TablePersoDialog` itself.
     */
    attachConfirm(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TablePersoDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TablePersoDialogSettings extends $ManagedObjectSettings {
    contentWidth?: CSSSize | PropertyBindingInfo;

    contentHeight?: CSSSize | PropertyBindingInfo;

    persoMap?: object | PropertyBindingInfo;

    columnInfoCallback?: object | PropertyBindingInfo;

    initialColumnState?: object | PropertyBindingInfo;

    hasGrouping?: boolean | PropertyBindingInfo;

    showSelectAll?: boolean | PropertyBindingInfo;

    showResetAll?: boolean | PropertyBindingInfo;

    /**
     * @deprecated (since 1.30.1) - This aggregate is no longer used. It collided with the TablePersoController's
     * persoService reference
     *
     * Refers to the service for reading and writing the personalization.
     */
    persoService?: Object;

    /**
     * The table which shall be personalized.
     */
    persoDialogFor?: Table | string;

    confirm?: Function;

    cancel?: Function;
  }
}

declare module "sap/m/TablePersoProvider" {
  import {
    default as ManagedObject,
    $ManagedObjectSettings,
  } from "sap/ui/base/ManagedObject";

  import Column from "sap/m/Column";

  import ManagedObjectMetadata from "sap/ui/base/ManagedObjectMetadata";

  /**
   * Table Personalization Provider
   */
  export default class TablePersoProvider extends ManagedObject {
    /**
     * This is an abstract TablePersoProvider, describing the interface for a real TablePersoProvider.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor
     * sap.ui.base.ManagedObject} can be used.
     */
    constructor();

    /**
     * Removes the personalization bundle.
     *  This must return a {@link http://api.jquery.com/promise/ jQuery promise}.
     */
    delPersData(): void;
    /**
     * Creates a new subclass of class sap.m.TablePersoProvider with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TablePersoProvider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Callback function which can be used to determine the title of a given column within the TablePersoDialog.
     * As a default, the column header controls are asked for their 'text' or 'title' property. This works in
     * most cases, for example if the header control is an sap.m.Label (has 'text' property) or an sap.m.ObjectListItem
     * (has 'title' property).
     *
     * If the header control used in a column has neither 'text' nor 'title' property, or if you would like
     * to display a modified column name for a certain column, this callback function can be used.
     *
     * If the callback delivers null for a column (which is the default implementation), the default texts described
     * above are displayed for that column in the TablePersoDialog.
     *
     * In case neither the callback delivers null and neither 'text' nor ' title' property are at hand, the
     * TablePersoDialog will display the column id and a warning message is logged.
     */
    getCaption(
      /**
       * column whose caption shall be determined
       */
      oColumn: Column
    ): void;
    /**
     * Callback function which can be used to determine the group of a given column within the TablePersoDialog.
     * As a default, the columns are not assigned to a group.
     *
     * This information is used to group the columns within the TablePersoDialog if the TablePersoController's
     * 'group' flag is set, otherwise, the groups are ignored.
     */
    getGroup(
      /**
       * column whose group shall be determined
       */
      oColumn: Column
    ): void;
    /**
     * Returns a metadata object for class sap.m.TablePersoProvider.
     */
    static getMetadata(): ManagedObjectMetadata;
    /**
     * Retrieves the personalization bundle.
     *  This must return a {@link http://api.jquery.com/promise/ jQuery Promise}, which resolves in the desired
     * table state.
     */
    getPersData(): void;
    /**
     * @SINCE 1.88
     *
     * Retrieves the desired reset state. This getter is used by the `TablePersoController` if the `resetAllMode`
     * is `ServiceReset`.
     *
     *
     * This must return a {@link http://api.jquery.com/promise/ jQuery promise}.
     */
    getResetPersData(): void;
    /**
     * Initializes the TablePersoProvider instance after creation.
     */
    init(): void;
    /**
     * Resets user’s personalization for a given table so that ‘getPersData’ will deliver its initial state.
     * If no table is specified, all personalizations of the currently logged on user are reset.
     *
     *
     * This must return a {@link http://api.jquery.com/promise/ jQuery promise}.
     */
    resetPersData(): void;
    /**
     * Stores the personalization bundle, overwriting any previous bundle completely.
     *  This must return a {@link http://api.jquery.com/promise/ jQuery promise}.
     */
    setPersData(oBundle: object): void;
  }

  export interface $TablePersoProviderSettings extends $ManagedObjectSettings {}
}

declare module "sap/m/TableSelectDialog" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Column from "sap/m/Column";

  import ColumnListItem from "sap/m/ColumnListItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import StandardListItem from "sap/m/StandardListItem";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { TitleAlignment } from "sap/m/library";

  import Context from "sap/ui/model/Context";

  import SelectDialog from "sap/m/SelectDialog";

  import Model from "sap/ui/model/Model";

  /**
   * @SINCE 1.16
   *
   * A dialog to select items in a table containing multiple values and attributes. Overview: The table select
   * dialog helps users select items in a table-like structure with several attributes and values per item.
   * A search fields helps narrow down the results. Structure: The table select dialog consists of the following
   * elements:
   * 	 -  Search field - used to search enter search terms for a specific item.
   * 	 -  Info toolbar (only in multi-select mode) - displays the number of currently selected items.
   * 	 -  Content - the table with the items.
   * 	 -  Footer (optional) - a toolbar for actions.  Table Select Dialog supports multi-selection when
   * 			the `multiSelect` property is set to `true`.
   *
   * The selected items can be stored for later editing when the `rememberSelections` property is set. **Note:**
   * This property has to be set before the dialog is opened. Usage: When to use::
   * 	 - You need to select one or more items from a comprehensive list that contains multiple attributes
   * 			or values.  When not to use::
   * 	 - You need to select only one item from a predefined list of single-value options. Use the {@link sap.m.Select
   * 			Select} control instead.
   * 	 - You need to display complex content without having the user navigate away from the current page or
   * 			you want to prompt the user for an action. Use the {@link sap.m.Dialog Dialog} control instead.
   * 	 - You need to select items within a query-based range. Use the {@link https://experience.sap.com/fiori-design-web/value-help-dialog/
   * 			Value Help Dialog} control instead.
   * 	 - You need to filter a set of items without any selection. Use the {@link https://experience.sap.com/fiori-design-web/filter-bar/
   * 			Filter Bar} control instead.  Notes::
   * 	 - The property `growing` must not be used together with two-way binding. When the property `growing`
   * 			is set to `true` (default value), selected count (if present) and search, will work for currently loaded
   * 			items only. To make sure that all items in the table are loaded at once and the above features work properly,
   * 			set the property to `false`. Since version 1.58, the columns headers and the info toolbar are sticky
   * 			(remain fixed on top when scrolling). This feature is not supported in all browsers. The TableSelectDialog
   * 			is usually displayed at the center of the screen. Its size and position can be changed by the user. To
   * 			enable this you need to set the `resizable` and `draggable` properties. Both properties are available
   * 			only in desktop mode. For more information on browser support limitations, you can refer to the {@link
   * 			sap.m.ListBase sap.m.ListBase} `sticky` property.  Responsive Behavior:
   * 	 - On smaller screens, the columns of the table wrap and build a list that shows all the information.
   * 			 When using the `sap.m.TableSelectDialog` in SAP Quartz themes, the breakpoints and layout paddings
   * 			could be determined by the dialog's width. To enable this concept and add responsive paddings to an element
   * 			of the control, you have to add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * 			`sapUiResponsivePadding--subHeader`, `sapUiResponsivePadding--content`, `sapUiResponsivePadding--footer`.
   */
  export default class TableSelectDialog extends Control {
    /**
     * Constructor for a new TableSelectDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/table-select-dialog/ Table Select Dialog}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSelectDialogSettings
    );
    /**
     * Constructor for a new TableSelectDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/table-select-dialog/ Table Select Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TableSelectDialogSettings
    );

    /**
     * Adds some column to the aggregation {@link #getColumns columns}.
     */
    addColumn(
      /**
       * The column to add; if empty, nothing is inserted
       */
      oColumn: Column
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ColumnListItem
    ): this;
    /**
     * Transfers method to the inner dialog: addStyleClass
     */
    addStyleClass(
      /**
       * CSS class name to add
       */
      sStyleClass: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the Cancel button is clicked.
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation
     * button in multi-selection mode. The items being selected are returned as event parameters.
     */
    attachConfirm(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the value of the search field is changed by a user (for example at each key press).
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the search button has been clicked on dialog.
     */
    attachSearch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getColumns columns} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindColumns(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the columns in the aggregation {@link #getColumns columns}.
     */
    destroyColumns(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.m.TableSelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:confirm confirm} event of this `sap.m.TableSelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachConfirm(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.TableSelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.m.TableSelectDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSearch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TableSelectDialog with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TableSelectDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:confirm confirm} to attached listeners.
     */
    fireConfirm(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is
         * enabled and multiple items are selected, only the first selected item is returned.
         */
        selectedItem?: StandardListItem;
        /**
         * Returns an array containing the visible selected list items. If no items are selected, an empty array
         * is returned.
         */
        selectedItems?: StandardListItem[];
        /**
         * Returns the binding contexts of the selected items including the non-visible items, but excluding the
         * not loaded items. Note: In contrast to the parameter "selectedItems", this parameter includes the selected
         * but NOT visible items (due to list filtering). An empty array is set for this parameter if no Databinding
         * is used. NOTE: When the list binding is pre-filtered and there are items in the selection that are not
         * visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not be included
         * in the selectedContexts array unless they are displayed at least once.
         */
        selectedContexts?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Specifies the value entered in the search field.
         */
        value?: string;
        /**
         * The Items binding of the Table Select Dialog. Only available if the items aggregation is bound to a model.
         */
        itemsBinding?: any;
      }
    ): this;
    /**
     * Fires event {@link #event:search search} to attached listeners.
     */
    fireSearch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Specifies the value entered in the search field.
         */
        value?: string;
        /**
         * Determines the Items binding of the Table Select Dialog. Only available if the items aggregation is bound
         * to a model.
         */
        itemsBinding?: any;
        /**
         * Returns if the Clear button is pressed.
         */
        clearButtonPressed?: boolean;
      }
    ): this;
    /**
     * Gets current busy state.
     */
    getBusy(): boolean;
    /**
     * Gets content of aggregation {@link #getColumns columns}.
     *
     * The columns bindings.
     */
    getColumns(): Column[];
    /**
     * @SINCE 1.68
     *
     * Gets current value of property {@link #getConfirmButtonText confirmButtonText}.
     *
     * Overwrites the default text for the confirmation button. Note: This property applies only when the property
     * `multiSelect` is set to `true`.
     */
    getConfirmButtonText(): string;
    /**
     * Retrieves content height of the select dialog {@link sap.m.Dialog}
     */
    getContentHeight(): CSSSize;
    /**
     * Retrieves content width of the select dialog {@link sap.m.Dialog}
     */
    getContentWidth(): CSSSize;
    /**
     * Transfers method to the inner dialog: getDomRef
     */
    getDomRef(): Element;
    /**
     * @SINCE 1.71
     *
     * Gets current value of property {@link #getDraggable draggable}.
     *
     * When set to `true`, the TableSelectDialog is draggable by its header. The default value is `false`. **Note**:
     * The TableSelectDialog can be draggable only in desktop mode.
     *
     * Default value is `false`.
     */
    getDraggable(): boolean;
    /**
     * @SINCE 1.56
     *
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Determines the progressive loading. When set to `true`, enables the growing feature of the control to
     * load more items by requesting from the bound model. **Note:** This feature only works when an `items`
     * aggregation is bound. Growing must not be used together with two-way binding. **Note:** If the property
     * is set to `true`, selected count (if present) and search, will work for currently loaded items only.
     * To make sure that all items in the table are loaded at once and the above features work properly, we
     * recommend setting the `growing` property to `false`.
     *
     * Default value is `true`.
     */
    getGrowing(): boolean;
    /**
     * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
     *
     * Determines the number of items initially displayed in the table and defines the number of items to be
     * requested from the model for each grow. This property can only be used if the property `growing` is set
     * to `true`.
     */
    getGrowingThreshold(): int;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items of the table.
     */
    getItems(): ColumnListItem[];
    /**
     * Returns a metadata object for class sap.m.TableSelectDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMultiSelect multiSelect}.
     *
     * Enables the user to select several options from the table.
     *
     * Default value is `false`.
     */
    getMultiSelect(): boolean;
    /**
     * Retrieves the internal List's no data text property
     */
    getNoDataText(): string;
    /**
     * @SINCE 1.18
     *
     * Gets current value of property {@link #getRememberSelections rememberSelections}.
     *
     * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in
     * the same context to allow for corrections of previous user inputs, set this flag to `true`. When the
     * dialog should reset the selection to allow for a new selection each time set it to `false` Note: This
     * property must be set before the Dialog is opened to have an effect.
     *
     * Default value is `false`.
     */
    getRememberSelections(): boolean;
    /**
     * @SINCE 1.71
     *
     * Gets current value of property {@link #getResizable resizable}.
     *
     * When set to `true`, the TableSelectDialog will have a resize handler in its bottom right corner. The
     * default value is `false`. **Note**: The TableSelectDialog can be resizable only in desktop mode.
     *
     * Default value is `false`.
     */
    getResizable(): boolean;
    /**
     * @SINCE 1.58
     *
     * Gets current value of property {@link #getShowClearButton showClearButton}.
     *
     * This flag controls whether the Clear button is shown. When set to `true`, it provides a way to clear
     * a selection made in Table Select Dialog.
     *
     * We recommend enabling of the Clear button in the following cases, where a mechanism to clear the value
     * is needed: In case the Table Select Dialog is in single-selection mode (default mode) and `rememberSelections`
     * is set to `true`. The Clear button needs to be enabled in order to allow users to clear the selection.
     * In case of using `sap.m.Input` with `valueHelpOnly` set to `true`, the Clear button can be used for clearing
     * the selection. In case the application stores a value and uses only Table Select Dialog to edit/maintain
     * it.
     *
     * Optional: In case `multiSelect` is set to `true`, the selection can be easily cleared with one click.
     *
     * **Note:** When used with OData, only the loaded selections will be cleared.
     *
     * Default value is `false`.
     */
    getShowClearButton(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Specifies the title text in the dialog header.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Transfers method to the inner dialog: hasStyleClass
     */
    hasStyleClass(): boolean;
    /**
     * Checks for the provided `sap.m.Column` in the aggregation {@link #getColumns columns}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfColumn(
      /**
       * The column whose index is looked for
       */
      oColumn: Column
    ): int;
    /**
     * Checks for the provided `sap.m.ColumnListItem` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ColumnListItem
    ): int;
    /**
     * Inserts a column into the aggregation {@link #getColumns columns}.
     */
    insertColumn(
      /**
       * The column to insert; if empty, nothing is inserted
       */
      oColumn: Column,
      /**
       * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
       * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ColumnListItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Invalidates the dialog instead of this control, as there is no renderer.
     */
    invalidate(): this;
    /**
     * Shows the busy state and is called after the renderer is finished.
     */
    onAfterRendering(): this;
    /**
     * Opens the internal dialog with a searchfield and a table.
     */
    open(
      /**
       * Value for the search. The table will be automatically trigger the search event if this parameter is set.
       */
      sSearchValue: string
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getColumns columns}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllColumns(): Column[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ColumnListItem[];
    /**
     * Removes a column from the aggregation {@link #getColumns columns}.
     */
    removeColumn(
      /**
       * The column to remove or its index or id
       */
      vColumn: int | string | Column
    ): Column;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ColumnListItem
    ): ColumnListItem;
    /**
     * Transfers method to the inner dialog: removeStyleClass
     */
    removeStyleClass(
      /**
       * CSS class name to remove
       */
      sStyleClass: string
    ): this;
    /**
     * Set the binding context for the internal table AND the current control so that both controls can be used
     * with the context.
     */
    setBindingContext(
      /**
       * The new context
       */
      oContext: Context,
      /**
       * The optional model name
       */
      sModelName?: string
    ): this;
    /**
     * Enables/Disables busy state.
     */
    setBusy(
      /**
       * for enabling busy indicator
       */
      flag: boolean
    ): this;
    /**
     * Sets the busyIndicatorDelay value to the internal table
     */
    setBusyIndicatorDelay(
      /**
       * Value for the busyIndicatorDelay.
       */
      iValue: int
    ): this;
    /**
     * Sets the text of the confirmation button.
     */
    setConfirmButtonText(
      /**
       * The text for the confirm button
       */
      sText: string
    ): this;
    /**
     * Sets content height of the select dialog {@link sap.m.Dialog}
     */
    setContentHeight(
      /**
       * the new content height value for the dialog
       */
      sHeight: CSSSize
    ): this;
    /**
     * Sets content width of the select dialog {@link sap.m.Dialog}
     */
    setContentWidth(
      /**
       * the new content width value for the dialog
       */
      sWidth: CSSSize
    ): this;
    /**
     * Sets the draggable property.
     */
    setDraggable(
      /**
       * Value for the draggable property
       */
      bValue: boolean
    ): SelectDialog;
    /**
     * Sets the growing to the internal table
     */
    setGrowing(
      /**
       * Value for the table's growing.
       */
      bValue: boolean
    ): this;
    /**
     * Sets the growing threshold to the internal table
     */
    setGrowingThreshold(
      /**
       * Value for the table's growing threshold.
       */
      iValue: int
    ): this;
    /**
     * Sets the model for the internal table and the current control, so that both controls can be used with
     * data binding.
     */
    setModel(
      /**
       * The model that holds the data for the table
       */
      oModel: Model,
      /**
       * The optional model name
       */
      sName?: string
    ): this;
    /**
     * Enables/Disables multi selection mode.
     */
    setMultiSelect(
      /**
       * flag for multi selection mode
       */
      bMulti: boolean
    ): this;
    /**
     * Sets the no data text of the internal table
     */
    setNoDataText(
      /**
       * the no data text for the table
       */
      sNoDataText: string
    ): void;
    /**
     * @SINCE 1.18
     *
     * Sets a new value for property {@link #getRememberSelections rememberSelections}.
     *
     * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in
     * the same context to allow for corrections of previous user inputs, set this flag to `true`. When the
     * dialog should reset the selection to allow for a new selection each time set it to `false` Note: This
     * property must be set before the Dialog is opened to have an effect.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRememberSelections(
      /**
       * New value for property `rememberSelections`
       */
      bRememberSelections?: boolean
    ): this;
    /**
     * Sets the resizable property.
     */
    setResizable(
      /**
       * Value for the resizable property
       */
      bValue: boolean
    ): SelectDialog;
    /**
     * Sets the Clear button visible state
     */
    setShowClearButton(
      /**
       * Value for the Clear button visible state.
       */
      bVisible: boolean
    ): this;
    /**
     * Sets the title of the internal dialog
     */
    setTitle(
      /**
       * the title text for the dialog
       */
      sTitle: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Transfers method to the inner dialog: toggleStyleClass
     */
    toggleStyleClass(
      /**
       * CSS class name to add or remove
       */
      sStyleClass: string,
      /**
       * Whether style class should be added (or removed); when this parameter is not given, the given style class
       * will be toggled (removed, if present, and added if not present)
       */
      bAdd?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getColumns columns} from model data.
     */
    unbindColumns(): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the Cancel button is clicked.
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation
     * button in multi-selection mode. The items being selected are returned as event parameters.
     */
    attachConfirm(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the value of the search field is changed by a user (for example at each key press).
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.m.TableSelectDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TableSelectDialog` itself.
     *
     * Fires when the search button has been clicked on dialog.
     */
    attachSearch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TableSelectDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TableSelectDialogSettings extends $ControlSettings {
    /**
     * Specifies the title text in the dialog header.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Specifies the text displayed when the table has no data.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Enables the user to select several options from the table.
     */
    multiSelect?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.56
     *
     * Determines the progressive loading. When set to `true`, enables the growing feature of the control to
     * load more items by requesting from the bound model. **Note:** This feature only works when an `items`
     * aggregation is bound. Growing must not be used together with two-way binding. **Note:** If the property
     * is set to `true`, selected count (if present) and search, will work for currently loaded items only.
     * To make sure that all items in the table are loaded at once and the above features work properly, we
     * recommend setting the `growing` property to `false`.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * Determines the number of items initially displayed in the table and defines the number of items to be
     * requested from the model for each grow. This property can only be used if the property `growing` is set
     * to `true`.
     */
    growingThreshold?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.18
     *
     * Determines the content width of the inner dialog. For more information, see the Dialog documentation.
     */
    contentWidth?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.18
     *
     * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in
     * the same context to allow for corrections of previous user inputs, set this flag to `true`. When the
     * dialog should reset the selection to allow for a new selection each time set it to `false` Note: This
     * property must be set before the Dialog is opened to have an effect.
     */
    rememberSelections?: boolean | PropertyBindingInfo;

    /**
     * Specifies the content height of the inner dialog. For more information, see the Dialog documentation.
     */
    contentHeight?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.58
     *
     * This flag controls whether the Clear button is shown. When set to `true`, it provides a way to clear
     * a selection made in Table Select Dialog.
     *
     * We recommend enabling of the Clear button in the following cases, where a mechanism to clear the value
     * is needed: In case the Table Select Dialog is in single-selection mode (default mode) and `rememberSelections`
     * is set to `true`. The Clear button needs to be enabled in order to allow users to clear the selection.
     * In case of using `sap.m.Input` with `valueHelpOnly` set to `true`, the Clear button can be used for clearing
     * the selection. In case the application stores a value and uses only Table Select Dialog to edit/maintain
     * it.
     *
     * Optional: In case `multiSelect` is set to `true`, the selection can be easily cleared with one click.
     *
     * **Note:** When used with OData, only the loaded selections will be cleared.
     */
    showClearButton?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.68
     *
     * Overwrites the default text for the confirmation button. Note: This property applies only when the property
     * `multiSelect` is set to `true`.
     */
    confirmButtonText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.71
     *
     * When set to `true`, the TableSelectDialog is draggable by its header. The default value is `false`. **Note**:
     * The TableSelectDialog can be draggable only in desktop mode.
     */
    draggable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.71
     *
     * When set to `true`, the TableSelectDialog will have a resize handler in its bottom right corner. The
     * default value is `false`. **Note**: The TableSelectDialog can be resizable only in desktop mode.
     */
    resizable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.Auto`, the Title will be aligned
     * as it is set in the theme (if not set, the default value is `center`); Other possible values are `TitleAlignment.Start`
     * (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * The items of the table.
     */
    items?: ColumnListItem[] | ColumnListItem | AggregationBindingInfo;

    /**
     * The columns bindings.
     */
    columns?: Column[] | Column | AggregationBindingInfo;

    /**
     * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation
     * button in multi-selection mode. The items being selected are returned as event parameters.
     */
    confirm?: Function;

    /**
     * Fires when the search button has been clicked on dialog.
     */
    search?: Function;

    /**
     * Fires when the value of the search field is changed by a user (for example at each key press).
     */
    liveChange?: Function;

    /**
     * Fires when the Cancel button is clicked.
     */
    cancel?: Function;
  }
}

declare module "sap/m/Text" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IShrinkable,
    IFormContent,
    ISemanticFormContent,
    TextAlign,
    TextDirection,
    CSSSize,
  } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import { EmptyIndicatorMode, WrappingType } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * The `Text` control can be used for embedding longer text paragraphs, that need text wrapping, into your
   * app. If the configured text value contains HTML code or script tags, those will be escaped.
   *
   * As of version 1.60, you can hyphenate the text with the use of the `wrappingType` property. For more
   * information, see {@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.
   *
   * **Note:** Line breaks will always be visualized except when the `wrapping` property is set to `false`.
   * In addition, tabs and whitespace can be preserved by setting the `renderWhitespace` property to `true`.
   */
  export default class Text
    extends Control
    implements IShrinkable, IFormContent, ISemanticFormContent {
    __implements__sap_ui_core_IShrinkable: boolean;
    __implements__sap_ui_core_IFormContent: boolean;
    __implements__sap_ui_core_ISemanticFormContent: boolean;
    /**
     * Constructor for a new Text.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/text/ Text}
     * 	{@link topic:f94deb45de184a3a87850b75d610d9c0 Text}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextSettings
    );
    /**
     * Constructor for a new Text.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/text/ Text}
     * 	{@link topic:f94deb45de184a3a87850b75d610d9c0 Text}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextSettings
    );
    /**
     * @SINCE 1.22
     *
     * Determines per instance whether line height should be cached or not.
     *
     * Default value is true.
     */
    cacheLineHeight: boolean;

    /**
     * @SINCE 1.13.2
     *
     * Ellipsis(...) text to indicate more text when clampText function is used.
     *
     * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
     */
    ellipsis: string;

    /**
     * @SINCE 1.13.2
     *
     * Defines whether browser supports native line clamp or not
     */
    static hasNativeLineClamp: undefined;

    /**
     * @SINCE 1.22
     *
     * Default line height value as a number when line height is normal.
     *
     * This value is required during max height calculation for the browsers that do not support line clamping.
     * It is better to define line height in CSS instead of "normal" to get consistent `maxLines` results since
     * normal line height not only varies from browser to browser but it also varies from one font face to another
     * and can also vary within a given face.
     */
    normalLineHeight: int;

    /**
     * Binds property {@link #getText text} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
     * of the possible properties of `oBindingInfo`
     */
    bindText(
      /**
       * The binding information
       */
      oBindingInfo: PropertyBindingInfo
    ): this;
    /**
     * @SINCE 1.20
     *
     * Decides whether the control can use native line clamp feature or not.
     *
     * In RTL mode native line clamp feature is not supported.
     */
    canUseNativeLineClamp(): Boolean;
    /**
     * @SINCE 1.22
     *
     * Sets the max height to support `maxLines` property.
     */
    clampHeight(
      /**
       * DOM reference of the text container.
       */
      oDomRef?: HTMLElement
    ): int;
    /**
     * @SINCE 1.20
     *
     * Clamps the wrapping text according to max lines and returns the found ellipsis position. Parameters can
     * be used for better performance.
     */
    clampText(
      /**
       * DOM reference of the text container.
       */
      oDomRef?: HTMLElement,
      /**
       * Start point of the ellipsis search.
       */
      iStartPos?: int,
      /**
       * End point of the ellipsis search.
       */
      iEndPos?: int
    ): int | undefined;
    /**
     * Creates a new subclass of class sap.m.Text with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Text>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets the accessibility information for the text.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.22
     *
     * Returns the max height according to max lines and line height calculation. This is not calculated max
     * height!
     */
    getClampHeight(
      /**
       * DOM reference of the text container.
       */
      oDomRef?: HTMLElement
    ): int;
    /**
     * @SINCE 1.87
     *
     * Gets current value of property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * Default value is `Off`.
     */
    getEmptyIndicatorMode():
      | EmptyIndicatorMode
      | keyof typeof EmptyIndicatorMode;
    /**
     * @SINCE 1.22
     *
     * Caches and returns the computed line height of the text.
     * See:
     * 	sap.m.Text#cacheLineHeight
     */
    getLineHeight(
      /**
       * DOM reference of the text container.
       */
      oDomRef?: HTMLElement
    ): int;
    /**
     * @SINCE 1.13.2
     *
     * Gets current value of property {@link #getMaxLines maxLines}.
     *
     * Limits the number of lines for wrapping texts.
     *
     * **Note**: The multi-line overflow indicator depends on the browser line clamping support. For such browsers,
     * this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
     */
    getMaxLines(): int;
    /**
     * Returns a metadata object for class sap.m.Text.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.51
     *
     * Gets current value of property {@link #getRenderWhitespace renderWhitespace}.
     *
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser. Depending on wrapping property text will either only wrap on line breaks or wrap when
     * necessary, and on line breaks.
     *
     * Default value is `false`.
     */
    getRenderWhitespace(): boolean;
    /**
     * Gets the text.
     */
    getText(
      /**
       * Indication for normalized text.
       */
      bNormalize: boolean
    ): string;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text.
     *
     * Default value is `Begin`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Available options for the text direction are LTR and RTL. By default the control inherits the text direction
     * from its parent control.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * @SINCE 1.22
     *
     * Returns the text node container's DOM reference. This can be different from `getDomRef` when inner wrapper
     * is needed.
     */
    getTextDomRef(): HTMLElement | null;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the Text control. By default, the Text control uses the full width available. Set this
     * property to restrict the width to a custom value.
     */
    getWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Enables text wrapping.
     *
     * Default value is `true`.
     */
    getWrapping(): boolean;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     *
     * Default value is `Normal`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * @SINCE 1.22
     *
     * Determines whether max lines should be rendered or not.
     */
    hasMaxLines(): HTMLElement | null;
    /**
     * Overwrites onAfterRendering
     */
    onAfterRendering(): void;
    /**
     * @SINCE 1.87
     *
     * Sets a new value for property {@link #getEmptyIndicatorMode emptyIndicatorMode}.
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Off`.
     */
    setEmptyIndicatorMode(
      /**
       * New value for property `emptyIndicatorMode`
       */
      sEmptyIndicatorMode?: EmptyIndicatorMode | keyof typeof EmptyIndicatorMode
    ): this;
    /**
     * @SINCE 1.13.2
     *
     * Sets a new value for property {@link #getMaxLines maxLines}.
     *
     * Limits the number of lines for wrapping texts.
     *
     * **Note**: The multi-line overflow indicator depends on the browser line clamping support. For such browsers,
     * this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxLines(
      /**
       * New value for property `maxLines`
       */
      iMaxLines?: int
    ): this;
    /**
     * @SINCE 1.30.3
     *
     * To prevent from the layout thrashing of the `textContent` call, this method first tries to set the `nodeValue`
     * of the first child if it exists.
     */
    static setNodeValue(
      /**
       * DOM reference of the text node container.
       */
      oDomRef: HTMLElement,
      /**
       * new Node value.
       */
      sNodeValue?: String
    ): void;
    /**
     * @SINCE 1.51
     *
     * Sets a new value for property {@link #getRenderWhitespace renderWhitespace}.
     *
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser. Depending on wrapping property text will either only wrap on line breaks or wrap when
     * necessary, and on line breaks.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setRenderWhitespace(
      /**
       * New value for property `renderWhitespace`
       */
      bRenderWhitespace?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Determines the text to be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Sets the horizontal alignment of the text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Begin`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Available options for the text direction are LTR and RTL. By default the control inherits the text direction
     * from its parent control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the Text control. By default, the Text control uses the full width available. Set this
     * property to restrict the width to a custom value.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Enables text wrapping.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Normal`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
    /**
     * Unbinds property {@link #getText text} from model data.
     */
    unbindText(): this;
  }

  export interface $TextSettings extends $ControlSettings {
    /**
     * Determines the text to be displayed.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Available options for the text direction are LTR and RTL. By default the control inherits the text direction
     * from its parent control.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Enables text wrapping.
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`.
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * Sets the horizontal alignment of the text.
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Sets the width of the Text control. By default, the Text control uses the full width available. Set this
     * property to restrict the width to a custom value.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.13.2
     *
     * Limits the number of lines for wrapping texts.
     *
     * **Note**: The multi-line overflow indicator depends on the browser line clamping support. For such browsers,
     * this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
     */
    maxLines?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.51
     *
     * Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved
     * by the browser. Depending on wrapping property text will either only wrap on line breaks or wrap when
     * necessary, and on line breaks.
     */
    renderWhitespace?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.87
     *
     * Specifies if an empty indicator should be displayed when there is no text.
     */
    emptyIndicatorMode?:
      | (EmptyIndicatorMode | keyof typeof EmptyIndicatorMode)
      | PropertyBindingInfo;
  }
}

declare module "sap/m/TextArea" {
  import { default as InputBase, $InputBaseSettings } from "sap/m/InputBase";

  import { CSSSize, Wrapping } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.9.0
   *
   * A control that is used for multi-line input of text. Overview: The text area is used to enter multiple
   * lines of text. When empty, it can hold a placeholder similar to an {@link sap.m.Input input}. You can
   * define the height and width of the text area and also determine specific behavior when handling long
   * texts. Structure: Parameters that determine the size:
   * 	 - `rows` - Number of visible text lines (overruled by `height`, if both are set)
   * 	 - `cols` - Number of visible characters per line line (overruled by `width`, if both are set)
   * 	 - `height` - Height of the control
   * 	 - `width` - Width of the control  Parameters that determine the behavior:
   * 	 - `growing` - The text area adjusts its size based on the content
   * 	 - `growingMaxLines` - Threshold for the `growing` property (shouldn't exceed the screen size)
   * 	 - `maxLength` - Maximum number of characters that can be entered in a text area
   * 	 - `wrapping` - The way the entered text is wrapped by the control
   * 	 - `showExceededText` - Determines how text beyond the `maxLength` length is handled  Usage: When
   * 			to use:
   * 	 - You want to enter multiple lines of text.
   * 	 - Always provide labels for a text area.
   * 	 - A placeholder does not substitute a label.  Responsive Behavior:
   * 	 - On smaller screens, you can scroll down the text area to see the entire text. To indicate that the
   * 			text continues, the control shows only half of the last line.
   * 	 - If you have a growing text area, have in mind that its maximum height should not exceed the height
   * 			of the screen. If that is the case, the screen height is used instead.
   * 	 - If `showExceededText` is set to TRUE and you paste a longer text, all characters beyond the `maxLength`
   * 			limit are automatically selected. If `showExceededText` is set to TRUE, the control will display
   * 			a counter for the remaining characters.
   */
  export default class TextArea extends InputBase {
    /**
     * Constructor for a new TextArea.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/text-area/ Text Area}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextAreaSettings
    );
    /**
     * Constructor for a new TextArea.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/text-area/ Text Area}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TextAreaSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TextArea` itself.
     *
     * Is fired whenever the user has modified the text shown on the text area.
     */
    attachLiveChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TextArea` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.m.TextArea`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachLiveChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TextArea with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TextArea>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:liveChange liveChange} to attached listeners.
     */
    fireLiveChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new `value` of the control.
         */
        value?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getCols cols}.
     *
     * Defines the visible width of the control, in average character widths. **Note:** The `width` property
     * wins over the `cols` property, if both are set.
     *
     * Default value is `20`.
     */
    getCols(): int;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getGrowing growing}.
     *
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content. **Note:**
     * The `height` property is ignored, if this property set to `true`.
     *
     * Default value is `false`.
     */
    getGrowing(): boolean;
    /**
     * @SINCE 1.38.0
     *
     * Gets current value of property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the control can grow.
     *
     * Default value is `0`.
     */
    getGrowingMaxLines(): int;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control.
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getMaxLength maxLength}.
     *
     * Defines the maximum number of characters that the `value` can be.
     *
     * Default value is `0`.
     */
    getMaxLength(): int;
    /**
     * Returns a metadata object for class sap.m.TextArea.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the control. **Note:** The `height` property wins over the
     * `rows` property, if both are set.
     *
     * Default value is `2`.
     */
    getRows(): int;
    /**
     * @SINCE 1.48
     *
     * Gets current value of property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false` the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true` the characters exceeding the `maxLength` value are selected on paste and the
     * counter below the input field displays their number.
     *
     * Default value is `false`.
     */
    getShowExceededText(): boolean;
    /**
     * @SINCE 1.30
     *
     * Gets current value of property {@link #getValueLiveUpdate valueLiveUpdate}.
     *
     * Indicates when the `value` property gets updated with the user changes. Setting it to `true` updates
     * the `value` property whenever the user has modified the text shown on the text area.
     *
     * Default value is `false`.
     */
    getValueLiveUpdate(): boolean;
    /**
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Indicates how the control wraps the text, e.g. `Soft`, `Hard`, `Off`.
     *
     * Default value is `None`.
     */
    getWrapping(): Wrapping | keyof typeof Wrapping;
    /**
     * Sets a new value for property {@link #getCols cols}.
     *
     * Defines the visible width of the control, in average character widths. **Note:** The `width` property
     * wins over the `cols` property, if both are set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `20`.
     */
    setCols(
      /**
       * New value for property `cols`
       */
      iCols?: int
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getGrowing growing}.
     *
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content. **Note:**
     * The `height` property is ignored, if this property set to `true`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGrowing(
      /**
       * New value for property `growing`
       */
      bGrowing?: boolean
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Sets a new value for property {@link #getGrowingMaxLines growingMaxLines}.
     *
     * Defines the maximum number of lines that the control can grow.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setGrowingMaxLines(
      /**
       * New value for property `growingMaxLines`
       */
      iGrowingMaxLines?: int
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMaxLength maxLength}.
     *
     * Defines the maximum number of characters that the `value` can be.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `0`.
     */
    setMaxLength(
      /**
       * New value for property `maxLength`
       */
      iMaxLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getRows rows}.
     *
     * Defines the number of visible text lines for the control. **Note:** The `height` property wins over the
     * `rows` property, if both are set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `2`.
     */
    setRows(
      /**
       * New value for property `rows`
       */
      iRows?: int
    ): this;
    /**
     * @SINCE 1.48
     *
     * Sets a new value for property {@link #getShowExceededText showExceededText}.
     *
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false` the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true` the characters exceeding the `maxLength` value are selected on paste and the
     * counter below the input field displays their number.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShowExceededText(
      /**
       * New value for property `showExceededText`
       */
      bShowExceededText?: boolean
    ): this;
    /**
     * @SINCE 1.30
     *
     * Sets a new value for property {@link #getValueLiveUpdate valueLiveUpdate}.
     *
     * Indicates when the `value` property gets updated with the user changes. Setting it to `true` updates
     * the `value` property whenever the user has modified the text shown on the text area.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setValueLiveUpdate(
      /**
       * New value for property `valueLiveUpdate`
       */
      bValueLiveUpdate?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Indicates how the control wraps the text, e.g. `Soft`, `Hard`, `Off`.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `None`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      sWrapping?: Wrapping | keyof typeof Wrapping
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.m.TextArea`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TextArea` itself.
     *
     * Is fired whenever the user has modified the text shown on the text area.
     */
    attachLiveChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TextArea` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TextAreaSettings extends $InputBaseSettings {
    /**
     * Defines the number of visible text lines for the control. **Note:** The `height` property wins over the
     * `rows` property, if both are set.
     */
    rows?: int | PropertyBindingInfo;

    /**
     * Defines the visible width of the control, in average character widths. **Note:** The `width` property
     * wins over the `cols` property, if both are set.
     */
    cols?: int | PropertyBindingInfo;

    /**
     * Defines the height of the control.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the maximum number of characters that the `value` can be.
     */
    maxLength?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.48
     *
     * Determines whether the characters, exceeding the maximum allowed character count, are visible in the
     * input field.
     *
     * If set to `false` the user is not allowed to enter more characters than what is set in the `maxLength`
     * property. If set to `true` the characters exceeding the `maxLength` value are selected on paste and the
     * counter below the input field displays their number.
     */
    showExceededText?: boolean | PropertyBindingInfo;

    /**
     * Indicates how the control wraps the text, e.g. `Soft`, `Hard`, `Off`.
     */
    wrapping?: (Wrapping | keyof typeof Wrapping) | PropertyBindingInfo;

    /**
     * @SINCE 1.30
     *
     * Indicates when the `value` property gets updated with the user changes. Setting it to `true` updates
     * the `value` property whenever the user has modified the text shown on the text area.
     */
    valueLiveUpdate?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Indicates the ability of the control to automatically grow and shrink dynamically with its content. **Note:**
     * The `height` property is ignored, if this property set to `true`.
     */
    growing?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.38.0
     *
     * Defines the maximum number of lines that the control can grow.
     */
    growingMaxLines?: int | PropertyBindingInfo;

    /**
     * Is fired whenever the user has modified the text shown on the text area.
     */
    liveChange?: Function;
  }
}

declare module "sap/m/Tile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   * @deprecated (since 1.50) - replaced by {@link sap.m.GenericTile}
   *
   * A tile to be displayed in the tile container. Use this tile as the base class for specialized tile implementations.
   * Use the renderer _addOuterClass methods to add a style class to the main surface of the Tile. In this
   * class set the background color, gradients or background images. Instead of implementing the default render
   * method in the renderer, implement your content HTML in the _renderContent method of the specialized tile.
   */
  export default class Tile extends Control {
    /**
     * Constructor for a new Tile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileSettings
    );
    /**
     * Constructor for a new Tile.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Tile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tile` itself.
     *
     * Tap event is raised if the user taps or clicks the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tile` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Tile`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Tile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns a metadata object for class sap.m.Tile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRemovable removable}.
     *
     * Determines whether the tile is movable within the surrounding tile container. The remove event is fired
     * by the tile container.
     *
     * Default value is `true`.
     */
    getRemovable(): boolean;
    /**
     * Sets a new value for property {@link #getRemovable removable}.
     *
     * Determines whether the tile is movable within the surrounding tile container. The remove event is fired
     * by the tile container.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setRemovable(
      /**
       * New value for property `removable`
       */
      bRemovable?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Tile`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tile` itself.
     *
     * Tap event is raised if the user taps or clicks the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tile` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TileSettings extends $ControlSettings {
    /**
     * Determines whether the tile is movable within the surrounding tile container. The remove event is fired
     * by the tile container.
     */
    removable?: boolean | PropertyBindingInfo;

    /**
     * Tap event is raised if the user taps or clicks the control.
     */
    press?: Function;
  }
}

declare module "sap/m/TileContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Tile from "sap/m/Tile";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.12
   * @deprecated (since 1.50) - replaced by a container of your choice with {@link sap.m.GenericTile} instances
   *
   * A container that arranges same-size tiles nicely on carousel pages.
   */
  export default class TileContainer extends Control {
    /**
     * Constructor for a new TileContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileContainerSettings
    );
    /**
     * Constructor for a new TileContainer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TileContainerSettings
    );

    /**
     * Adds a Tile to the end of the tiles collection.
     */
    addTile(
      /**
       * The tile to add
       */
      oTile: Tile
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileAdd tileAdd} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires when a Tile is added.
     */
    attachTileAdd(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileDelete tileDelete} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires if a Tile is deleted in Edit mode.
     */
    attachTileDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileMove tileMove} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires if a Tile is moved.
     */
    attachTileMove(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Deletes a Tile.
     */
    deleteTile(
      /**
       * The tile to move
       */
      oTile: Tile
    ): this;
    /**
     * Destroys all the tiles in the aggregation {@link #getTiles tiles}.
     */
    destroyTiles(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tileAdd tileAdd} event of this `sap.m.TileContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTileAdd(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tileDelete tileDelete} event of this `sap.m.TileContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTileDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:tileMove tileMove} event of this `sap.m.TileContainer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTileMove(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TileContainer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TileContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:tileAdd tileAdd} to attached listeners.
     */
    fireTileAdd(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:tileDelete tileDelete} to attached listeners.
     */
    fireTileDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The deleted Tile.
         */
        tile?: Tile;
      }
    ): this;
    /**
     * Fires event {@link #event:tileMove tileMove} to attached listeners.
     */
    fireTileMove(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The Tile that has been moved.
         */
        tile?: Tile;
        /**
         * The new index of the Tile in the tiles aggregation.
         */
        newIndex?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getAllowAdd allowAdd}.
     *
     * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
     */
    getAllowAdd(): boolean;
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * Determines whether the TileContainer is editable so you can move, delete or add tiles.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the TileContainer in px.
     *
     * Default value is `'100%'`.
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.TileContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns the index of the first Tile visible in the current page.
     */
    getPageFirstTileIndex(): int;
    /**
     * Gets content of aggregation {@link #getTiles tiles}.
     *
     * The Tiles to be displayed by the TileContainer.
     */
    getTiles(): Tile[];
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the TileContainer in px.
     *
     * Default value is `'100%'`.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.Tile` in the aggregation {@link #getTiles tiles}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfTile(
      /**
       * The tile whose index is looked for
       */
      oTile: Tile
    ): int;
    /**
     * Inserts a Tile to the given index.
     */
    insertTile(
      /**
       * The Tile to insert
       */
      oTile: Tile,
      /**
       * The new Tile position in the tiles aggregation
       */
      iIndex: int
    ): this;
    /**
     * Moves a given Tile to the given index.
     */
    moveTile(
      /**
       * The tile to move
       */
      vTile: Tile,
      /**
       * The new Tile position in the tiles aggregation
       */
      iNewIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getTiles tiles}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTiles(): Tile[];
    /**
     * Removes a tile from the aggregation {@link #getTiles tiles}.
     */
    removeTile(
      /**
       * The tile to remove or its index or id
       */
      vTile: int | string | Tile
    ): Tile;
    /**
     * Scrolls to the page where the given Tile or tile index is included. Optionally this can be done animated
     * or not. With IE9 the scroll is never animated.
     */
    scrollIntoView(
      /**
       * The Tile or tile index to be scrolled into view
       */
      vTile: Tile | int,
      /**
       * Whether the scroll should be animated
       */
      bAnimated: boolean,
      /**
       * optional list of visible tiles in order to avoid filtering them again.
       */
      aVisibleTiles?: Tile[]
    ): void;
    /**
     * Scrolls one page to the left.
     */
    scrollLeft(): void;
    /**
     * Scrolls one page to the right.
     */
    scrollRight(): void;
    /**
     * Sets a new value for property {@link #getAllowAdd allowAdd}.
     *
     * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAllowAdd(
      /**
       * New value for property `allowAdd`
       */
      bAllowAdd?: boolean
    ): this;
    /**
     * Sets the editable property to the TileContainer, allowing to move icons. This is currently also set with
     * a long tap.
     */
    setEditable(
      /**
       * Whether the container is in edit mode or not
       */
      bValue: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the TileContainer in px.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the TileContainer in px.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `'100%'`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileAdd tileAdd} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires when a Tile is added.
     */
    attachTileAdd(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileDelete tileDelete} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires if a Tile is deleted in Edit mode.
     */
    attachTileDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:tileMove tileMove} event of this `sap.m.TileContainer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TileContainer` itself.
     *
     * Fires if a Tile is moved.
     */
    attachTileMove(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TileContainer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TileContainerSettings extends $ControlSettings {
    /**
     * Defines the width of the TileContainer in px.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the height of the TileContainer in px.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Determines whether the TileContainer is editable so you can move, delete or add tiles.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
     */
    allowAdd?: boolean | PropertyBindingInfo;

    /**
     * The Tiles to be displayed by the TileContainer.
     */
    tiles?: Tile[] | Tile | AggregationBindingInfo;

    /**
     * Fires if a Tile is moved.
     */
    tileMove?: Function;

    /**
     * Fires if a Tile is deleted in Edit mode.
     */
    tileDelete?: Function;

    /**
     * Fires when a Tile is added.
     */
    tileAdd?: Function;
  }
}

declare module "sap/m/TileContent" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { ValueColor, FrameType, Size } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.34.0
   *
   * This control is used within the GenericTile control.
   */
  export default class TileContent extends Control {
    /**
     * Constructor for a new sap.m.TileContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $TileContentSettings
    );
    /**
     * Constructor for a new sap.m.TileContent control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $TileContentSettings
    );

    /**
     * Binds aggregation {@link #getContent content} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindContent(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.TileContent with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TileContent>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The switchable view that depends on the tile type.
     */
    getContent(): Control;
    /**
     * Gets current value of property {@link #getDisabled disabled}.
     *
     * Disables control if true.
     *
     * Default value is `false`.
     */
    getDisabled(): boolean;
    /**
     * Gets current value of property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     */
    getFooter(): string;
    /**
     * @SINCE 1.44
     *
     * Gets current value of property {@link #getFooterColor footerColor}.
     *
     * The semantic color of the footer.
     *
     * Default value is `"Neutral"`.
     */
    getFooterColor(): ValueColor | keyof typeof ValueColor;
    /**
     * Gets current value of property {@link #getFrameType frameType}.
     *
     * Frame types: 1x1, 2x1, and auto.
     *
     * Default value is `"Auto"`.
     */
    getFrameType(): FrameType | keyof typeof FrameType;
    /**
     * Returns a metadata object for class sap.m.TileContent.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.38.0) - The TileContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Gets current value of property {@link #getSize size}.
     *
     * Updates the size of the tile. If it is not set, then the default size is applied based on the device
     * tile.
     *
     * Default value is `"Auto"`.
     */
    getSize(): Size | keyof typeof Size;
    /**
     * Gets current value of property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     */
    getUnit(): string;
    /**
     * Sets the aggregated {@link #getContent content}.
     */
    setContent(
      /**
       * The content to set
       */
      oContent: Control
    ): this;
    /**
     * Sets a new value for property {@link #getDisabled disabled}.
     *
     * Disables control if true.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDisabled(
      /**
       * New value for property `disabled`
       */
      bDisabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFooter footer}.
     *
     * The footer text of the tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFooter(
      /**
       * New value for property `footer`
       */
      sFooter?: string
    ): this;
    /**
     * @SINCE 1.44
     *
     * Sets a new value for property {@link #getFooterColor footerColor}.
     *
     * The semantic color of the footer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Neutral"`.
     */
    setFooterColor(
      /**
       * New value for property `footerColor`
       */
      sFooterColor?: ValueColor | keyof typeof ValueColor
    ): this;
    /**
     * Sets a new value for property {@link #getFrameType frameType}.
     *
     * Frame types: 1x1, 2x1, and auto.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     */
    setFrameType(
      /**
       * New value for property `frameType`
       */
      sFrameType?: FrameType | keyof typeof FrameType
    ): this;
    /**
     * Setter for protected property to enable or disable content rendering. This function does not invalidate
     * the control.
     */
    setRenderContent(
      /**
       * Determines whether the control's content is rendered or not
       */
      value: boolean
    ): this;
    /**
     * Setter for protected property to enable or disable footer rendering. This function does not invalidate
     * the control.
     */
    setRenderFooter(
      /**
       * Determines whether the control's footer is rendered or not
       */
      value: boolean
    ): this;
    /**
     * @deprecated (since 1.38.0) - The TileContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Sets a new value for property {@link #getSize size}.
     *
     * Updates the size of the tile. If it is not set, then the default size is applied based on the device
     * tile.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Auto"`.
     */
    setSize(
      /**
       * New value for property `size`
       */
      sSize?: Size | keyof typeof Size
    ): this;
    /**
     * Sets a new value for property {@link #getUnit unit}.
     *
     * The percent sign, the currency symbol, or the unit of measure.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUnit(
      /**
       * New value for property `unit`
       */
      sUnit?: string
    ): this;
    /**
     * Unbinds aggregation {@link #getContent content} from model data.
     */
    unbindContent(): this;
  }

  export interface $TileContentSettings extends $ControlSettings {
    /**
     * The footer text of the tile.
     */
    footer?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.44
     *
     * The semantic color of the footer.
     */
    footerColor?: (ValueColor | keyof typeof ValueColor) | PropertyBindingInfo;

    /**
     * @deprecated (since 1.38.0) - The TileContent control has now a fixed size, depending on the used media
     * (desktop, tablet or phone).
     *
     * Updates the size of the tile. If it is not set, then the default size is applied based on the device
     * tile.
     */
    size?: (Size | keyof typeof Size) | PropertyBindingInfo;

    /**
     * The percent sign, the currency symbol, or the unit of measure.
     */
    unit?: string | PropertyBindingInfo;

    /**
     * Disables control if true.
     */
    disabled?: boolean | PropertyBindingInfo;

    /**
     * Frame types: 1x1, 2x1, and auto.
     */
    frameType?: (FrameType | keyof typeof FrameType) | PropertyBindingInfo;

    /**
     * The switchable view that depends on the tile type.
     */
    content?: Control;
  }
}

declare module "sap/m/TimePicker" {
  import {
    default as DateTimeField,
    $DateTimeFieldSettings,
  } from "sap/m/DateTimeField";

  import MaskInputRule from "sap/m/MaskInputRule";

  import { TimePickerMaskMode } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import TooltipBase from "sap/ui/core/TooltipBase";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.32
   *
   * A single-field input control that enables the users to fill time related input fields.
   *
   * Overview:
   *
   * The `TimePicker` control enables the users to fill time related input fields using touch, mouse, or keyboard
   * input.
   *
   * Usage:
   *
   * Use this control if you want the user to select a time. If you want the user to select a duration (1
   * hour), use the {@link sap.m.Select} control instead.
   *
   * The user can fill time by:
   *
   *
   * 	 - Using the time picker button that opens a popover with а time picker clock dial
   * 	 - Using the time input field. On desktop - by changing the time directly via keyboard input. On mobile/touch
   * 			device - in another input field that opens in a popup after tap.
   *
   * On app level, there are two options to provide value for the `TimePicker` - as a string to the `value`
   * property or as a JavaScript Date object to the `dateValue` property (only one of these properties should
   * be used at a time):
   *
   *
   * 	 - Use the `value` property if you want to bind the `TimePicker` to a model using the `sap.ui.model.type.Time`
   *
   * 	 - Use the `value` property if the date is provided as a string from the backend or inside the app (for
   * 			example, as ABAP type DATS field)
   * 	 - Use the `dateValue` property if the date is already provided as a JavaScript Date object or you want
   * 			to work with a JavaScript Date object. Use `dateValue` as a helper property to easily obtain the hours,
   * 			minutes and seconds of the chosen time. Although possible to bind it, the recommendation is to not to
   * 			do it. When binding is needed, use `value` property instead
   *
   * Formatting:
   *
   * All formatting and parsing of values from and to strings is done using the {@link sap.ui.core.format.DateFormat}.
   * If a value is entered by typing it into the input field, it must fit to the used time format and locale.
   *
   * Supported format options are pattern-based on Unicode LDML Date Format notation. See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
   *
   * A time format must be specified, otherwise the default "HH:mm:ss a" will be used. For example, if the
   * `valueFormat` is "HH-mm-ss a", the `displayFormat` is "HH:mm:ss a", and the used locale is English, a
   * valid value string is "10-30-15 AM", which leads to an output of "10:30:15 AM".
   *
   * If no placeholder is set to the `TimePicker`, the used `displayFormat` is displayed as a placeholder.
   * If another placeholder is needed, it must be set.
   *
   * **Note:** If the string does NOT match the `displayFormat` (from user input) or the `valueFormat` (on
   * app level), the {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the locale
   * settings. For more information, see the respective documentation in the API Reference.
   *
   * Responsive behavior:
   *
   * The `TimePicker` is responsive and fully adapts to all device types. For larger screens, such as tablet
   * or desktop, it opens as a popover. For mobile devices, it opens in full screen.
   */
  export default class TimePicker extends DateTimeField {
    /**
     * Constructor for a new `TimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/time-picker/ Time Picker}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSettings
    );
    /**
     * Constructor for a new `TimePicker`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/time-picker/ Time Picker}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSettings
    );

    /**
     * Adds some rule to the aggregation {@link #getRules rules}.
     */
    addRule(
      /**
       * The rule to add; if empty, nothing is inserted
       */
      oRule: MaskInputRule
    ): this;
    /**
     * Destroys all the rules in the aggregation {@link #getRules rules}.
     */
    destroyRules(): this;
    /**
     * Creates a new subclass of class sap.m.TimePicker with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.DateTimeField.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimePicker>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires change event to attached listeners.
     *
     * Expects following event parameters:
     * 	 - value parameter of type `string` - the new value of the input
     * 	 - valid parameter of type `boolean` - indicator for a valid time
     */
    fireChange(
      /**
       * The arguments to pass along with the event
       */
      mArguments?: object
    ): this;
    /**
     * Fires the change event for the listeners.
     */
    fireChangeEvent(
      /**
       * value of the input.
       */
      sValue: String,
      /**
       * extra event parameters.
       */
      oParams?: Object
    ): void;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Holds a reference to a JavaScript Date Object. The `value` (string) property will be set according to
     * it. Alternatively, if the `value` and `valueFormat` pair properties are supplied instead, the `dateValue`
     * will be instantiated according to the parsed `value`.
     */
    getDateValue(): object;
    /**
     * Determines the format, displayed in the input field and the picker clocks/numeric inputs.
     *
     * The default value is the browser's medium time format locale setting {@link sap.ui.core.LocaleData#getTimePattern}.
     * If data binding with type {@link sap.ui.model.type.Time} or {@link sap.ui.model.odata.type.Time} is used
     * for the `value` property, the `displayFormat` property is ignored as the information is provided from
     * the binding itself.
     */
    getDisplayFormat(): string;
    /**
     * Gets current value of property {@link #getLocaleId localeId}.
     *
     * Defines the locale used to parse string values representing time.
     *
     * Determines the locale, used to interpret the string, supplied by the `value` property.
     *
     * Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser
     * language settings if not set explicitly. Used in combination with 12 hour `displayFormat` containing
     * 'a', which stands for day period string.
     */
    getLocaleId(): string;
    /**
     * Gets current value of property {@link #getMask mask}.
     *
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     */
    getMask(): string;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getMaskMode maskMode}.
     *
     * Defines whether the mask is enabled. When disabled, there are no restrictions and validation for the
     * user and no placeholders are displayed.
     *
     * **Note:** A disabled mask does not reset any validation rules that are already set. You can update the
     * `mask` property and add new `rules` while it is disabled. When `maskMode` is set to `On` again, the `rules`
     * and the updated `mask` will be applied.
     *
     * Default value is `On`.
     */
    getMaskMode(): TimePickerMaskMode | keyof typeof TimePickerMaskMode;
    /**
     * Returns a metadata object for class sap.m.TimePicker.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getMinutesStep minutesStep}.
     *
     * Sets the minutes step. If step is less than 1, it will be automatically converted back to 1. The minutes
     * clock is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getMinutesStep(): int;
    /**
     * Gets current value of property {@link #getPlaceholderSymbol placeholderSymbol}.
     *
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     *
     * Default value is `"_"`.
     */
    getPlaceholderSymbol(): string;
    /**
     * Gets content of aggregation {@link #getRules rules}.
     *
     * A list of validation rules (one rule per mask character).
     */
    getRules(): MaskInputRule[];
    /**
     * @SINCE 1.40
     *
     * Gets current value of property {@link #getSecondsStep secondsStep}.
     *
     * Sets the seconds step. If step is less than 1, it will be automatically converted back to 1. The seconds
     * clock is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getSecondsStep(): int;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getSupport2400 support2400}.
     *
     * Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats.
     * Don't use it together with am/pm.
     *
     * Default value is `false`.
     */
    getSupport2400(): boolean;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Displays the text of the general picker label and is read by screen readers. It is visible only on phone.
     */
    getTitle(): string;
    /**
     * Determines the format of the value property.
     *
     * The default value is the browser's medium time format locale setting {@link sap.ui.core.LocaleData#getTimePattern}.
     * If data binding with type {@link sap.ui.model.type.Time} or {@link sap.ui.model.odata.type.Time} is used
     * for the `value` property, the `valueFormat` property is ignored as the information is provided from the
     * binding itself.
     */
    getValueFormat(): string;
    /**
     * Checks for the provided `sap.m.MaskInputRule` in the aggregation {@link #getRules rules}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfRule(
      /**
       * The rule whose index is looked for
       */
      oRule: MaskInputRule
    ): int;
    /**
     * Initializes the control.
     */
    init(): void;
    /**
     * Inserts a rule into the aggregation {@link #getRules rules}.
     */
    insertRule(
      /**
       * The rule to insert; if empty, nothing is inserted
       */
      oRule: MaskInputRule,
      /**
       * The `0`-based index the rule should be inserted at; for a negative value of `iIndex`, the rule is inserted
       * at position 0; for a value greater than the current size of the aggregation, the rule is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Called after the clock picker closes.
     */
    onAfterClose(): void;
    /**
     * Called after the clock picker appears.
     */
    onAfterOpen(): void;
    /**
     * Called before the clock picker closes.
     */
    onBeforeClose(): void;
    /**
     * Called before the clock picker appears.
     */
    onBeforeOpen(): void;
    /**
     * Removes all the controls from the aggregation {@link #getRules rules}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllRules(): MaskInputRule[];
    /**
     * Removes a rule from the aggregation {@link #getRules rules}.
     */
    removeRule(
      /**
       * The rule to remove or its index or id
       */
      vRule: int | string | MaskInputRule
    ): MaskInputRule;
    /**
     * Sets the value of the date.
     */
    setDateValue(
      /**
       * date object
       */
      oDate: object
    ): this;
    /**
     * Sets the display format.
     */
    setDisplayFormat(
      /**
       * display format to set
       */
      sDisplayFormat: string
    ): this;
    /**
     * Sets the locale of the control.
     *
     * Used for parsing and formatting the time values in languages different than English. Necessary for translation
     * and auto-complete of the day periods, such as AM and PM.
     */
    setLocaleId(
      /**
       * A locale identifier like 'en_US'
       */
      sLocaleId: string
    ): this;
    /**
     * Sets a new value for property {@link #getMask mask}.
     *
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMask(
      /**
       * New value for property `mask`
       */
      sMask?: string
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getMaskMode maskMode}.
     *
     * Defines whether the mask is enabled. When disabled, there are no restrictions and validation for the
     * user and no placeholders are displayed.
     *
     * **Note:** A disabled mask does not reset any validation rules that are already set. You can update the
     * `mask` property and add new `rules` while it is disabled. When `maskMode` is set to `On` again, the `rules`
     * and the updated `mask` will be applied.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `On`.
     */
    setMaskMode(
      /**
       * New value for property `maskMode`
       */
      sMaskMode?: TimePickerMaskMode | keyof typeof TimePickerMaskMode
    ): this;
    /**
     * Sets the minutes step of clocks and inputs.
     */
    setMinutesStep(
      /**
       * The step used to generate values for the minutes clock/input
       */
      step: int
    ): any;
    /**
     * Sets a new value for property {@link #getPlaceholderSymbol placeholderSymbol}.
     *
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"_"`.
     */
    setPlaceholderSymbol(
      /**
       * New value for property `placeholderSymbol`
       */
      sPlaceholderSymbol?: string
    ): this;
    /**
     * Sets the seconds step of clocks and inputs.
     */
    setSecondsStep(
      /**
       * The step used to generate values for the seconds clock/input
       */
      step: int
    ): this;
    /**
     * Sets `support2400` of the control.
     *
     * Allows the control to use 24-hour format. Recommended usage is to not use it with am/pm format.
     */
    setSupport2400(bSupport2400: boolean): this;
    /**
     * Sets tooltip of the control.
     */
    setTooltip(vTooltip: string | TooltipBase): this;
  }

  export interface $TimePickerSettings extends $DateTimeFieldSettings {
    /**
     * Defines the locale used to parse string values representing time.
     *
     * Determines the locale, used to interpret the string, supplied by the `value` property.
     *
     * Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser
     * language settings if not set explicitly. Used in combination with 12 hour `displayFormat` containing
     * 'a', which stands for day period string.
     */
    localeId?: string | PropertyBindingInfo;

    /**
     * Displays the text of the general picker label and is read by screen readers. It is visible only on phone.
     */
    title?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Sets the minutes step. If step is less than 1, it will be automatically converted back to 1. The minutes
     * clock is populated only by multiples of the step.
     */
    minutesStep?: int | PropertyBindingInfo;

    /**
     * @SINCE 1.40
     *
     * Sets the seconds step. If step is less than 1, it will be automatically converted back to 1. The seconds
     * clock is populated only by multiples of the step.
     */
    secondsStep?: int | PropertyBindingInfo;

    /**
     * Defines a placeholder symbol. Shown at the position where there is no user input yet.
     */
    placeholderSymbol?: string | PropertyBindingInfo;

    /**
     * Mask defined by its characters type (respectively, by its length). You should consider the following
     * important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique
     * char). Characters which don't, are considered immutable characters (for example, the mask '2099', where
     * '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule
     * corresponding to the `placeholderSymbol` is not recommended and would lead to an unpredictable behavior.
     * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it
     * immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable
     * one.
     */
    mask?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines whether the mask is enabled. When disabled, there are no restrictions and validation for the
     * user and no placeholders are displayed.
     *
     * **Note:** A disabled mask does not reset any validation rules that are already set. You can update the
     * `mask` property and add new `rules` while it is disabled. When `maskMode` is set to `On` again, the `rules`
     * and the updated `mask` will be applied.
     */
    maskMode?:
      | (TimePickerMaskMode | keyof typeof TimePickerMaskMode)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats.
     * Don't use it together with am/pm.
     */
    support2400?: boolean | PropertyBindingInfo;

    /**
     * A list of validation rules (one rule per mask character).
     */
    rules?: MaskInputRule[] | MaskInputRule | AggregationBindingInfo;
  }
}

declare module "sap/m/TimePickerClocks" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.90
   *
   * A picker clocks container control used inside the {@link sap.m.TimePicker}.
   */
  export default class TimePickerClocks extends Control {
    /**
     * Constructor for a new `TimePickerClocks`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerClocksSettings
    );
    /**
     * Constructor for a new `TimePickerClocks`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerClocksSettings
    );

    /**
     * Creates a new subclass of class sap.m.TimePickerClocks with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimePickerClocks>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.TimePickerClocks.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the time values from the clocks, as a date object.
     */
    getTimeValues(): Object;
    /**
     * Initializes the control.
     */
    init(): void;
    /**
     * Sets the value of the `TimePickerClocks` container.
     */
    setValue(
      /**
       * The value of the `TimePickerClocks`
       */
      sValue: string
    ): this;
    /**
     * Opens first clock.
     */
    showFirstClock(): this;
  }

  export interface $TimePickerClocksSettings extends $ControlSettings {}
}

declare module "sap/m/TimePickerInputs" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.90
   *
   * A picker Inputs container control used inside the {@link sap.m.TimePicker}.
   */
  export default class TimePickerInputs extends Control {
    /**
     * Constructor for a new `TimePickerInputs`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerInputsSettings
    );
    /**
     * Constructor for a new `TimePickerInputs`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerInputsSettings
    );

    /**
     * Creates a new subclass of class sap.m.TimePickerInputs with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimePickerInputs>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.TimePickerInputs.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets the time values from the clocks, as a date object.
     */
    getTimeValues(): Object;
    /**
     * Sets the value of the `TimePickerInputs` container.
     */
    setValue(
      /**
       * The value of the `TimePickerInputs`
       */
      sValue: string
    ): this;
  }

  export interface $TimePickerInputsSettings extends $ControlSettings {}
}

declare module "sap/m/TimePickerSliders" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.54
   *
   * A picker list container control used inside the {@link sap.m.TimePicker} or standalone to hold all the
   * sliders.
   */
  export default class TimePickerSliders extends Control {
    /**
     * Constructor for a new `TimePickerSliders`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSlidersSettings
    );
    /**
     * Constructor for a new `TimePickerSliders`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TimePickerSlidersSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.TimePickerSliders`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TimePickerSliders` itself.
     *
     * Fired when the value is changed.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TimePickerSliders` itself
       */
      oListener?: object
    ): this;
    /**
     * Collapses all the slider controls.
     */
    collapseAll(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.TimePickerSliders`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.TimePickerSliders with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TimePickerSliders>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new `value` of the control.
         */
        value?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDisplayFormat displayFormat}.
     *
     * Defines the time `displayFormat` of the sliders. The `displayFormat` comes from the browser language
     * settings if not set explicitly.
     */
    getDisplayFormat(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Sets the height of the container. If percentage value is used the parent container should have specified
     * height
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getLabelText labelText}.
     *
     * Defines the text of the picker label.
     *
     * It is read by screen readers. It is visible only on phone.
     */
    getLabelText(): string;
    /**
     * Gets current value of property {@link #getLocaleId localeId}.
     *
     * Defines the locale used to parse string values representing time.
     *
     * Determines the locale, used to interpret the string, supplied by the `value` property.
     *
     * Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser
     * language settings if not set explicitly. Used in combination with 12 hour `displayFormat` containing
     * 'a', which stands for day period string.
     */
    getLocaleId(): string;
    /**
     * Returns a metadata object for class sap.m.TimePickerSliders.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMinutesStep minutesStep}.
     *
     * Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1. The
     * minutes slider is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getMinutesStep(): int;
    /**
     * Gets current value of property {@link #getSecondsStep secondsStep}.
     *
     * Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1. The
     * seconds slider is populated only by multiples of the step.
     *
     * Default value is `1`.
     */
    getSecondsStep(): int;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getSupport2400 support2400}.
     *
     * Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats.
     * Don't use it together with am/pm.
     *
     * Default value is `false`.
     */
    getSupport2400(): boolean;
    /**
     * Gets the time values from the sliders, as a date object.
     */
    getTimeValues(): Object;
    /**
     * Gets current value of property {@link #getValue value}.
     *
     * Defines the value of the control.
     */
    getValue(): string;
    /**
     * Gets current value of property {@link #getValueFormat valueFormat}.
     *
     * Determines the format of the `value` property.
     */
    getValueFormat(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the container. The minimum width is 320px.
     */
    getWidth(): CSSSize;
    /**
     * Opens first slider.
     */
    openFirstSlider(): this;
    /**
     * Sets the time `displayFormat`.
     */
    setDisplayFormat(
      /**
       * New display format
       */
      sFormat: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Sets the height of the container. If percentage value is used the parent container should have specified
     * height
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLabelText labelText}.
     *
     * Defines the text of the picker label.
     *
     * It is read by screen readers. It is visible only on phone.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabelText(
      /**
       * New value for property `labelText`
       */
      sLabelText: string
    ): this;
    /**
     * Sets the `localeId` property.
     */
    setLocaleId(
      /**
       * The ID of the Locale
       */
      sLocaleId: string
    ): this;
    /**
     * Sets the minutes slider step.
     */
    setMinutesStep(
      /**
       * The step used to generate values for the minutes slider
       */
      value: int
    ): this;
    /**
     * Sets the seconds slider step.
     */
    setSecondsStep(
      /**
       * The step used to generate values for the seconds slider
       */
      value: int
    ): this;
    /**
     * Sets `support2400`.
     */
    setSupport2400(bSupport2400: boolean): this;
    /**
     * Sets the value of the `TimepickerSliders` container.
     */
    setValue(
      /**
       * The value of the `TimepickerSliders`
       */
      sValue: string
    ): this;
    /**
     * Sets a new value for property {@link #getValueFormat valueFormat}.
     *
     * Determines the format of the `value` property.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValueFormat(
      /**
       * New value for property `valueFormat`
       */
      sValueFormat?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the container. The minimum width is 320px.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.TimePickerSliders`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.TimePickerSliders` itself.
     *
     * Fired when the value is changed.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.TimePickerSliders` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TimePickerSlidersSettings extends $ControlSettings {
    /**
     * Defines the locale used to parse string values representing time.
     *
     * Determines the locale, used to interpret the string, supplied by the `value` property.
     *
     * Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser
     * language settings if not set explicitly. Used in combination with 12 hour `displayFormat` containing
     * 'a', which stands for day period string.
     */
    localeId?: string | PropertyBindingInfo;

    /**
     * Defines the time `displayFormat` of the sliders. The `displayFormat` comes from the browser language
     * settings if not set explicitly.
     */
    displayFormat?: string | PropertyBindingInfo;

    /**
     * Defines the text of the picker label.
     *
     * It is read by screen readers. It is visible only on phone.
     */
    labelText?: string | PropertyBindingInfo;

    /**
     * Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1. The
     * minutes slider is populated only by multiples of the step.
     */
    minutesStep?: int | PropertyBindingInfo;

    /**
     * Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1. The
     * seconds slider is populated only by multiples of the step.
     */
    secondsStep?: int | PropertyBindingInfo;

    /**
     * Sets the width of the container. The minimum width is 320px.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Sets the height of the container. If percentage value is used the parent container should have specified
     * height
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the value of the control.
     */
    value?: string | PropertyBindingInfo;

    /**
     * Determines the format of the `value` property.
     */
    valueFormat?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats.
     * Don't use it together with am/pm.
     */
    support2400?: boolean | PropertyBindingInfo;

    /**
     * Fired when the value is changed.
     */
    change?: Function;
  }
}

declare module "sap/m/Title" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import {
    IShrinkable,
    ITitleContent,
    TitleLevel,
    TextAlign,
    TextDirection,
    ID,
    CSSSize,
  } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { WrappingType } from "sap/m/library";

  import Title1 from "sap/ui/core/Title";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.27.0
   *
   * A simple, large-sized text with explicit header / title semantics.
   *
   * Overview: The `Title` control is a simple, large-sized text containing additional semantic information
   * for accessibility purposes.
   *
   * As of version 1.52, you can truncate or wrap long titles if the screen is narrower than the full title
   * by using the with the use of the `wrapping` property.
   *
   * As of version 1.60, you can hyphenate the label's text with the use of the `wrappingType` property. For
   * more information, see {@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.
   *
   * As of version 1.87, you can set the `content` aggregation to use `sap.m.Link` or any control that implements
   * `sap.ui.core.ITitleContent` interface. This control will be rendered instead of the text placed in `text`
   * property. In this case the following properties of `sap.m.Title` control are overridden: `text`, `textAlign`,
   * `textDirection`, or not used: `wrapping`, `wrappingType`. The `title` association will be ignored too.
   *
   * If the `title` association is used, `text`, `level` and `tooltip` properties will override the corresponding
   * properties of the `sap.m.Title` control.
   *
   * Usage: When to use:
   * 	 - If you want to set the title above a table or form.
   * 	 - If you want to show text in the page header.  When not to use:
   * 	 - If the text is inside a text block.
   * 	 - If The text is inside a form element.
   */
  export default class Title extends Control implements IShrinkable {
    __implements__sap_ui_core_IShrinkable: boolean;
    /**
     * Constructor for a new Title control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/title/ Title}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TitleSettings
    );
    /**
     * Constructor for a new Title control.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/title/ Title}
     */
    constructor(
      /**
       * Id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TitleSettings
    );

    /**
     * @SINCE 1.87
     *
     * Destroys the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.Title with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Title>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets the accessibility information for the `sap.m.Title` control.
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): object;
    /**
     * @SINCE 1.87
     *
     * Gets content of aggregation {@link #getContent content}.
     *
     * Holds a control that implements `sap.ui.core.ITitleContent` and renders this control instead of simple
     * text
     *
     * **Note:** if a control is placed in this aggregation, the following properties of `sap.m.Title` will
     * be overridden - `text`, `textAlign`, `textDirection`; the following will be ignored - `wrapping`, `wrappingType`.
     * The `title` association will be ignored too.
     */
    getContent(): ITitleContent;
    /**
     * Gets current value of property {@link #getLevel level}.
     *
     * Defines the semantic level of the title. This information is e.g. used by assistive technologies like
     * screenreaders to create a hierarchical site map for faster navigation. Depending on this setting either
     * an HTML h1-h6 element is used or when using level `Auto` no explicit level information is written (HTML5
     * header element). This property does not influence the style of the control. Use the property `titleStyle`
     * for this purpose instead.
     *
     * **Note:** this property will be overridden if there is title element associated and it has `level` property
     * set.
     *
     * Default value is `Auto`.
     */
    getLevel(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Returns a metadata object for class sap.m.Title.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Defines the text that should be displayed as a title.
     *
     * **Note:** this property is not used if there is a control added to the `content` aggregation **Note:**
     * this property will be overridden if there is title element associated and it has `text` property set.
     */
    getText(): string;
    /**
     * Gets current value of property {@link #getTextAlign textAlign}.
     *
     * Defines the alignment of the text within the title. **Note:** This property only has an effect if the
     * overall width of the title control is larger than the displayed text.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     *
     * Default value is `Initial`.
     */
    getTextAlign(): TextAlign | keyof typeof TextAlign;
    /**
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * ID of the element which is the current target of the association {@link #getTitle title}, or `null`.
     */
    getTitle(): ID;
    /**
     * Gets current value of property {@link #getTitleStyle titleStyle}.
     *
     * Defines the style of the title. When using the `Auto` styling, the appearance of the title depends on
     * the current position of the title (e.g. inside a `Toolbar`). This default behavior can be overridden
     * by setting a different style explicitly. The actual appearance of the title and the different styles
     * always depends on the theme being used.
     *
     * Default value is `Auto`.
     */
    getTitleStyle(): TitleLevel | keyof typeof TitleLevel;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the title.
     */
    getWidth(): CSSSize;
    /**
     * @SINCE 1.52
     *
     * Gets current value of property {@link #getWrapping wrapping}.
     *
     * Enables text wrapping.
     *
     * **Note:** Wrapping must only be activated if the surrounding container allows flexible heights. **Note:**
     * this property will be ignored if there is a control added to the `content` aggregation
     *
     * Default value is `false`.
     */
    getWrapping(): boolean;
    /**
     * @SINCE 1.60
     *
     * Gets current value of property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`. **Note:** this
     * property will be ignored if there is a control added to the `content` aggregation
     *
     * Default value is `Normal`.
     */
    getWrappingType(): WrappingType | keyof typeof WrappingType;
    /**
     * @SINCE 1.87
     *
     * Sets the aggregated {@link #getContent content}.
     */
    setContent(
      /**
       * The content to set
       */
      oContent: ITitleContent
    ): this;
    /**
     * Sets a new value for property {@link #getLevel level}.
     *
     * Defines the semantic level of the title. This information is e.g. used by assistive technologies like
     * screenreaders to create a hierarchical site map for faster navigation. Depending on this setting either
     * an HTML h1-h6 element is used or when using level `Auto` no explicit level information is written (HTML5
     * header element). This property does not influence the style of the control. Use the property `titleStyle`
     * for this purpose instead.
     *
     * **Note:** this property will be overridden if there is title element associated and it has `level` property
     * set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setLevel(
      /**
       * New value for property `level`
       */
      sLevel?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Defines the text that should be displayed as a title.
     *
     * **Note:** this property is not used if there is a control added to the `content` aggregation **Note:**
     * this property will be overridden if there is title element associated and it has `text` property set.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getTextAlign textAlign}.
     *
     * Defines the alignment of the text within the title. **Note:** This property only has an effect if the
     * overall width of the title control is larger than the displayed text.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Initial`.
     */
    setTextAlign(
      /**
       * New value for property `textAlign`
       */
      sTextAlign?: TextAlign | keyof typeof TextAlign
    ): this;
    /**
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Sets the title for a `sap.m.Title` or `sap.ui.core.Title`
     */
    setTitle(
      /**
       * Given variant of the a title which can be `sap.m.Title` or `sap.ui.core.Title`.
       */
      vTitle: Title | Title1
    ): this;
    /**
     * Sets a new value for property {@link #getTitleStyle titleStyle}.
     *
     * Defines the style of the title. When using the `Auto` styling, the appearance of the title depends on
     * the current position of the title (e.g. inside a `Toolbar`). This default behavior can be overridden
     * by setting a different style explicitly. The actual appearance of the title and the different styles
     * always depends on the theme being used.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleStyle(
      /**
       * New value for property `titleStyle`
       */
      sTitleStyle?: TitleLevel | keyof typeof TitleLevel
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @SINCE 1.52
     *
     * Sets a new value for property {@link #getWrapping wrapping}.
     *
     * Enables text wrapping.
     *
     * **Note:** Wrapping must only be activated if the surrounding container allows flexible heights. **Note:**
     * this property will be ignored if there is a control added to the `content` aggregation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setWrapping(
      /**
       * New value for property `wrapping`
       */
      bWrapping?: boolean
    ): this;
    /**
     * @SINCE 1.60
     *
     * Sets a new value for property {@link #getWrappingType wrappingType}.
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`. **Note:** this
     * property will be ignored if there is a control added to the `content` aggregation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Normal`.
     */
    setWrappingType(
      /**
       * New value for property `wrappingType`
       */
      sWrappingType?: WrappingType | keyof typeof WrappingType
    ): this;
  }

  export interface $TitleSettings extends $ControlSettings {
    /**
     * Defines the text that should be displayed as a title.
     *
     * **Note:** this property is not used if there is a control added to the `content` aggregation **Note:**
     * this property will be overridden if there is title element associated and it has `text` property set.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Defines the semantic level of the title. This information is e.g. used by assistive technologies like
     * screenreaders to create a hierarchical site map for faster navigation. Depending on this setting either
     * an HTML h1-h6 element is used or when using level `Auto` no explicit level information is written (HTML5
     * header element). This property does not influence the style of the control. Use the property `titleStyle`
     * for this purpose instead.
     *
     * **Note:** this property will be overridden if there is title element associated and it has `level` property
     * set.
     */
    level?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * Defines the style of the title. When using the `Auto` styling, the appearance of the title depends on
     * the current position of the title (e.g. inside a `Toolbar`). This default behavior can be overridden
     * by setting a different style explicitly. The actual appearance of the title and the different styles
     * always depends on the theme being used.
     */
    titleStyle?: (TitleLevel | keyof typeof TitleLevel) | PropertyBindingInfo;

    /**
     * Defines the width of the title.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the alignment of the text within the title. **Note:** This property only has an effect if the
     * overall width of the title control is larger than the displayed text.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     */
    textAlign?: (TextAlign | keyof typeof TextAlign) | PropertyBindingInfo;

    /**
     * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction
     * from its parent container.
     *
     * **Note:** this property will be overridden if there is a control added to the `content` aggregation
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.52
     *
     * Enables text wrapping.
     *
     * **Note:** Wrapping must only be activated if the surrounding container allows flexible heights. **Note:**
     * this property will be ignored if there is a control added to the `content` aggregation
     */
    wrapping?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.60
     *
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * **Note:** This property takes effect only when the `wrapping` property is set to `true`. **Note:** this
     * property will be ignored if there is a control added to the `content` aggregation
     */
    wrappingType?:
      | (WrappingType | keyof typeof WrappingType)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.87
     *
     * Holds a control that implements `sap.ui.core.ITitleContent` and renders this control instead of simple
     * text
     *
     * **Note:** if a control is placed in this aggregation, the following properties of `sap.m.Title` will
     * be overridden - `text`, `textAlign`, `textDirection`; the following will be ignored - `wrapping`, `wrappingType`.
     * The `title` association will be ignored too.
     */
    content?: ITitleContent;

    /**
     * Defines a relationship to a generic title description.
     *
     * **Note:** if a control is placed in `content` aggregation, the title element associated will be ignored;
     * otherwise the properties `text`, `level` and tooltip (text only) of this element will override
     * the corresponding properties of the `Title` control.
     */
    title?: Title1 | string;
  }
}

declare module "sap/m/ToggleButton" {
  import { default as Button, $ButtonSettings } from "sap/m/Button";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * An enhanced {@link sap.m.Button} that can be toggled between pressed and normal state.
   *
   * Clicking or tapping a `ToggleButton` changes its state to `pressed`. The button returns to its initial
   * state when the user clicks or taps it again.
   */
  export default class ToggleButton extends Button {
    /**
     * Constructor for a new `ToggleButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Toggle Button}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToggleButtonSettings
    );
    /**
     * Constructor for a new `ToggleButton`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/button/ Toggle Button}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToggleButtonSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ToggleButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ToggleButton` itself.
     *
     * Fired when the user clicks or taps on the control.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ToggleButton` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.ToggleButton`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ToggleButton with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Button.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ToggleButton>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The current pressed state of the control.
         */
        pressed?: boolean;
      }
    ): this;
    /**
     * See:
     * 	sap.ui.core.Control#getAccessibilityInfo
     */
    getAccessibilityInfo(): Object;
    /**
     * Returns a metadata object for class sap.m.ToggleButton.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getPressed pressed}.
     *
     * The property is “true” when the control is toggled. The default state of this property is "false".
     *
     * Default value is `false`.
     */
    getPressed(): boolean;
    /**
     * Sets a new value for property {@link #getPressed pressed}.
     *
     * The property is “true” when the control is toggled. The default state of this property is "false".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setPressed(
      /**
       * New value for property `pressed`
       */
      bPressed?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.ToggleButton`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ToggleButton` itself.
     *
     * Fired when the user clicks or taps on the control.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ToggleButton` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ToggleButtonSettings extends $ButtonSettings {
    /**
     * The property is “true” when the control is toggled. The default state of this property is "false".
     */
    pressed?: boolean | PropertyBindingInfo;

    /**
     * Fired when the user clicks or taps on the control.
     */
    press?: Function;
  }
}

declare module "sap/m/Token" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, TextDirection } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Overview: Tokens are small items of information (similar to tags) that mainly serve to visualize previously
   * selected items. Tokens are manipulated by a {@link sap.m.Tokenizer Tokenizer}. Structure: The tokens
   * store single text items or sometimes key-value pairs, such as "John Miller (ID1234567)". Each token also
   * contains a delete icon, which is invisible if the token is in edit mode.
   *
   * Usage: When to use:: Tokens can only be used with the Tokenizer as a container.
   */
  export default class Token extends Control {
    /**
     * Constructor for a new Token.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/token/ Token}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenSettings
    );
    /**
     * Constructor for a new Token.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/token/ Token}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:delete delete} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired if the user clicks the token's delete icon.
     */
    attachDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselect deselect} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the token gets deselected.
     */
    attachDeselect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the user clicks on the token.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the token gets selected.
     */
    attachSelect(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:delete delete} event of this `sap.m.Token`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:deselect deselect} event of this `sap.m.Token`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDeselect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Token`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.m.Token`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelect(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Token with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Token>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:delete delete} to attached listeners.
     */
    fireDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:deselect deselect} to attached listeners.
     */
    fireDeselect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:select select} to attached listeners.
     */
    fireSelect(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * Indicates the editable status of the token. If it is set to `true`, token displays a delete icon.
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * Gets current value of property {@link #getKey key}.
     *
     * Key of the token.
     *
     * Default value is `empty string`.
     */
    getKey(): string;
    /**
     * Returns a metadata object for class sap.m.Token.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Indicates the current selection status of the token.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Gets current value of property {@link #getText text}.
     *
     * Displayed text of the token.
     *
     * Default value is `empty string`.
     */
    getText(): string;
    /**
     * @SINCE 1.28.0
     *
     * Gets current value of property {@link #getTextDirection textDirection}.
     *
     * This property specifies the text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * Default value is `Inherit`.
     */
    getTextDirection(): TextDirection | keyof typeof TextDirection;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Sets a new value for property {@link #getEditable editable}.
     *
     * Indicates the editable status of the token. If it is set to `true`, token displays a delete icon.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getKey key}.
     *
     * Key of the token.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Indicates the current selection status of the token.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getText text}.
     *
     * Displayed text of the token.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setText(
      /**
       * New value for property `text`
       */
      sText?: string
    ): this;
    /**
     * @SINCE 1.28.0
     *
     * Sets a new value for property {@link #getTextDirection textDirection}.
     *
     * This property specifies the text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Inherit`.
     */
    setTextDirection(
      /**
       * New value for property `textDirection`
       */
      sTextDirection?: TextDirection | keyof typeof TextDirection
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:delete delete} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired if the user clicks the token's delete icon.
     */
    attachDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:deselect deselect} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the token gets deselected.
     */
    attachDeselect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the user clicks on the token.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.m.Token`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Token` itself.
     *
     * This event is fired when the token gets selected.
     */
    attachSelect(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Token` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TokenSettings extends $ControlSettings {
    /**
     * Indicates the current selection status of the token.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Key of the token.
     */
    key?: string | PropertyBindingInfo;

    /**
     * Displayed text of the token.
     */
    text?: string | PropertyBindingInfo;

    /**
     * Indicates the editable status of the token. If it is set to `true`, token displays a delete icon.
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.28.0
     *
     * This property specifies the text directionality with enumerated options. By default, the control inherits
     * text direction from the DOM.
     */
    textDirection?:
      | (TextDirection | keyof typeof TextDirection)
      | PropertyBindingInfo;

    /**
     * Association to controls / IDs which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * This event is fired if the user clicks the token's delete icon.
     */
    delete?: Function;

    /**
     * This event is fired when the user clicks on the token.
     */
    press?: Function;

    /**
     * This event is fired when the token gets selected.
     */
    select?: Function;

    /**
     * This event is fired when the token gets deselected.
     */
    deselect?: Function;
  }
}

declare module "sap/m/Tokenizer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, CSSSize } from "sap/ui/core/library";

  import Token from "sap/m/Token";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ScrollEnablement from "sap/ui/core/delegate/ScrollEnablement";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.22
   *
   * Overview: A tokenizer is a container for {@link sap.m.Token Tokens}. It also handles all actions associated
   * with the tokens like adding, deleting, selecting and editing. Structure: The tokens are stored in the
   * `tokens` aggregation. The tokenizer can determine, by setting the `editable` property, whether the tokens
   * in it are editable. Still the Token itself can determine if it is `editable`. This allows you to have
   * non-editable Tokens in an editable Tokenizer.
   *
   * Usage: When to use:: The tokenizer can only be used as part of {@link sap.m.MultiComboBox MultiComboBox},{@link
   * sap.m.MultiInput MultiInput} or {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog ValueHelpDialog}
   */
  export default class Tokenizer extends Control {
    /**
     * Constructor for a new Tokenizer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/token/ Tokenizer}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenizerSettings
    );
    /**
     * Constructor for a new Tokenizer.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/token/ Tokenizer}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TokenizerSettings
    );

    /**
     * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    addAriaDescribedBy(
      /**
       * The ariaDescribedBy to add; if empty, nothing is inserted
       */
      vAriaDescribedBy: ID | Control
    ): this;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some token to the aggregation {@link #getTokens tokens}.
     */
    addToken(
      /**
       * The token to add; if empty, nothing is inserted
       */
      oToken: Token
    ): this;
    /**
     * @deprecated (since 1.81) - replaced by {@link MultiInput.prototype.addValidator}
     *
     * Function validates the given text and adds a new token if validation was successful.
     */
    addValidateToken(
      /**
       * Parameter bag containing the following fields:
       */
      oParameters: {
        /**
         * The source text {sap.m.Token}
         */
        text: string;
        /**
         * Suggested token
         */
        token?: object;
        /**
         * Any object used to find the suggested token
         */
        suggestionObject?: object;
        /**
         * Callback which gets called after validation has finished
         */
        validationCallback?: Function;
      }
    ): void;
    /**
     * @deprecated (since 1.81) - replaced by {@link MultiInput.prototype.addValidator}
     *
     * Function adds a validation callback called before any new token gets added to the tokens aggregation.
     */
    addValidator(
      /**
       * The validation function
       */
      fValidator: Function
    ): void;
    /**
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenChange tokenChange} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    attachTokenChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.82
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenDelete tokenDelete} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when a token is deleted by clicking icon, pressing backspace or delete button.  Once the
     * event is fired, application is responsible for removing / destroying the token from the aggregation.
     */
    attachTokenDelete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    attachTokenUpdate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the tokens in the aggregation {@link #getTokens tokens}.
     */
    destroyTokens(): this;
    /**
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenChange tokenChange} event of this `sap.m.Tokenizer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.82
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenDelete tokenDelete} event of this `sap.m.Tokenizer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenDelete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.Tokenizer`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenUpdate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Tokenizer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tokenizer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Fires event {@link #event:tokenChange tokenChange} to attached listeners.
     */
    fireTokenChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * type of tokenChange event. There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
         * Use sap.m.Tokenizer.TokenChangeType.Added for "added", sap.m.Tokenizer.TokenChangeType.Removed for "removed",
         * sap.m.Tokenizer.TokenChangeType.RemovedAll for "removedAll" and sap.m.Tokenizer.TokenChangeType.TokensChanged
         * for "tokensChanged".
         */
        type?: string;
        /**
         * the added token or removed token. This parameter is used when tokenChange type is "added" or "removed".
         */
        token?: Token;
        /**
         * the array of removed tokens. This parameter is used when tokenChange type is "removedAll".
         */
        tokens?: Token[];
        /**
         * the array of tokens that are added. This parameter is used when tokenChange type is "tokenChanged".
         */
        addedTokens?: Token[];
        /**
         * the array of tokens that are removed. This parameter is used when tokenChange type is "tokenChanged".
         */
        removedTokens?: Token[];
      }
    ): this;
    /**
     * @SINCE 1.82
     *
     * Fires event {@link #event:tokenDelete tokenDelete} to attached listeners.
     */
    fireTokenDelete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The array of tokens that are removed.
         */
        tokens?: Token[];
        /**
         * Keycode of the key pressed for deletion (backspace or delete).
         */
        keyCode?: number;
      }
    ): this;
    /**
     * @SINCE 1.46
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Fires event {@link #event:tokenUpdate tokenUpdate} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireTokenUpdate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Type of tokenChange event. There are two TokenUpdate types: "added", "removed" Use sap.m.Tokenizer.TokenUpdateType.Added
         * for "added" and sap.m.Tokenizer.TokenUpdateType.Removed for "removed".
         */
        type?: string;
        /**
         * The array of tokens that are added. This parameter is used when tokenUpdate type is "added".
         */
        addedTokens?: Token[];
        /**
         * The array of tokens that are removed. This parameter is used when tokenUpdate type is "removed".
         */
        removedTokens?: Token[];
      }
    ): boolean;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
     * ariaDescribedBy}.
     */
    getAriaDescribedBy(): ID[];
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets current value of property {@link #getEditable editable}.
     *
     * true if tokens shall be editable otherwise false
     *
     * Default value is `true`.
     */
    getEditable(): boolean;
    /**
     * @SINCE 1.80
     *
     * Gets the count of hidden tokens that will be used for the n-More indicator. If the count is 0, there
     * is no n-More indicator shown.
     */
    getHiddenTokensCount(): number;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Defines the maximum width of the Tokenizer.
     *
     * Default value is `"100%"`.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.Tokenizer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getRenderMode renderMode}.
     *
     * Defines the mode that the Tokenizer will use:
     * 	 - `sap.m.TokenizerRenderMode.Loose` mode shows all tokens, no matter the width of the Tokenizer
     * 	 - `sap.m.TokenizerRenderMode.Narrow` mode forces the Tokenizer to show only as much tokens as possible
     * 			in its width and add an n-More indicator
     *
     * Default value is `RenderMode.Loose`.
     */
    getRenderMode(): string;
    /**
     * Function returns the internally used scroll delegate.
     */
    getScrollDelegate(): ScrollEnablement;
    /**
     * Function returns the tokens' width.
     */
    getScrollWidth(): number;
    /**
     * Function returns all currently selected tokens.
     */
    getSelectedTokens(): Token[];
    /**
     * Gets content of aggregation {@link #getTokens tokens}.
     *
     * the currently displayed tokens
     */
    getTokens(): Token[];
    /**
     * Gets the accessibility text aggregation id.
     */
    getTokensInfoId(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the Tokenizer.
     */
    getWidth(): CSSSize;
    /**
     * Checks if the token is one and truncated.
     */
    hasOneTruncatedToken(): boolean;
    /**
     * Checks for the provided `sap.m.Token` in the aggregation {@link #getTokens tokens}. and returns its index
     * if found or -1 otherwise.
     */
    indexOfToken(
      /**
       * The token whose index is looked for
       */
      oToken: Token
    ): int;
    /**
     * Inserts a token into the aggregation {@link #getTokens tokens}.
     */
    insertToken(
      /**
       * The token to insert; if empty, nothing is inserted
       */
      oToken: Token,
      /**
       * The `0`-based index the token should be inserted at; for a negative value of `iIndex`, the token is inserted
       * at position 0; for a value greater than the current size of the aggregation, the token is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Handle the focus event on the control.
     */
    onclick(
      /**
       * The occuring event
       */
      oEvent: jQuery.Event
    ): void;
    /**
     * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAllAriaDescribedBy(): ID[];
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getTokens tokens}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllTokens(): Token[];
    /**
     * @deprecated (since 1.81) - replaced by {@link MultiInput.prototype.addValidator}
     *
     * Function removes all validation callbacks
     */
    removeAllValidators(): void;
    /**
     * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
     */
    removeAriaDescribedBy(
      /**
       * The ariaDescribedBy to be removed or its index or ID
       */
      vAriaDescribedBy: int | ID | Control
    ): ID;
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a token from the aggregation {@link #getTokens tokens}.
     */
    removeToken(
      /**
       * The token to remove or its index or id
       */
      vToken: int | string | Token
    ): Token;
    /**
     * @deprecated (since 1.81) - replaced by {@link MultiInput.prototype.addValidator}
     *
     * Function removes a validation callback.
     */
    removeValidator(
      /**
       * The validation function
       */
      fValidator: Function
    ): void;
    /**
     * Function scrolls the tokens to the end.
     */
    scrollToEnd(): void;
    /**
     * Function scrolls the tokens to the start.
     */
    scrollToStart(): void;
    /**
     * Function selects all tokens.
     */
    selectAllTokens(
      /**
       * [optional] true for selecting, false for deselecting
       */
      bSelect: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEditable editable}.
     *
     * true if tokens shall be editable otherwise false
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEditable(
      /**
       * New value for property `editable`
       */
      bEditable?: boolean
    ): this;
    /**
     * Sets the first token truncation.
     */
    setFirstTokenTruncated(
      /**
       * The value to set
       */
      bValue: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Defines the maximum width of the Tokenizer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      sMaxWidth?: CSSSize
    ): this;
    /**
     * Function sets the tokenizer's width in pixels.
     */
    setPixelWidth(
      /**
       * The new width in pixels
       */
      nWidth: number
    ): void;
    /**
     * Sets a new value for property {@link #getRenderMode renderMode}.
     *
     * Defines the mode that the Tokenizer will use:
     * 	 - `sap.m.TokenizerRenderMode.Loose` mode shows all tokens, no matter the width of the Tokenizer
     * 	 - `sap.m.TokenizerRenderMode.Narrow` mode forces the Tokenizer to show only as much tokens as possible
     * 			in its width and add an n-More indicator
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `RenderMode.Loose`.
     */
    setRenderMode(
      /**
       * New value for property `renderMode`
       */
      sRenderMode?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the Tokenizer.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenChange tokenChange} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    attachTokenChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.82
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenDelete tokenDelete} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when a token is deleted by clicking icon, pressing backspace or delete button.  Once the
     * event is fired, application is responsible for removing / destroying the token from the aggregation.
     */
    attachTokenDelete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.46
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.m.Tokenizer`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tokenizer` itself.
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    attachTokenUpdate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tokenizer` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TokenizerSettings extends $ControlSettings {
    /**
     * true if tokens shall be editable otherwise false
     */
    editable?: boolean | PropertyBindingInfo;

    /**
     * Defines the width of the Tokenizer.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the maximum width of the Tokenizer.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;

    /**
     * Defines the mode that the Tokenizer will use:
     * 	 - `sap.m.TokenizerRenderMode.Loose` mode shows all tokens, no matter the width of the Tokenizer
     * 	 - `sap.m.TokenizerRenderMode.Narrow` mode forces the Tokenizer to show only as much tokens as possible
     * 			in its width and add an n-More indicator
     */
    renderMode?: string | PropertyBindingInfo;

    /**
     * the currently displayed tokens
     */
    tokens?: Token[] | Token | AggregationBindingInfo;

    /**
     * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
     */
    ariaDescribedBy?: Array<Control | string>;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Fired when the tokens aggregation changed (add / remove token)
     */
    tokenChange?: Function;

    /**
     * @SINCE 1.46
     * @deprecated (since 1.82) - replaced by `tokenDelete` event.
     *
     * Fired when the tokens aggregation changed due to a user interaction (add / remove token)
     */
    tokenUpdate?: Function;

    /**
     * @SINCE 1.82
     *
     * Fired when a token is deleted by clicking icon, pressing backspace or delete button.  Once the
     * event is fired, application is responsible for removing / destroying the token from the aggregation.
     */
    tokenDelete?: Function;
  }
}

declare module "sap/m/Toolbar" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { Toolbar as Toolbar1, ID, CSSSize } from "sap/ui/core/library";

  import { IBar, ToolbarDesign, ToolbarStyle } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import Title from "sap/m/Title";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.
   *
   * Overview:
   *
   * By default, the `Toolbar` items are shrinkable if they have percent-based width (for example, {@link
   * sap.m.Input} and {@link sap.m.Slider}) or implement the {@link sap.ui.core.IShrinkable} interface (for
   * example, {@link sap.m.Text} and {@link sap.m.Label}). This behavior can be overridden by providing {@link
   * sap.m.ToolbarLayoutData} for the `Toolbar` items.
   *
   * **Note:** It is recommended that you use {@link sap.m.OverflowToolbar} over `sap.m.Toolbar`, unless you
   * want to avoid the overflow behavior in favor of shrinking.
   *
   * Usage:
   *
   * You can add a visual separator between the preceding and succeeding {@link sap.m.Toolbar} item with the
   * use of the {@link sap.m.ToolbarSeparator}. The separator is theme dependent and can be a padding, a margin
   * or a line.
   *
   * To add horizontal space between the `Toolbar` items, use the {@link sap.m.ToolbarSpacer}. You can define
   * the width of the horizontal space or make it flexible to cover the remaining space between the `Toolbar`
   * items (for example, to to push an item to the edge of the `Toolbar`.
   *
   * **Note:** The {@link sap.m.ToolbarSpacer} is a flex control that is intended to control its own behavior,
   * thus {@link sap.m.ToolbarLayoutData} is not supported as value for the `layoutData` aggregation of {@link
   * sap.m.ToolbarSpacer} and if set it's ignored.
   */
  export default class Toolbar extends Control implements Toolbar1, IBar {
    __implements__sap_ui_core_Toolbar: boolean;
    __implements__sap_m_IBar: boolean;
    /**
     * Constructor for a new `Toolbar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/toolbar-overview/ Toolbar}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSettings
    );
    /**
     * Constructor for a new `Toolbar`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/toolbar-overview/ Toolbar}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSettings
    );

    /**
     * Sets classes according to the context of the page. Possible contexts are header, footer and subheader.
     */
    _applyContextClassFor(): IBar;
    /**
     * Sets HTML tag according to the context of the page. Possible contexts are header, footer and subheader.
     */
    _applyTag(): IBar;
    /**
     * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    addAriaLabelledBy(
      /**
       * The ariaLabelledBy to add; if empty, nothing is inserted
       */
      vAriaLabelledBy: ID | Control
    ): this;
    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Sets classes and HTML tag according to the context of the page. Possible contexts are header, footer,
     * subheader
     */
    applyTagAndContextClassFor(): IBar;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Toolbar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Toolbar` itself.
     *
     * Fired when the user clicks on the toolbar, if the Active property is set to "true".
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Toolbar` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.Toolbar`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.Toolbar with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Toolbar>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The toolbar item that was pressed
         */
        srcControl?: Control;
      }
    ): this;
    /**
     * Gets current value of property {@link #getActive active}.
     *
     * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
     * Note: This property should be used when there are no interactive controls inside the toolbar and the
     * toolbar itself is meant to be interactive.
     *
     * Default value is `false`.
     */
    getActive(): boolean;
    /**
     * @SINCE 1.79.0
     *
     * Gets current value of property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Defines the aria-haspopup attribute of the `Toolbar`. if the active `design` is true.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend that you use the {@link sap.ui.core.aria.HasPopup} enumeration.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     */
    getAriaHasPopup(): string;
    /**
     * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
     * ariaLabelledBy}.
     */
    getAriaLabelledBy(): ID[];
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of the toolbar.
     */
    getContent(): Control[];
    /**
     * @SINCE 1.16.8
     *
     * Gets current value of property {@link #getDesign design}.
     *
     * Defines the toolbar design.
     *
     * **Note:** Design settings are theme-dependent. They also determine the default height of the toolbar.
     *
     * Default value is `Auto`.
     */
    getDesign(): ToolbarDesign | keyof typeof ToolbarDesign;
    /**
     * Gets current value of property {@link #getEnabled enabled}.
     *
     * Sets the enabled property of all controls defined in the content aggregation. Note: This property does
     * not apply to the toolbar itself, but rather to its items.
     *
     * Default value is `true`.
     */
    getEnabled(): boolean;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Defines the height of the control. By default, the `height` property depends on the used theme and the
     * `design` property.
     *
     * **Note:** It is not recommended to use this property if the `sapMTBHeader-CTX` class is used
     *
     * Default value is `empty string`.
     */
    getHeight(): CSSSize;
    /**
     * Gets the HTML tag of the root domref
     */
    getHTMLTag(): string;
    /**
     * Returns a metadata object for class sap.m.Toolbar.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getStyle style}.
     *
     * Defines the visual style of the `Toolbar`.
     *
     * **Note:** The visual styles are theme-dependent.
     *
     * Default value is `Standard`.
     */
    getStyle(): ToolbarStyle | keyof typeof ToolbarStyle;
    /**
     * @SINCE 1.44
     *
     * Returns the first sap.m.Title control instance inside the toolbar for the accessibility
     */
    getTitleControl(): Title | undefined;
    /**
     * @SINCE 1.28
     *
     * Returns the first sap.m.Title control id inside the toolbar for the accessibility
     */
    getTitleId(): String;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the control. By default, Toolbar is a block element. If the width is not explicitly
     * set, the control will assume its natural size.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Returns if the bar is sensitive to the container context. Implementation of the IBar interface
     */
    isContextSensitive(): boolean;
    /**
     * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAllAriaLabelledBy(): ID[];
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
     */
    removeAriaLabelledBy(
      /**
       * The ariaLabelledBy to be removed or its index or ID
       */
      vAriaLabelledBy: int | ID | Control
    ): ID;
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getActive active}.
     *
     * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
     * Note: This property should be used when there are no interactive controls inside the toolbar and the
     * toolbar itself is meant to be interactive.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setActive(
      /**
       * New value for property `active`
       */
      bActive?: boolean
    ): this;
    /**
     * @SINCE 1.79.0
     *
     * Sets a new value for property {@link #getAriaHasPopup ariaHasPopup}.
     *
     * Defines the aria-haspopup attribute of the `Toolbar`. if the active `design` is true.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend that you use the {@link sap.ui.core.aria.HasPopup} enumeration.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaHasPopup(
      /**
       * New value for property `ariaHasPopup`
       */
      sAriaHasPopup?: string
    ): this;
    /**
     * @SINCE 1.16.8
     *
     * Sets a new value for property {@link #getDesign design}.
     *
     * Defines the toolbar design.
     *
     * **Note:** Design settings are theme-dependent. They also determine the default height of the toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setDesign(
      /**
       * New value for property `design`
       */
      sDesign?: ToolbarDesign | keyof typeof ToolbarDesign
    ): this;
    /**
     * Sets a new value for property {@link #getEnabled enabled}.
     *
     * Sets the enabled property of all controls defined in the content aggregation. Note: This property does
     * not apply to the toolbar itself, but rather to its items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabled(
      /**
       * New value for property `enabled`
       */
      bEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Defines the height of the control. By default, the `height` property depends on the used theme and the
     * `design` property.
     *
     * **Note:** It is not recommended to use this property if the `sapMTBHeader-CTX` class is used
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets the HTML tag of the root domref
     */
    setHTMLTag(sTag: string): IBar;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getStyle style}.
     *
     * Defines the visual style of the `Toolbar`.
     *
     * **Note:** The visual styles are theme-dependent.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Standard`.
     */
    setStyle(
      /**
       * New value for property `style`
       */
      sStyle?: ToolbarStyle | keyof typeof ToolbarStyle
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the control. By default, Toolbar is a block element. If the width is not explicitly
     * set, the control will assume its natural size.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.Toolbar`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Toolbar` itself.
     *
     * Fired when the user clicks on the toolbar, if the Active property is set to "true".
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Toolbar` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ToolbarSettings extends $ControlSettings {
    /**
     * Defines the width of the control. By default, Toolbar is a block element. If the width is not explicitly
     * set, the control will assume its natural size.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
     * Note: This property should be used when there are no interactive controls inside the toolbar and the
     * toolbar itself is meant to be interactive.
     */
    active?: boolean | PropertyBindingInfo;

    /**
     * Sets the enabled property of all controls defined in the content aggregation. Note: This property does
     * not apply to the toolbar itself, but rather to its items.
     */
    enabled?: boolean | PropertyBindingInfo;

    /**
     * Defines the height of the control. By default, the `height` property depends on the used theme and the
     * `design` property.
     *
     * **Note:** It is not recommended to use this property if the `sapMTBHeader-CTX` class is used
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * @SINCE 1.16.8
     *
     * Defines the toolbar design.
     *
     * **Note:** Design settings are theme-dependent. They also determine the default height of the toolbar.
     */
    design?: (ToolbarDesign | keyof typeof ToolbarDesign) | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Defines the visual style of the `Toolbar`.
     *
     * **Note:** The visual styles are theme-dependent.
     */
    style?: (ToolbarStyle | keyof typeof ToolbarStyle) | PropertyBindingInfo;

    /**
     * @SINCE 1.79.0
     *
     * Defines the aria-haspopup attribute of the `Toolbar`. if the active `design` is true.
     *
     * **Guidance for choosing appropriate value:**
     * 	 -  We recommend that you use the {@link sap.ui.core.aria.HasPopup} enumeration.
     * 	 -  If you use controls based on `sap.m.Popover` or `sap.m.Dialog`, then you must use `AriaHasPopup.Dialog`
     * 			(both `sap.m.Popover` and `sap.m.Dialog` have role "dialog" assigned internally).
     * 	 -  If you use other controls, or directly `sap.ui.core.Popup`, you need to check the container role/type
     * 			and map the value of `ariaHasPopup` accordingly.
     */
    ariaHasPopup?: string | PropertyBindingInfo;

    /**
     * The content of the toolbar.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
     */
    ariaLabelledBy?: Array<Control | string>;

    /**
     * Fired when the user clicks on the toolbar, if the Active property is set to "true".
     */
    press?: Function;
  }
}

declare module "sap/m/ToolbarLayoutData" {
  import {
    default as LayoutData,
    $LayoutDataSettings,
  } from "sap/ui/core/LayoutData";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.20
   *
   * Defines layout data for the {@link sap.m.Toolbar} items.
   *
   * **Note:** The {@link sap.m.ToolbarSpacer} is a flex control that is intended to control its own behavior,
   * thus `sap.m.ToolbarLayoutData` is not supported as value for the `layoutData` aggregation of {@link sap.m.ToolbarSpacer}
   * and if set it's ignored.
   */
  export default class ToolbarLayoutData extends LayoutData {
    /**
     * Constructor for a new `ToolbarLayoutData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarLayoutDataSettings
    );
    /**
     * Constructor for a new `ToolbarLayoutData`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarLayoutDataSettings
    );

    /**
     * Creates a new subclass of class sap.m.ToolbarLayoutData with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ToolbarLayoutData>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the toolbar item.
     */
    getMaxWidth(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.ToolbarLayoutData.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMinWidth minWidth}.
     *
     * Sets the minimum width of the toolbar item.
     */
    getMinWidth(): CSSSize;
    /**
     * Gets current value of property {@link #getShrinkable shrinkable}.
     *
     * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width
     * (100px, 5rem, etc...) this property is ignored.
     *
     * Note: Nested layout controls should not be shrinkable.
     *
     * Default value is `false`.
     */
    getShrinkable(): boolean;
    /**
     * Sets a new value for property {@link #getMaxWidth maxWidth}.
     *
     * Sets the maximum width of the toolbar item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxWidth(
      /**
       * New value for property `maxWidth`
       */
      sMaxWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getMinWidth minWidth}.
     *
     * Sets the minimum width of the toolbar item.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMinWidth(
      /**
       * New value for property `minWidth`
       */
      sMinWidth?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getShrinkable shrinkable}.
     *
     * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width
     * (100px, 5rem, etc...) this property is ignored.
     *
     * Note: Nested layout controls should not be shrinkable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setShrinkable(
      /**
       * New value for property `shrinkable`
       */
      bShrinkable?: boolean
    ): this;
  }

  export interface $ToolbarLayoutDataSettings extends $LayoutDataSettings {
    /**
     * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width
     * (100px, 5rem, etc...) this property is ignored.
     *
     * Note: Nested layout controls should not be shrinkable.
     */
    shrinkable?: boolean | PropertyBindingInfo;

    /**
     * Sets the minimum width of the toolbar item.
     */
    minWidth?: CSSSize | PropertyBindingInfo;

    /**
     * Sets the maximum width of the toolbar item.
     */
    maxWidth?: CSSSize | PropertyBindingInfo;
  }
}

declare module "sap/m/ToolbarSeparator" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IOverflowToolbarContent } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.26
   *
   * Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding
   * {@link sap.m.Toolbar} item.
   */
  export default class ToolbarSeparator
    extends Control
    implements IOverflowToolbarContent {
    __implements__sap_m_IOverflowToolbarContent: boolean;
    /**
     * Constructor for a new `ToolbarSeparator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSeparatorSettings
    );
    /**
     * Constructor for a new `ToolbarSeparator`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSeparatorSettings
    );

    /**
     * Creates a new subclass of class sap.m.ToolbarSeparator with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ToolbarSeparator>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.ToolbarSeparator.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.65
     *
     * Sets the behavior of the `ToolbarSeparator` inside an `OverflowToolbar` configuration.
     */
    getOverflowToolbarConfig(): object;
  }

  export interface $ToolbarSeparatorSettings extends $ControlSettings {}
}

declare module "sap/m/ToolbarSpacer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { CSSSize } from "sap/ui/core/library";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * Adds horizontal space between the items used within a {@link sap.m.Toolbar}.
   *
   * **Note:** The `sap.m.ToolbarSpacer` is a flex control that is intended to control its own behavior, thus
   * {@link sap.m.ToolbarLayoutData} is not supported as value for the `layoutData` aggregation of `sap.m.ToolbarSpacer`
   * and if set it's ignored.
   */
  export default class ToolbarSpacer extends Control {
    /**
     * Constructor for a new `ToolbarSpacer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSpacerSettings
    );
    /**
     * Constructor for a new `ToolbarSpacer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ToolbarSpacerSettings
    );

    /**
     * Creates a new subclass of class sap.m.ToolbarSpacer with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ToolbarSpacer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.ToolbarSpacer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Defines the width of the horizontal space. Note: Empty("") value makes the space flexible which means
     * it covers the remaining space between toolbar items. This feature can be used to push next item to the
     * edge of the toolbar.
     *
     * Default value is `empty string`.
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Defines the width of the horizontal space. Note: Empty("") value makes the space flexible which means
     * it covers the remaining space between toolbar items. This feature can be used to push next item to the
     * edge of the toolbar.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $ToolbarSpacerSettings extends $ControlSettings {
    /**
     * Defines the width of the horizontal space. Note: Empty("") value makes the space flexible which means
     * it covers the remaining space between toolbar items. This feature can be used to push next item to the
     * edge of the toolbar.
     */
    width?: CSSSize | PropertyBindingInfo;
  }
}

declare module "sap/m/Tree" {
  import { default as ListBase, $ListBaseSettings } from "sap/m/ListBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ListGrowingDirection } from "sap/m/library";

  /**
   * @SINCE 1.42
   *
   * The `Tree` control provides a tree structure for displaying data in a hierarchy. **Note:** Growing feature
   * is not supported by `Tree`.
   */
  export default class Tree extends ListBase {
    /**
     * Constructor for a new Tree.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/tree/ Tree}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeSettings
    );
    /**
     * Constructor for a new Tree.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:/tree/ Tree}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeSettings
    );

    /**
     * @SINCE 1.50
     *
     * Attaches event handler `fnFunction` to the {@link #event:toggleOpenState toggleOpenState} event of this
     * `sap.m.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tree` itself.
     *
     * Fired when an item has been expanded or collapsed by user interaction.
     */
    attachToggleOpenState(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tree` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56.0
     *
     * Collapses one or multiple items.
     */
    collapse(
      /**
       * The index or indices of the tree items to be collapsed
       */
      vParam: int | int[]
    ): this;
    /**
     * @SINCE 1.48.0
     *
     * Collapses all nodes.
     */
    collapseAll(): this;
    /**
     * @SINCE 1.50
     *
     * Detaches event handler `fnFunction` from the {@link #event:toggleOpenState toggleOpenState} event of
     * this `sap.m.Tree`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachToggleOpenState(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.56.0
     *
     * Expands one or multiple items. Note that items that are hidden at the time of calling this API can't
     * be expanded.
     */
    expand(
      /**
       * The index or indices of the item to be expanded
       */
      vParam: int | int[]
    ): this;
    /**
     * @SINCE 1.48.0
     *
     * Defines the level to which the tree is expanded. The function can be used to define the initial expanding
     * state. An alternative way to define the initial expanding state is to set the parameter `numberOfExpandedLevels`
     * of the binding.
     *
     * Example:
     * ```javascript
     *
     *   oTree.bindItems({
     *      path: "...",
     *      parameters: {
     *         numberOfExpandedLevels: 1
     *      }
     *   });
     * ```
     */
    expandToLevel(
      /**
       * The level to which the data is expanded
       */
      iLevel: int
    ): this;
    /**
     * Creates a new subclass of class sap.m.Tree with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Tree>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.50
     *
     * Fires event {@link #event:toggleOpenState toggleOpenState} to attached listeners.
     */
    fireToggleOpenState(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Index of the expanded/collapsed item
         */
        itemIndex?: int;
        /**
         * Binding context of the item
         */
        itemContext?: object;
        /**
         * Flag that indicates whether the item has been expanded or collapsed
         */
        expanded?: boolean;
      }
    ): this;
    /**
     * Returns a metadata object for class sap.m.Tree.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @deprecated (since 1.46)
     *
     * The `growing` property is not supported for control `Tree`.
     */
    setGrowing(
      /**
       * New value for the `growing` property, ignored.
       */
      bValue: boolean
    ): this;
    /**
     * @deprecated (since 1.46)
     *
     * The `growingDirection` property is not supported for control `Tree`.
     */
    setGrowingDirection(
      /**
       * New value for the `growingDirection` property, ignored.
       */
      sValue: ListGrowingDirection | keyof typeof ListGrowingDirection
    ): this;
    /**
     * @deprecated (since 1.46)
     *
     * The `growingScrollToLoad` property is not supported for control `Tree`.
     */
    setGrowingScrollToLoad(
      /**
       * New value for the `growingScrollToLoad` property, ignored.
       */
      bValue: boolean
    ): this;
    /**
     * @deprecated (since 1.46)
     *
     * The `growingThreshold` property is not supported for control `Tree`.
     */
    setGrowingThreshold(
      /**
       * New value for the `growingThreshold` property, ignored.
       */
      iValue: int
    ): this;
    /**
     * @deprecated (since 1.46)
     *
     * The `growingTriggerText` property is not supported for control `Tree`.
     */
    setGrowingTriggerText(
      /**
       * New value for the `growingTriggerText` property, ignored.
       */
      sValue: string
    ): this;
    /**
     * @SINCE 1.50
     *
     * Attaches event handler `fnFunction` to the {@link #event:toggleOpenState toggleOpenState} event of this
     * `sap.m.Tree`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Tree` itself.
     *
     * Fired when an item has been expanded or collapsed by user interaction.
     */
    attachToggleOpenState(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Tree` itself
       */
      oListener?: object
    ): this;
  }

  export interface $TreeSettings extends $ListBaseSettings {
    /**
     * @SINCE 1.50
     *
     * Fired when an item has been expanded or collapsed by user interaction.
     */
    toggleOpenState?: Function;
  }
}

declare module "sap/m/TreeItemBase" {
  import {
    default as ListItemBase,
    $ListItemBaseSettings,
  } from "sap/m/ListItemBase";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.42.0
   *
   * The `sap.m.TreeItemBase` contains the basic features of all specific tree items.
   */
  export default class TreeItemBase extends ListItemBase {
    /**
     * Constructor for a new TreeItemBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.ListItemBase#constructor
     * sap.m.ListItemBase} can be used.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeItemBaseSettings
    );
    /**
     * Constructor for a new TreeItemBase.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.ListItemBase#constructor
     * sap.m.ListItemBase} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $TreeItemBaseSettings
    );

    /**
     * Creates a new subclass of class sap.m.TreeItemBase with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, TreeItemBase>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.42.0
     *
     * Gets the expanding information of the node.
     */
    getExpanded(): Boolean;
    /**
     * @SINCE 1.42.0
     *
     * Gets the context of the node.
     */
    getItemNodeContext(): Object;
    /**
     * @SINCE 1.42.0
     *
     * Gets the node level in the hierarchy.
     */
    getLevel(): int;
    /**
     * Returns a metadata object for class sap.m.TreeItemBase.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.42.0
     *
     * Gets the parent node control.
     */
    getParentNode(): TreeItemBase | undefined;
    /**
     * @SINCE 1.42.0
     *
     * Gets the context of the parent node control.
     */
    getParentNodeContext(): Object;
    /**
     * @SINCE 1.42.0
     *
     * Determines if the node is a leaf.
     */
    isLeaf(): boolean;
    /**
     * @SINCE 1.42.0
     *
     * Checks if the node is the top level node.
     */
    isTopLevel(): boolean;
  }

  export interface $TreeItemBaseSettings extends $ListItemBaseSettings {}
}

declare module "sap/m/upload/Uploader" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import UploadSetItem from "sap/m/upload/UploadSetItem";

  import Item from "sap/ui/core/Item";

  import UploaderHttpRequestMethod from "sap/m/upload/UploaderHttpRequestMethod";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.63
   *
   * A basic implementation for uploading and downloading one or multiple files.
   */
  export default class Uploader extends UI5Element {
    /**
     * Constructor for a new Uploader.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadAborted uploadAborted} event of this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired when an XHR request reports its abortion.
     */
    attachUploadAborted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadCompleted uploadCompleted} event of this
     * `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired when an XHR request reports successful completion of upload process.
     */
    attachUploadCompleted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadProgressed uploadProgressed} event of
     * this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired every time an XHR request reports progress in uploading.
     */
    attachUploadProgressed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadStarted uploadStarted} event of this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired just after the POST request was sent.
     */
    attachUploadStarted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadAborted uploadAborted} event of this
     * `sap.m.upload.Uploader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadAborted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadCompleted uploadCompleted} event of
     * this `sap.m.upload.Uploader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadCompleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadProgressed uploadProgressed} event of
     * this `sap.m.upload.Uploader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadProgressed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadStarted uploadStarted} event of this
     * `sap.m.upload.Uploader`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadStarted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Starts the process of downloading a file.
     */
    downloadItem(
      /**
       * Item representing the file to be downloaded.
       */
      oItem: UploadSetItem,
      /**
       * List of header fields to be added to the GET request.
       */
      aHeaderFields: Item[],
      /**
       * True if the location to where download the file should be first queried by a browser dialog.
       */
      bAskForLocation: boolean
    ): boolean;
    /**
     * Creates a new subclass of class sap.m.upload.Uploader with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Uploader>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:uploadAborted uploadAborted} to attached listeners.
     */
    fireUploadAborted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item that is going to be deleted.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:uploadCompleted uploadCompleted} to attached listeners.
     */
    fireUploadCompleted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item that was uploaded.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:uploadProgressed uploadProgressed} to attached listeners.
     */
    fireUploadProgressed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item that is being uploaded.
         */
        item?: UploadSetItem;
        /**
         * The number of bytes transferred since the beginning of the operation. This doesn't include headers and
         * other overhead, but only the content itself
         */
        loaded?: int;
        /**
         * The total number of bytes of content that will be transferred during the operation. If the total size
         * is unknown, this value is zero.
         */
        total?: int;
      }
    ): this;
    /**
     * Fires event {@link #event:uploadStarted uploadStarted} to attached listeners.
     */
    fireUploadStarted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item that is going to be uploaded.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDownloadUrl downloadUrl}.
     *
     * URL where the next file is going to be download from.
     */
    getDownloadUrl(): string;
    /**
     * @SINCE 1.90
     *
     * Gets current value of property {@link #getHttpRequestMethod httpRequestMethod}.
     *
     * HTTP request method chosen for file upload.
     *
     * Default value is `HttpRequestMethod.Post`.
     */
    getHttpRequestMethod(): UploaderHttpRequestMethod;
    /**
     * Returns a metadata object for class sap.m.upload.Uploader.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the next file is going to be uploaded to.
     */
    getUploadUrl(): string;
    /**
     * Sets a new value for property {@link #getDownloadUrl downloadUrl}.
     *
     * URL where the next file is going to be download from.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDownloadUrl(
      /**
       * New value for property `downloadUrl`
       */
      sDownloadUrl?: string
    ): this;
    /**
     * @SINCE 1.90
     *
     * Sets a new value for property {@link #getHttpRequestMethod httpRequestMethod}.
     *
     * HTTP request method chosen for file upload.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `HttpRequestMethod.Post`.
     */
    setHttpRequestMethod(
      /**
       * New value for property `httpRequestMethod`
       */
      sHttpRequestMethod?: UploaderHttpRequestMethod
    ): this;
    /**
     * Sets a new value for property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the next file is going to be uploaded to.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUploadUrl(
      /**
       * New value for property `uploadUrl`
       */
      sUploadUrl?: string
    ): this;
    /**
     * Attempts to terminate the process of uploading the specified file.
     */
    terminateItem(
      /**
       * Item representing the file whose ongoing upload process is to be terminated.
       */
      oItem: UploadSetItem
    ): void;
    /**
     * Starts function for uploading one file object to given url. Returns promise that resolves when the upload
     * is finished or rejects when the upload fails.
     */
    static uploadFile(
      /**
       * File or Blob object to be uploaded.
       */
      oFile: File | Blob,
      /**
       * Upload Url.
       */
      sUrl: string,
      /**
       * Collection of request header fields to be send along.
       */
      aHeaderFields?: Item[]
    ): Promise<any>;
    /**
     * Starts the process of uploading the specified file.
     */
    uploadItem(
      /**
       * Item representing the file to be uploaded.
       */
      oItem: UploadSetItem,
      /**
       * Collection of request header fields to be send along.
       */
      aHeaderFields?: Item[]
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadAborted uploadAborted} event of this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired when an XHR request reports its abortion.
     */
    attachUploadAborted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadCompleted uploadCompleted} event of this
     * `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired when an XHR request reports successful completion of upload process.
     */
    attachUploadCompleted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadProgressed uploadProgressed} event of
     * this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired every time an XHR request reports progress in uploading.
     */
    attachUploadProgressed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadStarted uploadStarted} event of this `sap.m.upload.Uploader`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.Uploader` itself.
     *
     * The event is fired just after the POST request was sent.
     */
    attachUploadStarted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.Uploader` itself
       */
      oListener?: object
    ): this;
  }

  export interface $UploaderSettings extends $ElementSettings {
    /**
     * URL where the next file is going to be uploaded to.
     */
    uploadUrl?: string | PropertyBindingInfo;

    /**
     * URL where the next file is going to be download from.
     */
    downloadUrl?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.90
     *
     * HTTP request method chosen for file upload.
     */
    httpRequestMethod?: UploaderHttpRequestMethod | PropertyBindingInfo;

    /**
     * The event is fired just after the POST request was sent.
     */
    uploadStarted?: Function;

    /**
     * The event is fired every time an XHR request reports progress in uploading.
     */
    uploadProgressed?: Function;

    /**
     * The event is fired when an XHR request reports successful completion of upload process.
     */
    uploadCompleted?: Function;

    /**
     * The event is fired when an XHR request reports its abortion.
     */
    uploadAborted?: Function;
  }
}

declare module "sap/m/upload/UploaderHttpRequestMethod" {
  /**
   * @SINCE 1.90
   *
   * Types of HTTP request methods.
   */
  enum UploaderHttpRequestMethod {
    /**
     * HTTP request POST method.
     */
    Post = "POST",
    /**
     * HTTP request PUT method.
     */
    Put = "PUT",
  }
  export default UploaderHttpRequestMethod;
}

declare module "sap/m/upload/UploadSet" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Item from "sap/ui/core/Item";

  import UploadSetItem from "sap/m/upload/UploadSetItem";

  import FileUploader from "sap/ui/unified/FileUploader";

  import UploaderHttpRequestMethod from "sap/m/upload/UploaderHttpRequestMethod";

  import List from "sap/m/List";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import OverflowToolbar from "sap/m/OverflowToolbar";

  import Uploader from "sap/m/upload/Uploader";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.63
   *
   * This control allows you to upload one or more files from your devices (desktop, tablet, or phone) and
   * attach them to your application.
   *  This control builds on the {@link sap.m.UploadCollection} control, providing better handling of headers
   * and requests, unified behavior of instant and deferred uploads, as well as improved progress indication.
   */
  export default class UploadSet extends Control {
    /**
     * Constructor for a new UploadSet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $UploadSetSettings
    );
    /**
     * Constructor for a new UploadSet.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $UploadSetSettings
    );

    /**
     * Adds some headerField to the aggregation {@link #getHeaderFields headerFields}.
     */
    addHeaderField(
      /**
       * The headerField to add; if empty, nothing is inserted
       */
      oHeaderField: Item
    ): this;
    /**
     * Adds some incompleteItem to the aggregation {@link #getIncompleteItems incompleteItems}.
     */
    addIncompleteItem(
      /**
       * The incompleteItem to add; if empty, nothing is inserted
       */
      oIncompleteItem: UploadSetItem
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: UploadSetItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterItemAdded afterItemAdded} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired when a new file is added to the set of items to be uploaded.
     */
    attachAfterItemAdded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterItemEdited afterItemEdited} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired after item edit is confirmed.
     */
    attachAfterItemEdited(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterItemRemoved afterItemRemoved} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired after the item is removed on click of ok button in confirmation dialog.
     */
    attachAfterItemRemoved(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemAdded beforeItemAdded} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired just before a new file is added to the set of items to be uploaded.
     */
    attachBeforeItemAdded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemEdited beforeItemEdited} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired when the edit button is clicked for an item and no other item is being edited at
     * the same time.
     * If there is another item that has unsaved changes, the editing of the clicked item cannot be started.
     */
    attachBeforeItemEdited(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemRemoved beforeItemRemoved} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired just before the confirmation dialog for 'Remove' action is displayed.
     */
    attachBeforeItemRemoved(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right before the upload process begins.
     */
    attachBeforeUploadStarts(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadTermination beforeUploadTermination}
     * event of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right before the upload is terminated.
     */
    attachBeforeUploadTermination(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileNameLengthExceeded fileNameLengthExceeded}
     * event of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file name length restriction specified
     * 			in the `maxFileNameLength` property.
     * 	 - When the file name length restriction changes, and the file to be uploaded fails to meet the new
     * 			restriction.
     */
    attachFileNameLengthExceeded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileSizeExceeded fileSizeExceeded} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file size restriction specified in
     * 			the `maxFileSize` property.
     * 	 - When the file size restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachFileSizeExceeded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileTypeMismatch fileTypeMismatch} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file type restriction (`fileType` property).
     *
     * 	 - When the file type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachFileTypeMismatch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mediaTypeMismatch mediaTypeMismatch} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the media type restriction specified in
     * 			the `mediaTypes` property.
     * 	 - When the media type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachMediaTypeMismatch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired simultaneously with the respective event in the inner {@link sap.m.List} control.
     */
    attachSelectionChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadCompleted uploadCompleted} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right after the upload process is finished.
     */
    attachUploadCompleted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right after the upload is terminated.
     */
    attachUploadTerminated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the headerFields in the aggregation {@link #getHeaderFields headerFields}.
     */
    destroyHeaderFields(): this;
    /**
     * Destroys all the incompleteItems in the aggregation {@link #getIncompleteItems incompleteItems}.
     */
    destroyIncompleteItems(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
     */
    destroyToolbar(): this;
    /**
     * Destroys the uploader in the aggregation {@link #getUploader uploader}.
     */
    destroyUploader(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:afterItemAdded afterItemAdded} event of this
     * `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterItemAdded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Detaches event handler `fnFunction` from the {@link #event:afterItemEdited afterItemEdited} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterItemEdited(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Detaches event handler `fnFunction` from the {@link #event:afterItemRemoved afterItemRemoved} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachAfterItemRemoved(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeItemAdded beforeItemAdded} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeItemAdded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeItemEdited beforeItemEdited} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeItemEdited(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeItemRemoved beforeItemRemoved} event
     * of this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeItemRemoved(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeUploadStarts(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeUploadTermination beforeUploadTermination}
     * event of this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeUploadTermination(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileNameLengthExceeded fileNameLengthExceeded}
     * event of this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileNameLengthExceeded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileSizeExceeded fileSizeExceeded} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileSizeExceeded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileTypeMismatch fileTypeMismatch} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileTypeMismatch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:mediaTypeMismatch mediaTypeMismatch} event
     * of this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachMediaTypeMismatch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadCompleted uploadCompleted} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadCompleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.upload.UploadSet`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadTerminated(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.upload.UploadSet with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadSet>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:afterItemAdded afterItemAdded} to attached listeners.
     */
    fireAfterItemAdded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file that has just been added.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * @SINCE 1.83
     *
     * Fires event {@link #event:afterItemEdited afterItemEdited} to attached listeners.
     */
    fireAfterItemEdited(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item edited.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * @SINCE 1.83
     *
     * Fires event {@link #event:afterItemRemoved afterItemRemoved} to attached listeners.
     */
    fireAfterItemRemoved(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item removed from the set of items to be uploaded.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:beforeItemAdded beforeItemAdded} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeItemAdded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file to be added to the set of items to be uploaded.
         */
        item?: UploadSetItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeItemEdited beforeItemEdited} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeItemEdited(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item to be edited.
         */
        item?: UploadSetItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeItemRemoved beforeItemRemoved} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeItemRemoved(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item to be removed from the set of items to be uploaded.
         */
        item?: UploadSetItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeUploadStarts beforeUploadStarts} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeUploadStarts(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file whose upload is just about to start.
         */
        item?: UploadSetItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:beforeUploadTermination beforeUploadTermination} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireBeforeUploadTermination(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file whose upload is about to be terminated.
         */
        item?: UploadSetItem;
      }
    ): boolean;
    /**
     * Fires event {@link #event:fileNameLengthExceeded fileNameLengthExceeded} to attached listeners.
     */
    fireFileNameLengthExceeded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file that fails to meet the file name length restriction specified in the `maxFileNameLength` property.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:fileSizeExceeded fileSizeExceeded} to attached listeners.
     */
    fireFileSizeExceeded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file that fails to meet the file size restriction specified in the `maxFileSize` property.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:fileTypeMismatch fileTypeMismatch} to attached listeners.
     */
    fireFileTypeMismatch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file that fails to meet the file type restriction specified in the `fileType` property.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:mediaTypeMismatch mediaTypeMismatch} to attached listeners.
     */
    fireMediaTypeMismatch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file that fails to meet the media type restriction specified in the `mediaTypes` property.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
     */
    fireSelectionChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Items whose selection status has just been changed.
         */
        items?: UploadSetItem[];
      }
    ): this;
    /**
     * Fires event {@link #event:uploadCompleted uploadCompleted} to attached listeners.
     */
    fireUploadCompleted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file whose upload has just been completed.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Fires event {@link #event:uploadTerminated uploadTerminated} to attached listeners.
     */
    fireUploadTerminated(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The file whose upload has just been terminated.
         */
        item?: UploadSetItem;
      }
    ): this;
    /**
     * Returns an instance of the default `sap.ui.unified.FileUploader` used for adding files using the operating
     * system's open file dialog, so that it can be customized, for example made invisible or assigned a different
     * icon.
     */
    getDefaultFileUploader(): FileUploader;
    /**
     * Gets current value of property {@link #getFileTypes fileTypes}.
     *
     * Allowed file types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     */
    getFileTypes(): string[];
    /**
     * Gets content of aggregation {@link #getHeaderFields headerFields}.
     *
     * Header fields to be included in the header section of an XHR request.
     */
    getHeaderFields(): Item[];
    /**
     * @SINCE 1.90
     *
     * Gets current value of property {@link #getHttpRequestMethod httpRequestMethod}.
     *
     * HTTP request method chosen for file upload.
     *
     * Default value is `HttpRequestMethod.Post`.
     */
    getHttpRequestMethod(): UploaderHttpRequestMethod;
    /**
     * Gets content of aggregation {@link #getIncompleteItems incompleteItems}.
     *
     * Items representing files yet to be uploaded.
     */
    getIncompleteItems(): UploadSetItem[];
    /**
     * Gets current value of property {@link #getInstantUpload instantUpload}.
     *
     * Defines whether the upload process should be triggered as soon as the file is added.
     *  If set to `false`, no upload is triggered when a file is added.
     *
     * Default value is `true`.
     */
    getInstantUpload(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Items representing files that have already been uploaded.
     */
    getItems(): UploadSetItem[];
    /**
     * Provides access to the instance of the inner {@link sap.m.List} control, so that it can be customized.
     */
    getList(): List;
    /**
     * Gets current value of property {@link #getMaxFileNameLength maxFileNameLength}.
     *
     * Maximum length of names of files to be uploaded.
     * If set to `null` or `0`, any files can be uploaded, regardless of their names length.
     */
    getMaxFileNameLength(): int;
    /**
     * Gets current value of property {@link #getMaxFileSize maxFileSize}.
     *
     * Size limit in megabytes for files to be uploaded.
     * If set to `null` or `0`, files of any size can be uploaded.
     */
    getMaxFileSize(): float;
    /**
     * Gets current value of property {@link #getMediaTypes mediaTypes}.
     *
     * Allowed media types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     */
    getMediaTypes(): string[];
    /**
     * Returns a metadata object for class sap.m.upload.UploadSet.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getNoDataDescription noDataDescription}.
     *
     * Defines custom text for the 'No data' description label.
     */
    getNoDataDescription(): string;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Defines custom text for the 'No data' text label.
     */
    getNoDataText(): string;
    /**
     * Gets current value of property {@link #getShowIcons showIcons}.
     *
     * Defines whether file icons should be displayed.
     *
     * Default value is `true`.
     */
    getShowIcons(): boolean;
    /**
     * Gets current value of property {@link #getTerminationEnabled terminationEnabled}.
     *
     * Defines whether it is allowed to terminate the upload process.
     *
     * Default value is `true`.
     */
    getTerminationEnabled(): boolean;
    /**
     * Gets content of aggregation {@link #getToolbar toolbar}.
     *
     * Main toolbar of the `UploadSet` control.
     */
    getToolbar(): OverflowToolbar;
    /**
     * Gets current value of property {@link #getUploadEnabled uploadEnabled}.
     *
     * Defines whether the upload action is allowed.
     *
     * Default value is `true`.
     */
    getUploadEnabled(): boolean;
    /**
     * Gets content of aggregation {@link #getUploader uploader}.
     *
     * Defines the uploader to be used. If not specified, the default implementation is used.
     */
    getUploader(): Uploader;
    /**
     * Gets current value of property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the uploaded files will be stored.
     */
    getUploadUrl(): string;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getHeaderFields headerFields}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfHeaderField(
      /**
       * The headerField whose index is looked for
       */
      oHeaderField: Item
    ): int;
    /**
     * Checks for the provided `sap.m.upload.UploadSetItem` in the aggregation {@link #getIncompleteItems incompleteItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfIncompleteItem(
      /**
       * The incompleteItem whose index is looked for
       */
      oIncompleteItem: UploadSetItem
    ): int;
    /**
     * Checks for the provided `sap.m.upload.UploadSetItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: UploadSetItem
    ): int;
    /**
     * Inserts a headerField into the aggregation {@link #getHeaderFields headerFields}.
     */
    insertHeaderField(
      /**
       * The headerField to insert; if empty, nothing is inserted
       */
      oHeaderField: Item,
      /**
       * The `0`-based index the headerField should be inserted at; for a negative value of `iIndex`, the headerField
       * is inserted at position 0; for a value greater than the current size of the aggregation, the headerField
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a incompleteItem into the aggregation {@link #getIncompleteItems incompleteItems}.
     */
    insertIncompleteItem(
      /**
       * The incompleteItem to insert; if empty, nothing is inserted
       */
      oIncompleteItem: UploadSetItem,
      /**
       * The `0`-based index the incompleteItem should be inserted at; for a negative value of `iIndex`, the incompleteItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the incompleteItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: UploadSetItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Attaches all necessary handlers to the given uploader instance, so that the progress and status of the
     * upload can be displayed and monitored.
     */
    registerUploaderEvents(
      /**
       * Instance of `sap.m.upload.Uploader` to which the default request handlers are attached.
       */
      oUploader: Uploader
    ): void;
    /**
     * Removes all the controls from the aggregation {@link #getHeaderFields headerFields}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeaderFields(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getIncompleteItems incompleteItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllIncompleteItems(): UploadSetItem[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): UploadSetItem[];
    /**
     * Removes a headerField from the aggregation {@link #getHeaderFields headerFields}.
     */
    removeHeaderField(
      /**
       * The headerField to remove or its index or id
       */
      vHeaderField: int | string | Item
    ): Item;
    /**
     * Removes a incompleteItem from the aggregation {@link #getIncompleteItems incompleteItems}.
     */
    removeIncompleteItem(
      /**
       * The incompleteItem to remove or its index or id
       */
      vIncompleteItem: int | string | UploadSetItem
    ): UploadSetItem;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | UploadSetItem
    ): UploadSetItem;
    /**
     * Sets a new value for property {@link #getFileTypes fileTypes}.
     *
     * Allowed file types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFileTypes(
      /**
       * New value for property `fileTypes`
       */
      sFileTypes?: string[]
    ): this;
    /**
     * @SINCE 1.90
     *
     * Sets a new value for property {@link #getHttpRequestMethod httpRequestMethod}.
     *
     * HTTP request method chosen for file upload.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `HttpRequestMethod.Post`.
     */
    setHttpRequestMethod(
      /**
       * New value for property `httpRequestMethod`
       */
      sHttpRequestMethod?: UploaderHttpRequestMethod
    ): this;
    /**
     * Sets a new value for property {@link #getInstantUpload instantUpload}.
     *
     * Defines whether the upload process should be triggered as soon as the file is added.
     *  If set to `false`, no upload is triggered when a file is added.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setInstantUpload(
      /**
       * New value for property `instantUpload`
       */
      bInstantUpload?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaxFileNameLength maxFileNameLength}.
     *
     * Maximum length of names of files to be uploaded.
     * If set to `null` or `0`, any files can be uploaded, regardless of their names length.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxFileNameLength(
      /**
       * New value for property `maxFileNameLength`
       */
      iMaxFileNameLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMaxFileSize maxFileSize}.
     *
     * Size limit in megabytes for files to be uploaded.
     * If set to `null` or `0`, files of any size can be uploaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaxFileSize(
      /**
       * New value for property `maxFileSize`
       */
      fMaxFileSize?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMediaTypes mediaTypes}.
     *
     * Allowed media types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMediaTypes(
      /**
       * New value for property `mediaTypes`
       */
      sMediaTypes?: string[]
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataDescription noDataDescription}.
     *
     * Defines custom text for the 'No data' description label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataDescription(
      /**
       * New value for property `noDataDescription`
       */
      sNoDataDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Defines custom text for the 'No data' text label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getShowIcons showIcons}.
     *
     * Defines whether file icons should be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setShowIcons(
      /**
       * New value for property `showIcons`
       */
      bShowIcons?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTerminationEnabled terminationEnabled}.
     *
     * Defines whether it is allowed to terminate the upload process.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setTerminationEnabled(
      /**
       * New value for property `terminationEnabled`
       */
      bTerminationEnabled?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getToolbar toolbar}.
     */
    setToolbar(
      /**
       * The toolbar to set
       */
      oToolbar: OverflowToolbar
    ): this;
    /**
     * Sets a new value for property {@link #getUploadEnabled uploadEnabled}.
     *
     * Defines whether the upload action is allowed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setUploadEnabled(
      /**
       * New value for property `uploadEnabled`
       */
      bUploadEnabled?: boolean
    ): this;
    /**
     * Sets the aggregated {@link #getUploader uploader}.
     */
    setUploader(
      /**
       * The uploader to set
       */
      oUploader: Uploader
    ): this;
    /**
     * Sets a new value for property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the uploaded files will be stored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUploadUrl(
      /**
       * New value for property `uploadUrl`
       */
      sUploadUrl?: string
    ): this;
    /**
     * Starts uploading all files that comply with the restrictions defined in the `fileTypes`, `maxFileNameLength`,
     * `maxFileSize`, and `mediaTypes` properties.
     * This method works only when the `uploadEnabled` property is set to `true`.
     */
    upload(): void;
    /**
     * Starts uploading the file if it complies with the restrictions defined in the `fileTypes`, `maxFileNameLength`,
     * `maxFileSize`, and `mediaTypes` properties.
     * This method works only when the `uploadEnabled` property is set to `true`.
     */
    uploadItem(
      /**
       * File to upload.
       */
      oItem: object
    ): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:afterItemAdded afterItemAdded} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired when a new file is added to the set of items to be uploaded.
     */
    attachAfterItemAdded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterItemEdited afterItemEdited} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired after item edit is confirmed.
     */
    attachAfterItemEdited(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.83
     *
     * Attaches event handler `fnFunction` to the {@link #event:afterItemRemoved afterItemRemoved} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired after the item is removed on click of ok button in confirmation dialog.
     */
    attachAfterItemRemoved(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemAdded beforeItemAdded} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired just before a new file is added to the set of items to be uploaded.
     */
    attachBeforeItemAdded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemEdited beforeItemEdited} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired when the edit button is clicked for an item and no other item is being edited at
     * the same time.
     * If there is another item that has unsaved changes, the editing of the clicked item cannot be started.
     */
    attachBeforeItemEdited(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeItemRemoved beforeItemRemoved} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired just before the confirmation dialog for 'Remove' action is displayed.
     */
    attachBeforeItemRemoved(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right before the upload process begins.
     */
    attachBeforeUploadStarts(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadTermination beforeUploadTermination}
     * event of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right before the upload is terminated.
     */
    attachBeforeUploadTermination(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileNameLengthExceeded fileNameLengthExceeded}
     * event of this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file name length restriction specified
     * 			in the `maxFileNameLength` property.
     * 	 - When the file name length restriction changes, and the file to be uploaded fails to meet the new
     * 			restriction.
     */
    attachFileNameLengthExceeded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileSizeExceeded fileSizeExceeded} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file size restriction specified in
     * 			the `maxFileSize` property.
     * 	 - When the file size restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachFileSizeExceeded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileTypeMismatch fileTypeMismatch} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file type restriction (`fileType` property).
     *
     * 	 - When the file type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachFileTypeMismatch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:mediaTypeMismatch mediaTypeMismatch} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the media type restriction specified in
     * 			the `mediaTypes` property.
     * 	 - When the media type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    attachMediaTypeMismatch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired simultaneously with the respective event in the inner {@link sap.m.List} control.
     */
    attachSelectionChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadCompleted uploadCompleted} event of this
     * `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right after the upload process is finished.
     */
    attachUploadCompleted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.upload.UploadSet`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSet` itself.
     *
     * This event is fired right after the upload is terminated.
     */
    attachUploadTerminated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSet` itself
       */
      oListener?: object
    ): this;
  }

  export interface $UploadSetSettings extends $ControlSettings {
    /**
     * Allowed file types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     */
    fileTypes?: string[] | PropertyBindingInfo;

    /**
     * Maximum length of names of files to be uploaded.
     * If set to `null` or `0`, any files can be uploaded, regardless of their names length.
     */
    maxFileNameLength?: int | PropertyBindingInfo;

    /**
     * Size limit in megabytes for files to be uploaded.
     * If set to `null` or `0`, files of any size can be uploaded.
     */
    maxFileSize?: float | PropertyBindingInfo;

    /**
     * Allowed media types for files to be uploaded.
     * If this property is not set, any file can be uploaded.
     */
    mediaTypes?: string[] | PropertyBindingInfo;

    /**
     * Defines custom text for the 'No data' text label.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * Defines custom text for the 'No data' description label.
     */
    noDataDescription?: string | PropertyBindingInfo;

    /**
     * Defines whether the upload process should be triggered as soon as the file is added.
     *  If set to `false`, no upload is triggered when a file is added.
     */
    instantUpload?: boolean | PropertyBindingInfo;

    /**
     * Defines whether file icons should be displayed.
     */
    showIcons?: boolean | PropertyBindingInfo;

    /**
     * Defines whether it is allowed to terminate the upload process.
     */
    terminationEnabled?: boolean | PropertyBindingInfo;

    /**
     * Defines whether the upload action is allowed.
     */
    uploadEnabled?: boolean | PropertyBindingInfo;

    /**
     * URL where the uploaded files will be stored.
     */
    uploadUrl?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.90
     *
     * HTTP request method chosen for file upload.
     */
    httpRequestMethod?: UploaderHttpRequestMethod | PropertyBindingInfo;

    /**
     * Items representing files that have already been uploaded.
     */
    items?: UploadSetItem[] | UploadSetItem | AggregationBindingInfo;

    /**
     * Items representing files yet to be uploaded.
     */
    incompleteItems?: UploadSetItem[] | UploadSetItem | AggregationBindingInfo;

    /**
     * Header fields to be included in the header section of an XHR request.
     */
    headerFields?: Item[] | Item | AggregationBindingInfo;

    /**
     * Main toolbar of the `UploadSet` control.
     */
    toolbar?: OverflowToolbar;

    /**
     * Defines the uploader to be used. If not specified, the default implementation is used.
     */
    uploader?: Uploader;

    /**
     * This event is fired when a new file is added to the set of items to be uploaded.
     */
    afterItemAdded?: Function;

    /**
     * @SINCE 1.83
     *
     * This event is fired after the item is removed on click of ok button in confirmation dialog.
     */
    afterItemRemoved?: Function;

    /**
     * @SINCE 1.83
     *
     * This event is fired after item edit is confirmed.
     */
    afterItemEdited?: Function;

    /**
     * This event is fired just before a new file is added to the set of items to be uploaded.
     */
    beforeItemAdded?: Function;

    /**
     * This event is fired just before the confirmation dialog for 'Remove' action is displayed.
     */
    beforeItemRemoved?: Function;

    /**
     * This event is fired when the edit button is clicked for an item and no other item is being edited at
     * the same time.
     * If there is another item that has unsaved changes, the editing of the clicked item cannot be started.
     */
    beforeItemEdited?: Function;

    /**
     * This event is fired right before the upload process begins.
     */
    beforeUploadStarts?: Function;

    /**
     * This event is fired right after the upload process is finished.
     */
    uploadCompleted?: Function;

    /**
     * This event is fired right before the upload is terminated.
     */
    beforeUploadTermination?: Function;

    /**
     * This event is fired right after the upload is terminated.
     */
    uploadTerminated?: Function;

    /**
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file type restriction (`fileType` property).
     *
     * 	 - When the file type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    fileTypeMismatch?: Function;

    /**
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file name length restriction specified
     * 			in the `maxFileNameLength` property.
     * 	 - When the file name length restriction changes, and the file to be uploaded fails to meet the new
     * 			restriction.
     */
    fileNameLengthExceeded?: Function;

    /**
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the file size restriction specified in
     * 			the `maxFileSize` property.
     * 	 - When the file size restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    fileSizeExceeded?: Function;

    /**
     * This event is fired in either of the following cases:
     * 	 - When a file that is selected to be uploaded fails to meet the media type restriction specified in
     * 			the `mediaTypes` property.
     * 	 - When the media type restriction changes, and the file to be uploaded fails to meet the new restriction.
     */
    mediaTypeMismatch?: Function;

    /**
     * This event is fired simultaneously with the respective event in the inner {@link sap.m.List} control.
     */
    selectionChanged?: Function;
  }
}

declare module "sap/m/upload/UploadSetItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ObjectAttribute from "sap/m/ObjectAttribute";

  import Item from "sap/ui/core/Item";

  import ObjectMarker from "sap/m/ObjectMarker";

  import ObjectStatus from "sap/m/ObjectStatus";

  import CustomListItem from "sap/m/CustomListItem";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { UploadState } from "sap/m/library";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.63
   *
   * Item that represents one file to be uploaded using the {@link sap.m.upload.UploadSet} control.
   */
  export default class UploadSetItem extends UI5Element {
    /**
     * Constructor for a new UploadSetItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control.
       */
      mSettings?: $UploadSetItemSettings
    );
    /**
     * Constructor for a new UploadSetItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, will be generated automatically if no ID is provided.
       */
      sId?: string,
      /**
       * Initial settings for the new control.
       */
      mSettings?: $UploadSetItemSettings
    );

    /**
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute
    ): this;
    /**
     * @SINCE 1.90
     *
     * Adds some headerField to the aggregation {@link #getHeaderFields headerFields}.
     */
    addHeaderField(
      /**
       * The headerField to add; if empty, nothing is inserted
       */
      oHeaderField: Item
    ): this;
    /**
     * Adds some marker to the aggregation {@link #getMarkers markers}.
     */
    addMarker(
      /**
       * The marker to add; if empty, nothing is inserted
       */
      oMarker: ObjectMarker
    ): this;
    /**
     * Adds some status to the aggregation {@link #getStatuses statuses}.
     */
    addStatus(
      /**
       * The status to add; if empty, nothing is inserted
       */
      oStatus: ObjectStatus
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:openPressed openPressed} event of this `sap.m.upload.UploadSetItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSetItem` itself.
     *
     * This event is fired when an open action is invoked on an item.
     */
    attachOpenPressed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSetItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removePressed removePressed} event of this `sap.m.upload.UploadSetItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSetItem` itself.
     *
     * This event is fired when a remove action is invoked on an item.
     */
    attachRemovePressed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSetItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     */
    destroyAttributes(): this;
    /**
     * @SINCE 1.90
     *
     * Destroys all the headerFields in the aggregation {@link #getHeaderFields headerFields}.
     */
    destroyHeaderFields(): this;
    /**
     * Destroys all the markers in the aggregation {@link #getMarkers markers}.
     */
    destroyMarkers(): this;
    /**
     * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
     */
    destroyStatuses(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:openPressed openPressed} event of this `sap.m.upload.UploadSetItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOpenPressed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:removePressed removePressed} event of this
     * `sap.m.upload.UploadSetItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachRemovePressed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Downloads the item. Only possible when the item has a valid URL specified in the `url` property.
     */
    download(
      /**
       * Whether to ask for a location where to download the file or not.
       */
      bAskForLocation: boolean
    ): boolean;
    /**
     * Creates a new subclass of class sap.m.upload.UploadSetItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadSetItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:openPressed openPressed} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireOpenPressed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Fires event {@link #event:removePressed removePressed} to attached listeners.
     *
     * Listeners may prevent the default action of this event by calling the `preventDefault` method on the
     * event object. The return value of this method indicates whether the default action should be executed.
     */
    fireRemovePressed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): boolean;
    /**
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * Attributes of the item.
     */
    getAttributes(): ObjectAttribute[];
    /**
     * Gets current value of property {@link #getEnabledEdit enabledEdit}.
     *
     * Enables or disables the edit button.
     *
     * Default value is `true`.
     */
    getEnabledEdit(): boolean;
    /**
     * Gets current value of property {@link #getEnabledRemove enabledRemove}.
     *
     * Enables or disables the remove button.
     *
     * Default value is `true`.
     */
    getEnabledRemove(): boolean;
    /**
     * Gets current value of property {@link #getFileName fileName}.
     *
     * Specifies the name of the uploaded file.
     */
    getFileName(): string;
    /**
     * Returns file object.
     */
    getFileObject(): File | Blob;
    /**
     * @SINCE 1.90
     *
     * Gets content of aggregation {@link #getHeaderFields headerFields}.
     *
     * Header fields to be included in the header section of an XMLHttpRequest (XHR) request
     */
    getHeaderFields(): Item[];
    /**
     * Returns list item.
     */
    getListItem(): CustomListItem;
    /**
     * Gets content of aggregation {@link #getMarkers markers}.
     *
     * Markers of the item.
     */
    getMarkers(): ObjectMarker[];
    /**
     * Gets current value of property {@link #getMediaType mediaType}.
     *
     * Specifies the MIME type of the file.
     */
    getMediaType(): string;
    /**
     * Returns a metadata object for class sap.m.upload.UploadSetItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getStatuses statuses}.
     *
     * Statuses of the item.
     */
    getStatuses(): ObjectStatus[];
    /**
     * Gets current value of property {@link #getThumbnailUrl thumbnailUrl}.
     *
     * Specifies the URL where the thumbnail of the file is located. Can also be set to an SAPUI5 icon URL.
     */
    getThumbnailUrl(): string;
    /**
     * Gets current value of property {@link #getUploadState uploadState}.
     *
     * State of the item relevant to its upload process.
     */
    getUploadState(): UploadState | keyof typeof UploadState;
    /**
     * @SINCE 1.90
     *
     * Gets current value of property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the uploaded files will be stored. If empty, uploadUrl from the uploader is considered.
     */
    getUploadUrl(): string;
    /**
     * Gets current value of property {@link #getUrl url}.
     *
     * Specifies the URL where the file is located.
     * If the application doesn't provide a value for this property, the icon and the file name are not clickable
     * in {@link sap.m.upload.UploadSet}.
     */
    getUrl(): string;
    /**
     * Gets current value of property {@link #getVisibleEdit visibleEdit}.
     *
     * Shows or hides the edit button.
     *
     * Default value is `true`.
     */
    getVisibleEdit(): boolean;
    /**
     * Gets current value of property {@link #getVisibleRemove visibleRemove}.
     *
     * Shows or hides the remove button.
     *
     * Default value is `true`.
     */
    getVisibleRemove(): boolean;
    /**
     * Checks for the provided `sap.m.ObjectAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: ObjectAttribute
    ): int;
    /**
     * @SINCE 1.90
     *
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getHeaderFields headerFields}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfHeaderField(
      /**
       * The headerField whose index is looked for
       */
      oHeaderField: Item
    ): int;
    /**
     * Checks for the provided `sap.m.ObjectMarker` in the aggregation {@link #getMarkers markers}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfMarker(
      /**
       * The marker whose index is looked for
       */
      oMarker: ObjectMarker
    ): int;
    /**
     * Checks for the provided `sap.m.ObjectStatus` in the aggregation {@link #getStatuses statuses}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfStatus(
      /**
       * The status whose index is looked for
       */
      oStatus: ObjectStatus
    ): int;
    /**
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.90
     *
     * Inserts a headerField into the aggregation {@link #getHeaderFields headerFields}.
     */
    insertHeaderField(
      /**
       * The headerField to insert; if empty, nothing is inserted
       */
      oHeaderField: Item,
      /**
       * The `0`-based index the headerField should be inserted at; for a negative value of `iIndex`, the headerField
       * is inserted at position 0; for a value greater than the current size of the aggregation, the headerField
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a marker into the aggregation {@link #getMarkers markers}.
     */
    insertMarker(
      /**
       * The marker to insert; if empty, nothing is inserted
       */
      oMarker: ObjectMarker,
      /**
       * The `0`-based index the marker should be inserted at; for a negative value of `iIndex`, the marker is
       * inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a status into the aggregation {@link #getStatuses statuses}.
     */
    insertStatus(
      /**
       * The status to insert; if empty, nothing is inserted
       */
      oStatus: ObjectStatus,
      /**
       * The `0`-based index the status should be inserted at; for a negative value of `iIndex`, the status is
       * inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAttributes(): ObjectAttribute[];
    /**
     * @SINCE 1.90
     *
     * Removes all the controls from the aggregation {@link #getHeaderFields headerFields}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeaderFields(): Item[];
    /**
     * Removes all the controls from the aggregation {@link #getMarkers markers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllMarkers(): ObjectMarker[];
    /**
     * Removes all the controls from the aggregation {@link #getStatuses statuses}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllStatuses(): ObjectStatus[];
    /**
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | ObjectAttribute
    ): ObjectAttribute;
    /**
     * @SINCE 1.90
     *
     * Removes a headerField from the aggregation {@link #getHeaderFields headerFields}.
     */
    removeHeaderField(
      /**
       * The headerField to remove or its index or id
       */
      vHeaderField: int | string | Item
    ): Item;
    /**
     * Removes a marker from the aggregation {@link #getMarkers markers}.
     */
    removeMarker(
      /**
       * The marker to remove or its index or id
       */
      vMarker: int | string | ObjectMarker
    ): ObjectMarker;
    /**
     * Removes a status from the aggregation {@link #getStatuses statuses}.
     */
    removeStatus(
      /**
       * The status to remove or its index or id
       */
      vStatus: int | string | ObjectStatus
    ): ObjectStatus;
    /**
     * Sets a new value for property {@link #getEnabledEdit enabledEdit}.
     *
     * Enables or disables the edit button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabledEdit(
      /**
       * New value for property `enabledEdit`
       */
      bEnabledEdit?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnabledRemove enabledRemove}.
     *
     * Enables or disables the remove button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnabledRemove(
      /**
       * New value for property `enabledRemove`
       */
      bEnabledRemove?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFileName fileName}.
     *
     * Specifies the name of the uploaded file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFileName(
      /**
       * New value for property `fileName`
       */
      sFileName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getMediaType mediaType}.
     *
     * Specifies the MIME type of the file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMediaType(
      /**
       * New value for property `mediaType`
       */
      sMediaType?: string
    ): this;
    /**
     * Set current progress.
     */
    setProgress(
      /**
       * Current progress.
       */
      iProgress: int
    ): this;
    /**
     * Sets a new value for property {@link #getThumbnailUrl thumbnailUrl}.
     *
     * Specifies the URL where the thumbnail of the file is located. Can also be set to an SAPUI5 icon URL.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setThumbnailUrl(
      /**
       * New value for property `thumbnailUrl`
       */
      sThumbnailUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUploadState uploadState}.
     *
     * State of the item relevant to its upload process.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUploadState(
      /**
       * New value for property `uploadState`
       */
      sUploadState?: UploadState | keyof typeof UploadState
    ): this;
    /**
     * @SINCE 1.90
     *
     * Sets a new value for property {@link #getUploadUrl uploadUrl}.
     *
     * URL where the uploaded files will be stored. If empty, uploadUrl from the uploader is considered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUploadUrl(
      /**
       * New value for property `uploadUrl`
       */
      sUploadUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUrl url}.
     *
     * Specifies the URL where the file is located.
     * If the application doesn't provide a value for this property, the icon and the file name are not clickable
     * in {@link sap.m.upload.UploadSet}.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUrl(
      /**
       * New value for property `url`
       */
      sUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleEdit visibleEdit}.
     *
     * Shows or hides the edit button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisibleEdit(
      /**
       * New value for property `visibleEdit`
       */
      bVisibleEdit?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleRemove visibleRemove}.
     *
     * Shows or hides the remove button.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisibleRemove(
      /**
       * New value for property `visibleRemove`
       */
      bVisibleRemove?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:openPressed openPressed} event of this `sap.m.upload.UploadSetItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSetItem` itself.
     *
     * This event is fired when an open action is invoked on an item.
     */
    attachOpenPressed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSetItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:removePressed removePressed} event of this `sap.m.upload.UploadSetItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.upload.UploadSetItem` itself.
     *
     * This event is fired when a remove action is invoked on an item.
     */
    attachRemovePressed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.upload.UploadSetItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $UploadSetItemSettings extends $ElementSettings {
    /**
     * Enables or disables the remove button.
     */
    enabledRemove?: boolean | PropertyBindingInfo;

    /**
     * Enables or disables the edit button.
     */
    enabledEdit?: boolean | PropertyBindingInfo;

    /**
     * Specifies the name of the uploaded file.
     */
    fileName?: string | PropertyBindingInfo;

    /**
     * Specifies the MIME type of the file.
     */
    mediaType?: string | PropertyBindingInfo;

    /**
     * Specifies the URL where the thumbnail of the file is located. Can also be set to an SAPUI5 icon URL.
     */
    thumbnailUrl?: string | PropertyBindingInfo;

    /**
     * State of the item relevant to its upload process.
     */
    uploadState?:
      | (UploadState | keyof typeof UploadState)
      | PropertyBindingInfo;

    /**
     * Specifies the URL where the file is located.
     * If the application doesn't provide a value for this property, the icon and the file name are not clickable
     * in {@link sap.m.upload.UploadSet}.
     */
    url?: string | PropertyBindingInfo;

    /**
     * Shows or hides the remove button.
     */
    visibleRemove?: boolean | PropertyBindingInfo;

    /**
     * Shows or hides the edit button.
     */
    visibleEdit?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.90
     *
     * URL where the uploaded files will be stored. If empty, uploadUrl from the uploader is considered.
     */
    uploadUrl?: string | PropertyBindingInfo;

    /**
     * Attributes of the item.
     */
    attributes?: ObjectAttribute[] | ObjectAttribute | AggregationBindingInfo;

    /**
     * Markers of the item.
     */
    markers?: ObjectMarker[] | ObjectMarker | AggregationBindingInfo;

    /**
     * Statuses of the item.
     */
    statuses?: ObjectStatus[] | ObjectStatus | AggregationBindingInfo;

    /**
     * @SINCE 1.90
     *
     * Header fields to be included in the header section of an XMLHttpRequest (XHR) request
     */
    headerFields?: Item[] | Item | AggregationBindingInfo;

    /**
     * This event is fired when an open action is invoked on an item.
     */
    openPressed?: Function;

    /**
     * This event is fired when a remove action is invoked on an item.
     */
    removePressed?: Function;
  }
}

declare module "sap/m/UploadCollection" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import UploadCollectionParameter from "sap/m/UploadCollectionParameter";

  import UploadCollectionItem from "sap/m/UploadCollectionItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import Toolbar from "sap/m/Toolbar";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ListMode, ListSeparators } from "sap/m/library";

  import OverflowToolbar from "sap/m/OverflowToolbar";

  /**
   * @deprecated (since 1.88) - replaced by {@link sap.m.upload.UploadSet}
   *
   * This control allows you to upload single or multiple files from your devices (desktop, tablet or phone)
   * and attach them to the application.
   *
   * The consuming application needs to take into account that the consistency checks of the model during
   * the upload of the file need to be performed, for example, if the user is editing or deleting a file.
   *
   *  As of version 1.63, there is an {@link sap.m.upload.UploadSet} control available that is based on this
   * control. {@link sap.m.upload.UploadSet} provides enhanced handling of headers and requests, unified behavior
   * of instant and deferred uploads, as well as improved progress indication.
   */
  export default class UploadCollection extends Control {
    /**
     * Constructor for a new UploadCollection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionSettings
    );
    /**
     * Constructor for a new UploadCollection.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionSettings
    );

    /**
     * Adds some headerParameter to the aggregation {@link #getHeaderParameters headerParameters}.
     */
    addHeaderParameter(
      /**
       * The headerParameter to add; if empty, nothing is inserted
       */
      oHeaderParameter: UploadCollectionParameter
    ): this;
    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: UploadCollectionItem
    ): this;
    /**
     * Adds some parameter to the aggregation {@link #getParameters parameters}.
     */
    addParameter(
      /**
       * The parameter to add; if empty, nothing is inserted
       */
      oParameter: UploadCollectionParameter
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered before the actual upload starts. An event is fired per file. All the necessary
     * header parameters should be set here.
     */
    attachBeforeUploadStarts(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters
     * and headerParameters which will be dispatched to the embedded FileUploader control. Restriction: parameters
     * and headerParameters are not supported by Internet Explorer 9.
     */
    attachChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileDeleted fileDeleted} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
     */
    attachFileDeleted(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filenameLengthExceed filenameLengthExceed} event
     * of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength
     * property (only if provided by the application).
     */
    attachFilenameLengthExceed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileRenamed fileRenamed} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file name is changed.
     */
    attachFileRenamed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileSizeExceed fileSizeExceed} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property
     * was provided by the application). This event is not supported by Internet Explorer 9.
     */
    attachFileSizeExceed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:typeMissmatch typeMissmatch} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file type or the MIME type don't match the permitted types (only if the
     * fileType property or the mimeType property are provided by the application).
     */
    attachTypeMissmatch(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadComplete uploadComplete} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered as soon as the upload request is completed.
     */
    attachUploadComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered as soon as the upload request was terminated by the user.
     */
    attachUploadTerminated(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the headerParameters in the aggregation {@link #getHeaderParameters headerParameters}.
     */
    destroyHeaderParameters(): this;
    /**
     * @SINCE 1.44.0
     *
     * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
     */
    destroyInfoToolbar(): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Destroys all the parameters in the aggregation {@link #getParameters parameters}.
     */
    destroyParameters(): this;
    /**
     * @SINCE 1.34.0
     *
     * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
     */
    destroyToolbar(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachBeforeUploadStarts(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileDeleted fileDeleted} event of this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileDeleted(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filenameLengthExceed filenameLengthExceed}
     * event of this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFilenameLengthExceed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileRenamed fileRenamed} event of this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileRenamed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:fileSizeExceed fileSizeExceed} event of this
     * `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFileSizeExceed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:typeMissmatch typeMissmatch} event of this
     * `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTypeMissmatch(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadComplete uploadComplete} event of this
     * `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.UploadCollection`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUploadTerminated(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Downloads the given item. This function delegates to {@link sap.m.UploadCollectionItem#download uploadCollectionItem.download}.
     */
    downloadItem(
      /**
       * The item to download. This parameter is mandatory.
       */
      uploadCollectionItem: UploadCollectionItem,
      /**
       * Decides whether to ask for a location to download or not.
       */
      askForLocation: boolean
    ): boolean;
    /**
     * Creates a new subclass of class sap.m.UploadCollection with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadCollection>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:beforeUploadStarts beforeUploadStarts} to attached listeners.
     */
    fireBeforeUploadStarts(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Specifies the name of the file to be uploaded.
         */
        fileName?: string;
        /**
         * Adds a header parameter to the file that will be uploaded.
         */
        addHeaderParameter?: Function;
        /**
         * Returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
         */
        getHeaderParameter?: Function;
      }
    ): this;
    /**
     * Fires event {@link #event:change change} to attached listeners.
     */
    fireChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `files` parameter
         * instead.
         */
        documentId?: string;
        /**
         * A FileList of individually selected files from the underlying system. See www.w3.org for the FileList
         * Interface definition. Restriction: Internet Explorer 9 supports only single file with property file.name.
         * Since version 1.28.0.
         */
        files?: object[];
      }
    ): this;
    /**
     * Fires event {@link #event:fileDeleted fileDeleted} to attached listeners.
     */
    fireFileDeleted(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `item` parameter
         * instead.
         */
        documentId?: string;
        /**
         * An item to be deleted from the collection. Since version 1.28.0.
         */
        item?: UploadCollectionItem;
      }
    ): this;
    /**
     * Fires event {@link #event:filenameLengthExceed filenameLengthExceed} to attached listeners.
     */
    fireFilenameLengthExceed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `files` parameter
         * instead.
         */
        documentId?: string;
        /**
         * A FileList of individually selected files from the underlying system. Restriction: Internet Explorer
         * 9 supports only single file with property file.name. Since version 1.28.0.
         */
        files?: object[];
      }
    ): this;
    /**
     * Fires event {@link #event:fileRenamed fileRenamed} to attached listeners.
     */
    fireFileRenamed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `item` parameter
         * instead.
         */
        documentId?: string;
        /**
         * The new file name. This parameter is deprecated since 1.28.0. Use the `item` parameter instead.
         */
        fileName?: string;
        /**
         * The renamed UI element as an UploadCollectionItem. Since 1.28.0.
         */
        item?: UploadCollectionItem;
      }
    ): this;
    /**
     * Fires event {@link #event:fileSizeExceed fileSizeExceed} to attached listeners.
     */
    fireFileSizeExceed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `files` parameter
         * instead.
         */
        documentId?: string;
        /**
         * The size in MB of a file to be uploaded. This parameter is deprecated since 1.28.0. Use the `files` parameter
         * instead.
         */
        fileSize?: string;
        /**
         * A FileList of individually selected files from the underlying system. Restriction: Internet Explorer
         * 9 supports only single file with property file.name. Since 1.28.0.
         */
        files?: object[];
      }
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The item whose selection has changed. In `MultiSelect` mode, only the topmost selected item is returned.
         * This parameter can be used for single-selection modes.
         */
        selectedItem?: UploadCollectionItem;
        /**
         * Array of items whose selection has changed. This parameter can be used for `MultiSelect` mode.
         */
        selectedItems?: UploadCollectionItem[];
        /**
         * Indicates whether the `listItem` parameter is selected or not.
         */
        selected?: boolean;
      }
    ): this;
    /**
     * Fires event {@link #event:typeMissmatch typeMissmatch} to attached listeners.
     */
    fireTypeMissmatch(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A unique Id of the attached document. This parameter is deprecated since 1.28.0. Use the `files` parameter
         * instead.
         */
        documentId?: string;
        /**
         * File type. This parameter is deprecated since 1.28.0. Use the `files` parameter instead.
         */
        fileType?: string;
        /**
         * MIME type. This parameter is deprecated since 1.28.0. Use the `files` parameter instead.
         */
        mimeType?: string;
        /**
         * A FileList of individually selected files from the underlying system. Restriction: Internet Explorer
         * 9 supports only single file. Since 1.28.0.
         */
        files?: object[];
      }
    ): this;
    /**
     * Fires event {@link #event:uploadComplete uploadComplete} to attached listeners.
     */
    fireUploadComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Ready state XHR. This parameter is deprecated since 1.28.0. Use the `files` parameter instead.
         */
        readyStateXHR?: string;
        /**
         * Response of the completed upload request. This parameter is deprecated since 1.28.0. Use the `files`
         * parameter instead.
         */
        response?: string;
        /**
         * Status Code of the completed upload event. This parameter is deprecated since 1.28.0. Use the `files`
         * parameter instead.
         */
        status?: string;
        /**
         * A list of uploaded files. Each entry contains the following members. fileName : The name of a file to
         * be uploaded. response : Response message which comes from the server. On the server side, this response
         * has to be put within the 'body' tags of the response document of the iFrame. It can consist of a return
         * code and an optional message. This does not work in cross-domain scenarios. reponse : deprecated Since
         * version 1.48.0. This parameter is deprecated, use parameter response instead. responseRaw : HTTP-Response
         * which comes from the server. This property is not supported by Internet Explorer Versions lower than
         * 9. status : Status of the XHR request. This property is not supported by Internet Explorer 9 and lower.
         * headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each header-field
         * is reflected by a property in the header-object, with the property value reflecting the header-field's
         * content. This property is not supported by Internet Explorer 9 and lower. Since 1.28.0.
         */
        files?: object[];
      }
    ): this;
    /**
     * Fires event {@link #event:uploadTerminated uploadTerminated} to attached listeners.
     */
    fireUploadTerminated(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Specifies the name of the file of which the upload is to be terminated.
         */
        fileName?: string;
        /**
         * This callback function returns the corresponding header parameter (type sap.m.UploadCollectionParameter)
         * if available.
         */
        getHeaderParameter?: Function;
      }
    ): this;
    /**
     * Gets current value of property {@link #getFileType fileType}.
     *
     * Defines the allowed file types for the upload. The chosen files will be checked against an array of file
     * types. If at least one file does not fit the file type requirements, the upload is prevented. Example:
     * ["jpg", "png", "bmp"].
     */
    getFileType(): string[];
    /**
     * Gets content of aggregation {@link #getHeaderParameters headerParameters}.
     *
     * Specifies the header parameters for the FileUploader that are submitted only with XHR requests. Header
     * parameters are not supported by Internet Explorer 8 and 9.
     */
    getHeaderParameters(): UploadCollectionParameter[];
    /**
     * @SINCE 1.44.0
     *
     * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
     *
     * Specifies the info toolbar for filtering information. Sorting information will not displayed.
     */
    getInfoToolbar(): Toolbar;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getInstantUpload instantUpload}.
     *
     * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new
     * FileUploader instance is created to ensure that multiple files can be chosen.
     *
     * Default value is `true`.
     */
    getInstantUpload(): boolean;
    /**
     * @SINCE 1.50.0
     *
     * Provides access to the internally used request headers to allow adding them to the "Access-Control-Allow-Headers"
     * header parameter if needed.
     */
    getInternalRequestHeaderNames(): string[];
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Uploaded items.
     */
    getItems(): UploadCollectionItem[];
    /**
     * Gets current value of property {@link #getMaximumFilenameLength maximumFilenameLength}.
     *
     * Specifies the maximum length of a file name. If the maximum file name length is exceeded, the corresponding
     * event 'filenameLengthExceed' is triggered.
     */
    getMaximumFilenameLength(): int;
    /**
     * Gets current value of property {@link #getMaximumFileSize maximumFileSize}.
     *
     * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
     * This property is not supported by Internet Explorer 8 and 9.
     */
    getMaximumFileSize(): float;
    /**
     * Returns a metadata object for class sap.m.UploadCollection.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMimeType mimeType}.
     *
     * Defines the allowed MIME types of files to be uploaded. The chosen files will be checked against an array
     * of MIME types. If at least one file does not fit the MIME type requirements, the upload is prevented.
     * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
     */
    getMimeType(): string[];
    /**
     * @SINCE 1.34.0
     *
     * Gets current value of property {@link #getMode mode}.
     *
     * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
     * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
     * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None. In
     * addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and
     * will be automatically set to sap.m.ListMode.None.
     *
     * Default value is `"None"`.
     */
    getMode(): ListMode | keyof typeof ListMode;
    /**
     * Gets current value of property {@link #getMultiple multiple}.
     *
     * Lets the user select multiple files from the same folder and then upload them. Internet Explorer 8 and
     * 9 do not support this property. Please note that the various operating systems for mobile devices can
     * react differently to the property so that fewer upload functions may be available in some cases.
     *
     * If multiple property is set to false, the control shows an error message if more than one file is chosen
     * for drag & drop.
     *
     * Default value is `false`.
     */
    getMultiple(): boolean;
    /**
     * @SINCE 1.46.0
     *
     * Gets current value of property {@link #getNoDataDescription noDataDescription}.
     *
     * Allows you to set your own text for the 'No data' description label.
     */
    getNoDataDescription(): string;
    /**
     * Gets current value of property {@link #getNoDataText noDataText}.
     *
     * Allows you to set your own text for the 'No data' text label.
     */
    getNoDataText(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getNumberOfAttachmentsText numberOfAttachmentsText}.
     *
     * Sets the title text in the toolbar of the list of attachments. To show as well the number of attachments
     * in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
     * If a new title is set, the default is deactivated. The default value is set to language-dependent "Attachments
     * (n)".
     */
    getNumberOfAttachmentsText(): string;
    /**
     * Gets content of aggregation {@link #getParameters parameters}.
     *
     * Specifies the parameters for the FileUploader that are rendered as a hidden input field.
     */
    getParameters(): UploadCollectionParameter[];
    /**
     * Gets current value of property {@link #getSameFilenameAllowed sameFilenameAllowed}.
     *
     * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an
     * already existing file name in the list.
     *
     * Default value is `false`.
     */
    getSameFilenameAllowed(): boolean;
    /**
     * @SINCE 1.34.0
     *
     * Retrieves the currently selected UploadCollectionItem.
     */
    getSelectedItem(): UploadCollectionItem | null;
    /**
     * @SINCE 1.34.0
     *
     * Returns an array containing the selected UploadCollectionItems.
     */
    getSelectedItems(): UploadCollectionItem[];
    /**
     * Gets current value of property {@link #getShowSeparators showSeparators}.
     *
     * Defines whether separators are shown between list items.
     *
     * Default value is `"All"`.
     */
    getShowSeparators(): ListSeparators | keyof typeof ListSeparators;
    /**
     * @SINCE 1.42.0
     *
     * Gets current value of property {@link #getTerminationEnabled terminationEnabled}.
     *
     * If true, the button that is used to terminate the instant file upload gets visible. The button normally
     * appears when a file is being uploaded.
     *
     * Default value is `true`.
     */
    getTerminationEnabled(): boolean;
    /**
     * @SINCE 1.34.0
     *
     * Gets content of aggregation {@link #getToolbar toolbar}.
     *
     * Specifies the toolbar.
     */
    getToolbar(): OverflowToolbar;
    /**
     * @SINCE 1.42.0
     *
     * Gets current value of property {@link #getUploadButtonInvisible uploadButtonInvisible}.
     *
     * If true, the button used for uploading files is invisible.
     *
     * Default value is `false`.
     */
    getUploadButtonInvisible(): boolean;
    /**
     * Gets current value of property {@link #getUploadEnabled uploadEnabled}.
     *
     * Enables the upload of a file. If property instantUpload is false it is not allowed to change uploadEnabled
     * at runtime.
     *
     * Default value is `true`.
     */
    getUploadEnabled(): boolean;
    /**
     * Gets current value of property {@link #getUploadUrl uploadUrl}.
     *
     * Specifies the URL where the uploaded files have to be stored.
     *
     * Default value is `"../../../upload"`.
     */
    getUploadUrl(): string;
    /**
     * Checks for the provided `sap.m.UploadCollectionParameter` in the aggregation {@link #getHeaderParameters
     * headerParameters}. and returns its index if found or -1 otherwise.
     */
    indexOfHeaderParameter(
      /**
       * The headerParameter whose index is looked for
       */
      oHeaderParameter: UploadCollectionParameter
    ): int;
    /**
     * Checks for the provided `sap.m.UploadCollectionItem` in the aggregation {@link #getItems items}. and
     * returns its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: UploadCollectionItem
    ): int;
    /**
     * Checks for the provided `sap.m.UploadCollectionParameter` in the aggregation {@link #getParameters parameters}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfParameter(
      /**
       * The parameter whose index is looked for
       */
      oParameter: UploadCollectionParameter
    ): int;
    /**
     * Inserts a headerParameter into the aggregation {@link #getHeaderParameters headerParameters}.
     */
    insertHeaderParameter(
      /**
       * The headerParameter to insert; if empty, nothing is inserted
       */
      oHeaderParameter: UploadCollectionParameter,
      /**
       * The `0`-based index the headerParameter should be inserted at; for a negative value of `iIndex`, the
       * headerParameter is inserted at position 0; for a value greater than the current size of the aggregation,
       * the headerParameter is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: UploadCollectionItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Inserts a parameter into the aggregation {@link #getParameters parameters}.
     */
    insertParameter(
      /**
       * The parameter to insert; if empty, nothing is inserted
       */
      oParameter: UploadCollectionParameter,
      /**
       * The `0`-based index the parameter should be inserted at; for a negative value of `iIndex`, the parameter
       * is inserted at position 0; for a value greater than the current size of the aggregation, the parameter
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.38.0
     *
     * Opens the FileUploader dialog. When an UploadCollectionItem is provided, this method can be used to update
     * a file with a new version. In this case, the upload progress can be sequenced using the events: beforeUploadStarts,
     * uploadComplete and uploadTerminated. For this use, multiple properties from the UploadCollection have
     * to be set to false. If no UploadCollectionItem is provided, only the dialog opens and no further configuration
     * of the UploadCollection is needed.
     */
    openFileDialog(
      /**
       * The item to update with a new version. This parameter is mandatory.
       */
      item: UploadCollectionItem
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getHeaderParameters headerParameters}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllHeaderParameters(): UploadCollectionParameter[];
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): UploadCollectionItem[];
    /**
     * Removes all the controls from the aggregation {@link #getParameters parameters}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllParameters(): UploadCollectionParameter[];
    /**
     * Removes a headerParameter from the aggregation {@link #getHeaderParameters headerParameters}.
     */
    removeHeaderParameter(
      /**
       * The headerParameter to remove or its index or id
       */
      vHeaderParameter: int | string | UploadCollectionParameter
    ): UploadCollectionParameter;
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | UploadCollectionItem
    ): UploadCollectionItem;
    /**
     * Removes a parameter from the aggregation {@link #getParameters parameters}.
     */
    removeParameter(
      /**
       * The parameter to remove or its index or id
       */
      vParameter: int | string | UploadCollectionParameter
    ): UploadCollectionParameter;
    /**
     * @SINCE 1.34.0
     *
     * Select all items in "MultiSelection" mode.
     */
    selectAll(): this;
    /**
     * Sets a new value for property {@link #getFileType fileType}.
     *
     * Defines the allowed file types for the upload. The chosen files will be checked against an array of file
     * types. If at least one file does not fit the file type requirements, the upload is prevented. Example:
     * ["jpg", "png", "bmp"].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFileType(
      /**
       * New value for property `fileType`
       */
      sFileType?: string[]
    ): this;
    /**
     * @SINCE 1.44.0
     *
     * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
     */
    setInfoToolbar(
      /**
       * The infoToolbar to set
       */
      oInfoToolbar: Toolbar
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getInstantUpload instantUpload}.
     *
     * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new
     * FileUploader instance is created to ensure that multiple files can be chosen.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setInstantUpload(
      /**
       * New value for property `instantUpload`
       */
      bInstantUpload?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getMaximumFilenameLength maximumFilenameLength}.
     *
     * Specifies the maximum length of a file name. If the maximum file name length is exceeded, the corresponding
     * event 'filenameLengthExceed' is triggered.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaximumFilenameLength(
      /**
       * New value for property `maximumFilenameLength`
       */
      iMaximumFilenameLength?: int
    ): this;
    /**
     * Sets a new value for property {@link #getMaximumFileSize maximumFileSize}.
     *
     * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
     * This property is not supported by Internet Explorer 8 and 9.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMaximumFileSize(
      /**
       * New value for property `maximumFileSize`
       */
      fMaximumFileSize?: float
    ): this;
    /**
     * Sets a new value for property {@link #getMimeType mimeType}.
     *
     * Defines the allowed MIME types of files to be uploaded. The chosen files will be checked against an array
     * of MIME types. If at least one file does not fit the MIME type requirements, the upload is prevented.
     * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMimeType(
      /**
       * New value for property `mimeType`
       */
      sMimeType?: string[]
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets a new value for property {@link #getMode mode}.
     *
     * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
     * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
     * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None. In
     * addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and
     * will be automatically set to sap.m.ListMode.None.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"None"`.
     */
    setMode(
      /**
       * New value for property `mode`
       */
      sMode?: ListMode | keyof typeof ListMode
    ): this;
    /**
     * Sets a new value for property {@link #getMultiple multiple}.
     *
     * Lets the user select multiple files from the same folder and then upload them. Internet Explorer 8 and
     * 9 do not support this property. Please note that the various operating systems for mobile devices can
     * react differently to the property so that fewer upload functions may be available in some cases.
     *
     * If multiple property is set to false, the control shows an error message if more than one file is chosen
     * for drag & drop.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setMultiple(
      /**
       * New value for property `multiple`
       */
      bMultiple?: boolean
    ): this;
    /**
     * @SINCE 1.46.0
     *
     * Sets a new value for property {@link #getNoDataDescription noDataDescription}.
     *
     * Allows you to set your own text for the 'No data' description label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataDescription(
      /**
       * New value for property `noDataDescription`
       */
      sNoDataDescription?: string
    ): this;
    /**
     * Sets a new value for property {@link #getNoDataText noDataText}.
     *
     * Allows you to set your own text for the 'No data' text label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNoDataText(
      /**
       * New value for property `noDataText`
       */
      sNoDataText?: string
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getNumberOfAttachmentsText numberOfAttachmentsText}.
     *
     * Sets the title text in the toolbar of the list of attachments. To show as well the number of attachments
     * in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
     * If a new title is set, the default is deactivated. The default value is set to language-dependent "Attachments
     * (n)".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setNumberOfAttachmentsText(
      /**
       * New value for property `numberOfAttachmentsText`
       */
      sNumberOfAttachmentsText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSameFilenameAllowed sameFilenameAllowed}.
     *
     * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an
     * already existing file name in the list.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSameFilenameAllowed(
      /**
       * New value for property `sameFilenameAllowed`
       */
      bSameFilenameAllowed?: boolean
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Selects or deselects the given list item.
     */
    setSelectedItem(
      /**
       * The item whose selection is to be changed. This parameter is mandatory.
       */
      uploadCollectionItem: UploadCollectionItem,
      /**
       * The selection state of the item.
       */
      select?: boolean
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets an UploadCollectionItem to be selected by ID. In single selection mode, the method removes the previous
     * selection.
     */
    setSelectedItemById(
      /**
       * The ID of the item whose selection is to be changed.
       */
      id: string,
      /**
       * The selection state of the item.
       */
      select?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getShowSeparators showSeparators}.
     *
     * Defines whether separators are shown between list items.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"All"`.
     */
    setShowSeparators(
      /**
       * New value for property `showSeparators`
       */
      sShowSeparators?: ListSeparators | keyof typeof ListSeparators
    ): this;
    /**
     * @SINCE 1.42.0
     *
     * Sets a new value for property {@link #getTerminationEnabled terminationEnabled}.
     *
     * If true, the button that is used to terminate the instant file upload gets visible. The button normally
     * appears when a file is being uploaded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setTerminationEnabled(
      /**
       * New value for property `terminationEnabled`
       */
      bTerminationEnabled?: boolean
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets the aggregated {@link #getToolbar toolbar}.
     */
    setToolbar(
      /**
       * The toolbar to set
       */
      oToolbar: OverflowToolbar
    ): this;
    /**
     * @SINCE 1.42.0
     *
     * Sets a new value for property {@link #getUploadButtonInvisible uploadButtonInvisible}.
     *
     * If true, the button used for uploading files is invisible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setUploadButtonInvisible(
      /**
       * New value for property `uploadButtonInvisible`
       */
      bUploadButtonInvisible?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUploadEnabled uploadEnabled}.
     *
     * Enables the upload of a file. If property instantUpload is false it is not allowed to change uploadEnabled
     * at runtime.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setUploadEnabled(
      /**
       * New value for property `uploadEnabled`
       */
      bUploadEnabled?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getUploadUrl uploadUrl}.
     *
     * Specifies the URL where the uploaded files have to be stored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"../../../upload"`.
     */
    setUploadUrl(
      /**
       * New value for property `uploadUrl`
       */
      sUploadUrl?: string
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * @SINCE 1.30.0
     *
     * Starts the upload for all selected files.
     */
    upload(): void;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:beforeUploadStarts beforeUploadStarts} event
     * of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered before the actual upload starts. An event is fired per file. All the necessary
     * header parameters should be set here.
     */
    attachBeforeUploadStarts(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters
     * and headerParameters which will be dispatched to the embedded FileUploader control. Restriction: parameters
     * and headerParameters are not supported by Internet Explorer 9.
     */
    attachChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileDeleted fileDeleted} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
     */
    attachFileDeleted(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filenameLengthExceed filenameLengthExceed} event
     * of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength
     * property (only if provided by the application).
     */
    attachFilenameLengthExceed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileRenamed fileRenamed} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file name is changed.
     */
    attachFileRenamed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:fileSizeExceed fileSizeExceed} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property
     * was provided by the application). This event is not supported by Internet Explorer 9.
     */
    attachFileSizeExceed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:typeMissmatch typeMissmatch} event of this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered when the file type or the MIME type don't match the permitted types (only if the
     * fileType property or the mimeType property are provided by the application).
     */
    attachTypeMissmatch(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadComplete uploadComplete} event of this
     * `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered as soon as the upload request is completed.
     */
    attachUploadComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:uploadTerminated uploadTerminated} event of
     * this `sap.m.UploadCollection`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollection` itself.
     *
     * The event is triggered as soon as the upload request was terminated by the user.
     */
    attachUploadTerminated(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollection` itself
       */
      oListener?: object
    ): this;
  }

  export interface $UploadCollectionSettings extends $ControlSettings {
    /**
     * Defines the allowed file types for the upload. The chosen files will be checked against an array of file
     * types. If at least one file does not fit the file type requirements, the upload is prevented. Example:
     * ["jpg", "png", "bmp"].
     */
    fileType?: string[] | PropertyBindingInfo;

    /**
     * Specifies the maximum length of a file name. If the maximum file name length is exceeded, the corresponding
     * event 'filenameLengthExceed' is triggered.
     */
    maximumFilenameLength?: int | PropertyBindingInfo;

    /**
     * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
     * This property is not supported by Internet Explorer 8 and 9.
     */
    maximumFileSize?: float | PropertyBindingInfo;

    /**
     * Defines the allowed MIME types of files to be uploaded. The chosen files will be checked against an array
     * of MIME types. If at least one file does not fit the MIME type requirements, the upload is prevented.
     * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
     */
    mimeType?: string[] | PropertyBindingInfo;

    /**
     * Lets the user select multiple files from the same folder and then upload them. Internet Explorer 8 and
     * 9 do not support this property. Please note that the various operating systems for mobile devices can
     * react differently to the property so that fewer upload functions may be available in some cases.
     *
     * If multiple property is set to false, the control shows an error message if more than one file is chosen
     * for drag & drop.
     */
    multiple?: boolean | PropertyBindingInfo;

    /**
     * Allows you to set your own text for the 'No data' text label.
     */
    noDataText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.46.0
     *
     * Allows you to set your own text for the 'No data' description label.
     */
    noDataDescription?: string | PropertyBindingInfo;

    /**
     * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an
     * already existing file name in the list.
     */
    sameFilenameAllowed?: boolean | PropertyBindingInfo;

    /**
     * Defines whether separators are shown between list items.
     */
    showSeparators?:
      | (ListSeparators | keyof typeof ListSeparators)
      | PropertyBindingInfo;

    /**
     * Enables the upload of a file. If property instantUpload is false it is not allowed to change uploadEnabled
     * at runtime.
     */
    uploadEnabled?: boolean | PropertyBindingInfo;

    /**
     * Specifies the URL where the uploaded files have to be stored.
     */
    uploadUrl?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new
     * FileUploader instance is created to ensure that multiple files can be chosen.
     */
    instantUpload?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Sets the title text in the toolbar of the list of attachments. To show as well the number of attachments
     * in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
     * If a new title is set, the default is deactivated. The default value is set to language-dependent "Attachments
     * (n)".
     */
    numberOfAttachmentsText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
     * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
     * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None. In
     * addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and
     * will be automatically set to sap.m.ListMode.None.
     */
    mode?: (ListMode | keyof typeof ListMode) | PropertyBindingInfo;

    /**
     * @SINCE 1.42.0
     *
     * If true, the button used for uploading files is invisible.
     */
    uploadButtonInvisible?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.42.0
     *
     * If true, the button that is used to terminate the instant file upload gets visible. The button normally
     * appears when a file is being uploaded.
     */
    terminationEnabled?: boolean | PropertyBindingInfo;

    /**
     * Uploaded items.
     */
    items?:
      | UploadCollectionItem[]
      | UploadCollectionItem
      | AggregationBindingInfo;

    /**
     * Specifies the header parameters for the FileUploader that are submitted only with XHR requests. Header
     * parameters are not supported by Internet Explorer 8 and 9.
     */
    headerParameters?:
      | UploadCollectionParameter[]
      | UploadCollectionParameter
      | AggregationBindingInfo;

    /**
     * Specifies the parameters for the FileUploader that are rendered as a hidden input field.
     */
    parameters?:
      | UploadCollectionParameter[]
      | UploadCollectionParameter
      | AggregationBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * Specifies the toolbar.
     */
    toolbar?: OverflowToolbar;

    /**
     * @SINCE 1.44.0
     *
     * Specifies the info toolbar for filtering information. Sorting information will not displayed.
     */
    infoToolbar?: Toolbar;

    /**
     * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters
     * and headerParameters which will be dispatched to the embedded FileUploader control. Restriction: parameters
     * and headerParameters are not supported by Internet Explorer 9.
     */
    change?: Function;

    /**
     * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
     */
    fileDeleted?: Function;

    /**
     * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength
     * property (only if provided by the application).
     */
    filenameLengthExceed?: Function;

    /**
     * The event is triggered when the file name is changed.
     */
    fileRenamed?: Function;

    /**
     * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property
     * was provided by the application). This event is not supported by Internet Explorer 9.
     */
    fileSizeExceed?: Function;

    /**
     * The event is triggered when the file type or the MIME type don't match the permitted types (only if the
     * fileType property or the mimeType property are provided by the application).
     */
    typeMissmatch?: Function;

    /**
     * The event is triggered as soon as the upload request is completed.
     */
    uploadComplete?: Function;

    /**
     * The event is triggered as soon as the upload request was terminated by the user.
     */
    uploadTerminated?: Function;

    /**
     * The event is triggered before the actual upload starts. An event is fired per file. All the necessary
     * header parameters should be set here.
     */
    beforeUploadStarts?: Function;

    /**
     * @SINCE 1.36.0
     *
     * Fires when selection is changed via user interaction inside the control.
     */
    selectionChange?: Function;
  }
}

declare module "sap/m/UploadCollectionItem" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ObjectAttribute from "sap/m/ObjectAttribute";

  import ObjectMarker from "sap/m/ObjectMarker";

  import ObjectStatus from "sap/m/ObjectStatus";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import { ID } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import FileUploader from "sap/ui/unified/FileUploader";

  /**
   * @SINCE 1.26.0
   *
   * Defines a structure of the element of the 'items' aggregation.
   */
  export default class UploadCollectionItem extends UI5Element {
    /**
     * Constructor for a new UploadCollectionItem
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionItemSettings
    );
    /**
     * Constructor for a new UploadCollectionItem
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, will be generated automatically if no ID is provided.
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionItemSettings
    );

    /**
     * @SINCE 1.30.0
     *
     * Adds some attribute to the aggregation {@link #getAttributes attributes}.
     */
    addAttribute(
      /**
       * The attribute to add; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Adds some marker to the aggregation {@link #getMarkers markers}.
     */
    addMarker(
      /**
       * The marker to add; if empty, nothing is inserted
       */
      oMarker: ObjectMarker
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Adds some status to the aggregation {@link #getStatuses statuses}.
     */
    addStatus(
      /**
       * The status to add; if empty, nothing is inserted
       */
      oStatus: ObjectStatus
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:deletePress deletePress} event of this `sap.m.UploadCollectionItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollectionItem` itself.
     *
     * When a deletePress event handler is attached to the item and the user presses the delete button, this
     * event is triggered. If this event is triggered, it overwrites the default delete behavior of UploadCollection
     * and the fileDeleted event of UploadCollection is not triggered.
     */
    attachDeletePress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollectionItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.UploadCollectionItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollectionItem` itself.
     *
     * This event is triggered when the user presses the filename link. If this event is provided, it overwrites
     * the default behavior of opening the file.
     */
    attachPress(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollectionItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Binds aggregation {@link #getAttributes attributes} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindAttributes(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Binds aggregation {@link #getMarkers markers} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindMarkers(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Binds aggregation {@link #getStatuses statuses} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindStatuses(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
     */
    destroyAttributes(): this;
    /**
     * @SINCE 1.40.0
     *
     * Destroys all the markers in the aggregation {@link #getMarkers markers}.
     */
    destroyMarkers(): this;
    /**
     * @SINCE 1.30.0
     *
     * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
     */
    destroyStatuses(): this;
    /**
     * @SINCE 1.50.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:deletePress deletePress} event of this `sap.m.UploadCollectionItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachDeletePress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.m.UploadCollectionItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachPress(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.36.0
     *
     * Downloads the item. The sap.ui.core.util.File method is used here. For further details on this method,
     * see {sap.ui.core.util.File.save}.
     */
    download(
      /**
       * Decides whether to ask for a location to download or not.
       */
      askForLocation: boolean
    ): boolean;
    /**
     * Creates a new subclass of class sap.m.UploadCollectionItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadCollectionItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * @SINCE 1.50.0
     *
     * Fires event {@link #event:deletePress deletePress} to attached listeners.
     */
    fireDeletePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Fires event {@link #event:press press} to attached listeners.
     */
    firePress(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Gets current value of property {@link #getAriaLabelForPicture ariaLabelForPicture}.
     *
     * Aria label for the icon (or for the image).
     */
    getAriaLabelForPicture(): string;
    /**
     * @SINCE 1.30.0
     *
     * Gets content of aggregation {@link #getAttributes attributes}.
     *
     * Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size' attributes are
     * displayed after an item has been uploaded. Additionally, the Active property of sap.m.ObjectAttribute
     * is supported.
     *  Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition
     * to this attribute, two attributes with the same title are displayed as these properties get displayed
     * as an attribute. Example: An application passes the property ‘contributor’ with the value ‘A’ and the
     * aggregation attributes ‘contributor’: ‘B’. As a result, the attributes ‘contributor’:’A’ and ‘contributor’:’B’
     * are displayed. To make sure the title does not appear twice, check if one of the properties is filled.
     */
    getAttributes(): ObjectAttribute[];
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead. However,
     * if the property is filled, it is displayed as an attribute. To make sure the title does not appear twice,
     * do not use the property.
     *
     * Gets current value of property {@link #getContributor contributor}.
     *
     * Specifies the name of the user who uploaded the file.
     */
    getContributor(): string;
    /**
     * Gets current value of property {@link #getDocumentId documentId}.
     *
     * Specifies a unique identifier of the file (created by the application).
     */
    getDocumentId(): string;
    /**
     * Gets current value of property {@link #getEnableDelete enableDelete}.
     *
     * Enables/Disables the Delete button. If the value is true, the Delete button is enabled and the delete
     * function can be used. If the value is false, the delete function is not available.
     *
     * Default value is `true`.
     */
    getEnableDelete(): boolean;
    /**
     * Gets current value of property {@link #getEnableEdit enableEdit}.
     *
     * Enables/Disables the Edit button. If the value is true, the Edit button is enabled and the edit function
     * can be used. If the value is false, the edit function is not available.
     *
     * Default value is `true`.
     */
    getEnableEdit(): boolean;
    /**
     * Gets current value of property {@link #getFileName fileName}.
     *
     * Specifies the name of the uploaded file.
     */
    getFileName(): string;
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Gets current value of property {@link #getFileSize fileSize}.
     *
     * Specifies the size of the uploaded file (in megabytes).
     */
    getFileSize(): float;
    /**
     * @SINCE 1.30.0
     *
     * ID of the element which is the current target of the association {@link #getFileUploader fileUploader},
     * or `null`.
     */
    getFileUploader(): ID;
    /**
     * @SINCE 1.40.0
     *
     * Gets content of aggregation {@link #getMarkers markers}.
     *
     * Markers of an uploaded item Markers will be displayed after an item has been uploaded But not in Edit
     * mode
     */
    getMarkers(): ObjectMarker[];
    /**
     * Returns a metadata object for class sap.m.UploadCollectionItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMimeType mimeType}.
     *
     * Specifies the MIME type of the file.
     */
    getMimeType(): string;
    /**
     * @SINCE 1.34.0
     *
     * Gets current value of property {@link #getSelected selected}.
     *
     * Defines the selected state of the UploadCollectionItem.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * @SINCE 1.30.0
     *
     * Gets content of aggregation {@link #getStatuses statuses}.
     *
     * Statuses of an uploaded item Statuses will be displayed after an item has been uploaded
     */
    getStatuses(): ObjectStatus[];
    /**
     * Gets current value of property {@link #getThumbnailUrl thumbnailUrl}.
     *
     * Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.
     */
    getThumbnailUrl(): string;
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Gets current value of property {@link #getUploadedDate uploadedDate}.
     *
     * Specifies the date on which the file was uploaded. The application has to define the date format.
     */
    getUploadedDate(): string;
    /**
     * Gets current value of property {@link #getUrl url}.
     *
     * Specifies the URL where the file is located. If the application doesn't provide a value for this property,
     * the icon and the file name of the UploadCollectionItem are not clickable.
     */
    getUrl(): string;
    /**
     * Gets current value of property {@link #getVisibleDelete visibleDelete}.
     *
     * Show/Hide the Delete button. If the value is true, the Delete button is visible. If the value is false,
     * the Delete button is not visible.
     *
     * Default value is `true`.
     */
    getVisibleDelete(): boolean;
    /**
     * Gets current value of property {@link #getVisibleEdit visibleEdit}.
     *
     * Show/Hide the Edit button. If the value is true, the Edit button is visible. If the value is false, the
     * Edit button is not visible.
     *
     * Default value is `true`.
     */
    getVisibleEdit(): boolean;
    /**
     * @SINCE 1.30.0
     *
     * Checks for the provided `sap.m.ObjectAttribute` in the aggregation {@link #getAttributes attributes}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfAttribute(
      /**
       * The attribute whose index is looked for
       */
      oAttribute: ObjectAttribute
    ): int;
    /**
     * @SINCE 1.40.0
     *
     * Checks for the provided `sap.m.ObjectMarker` in the aggregation {@link #getMarkers markers}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfMarker(
      /**
       * The marker whose index is looked for
       */
      oMarker: ObjectMarker
    ): int;
    /**
     * @SINCE 1.30.0
     *
     * Checks for the provided `sap.m.ObjectStatus` in the aggregation {@link #getStatuses statuses}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfStatus(
      /**
       * The status whose index is looked for
       */
      oStatus: ObjectStatus
    ): int;
    /**
     * @SINCE 1.30.0
     *
     * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
     */
    insertAttribute(
      /**
       * The attribute to insert; if empty, nothing is inserted
       */
      oAttribute: ObjectAttribute,
      /**
       * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
       * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.40.0
     *
     * Inserts a marker into the aggregation {@link #getMarkers markers}.
     */
    insertMarker(
      /**
       * The marker to insert; if empty, nothing is inserted
       */
      oMarker: ObjectMarker,
      /**
       * The `0`-based index the marker should be inserted at; for a negative value of `iIndex`, the marker is
       * inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Inserts a status into the aggregation {@link #getStatuses statuses}.
     */
    insertStatus(
      /**
       * The status to insert; if empty, nothing is inserted
       */
      oStatus: ObjectStatus,
      /**
       * The `0`-based index the status should be inserted at; for a negative value of `iIndex`, the status is
       * inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Removes all the controls from the aggregation {@link #getAttributes attributes}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllAttributes(): ObjectAttribute[];
    /**
     * @SINCE 1.40.0
     *
     * Removes all the controls from the aggregation {@link #getMarkers markers}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllMarkers(): ObjectMarker[];
    /**
     * @SINCE 1.30.0
     *
     * Removes all the controls from the aggregation {@link #getStatuses statuses}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllStatuses(): ObjectStatus[];
    /**
     * @SINCE 1.30.0
     *
     * Removes a attribute from the aggregation {@link #getAttributes attributes}.
     */
    removeAttribute(
      /**
       * The attribute to remove or its index or id
       */
      vAttribute: int | string | ObjectAttribute
    ): ObjectAttribute;
    /**
     * @SINCE 1.40.0
     *
     * Removes a marker from the aggregation {@link #getMarkers markers}.
     */
    removeMarker(
      /**
       * The marker to remove or its index or id
       */
      vMarker: int | string | ObjectMarker
    ): ObjectMarker;
    /**
     * @SINCE 1.30.0
     *
     * Removes a status from the aggregation {@link #getStatuses statuses}.
     */
    removeStatus(
      /**
       * The status to remove or its index or id
       */
      vStatus: int | string | ObjectStatus
    ): ObjectStatus;
    /**
     * @SINCE 1.30.0
     *
     * Sets a new value for property {@link #getAriaLabelForPicture ariaLabelForPicture}.
     *
     * Aria label for the icon (or for the image).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAriaLabelForPicture(
      /**
       * New value for property `ariaLabelForPicture`
       */
      sAriaLabelForPicture?: string
    ): this;
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead. However,
     * if the property is filled, it is displayed as an attribute. To make sure the title does not appear twice,
     * do not use the property.
     *
     * Sets a new value for property {@link #getContributor contributor}.
     *
     * Specifies the name of the user who uploaded the file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setContributor(
      /**
       * New value for property `contributor`
       */
      sContributor?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDocumentId documentId}.
     *
     * Specifies a unique identifier of the file (created by the application).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDocumentId(
      /**
       * New value for property `documentId`
       */
      sDocumentId?: string
    ): this;
    /**
     * Sets a new value for property {@link #getEnableDelete enableDelete}.
     *
     * Enables/Disables the Delete button. If the value is true, the Delete button is enabled and the delete
     * function can be used. If the value is false, the delete function is not available.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableDelete(
      /**
       * New value for property `enableDelete`
       */
      bEnableDelete?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getEnableEdit enableEdit}.
     *
     * Enables/Disables the Edit button. If the value is true, the Edit button is enabled and the edit function
     * can be used. If the value is false, the edit function is not available.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setEnableEdit(
      /**
       * New value for property `enableEdit`
       */
      bEnableEdit?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFileName fileName}.
     *
     * Specifies the name of the uploaded file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFileName(
      /**
       * New value for property `fileName`
       */
      sFileName?: string
    ): this;
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Sets a new value for property {@link #getFileSize fileSize}.
     *
     * Specifies the size of the uploaded file (in megabytes).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setFileSize(
      /**
       * New value for property `fileSize`
       */
      fFileSize?: float
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Sets the associated {@link #getFileUploader fileUploader}.
     */
    setFileUploader(
      /**
       * ID of an element which becomes the new target of this fileUploader association; alternatively, an element
       * instance may be given
       */
      oFileUploader: ID | FileUploader
    ): this;
    /**
     * Sets a new value for property {@link #getMimeType mimeType}.
     *
     * Specifies the MIME type of the file.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setMimeType(
      /**
       * New value for property `mimeType`
       */
      sMimeType?: string
    ): this;
    /**
     * @SINCE 1.34.0
     *
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Defines the selected state of the UploadCollectionItem.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getThumbnailUrl thumbnailUrl}.
     *
     * Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setThumbnailUrl(
      /**
       * New value for property `thumbnailUrl`
       */
      sThumbnailUrl?: string
    ): this;
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Sets a new value for property {@link #getUploadedDate uploadedDate}.
     *
     * Specifies the date on which the file was uploaded. The application has to define the date format.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUploadedDate(
      /**
       * New value for property `uploadedDate`
       */
      sUploadedDate?: string
    ): this;
    /**
     * Sets a new value for property {@link #getUrl url}.
     *
     * Specifies the URL where the file is located. If the application doesn't provide a value for this property,
     * the icon and the file name of the UploadCollectionItem are not clickable.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setUrl(
      /**
       * New value for property `url`
       */
      sUrl?: string
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleDelete visibleDelete}.
     *
     * Show/Hide the Delete button. If the value is true, the Delete button is visible. If the value is false,
     * the Delete button is not visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisibleDelete(
      /**
       * New value for property `visibleDelete`
       */
      bVisibleDelete?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getVisibleEdit visibleEdit}.
     *
     * Show/Hide the Edit button. If the value is true, the Edit button is visible. If the value is false, the
     * Edit button is not visible.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setVisibleEdit(
      /**
       * New value for property `visibleEdit`
       */
      bVisibleEdit?: boolean
    ): this;
    /**
     * @SINCE 1.30.0
     *
     * Unbinds aggregation {@link #getAttributes attributes} from model data.
     */
    unbindAttributes(): this;
    /**
     * @SINCE 1.40.0
     *
     * Unbinds aggregation {@link #getMarkers markers} from model data.
     */
    unbindMarkers(): this;
    /**
     * @SINCE 1.30.0
     *
     * Unbinds aggregation {@link #getStatuses statuses} from model data.
     */
    unbindStatuses(): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:deletePress deletePress} event of this `sap.m.UploadCollectionItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollectionItem` itself.
     *
     * When a deletePress event handler is attached to the item and the user presses the delete button, this
     * event is triggered. If this event is triggered, it overwrites the default delete behavior of UploadCollection
     * and the fileDeleted event of UploadCollection is not triggered.
     */
    attachDeletePress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollectionItem` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.50.0
     *
     * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.m.UploadCollectionItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.UploadCollectionItem` itself.
     *
     * This event is triggered when the user presses the filename link. If this event is provided, it overwrites
     * the default behavior of opening the file.
     */
    attachPress(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.UploadCollectionItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $UploadCollectionItemSettings extends $ElementSettings {
    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead. However,
     * if the property is filled, it is displayed as an attribute. To make sure the title does not appear twice,
     * do not use the property.
     *
     * Specifies the name of the user who uploaded the file.
     */
    contributor?: string | PropertyBindingInfo;

    /**
     * Specifies a unique identifier of the file (created by the application).
     */
    documentId?: string | PropertyBindingInfo;

    /**
     * Specifies the name of the uploaded file.
     */
    fileName?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Specifies the size of the uploaded file (in megabytes).
     */
    fileSize?: float | PropertyBindingInfo;

    /**
     * Specifies the MIME type of the file.
     */
    mimeType?: string | PropertyBindingInfo;

    /**
     * Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.
     */
    thumbnailUrl?: string | PropertyBindingInfo;

    /**
     * @deprecated (since 1.30) - This property is deprecated; use the aggregation attributes instead.
     *
     * Specifies the date on which the file was uploaded. The application has to define the date format.
     */
    uploadedDate?: string | PropertyBindingInfo;

    /**
     * Specifies the URL where the file is located. If the application doesn't provide a value for this property,
     * the icon and the file name of the UploadCollectionItem are not clickable.
     */
    url?: string | PropertyBindingInfo;

    /**
     * Enables/Disables the Edit button. If the value is true, the Edit button is enabled and the edit function
     * can be used. If the value is false, the edit function is not available.
     */
    enableEdit?: boolean | PropertyBindingInfo;

    /**
     * Enables/Disables the Delete button. If the value is true, the Delete button is enabled and the delete
     * function can be used. If the value is false, the delete function is not available.
     */
    enableDelete?: boolean | PropertyBindingInfo;

    /**
     * Show/Hide the Edit button. If the value is true, the Edit button is visible. If the value is false, the
     * Edit button is not visible.
     */
    visibleEdit?: boolean | PropertyBindingInfo;

    /**
     * Show/Hide the Delete button. If the value is true, the Delete button is visible. If the value is false,
     * the Delete button is not visible.
     */
    visibleDelete?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Aria label for the icon (or for the image).
     */
    ariaLabelForPicture?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.34.0
     *
     * Defines the selected state of the UploadCollectionItem.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size' attributes are
     * displayed after an item has been uploaded. Additionally, the Active property of sap.m.ObjectAttribute
     * is supported.
     *  Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition
     * to this attribute, two attributes with the same title are displayed as these properties get displayed
     * as an attribute. Example: An application passes the property ‘contributor’ with the value ‘A’ and the
     * aggregation attributes ‘contributor’: ‘B’. As a result, the attributes ‘contributor’:’A’ and ‘contributor’:’B’
     * are displayed. To make sure the title does not appear twice, check if one of the properties is filled.
     */
    attributes?: ObjectAttribute[] | ObjectAttribute | AggregationBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * Statuses of an uploaded item Statuses will be displayed after an item has been uploaded
     */
    statuses?: ObjectStatus[] | ObjectStatus | AggregationBindingInfo;

    /**
     * @SINCE 1.40.0
     *
     * Markers of an uploaded item Markers will be displayed after an item has been uploaded But not in Edit
     * mode
     */
    markers?: ObjectMarker[] | ObjectMarker | AggregationBindingInfo;

    /**
     * @SINCE 1.30.0
     *
     * ID of the FileUploader instance
     */
    fileUploader?: FileUploader | string;

    /**
     * @SINCE 1.50.0
     *
     * This event is triggered when the user presses the filename link. If this event is provided, it overwrites
     * the default behavior of opening the file.
     */
    press?: Function;

    /**
     * @SINCE 1.50.0
     *
     * When a deletePress event handler is attached to the item and the user presses the delete button, this
     * event is triggered. If this event is triggered, it overwrites the default delete behavior of UploadCollection
     * and the fileDeleted event of UploadCollection is not triggered.
     */
    deletePress?: Function;
  }
}

declare module "sap/m/UploadCollectionParameter" {
  import { default as UI5Element, $ElementSettings } from "sap/ui/core/Element";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Defines a structure of the element of the 'parameters' aggregation.
   */
  export default class UploadCollectionParameter extends UI5Element {
    /**
     * Constructor for a new UploadCollectionParameter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionParameterSettings
    );
    /**
     * Constructor for a new UploadCollectionParameter.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionParameterSettings
    );

    /**
     * Creates a new subclass of class sap.m.UploadCollectionParameter with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadCollectionParameter>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.UploadCollectionParameter.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.12.2
     *
     * Gets current value of property {@link #getName name}.
     *
     * Specifies the name of the parameter.
     */
    getName(): string;
    /**
     * @SINCE 1.12.2
     *
     * Gets current value of property {@link #getValue value}.
     *
     * Specifies the value of the parameter.
     */
    getValue(): string;
    /**
     * @SINCE 1.12.2
     *
     * Sets a new value for property {@link #getName name}.
     *
     * Specifies the name of the parameter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setName(
      /**
       * New value for property `name`
       */
      sName?: string
    ): this;
    /**
     * @SINCE 1.12.2
     *
     * Sets a new value for property {@link #getValue value}.
     *
     * Specifies the value of the parameter.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setValue(
      /**
       * New value for property `value`
       */
      sValue?: string
    ): this;
  }

  export interface $UploadCollectionParameterSettings extends $ElementSettings {
    /**
     * @SINCE 1.12.2
     *
     * Specifies the name of the parameter.
     */
    name?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.12.2
     *
     * Specifies the value of the parameter.
     */
    value?: string | PropertyBindingInfo;
  }
}

declare module "sap/m/UploadCollectionToolbarPlaceholder" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.34.0
   *
   * Used to create a customizable toolbar for the UploadCollection. A FileUploader instance is required in
   * the toolbar and will be placed by the application.
   */
  export default class UploadCollectionToolbarPlaceholder extends Control {
    /**
     * Constructor for a new UploadCollectionToolbarPlaceholder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionToolbarPlaceholderSettings
    );
    /**
     * Constructor for a new UploadCollectionToolbarPlaceholder.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
     * sap.ui.core.Control} can be used.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $UploadCollectionToolbarPlaceholderSettings
    );

    /**
     * Creates a new subclass of class sap.m.UploadCollectionToolbarPlaceholder with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, UploadCollectionToolbarPlaceholder>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.UploadCollectionToolbarPlaceholder.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $UploadCollectionToolbarPlaceholderSettings
    extends $ControlSettings {}
}

declare module "sap/m/VBox" {
  import { default as FlexBox, $FlexBoxSettings } from "sap/m/FlexBox";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control,
   * as it is just a specialized FlexBox control.
   *
   *  **Note:** Be sure to check the `renderType` setting to avoid issues due to browser inconsistencies.
   */
  export default class VBox extends FlexBox {
    /**
     * Constructor for a new VBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FlexBox#constructor
     * sap.m.FlexBox} can be used.
     * See:
     * 	https://www.w3.org/TR/css-flexbox-1/
     * 	https://www.w3.org/TR/css-flexbox-1/#propdef-justify-content
     * 	https://www.w3.org/TR/css-flexbox-1/#propdef-flex-direction
     * 	https://www.w3schools.com/css/css3_flexbox.asp#flex-direction
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $VBoxSettings
    );
    /**
     * Constructor for a new VBox.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     *
     * This class does not have its own settings, but all settings applicable to the base type {@link sap.m.FlexBox#constructor
     * sap.m.FlexBox} can be used.
     * See:
     * 	https://www.w3.org/TR/css-flexbox-1/
     * 	https://www.w3.org/TR/css-flexbox-1/#propdef-justify-content
     * 	https://www.w3.org/TR/css-flexbox-1/#propdef-flex-direction
     * 	https://www.w3schools.com/css/css3_flexbox.asp#flex-direction
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $VBoxSettings
    );

    /**
     * Creates a new subclass of class sap.m.VBox with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, VBox>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.m.VBox.
     */
    static getMetadata(): ElementMetadata;
  }

  export interface $VBoxSettings extends $FlexBoxSettings {}
}

declare module "sap/m/ViewSettingsCustomItem" {
  import {
    default as ViewSettingsItem,
    $ViewSettingsItemSettings,
  } from "sap/m/ViewSettingsItem";

  import Control from "sap/ui/core/Control";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.
   */
  export default class ViewSettingsCustomItem extends ViewSettingsItem {
    /**
     * Constructor for a new ViewSettingsCustomItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsCustomItemSettings
    );
    /**
     * Constructor for a new ViewSettingsCustomItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsCustomItemSettings
    );

    /**
     * Creates a clone of the ViewSettingsCustomItem instance.
     */
    clone(
      /**
       * a suffix to be appended to the cloned object id
       */
      sIdSuffix?: string,
      /**
       * an array of local IDs within the cloned hierarchy (internally used)
       */
      aLocalIds?: string[],
      /**
       * configuration object
       */
      oOptions?: Object
    ): this;
    /**
     * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
     */
    destroyCustomControl(): this;
    /**
     * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewSettingsCustomItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Internally the control is handled as a managed object instead of an aggregation because this control
     * is sometimes aggregated in other controls like a popover or a dialog.
     */
    getCustomControl(): Control;
    /**
     * Gets current value of property {@link #getFilterCount filterCount}.
     *
     * The number of currently active filters for this custom filter item. It will be displayed in the filter
     * list of the ViewSettingsDialog to represent the filter state of the custom control.
     *
     * Default value is `0`.
     */
    getFilterCount(): int;
    /**
     * Returns a metadata object for class sap.m.ViewSettingsCustomItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Internally the control is handled as a managed object instead of an aggregation as this control is sometimes
     * aggregated in other controls like a popover or a dialog.
     */
    setCustomControl(
      /**
       * A control used for filtering purposes
       */
      oControl: Control
    ): this;
    /**
     * Sets the filterCount without invalidating the control as it is never rendered directly.
     */
    setFilterCount(
      /**
       * The new value for property filterCount
       */
      iValue: int
    ): this;
  }

  export interface $ViewSettingsCustomItemSettings
    extends $ViewSettingsItemSettings {
    /**
     * The number of currently active filters for this custom filter item. It will be displayed in the filter
     * list of the ViewSettingsDialog to represent the filter state of the custom control.
     */
    filterCount?: int | PropertyBindingInfo;

    /**
     * A custom control for the filter field. It can be used for complex filtering mechanisms.
     */
    customControl?: Control;
  }
}

declare module "sap/m/ViewSettingsCustomTab" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import Control from "sap/ui/core/Control";

  import { URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30
   *
   * The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.
   */
  export default class ViewSettingsCustomTab extends Item {
    /**
     * Constructor for a new ViewSettingsCustomTab.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsCustomTabSettings
    );
    /**
     * Constructor for a new ViewSettingsCustomTab.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsCustomTabSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Creates a new subclass of class sap.m.ViewSettingsCustomTab with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewSettingsCustomTab>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of this Custom tab
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Custom tab button icon
     *
     * Default value is `"sap-icon://competitor"`.
     */
    getIcon(): URI;
    /**
     * Returns a metadata object for class sap.m.ViewSettingsCustomTab.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Custom tab title
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Custom tab button icon
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"sap-icon://competitor"`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Custom tab title
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
  }

  export interface $ViewSettingsCustomTabSettings extends $ItemSettings {
    /**
     * Custom tab button icon
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * Custom tab title
     */
    title?: string | PropertyBindingInfo;

    /**
     * The content of this Custom tab
     */
    content?: Control[] | Control | AggregationBindingInfo;
  }
}

declare module "sap/m/ViewSettingsDialog" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import ViewSettingsItem from "sap/m/ViewSettingsItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ViewSettingsFilterItem from "sap/m/ViewSettingsFilterItem";

  import ViewSettingsCustomTab from "sap/m/ViewSettingsCustomTab";

  import { StringFilterOperator, TitleAlignment } from "sap/m/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { ID } from "sap/ui/core/library";

  /**
   * @SINCE 1.16
   *
   * Helps the user to sort, filter, or group data within a (master) {@link sap.m.List} or a {@link sap.m.Table}.
   * The dialog is triggered by icon buttons in the table toolbar. Each button shows a dropdown list icon.
   *
   * Overview:
   *
   * The `ViewSettingsDialog` is a composite control, consisting of a modal {@link sap.m.Popover} and several
   * internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated
   * by filling the respective associations. If only one association is filled, the other tabs are automatically
   * hidden. The selected options can be used to create sorters and filters for the table.
   *
   * **Note:** If the app does not offer all three sorting, filtering, and grouping operations, but only one
   * of these (such as sort), we recommend placing the icon button directly in the toolbar. Do not place sort,
   * filter, or group buttons in the footer toolbar if they refer to a table. Place group, sort, and filter
   * buttons in the footer toolbar if they refer to a master list.
   *
   * **Note:** If `ViewSettingsDialog` is used without custom tabs or custom items in any of its aggregations,
   * then Reset button is enabled if the user selects any Filters or presetFilters or changes any of the Sort
   * by, Sort order, Group by, or Group order values. When `ViewSettingsDialog` is used with custom tabs or
   * custom items in any of its aggregations (sortItems, groupItems, filterItems or presetFilterItems), the
   * Reset button is always enabled, because there is no way to determine the initial state of the custom
   * tabs and compare it to their current state in order to determine the enable/disable state of the Reset
   * button.
   *
   * Usage:
   *
   * When to use?
   * 	 - If you need to allow the user to sort line items in a manageable list or table (up to 20 columns)
   *
   * 	 - If you need to offer custom filter settings in a manageable list or table (up to 20 columns)
   * 	 - If you need to allow the user to group line items in a manageable list or table (up to 20 columns)
   *
   * When not to use?
   * 	 - If you have complex tables (more than 20 columns)
   * 	 - If you need to rearrange columns within your table (use the {@link sap.m.TablePersoDialog} instead)
   *
   * 	 - If you need very specific sort, filter, or column sorting options within complex tables (use the
   * 			{@link sap.m.P13nDialog} instead)
   *
   * Responsive behavior:
   *
   * The popover dialog appears as a modal window on desktop and tablet screen sizes, but full screen on smartphones.
   */
  export default class ViewSettingsDialog extends Control {
    /**
     * Constructor for a new `ViewSettingsDialog`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/view-settings-dialog/ View Settings Dialog}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsDialogSettings
    );
    /**
     * Constructor for a new `ViewSettingsDialog`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/view-settings-dialog/ View Settings Dialog}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsDialogSettings
    );

    /**
     * Overwrites the aggregation setter in order to have ID validation logic as some strings are reserved for
     * the predefined tabs.
     */
    addCustomTab(
      /**
       * The custom tab to be added
       */
      oCustomTab: object
    ): this;
    /**
     * @SINCE 1.16
     *
     * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
     */
    addFilterItem(
      /**
       * The filterItem to add; if empty, nothing is inserted
       */
      oFilterItem: ViewSettingsItem
    ): this;
    /**
     * Adds a group item and sets the association to reflect the selected state.
     */
    addGroupItem(
      /**
       * The item to be added to the group items
       */
      oItem: ViewSettingsItem
    ): this;
    /**
     * Adds a preset filter item and sets the association to reflect the selected state.
     */
    addPresetFilterItem(
      /**
       * The selected item or a string with the key
       */
      oItem: ViewSettingsItem
    ): this;
    /**
     * Adds a sort item and sets the association to reflect the selected state.
     */
    addSortItem(
      /**
       * The item to be added to the aggregation
       */
      oItem: ViewSettingsItem
    ): this;
    /**
     * Forward method to the inner dialog method: addStyleClass.
     */
    addStyleClass(
      /**
       * CSS class name to add
       */
      sStyleClass: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should
     * be applied to the data on this page.
     *
     * **Note:** Custom tabs are not converted to event parameters automatically. For custom tabs, you have
     * to read the state of your controls inside the callback of this event.
     */
    attachConfirm(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterDetailPageOpened filterDetailPageOpened}
     * event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Fired when the filter detail page is opened.
     */
    attachFilterDetailPageOpened(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the Reset button is pressed. It can be used to set the state of custom tabs.
     */
    attachReset(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:resetFilters resetFilters} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the filters are being reset.
     */
    attachResetFilters(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.30
     *
     * Binds aggregation {@link #getCustomTabs customTabs} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindCustomTabs(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.16
     *
     * Binds aggregation {@link #getFilterItems filterItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindFilterItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.16
     *
     * Binds aggregation {@link #getGroupItems groupItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindGroupItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.16
     *
     * Binds aggregation {@link #getPresetFilterItems presetFilterItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindPresetFilterItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * @SINCE 1.16
     *
     * Binds aggregation {@link #getSortItems sortItems} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindSortItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Clears the selected filters and navigates to the filter overview page
     */
    clearFilters(): this;
    /**
     * @SINCE 1.30
     *
     * Destroys all the customTabs in the aggregation {@link #getCustomTabs customTabs}.
     */
    destroyCustomTabs(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
     */
    destroyFilterItems(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys all the groupItems in the aggregation {@link #getGroupItems groupItems}.
     */
    destroyGroupItems(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys all the presetFilterItems in the aggregation {@link #getPresetFilterItems presetFilterItems}.
     */
    destroyPresetFilterItems(): this;
    /**
     * @SINCE 1.16
     *
     * Destroys all the sortItems in the aggregation {@link #getSortItems sortItems}.
     */
    destroySortItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.m.ViewSettingsDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:confirm confirm} event of this `sap.m.ViewSettingsDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachConfirm(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filterDetailPageOpened filterDetailPageOpened}
     * event of this `sap.m.ViewSettingsDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFilterDetailPageOpened(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:reset reset} event of this `sap.m.ViewSettingsDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachReset(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:resetFilters resetFilters} event of this `sap.m.ViewSettingsDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachResetFilters(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ViewSettingsDialog with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewSettingsDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:confirm confirm} to attached listeners.
     */
    fireConfirm(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The selected sort item.
         */
        sortItem?: ViewSettingsItem;
        /**
         * The selected sort order (true = descending, false = ascending).
         */
        sortDescending?: boolean;
        /**
         * The selected group item.
         */
        groupItem?: ViewSettingsItem;
        /**
         * The selected group order (true = descending, false = ascending).
         */
        groupDescending?: boolean;
        /**
         * The selected preset filter item.
         */
        presetFilterItem?: ViewSettingsItem;
        /**
         * The selected filters in an array of ViewSettingsItem.
         */
        filterItems?: ViewSettingsItem[];
        /**
         * The selected filter items in an object notation format: { key: boolean }. If a custom control filter
         * was displayed (for example, the user clicked on the filter item), the value for its key is set to true
         * to indicate that there has been an interaction with the control.
         */
        filterKeys?: object;
        /**
         * The selected filter items in an object notation format: { parentKey: { key: boolean, key2: boolean, ...
         * }, ...}. If a custom control filter was displayed (for example, the user clicked on the filter item),
         * the value for its key is set to true to indicate that there has been an interaction with the control.
         */
        filterCompoundKeys?: object;
        /**
         * The selected filter items in a string format to display in the control's header bar in format "Filtered
         * by: key (subkey1, subkey2, subkey3)".
         */
        filterString?: string;
      }
    ): this;
    /**
     * Fires event {@link #event:filterDetailPageOpened filterDetailPageOpened} to attached listeners.
     */
    fireFilterDetailPageOpened(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The filter item for which the details are opened.
         */
        parentFilterItem?: ViewSettingsFilterItem;
      }
    ): this;
    /**
     * Fires event {@link #event:reset reset} to attached listeners.
     */
    fireReset(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:resetFilters resetFilters} to attached listeners.
     */
    fireResetFilters(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.30
     *
     * Gets content of aggregation {@link #getCustomTabs customTabs}.
     *
     * The list of all the custom tabs.
     */
    getCustomTabs(): ViewSettingsCustomTab[];
    /**
     * Forward method to the inner dialog method: getDomRef.
     */
    getDomRef(): Element;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getFilterItems filterItems}.
     *
     * The list of items with key and value that can be filtered on (for example, a list of columns for a table).
     * A filterItem is associated with one or more detail filters.
     *
     * **Note:** It is recommended to use the `sap.m.ViewSettingsFilterItem` as it fits best at the filter page.
     */
    getFilterItems(): ViewSettingsItem[];
    /**
     * @SINCE 1.42
     *
     * Gets current value of property {@link #getFilterSearchOperator filterSearchOperator}.
     *
     * Provides a string filter operator which is used when the user searches items in filter details page.
     * Possible operators are: `AnyWordStartsWith`, `Contains`, `StartsWith`, `Equals`. This property will be
     * ignored if a custom callback is provided through `setFilterSearchCallback` method.
     *
     * Default value is `StartsWith`.
     */
    getFilterSearchOperator():
      | StringFilterOperator
      | keyof typeof StringFilterOperator;
    /**
     * Gets current value of property {@link #getGroupDescending groupDescending}.
     *
     * Determines whether the group order is descending or ascending (default).
     *
     * Default value is `false`.
     */
    getGroupDescending(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getGroupItems groupItems}.
     *
     * The list of items with key and value that can be grouped on (for example, a list of columns for a table).
     */
    getGroupItems(): ViewSettingsItem[];
    /**
     * Returns a metadata object for class sap.m.ViewSettingsDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getPresetFilterItems presetFilterItems}.
     *
     * The list of preset filter items with key and value that allows the selection of more complex or custom
     * filters. These entries are displayed at the top of the filter tab.
     */
    getPresetFilterItems(): ViewSettingsItem[];
    /**
     * @SINCE 1.42
     *
     * Gets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.
     */
    getSelectedFilterCompoundKeys(): object;
    /**
     * Returns the selected filters as an array of ViewSettingsItems.
     *
     * It can be used to create matching sorters and filters to apply the selected settings to the data.
     */
    getSelectedFilterItems(): ViewSettingsItem[];
    /**
     * @deprecated (since 1.42) - replaced by `getSelectedFilterCompoundKeys` method
     *
     * Gets the selected filter object in format {key: boolean}.
     *
     * It can be used to create matching sorters and filters to apply the selected settings to the data.
     */
    getSelectedFilterKeys(): object;
    /**
     * Gets the filter string in format: "filter name (subfilter1 name, subfilter2 name, ...), ...". For custom
     * and preset filters it will only add the filter name to the resulting string.
     */
    getSelectedFilterString(): string;
    /**
     * ID of the element which is the current target of the association {@link #getSelectedGroupItem selectedGroupItem},
     * or `null`.
     */
    getSelectedGroupItem(): ID;
    /**
     * ID of the element which is the current target of the association {@link #getSelectedPresetFilterItem
     * selectedPresetFilterItem}, or `null`.
     */
    getSelectedPresetFilterItem(): ID;
    /**
     * ID of the element which is the current target of the association {@link #getSelectedSortItem selectedSortItem},
     * or `null`.
     */
    getSelectedSortItem(): ID;
    /**
     * Gets current value of property {@link #getSortDescending sortDescending}.
     *
     * Determines whether the sort order is descending or ascending (default).
     *
     * Default value is `false`.
     */
    getSortDescending(): boolean;
    /**
     * @SINCE 1.16
     *
     * Gets content of aggregation {@link #getSortItems sortItems}.
     *
     * The list of items with key and value that can be sorted over (for example, a list of columns for a table).
     */
    getSortItems(): ViewSettingsItem[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default
     * "View" or "Sort", "Group", "Filter" respectively.
     */
    getTitle(): string;
    /**
     * @SINCE 1.72
     *
     * Gets current value of property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * Default value is `Auto`.
     */
    getTitleAlignment(): TitleAlignment | keyof typeof TitleAlignment;
    /**
     * Forward method to the inner dialog method: hasStyleClass.
     */
    hasStyleClass(): boolean;
    /**
     * @SINCE 1.30
     *
     * Checks for the provided `sap.m.ViewSettingsCustomTab` in the aggregation {@link #getCustomTabs customTabs}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfCustomTab(
      /**
       * The customTab whose index is looked for
       */
      oCustomTab: ViewSettingsCustomTab
    ): int;
    /**
     * @SINCE 1.16
     *
     * Checks for the provided `sap.m.ViewSettingsItem` in the aggregation {@link #getFilterItems filterItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfFilterItem(
      /**
       * The filterItem whose index is looked for
       */
      oFilterItem: ViewSettingsItem
    ): int;
    /**
     * @SINCE 1.16
     *
     * Checks for the provided `sap.m.ViewSettingsItem` in the aggregation {@link #getGroupItems groupItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfGroupItem(
      /**
       * The groupItem whose index is looked for
       */
      oGroupItem: ViewSettingsItem
    ): int;
    /**
     * @SINCE 1.16
     *
     * Checks for the provided `sap.m.ViewSettingsItem` in the aggregation {@link #getPresetFilterItems presetFilterItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfPresetFilterItem(
      /**
       * The presetFilterItem whose index is looked for
       */
      oPresetFilterItem: ViewSettingsItem
    ): int;
    /**
     * @SINCE 1.16
     *
     * Checks for the provided `sap.m.ViewSettingsItem` in the aggregation {@link #getSortItems sortItems}.
     * and returns its index if found or -1 otherwise.
     */
    indexOfSortItem(
      /**
       * The sortItem whose index is looked for
       */
      oSortItem: ViewSettingsItem
    ): int;
    /**
     * @SINCE 1.30
     *
     * Inserts a customTab into the aggregation {@link #getCustomTabs customTabs}.
     */
    insertCustomTab(
      /**
       * The customTab to insert; if empty, nothing is inserted
       */
      oCustomTab: ViewSettingsCustomTab,
      /**
       * The `0`-based index the customTab should be inserted at; for a negative value of `iIndex`, the customTab
       * is inserted at position 0; for a value greater than the current size of the aggregation, the customTab
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Inserts a filterItem into the aggregation {@link #getFilterItems filterItems}.
     */
    insertFilterItem(
      /**
       * The filterItem to insert; if empty, nothing is inserted
       */
      oFilterItem: ViewSettingsItem,
      /**
       * The `0`-based index the filterItem should be inserted at; for a negative value of `iIndex`, the filterItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the filterItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Inserts a groupItem into the aggregation {@link #getGroupItems groupItems}.
     */
    insertGroupItem(
      /**
       * The groupItem to insert; if empty, nothing is inserted
       */
      oGroupItem: ViewSettingsItem,
      /**
       * The `0`-based index the groupItem should be inserted at; for a negative value of `iIndex`, the groupItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the groupItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Inserts a presetFilterItem into the aggregation {@link #getPresetFilterItems presetFilterItems}.
     */
    insertPresetFilterItem(
      /**
       * The presetFilterItem to insert; if empty, nothing is inserted
       */
      oPresetFilterItem: ViewSettingsItem,
      /**
       * The `0`-based index the presetFilterItem should be inserted at; for a negative value of `iIndex`, the
       * presetFilterItem is inserted at position 0; for a value greater than the current size of the aggregation,
       * the presetFilterItem is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * @SINCE 1.16
     *
     * Inserts a sortItem into the aggregation {@link #getSortItems sortItems}.
     */
    insertSortItem(
      /**
       * The sortItem to insert; if empty, nothing is inserted
       */
      oSortItem: ViewSettingsItem,
      /**
       * The `0`-based index the sortItem should be inserted at; for a negative value of `iIndex`, the sortItem
       * is inserted at position 0; for a value greater than the current size of the aggregation, the sortItem
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Opens the ViewSettingsDialog relative to the parent control.
     */
    open(
      /**
       * The ID of the initial page to be opened in the dialog. The available values are "sort", "group", "filter"
       * or IDs of custom tabs.
       */
      sPageId?: string
    ): this;
    /**
     * @SINCE 1.30
     *
     * Removes all the controls from the aggregation {@link #getCustomTabs customTabs}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllCustomTabs(): ViewSettingsCustomTab[];
    /**
     * Removes all filter Items and resets the remembered page if it was a filter detail page and all of its
     * filter items are being removed.
     */
    removeAllFilterItems(): ViewSettingsFilterItem[];
    /**
     * @SINCE 1.16
     *
     * Removes all the controls from the aggregation {@link #getGroupItems groupItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllGroupItems(): ViewSettingsItem[];
    /**
     * @SINCE 1.16
     *
     * Removes all the controls from the aggregation {@link #getPresetFilterItems presetFilterItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllPresetFilterItems(): ViewSettingsItem[];
    /**
     * @SINCE 1.16
     *
     * Removes all the controls from the aggregation {@link #getSortItems sortItems}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSortItems(): ViewSettingsItem[];
    /**
     * @SINCE 1.30
     *
     * Removes a customTab from the aggregation {@link #getCustomTabs customTabs}.
     */
    removeCustomTab(
      /**
       * The customTab to remove or its index or id
       */
      vCustomTab: int | string | ViewSettingsCustomTab
    ): ViewSettingsCustomTab;
    /**
     * Removes a filter Item and resets the remembered page if it was the filter detail page of the removed
     * filter.
     */
    removeFilterItem(
      /**
       * The filter item's index, or the item itself, or its id
       */
      vFilterItem: int | ViewSettingsFilterItem | string
    ): ViewSettingsFilterItem | null;
    /**
     * @SINCE 1.16
     *
     * Removes a groupItem from the aggregation {@link #getGroupItems groupItems}.
     */
    removeGroupItem(
      /**
       * The groupItem to remove or its index or id
       */
      vGroupItem: int | string | ViewSettingsItem
    ): ViewSettingsItem;
    /**
     * @SINCE 1.16
     *
     * Removes a presetFilterItem from the aggregation {@link #getPresetFilterItems presetFilterItems}.
     */
    removePresetFilterItem(
      /**
       * The presetFilterItem to remove or its index or id
       */
      vPresetFilterItem: int | string | ViewSettingsItem
    ): ViewSettingsItem;
    /**
     * @SINCE 1.16
     *
     * Removes a sortItem from the aggregation {@link #getSortItems sortItems}.
     */
    removeSortItem(
      /**
       * The sortItem to remove or its index or id
       */
      vSortItem: int | string | ViewSettingsItem
    ): ViewSettingsItem;
    /**
     * Forward method to the inner dialog method: removeStyleClass.
     */
    removeStyleClass(
      /**
       * CSS class name to remove
       */
      sStyleClass: string
    ): this;
    /**
     * Forward the busy state setting to the internal dialog instance. Needed because of the not-bullet proof
     * implementation of setBusy in sap.ui.core.Control
     */
    setBusy(
      /**
       * The busy state flag
       */
      bBusy: boolean
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets a callback that will check the ViewSettingsItem's text against the search query. If a callback is
     * set, `filterSearchOperator` property will be ignored, as it serves the same purpose.
     */
    setFilterSearchCallback(
      /**
       * A function that accepts two parameters fnTest({string} query, {string} value) and returns boolean if
       * the value satisfies the query.
       */
      fnTest: Function
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets a new value for property {@link #getFilterSearchOperator filterSearchOperator}.
     *
     * Provides a string filter operator which is used when the user searches items in filter details page.
     * Possible operators are: `AnyWordStartsWith`, `Contains`, `StartsWith`, `Equals`. This property will be
     * ignored if a custom callback is provided through `setFilterSearchCallback` method.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `StartsWith`.
     */
    setFilterSearchOperator(
      /**
       * New value for property `filterSearchOperator`
       */
      sFilterSearchOperator?:
        | StringFilterOperator
        | keyof typeof StringFilterOperator
    ): this;
    /**
     * Sets a new value for property {@link #getGroupDescending groupDescending}.
     *
     * Determines whether the group order is descending or ascending (default).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setGroupDescending(
      /**
       * New value for property `groupDescending`
       */
      bGroupDescending?: boolean
    ): this;
    /**
     * @SINCE 1.42
     *
     * Sets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.
     */
    setSelectedFilterCompoundKeys(
      /**
       * A configuration object with filter item and sub item keys in the format: { parent_key: { key: boolean,
       * key2: boolean, ...}, ... }. Setting boolean to true will set the filter to true, false or omitting an
       * entry will set the filter to false. It can be used to set the dialog state based on presets.
       */
      oSelectedFilterKeys: object
    ): this;
    /**
     * @deprecated (since 1.42) - replaced by `setSelectedFilterCompoundKeys` method
     *
     * Sets the selected filter object in format {key: boolean}. **Note:** Do not use duplicated item keys with
     * this method.
     */
    setSelectedFilterKeys(
      /**
       * A configuration object with filter item and sub item keys in the format: { key: boolean }. Setting boolean
       * to true will set the filter to true, false or omitting an entry will set the filter to false. It can
       * be used to set the dialog state based on presets.
       */
      oSelectedFilterKeys: object
    ): this;
    /**
     * Sets the selected group item (either by key or by item).
     */
    setSelectedGroupItem(
      /**
       * The selected item or the item's key string
       */
      vItemOrKey: ViewSettingsItem | string
    ): this;
    /**
     * Sets the selected preset filter item.
     */
    setSelectedPresetFilterItem(
      /**
       * The selected item or the item's key string
       */
      vItemOrKey: ViewSettingsItem | string | null
    ): this;
    /**
     * Sets the selected sort item (either by key or by item).
     */
    setSelectedSortItem(
      /**
       * The selected item or the item's key string
       */
      vItemOrKey: ViewSettingsItem | string
    ): this;
    /**
     * Sets a new value for property {@link #getSortDescending sortDescending}.
     *
     * Determines whether the sort order is descending or ascending (default).
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSortDescending(
      /**
       * New value for property `sortDescending`
       */
      bSortDescending?: boolean
    ): this;
    /**
     * Sets the title of the internal dialog.
     */
    setTitle(
      /**
       * The title text for the dialog
       */
      sTitle: string
    ): this;
    /**
     * @SINCE 1.72
     *
     * Sets a new value for property {@link #getTitleAlignment titleAlignment}.
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Auto`.
     */
    setTitleAlignment(
      /**
       * New value for property `titleAlignment`
       */
      sTitleAlignment?: TitleAlignment | keyof typeof TitleAlignment
    ): this;
    /**
     * Forward method to the inner dialog method: toggleStyleClass.
     */
    toggleStyleClass(
      /**
       * CSS class name to add or remove
       */
      sStyleClass: string,
      /**
       * Whether style class should be added (or removed); when this parameter is not given, the given style class
       * will be toggled (removed, if present, and added if not present)
       */
      bAdd?: boolean
    ): this;
    /**
     * @SINCE 1.30
     *
     * Unbinds aggregation {@link #getCustomTabs customTabs} from model data.
     */
    unbindCustomTabs(): this;
    /**
     * @SINCE 1.16
     *
     * Unbinds aggregation {@link #getFilterItems filterItems} from model data.
     */
    unbindFilterItems(): this;
    /**
     * @SINCE 1.16
     *
     * Unbinds aggregation {@link #getGroupItems groupItems} from model data.
     */
    unbindGroupItems(): this;
    /**
     * @SINCE 1.16
     *
     * Unbinds aggregation {@link #getPresetFilterItems presetFilterItems} from model data.
     */
    unbindPresetFilterItems(): this;
    /**
     * @SINCE 1.16
     *
     * Unbinds aggregation {@link #getSortItems sortItems} from model data.
     */
    unbindSortItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:confirm confirm} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should
     * be applied to the data on this page.
     *
     * **Note:** Custom tabs are not converted to event parameters automatically. For custom tabs, you have
     * to read the state of your controls inside the callback of this event.
     */
    attachConfirm(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterDetailPageOpened filterDetailPageOpened}
     * event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Fired when the filter detail page is opened.
     */
    attachFilterDetailPageOpened(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the Reset button is pressed. It can be used to set the state of custom tabs.
     */
    attachReset(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:resetFilters resetFilters} event of this `sap.m.ViewSettingsDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsDialog` itself.
     *
     * Called when the filters are being reset.
     */
    attachResetFilters(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsDialog` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ViewSettingsDialogSettings extends $ControlSettings {
    /**
     * Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default
     * "View" or "Sort", "Group", "Filter" respectively.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines whether the sort order is descending or ascending (default).
     */
    sortDescending?: boolean | PropertyBindingInfo;

    /**
     * Determines whether the group order is descending or ascending (default).
     */
    groupDescending?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.42
     *
     * Provides a string filter operator which is used when the user searches items in filter details page.
     * Possible operators are: `AnyWordStartsWith`, `Contains`, `StartsWith`, `Equals`. This property will be
     * ignored if a custom callback is provided through `setFilterSearchCallback` method.
     */
    filterSearchOperator?:
      | (StringFilterOperator | keyof typeof StringFilterOperator)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.72
     *
     * Specifies the Title alignment (theme specific). If set to `TitleAlignment.None`, the automatic title
     * alignment depending on the theme settings will be disabled. If set to `TitleAlignment.Auto`, the Title
     * will be aligned as it is set in the theme (if not set, the default value is `center`); Other possible
     * values are `TitleAlignment.Start` (left or right depending on LTR/RTL), and `TitleAlignment.Center` (centered)
     */
    titleAlignment?:
      | (TitleAlignment | keyof typeof TitleAlignment)
      | PropertyBindingInfo;

    /**
     * @SINCE 1.16
     *
     * The list of items with key and value that can be sorted over (for example, a list of columns for a table).
     */
    sortItems?: ViewSettingsItem[] | ViewSettingsItem | AggregationBindingInfo;

    /**
     * @SINCE 1.16
     *
     * The list of items with key and value that can be grouped on (for example, a list of columns for a table).
     */
    groupItems?: ViewSettingsItem[] | ViewSettingsItem | AggregationBindingInfo;

    /**
     * @SINCE 1.16
     *
     * The list of items with key and value that can be filtered on (for example, a list of columns for a table).
     * A filterItem is associated with one or more detail filters.
     *
     * **Note:** It is recommended to use the `sap.m.ViewSettingsFilterItem` as it fits best at the filter page.
     */
    filterItems?:
      | ViewSettingsItem[]
      | ViewSettingsItem
      | AggregationBindingInfo;

    /**
     * @SINCE 1.16
     *
     * The list of preset filter items with key and value that allows the selection of more complex or custom
     * filters. These entries are displayed at the top of the filter tab.
     */
    presetFilterItems?:
      | ViewSettingsItem[]
      | ViewSettingsItem
      | AggregationBindingInfo;

    /**
     * @SINCE 1.30
     *
     * The list of all the custom tabs.
     */
    customTabs?:
      | ViewSettingsCustomTab[]
      | ViewSettingsCustomTab
      | AggregationBindingInfo;

    /**
     * The sort item that is selected. It can be set by either passing a key or the item itself to the function
     * setSelectedSortItem.
     */
    selectedSortItem?: ViewSettingsItem | string;

    /**
     * The group item that is selected. It can be set by either passing a key or the item itself to the function
     * setSelectedGroupItem. By default 'None' is selected. You can restore back to 'None' by setting this association
     * to empty value.
     */
    selectedGroupItem?: ViewSettingsItem | string;

    /**
     * The preset filter item that is selected. It can be set by either passing a key or the item itself to
     * the function setSelectedPresetFilterItem. Note that either a preset filter OR multiple detail filters
     * can be active at the same time.
     */
    selectedPresetFilterItem?: ViewSettingsItem | string;

    /**
     * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should
     * be applied to the data on this page.
     *
     * **Note:** Custom tabs are not converted to event parameters automatically. For custom tabs, you have
     * to read the state of your controls inside the callback of this event.
     */
    confirm?: Function;

    /**
     * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
     */
    cancel?: Function;

    /**
     * Called when the filters are being reset.
     */
    resetFilters?: Function;

    /**
     * Called when the Reset button is pressed. It can be used to set the state of custom tabs.
     */
    reset?: Function;

    /**
     * Fired when the filter detail page is opened.
     */
    filterDetailPageOpened?: Function;
  }
}

declare module "sap/m/ViewSettingsFilterItem" {
  import {
    default as ViewSettingsItem,
    $ViewSettingsItemSettings,
  } from "sap/m/ViewSettingsItem";

  import {
    AggregationBindingInfo,
    PropertyBindingInfo,
  } from "sap/ui/base/ManagedObject";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  /**
   * @SINCE 1.16
   *
   * A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog. It
   * is derived from a core Item, but does not support the base class properties like textDirection and enabled.
   * Setting these properties will not have any effects.
   */
  export default class ViewSettingsFilterItem extends ViewSettingsItem {
    /**
     * Constructor for a new ViewSettingsFilterItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsFilterItemSettings
    );
    /**
     * Constructor for a new ViewSettingsFilterItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ViewSettingsFilterItemSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: ViewSettingsItem
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange}
     * event of this `sap.m.ViewSettingsFilterItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsFilterItem` itself.
     *
     * Let the outside world know that the filter detail aggregation was changed.
     */
    attachFilterDetailItemsAggregationChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsFilterItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Binds aggregation {@link #getItems items} to model data.
     *
     * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
     * of the possible properties of `oBindingInfo`.
     */
    bindItems(
      /**
       * The binding information
       */
      oBindingInfo: AggregationBindingInfo
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange}
     * event of this `sap.m.ViewSettingsFilterItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachFilterDetailItemsAggregationChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewSettingsFilterItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange} to attached
     * listeners.
     */
    fireFilterDetailItemsAggregationChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * Items with key and value that are logically grouped under this filter item. They are used to display
     * filter details in the ViewSettingsDialog.
     */
    getItems(): ViewSettingsItem[];
    /**
     * Returns a metadata object for class sap.m.ViewSettingsFilterItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getMultiSelect multiSelect}.
     *
     * If set to (true), multi selection will be allowed for the items aggregation.
     *
     * Default value is `true`.
     */
    getMultiSelect(): boolean;
    /**
     * Checks for the provided `sap.m.ViewSettingsItem` in the aggregation {@link #getItems items}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: ViewSettingsItem
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: ViewSettingsItem,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): ViewSettingsItem[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | ViewSettingsItem
    ): ViewSettingsItem;
    /**
     * Sets a new value for property {@link #getMultiSelect multiSelect}.
     *
     * If set to (true), multi selection will be allowed for the items aggregation.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setMultiSelect(
      /**
       * New value for property `multiSelect`
       */
      bMultiSelect?: boolean
    ): this;
    /**
     * Unbinds aggregation {@link #getItems items} from model data.
     */
    unbindItems(): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange}
     * event of this `sap.m.ViewSettingsFilterItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsFilterItem` itself.
     *
     * Let the outside world know that the filter detail aggregation was changed.
     */
    attachFilterDetailItemsAggregationChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsFilterItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ViewSettingsFilterItemSettings
    extends $ViewSettingsItemSettings {
    /**
     * If set to (true), multi selection will be allowed for the items aggregation.
     */
    multiSelect?: boolean | PropertyBindingInfo;

    /**
     * Items with key and value that are logically grouped under this filter item. They are used to display
     * filter details in the ViewSettingsDialog.
     */
    items?: ViewSettingsItem[] | ViewSettingsItem | AggregationBindingInfo;

    /**
     * Let the outside world know that the filter detail aggregation was changed.
     */
    filterDetailItemsAggregationChange?: Function;
  }
}

declare module "sap/m/ViewSettingsItem" {
  import { default as Item, $ItemSettings } from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.16
   *
   * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog. It is derived from
   * a core Item, but does not support the base class properties "textDirection" and "enabled", setting these
   * properties will not have any effects. Apps should use the core Item's property `key/` and provide a unique
   * value for it. Not providing a key may lead to unexpected behavior of the sap.m.ViewSettingsDialog.
   */
  export default class ViewSettingsItem extends Item {
    /**
     * Constructor for a new ViewSettingsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $ViewSettingsItemSettings
    );
    /**
     * Constructor for a new ViewSettingsItem.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $ViewSettingsItemSettings
    );

    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.ViewSettingsItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsItem` itself.
     *
     * Let the outside world know that some of its properties has changed.
     */
    attachItemPropertyChanged(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsItem` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.ViewSettingsItem`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachItemPropertyChanged(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.ViewSettingsItem with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ViewSettingsItem>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:itemPropertyChanged itemPropertyChanged} to attached listeners.
     */
    fireItemPropertyChanged(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Instance of the item that changed.
         */
        changedItem?: ViewSettingsItem;
        /**
         * Key of the changed property.
         */
        propertyKey?: string;
        /**
         * Value of the changed property.
         */
        propertyValue?: any;
      }
    ): this;
    /**
     * Returns a metadata object for class sap.m.ViewSettingsItem.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSelected selected}.
     *
     * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings
     * dialog.
     *
     * Default value is `false`.
     */
    getSelected(): boolean;
    /**
     * Sets a new value for property {@link #getSelected selected}.
     *
     * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings
     * dialog.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setSelected(
      /**
       * New value for property `selected`
       */
      bSelected?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:itemPropertyChanged itemPropertyChanged} event
     * of this `sap.m.ViewSettingsItem`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.ViewSettingsItem` itself.
     *
     * Let the outside world know that some of its properties has changed.
     */
    attachItemPropertyChanged(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.ViewSettingsItem` itself
       */
      oListener?: object
    ): this;
  }

  export interface $ViewSettingsItemSettings extends $ItemSettings {
    /**
     * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings
     * dialog.
     */
    selected?: boolean | PropertyBindingInfo;

    /**
     * Let the outside world know that some of its properties has changed.
     */
    itemPropertyChanged?: Function;
  }
}

declare module "sap/m/WheelSlider" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Item from "sap/ui/core/Item";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.73
   *
   * Single select list slider with simple text values, that supports cyclic scrolling and expands/collapses
   * upon user interaction.
   */
  export default class WheelSlider extends Control {
    /**
     * Constructor for a new `WheelSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $WheelSliderSettings
    );
    /**
     * Constructor for a new `WheelSlider`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $WheelSliderSettings
    );

    /**
     * Adds some item to the aggregation {@link #getItems items}.
     */
    addItem(
      /**
       * The item to add; if empty, nothing is inserted
       */
      oItem: Item
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapsed collapsed} event of this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the slider is collapsed.
     */
    attachCollapsed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the slider is expanded.
     */
    attachExpanded(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectedKeyChange selectedKeyChange} event of
     * this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the selected key changes.
     */
    attachSelectedKeyChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the items in the aggregation {@link #getItems items}.
     */
    destroyItems(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:collapsed collapsed} event of this `sap.m.WheelSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCollapsed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:expanded expanded} event of this `sap.m.WheelSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachExpanded(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectedKeyChange selectedKeyChange} event
     * of this `sap.m.WheelSlider`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectedKeyChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.WheelSlider with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, WheelSlider>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:collapsed collapsed} to attached listeners.
     */
    fireCollapsed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:expanded expanded} to attached listeners.
     */
    fireExpanded(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:selectedKeyChange selectedKeyChange} to attached listeners.
     */
    fireSelectedKeyChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The new selected key
         */
        newKey?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getIsCyclic isCyclic}.
     *
     * Indicates whether the slider supports cyclic scrolling.
     *
     * Default value is `true`.
     */
    getIsCyclic(): boolean;
    /**
     * Gets current value of property {@link #getIsExpanded isExpanded}.
     *
     * Indicates whether the slider is currently expanded.
     *
     * Default value is `false`.
     */
    getIsExpanded(): boolean;
    /**
     * Gets content of aggregation {@link #getItems items}.
     *
     * The items of the slider.
     */
    getItems(): Item[];
    /**
     * Gets current value of property {@link #getLabel label}.
     *
     * Defines the descriptive text for the slider, placed as a label above it.
     */
    getLabel(): string;
    /**
     * Returns a metadata object for class sap.m.WheelSlider.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getSelectedKey selectedKey}.
     *
     * Defines the key of the currently selected value of the slider.
     */
    getSelectedKey(): string;
    /**
     * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfItem(
      /**
       * The item whose index is looked for
       */
      oItem: Item
    ): int;
    /**
     * Inserts a item into the aggregation {@link #getItems items}.
     */
    insertItem(
      /**
       * The item to insert; if empty, nothing is inserted
       */
      oItem: Item,
      /**
       * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
       * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
       * the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getItems items}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllItems(): Item[];
    /**
     * Removes a item from the aggregation {@link #getItems items}.
     */
    removeItem(
      /**
       * The item to remove or its index or id
       */
      vItem: int | string | Item
    ): Item;
    /**
     * Sets a new value for property {@link #getIsCyclic isCyclic}.
     *
     * Indicates whether the slider supports cyclic scrolling.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setIsCyclic(
      /**
       * New value for property `isCyclic`
       */
      bIsCyclic?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getIsExpanded isExpanded}.
     *
     * Indicates whether the slider is currently expanded.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setIsExpanded(
      /**
       * New value for property `isExpanded`
       */
      bIsExpanded?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getLabel label}.
     *
     * Defines the descriptive text for the slider, placed as a label above it.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabel(
      /**
       * New value for property `label`
       */
      sLabel?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelectedKey selectedKey}.
     *
     * Defines the key of the currently selected value of the slider.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSelectedKey(
      /**
       * New value for property `selectedKey`
       */
      sSelectedKey?: string
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:collapsed collapsed} event of this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the slider is collapsed.
     */
    attachCollapsed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the slider is expanded.
     */
    attachExpanded(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectedKeyChange selectedKeyChange} event of
     * this `sap.m.WheelSlider`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WheelSlider` itself.
     *
     * Fires when the selected key changes.
     */
    attachSelectedKeyChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WheelSlider` itself
       */
      oListener?: object
    ): this;
  }

  export interface $WheelSliderSettings extends $ControlSettings {
    /**
     * Defines the key of the currently selected value of the slider.
     */
    selectedKey?: string | PropertyBindingInfo;

    /**
     * Indicates whether the slider supports cyclic scrolling.
     */
    isCyclic?: boolean | PropertyBindingInfo;

    /**
     * Defines the descriptive text for the slider, placed as a label above it.
     */
    label?: string | PropertyBindingInfo;

    /**
     * Indicates whether the slider is currently expanded.
     */
    isExpanded?: boolean | PropertyBindingInfo;

    /**
     * The items of the slider.
     */
    items?: Item[] | Item | AggregationBindingInfo;

    /**
     * Fires when the slider is expanded.
     */
    expanded?: Function;

    /**
     * Fires when the slider is collapsed.
     */
    collapsed?: Function;

    /**
     * Fires when the selected key changes.
     */
    selectedKeyChange?: Function;
  }
}

declare module "sap/m/WheelSliderContainer" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import WheelSlider from "sap/m/WheelSlider";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.73
   *
   * A picker list container control used to hold sliders of type {@link sap.m.WheelSlider}.
   */
  export default class WheelSliderContainer extends Control {
    /**
     * Constructor for a new `WheelSliderContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $WheelSliderContainerSettings
    );
    /**
     * Constructor for a new `WheelSliderContainer`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $WheelSliderContainerSettings
    );

    /**
     * Adds some slider to the aggregation {@link #getSliders sliders}.
     */
    addSlider(
      /**
       * The slider to add; if empty, nothing is inserted
       */
      oSlider: WheelSlider
    ): this;
    /**
     * Destroys all the sliders in the aggregation {@link #getSliders sliders}.
     */
    destroySliders(): this;
    /**
     * Creates a new subclass of class sap.m.WheelSliderContainer with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, WheelSliderContainer>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Sets the height of the container. If percentage value is used, the parent container must have specified
     * height.
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getLabelText labelText}.
     *
     * Defines the text of the picker label.
     */
    getLabelText(): string;
    /**
     * Returns a metadata object for class sap.m.WheelSliderContainer.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets content of aggregation {@link #getSliders sliders}.
     *
     * The sliders in the container.
     */
    getSliders(): WheelSlider[];
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Sets the width of the container. The minimum width is 320px.
     */
    getWidth(): CSSSize;
    /**
     * Checks for the provided `sap.m.WheelSlider` in the aggregation {@link #getSliders sliders}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfSlider(
      /**
       * The slider whose index is looked for
       */
      oSlider: WheelSlider
    ): int;
    /**
     * Inserts a slider into the aggregation {@link #getSliders sliders}.
     */
    insertSlider(
      /**
       * The slider to insert; if empty, nothing is inserted
       */
      oSlider: WheelSlider,
      /**
       * The `0`-based index the slider should be inserted at; for a negative value of `iIndex`, the slider is
       * inserted at position 0; for a value greater than the current size of the aggregation, the slider is inserted
       * at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getSliders sliders}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllSliders(): WheelSlider[];
    /**
     * Removes a slider from the aggregation {@link #getSliders sliders}.
     */
    removeSlider(
      /**
       * The slider to remove or its index or id
       */
      vSlider: int | string | WheelSlider
    ): WheelSlider;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Sets the height of the container. If percentage value is used, the parent container must have specified
     * height.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLabelText labelText}.
     *
     * Defines the text of the picker label.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLabelText(
      /**
       * New value for property `labelText`
       */
      sLabelText: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Sets the width of the container. The minimum width is 320px.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth: CSSSize
    ): this;
  }

  export interface $WheelSliderContainerSettings extends $ControlSettings {
    /**
     * Defines the text of the picker label.
     */
    labelText?: string | PropertyBindingInfo;

    /**
     * Sets the width of the container. The minimum width is 320px.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Sets the height of the container. If percentage value is used, the parent container must have specified
     * height.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * The sliders in the container.
     */
    sliders?: WheelSlider[] | WheelSlider | AggregationBindingInfo;
  }
}

declare module "sap/m/Wizard" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { IDynamicPageStickyContent } from "sap/f/library";

  import WizardStep from "sap/m/WizardStep";

  import { PageBackgroundDesign, WizardRenderMode } from "sap/m/library";

  import { ID, CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30
   *
   * Enables users to accomplish a single goal which consists of multiple dependable sub-tasks. Overview:
   * The sap.m.Wizard helps users complete a complex and unfamiliar task by dividing it into sections and
   * guiding the user through it. The wizard has two main areas - a navigation area at the top showing the
   * step sequence and a content area below it. Structure: Navigation Area: The top most area of the wizard
   * is occupied by the navigation area. It shows the sequence of {@link sap.m.WizardStep wizard steps}.
   *
   * 	 - The minimum number of steps is 3 and the maximum is 8 and are stored in the `steps` aggregation.
   *
   * 	 - Steps can be branching depending on choices the user made in their input - this is set by the `enableBranching`
   * 			property.
   * 	 - Steps can have different visual representations - numbers or icons. You can add labels for better
   * 			readability   Content: The content occupies the main part of the page. It can hold any type of input
   * 			controls. The content is kept in {@link sap.m.WizardStep wizard steps}. Next Step Button: The next step
   * 			button is displayed below the content. It can be hidden by setting `showNextButton` to `false` and displayed,
   * 			for example, only after the user has filled all mandatory fields. Usage: When to use:: When the user
   * 			has to accomplish a long or unfamiliar task. When not to use:: When the user has to accomplish a routine
   * 			task that is clear and familiar. When the task has only two steps or less. Responsive Behavior: On mobile
   * 			devices the steps in the StepNavigator are grouped together and overlap. Tapping on them will show a
   * 			popover to select the step to navigate to.
   *
   * When using the sap.m.Wizard in SAP Quartz theme, the breakpoints and layout paddings could be determined
   * by the container's width. To enable this concept and add responsive paddings to the navigation area and
   * to the content of the Wizard control, you may add the following classes depending on your use case: `sapUiResponsivePadding--header`,
   * `sapUiResponsivePadding--content`.
   *
   * As the `sap.m.Wizard` is a layout control, when used in the {@link sap.f.DynamicPage}, the {@link sap.f.DynamicPage}'s
   * `fitContent` property needs to be set to 'true' so that the scroll handling is left to the `sap.m.Wizard`
   * control. Also, in order to achieve the target Fiori design, the `sapUiNoContentPadding` class needs to
   * be added to the {@link sap.f.DynamicPage} as well as `sapUiResponsivePadding--header`, `sapUiResponsivePadding--content`
   * to the `sap.m.Wizard`.
   */
  export default class Wizard
    extends Control
    implements IDynamicPageStickyContent {
    __implements__sap_f_IDynamicPageStickyContent: boolean;
    /**
     * Constructor for a new Wizard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/wizard/ Wizard}
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $WizardSettings
    );
    /**
     * Constructor for a new Wizard.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     * See:
     * 	{@link fiori:https://experience.sap.com/fiori-design-web/wizard/ Wizard}
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $WizardSettings
    );

    /**
     * Adds a new step to the Wizard.
     */
    addStep(
      /**
       * New WizardStep to add to the Wizard.
       */
      oWizardStep: WizardStep
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:complete complete} event of this `sap.m.Wizard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Wizard` itself.
     *
     * The complete event is fired when the user clicks the finish button of the Wizard. The finish button is
     * only available on the last step of the Wizard.
     */
    attachComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Wizard` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stepActivate stepActivate} event of this `sap.m.Wizard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Wizard` itself.
     *
     * The StepActivated event is fired every time a new step is activated.
     */
    attachStepActivate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Wizard` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all aggregated steps in the Wizard.
     */
    destroySteps(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:complete complete} event of this `sap.m.Wizard`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:stepActivate stepActivate} event of this `sap.m.Wizard`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachStepActivate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Discards all progress done from the given step(incl.) to the end of the wizard. The verified state of
     * the steps is returned to the initial provided.
     */
    discardProgress(
      /**
       * The step after which the progress is discarded.
       */
      oStep: WizardStep,
      /**
       * Indicating whether we should preserve next step
       */
      bPreserveNextStep: boolean
    ): this;
    /**
     * Creates a new subclass of class sap.m.Wizard with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Wizard>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:complete complete} to attached listeners.
     */
    fireComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:stepActivate stepActivate} to attached listeners.
     */
    fireStepActivate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The index of the activated step as a parameter. One-based.
         */
        index?: int;
      }
    ): this;
    /**
     * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
     *
     * This property is used to set the background color of a Wizard content. The `Standard` option with the
     * default background color is used, if not specified.
     *
     * Default value is `Standard`.
     */
    getBackgroundDesign():
      | PageBackgroundDesign
      | keyof typeof PageBackgroundDesign;
    /**
     * @SINCE 1.50
     *
     * ID of the element which is the current target of the association {@link #getCurrentStep currentStep},
     * or `null`.
     */
    getCurrentStep(): ID;
    /**
     * @SINCE 1.32
     *
     * Gets current value of property {@link #getEnableBranching enableBranching}.
     *
     * Enables the branching functionality of the Wizard. Branching gives the developer the ability to define
     * multiple routes a user is able to take based on the input in the current step. It is up to the developer
     * to programmatically check for what is the input in the current step and set a concrete next step amongst
     * the available subsequent steps. Note: If this property is set to false, `next` and `subSequentSteps`
     * associations of the WizardStep control are ignored.
     *
     * Default value is `false`.
     */
    getEnableBranching(): boolean;
    /**
     * Returns the finish button text which will be rendered.
     */
    getFinishButtonText(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Determines the height of the Wizard.
     *
     * Default value is `"100%"`.
     */
    getHeight(): CSSSize;
    /**
     * Returns a metadata object for class sap.m.Wizard.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Returns the number of the last activated step in the Wizard.
     */
    getProgress(): number;
    /**
     * Returns the last activated step in the Wizard.
     */
    getProgressStep(): WizardStep;
    /**
     * @EXPERIMENTAL (since 1.84)
     *
     * Gets current value of property {@link #getRenderMode renderMode}.
     *
     * Defines how the steps of the Wizard would be visualized.
     *
     * Default value is `Scroll`.
     */
    getRenderMode(): WizardRenderMode | keyof typeof WizardRenderMode;
    /**
     * Gets current value of property {@link #getShowNextButton showNextButton}.
     *
     * Controls the visibility of the next button. The developers can choose to control the flow of the steps
     * either through the API (with `nextStep` and `previousStep` methods) or let the user click the next button,
     * and control it with `validateStep` or `invalidateStep` methods.
     *
     * Default value is `true`.
     */
    getShowNextButton(): boolean;
    /**
     * Gets content of aggregation {@link #getSteps steps}.
     *
     * The wizard steps to be included in the content of the control.
     */
    getSteps(): WizardStep[];
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Determines the width of the Wizard.
     *
     * Default value is `"auto"`.
     */
    getWidth(): CSSSize;
    /**
     * Goes to the given step. The step must already be activated and visible. You can't use this method on
     * steps that haven't been reached yet.
     */
    goToStep(
      /**
       * The step to go to.
       */
      oStep: WizardStep,
      /**
       * Defines whether the focus should be changed to the first element.
       */
      bFocusFirstStepElement: boolean
    ): this;
    /**
     * Checks for the provided `sap.m.WizardStep` in the aggregation {@link #getSteps steps}. and returns its
     * index if found or -1 otherwise.
     */
    indexOfStep(
      /**
       * The step whose index is looked for
       */
      oStep: WizardStep
    ): int;
    /**
     * Invalidates the given step.
     */
    invalidateStep(
      /**
       * The step to be invalidated.
       */
      oStep: WizardStep
    ): this;
    /**
     * Validates the current step, and moves one step further.
     */
    nextStep(): this;
    /**
     * Discards the current step and goes one step back.
     */
    previousStep(): this;
    /**
     * Removes all steps from the Wizard.
     */
    removeAllSteps(): WizardStep[];
    /**
     * Sets association currentStep to the given step.
     */
    setCurrentStep(
      /**
       * The step of the wizard that will be currently activated (meaning the last step).
       */
      vStepId: WizardStep | String
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets a new value for property {@link #getEnableBranching enableBranching}.
     *
     * Enables the branching functionality of the Wizard. Branching gives the developer the ability to define
     * multiple routes a user is able to take based on the input in the current step. It is up to the developer
     * to programmatically check for what is the input in the current step and set a concrete next step amongst
     * the available subsequent steps. Note: If this property is set to false, `next` and `subSequentSteps`
     * associations of the WizardStep control are ignored.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setEnableBranching(
      /**
       * New value for property `enableBranching`
       */
      bEnableBranching?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getFinishButtonText finishButtonText}.
     *
     * Changes the text of the finish button for the last step. This property can be used only if `showNextButton`
     * is set to true. By default the text of the button is "Review".
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"Review"`.
     */
    setFinishButtonText(
      /**
       * New value for property `finishButtonText`
       */
      sFinishButtonText?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Determines the height of the Wizard.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"100%"`.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * @EXPERIMENTAL (since 1.84)
     *
     * Sets a new value for property {@link #getRenderMode renderMode}.
     *
     * Defines how the steps of the Wizard would be visualized.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `Scroll`.
     */
    setRenderMode(
      /**
       * New value for property `renderMode`
       */
      sRenderMode?: WizardRenderMode | keyof typeof WizardRenderMode
    ): this;
    /**
     * Sets the visibility of the next button.
     */
    setShowNextButton(
      /**
       * True to show the button or false to hide it.
       */
      bValue: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Determines the width of the Wizard.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"auto"`.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
    /**
     * Validates the given step.
     */
    validateStep(
      /**
       * The step to be validated.
       */
      oStep: WizardStep
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:complete complete} event of this `sap.m.Wizard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Wizard` itself.
     *
     * The complete event is fired when the user clicks the finish button of the Wizard. The finish button is
     * only available on the last step of the Wizard.
     */
    attachComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Wizard` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stepActivate stepActivate} event of this `sap.m.Wizard`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.Wizard` itself.
     *
     * The StepActivated event is fired every time a new step is activated.
     */
    attachStepActivate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.Wizard` itself
       */
      oListener?: object
    ): this;
  }

  export interface $WizardSettings extends $ControlSettings {
    /**
     * Determines the width of the Wizard.
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Determines the height of the Wizard.
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * Controls the visibility of the next button. The developers can choose to control the flow of the steps
     * either through the API (with `nextStep` and `previousStep` methods) or let the user click the next button,
     * and control it with `validateStep` or `invalidateStep` methods.
     */
    showNextButton?: boolean | PropertyBindingInfo;

    /**
     * Changes the text of the finish button for the last step. This property can be used only if `showNextButton`
     * is set to true. By default the text of the button is "Review".
     */
    finishButtonText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.32
     *
     * Enables the branching functionality of the Wizard. Branching gives the developer the ability to define
     * multiple routes a user is able to take based on the input in the current step. It is up to the developer
     * to programmatically check for what is the input in the current step and set a concrete next step amongst
     * the available subsequent steps. Note: If this property is set to false, `next` and `subSequentSteps`
     * associations of the WizardStep control are ignored.
     */
    enableBranching?: boolean | PropertyBindingInfo;

    /**
     * This property is used to set the background color of a Wizard content. The `Standard` option with the
     * default background color is used, if not specified.
     */
    backgroundDesign?:
      | (PageBackgroundDesign | keyof typeof PageBackgroundDesign)
      | PropertyBindingInfo;

    /**
     * @EXPERIMENTAL (since 1.84)
     *
     * Defines how the steps of the Wizard would be visualized.
     */
    renderMode?:
      | (WizardRenderMode | keyof typeof WizardRenderMode)
      | PropertyBindingInfo;

    /**
     * The wizard steps to be included in the content of the control.
     */
    steps?: WizardStep[] | WizardStep | AggregationBindingInfo;

    /**
     * @SINCE 1.50
     *
     * This association controls the current activated step of the wizard (meaning the last step) For example
     * if we have A->B->C->D steps, we are on step A and we setCurrentStep(C) A,B and C are going to be activated.
     * D will still remain unvisited. The parameter needs to be a Wizard step that is part of the current Wizard
     */
    currentStep?: WizardStep | string;

    /**
     * The StepActivated event is fired every time a new step is activated.
     */
    stepActivate?: Function;

    /**
     * The complete event is fired when the user clicks the finish button of the Wizard. The finish button is
     * only available on the last step of the Wizard.
     */
    complete?: Function;
  }
}

declare module "sap/m/WizardStep" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { ID, URI } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import {
    PropertyBindingInfo,
    AggregationBindingInfo,
  } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.30
   *
   * A container control used to aggregate user input controls as part of an sap.m.Wizard. Overview: WizardStep
   * gives the developer the ability to validate, invalidate the step and define subsequent steps. The WizardStep
   * control control is supposed to be used only as an aggregation of the {@link sap.m.Wizard Wizard} control,
   * and should not be used as a standalone one. Structure:
   * 	 - Each wizard step has a title. Additionally it can have an icon.
   * 	 - Each wizard step can be validated by setting the `validated` property. This action will trigger the
   * 			rendering of the Next step button. If the execution needs to branch after a given step, you should
   * 			set all possible next steps in the `subsequentSteps` aggregation.
   */
  export default class WizardStep extends Control {
    /**
     * Constructor for a new WizardStep.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $WizardStepSettings
    );
    /**
     * Constructor for a new WizardStep.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $WizardStepSettings
    );

    /**
     * Adds some content to the aggregation {@link #getContent content}.
     */
    addContent(
      /**
       * The content to add; if empty, nothing is inserted
       */
      oContent: Control
    ): this;
    /**
     * @SINCE 1.32
     *
     * Adds some subsequentStep into the association {@link #getSubsequentSteps subsequentSteps}.
     */
    addSubsequentStep(
      /**
       * The subsequentSteps to add; if empty, nothing is inserted
       */
      vSubsequentStep: ID | WizardStep
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:activate activate} event of this `sap.m.WizardStep`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WizardStep` itself.
     *
     * This event is fired on next step activation from the Wizard.
     */
    attachActivate(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WizardStep` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:complete complete} event of this `sap.m.WizardStep`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WizardStep` itself.
     *
     * This event is fired after the user presses the Next button in the Wizard, or on `nextStep` method call
     * from the app developer.
     */
    attachComplete(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WizardStep` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys all the content in the aggregation {@link #getContent content}.
     */
    destroyContent(): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:activate activate} event of this `sap.m.WizardStep`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachActivate(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:complete complete} event of this `sap.m.WizardStep`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachComplete(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Creates a new subclass of class sap.m.WizardStep with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, WizardStep>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Fires event {@link #event:activate activate} to attached listeners.
     */
    fireActivate(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Fires event {@link #event:complete complete} to attached listeners.
     */
    fireComplete(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * Gets content of aggregation {@link #getContent content}.
     *
     * The content of the Wizard Step.
     */
    getContent(): Control[];
    /**
     * Gets current value of property {@link #getIcon icon}.
     *
     * Determines the icon that is displayed for this step. The icon is visualized in the progress navigation
     * part of the Wizard control. **Note:** In order for the icon to be displayed, each step in the Wizard
     * should have this property defined, otherwise the default numbering will be displayed.
     *
     * Default value is `empty string`.
     */
    getIcon(): URI;
    /**
     * Returns a metadata object for class sap.m.WizardStep.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.32
     *
     * ID of the element which is the current target of the association {@link #getNextStep nextStep}, or `null`.
     */
    getNextStep(): ID;
    /**
     * @SINCE 1.54
     *
     * Gets current value of property {@link #getOptional optional}.
     *
     * Indicates whether or not the step is optional. When a step is optional an "(Optional)" label is displayed
     * under the step's title.
     *
     * Default value is `false`.
     */
    getOptional(): boolean;
    /**
     * @SINCE 1.32
     *
     * Returns array of IDs of the elements which are the current targets of the association {@link #getSubsequentSteps
     * subsequentSteps}.
     */
    getSubsequentSteps(): ID[];
    /**
     * Gets current value of property {@link #getTitle title}.
     *
     * Determines the title of the step. The title is visualized in the Wizard control.
     *
     * Default value is `empty string`.
     */
    getTitle(): string;
    /**
     * @SINCE 1.32
     *
     * Gets current value of property {@link #getValidated validated}.
     *
     * Indicates whether or not the step is validated. When a step is validated a Next button is visualized
     * in the Wizard control.
     *
     * Default value is `true`.
     */
    getValidated(): boolean;
    /**
     * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
     * its index if found or -1 otherwise.
     */
    indexOfContent(
      /**
       * The content whose index is looked for
       */
      oContent: Control
    ): int;
    /**
     * Inserts a content into the aggregation {@link #getContent content}.
     */
    insertContent(
      /**
       * The content to insert; if empty, nothing is inserted
       */
      oContent: Control,
      /**
       * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
       * is inserted at position 0; for a value greater than the current size of the aggregation, the content
       * is inserted at the last position
       */
      iIndex: int
    ): this;
    /**
     * Removes all the controls from the aggregation {@link #getContent content}.
     *
     * Additionally, it unregisters them from the hosting UIArea.
     */
    removeAllContent(): Control[];
    /**
     * @SINCE 1.32
     *
     * Removes all the controls in the association named {@link #getSubsequentSteps subsequentSteps}.
     */
    removeAllSubsequentSteps(): ID[];
    /**
     * Removes a content from the aggregation {@link #getContent content}.
     */
    removeContent(
      /**
       * The content to remove or its index or id
       */
      vContent: int | string | Control
    ): Control;
    /**
     * @SINCE 1.32
     *
     * Removes an subsequentStep from the association named {@link #getSubsequentSteps subsequentSteps}.
     */
    removeSubsequentStep(
      /**
       * The subsequentStep to be removed or its index or ID
       */
      vSubsequentStep: int | ID | WizardStep
    ): ID;
    /**
     * Sets a new value for property {@link #getIcon icon}.
     *
     * Determines the icon that is displayed for this step. The icon is visualized in the progress navigation
     * part of the Wizard control. **Note:** In order for the icon to be displayed, each step in the Wizard
     * should have this property defined, otherwise the default numbering will be displayed.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setIcon(
      /**
       * New value for property `icon`
       */
      sIcon?: URI
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets the associated {@link #getNextStep nextStep}.
     */
    setNextStep(
      /**
       * ID of an element which becomes the new target of this nextStep association; alternatively, an element
       * instance may be given
       */
      oNextStep: ID | WizardStep
    ): this;
    /**
     * @SINCE 1.54
     *
     * Sets a new value for property {@link #getOptional optional}.
     *
     * Indicates whether or not the step is optional. When a step is optional an "(Optional)" label is displayed
     * under the step's title.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setOptional(
      /**
       * New value for property `optional`
       */
      bOptional?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getTitle title}.
     *
     * Determines the title of the step. The title is visualized in the Wizard control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTitle(
      /**
       * New value for property `title`
       */
      sTitle?: string
    ): this;
    /**
     * @SINCE 1.32
     *
     * Sets a new value for property {@link #getValidated validated}.
     *
     * Indicates whether or not the step is validated. When a step is validated a Next button is visualized
     * in the Wizard control.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `true`.
     */
    setValidated(
      /**
       * New value for property `validated`
       */
      bValidated?: boolean
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:activate activate} event of this `sap.m.WizardStep`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WizardStep` itself.
     *
     * This event is fired on next step activation from the Wizard.
     */
    attachActivate(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WizardStep` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:complete complete} event of this `sap.m.WizardStep`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.m.WizardStep` itself.
     *
     * This event is fired after the user presses the Next button in the Wizard, or on `nextStep` method call
     * from the app developer.
     */
    attachComplete(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: Function,
      /**
       * Context object to call the event handler with. Defaults to this `sap.m.WizardStep` itself
       */
      oListener?: object
    ): this;
  }

  export interface $WizardStepSettings extends $ControlSettings {
    /**
     * Determines the title of the step. The title is visualized in the Wizard control.
     */
    title?: string | PropertyBindingInfo;

    /**
     * Determines the icon that is displayed for this step. The icon is visualized in the progress navigation
     * part of the Wizard control. **Note:** In order for the icon to be displayed, each step in the Wizard
     * should have this property defined, otherwise the default numbering will be displayed.
     */
    icon?: URI | PropertyBindingInfo;

    /**
     * @SINCE 1.32
     *
     * Indicates whether or not the step is validated. When a step is validated a Next button is visualized
     * in the Wizard control.
     */
    validated?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.54
     *
     * Indicates whether or not the step is optional. When a step is optional an "(Optional)" label is displayed
     * under the step's title.
     */
    optional?: boolean | PropertyBindingInfo;

    /**
     * The content of the Wizard Step.
     */
    content?: Control[] | Control | AggregationBindingInfo;

    /**
     * @SINCE 1.32
     *
     * This association is used only when the `enableBranching` property of the Wizard is set to true. Use the
     * association to store the next steps that are about to come after the current. If this is going to be
     * a final step - leave this association empty.
     */
    subsequentSteps?: Array<WizardStep | string>;

    /**
     * @SINCE 1.32
     *
     * The next step to be taken. It must be defined in order for the previous step to be completed.
     */
    nextStep?: WizardStep | string;

    /**
     * This event is fired after the user presses the Next button in the Wizard, or on `nextStep` method call
     * from the app developer.
     */
    complete?: Function;

    /**
     * This event is fired on next step activation from the Wizard.
     */
    activate?: Function;
  }
}

declare namespace sap {
  /**
   * The main UI5 control library, with responsive controls that can be used in touch devices as well as desktop
   * browsers.
   */
  namespace m {
    /**
     * @SINCE 1.11.0
     *
     *
     * ```javascript
     *
     * `sap.m.Support` shows the technical information for SAPUI5 Mobile Applications.
     * This technical information includes
     *    * SAPUI5 Version
     *    * User Agent
     *    * Configurations (Bootstrap and Computed)
     *    * URI parameters
     *    * All loaded module names
     *
     * In order to show the device information, the user must follow the following gestures.
     *    1 - Hold two finger for 3 seconds minimum.
     *    2 - Tab with a third finger while holding the first two fingers.
     *
     * NOTE: This class is internal and all its functions must not be used by an application
     *
     * As `sap.m.Support` is a static class, a `sap.ui.requireSync("sap/m/Support");`
     * statement must be implicitly executed before the class is used.
     *
     *
     * Enable Support:
     * --------------------------------------------------
     * //import library
     * sap.ui.requireSync("sap/m/Support");
     *
     * //By default after require, support is enabled but implicitly we can call
     * sap.m.Support.on();
     *
     * Disable Support:
     * --------------------------------------------------
     * sap.m.Support.off();
     * ```
     */
    export const Support: undefined;

    /**
     * @SINCE 1.20
     *
     * Hide the soft keyboard.
     */
    function closeKeyboard(): void;
    /**
     * @SINCE 1.10
     * @deprecated (since 1.12) - UI5 returns null for invalid date
     *
     * Returns invalid date value of UI5.
     */
    function getInvalidDate(): null;
    /**
     * @SINCE 1.11
     *
     * Search given control's parents and try to find iScroll.
     */
    function getIScroll(
      /**
       * Control to start the search at
       */
      oControl: import("sap/ui/core/Control").default
    ): Object | undefined;
    /**
     * @SINCE 1.10
     *
     * Finds default locale settings once and returns always the same.
     *
     * We should not need to create new instance to get same locale settings This method keeps the locale instance
     * in the scope and returns the same after first run
     */
    function getLocale(): import("sap/ui/core/Locale").default;
    /**
     * @SINCE 1.10
     *
     * Finds default locale data once and returns always the same.
     */
    function getLocaleData(): import("sap/ui/core/LocaleData").default;
    /**
     * @SINCE 1.11
     *
     * Search given control's parents and try to find a ScrollDelegate.
     */
    function getScrollDelegate(
      /**
       * Starting point for the search
       */
      oControl: import("sap/ui/core/Control").default,
      /**
       * Whether the search should stop on component level (`false`) or not
       */
      bGlobal: boolean
    ): Object | undefined;
    /**
     * @SINCE 1.10
     *
     * Checks if the given parameter is a valid JsDate Object.
     */
    function isDate(
      /**
       * Any variable to test.
       */
      value: any
    ): boolean;
    /**
     * @SINCE 1.12
     *
     * Helper for rendering themable background.
     */
    namespace BackgroundHelper {
      /**
       * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background
       * color and background image. To be called by control renderers supporting the global themable background
       * image within their root tag, before they call openEnd, voidEnd, writeClasses() and writeStyles().
       */
      function addBackgroundColorStyles(
        /**
         * The RenderManager
         */
        rm: import("sap/ui/core/RenderManager").default,
        /**
         * A configured custom background color for the control, if any
         */
        sBgColor?: import("sap/ui/core/library").CSSColor,
        /**
         * The configured custom background image for the control, if any
         */
        sBgImgUrl?: import("sap/ui/core/library").URI
      ): void;
      /**
       * Renders an HTML tag into the given RenderManager which carries the background image which is either configured
       * and given or coming from the current theme. Should be called right after the opening root tag has been
       * completed, so this is the first child element inside the control.
       */
      function renderBackgroundImageTag(
        /**
         * The RenderManager
         */
        rm: import("sap/ui/core/RenderManager").default,
        /**
         * Control within which the tag will be rendered; its ID will be used to generate the element ID
         */
        oControl: import("sap/ui/core/Control").default,
        /**
         * A CSS class or an array of CSS classes to add to the element
         */
        vCssClass: string | string[],
        /**
         * The image of a configured background image; if this is not given, the theme background will be used and
         * also the other settings are ignored.
         */
        sBgImgUrl?: import("sap/ui/core/library").URI,
        /**
         * Whether the background image should be repeated/tiled (or stretched)
         */
        bRepeat?: boolean,
        /**
         * The background image opacity, if any
         */
        fOpacity?: float
      ): void;
    }
    /**
     * @SINCE 1.12
     *
     * Helper for Images.
     */
    namespace ImageHelper {
      /**
       * Creates or updates an image control.
       */
      function getImageControl(
        /**
         * UD of the image to be dealt with.
         */
        sImgId: string,
        /**
         * The image to update. If undefined, a new image will be created.
         */
        oImageControl: import("sap/m/Image").default,
        /**
         * oImageControl's parentControl.
         */
        oParent: import("sap/ui/core/Control").default,
        /**
         * Settings for the image control; the `src` property MUST be contained; the keys of the object must be
         * valid names of image settings
         */
        mProperties: object,
        /**
         * Array of CSS classes which will be added if the image needs to be created.
         */
        aCssClassesToAdd: string[],
        /**
         * All CSS classes that oImageControl has and which are contained in this array are removed before adding
         * the CSS classes listed in aCssClassesToAdd.
         */
        aCssClassesToRemove: string[]
      ): import("sap/m/Image").default | import("sap/ui/core/Icon").default;
    }
    /**
     * @SINCE 1.21.2
     *
     * Suggestion helper for `sap.m.Input` fields when used with an OData model.
     *
     * Creates a multi-column suggest list for an `sap.m.Input` field based on a `ValueList` annotation. The
     * `ValueList` annotation will be resolved via the binding information of the input field.
     *
     * If the annotation describes multiple input parameters, the suggest provider will resolve all of these
     * relative to the context of the input field and use them for the suggest query. The suggest provider will
     * write all values that are described as output parameters back to the model (relative to the context of
     * the input field). This can only be done if the model runs in "TwoWay" binding mode. Both features can
     * be switched off via the `bResolveInput/bResolveOutput` parameter of the suggest function.
     */
    namespace InputODataSuggestProvider {
      /**/
      function suggest(
        oEvent: import("sap/ui/base/Event").default,
        /**
         * SuggestProvider resolves all input parameters for the data query
         */
        bResolveInput: boolean,
        /**
         * SuggestProvider writes back all output parameters.
         */
        bResolveOutput: boolean,
        /**
         * If iLength is provided only these number of entries will be requested.
         */
        iLength: int
      ): void;
    }
    /**
     * @SINCE 1.16.7
     *
     * Helper for Popups.
     */
    namespace PopupHelper {
      /**
       * Converts the given percentage value to an absolute number based on the given base size.
       */
      function calcPercentageSize(
        /**
         * A percentage value in string format, for example "25%"
         */
        sPercentage: string,
        /**
         * A float number which the calculation is based on.
         */
        fBaseSize: float
      ): int;
    }
    /**
     * Touch helper.
     */
    namespace touch {
      /**
       * Given a list of touches, count the number of touches related with the given element.
       */
      function countContained(
        /**
         * The list of touch objects to search.
         */
        oTouchList: TouchList,
        /**
         * A jQuery element or an element reference or an element id.
         */
        vElement: jQuery | Element | string
      ): number;
      /**
       * Given a list of touch objects, find the touch that matches the given one.
       */
      function find(
        /**
         * The list of touch objects to search.
         */
        oTouchList: TouchList,
        /**
         * A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch
         * session.
         */
        oTouch: Touch | number
      ): object | undefined;
    }

    /**
     * Helper Class for implementing the IBar interface. Should be created once per IBar instance.
     */
    class IBarInPageEnabler {
      /**/
      constructor();

      /**
       * Adds the sapMBarChildClass to a control.
       */
      static addChildClassTo(
        /**
         * The sap.ui.core.Control to which the sapMBarChildClass will be added
         */
        oControl: import("sap/ui/core/Control").default
      ): void;
      /**
       * Renders the tooltip for the given control
       */
      static renderTooltip(
        /**
         * the RenderManager that can be used for writing to the render output buffer.
         */
        oRM: import("sap/ui/core/RenderManager").default,
        /**
         * an object representation of the control that should be rendered.
         */
        oControl: import("sap/ui/core/Control").default
      ): void;
    }
    /**
     * @SINCE 1.48.0
     *
     * The public facade of the {@link sap.m.SelectionDetailsItem} element.
     */
    class SelectionDetailsItemFacade {
      /**
       * Describes the public facade of the {@link sap.m.SelectionDetailsItem} element.
       */
      constructor();

      /**
       * Adds some action to the aggregation {@link #getActions actions}.
       */
      addAction(
        /**
         * The action to add; if empty, nothing is inserted
         */
        oAction: import("sap/ui/core/Item").default
      ): this;
      /**
       * Gets current value of property {@link #getEnableNav enableNav}.
       *
       * Determines whether or not the item is active and a navigation event is triggered on press.
       *
       * Default value is `false`.
       */
      getEnableNav(): boolean;
      /**
       * Removes a action from the aggregation {@link #getActions actions}.
       */
      removeAction(
        /**
         * The action to remove or its index or id
         */
        vAction: int | string | import("sap/ui/core/Item").default
      ): import("sap/ui/core/Item").default;
      /**
       * Sets a new value for property {@link #getEnableNav enableNav}.
       *
       * Determines whether or not the item is active and a navigation event is triggered on press.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `false`.
       */
      setEnableNav(
        /**
         * New value for property `enableNav`
         */
        bEnableNav?: boolean
      ): this;
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/f/library": undefined;

    "sap/m/ActionListItem": undefined;

    "sap/m/ActionSelect": undefined;

    "sap/m/ActionSheet": undefined;

    "sap/m/App": undefined;

    "sap/m/Avatar": undefined;

    "sap/m/AvatarColor": undefined;

    "sap/m/AvatarImageFitType": undefined;

    "sap/m/AvatarShape": undefined;

    "sap/m/AvatarSize": undefined;

    "sap/m/AvatarType": undefined;

    "sap/m/BadgeCustomData": undefined;

    "sap/m/BadgeEnabler": undefined;

    "sap/m/Bar": undefined;

    "sap/m/BarInPageEnabler": undefined;

    "sap/m/Breadcrumbs": undefined;

    "sap/m/BusyDialog": undefined;

    "sap/m/BusyIndicator": undefined;

    "sap/m/Button": undefined;

    "sap/m/Carousel": undefined;

    "sap/m/CarouselLayout": undefined;

    "sap/m/CheckBox": undefined;

    "sap/m/ColorPalette": undefined;

    "sap/m/ColorPalettePopover": undefined;

    "sap/m/Column": undefined;

    "sap/m/ColumnListItem": undefined;

    "sap/m/ComboBox": undefined;

    "sap/m/ComboBoxBase": undefined;

    "sap/m/ComboBoxTextField": undefined;

    "sap/m/CustomListItem": undefined;

    "sap/m/CustomTile": undefined;

    "sap/m/CustomTreeItem": undefined;

    "sap/m/DatePicker": undefined;

    "sap/m/DateRangeSelection": undefined;

    "sap/m/DateTimeField": undefined;

    "sap/m/DateTimeInput": undefined;

    "sap/m/DateTimePicker": undefined;

    "sap/m/Dialog": undefined;

    "sap/m/DisplayListItem": undefined;

    "sap/m/DraftIndicator": undefined;

    "sap/m/ExpandableText": undefined;

    "sap/m/FacetFilter": undefined;

    "sap/m/FacetFilterItem": undefined;

    "sap/m/FacetFilterList": undefined;

    "sap/m/FeedContent": undefined;

    "sap/m/FeedInput": undefined;

    "sap/m/FeedListItem": undefined;

    "sap/m/FeedListItemAction": undefined;

    "sap/m/FlexBox": undefined;

    "sap/m/FlexItemData": undefined;

    "sap/m/FormattedText": undefined;

    "sap/m/GenericTag": undefined;

    "sap/m/GenericTile": undefined;

    "sap/m/GroupHeaderListItem": undefined;

    "sap/m/GrowingEnablement": undefined;

    "sap/m/GrowingList": undefined;

    "sap/m/HBox": undefined;

    "sap/m/HeaderContainer": undefined;

    "sap/m/IconTabBar": undefined;

    "sap/m/IconTabFilter": undefined;

    "sap/m/IconTabHeader": undefined;

    "sap/m/IconTabSeparator": undefined;

    "sap/m/Image": undefined;

    "sap/m/ImageContent": undefined;

    "sap/m/Input": undefined;

    "sap/m/InputBase": undefined;

    "sap/m/InputListItem": undefined;

    "sap/m/InstanceManager": undefined;

    "sap/m/Label": undefined;

    "sap/m/library": undefined;

    "sap/m/LightBox": undefined;

    "sap/m/LightBoxItem": undefined;

    "sap/m/Link": undefined;

    "sap/m/List": undefined;

    "sap/m/ListBase": undefined;

    "sap/m/ListItemBase": undefined;

    "sap/m/MaskInput": undefined;

    "sap/m/MaskInputRule": undefined;

    "sap/m/Menu": undefined;

    "sap/m/MenuButton": undefined;

    "sap/m/MenuItem": undefined;

    "sap/m/MessageBox": undefined;

    "sap/m/MessageItem": undefined;

    "sap/m/MessagePage": undefined;

    "sap/m/MessagePopover": undefined;

    "sap/m/MessagePopoverItem": undefined;

    "sap/m/MessageStrip": undefined;

    "sap/m/MessageToast": undefined;

    "sap/m/MessageView": undefined;

    "sap/m/MultiComboBox": undefined;

    "sap/m/MultiEditField": undefined;

    "sap/m/MultiInput": undefined;

    "sap/m/NavContainer": undefined;

    "sap/m/NewsContent": undefined;

    "sap/m/NotificationList": undefined;

    "sap/m/NotificationListBase": undefined;

    "sap/m/NotificationListGroup": undefined;

    "sap/m/NotificationListItem": undefined;

    "sap/m/NumericContent": undefined;

    "sap/m/ObjectAttribute": undefined;

    "sap/m/ObjectHeader": undefined;

    "sap/m/ObjectIdentifier": undefined;

    "sap/m/ObjectListItem": undefined;

    "sap/m/ObjectMarker": undefined;

    "sap/m/ObjectNumber": undefined;

    "sap/m/ObjectStatus": undefined;

    "sap/m/OverflowToolbar": undefined;

    "sap/m/OverflowToolbarButton": undefined;

    "sap/m/OverflowToolbarLayoutData": undefined;

    "sap/m/OverflowToolbarToggleButton": undefined;

    "sap/m/P13nColumnsItem": undefined;

    "sap/m/P13nColumnsPanel": undefined;

    "sap/m/P13nConditionPanel": undefined;

    "sap/m/P13nDialog": undefined;

    "sap/m/P13nDimMeasureItem": undefined;

    "sap/m/P13nDimMeasurePanel": undefined;

    "sap/m/P13nFilterItem": undefined;

    "sap/m/P13nFilterPanel": undefined;

    "sap/m/P13nGroupItem": undefined;

    "sap/m/P13nGroupPanel": undefined;

    "sap/m/P13nItem": undefined;

    "sap/m/P13nPanel": undefined;

    "sap/m/P13nSortItem": undefined;

    "sap/m/P13nSortPanel": undefined;

    "sap/m/Page": undefined;

    "sap/m/PageAccessibleLandmarkInfo": undefined;

    "sap/m/PagingButton": undefined;

    "sap/m/Panel": undefined;

    "sap/m/PDFViewer": undefined;

    "sap/m/PlanningCalendar": undefined;

    "sap/m/PlanningCalendarLegend": undefined;

    "sap/m/PlanningCalendarRow": undefined;

    "sap/m/PlanningCalendarView": undefined;

    "sap/m/plugins/ColumnResizer": undefined;

    "sap/m/plugins/DataStateIndicator": undefined;

    "sap/m/plugins/PasteProvider": undefined;

    "sap/m/Popover": undefined;

    "sap/m/ProgressIndicator": undefined;

    "sap/m/PullToRefresh": undefined;

    "sap/m/QuickView": undefined;

    "sap/m/QuickViewBase": undefined;

    "sap/m/QuickViewCard": undefined;

    "sap/m/QuickViewGroup": undefined;

    "sap/m/QuickViewGroupElement": undefined;

    "sap/m/QuickViewPage": undefined;

    "sap/m/RadioButton": undefined;

    "sap/m/RadioButtonGroup": undefined;

    "sap/m/RangeSlider": undefined;

    "sap/m/RatingIndicator": undefined;

    "sap/m/ResponsivePopover": undefined;

    "sap/m/ResponsiveScale": undefined;

    "sap/m/routing/RouteMatchedHandler": undefined;

    "sap/m/routing/Router": undefined;

    "sap/m/routing/TargetHandler": undefined;

    "sap/m/routing/Targets": undefined;

    "sap/m/ScrollContainer": undefined;

    "sap/m/SearchField": undefined;

    "sap/m/SegmentedButton": undefined;

    "sap/m/SegmentedButtonItem": undefined;

    "sap/m/Select": undefined;

    "sap/m/SelectDialog": undefined;

    "sap/m/SelectionDetails": undefined;

    "sap/m/SelectionDetailsFacade": undefined;

    "sap/m/SelectionDetailsItem": undefined;

    "sap/m/SelectionDetailsItemLine": undefined;

    "sap/m/SelectList": undefined;

    "sap/m/semantic/AddAction": undefined;

    "sap/m/semantic/CancelAction": undefined;

    "sap/m/semantic/DeleteAction": undefined;

    "sap/m/semantic/DetailPage": undefined;

    "sap/m/semantic/DiscussInJamAction": undefined;

    "sap/m/semantic/EditAction": undefined;

    "sap/m/semantic/FavoriteAction": undefined;

    "sap/m/semantic/FilterAction": undefined;

    "sap/m/semantic/FilterSelect": undefined;

    "sap/m/semantic/FlagAction": undefined;

    "sap/m/semantic/ForwardAction": undefined;

    "sap/m/semantic/FullscreenPage": undefined;

    "sap/m/semantic/GroupAction": undefined;

    "sap/m/semantic/GroupSelect": undefined;

    "sap/m/semantic/MainAction": undefined;

    "sap/m/semantic/MasterPage": undefined;

    "sap/m/semantic/MessagesIndicator": undefined;

    "sap/m/semantic/MultiSelectAction": undefined;

    "sap/m/semantic/NegativeAction": undefined;

    "sap/m/semantic/OpenInAction": undefined;

    "sap/m/semantic/PositiveAction": undefined;

    "sap/m/semantic/PrintAction": undefined;

    "sap/m/semantic/SaveAction": undefined;

    "sap/m/semantic/SemanticButton": undefined;

    "sap/m/semantic/SemanticControl": undefined;

    "sap/m/semantic/SemanticPage": undefined;

    "sap/m/semantic/SemanticSelect": undefined;

    "sap/m/semantic/SemanticToggleButton": undefined;

    "sap/m/semantic/SendEmailAction": undefined;

    "sap/m/semantic/SendMessageAction": undefined;

    "sap/m/semantic/ShareInJamAction": undefined;

    "sap/m/semantic/ShareMenuPage": undefined;

    "sap/m/semantic/SortAction": undefined;

    "sap/m/semantic/SortSelect": undefined;

    "sap/m/Shell": undefined;

    "sap/m/SinglePlanningCalendar": undefined;

    "sap/m/SinglePlanningCalendarDayView": undefined;

    "sap/m/SinglePlanningCalendarMonthView": undefined;

    "sap/m/SinglePlanningCalendarView": undefined;

    "sap/m/SinglePlanningCalendarWeekView": undefined;

    "sap/m/SinglePlanningCalendarWorkWeekView": undefined;

    "sap/m/Slider": undefined;

    "sap/m/SliderTooltipBase": undefined;

    "sap/m/SlideTile": undefined;

    "sap/m/SplitApp": undefined;

    "sap/m/SplitButton": undefined;

    "sap/m/SplitContainer": undefined;

    "sap/m/StandardListItem": undefined;

    "sap/m/StandardTile": undefined;

    "sap/m/StandardTreeItem": undefined;

    "sap/m/StepInput": undefined;

    "sap/m/SuggestionItem": undefined;

    "sap/m/Switch": undefined;

    "sap/m/TabContainer": undefined;

    "sap/m/TabContainerItem": undefined;

    "sap/m/Table": undefined;

    "sap/m/TablePersoController": undefined;

    "sap/m/TablePersoDialog": undefined;

    "sap/m/TablePersoProvider": undefined;

    "sap/m/TableSelectDialog": undefined;

    "sap/m/Text": undefined;

    "sap/m/TextArea": undefined;

    "sap/m/Tile": undefined;

    "sap/m/TileContainer": undefined;

    "sap/m/TileContent": undefined;

    "sap/m/TimePicker": undefined;

    "sap/m/TimePickerClocks": undefined;

    "sap/m/TimePickerInputs": undefined;

    "sap/m/TimePickerSliders": undefined;

    "sap/m/Title": undefined;

    "sap/m/ToggleButton": undefined;

    "sap/m/Token": undefined;

    "sap/m/Tokenizer": undefined;

    "sap/m/Toolbar": undefined;

    "sap/m/ToolbarLayoutData": undefined;

    "sap/m/ToolbarSeparator": undefined;

    "sap/m/ToolbarSpacer": undefined;

    "sap/m/Tree": undefined;

    "sap/m/TreeItemBase": undefined;

    "sap/m/upload/Uploader": undefined;

    "sap/m/upload/UploaderHttpRequestMethod": undefined;

    "sap/m/upload/UploadSet": undefined;

    "sap/m/upload/UploadSetItem": undefined;

    "sap/m/UploadCollection": undefined;

    "sap/m/UploadCollectionItem": undefined;

    "sap/m/UploadCollectionParameter": undefined;

    "sap/m/UploadCollectionToolbarPlaceholder": undefined;

    "sap/m/VBox": undefined;

    "sap/m/ViewSettingsCustomItem": undefined;

    "sap/m/ViewSettingsCustomTab": undefined;

    "sap/m/ViewSettingsDialog": undefined;

    "sap/m/ViewSettingsFilterItem": undefined;

    "sap/m/ViewSettingsItem": undefined;

    "sap/m/WheelSlider": undefined;

    "sap/m/WheelSliderContainer": undefined;

    "sap/m/Wizard": undefined;

    "sap/m/WizardStep": undefined;
  }
}
