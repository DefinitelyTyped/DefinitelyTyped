// Type definitions for 'Google Google Search Console URL Testing Tools API' 1.0
// Project: https://developers.google.com/webmaster-tools/search-console-api/
// Definitions by: Bolisov Alexey <https://github.com/Bolisov>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

// IMPORTANT. 
// This file was generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
// Generated from: https://searchconsole.googleapis.com/$discovery/rest?version=v1

/// <reference types="gapi.client" />

declare namespace gapi.client.searchconsole {
    
    interface BlockedResource {
        // URL of the blocked resource.
        url?: string;
    }
    
    interface TestStatus {
        // Status of the test.
        status?: string;
        // Error details if applicable.
        details?: string;
    }
    
    interface Image {
        // The mime-type of the image data.
        mimeType?: string;
        // Image data in format determined by the mime type. Currently, the format
        // will always be "image/png", but this might change in the future.
        data?: string;
    }
    
    interface RunMobileFriendlyTestRequest {
        // URL for inspection.
        url?: string;
        // Whether or not screenshot is requested. Default is false.
        requestScreenshot?: boolean;
    }
    
    interface MobileFriendlyIssue {
        // Rule violated.
        rule?: string;
    }
    
    interface RunMobileFriendlyTestResponse {
        // Information about embedded resources issues.
        resourceIssues?: ResourceIssue[];
        // Final state of the test, can be either complete or an error.
        testStatus?: TestStatus;
        // Test verdict, whether the page is mobile friendly or not.
        mobileFriendliness?: string;
        // List of mobile-usability issues.
        mobileFriendlyIssues?: MobileFriendlyIssue[];
        // Screenshot of the requested URL.
        screenshot?: Image;
    }
    
    interface ResourceIssue {
        // Describes a blocked resource issue.
        blockedResource?: BlockedResource;
    }
    
    interface MobileFriendlyTestResource {
        // Runs Mobile-Friendly Test for a given URL.
        run(request: {        
            // Pretty-print response.
            pp?: boolean;
            // OAuth bearer token.
            bearer_token?: string;
            // OAuth 2.0 token for the current user.
            oauth_token?: string;
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string;
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean;
            // Selector specifying which fields to include in a partial response.
            fields?: string;
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string;
            // V1 error format.
            "$.xgafv"?: string;
            // JSONP
            callback?: string;
            // Data format for response.
            alt?: string;
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string;
            // OAuth access token.
            access_token?: string;
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string;
        }): gapi.client.Request<RunMobileFriendlyTestResponse>;        
        
    }
    
    interface UrlTestingToolsResource {
        mobileFriendlyTest: MobileFriendlyTestResource;
    }
}

declare namespace gapi.client {
    // Load Google Search Console URL Testing Tools API v1
    function load(name: "searchconsole", version: "v1"): PromiseLike<void>;    
    function load(name: "searchconsole", version: "v1", callback: () => any): void;    
    
    const urlTestingTools: gapi.client.searchconsole.UrlTestingToolsResource; 
    
}
